///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            27/Mar/2014  17:05:22 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\Texas Instruments\Z-Stack Lighting             /
//                          1.0.2\Components\stack\nwk\BindingTable.c         /
//    Command line       =  -f "D:\Texas Instruments\Z-Stack Lighting         /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ      /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f "D:\Texas        /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO     /
//                          -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f "D:\Texas              /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wZCL.cfg" "D:\Texas           /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Components\stack\nwk\BindingTable.c" -D     /
//                          FEATURE_GREEN_POWER -D SECURE=1 -D                /
//                          TC_LINKKEY_JOIN -D ZDSECMGR_TC_DEVICE_MAX=2 -D    /
//                          NV_RESTORE -D HOLD_AUTO_START -D INTER_PAN -D     /
//                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D             /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D MT_ZDO_CB_FUNC -D   /
//                          MT_UTIL_FUNC -D MT_ZDO_MGMT -D LCD_SUPPORTED -D   /
//                          HAL_LCD=FALSE -D HAL_KEY=FALSE -D ZCL_BASIC -D    /
//                          ZCL_READ -D ZCL_WRITE -D ZCL_IDENTIFY -D          /
//                          ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D         /
//                          ZCL_LIGHT_LINK_ENHANCE -D ZCL_LEVEL_CTRL -D       /
//                          ZCL_COLOR_CTRL -D xMAX_CHANNELS_24GHZ=0x02108800  /
//                          -lC "D:\Texas Instruments\Z-Stack Lighting        /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Bridge /
//                          EB-Pro\List\" -lA "D:\Texas Instruments\Z-Stack   /
//                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC25 /
//                          3x\BridgeEB-Pro\List\" --diag_suppress            /
//                          Pe001,Pa010 -o "D:\Texas Instruments\Z-Stack      /
//                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC25 /
//                          3x\BridgeEB-Pro\Obj\" -e --debug --core=plain     /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "D:\Texas                 /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\" -I   /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\Sou /
//                          rce\" -I "D:\Texas Instruments\Z-Stack Lighting   /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          Source\" -I "D:\Texas Instruments\Z-Stack         /
//                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC25 /
//                          3x\..\..\..\HomeAutomation\Source\" -I "D:\Texas  /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\HomeAutomation\SampleLight\Source\" -I         /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\ZMain\TI2530DB\" -I "D:\Texas                  /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\hal\include\" -I "D:\Texas    /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\hal\target\CC2530EB\" -I      /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\include\" -I "D:\Texas    /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\high_level\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\low_level\srf04\" -I      /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\low_level\srf04\single_ch /
//                          ip\" -I "D:\Texas Instruments\Z-Stack Lighting    /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mt\" -I "D:\Texas             /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\osal\include\" -I "D:\Texas   /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\services\saddr\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\services\sdata\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\af\" -I "D:\Texas       /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\nwk\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sapi\" -I "D:\Texas     /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sec\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sys\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\zcl\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\zdo\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\zmac\" -I "D:\Texas           /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\zmac\f8w\" -Ohz               /
//                          --require_prototypes                              /
//    List file          =  D:\Texas Instruments\Z-Stack Lighting             /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Bridge /
//                          EB-Pro\List\BindingTable.s51                      /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME BindingTable

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK8_C_TWO
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??BindInitNV?relay
        FUNCTION ??BindInitNV?relay,0203H
        PUBLIC ??BindRestoreFromNV?relay
        FUNCTION ??BindRestoreFromNV?relay,0203H
        PUBLIC ??BindSetDefaultNV?relay
        FUNCTION ??BindSetDefaultNV?relay,0203H
        PUBLIC ??BindWriteNV?relay
        FUNCTION ??BindWriteNV?relay,0203H
        PUBLIC ??GetBindingTableEntry?relay
        FUNCTION ??GetBindingTableEntry?relay,0203H
        PUBLIC ??InitBindingTable?relay
        FUNCTION ??InitBindingTable?relay,0203H
        PUBLIC ??bindAddClusterIdToList?relay
        FUNCTION ??bindAddClusterIdToList?relay,0203H
        PUBLIC ??bindAddEntry?relay
        FUNCTION ??bindAddEntry?relay,0203H
        PUBLIC ??bindAddrIndexGet?relay
        FUNCTION ??bindAddrIndexGet?relay,0203H
        PUBLIC ??bindAddrMgrLocalLoad?relay
        FUNCTION ??bindAddrMgrLocalLoad?relay,0203H
        PUBLIC ??bindAddressClear?relay
        FUNCTION ??bindAddressClear?relay,0203H
        PUBLIC ??bindCapacity?relay
        FUNCTION ??bindCapacity?relay,0203H
        PUBLIC ??bindFind?relay
        FUNCTION ??bindFind?relay,0203H
        PUBLIC ??bindFindEmpty?relay
        FUNCTION ??bindFindEmpty?relay,0203H
        PUBLIC ??bindFindExisting?relay
        FUNCTION ??bindFindExisting?relay,0203H
        PUBLIC ??bindIsClusterIDinList?relay
        FUNCTION ??bindIsClusterIDinList?relay,0203H
        PUBLIC ??bindNumBoundTo?relay
        FUNCTION ??bindNumBoundTo?relay,0203H
        PUBLIC ??bindNumOfEntries?relay
        FUNCTION ??bindNumOfEntries?relay,0203H
        PUBLIC ??bindNumReflections?relay
        FUNCTION ??bindNumReflections?relay,0203H
        PUBLIC ??bindRemoveClusterIdFromList?relay
        FUNCTION ??bindRemoveClusterIdFromList?relay,0203H
        PUBLIC ??bindRemoveDev?relay
        FUNCTION ??bindRemoveDev?relay,0203H
        PUBLIC ??bindRemoveEntry?relay
        FUNCTION ??bindRemoveEntry?relay,0203H
        PUBLIC ??bindRemoveSrcDev?relay
        FUNCTION ??bindRemoveSrcDev?relay,0203H
        PUBLIC ??bindUpdateAddr?relay
        FUNCTION ??bindUpdateAddr?relay,0203H
        PUBLIC ??bindingAddrMgsHelperConvert?relay
        FUNCTION ??bindingAddrMgsHelperConvert?relay,0203H
        PUBLIC ??bindingAddrMgsHelperConvertShort?relay
        FUNCTION ??bindingAddrMgsHelperConvertShort?relay,0203H
        PUBLIC ??bindingAddrMgsHelperFind?relay
        FUNCTION ??bindingAddrMgsHelperFind?relay,0203H
        PUBLIC BindInitNV
        FUNCTION BindInitNV,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC BindRestoreFromNV
        FUNCTION BindRestoreFromNV,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC BindSetDefaultNV
        FUNCTION BindSetDefaultNV,021603H
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        PUBLIC BindWriteNV
        FUNCTION BindWriteNV,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC GetBindingTableEntry
        FUNCTION GetBindingTableEntry,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        PUBLIC InitBindingTable
        FUNCTION InitBindingTable,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bindAddClusterIdToList
        FUNCTION bindAddClusterIdToList,0203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bindAddEntry
        FUNCTION bindAddEntry,021603H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC bindAddrIndexGet
        FUNCTION bindAddrIndexGet,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bindAddrMgrLocalLoad
        FUNCTION bindAddrMgrLocalLoad,021203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 23, STACK
        PUBLIC bindAddressClear
        FUNCTION bindAddressClear,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bindCapacity
        FUNCTION bindCapacity,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bindFind
        FUNCTION bindFind,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bindFindEmpty
        FUNCTION bindFindEmpty,0203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bindFindExisting
        FUNCTION bindFindExisting,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bindIsClusterIDinList
        FUNCTION bindIsClusterIDinList,0203H
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC bindNumBoundTo
        FUNCTION bindNumBoundTo,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC bindNumOfEntries
        FUNCTION bindNumOfEntries,0603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bindNumReflections
        FUNCTION bindNumReflections,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bindRemoveClusterIdFromList
        FUNCTION bindRemoveClusterIdFromList,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bindRemoveDev
        FUNCTION bindRemoveDev,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC bindRemoveEntry
        FUNCTION bindRemoveEntry,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC bindRemoveSrcDev
        FUNCTION bindRemoveSrcDev,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC bindUpdateAddr
        FUNCTION bindUpdateAddr,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC bindingAddrMgsHelperConvert
        FUNCTION bindingAddrMgsHelperConvert,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        PUBLIC bindingAddrMgsHelperConvertShort
        FUNCTION bindingAddrMgsHelperConvertShort,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC bindingAddrMgsHelperFind
        FUNCTION bindingAddrMgsHelperFind,021203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC pBindInitNV
        PUBLIC pBindRestoreFromNV
        PUBLIC pBindSetDefaultNV
        PUBLIC pBindWriteNV
        PUBLIC pbindAddEntry
        PUBLIC pbindNumOfEntries
        PUBLIC pbindRemoveDev
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AddrMgrEntryGet     SYMBOL "AddrMgrEntryGet"
??AddrMgrEntryGet?relay SYMBOL "?relay", AddrMgrEntryGet
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
??AddrMgrEntryLookupExt?relay SYMBOL "?relay", AddrMgrEntryLookupExt
AddrMgrEntryLookupNwk SYMBOL "AddrMgrEntryLookupNwk"
??AddrMgrEntryLookupNwk?relay SYMBOL "?relay", AddrMgrEntryLookupNwk
AddrMgrEntryRelease SYMBOL "AddrMgrEntryRelease"
??AddrMgrEntryRelease?relay SYMBOL "?relay", AddrMgrEntryRelease
AddrMgrEntryUpdate  SYMBOL "AddrMgrEntryUpdate"
??AddrMgrEntryUpdate?relay SYMBOL "?relay", AddrMgrEntryUpdate
AddrMgrExtAddrSet   SYMBOL "AddrMgrExtAddrSet"
??AddrMgrExtAddrSet?relay SYMBOL "?relay", AddrMgrExtAddrSet
NLME_GetCoordExtAddr SYMBOL "NLME_GetCoordExtAddr"
??NLME_GetCoordExtAddr?relay SYMBOL "?relay", NLME_GetCoordExtAddr
NLME_GetCoordShortAddr SYMBOL "NLME_GetCoordShortAddr"
??NLME_GetCoordShortAddr?relay SYMBOL "?relay", NLME_GetCoordShortAddr
NLME_GetExtAddr     SYMBOL "NLME_GetExtAddr"
??NLME_GetExtAddr?relay SYMBOL "?relay", NLME_GetExtAddr
osal_memcpy         SYMBOL "osal_memcpy"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
??osal_memset?relay SYMBOL "?relay", osal_memset
osal_nv_item_init   SYMBOL "osal_nv_item_init"
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
osal_nv_read        SYMBOL "osal_nv_read"
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
sAddrExtCpy         SYMBOL "sAddrExtCpy"
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
BindInitNV          SYMBOL "BindInitNV"
??BindInitNV?relay  SYMBOL "?relay", BindInitNV
BindRestoreFromNV   SYMBOL "BindRestoreFromNV"
??BindRestoreFromNV?relay SYMBOL "?relay", BindRestoreFromNV
BindSetDefaultNV    SYMBOL "BindSetDefaultNV"
??BindSetDefaultNV?relay SYMBOL "?relay", BindSetDefaultNV
BindWriteNV         SYMBOL "BindWriteNV"
??BindWriteNV?relay SYMBOL "?relay", BindWriteNV
GetBindingTableEntry SYMBOL "GetBindingTableEntry"
??GetBindingTableEntry?relay SYMBOL "?relay", GetBindingTableEntry
InitBindingTable    SYMBOL "InitBindingTable"
??InitBindingTable?relay SYMBOL "?relay", InitBindingTable
bindAddClusterIdToList SYMBOL "bindAddClusterIdToList"
??bindAddClusterIdToList?relay SYMBOL "?relay", bindAddClusterIdToList
bindAddEntry        SYMBOL "bindAddEntry"
??bindAddEntry?relay SYMBOL "?relay", bindAddEntry
bindAddrIndexGet    SYMBOL "bindAddrIndexGet"
??bindAddrIndexGet?relay SYMBOL "?relay", bindAddrIndexGet
bindAddrMgrLocalLoad SYMBOL "bindAddrMgrLocalLoad"
??bindAddrMgrLocalLoad?relay SYMBOL "?relay", bindAddrMgrLocalLoad
bindAddressClear    SYMBOL "bindAddressClear"
??bindAddressClear?relay SYMBOL "?relay", bindAddressClear
bindCapacity        SYMBOL "bindCapacity"
??bindCapacity?relay SYMBOL "?relay", bindCapacity
bindFind            SYMBOL "bindFind"
??bindFind?relay    SYMBOL "?relay", bindFind
bindFindEmpty       SYMBOL "bindFindEmpty"
??bindFindEmpty?relay SYMBOL "?relay", bindFindEmpty
bindFindExisting    SYMBOL "bindFindExisting"
??bindFindExisting?relay SYMBOL "?relay", bindFindExisting
bindIsClusterIDinList SYMBOL "bindIsClusterIDinList"
??bindIsClusterIDinList?relay SYMBOL "?relay", bindIsClusterIDinList
bindNumBoundTo      SYMBOL "bindNumBoundTo"
??bindNumBoundTo?relay SYMBOL "?relay", bindNumBoundTo
bindNumOfEntries    SYMBOL "bindNumOfEntries"
??bindNumOfEntries?relay SYMBOL "?relay", bindNumOfEntries
bindNumReflections  SYMBOL "bindNumReflections"
??bindNumReflections?relay SYMBOL "?relay", bindNumReflections
bindRemoveClusterIdFromList SYMBOL "bindRemoveClusterIdFromList"
??bindRemoveClusterIdFromList?relay SYMBOL "?relay", bindRemoveClusterIdFromList
bindRemoveDev       SYMBOL "bindRemoveDev"
??bindRemoveDev?relay SYMBOL "?relay", bindRemoveDev
bindRemoveEntry     SYMBOL "bindRemoveEntry"
??bindRemoveEntry?relay SYMBOL "?relay", bindRemoveEntry
bindRemoveSrcDev    SYMBOL "bindRemoveSrcDev"
??bindRemoveSrcDev?relay SYMBOL "?relay", bindRemoveSrcDev
bindUpdateAddr      SYMBOL "bindUpdateAddr"
??bindUpdateAddr?relay SYMBOL "?relay", bindUpdateAddr
bindingAddrMgsHelperConvert SYMBOL "bindingAddrMgsHelperConvert"
??bindingAddrMgsHelperConvert?relay SYMBOL "?relay", bindingAddrMgsHelperConvert
bindingAddrMgsHelperConvertShort SYMBOL "bindingAddrMgsHelperConvertShort"
??bindingAddrMgsHelperConvertShort?relay SYMBOL "?relay", bindingAddrMgsHelperConvertShort
bindingAddrMgsHelperFind SYMBOL "bindingAddrMgsHelperFind"
??bindingAddrMgsHelperFind?relay SYMBOL "?relay", bindingAddrMgsHelperFind

        EXTERN ??AddrMgrEntryGet?relay
        FUNCTION ??AddrMgrEntryGet?relay,00H
        EXTERN ??AddrMgrEntryLookupExt?relay
        FUNCTION ??AddrMgrEntryLookupExt?relay,00H
        EXTERN ??AddrMgrEntryLookupNwk?relay
        FUNCTION ??AddrMgrEntryLookupNwk?relay,00H
        EXTERN ??AddrMgrEntryRelease?relay
        FUNCTION ??AddrMgrEntryRelease?relay,00H
        EXTERN ??AddrMgrEntryUpdate?relay
        FUNCTION ??AddrMgrEntryUpdate?relay,00H
        EXTERN ??AddrMgrExtAddrSet?relay
        FUNCTION ??AddrMgrExtAddrSet?relay,00H
        EXTERN ??NLME_GetCoordExtAddr?relay
        FUNCTION ??NLME_GetCoordExtAddr?relay,00H
        EXTERN ??NLME_GetCoordShortAddr?relay
        FUNCTION ??NLME_GetCoordShortAddr?relay,00H
        EXTERN ??NLME_GetExtAddr?relay
        FUNCTION ??NLME_GetExtAddr?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H
        EXTERN AddrMgrEntryGet
        FUNCTION AddrMgrEntryGet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupNwk
        FUNCTION AddrMgrEntryLookupNwk,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryRelease
        FUNCTION AddrMgrEntryRelease,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryUpdate
        FUNCTION AddrMgrEntryUpdate,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrSet
        FUNCTION AddrMgrExtAddrSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN BindingTable
        EXTERN NLME_GetCoordExtAddr
        FUNCTION NLME_GetCoordExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetCoordShortAddr
        FUNCTION NLME_GetCoordShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetExtAddr
        FUNCTION NLME_GetExtAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN gBIND_REC_SIZE
        EXTERN gMAX_BINDING_CLUSTER_IDS
        EXTERN gNWK_MAX_BINDING_ENTRIES
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\Texas Instruments\Z-Stack Lighting 1.0.2\Components\stack\nwk\BindingTable.c
//    1 /**************************************************************************************************
//    2   Filename:       BindingTable.c
//    3   Revised:        $Date: 2013-11-13 13:09:12 -0800 (Wed, 13 Nov 2013) $
//    4   Revision:       $Revision: 36079 $
//    5 
//    6   Description:    Device binding table functions.
//    7 
//    8 
//    9   Copyright 2004-2013 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "ZComDef.h"
//   44 #include "OSAL.h"
//   45 #include "OSAL_Nv.h"
//   46 #include "nwk_globals.h"
//   47 #include "AddrMgr.h"
//   48 #include "BindingTable.h"
//   49 
//   50 /*********************************************************************
//   51  * MACROS
//   52  */
//   53 
//   54 /*********************************************************************
//   55  * CONSTANTS
//   56  */
//   57 #define NV_BIND_EMPTY   0xFF
//   58 #define NV_BIND_REC_SIZE (gBIND_REC_SIZE)
//   59 #define NV_BIND_ITEM_SIZE  (gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES)
//   60 
//   61 /*********************************************************************
//   62  * TYPEDEFS
//   63  */
//   64 typedef struct
//   65 {
//   66   uint8        srcEP;
//   67   uint16       srcIndex;
//   68   uint16       dstIndex;
//   69   uint8        dstEP;
//   70   uint8        dstAddrMode;
//   71   uint8        clusterIDs;
//   72   uint16*      clusterIDList;
//   73 } bindFields_t;
//   74 
//   75 /*********************************************************************
//   76  * GLOBAL VARIABLES
//   77  */
//   78 
//   79 /*********************************************************************
//   80  * LOCAL FUNCTIONS
//   81  */
//   82 void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryOld,
//   83                     AddrMgrEntry_t *entryNew );
//   84 BindingEntry_t *bindFindEmpty( void );
//   85 uint16 bindingAddrMgsHelperFind( zAddrType_t *addr );
//   86 uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr );
//   87 void bindAddrMgrLocalLoad( void );
//   88 
//   89 /*********************************************************************
//   90  * LOCAL VARIABLES
//   91  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   92 static uint8 bindAddrMgrLocalLoaded = FALSE;
bindAddrMgrLocalLoaded:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   93 
//   94 /*********************************************************************
//   95  * Function Pointers
//   96  */
//   97 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   98 BindingEntry_t *(*pbindAddEntry)( byte srcEpInt,
pbindAddEntry:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   99                                   zAddrType_t *dstAddr, byte dstEpInt,
//  100                                   byte numClusterIds, uint16 *clusterIds ) = (void*)NULL;

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  101 uint16 (*pbindNumOfEntries)( void ) = (void*)NULL;
pbindNumOfEntries:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  102 void (*pbindRemoveDev)( zAddrType_t *Addr ) = (void*)NULL;
pbindRemoveDev:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  103 byte (*pBindInitNV)( void ) = (void*)NULL;
pBindInitNV:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  104 void (*pBindSetDefaultNV)( void ) = (void*)NULL;
pBindSetDefaultNV:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  105 uint16 (*pBindRestoreFromNV)( void ) = (void*)NULL;
pBindRestoreFromNV:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  106 void (*pBindWriteNV)( void ) = (void*)NULL;
pBindWriteNV:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  107 
//  108 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
//  109 /*********************************************************************
//  110  * @fn      BindAddrMgrCB()
//  111  *
//  112  * @brief   Address Manager Callback function
//  113  *
//  114  * @param   update -
//  115  * @param   entry -
//  116  *
//  117  * @return  pointer to
//  118  */
//  119 void BindAddrMgrCB( uint8 update, AddrMgrEntry_t *entryNew,
//  120                     AddrMgrEntry_t *entryOld )
//  121 {
//  122   // Check for either deleted items or changed Extended (Duplicate) addresses
//  123 }
//  124 #endif // ( ADDRMGR_CALLBACK_ENABLED == 1 )
//  125 
//  126 /*********************************************************************
//  127  * @fn      InitBindingTable()
//  128  *
//  129  * @brief
//  130  *
//  131  *   This function is used to initialise the binding table
//  132  *
//  133  * @param   none
//  134  *
//  135  * @return  none
//  136  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  137 void InitBindingTable( void )
InitBindingTable:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function InitBindingTable
        CODE
//  138 {
        FUNCALL InitBindingTable, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  139   osal_memset( BindingTable, 0xFF, gBIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES );
        ; Setup parameters for call to function osal_memset
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_7:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V0 + 0,A
        MOV     A,R4
        MOV     B,?V0 + 0
        MUL     AB
        MOV     R4,A
        MOV     R0,B
        MOV     B,?V0 + 0
        MOV     A,R5
        MUL     AB
        ADD     A,R0
        MOV     R5,A
        MOV     R1,#-0x1
        MOV     R2,#BindingTable & 0xff
        MOV     R3,#(BindingTable >> 8) & 0xff
        LCALL   ??osal_memset?relay
//  140 
//  141   pbindAddEntry = bindAddEntry;
        MOV     DPTR,#pbindAddEntry
        MOV     A,#??bindAddEntry?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??bindAddEntry?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  142   pbindNumOfEntries = bindNumOfEntries;
        MOV     DPTR,#pbindNumOfEntries
        MOV     A,#??bindNumOfEntries?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??bindNumOfEntries?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  143   pbindRemoveDev = bindRemoveDev;
        MOV     DPTR,#pbindRemoveDev
        MOV     A,#??bindRemoveDev?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??bindRemoveDev?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  144   pBindInitNV = BindInitNV;
        MOV     DPTR,#pBindInitNV
        MOV     A,#??BindInitNV?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??BindInitNV?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  145   pBindSetDefaultNV = BindSetDefaultNV;
        MOV     DPTR,#pBindSetDefaultNV
        MOV     A,#??BindSetDefaultNV?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??BindSetDefaultNV?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  146   pBindRestoreFromNV = BindRestoreFromNV;
        MOV     DPTR,#pBindRestoreFromNV
        MOV     A,#??BindRestoreFromNV?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??BindRestoreFromNV?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  147   pBindWriteNV = BindWriteNV;
        MOV     DPTR,#pBindWriteNV
        MOV     A,#??BindWriteNV?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??BindWriteNV?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  148 
//  149   bindAddrMgrLocalLoaded = FALSE;
        MOV     DPTR,#bindAddrMgrLocalLoaded
        CLR     A
        MOVX    @DPTR,A
//  150 
//  151 #if ( ADDRMGR_CALLBACK_ENABLED == 1 )
//  152   // Register with the address manager
//  153   AddrMgrRegister( ADDRMGR_REG_BINDING, BindAddrMgrCB );
//  154 #endif
//  155 }
        SJMP    ??Subroutine21_0
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock1
        REQUIRE ??Subroutine21_0
        ; // Fall through to label ??Subroutine21_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine21_0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  156 
//  157 /*********************************************************************
//  158  * @fn      bindFindEmpty()
//  159  *
//  160  * @brief   This function returns a pointer to an empty binding slot
//  161  *
//  162  * @param   none
//  163  *
//  164  * @return  pointer to binding table entry, NULL if not added
//  165  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  166 BindingEntry_t *bindFindEmpty( void )
bindFindEmpty:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function bindFindEmpty
        CODE
//  167 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  168   bindTableIndex_t x;
//  169 
//  170   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R3,#0x0
        SJMP    ??bindFindEmpty_0
??bindFindEmpty_1:
        INC     R3
??bindFindEmpty_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R3
        CLR     C
        SUBB    A,R0
        JNC     ??bindFindEmpty_2
//  171   {
//  172     // It's empty if the index is "Not Found"
//  173     if ( BindingTable[x].srcEP == NV_BIND_EMPTY )
        MOV     A,R3
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_0:
        JNZ     ??bindFindEmpty_1
//  174     {
//  175       return ( &BindingTable[x] );
        MOV     R2,DPL
        MOV     R3,DPH
        SJMP    ??bindFindEmpty_3
//  176     }
//  177   }
//  178 
//  179   return ( (BindingEntry_t *)NULL );
??bindFindEmpty_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??bindFindEmpty_3:
        LJMP    ??Subroutine27_0 & 0xFFFF
          CFI EndBlock cfiBlock3
//  180 }
//  181 
//  182 /*********************************************************************
//  183  * @fn      bindNumOfEntries()
//  184  *
//  185  * @brief   This function returns the number of binding table entries.
//  186  *          The return for this is the number of clusters in the
//  187  *          table NOT the number of entries.
//  188  *
//  189  * @param   none
//  190  *
//  191  * @return  number of entries
//  192  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  193 uint16 bindNumOfEntries( void )
bindNumOfEntries:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function bindNumOfEntries
        CODE
//  194 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  195   bindTableIndex_t x;
//  196   uint16 found;
//  197 
//  198   for ( found = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R5,#0x0
        SJMP    ??bindNumOfEntries_0
//  199   {
//  200     // It's empty if the index is "Not Found"
//  201     if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
??bindNumOfEntries_1:
        MOV     A,R5
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_1:
        JZ      ??bindNumOfEntries_2
//  202     {
//  203       found += BindingTable[x].numClusterIds;
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R2
        ADD     A,R0
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
//  204     }
//  205   }
??bindNumOfEntries_2:
        INC     R5
??bindNumOfEntries_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R5
        CLR     C
        SUBB    A,R0
        JC      ??bindNumOfEntries_1
//  206 
//  207   return ( found );
        LJMP    ??Subroutine27_0 & 0xFFFF
          CFI EndBlock cfiBlock4
//  208 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function bindFindEmpty
          CFI Conditional ??CrossCallReturnLabel_0
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function bindNumOfEntries
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond6) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond6) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond6) CFA_SP SP+-5
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function bindCapacity
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond7) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond7) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond7) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond7) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond7) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond7) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond7) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond7) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond7) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond7) CFA_SP SP+0
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker8 Using cfiCommon1
          CFI (cfiPicker8) NoFunction
          CFI (cfiPicker8) Picker
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_22:
        CPL     A
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiPicker8
//  209 
//  210 /*********************************************************************
//  211  * @fn      bindCapacity()
//  212  *
//  213  * @brief   This function returns the number of binding entries
//  214  *          possible and used.
//  215  *
//  216  * @param   maxEntries - pointer to a place to put the max entries
//  217  * @param   usedEntries - pointer to a place to put the number
//  218  *               of used entries
//  219  *
//  220  * @return  none
//  221  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  222 void bindCapacity( uint16 *maxEntries, uint16 *usedEntries  )
bindCapacity:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function bindCapacity
        CODE
//  223 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  224   bindTableIndex_t x;
//  225   bindTableIndex_t used;
//  226 
//  227   for ( used = 0, x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V0 + 0,#0x0
        MOV     R7,#0x0
        SJMP    ??bindCapacity_0
//  228   {
//  229     // It's empty if the index is "Not Found"
//  230     if ( BindingTable[x].srcEP != NV_BIND_EMPTY )
??bindCapacity_1:
        MOV     A,R7
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_2:
        JZ      ??bindCapacity_2
//  231     {
//  232       used++;
        INC     ?V0 + 0
//  233     }
//  234   }
??bindCapacity_2:
        INC     R7
??bindCapacity_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R7
        CLR     C
        SUBB    A,R0
        JC      ??bindCapacity_1
//  235 
//  236   *maxEntries = gNWK_MAX_BINDING_ENTRIES;
        CLR     A
        MOVC    A,@A+DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  237   *usedEntries = used;
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  238 }
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock9
//  239 
//  240 /*********************************************************************
//  241  * @fn      bindAddEntry()
//  242  *
//  243  * @brief   This function is used to Add an entry to the binding table
//  244  *
//  245  * @param       srcEpInt - source endpoint
//  246  * @param       dstAddr - destination Address
//  247  * @param       dstEpInt - destination endpoint
//  248  * @param       numClusterIds - number of cluster Ids in the list
//  249  * @param       clusterIds - pointer to the Object ID list
//  250  *
//  251  * @return  pointer to binding table entry, NULL if not added
//  252  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  253 BindingEntry_t *bindAddEntry( byte srcEpInt,
bindAddEntry:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function bindAddEntry
        CODE
//  254                               zAddrType_t *dstAddr, byte dstEpInt,
//  255                               byte numClusterIds, uint16 *clusterIds )
//  256 {
        FUNCALL bindAddEntry, bindAddrMgrLocalLoad
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindAddrIndexGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindIsClusterIDinList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindAddClusterIdToList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, bindFindEmpty
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     ?V0 + 8,R4
        MOV     ?V0 + 0,R5
//  257   uint8            index;
//  258   bindTableIndex_t bindIdx;
//  259   BindingEntry_t*  entry;
//  260   bindFields_t     fields;
//  261 
//  262   // initialize results
//  263   entry = NULL;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  264 
//  265   // make sure local addresses have been loaded
//  266   bindAddrMgrLocalLoad();
        ; Setup parameters for call to function bindAddrMgrLocalLoad
        LCALL   ??bindAddrMgrLocalLoad?relay
//  267 
//  268   // setup fields
//  269   fields.dstIndex = bindAddrIndexGet( dstAddr );
        ; Setup parameters for call to function bindAddrIndexGet
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        LCALL   ??bindAddrIndexGet?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
//  270   fields.srcEP    = srcEpInt;
//  271 
//  272   if ( dstAddr->addrMode == AddrGroup )
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindAddEntry_0
//  273   {
//  274     fields.dstAddrMode = DSTGROUPMODE_GROUP;
        MOV     ?V0 + 3,#0x1
//  275     fields.dstEP       = 0;
        MOV     ?V0 + 1,R6
        SJMP    ??bindAddEntry_1
//  276   }
//  277   else
//  278   {
//  279     fields.dstAddrMode = DSTGROUPMODE_ADDR;
??bindAddEntry_0:
        MOV     ?V0 + 3,R6
//  280     fields.dstEP       = dstEpInt;
        MOV     ?V0 + 1,?V0 + 8
//  281   }
//  282 
//  283   if ( fields.dstIndex != INVALID_NODE_ADDR  )
??bindAddEntry_1:
        MOV     A,#-0x2
        XRL     A,?V0 + 4
        JNZ     ??bindAddEntry_2
        MOV     A,#-0x1
        XRL     A,?V0 + 5
??bindAddEntry_2:
        JNZ     $+5
        LJMP    ??bindAddEntry_3 & 0xFFFF
//  284   {
//  285     for ( bindIdx = 0; bindIdx < gNWK_MAX_BINDING_ENTRIES; bindIdx++ )
        MOV     R3,#0x0
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
        SJMP    ??bindAddEntry_4
??bindAddEntry_5:
        INC     R3
??bindAddEntry_4:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R3
        CLR     C
        SUBB    A,R0
        JNC     ??bindAddEntry_6
//  286     {
//  287       if ( ( fields.srcEP       == BindingTable[bindIdx].srcEP        ) &&
//  288            ( fields.dstAddrMode == BindingTable[bindIdx].dstGroupMode ) &&
//  289            ( fields.dstIndex    == BindingTable[bindIdx].dstIdx       ) &&
//  290            ( fields.dstEP       == BindingTable[bindIdx].dstEP        )    )
        MOV     A,R3
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_4:
        XRL     A,?V0 + 2
        JNZ     ??bindAddEntry_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 3
        JNZ     ??bindAddEntry_5
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 4
        JNZ     ??bindAddEntry_7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 5
??bindAddEntry_7:
        JNZ     ??bindAddEntry_5
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 1
        JNZ     ??bindAddEntry_5
//  291       {
//  292         entry = &BindingTable[bindIdx];
//  293 
//  294         // break from loop
//  295         break;
//  296       }
//  297     }
//  298 
//  299     if ( entry != NULL )
//  300     {
//  301       // Loop through the cluster IDs
//  302       for ( index = 0; index < numClusterIds; index++ )
        MOV     ?V0 + 3,#0x0
??bindAddEntry_8:
        MOV     A,?V0 + 3
        CLR     C
        SUBB    A,?V0 + 0
        JC      $+5
        LJMP    ??bindAddEntry_3 & 0xFFFF
//  303       {
//  304         // Found - is the cluster already defined?
//  305         if ( bindIsClusterIDinList( entry, clusterIds[index] ) == FALSE )
        MOV     A,?V0 + 3
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,?V0 + 6
        ADD     A,R0
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 7
        ADDC    A,R1
        MOV     ?V0 + 5,A
        ; Setup parameters for call to function bindIsClusterIDinList
        MOV     DPL,?V0 + 4
        MOV     DPH,A
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_15:
        LCALL   ??bindIsClusterIDinList?relay
        MOV     A,R1
        JNZ     ??bindAddEntry_9
//  306         {
//  307           // Nope, add this cluster
//  308           if ( bindAddClusterIdToList( entry, clusterIds[index] ) == FALSE )
        ; Setup parameters for call to function bindAddClusterIdToList
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_16:
        LCALL   ??bindAddClusterIdToList?relay
        MOV     A,R1
        JNZ     ??bindAddEntry_9
//  309           {
//  310             // Indicate error if cluster list was full
//  311             entry = NULL;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  312           }
//  313         }
//  314       }
??bindAddEntry_9:
        INC     ?V0 + 3
        SJMP    ??bindAddEntry_8
//  315     }
//  316     else
//  317     {
//  318       // Find an empty slot
//  319       entry = bindFindEmpty();
??bindAddEntry_6:
        ; Setup parameters for call to function bindFindEmpty
        LCALL   ??bindFindEmpty?relay
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
        MOV     R6,?V0 + 10
        MOV     R7,?V0 + 11
//  320 
//  321       // Check against the maximum number allowed
//  322       if ( entry != NULL )
        MOV     A,R6
        ORL     A,R7
        JZ      ??bindAddEntry_3
//  323       {
//  324         // Add new entry
//  325         entry->srcEP         = fields.srcEP;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
//  326         entry->dstGroupMode  = fields.dstAddrMode;
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  327         entry->dstIdx        = fields.dstIndex;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 5
        MOVX    @DPTR,A
//  328         entry->dstEP         = fields.dstEP;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  329 
//  330         if ( numClusterIds > gMAX_BINDING_CLUSTER_IDS )
        MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
        CLR     A
        MOVC    A,@A+DPTR
        CLR     C
        SUBB    A,?V0 + 0
        JNC     ??bindAddEntry_10
//  331         {
//  332           numClusterIds = gMAX_BINDING_CLUSTER_IDS;
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V0 + 0,A
//  333         }
//  334 
//  335         entry->numClusterIds = numClusterIds;
??bindAddEntry_10:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  336 
//  337         osal_memcpy( entry->clusterIdList,
//  338                      clusterIds,
//  339                      numClusterIds * sizeof(uint16) );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,?V0 + 6
        MOV     ?V0 + 5,?V0 + 7
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,?V0 + 0
        CLR     C
        RLC     A
        MOV     R4,A
        CLR     A
        RLC     A
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  340       }
//  341     }
//  342   }
//  343 
//  344   return entry;
??bindAddEntry_3:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock10
//  345 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function bindAddEntry
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function bindAddEntry
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond12) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond12) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond12) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+0
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        RET
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13
//  346 
//  347 /*********************************************************************
//  348  * @fn      bindRemoveEntry
//  349  *
//  350  * @brief   Removes a binding table entry.
//  351  *
//  352  * @param   pBind - pointer to binding table entry to delete
//  353  *
//  354  * @return  TRUE if Removed, FALSE if not
//  355  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  356 byte bindRemoveEntry( BindingEntry_t *pBind )
bindRemoveEntry:
          CFI Block cfiBlock14 Using cfiCommon0
          CFI Function bindRemoveEntry
        CODE
//  357 {
        FUNCALL bindRemoveEntry, osal_memset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  358   osal_memset( pBind, 0xFF, gBIND_REC_SIZE );
        ; Setup parameters for call to function osal_memset
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_8:
        MOV     R1,#-0x1
        LCALL   ??osal_memset?relay
//  359   return ( TRUE );
        MOV     R1,#0x1
        LJMP    ??Subroutine27_0 & 0xFFFF
          CFI EndBlock cfiBlock14
//  360 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond15 Using cfiCommon0
          CFI Function InitBindingTable
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function bindRemoveEntry
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond16) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond16) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond16) CFA_SP SP+-5
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function BindWriteNV
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+0
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        MOV     DPTR,#gBIND_REC_SIZE
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R4,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R5,A
        RET
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18
//  361 
//  362 /*********************************************************************
//  363  * @fn      bindIsClusterIDinList()
//  364  *
//  365  * @brief   Is the clusterID in the clusterID list?
//  366  *
//  367  * @param   enter - binding table entry
//  368  * @param   clusterId  - Cluster ID to look for
//  369  *
//  370  * @return  TRUE if found, FALSE if not found
//  371  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  372 byte bindIsClusterIDinList( BindingEntry_t *entry, uint16 clusterId )
bindIsClusterIDinList:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function bindIsClusterIDinList
        CODE
//  373 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  374   uint8 x;
//  375 
//  376   if ( entry != NULL )
        MOV     A,R2
        ORL     A,R3
        JZ      ??bindIsClusterIDinList_0
//  377   {
//  378     for ( x = 0; x < entry->numClusterIds; x++ )
        MOV     R6,#0x0
        SJMP    ??bindIsClusterIDinList_1
??bindIsClusterIDinList_2:
        INC     R6
??bindIsClusterIDinList_1:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        JNC     ??bindIsClusterIDinList_0
//  379     {
//  380       if ( entry->clusterIdList[x] == clusterId )
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R1
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??bindIsClusterIDinList_3
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??bindIsClusterIDinList_3:
        JNZ     ??bindIsClusterIDinList_2
//  381       {
//  382         return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??bindIsClusterIDinList_4
//  383       }
//  384     }
//  385   }
//  386 
//  387   return ( FALSE );
??bindIsClusterIDinList_0:
        MOV     R1,#0x0
??bindIsClusterIDinList_4:
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock19
//  388 }
//  389 
//  390 /*********************************************************************
//  391  * @fn      bindRemoveClusterIdFromList()
//  392  *
//  393  * @brief   Removes a ClusterID from a list of ClusterIDs.
//  394  *
//  395  * @param   enter - binding table entry
//  396  * @param   clusterId  - Cluster ID to look for
//  397  *
//  398  * @return  TRUE if there are at least 1 clusterID left, FALSE if none
//  399  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  400 byte bindRemoveClusterIdFromList( BindingEntry_t *entry, uint16 clusterId )
bindRemoveClusterIdFromList:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function bindRemoveClusterIdFromList
        CODE
//  401 {
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
//  402   byte x;
//  403   uint16 *listPtr;
//  404   byte numIds;
//  405 
//  406   if ( entry )
        MOV     A,R2
        ORL     A,R3
        JZ      ??bindRemoveClusterIdFromList_0
//  407   {
//  408     if ( entry->numClusterIds > 0 )
        MOV     A,R2
        ADD     A,#0x5
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV     ?V0 + 0,A
        JZ      ??bindRemoveClusterIdFromList_0
//  409     {
//  410       listPtr = entry->clusterIdList;
        MOV     A,R2
        ADD     A,#0x6
        INC     R0
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
//  411       numIds = entry->numClusterIds;
        MOV     ?V0 + 3,?V0 + 0
//  412 
//  413       // Copy the new list over
//  414       for ( x = 0; x < numIds; x++ )
        MOV     ?V0 + 2,#0x0
        SJMP    ??bindRemoveClusterIdFromList_1
//  415       {
//  416         if ( entry->clusterIdList[x] != clusterId )
//  417         {
//  418           *listPtr++ = entry->clusterIdList[x];
//  419         }
//  420         else
//  421         {
//  422           entry->numClusterIds--;
??bindRemoveClusterIdFromList_2:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
//  423           if ( entry->numClusterIds == 0 )
        JZ      ??bindRemoveClusterIdFromList_0
//  424           {
//  425             break;
//  426           }
//  427         }
??bindRemoveClusterIdFromList_3:
        INC     ?V0 + 2
??bindRemoveClusterIdFromList_1:
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,?V0 + 3
        JNC     ??bindRemoveClusterIdFromList_4
        MOV     A,?V0 + 2
        CLR     C
        RLC     A
        MOV     ?V0 + 0,A
        CLR     A
        RLC     A
        MOV     ?V0 + 1,A
        MOV     A,R2
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,?V0 + 1
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     A,R4
        XRL     A,?V0 + 0
        JNZ     ??bindRemoveClusterIdFromList_5
        MOV     A,R5
        XRL     A,?V0 + 1
??bindRemoveClusterIdFromList_5:
        JZ      ??bindRemoveClusterIdFromList_2
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
        MOV     A,R0
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        SJMP    ??bindRemoveClusterIdFromList_3
//  428       }
//  429     }
//  430   }
??bindRemoveClusterIdFromList_4:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JZ      ??bindRemoveClusterIdFromList_0
//  431 
//  432   if ( entry && (entry->numClusterIds > 0) )
//  433   {
//  434     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??bindRemoveClusterIdFromList_6
//  435   }
//  436   else
//  437   {
//  438     return ( FALSE );
??bindRemoveClusterIdFromList_0:
        MOV     R1,#0x0
          CFI EndBlock cfiBlock20
//  439   }
??bindRemoveClusterIdFromList_6:
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
//  440 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock21
//  441 
//  442 /*********************************************************************
//  443  * @fn      bindAddClusterIdToList()
//  444  *
//  445  * @brief   Adds a ClusterID to a list of ClusterIDs.
//  446  *
//  447  * @param   enter - binding table entry
//  448  * @param   clusterId  - Cluster ID to Add
//  449  *
//  450  * @return  TRUE if Added, FALSE if not
//  451  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  452 byte bindAddClusterIdToList( BindingEntry_t *entry, uint16 clusterId )
bindAddClusterIdToList:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function bindAddClusterIdToList
        CODE
//  453 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  454   if ( entry && entry->numClusterIds < gMAX_BINDING_CLUSTER_IDS )
        MOV     A,R2
        ORL     A,R3
        JZ      ??bindAddClusterIdToList_0
        MOV     A,R2
        ADD     A,#0x5
        MOV     R0,A
        MOV     A,R3
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     R7,A
        MOV     DPTR,#gMAX_BINDING_CLUSTER_IDS
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R6,A
        MOV     A,R7
        CLR     C
        SUBB    A,R6
        JNC     ??bindAddClusterIdToList_0
//  455   {
//  456     // Add the new one
//  457     entry->clusterIdList[entry->numClusterIds] = clusterId;
        MOV     A,R7
        CLR     C
        RLC     A
        MOV     R6,A
        CLR     A
        RLC     A
        MOV     R7,A
        MOV     A,R2
        ADD     A,R6
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R7
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  458     entry->numClusterIds++;
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  459     return ( TRUE );
        MOV     R1,#0x1
        SJMP    ??bindAddClusterIdToList_1
//  460   }
//  461   return ( FALSE );
??bindAddClusterIdToList_0:
        MOV     R1,#0x0
          CFI EndBlock cfiBlock22
??bindAddClusterIdToList_1:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  462 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock23
//  463 
//  464 /*********************************************************************
//  465  * @fn      bindFindExisting
//  466  *
//  467  * @brief   Finds an existing src/epint to dst/epint bind record
//  468  *
//  469  * @param   srcAddr - Source address
//  470  * @param   srcEpInt - Source Endpoint/Interface
//  471  * @param   dstAddr - Destination address
//  472  * @param   dstEpInt - Destination Endpoint/Interface
//  473  *
//  474  * @return  pointer to existing entry or NULL
//  475  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  476 BindingEntry_t *bindFindExisting( byte srcEpInt,
bindFindExisting:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function bindFindExisting
        CODE
//  477                                   zAddrType_t *dstAddr, byte dstEpInt )
//  478 {
        FUNCALL bindFindExisting, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R4
//  479   uint16 dstIdx;
//  480   bindTableIndex_t x;
//  481 
//  482   // Find the records in the assoc list
//  483   if ( dstAddr->addrMode == AddrGroup )
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_17:
        JNZ     ??bindFindExisting_0
//  484   {
//  485     dstIdx = dstAddr->addr.shortAddr;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        SJMP    ??bindFindExisting_1
//  486   }
//  487   else
//  488   {
//  489     dstIdx = bindingAddrMgsHelperFind( dstAddr );
??bindFindExisting_0:
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        LCALL   ??bindingAddrMgsHelperFind?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
//  490   }
//  491 
//  492   if ( dstIdx == INVALID_NODE_ADDR )
??bindFindExisting_1:
        MOV     A,#-0x2
        XRL     A,R4
        JNZ     ??bindFindExisting_2
        MOV     A,#-0x1
        XRL     A,R5
??bindFindExisting_2:
        JZ      ??bindFindExisting_3
//  493   {
//  494     return ( (BindingEntry_t *)NULL );
//  495   }
//  496 
//  497   // Start at the beginning
//  498   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V0 + 2,#0x0
        SJMP    ??bindFindExisting_4
//  499   {
//  500     if ( (BindingTable[x].srcEP == srcEpInt) )
??bindFindExisting_5:
        MOV     A,#0x1
        XRL     A,?V0 + 3
        JNZ     ??bindFindExisting_6
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??bindFindExisting_7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??bindFindExisting_7:
        JZ      ??bindFindExisting_8
??bindFindExisting_6:
        INC     ?V0 + 2
??bindFindExisting_4:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_10:
        JNC     ??bindFindExisting_3
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_5:
        MOVX    A,@DPTR
        XRL     A,?V0 + 0
        JNZ     ??bindFindExisting_6
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     A,R2
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x1
        JZ      ??bindFindExisting_5
        MOV     A,?V0 + 3
        JNZ     ??bindFindExisting_6
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??bindFindExisting_9
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??bindFindExisting_9:
        JNZ     ??bindFindExisting_6
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 1
        JNZ     ??bindFindExisting_6
//  501     {
//  502       if ( ((dstAddr->addrMode == AddrGroup)
//  503               && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
//  504               && (dstIdx == BindingTable[x].dstIdx))
//  505          || ((dstAddr->addrMode != AddrGroup)
//  506              && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
//  507              && (dstIdx == BindingTable[x].dstIdx) && (BindingTable[x].dstEP == dstEpInt)) )
//  508       {
//  509         return ( &BindingTable[x] );
        SJMP    ??bindFindExisting_8
//  510       }
//  511     }
//  512   }
//  513 
//  514   return ( (BindingEntry_t *)NULL );
??bindFindExisting_3:
        MOV     R2,#0x0
        MOV     R3,#0x0
??bindFindExisting_8:
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock24
//  515 }
//  516 
//  517 /*********************************************************************
//  518  * @fn       bindRemoveDev()
//  519  *
//  520  * @brief
//  521  *
//  522  *   Remove all bind(s) entries associated to a device address (destination).
//  523  *   Updates binding table.
//  524  *
//  525  * @param   Addr - address of device to be removed from Binding Table
//  526  *
//  527  * @return  none
//  528  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  529 void bindRemoveDev( zAddrType_t *Addr )
bindRemoveDev:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function bindRemoveDev
        CODE
//  530 {
        FUNCALL bindRemoveDev, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindRemoveDev, bindRemoveEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindRemoveDev, bindAddressClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
//  531   uint16 idx;
//  532   bindTableIndex_t x;
//  533 
//  534   if ( Addr->addrMode == AddrGroup )
        MOV     A,R2
        ADD     A,#0x8
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        MOV     DPL,R0
        MOV     DPH,A
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindRemoveDev_0
//  535   {
//  536     idx = Addr->addr.shortAddr;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        SJMP    ??bindRemoveDev_1
//  537   }
//  538   else
//  539   {
//  540     idx = bindingAddrMgsHelperFind( Addr );
??bindRemoveDev_0:
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        LCALL   ??bindingAddrMgsHelperFind?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
//  541   }
//  542 
//  543   if ( idx == INVALID_NODE_ADDR )
??bindRemoveDev_1:
        MOV     A,#-0x2
        XRL     A,R6
        JNZ     ??bindRemoveDev_2
        MOV     A,#-0x1
        XRL     A,R7
??bindRemoveDev_2:
        JZ      ??bindRemoveDev_3
//  544   {
//  545     return;
//  546   }
//  547 
//  548   // Removes all the entries that match the destination Address/Index
//  549   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V0 + 2,#0x0
        SJMP    ??bindRemoveDev_4
//  550   {
//  551     if ( ( (Addr->addrMode == AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_GROUP)
//  552                                          && (BindingTable[x].dstIdx == idx) ) ||
//  553          ( (Addr->addrMode != AddrGroup) && (BindingTable[x].dstGroupMode == DSTGROUPMODE_ADDR)
//  554                                          && (BindingTable[x].dstIdx == idx) ) )
??bindRemoveDev_5:
        MOV     A,R4
        JNZ     ??bindRemoveDev_6
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??bindRemoveDev_7
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??bindRemoveDev_7:
        JNZ     ??bindRemoveDev_6
//  555     {
//  556       bindRemoveEntry( &BindingTable[x] );
??bindRemoveDev_8:
        ; Setup parameters for call to function bindRemoveEntry
        LCALL   ??bindRemoveEntry?relay
//  557     }
??bindRemoveDev_6:
        INC     ?V0 + 2
??bindRemoveDev_4:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_11:
        JNC     ??bindRemoveDev_9
        LCALL   ?Subroutine8 & 0xFFFF
//  558   }
??CrossCallReturnLabel_6:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R2
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindRemoveDev_5
        MOV     A,#0x1
        XRL     A,R4
        JNZ     ??bindRemoveDev_6
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??bindRemoveDev_10
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??bindRemoveDev_10:
        JZ      ??bindRemoveDev_8
        SJMP    ??bindRemoveDev_6
//  559 
//  560   // If this is the last Bind Entry for that idx then clear BINDING
//  561   // user from Address Manager
//  562   bindAddressClear( idx );
??bindRemoveDev_9:
        ; Setup parameters for call to function bindAddressClear
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??bindAddressClear?relay
//  563 }
??bindRemoveDev_3:
        SJMP    ??Subroutine22_0
          CFI EndBlock cfiBlock25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond26 Using cfiCommon0
          CFI Function bindFindExisting
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function bindRemoveDev
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+0
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function bindNumReflections
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+0
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker29 Using cfiCommon1
          CFI (cfiPicker29) NoFunction
          CFI (cfiPicker29) Picker
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,R0
        RET
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiPicker29

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond30 Using cfiCommon0
          CFI Function bindFindExisting
          CFI Conditional ??CrossCallReturnLabel_5
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function bindRemoveDev
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+0
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker32 Using cfiCommon1
          CFI (cfiPicker32) NoFunction
          CFI (cfiPicker32) Picker
        MOV     A,?V0 + 2
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        RET
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiPicker32

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock33 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock33
        REQUIRE ??Subroutine22_0
        ; // Fall through to label ??Subroutine22_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine22_0:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock34
//  564 
//  565 /*********************************************************************
//  566  * @fn       bindRemoveSrcDev()
//  567  *
//  568  * @brief
//  569  *
//  570  *   Remove binds(s) associated to device address (source).
//  571  *   Updates binding table.
//  572  *
//  573  * @param   srcAddr - address of device
//  574  * @param   ep - endpoint to remove, 0xFF is all endpoints
//  575  *
//  576  * @return  none
//  577  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  578 void bindRemoveSrcDev( uint8 ep )
bindRemoveSrcDev:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI Function bindRemoveSrcDev
        CODE
//  579 {
        FUNCALL bindRemoveSrcDev, bindRemoveEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindRemoveSrcDev, bindAddressClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     ?V0 + 1,R1
//  580   bindTableIndex_t x;
//  581 
//  582   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V0 + 0,#0x0
        SJMP    ??bindRemoveSrcDev_0
//  583   {
//  584     if ( (ep == 0xFF) || (ep == BindingTable[x].srcEP) )
??bindRemoveSrcDev_1:
        MOV     A,?V0 + 0
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R2,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R3,A
        MOV     A,#-0x1
        XRL     A,?V0 + 1
        JZ      ??bindRemoveSrcDev_2
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,?V0 + 1
        JNZ     ??bindRemoveSrcDev_3
//  585     {
//  586       uint16 idx = BindingTable[x].dstIdx;
??bindRemoveSrcDev_2:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
//  587 
//  588       bindRemoveEntry( &BindingTable[x] );
        ; Setup parameters for call to function bindRemoveEntry
        LCALL   ??bindRemoveEntry?relay
//  589 
//  590       // If this is the last Bind Entry for that idx then clear BINDING
//  591       // user from Address Manager
//  592       bindAddressClear( idx );
        ; Setup parameters for call to function bindAddressClear
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??bindAddressClear?relay
//  593     }
//  594   }
??bindRemoveSrcDev_3:
        INC     ?V0 + 0
??bindRemoveSrcDev_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,R0
        JC      ??bindRemoveSrcDev_1
//  595 }
        LJMP    ??Subroutine21_0 & 0xFFFF
          CFI EndBlock cfiBlock35
//  596 
//  597 /*********************************************************************
//  598  * @fn          bindNumBoundTo
//  599  *
//  600  * @brief       Calculate the number items this device is bound to.
//  601  *              When srcMode is set to TRUE, discard what value devAddr
//  602  *              has, it returns number count bound to the local dev.
//  603  *
//  604  * @param       devAddr - device Address
//  605  * @param       devEP - endpoint
//  606  * @param       srcMode - TRUE - assume devHandle is a source address
//  607  *                        FALSE - destination address
//  608  *
//  609  * @return      status
//  610  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  611 byte bindNumBoundTo( zAddrType_t *devAddr, byte devEpInt, byte srcMode )
bindNumBoundTo:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function bindNumBoundTo
        CODE
//  612 {
        FUNCALL bindNumBoundTo, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 1,R1
        MOV     ?V0 + 2,R4
//  613   BindingEntry_t *pBind;
//  614   uint16 idx;
//  615   byte   num;
//  616   bindTableIndex_t x;
//  617 
//  618   // Init
//  619   num = 0;
        MOV     ?V0 + 0,#0x0
//  620 
//  621   if ( devAddr->addrMode == AddrGroup )
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_18:
        JNZ     ??bindNumBoundTo_0
//  622   {
//  623     idx = devAddr->addr.shortAddr;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        SJMP    ??bindNumBoundTo_1
//  624   }
//  625   else
//  626   {
//  627     idx = bindingAddrMgsHelperFind( devAddr );
??bindNumBoundTo_0:
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        LCALL   ??bindingAddrMgsHelperFind?relay
//  628   }
//  629 
//  630   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
??bindNumBoundTo_1:
        MOV     R5,#0x0
        SJMP    ??bindNumBoundTo_2
//  631   {
//  632     pBind = &BindingTable[x];
//  633     if ( srcMode )
//  634     {
//  635       if ( pBind->srcEP == devEpInt )
//  636       {
//  637         num++;
//  638       }
//  639     }
//  640     else
//  641     {
//  642       if ( ((devAddr->addrMode == AddrGroup)
//  643               && (pBind->dstGroupMode == DSTGROUPMODE_GROUP) && (pBind->dstIdx == idx))
//  644           || ((devAddr->addrMode != AddrGroup) && (pBind->dstGroupMode == DSTGROUPMODE_ADDR)
//  645                                 && (pBind->dstIdx == idx) && (pBind->dstEP == devEpInt)) )
??bindNumBoundTo_3:
        MOV     A,R4
        JNZ     ??bindNumBoundTo_4
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??bindNumBoundTo_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??bindNumBoundTo_5:
        JNZ     ??bindNumBoundTo_4
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 1
        JNZ     ??bindNumBoundTo_4
//  646       {
//  647         num++;
??bindNumBoundTo_6:
        INC     ?V0 + 0
//  648       }
??bindNumBoundTo_4:
        INC     R5
??bindNumBoundTo_2:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R5
        CLR     C
        SUBB    A,R0
        JNC     ??bindNumBoundTo_7
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_26:
        MOV     A,?V0 + 2
        MOV     DPL,R0
        MOV     DPH,R1
        JZ      ??bindNumBoundTo_8
        MOVX    A,@DPTR
        XRL     A,?V0 + 1
        JNZ     ??bindNumBoundTo_4
        SJMP    ??bindNumBoundTo_6
??bindNumBoundTo_8:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??bindNumBoundTo_3
        MOV     A,#0x1
        XRL     A,R4
        JNZ     ??bindNumBoundTo_4
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??bindNumBoundTo_9
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??bindNumBoundTo_9:
        JZ      ??bindNumBoundTo_6
        SJMP    ??bindNumBoundTo_4
//  649     }
//  650   }
//  651 
//  652   return num;
??bindNumBoundTo_7:
        MOV     R1,?V0 + 0
          CFI EndBlock cfiBlock36
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5
//  653 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond38 Using cfiCommon0
          CFI Function bindFindExisting
          CFI Conditional ??CrossCallReturnLabel_17
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function bindNumBoundTo
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+0
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker40 Using cfiCommon1
          CFI (cfiPicker40) NoFunction
          CFI (cfiPicker40) Picker
        MOV     A,R2
        ADD     A,#0x8
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_24:
        XRL     A,#0x1
        RET
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiPicker40

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond41 Using cfiCommon0
          CFI Function bindRemoveClusterIdFromList
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function bindFindExisting
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_17
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+0
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function bindNumBoundTo
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_24, ??CrossCallReturnLabel_18
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+0
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond45 Using cfiCommon0
          CFI Function bindNumBoundTo
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function bindAddressClear
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond46) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond46) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond46) CFA_SP SP+-5
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker47 Using cfiCommon1
          CFI (cfiPicker47) NoFunction
          CFI (cfiPicker47) Picker
        MOV     A,R5
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiPicker47
        REQUIRE ??Subroutine23_0
        ; // Fall through to label ??Subroutine23_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine23_0:
          CFI Block cfiCond48 Using cfiCommon0
          CFI Function bindUpdateAddr
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function bindNumBoundTo
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+0
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function bindAddressClear
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond50) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond50) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond50) CFA_SP SP+-5
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker51 Using cfiCommon1
          CFI (cfiPicker51) NoFunction
          CFI (cfiPicker51) Picker
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R1,A
        RET
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiPicker51
//  654 
//  655 /*********************************************************************
//  656  * @fn          bindNumReflections
//  657  *
//  658  * @brief       Counts the number of reflections needed for a
//  659  *              endpoint and cluster ID combo.
//  660  *
//  661  * @param       ep - source endpoint
//  662  * @param       clusterID - matching clusterID
//  663  *
//  664  * @return      number of reflections needed.
//  665  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  666 uint16 bindNumReflections( uint8 ep, uint16 clusterID )
bindNumReflections:
          CFI Block cfiBlock52 Using cfiCommon0
          CFI Function bindNumReflections
        CODE
//  667 {
        FUNCALL bindNumReflections, bindIsClusterIDinList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 3,R1
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  668   bindTableIndex_t x;
//  669   BindingEntry_t *pBind;
//  670   uint16 cnt = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  671   uint8 bindEP;
//  672 
//  673   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V0 + 2,R6
        SJMP    ??bindNumReflections_0
//  674   {
//  675     pBind = &BindingTable[x];
??bindNumReflections_1:
        MOV     A,?V0 + 2
        LCALL   ?Subroutine18 & 0xFFFF
//  676     bindEP = pBind->srcEP;
//  677 
//  678     if ( (bindEP == ep) && (bindIsClusterIDinList( pBind, clusterID )) )
??CrossCallReturnLabel_21:
        XRL     A,?V0 + 3
        JNZ     ??bindNumReflections_2
        ; Setup parameters for call to function bindIsClusterIDinList
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??bindIsClusterIDinList?relay
        MOV     A,R1
        JZ      ??bindNumReflections_2
//  679     {
//  680       cnt++;
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  681     }
//  682   }
??bindNumReflections_2:
        INC     ?V0 + 2
??bindNumReflections_0:
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_12:
        JC      ??bindNumReflections_1
//  683 
//  684   return ( cnt );
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LJMP    ??Subroutine22_0 & 0xFFFF
          CFI EndBlock cfiBlock52
//  685 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond53 Using cfiCommon0
          CFI Function bindFindEmpty
          CFI Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_0
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function bindNumOfEntries
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_1
          CFI (cfiCond54) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond54) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond54) CFA_SP SP+-5
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function bindCapacity
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_2
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+0
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function bindNumReflections
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond56) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+0
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker57 Using cfiCommon1
          CFI (cfiPicker57) NoFunction
          CFI (cfiPicker57) Picker
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiPicker57
//  686 
//  687 /*********************************************************************
//  688  * @fn          bindFind
//  689  *
//  690  * @brief       Finds the binding entry for the source address, endpoint
//  691  *              and cluster ID passed in as a parameter.
//  692  *
//  693  * @param       ep - source endpoint
//  694  * @param       clusterID - matching clusterID
//  695  * @param       skip - number of matches to skip before returning
//  696  *
//  697  * @return      pointer to the binding table entry, NULL if not found
//  698  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  699 BindingEntry_t *bindFind( uint8 ep, uint16 clusterID, uint8 skipping )
bindFind:
          CFI Block cfiBlock58 Using cfiCommon0
          CFI Function bindFind
        CODE
//  700 {
        FUNCALL bindFind, bindIsClusterIDinList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 4,R1
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 5,R4
//  701   BindingEntry_t *pBind;
//  702   byte skipped = 0;
        MOV     ?V0 + 2,#0x0
//  703   bindTableIndex_t x;
//  704 
//  705   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     ?V0 + 3,#0x0
        SJMP    ??bindFind_0
//  706   {
//  707     pBind = &BindingTable[x];
//  708 
//  709     if ( ( pBind->srcEP == ep) && bindIsClusterIDinList( pBind, clusterID ))
//  710     {
//  711       if ( skipped < skipping )
//  712       {
//  713         skipped++;
??bindFind_1:
        INC     ?V0 + 2
//  714       }
??bindFind_2:
        INC     ?V0 + 3
??bindFind_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,?V0 + 3
        CLR     C
        SUBB    A,R0
        JNC     ??bindFind_3
        MOV     A,?V0 + 3
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_3:
        XRL     A,?V0 + 4
        JNZ     ??bindFind_2
        ; Setup parameters for call to function bindIsClusterIDinList
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??bindIsClusterIDinList?relay
        MOV     A,R1
        JZ      ??bindFind_2
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,?V0 + 5
        JC      ??bindFind_1
//  715       else
//  716       {
//  717         return ( pBind );
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??bindFind_4
//  718       }
//  719     }
//  720   }
//  721 
//  722   return ( (BindingEntry_t *)NULL );
??bindFind_3:
        MOV     R2,#0x0
        MOV     R3,#0x0
??bindFind_4:
        LJMP    ?Subroutine5 & 0xFFFF
          CFI EndBlock cfiBlock58
//  723 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond59 Using cfiCommon0
          CFI Function bindAddEntry
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function bindFind
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+0
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker61 Using cfiCommon1
          CFI (cfiPicker61) NoFunction
          CFI (cfiPicker61) Picker
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     R6,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiPicker61
//  724 
//  725 /*********************************************************************
//  726  * @fn      bindAddressClear
//  727  *
//  728  * @brief   Lookup a binding entry by specific Idx, if none is found
//  729  *          clears the BINDING user from Address Manager.
//  730  *
//  731  * @param   dstIdx - Source Address Manager Index
//  732  *
//  733  * @return  none
//  734  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  735 void bindAddressClear( uint16 dstIdx )
bindAddressClear:
          CFI Block cfiBlock62 Using cfiCommon0
          CFI Function bindAddressClear
        CODE
//  736 {
        FUNCALL bindAddressClear, AddrMgrEntryRelease
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  737   bindTableIndex_t i;
//  738 
//  739   if ( dstIdx != INVALID_NODE_ADDR )
        MOV     A,#-0x2
        XRL     A,R2
        JNZ     ??bindAddressClear_0
        MOV     A,#-0x1
        XRL     A,R3
??bindAddressClear_0:
        JZ      ??bindAddressClear_1
//  740   {
//  741     // Looks for a specific Idx
//  742     for ( i = 0; i < gNWK_MAX_BINDING_ENTRIES; i++ )
        MOV     R5,#0x0
        SJMP    ??bindAddressClear_2
//  743     {
//  744       if ( ( BindingTable[i].dstGroupMode != AddrGroup ) &&
//  745            ( BindingTable[i].dstGroupMode == DSTGROUPMODE_ADDR ) &&
//  746            ( BindingTable[i].dstIdx == dstIdx ) )
??bindAddressClear_3:
        LCALL   ?Subroutine11 & 0xFFFF
//  747       {
//  748         break;  // found at least one
//  749       }
//  750     }
??CrossCallReturnLabel_27:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x1
        XRL     A,R4
        JZ      ??bindAddressClear_4
        MOV     A,R4
        JNZ     ??bindAddressClear_4
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??bindAddressClear_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??bindAddressClear_5:
        JZ      ??bindAddressClear_1
??bindAddressClear_4:
        INC     R5
??bindAddressClear_2:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R5
        CLR     C
        SUBB    A,R0
        JC      ??bindAddressClear_3
//  751 
//  752     if ( i == gNWK_MAX_BINDING_ENTRIES )
        CLR     A
        MOVC    A,@A+DPTR
        XRL     A,R5
        JNZ     ??bindAddressClear_1
//  753     {
//  754       // No binding entry is associated with dstIdx.
//  755       // Remove user binding bit from the address manager entry corresponding to dstIdx.
//  756       AddrMgrEntry_t addrEntry;
//  757 
//  758       addrEntry.user = ADDRMGR_USER_BINDING;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
//  759       addrEntry.index = dstIdx;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
//  760 
//  761       AddrMgrEntryRelease( &addrEntry );
//  762     }
//  763   }
??CrossCallReturnLabel_28:
        LCALL   ??AddrMgrEntryRelease?relay
//  764 }
??bindAddressClear_1:
        SJMP    ??Subroutine26_0
          CFI EndBlock cfiBlock62

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond63 Using cfiCommon0
          CFI Function bindAddressClear
          CFI Conditional ??CrossCallReturnLabel_28
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function bindUpdateAddr
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+0
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function bindingAddrMgsHelperConvert
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+0
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function bindingAddrMgsHelperConvertShort
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond66) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond66) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond66) CFA_SP SP+-5
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker67 Using cfiCommon1
          CFI (cfiPicker67) NoFunction
          CFI (cfiPicker67) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiPicker67
        REQUIRE ??Subroutine24_0
        ; // Fall through to label ??Subroutine24_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine24_0:
          CFI Block cfiCond68 Using cfiCommon0
          CFI Function bindUpdateAddr
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function bindingAddrMgsHelperFind
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond69) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond69) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond69) CFA_SP SP+-5
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function bindAddrIndexGet
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond70) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond70) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond70) CFA_SP SP+-5
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function bindAddressClear
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond71) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond71) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond71) CFA_SP SP+-5
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function bindUpdateAddr
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+0
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function bindingAddrMgsHelperConvert
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+0
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function bindingAddrMgsHelperConvertShort
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond74) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond74) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond74) CFA_SP SP+-5
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker75 Using cfiCommon1
          CFI (cfiPicker75) NoFunction
          CFI (cfiPicker75) Picker
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_35:
        MOV     R2,DPL
        MOV     R3,DPH
        RET
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiPicker75

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock76 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 13)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV     A,#0xb
          CFI EndBlock cfiBlock76
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine25_0:
          CFI Block cfiBlock77 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 13)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
          CFI EndBlock cfiBlock77
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine26_0:
          CFI Block cfiBlock78 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 13)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV     A,#0xd
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock78
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine27_0:
          CFI Block cfiBlock79 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock79
//  765 
//  766 /*********************************************************************
//  767  * @fn          BindInitNV
//  768  *
//  769  * @brief       Initialize the Binding NV Item
//  770  *
//  771  * @param       none
//  772  *
//  773  * @return      ZSUCCESS if successful, NV_ITEM_UNINIT if item did not
//  774  *              exist in NV, NV_OPER_FAILED if failure.
//  775  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  776 byte BindInitNV( void )
BindInitNV:
          CFI Block cfiBlock80 Using cfiCommon0
          CFI Function BindInitNV
        CODE
//  777 {
        FUNCALL BindInitNV, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindInitNV, BindSetDefaultNV
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  778   byte ret;
//  779 
//  780   // Initialize the device list
//  781   ret = osal_nv_item_init( ZCD_NV_BINDING_TABLE,
//  782                   (uint16)(gBIND_REC_SIZE + NV_BIND_ITEM_SIZE), NULL );
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     DPTR,#gBIND_REC_SIZE
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R1,A
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V0 + 0,A
        MOV     A,R0
        MOV     B,?V0 + 0
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,?V0 + 0
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     DPH,#(gBIND_REC_SIZE >> 8) & 0xff
        MOV     DPL,#gBIND_REC_SIZE & 0xff
        CLR     A
        MOVC    A,@A+DPTR
        ADD     A,R0
        MOV     R4,A
        INC     DPTR
        CLR     A
        MOVC    A,@A+DPTR
        ADDC    A,R1
        MOV     R5,A
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R1
        MOV     R6,A
//  783 
//  784   if ( ret != ZSUCCESS )
        JZ      ??BindInitNV_0
//  785   {
//  786     BindSetDefaultNV();
        ; Setup parameters for call to function BindSetDefaultNV
        LCALL   ??BindSetDefaultNV?relay
//  787   }
//  788 
//  789   return ( ret );
??BindInitNV_0:
        MOV     A,R6
        MOV     R1,A
        LJMP    ??Subroutine21_0 & 0xFFFF
          CFI EndBlock cfiBlock80
//  790 }
//  791 
//  792 /*********************************************************************
//  793  * @fn          BindSetDefaultNV
//  794  *
//  795  * @brief       Write the defaults to NV
//  796  *
//  797  * @param       none
//  798  *
//  799  * @return      none
//  800  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  801 void BindSetDefaultNV( void )
BindSetDefaultNV:
          CFI Block cfiBlock81 Using cfiCommon0
          CFI Function BindSetDefaultNV
        CODE
//  802 {
        FUNCALL BindSetDefaultNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  803   nvBindingHdr_t hdr;
//  804 
//  805   // Initialize the header
//  806   hdr.numRecs = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine19 & 0xFFFF
//  807 
//  808   // Save off the header
//  809   osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof( nvBindingHdr_t ), &hdr );
??CrossCallReturnLabel_36:
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  810 }
        MOV     A,#0x2
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock81

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond82 Using cfiCommon0
          CFI Function bindAddressClear
          CFI Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_28
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function bindUpdateAddr
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_29
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+0
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function bindingAddrMgsHelperConvert
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_30
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+0
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function bindingAddrMgsHelperConvertShort
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_31
          CFI (cfiCond85) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond85) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond85) CFA_SP SP+-5
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function bindUpdateAddr
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_32
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+0
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function bindingAddrMgsHelperFind
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_33
          CFI (cfiCond87) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond87) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond87) CFA_SP SP+-5
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function bindAddrIndexGet
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_35, ??CrossCallReturnLabel_34
          CFI (cfiCond88) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond88) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond88) CFA_SP SP+-5
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function BindSetDefaultNV
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+0
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function bindUpdateAddr
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+0
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker91 Using cfiCommon1
          CFI (cfiPicker91) NoFunction
          CFI (cfiPicker91) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function AddrMgrEntryRelease
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        ; Setup parameters for call to function AddrMgrEntryGet
        ; Setup parameters for call to function AddrMgrEntryGet
        ; Setup parameters for call to function bindingAddrMgsHelperFind
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        ; Setup parameters for call to function osal_nv_write
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiPicker91
//  811 
//  812 /*********************************************************************
//  813  * @fn          BindRestoreFromNV
//  814  *
//  815  * @brief       Restore the binding table from NV
//  816  *
//  817  * @param       none
//  818  *
//  819  * @return      Number of entries restored
//  820  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  821 uint16 BindRestoreFromNV( void )
BindRestoreFromNV:
          CFI Block cfiBlock92 Using cfiCommon0
          CFI Function BindRestoreFromNV
        CODE
//  822 {
        FUNCALL BindRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindRestoreFromNV, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  823   nvBindingHdr_t hdr;
//  824   uint16 numAdded = 0;
        MOV     R6,#0x0
//  825 
//  826   if ( osal_nv_read( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr ) == ZSuccess )
        ; Setup parameters for call to function osal_nv_read
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,R6
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        JNZ     ??BindRestoreFromNV_0
//  827   {
//  828     if (hdr.numRecs > 0)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        JZ      ??BindRestoreFromNV_0
//  829     {
//  830       // Read the whole table at once
//  831       if ( osal_nv_read( ZCD_NV_BINDING_TABLE,
//  832                          (uint16)(sizeof(nvBindingHdr_t)),
//  833                          (NV_BIND_REC_SIZE * gNWK_MAX_BINDING_ENTRIES), BindingTable ) == ZSUCCESS )
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V0 + 0,A
        ; Setup parameters for call to function osal_nv_read
        MOV     ?V0 + 2,#BindingTable & 0xff
        MOV     ?V0 + 3,#(BindingTable >> 8) & 0xff
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     DPTR,#gBIND_REC_SIZE
        CLR     A
        MOVC    A,@A+DPTR
        MOV     ?V0 + 2,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     ?V0 + 3,A
        MOV     A,?V0 + 2
        MOV     B,?V0 + 0
        MUL     AB
        MOV     ?V0 + 2,A
        MOV     R0,B
        MOV     B,?V0 + 0
        MOV     A,?V0 + 3
        MUL     AB
        ADD     A,R0
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,#0x2
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        JNZ     ??BindRestoreFromNV_0
//  834       {
//  835         numAdded = gNWK_MAX_BINDING_ENTRIES;
        MOV     R6,?V0 + 0
//  836       }
//  837     }
//  838   }
//  839   return ( numAdded );
??BindRestoreFromNV_0:
        MOV     A,R6
        MOV     R2,A
        MOV     R3,#0x0
        MOV     A,#0x2
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock92
//  840 }
//  841 
//  842 /*********************************************************************
//  843  * @fn          BindWriteNV
//  844  *
//  845  * @brief       Save the Binding Table in NV
//  846  *
//  847  * @param       none
//  848  *
//  849  * @return      none
//  850  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  851 void BindWriteNV( void )
BindWriteNV:
          CFI Block cfiBlock93 Using cfiCommon0
          CFI Function BindWriteNV
        CODE
//  852 {
        FUNCALL BindWriteNV, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindWriteNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL BindWriteNV, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 16
        MOV     A,#-0x10
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
//  853   BindingEntry_t *pBind;
//  854   BindingEntry_t bind;
//  855   nvBindingHdr_t hdr;
//  856   bindTableIndex_t x;
//  857 
//  858   hdr.numRecs = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  859 
//  860   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R6,A
        LJMP    ??BindWriteNV_0 & 0xFFFF
//  861   {
//  862     pBind = &BindingTable[x];
??BindWriteNV_1:
        MOV     A,R6
        MOV     B,#0xe
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#BindingTable & 0xff
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R1
        MOV     ?V0 + 1,A
//  863 
//  864     osal_memcpy( &bind, pBind, gBIND_REC_SIZE );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 34)
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_9:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
//  865 
//  866     // Save the record to NV
//  867     osal_nv_write( ZCD_NV_BINDING_TABLE,
//  868                    (uint16)((sizeof(nvBindingHdr_t)) + (x * NV_BIND_REC_SIZE)),
//  869                    NV_BIND_REC_SIZE, &bind );
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     DPTR,#gBIND_REC_SIZE
        LCALL   ?PUSH_XSTACK8_C_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 2,R6
        MOV     DPTR,#gBIND_REC_SIZE
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R1,A
        MOV     A,R0
        MOV     B,?V0 + 2
        MUL     AB
        MOV     R0,A
        MOV     R2,B
        MOV     B,?V0 + 2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,R0
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R5,A
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
//  870 
//  871     if ( pBind->srcEP != NV_BIND_EMPTY )
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        CPL     A
        JZ      ??BindWriteNV_2
//  872     {
//  873       hdr.numRecs++;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
//  874     }
//  875   }
??BindWriteNV_2:
        INC     R6
??BindWriteNV_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R6
        CLR     C
        SUBB    A,R0
        JNC     $+5
        LJMP    ??BindWriteNV_1 & 0xFFFF
//  876 
//  877   // Save off the header
//  878   osal_nv_write( ZCD_NV_BINDING_TABLE, 0, sizeof(nvBindingHdr_t), &hdr );
        ; Setup parameters for call to function osal_nv_write
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x41
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
//  879 }
        MOV     A,#0x10
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock93
//  880 
//  881 /*********************************************************************
//  882  * @fn          bindUpdateAddr
//  883  *
//  884  * @brief       Update the network address in the binding table.
//  885  *
//  886  * @param       oldAddr - old network address
//  887  * @param       newAddr - new network address
//  888  *
//  889  * @return      none
//  890  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  891 void bindUpdateAddr( uint16 oldAddr, uint16 newAddr )
bindUpdateAddr:
          CFI Block cfiBlock94 Using cfiCommon0
          CFI Function bindUpdateAddr
        CODE
//  892 {
        FUNCALL bindUpdateAddr, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindUpdateAddr, bindingAddrMgsHelperFind
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  893   uint16 oldIdx;
//  894   uint16 newIdx;
//  895   zAddrType_t addr;
//  896   bindTableIndex_t x;
//  897   BindingEntry_t *pBind;
//  898 
//  899   addr.addrMode = Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        LCALL   ?Subroutine19 & 0xFFFF
//  900   addr.addr.shortAddr = oldAddr;
??CrossCallReturnLabel_37:
        LCALL   ?Subroutine12 & 0xFFFF
//  901   oldIdx = bindingAddrMgsHelperFind( &addr );
??CrossCallReturnLabel_29:
        LCALL   ??bindingAddrMgsHelperFind?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  902   addr.addr.shortAddr = newAddr;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ??Subroutine24_0 & 0xFFFF
//  903   newIdx = bindingAddrMgsHelperFind( &addr );
??CrossCallReturnLabel_32:
        LCALL   ??bindingAddrMgsHelperFind?relay
        MOV     ?V0 + 3,R3
//  904 
//  905   for ( x = 0; x < gNWK_MAX_BINDING_ENTRIES; x++ )
        MOV     R3,#0x0
        SJMP    ??bindUpdateAddr_0
//  906   {
//  907     pBind = &BindingTable[x];
??bindUpdateAddr_1:
        MOV     A,R3
        LCALL   ??Subroutine23_0 & 0xFFFF
//  908 
//  909     if ( pBind->dstIdx == oldIdx )
??CrossCallReturnLabel_25:
        MOV     A,R0
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R1
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_20:
        XRL     A,?V0 + 0
        JNZ     ??bindUpdateAddr_2
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,?V0 + 1
??bindUpdateAddr_2:
        JNZ     ??bindUpdateAddr_3
//  910     {
//  911       pBind->dstIdx = newIdx;
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  912     }
//  913   }
??bindUpdateAddr_3:
        INC     R3
??bindUpdateAddr_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,R3
        CLR     C
        SUBB    A,R0
        JC      ??bindUpdateAddr_1
//  914 }
        MOV     A,#0x9
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock94

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond95 Using cfiCommon0
          CFI Function bindAddClusterIdToList
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond96 Using cfiCommon0
          CFI (cfiCond96) Function bindUpdateAddr
          CFI (cfiCond96) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond96) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond96) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond96) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond96) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond96) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond96) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond96) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond96) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond96) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond96) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond96) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond96) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond96) CFA_SP SP+0
          CFI (cfiCond96) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker97 Using cfiCommon1
          CFI (cfiPicker97) NoFunction
          CFI (cfiPicker97) Picker
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond95
          CFI EndBlock cfiCond96
          CFI EndBlock cfiPicker97
//  915 
//  916 /*********************************************************************
//  917  * @fn      bindingAddrMgsHelperFind
//  918  *
//  919  * @brief   Turns an zAddrType_t to an Addr Manager index
//  920  *
//  921  * @param   addr - zAddrType_t
//  922  *
//  923  * @return  INVALID_NODE_ADDR if not found, otherwise an index
//  924  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  925 uint16 bindingAddrMgsHelperFind( zAddrType_t *addr )
bindingAddrMgsHelperFind:
          CFI Block cfiBlock98 Using cfiCommon0
          CFI Function bindingAddrMgsHelperFind
        CODE
//  926 {
        FUNCALL bindingAddrMgsHelperFind, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindingAddrMgsHelperFind, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindingAddrMgsHelperFind, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  927   AddrMgrEntry_t entry;
//  928 
//  929   // Resolve addresses with the address manager
//  930   entry.user = ADDRMGR_USER_BINDING;
        LCALL   ?Subroutine13 & 0xFFFF
//  931   if ( addr->addrMode == Addr16Bit )
??CrossCallReturnLabel_13:
        XRL     A,#0x2
        JNZ     ??bindingAddrMgsHelperFind_0
//  932   {
//  933     entry.nwkAddr = addr->addr.shortAddr;
        LCALL   ?Subroutine14 & 0xFFFF
//  934     AddrMgrEntryLookupNwk( &entry );
//  935   }
??CrossCallReturnLabel_39:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ??Subroutine24_0 & 0xFFFF
??CrossCallReturnLabel_33:
        LCALL   ??AddrMgrEntryLookupNwk?relay
        SJMP    ??bindingAddrMgsHelperFind_1
//  936   else
//  937   {
//  938     AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
??bindingAddrMgsHelperFind_0:
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrExtAddrSet?relay
//  939     AddrMgrEntryLookupExt( &entry );
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryLookupExt?relay
//  940   }
//  941 
//  942   return ( entry.index );
??bindingAddrMgsHelperFind_1:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock98
//  943 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond99 Using cfiCommon0
          CFI Function bindingAddrMgsHelperFind
          CFI Conditional ??CrossCallReturnLabel_39
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function bindAddrIndexGet
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond100) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond100) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond100) CFA_SP SP+-5
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker101 Using cfiCommon1
          CFI (cfiPicker101) NoFunction
          CFI (cfiPicker101) Picker
        MOV     DPL,R2
        MOV     DPH,R3
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiPicker101
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine28_0:
          CFI Block cfiCond102 Using cfiCommon0
          CFI Function bindAddrMgrLocalLoad
          CFI Conditional ??CrossCallReturnLabel_38
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function bindingAddrMgsHelperFind
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond103) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond103) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond103) CFA_SP SP+-5
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function bindAddrIndexGet
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond104) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond104) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond104) CFA_SP SP+-5
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker105 Using cfiCommon1
          CFI (cfiPicker105) NoFunction
          CFI (cfiPicker105) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        RET
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiPicker105
//  944 
//  945 /*********************************************************************
//  946  * @fn      bindingAddrMgsHelperConvert
//  947  *
//  948  * @brief   Convert an index into an zAddrType_t
//  949  *
//  950  * @param   idx -
//  951  * @param   addr - zAddrType_t
//  952  *
//  953  * @return  TRUE if found, FALSE if not
//  954  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  955 uint8 bindingAddrMgsHelperConvert( uint16 idx, zAddrType_t *addr )
bindingAddrMgsHelperConvert:
          CFI Block cfiBlock106 Using cfiCommon0
          CFI Function bindingAddrMgsHelperConvert
        CODE
//  956 {
        FUNCALL bindingAddrMgsHelperConvert, AddrMgrEntryGet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindingAddrMgsHelperConvert, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  957   AddrMgrEntry_t entry;
//  958   uint8 stat;
//  959 
//  960   // Resolve addresses with the address manager
//  961   entry.user = ADDRMGR_USER_BINDING;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
//  962   entry.index = idx;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
//  963   stat = AddrMgrEntryGet( &entry );
??CrossCallReturnLabel_30:
        LCALL   ??AddrMgrEntryGet?relay
        MOV     A,R1
        MOV     ?V0 + 0,A
//  964   if ( stat )
        JZ      ??bindingAddrMgsHelperConvert_0
//  965   {
//  966     addr->addrMode = Addr64Bit;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,#0x3
        MOVX    @DPTR,A
//  967     osal_cpyExtAddr( addr->addr.extAddr, entry.extAddr );
        ; Setup parameters for call to function sAddrExtCpy
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??sAddrExtCpy?relay
//  968   }
//  969 
//  970   return ( stat );
??bindingAddrMgsHelperConvert_0:
        MOV     R1,?V0 + 0
        MOV     A,#0xd
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock106
//  971 }
//  972 
//  973 /*********************************************************************
//  974  * @fn      bindingAddrMgsHelperConvertShort
//  975  *
//  976  * @brief   Convert an index into a short address
//  977  *
//  978  * @param   idx -
//  979  *
//  980  * @return  INVALID_NODE_ADDR if not available, otherwise the short address
//  981  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  982 uint16 bindingAddrMgsHelperConvertShort( uint16 idx )
bindingAddrMgsHelperConvertShort:
          CFI Block cfiBlock107 Using cfiCommon0
          CFI Function bindingAddrMgsHelperConvertShort
        CODE
//  983 {
        FUNCALL bindingAddrMgsHelperConvertShort, AddrMgrEntryGet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  984   AddrMgrEntry_t entry;
//  985 
//  986   // Resolve addresses with the address manager
//  987   entry.user = ADDRMGR_USER_BINDING;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
//  988   entry.index = idx;
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine12 & 0xFFFF
//  989   AddrMgrEntryGet( &entry );
??CrossCallReturnLabel_31:
        LCALL   ??AddrMgrEntryGet?relay
//  990 
//  991   return ( entry.nwkAddr );
        MOV     A,#0x1
        LJMP    ??Subroutine25_0 & 0xFFFF
          CFI EndBlock cfiBlock107
//  992 }
//  993 
//  994 /*********************************************************************
//  995  * @fn      bindAddrMgrLocalLoad
//  996  *
//  997  * @brief   Load local(self and parent) address information into
//  998  *          Address Manager
//  999  *
// 1000  * @param   none
// 1001  *
// 1002  * @return  none
// 1003  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1004 void bindAddrMgrLocalLoad( void )
bindAddrMgrLocalLoad:
          CFI Block cfiBlock108 Using cfiCommon0
          CFI Function bindAddrMgrLocalLoad
        CODE
// 1005 {
        FUNCALL bindAddrMgrLocalLoad, NLME_GetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, NLME_GetCoordShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, NLME_GetCoordExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrMgrLocalLoad, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
// 1006   AddrMgrEntry_t entry;
// 1007   uint16         parent;
// 1008 
// 1009   // add "local"(self and parent) address informtion into the Address
// 1010   // Manager
// 1011   if ( bindAddrMgrLocalLoaded == FALSE )
        MOV     DPTR,#bindAddrMgrLocalLoaded
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??bindAddrMgrLocalLoad_0 & 0xFFFF
// 1012   {
// 1013     // add the device's address information
// 1014     entry.user    = ADDRMGR_USER_BINDING;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
// 1015     entry.nwkAddr = _NIB.nwkDevAddress;
        MOV     DPTR,#_NIB + 20
        LCALL   ??Subroutine28_0 & 0xFFFF
??CrossCallReturnLabel_38:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1016     AddrMgrExtAddrSet( entry.extAddr, NLME_GetExtAddr() );
        ; Setup parameters for call to function AddrMgrExtAddrSet
        ; Setup parameters for call to function NLME_GetExtAddr
        LCALL   ??NLME_GetExtAddr?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrExtAddrSet?relay
// 1017     AddrMgrEntryUpdate( &entry );
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryUpdate?relay
// 1018 
// 1019     // make sure parent address is valid
// 1020     parent = NLME_GetCoordShortAddr();
        ; Setup parameters for call to function NLME_GetCoordShortAddr
        LCALL   ??NLME_GetCoordShortAddr?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
// 1021     if ( ( parent != entry.nwkAddr     ) &&
// 1022          ( parent != INVALID_NODE_ADDR )    )
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??bindAddrMgrLocalLoad_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??bindAddrMgrLocalLoad_1:
        JZ      ??bindAddrMgrLocalLoad_2
        MOV     A,#-0x2
        XRL     A,R0
        JNZ     ??bindAddrMgrLocalLoad_3
        MOV     A,#-0x1
        XRL     A,R1
??bindAddrMgrLocalLoad_3:
        JZ      ??bindAddrMgrLocalLoad_2
// 1023     {
// 1024       // add the parent's address information
// 1025       entry.nwkAddr = parent;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1026       NLME_GetCoordExtAddr( entry.extAddr );
        ; Setup parameters for call to function NLME_GetCoordExtAddr
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??NLME_GetCoordExtAddr?relay
// 1027       AddrMgrEntryUpdate( &entry );
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryUpdate?relay
// 1028     }
// 1029 
// 1030     bindAddrMgrLocalLoaded = TRUE;
??bindAddrMgrLocalLoad_2:
        MOV     DPTR,#bindAddrMgrLocalLoaded
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1031   }
// 1032 }
??bindAddrMgrLocalLoad_0:
        MOV     A,#0xd
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock108
// 1033 
// 1034 /*********************************************************************
// 1035  * @fn      bindAddrIndexGet
// 1036  *
// 1037  * @brief   Get bind address index.
// 1038  *
// 1039  * @param   addr - <zAddrType_t>
// 1040  *
// 1041  * @return  (uint16) address index
// 1042  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1043 uint16 bindAddrIndexGet( zAddrType_t* addr )
bindAddrIndexGet:
          CFI Block cfiBlock109 Using cfiCommon0
          CFI Function bindAddrIndexGet
        CODE
// 1044 {
        FUNCALL bindAddrIndexGet, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrIndexGet, AddrMgrExtAddrSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrIndexGet, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL bindAddrIndexGet, AddrMgrEntryUpdate
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 13
        MOV     A,#-0xd
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
// 1045   AddrMgrEntry_t entry;
// 1046   uint8          update;
// 1047 
// 1048   update = FALSE;
// 1049 
// 1050   // sync binding addresses with the address manager
// 1051   entry.user = ADDRMGR_USER_BINDING;
        LCALL   ?Subroutine13 & 0xFFFF
// 1052 
// 1053   if ( addr->addrMode == Addr16Bit )
??CrossCallReturnLabel_14:
        MOV     R0,A
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??bindAddrIndexGet_0
// 1054   {
// 1055     entry.nwkAddr = addr->addr.shortAddr;
        LCALL   ?Subroutine14 & 0xFFFF
// 1056 
// 1057     if ( AddrMgrEntryLookupNwk( &entry ) == FALSE )
// 1058     {
// 1059       update = TRUE;
// 1060     }
// 1061   }
??CrossCallReturnLabel_40:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ??Subroutine24_0 & 0xFFFF
??CrossCallReturnLabel_34:
        LCALL   ??AddrMgrEntryLookupNwk?relay
        MOV     A,R1
        JNZ     ??bindAddrIndexGet_1
        SJMP    ??bindAddrIndexGet_2
// 1062   else if ( addr->addrMode == Addr64Bit )
??bindAddrIndexGet_0:
        MOV     A,#0x3
        XRL     A,R0
        JNZ     ??bindAddrIndexGet_3
// 1063   {
// 1064     AddrMgrExtAddrSet( entry.extAddr, addr->addr.extAddr );
        ; Setup parameters for call to function AddrMgrExtAddrSet
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrExtAddrSet?relay
// 1065 
// 1066     if ( AddrMgrEntryLookupExt( &entry ) == FALSE )
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryLookupExt?relay
        MOV     A,R1
        JNZ     ??bindAddrIndexGet_1
// 1067     {
// 1068       update = TRUE;
// 1069     }
// 1070   }
// 1071   else if ( addr->addrMode == AddrGroup )
// 1072   {
// 1073     entry.index = addr->addr.shortAddr;
// 1074   }
// 1075   else
// 1076   {
// 1077     entry.index = INVALID_NODE_ADDR;
// 1078   }
// 1079 
// 1080   if ( update )
// 1081   {
// 1082     AddrMgrEntryUpdate( &entry );
??bindAddrIndexGet_2:
        ; Setup parameters for call to function AddrMgrEntryUpdate
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryUpdate?relay
        SJMP    ??bindAddrIndexGet_1
// 1083   }
??bindAddrIndexGet_3:
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??bindAddrIndexGet_4
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        SJMP    ??bindAddrIndexGet_5
??bindAddrIndexGet_4:
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
??bindAddrIndexGet_5:
        MOVX    @DPTR,A
// 1084 
// 1085   return entry.index;
??bindAddrIndexGet_1:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock109
// 1086 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond110 Using cfiCommon0
          CFI Function bindingAddrMgsHelperFind
          CFI Conditional ??CrossCallReturnLabel_13
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond111 Using cfiCommon0
          CFI (cfiCond111) Function bindAddrIndexGet
          CFI (cfiCond111) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond111) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond111) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond111) CFA_SP SP+-5
          CFI (cfiCond111) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker112 Using cfiCommon1
          CFI (cfiPicker112) NoFunction
          CFI (cfiPicker112) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x4
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond110
          CFI EndBlock cfiCond111
          CFI EndBlock cfiPicker112
// 1087 
// 1088 /*********************************************************************
// 1089  * @fn      GetBindingTableEntry
// 1090  *
// 1091  * @brief   Get a pointer to the Nth valid binding table entry.
// 1092  *
// 1093  * @param   Nth valid entry being requested.
// 1094  *
// 1095  * @return  The Nth valid binding table entry.
// 1096  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1097 BindingEntry_t *GetBindingTableEntry( uint16 Nth )
GetBindingTableEntry:
          CFI Block cfiBlock113 Using cfiCommon0
          CFI Function GetBindingTableEntry
        CODE
// 1098 {
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
// 1099   BindingEntry_t *rtrn = NULL;
        MOV     R2,#0x0
        MOV     R3,#0x0
// 1100 
// 1101 #if defined ( REFLECTOR )
// 1102   bindTableIndex_t idx, cnt = 0;
        MOV     ?V0 + 2,R2
// 1103 
// 1104   for ( idx = 0; idx < gNWK_MAX_BINDING_ENTRIES; idx++ )
        MOV     R7,#0x0
        SJMP    ??GetBindingTableEntry_0
??GetBindingTableEntry_1:
        INC     R7
??GetBindingTableEntry_0:
        MOV     DPTR,#gNWK_MAX_BINDING_ENTRIES
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R4,A
        MOV     A,R7
        CLR     C
        SUBB    A,R4
        JNC     ??GetBindingTableEntry_2
// 1105   {
// 1106     if ( BindingTable[idx].srcEP != NV_BIND_EMPTY )
        MOV     A,R7
        MOV     B,#0xe
        MUL     AB
        MOV     R4,A
        MOV     R5,B
        MOV     A,#BindingTable & 0xff
        ADD     A,R4
        MOV     DPL,A
        MOV     A,#(BindingTable >> 8) & 0xff
        ADDC    A,R5
        MOV     DPH,A
        MOVX    A,@DPTR
        CPL     A
        JZ      ??GetBindingTableEntry_1
// 1107     {
// 1108       if ( cnt++ == Nth )
        MOV     R4,?V0 + 2
        MOV     A,#0x1
        ADD     A,R4
        MOV     ?V0 + 2,A
        MOV     ?V0 + 0,R4
        MOV     A,R0
        XRL     A,?V0 + 0
        JNZ     ??GetBindingTableEntry_3
        MOV     A,R1
??GetBindingTableEntry_3:
        JNZ     ??GetBindingTableEntry_1
// 1109       {
// 1110         rtrn = BindingTable+idx;
        MOV     R2,DPL
        MOV     R3,DPH
// 1111         break;
// 1112       }
// 1113     }
// 1114   }
// 1115 #else
// 1116   (void)Nth;
// 1117 #endif
// 1118 
// 1119   return rtrn;
??GetBindingTableEntry_2:
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock113
// 1120 }

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??InitBindingTable?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    InitBindingTable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindFindEmpty?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindFindEmpty

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindNumOfEntries?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindNumOfEntries

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindCapacity?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindCapacity

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindAddEntry?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindRemoveEntry?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindRemoveEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindIsClusterIDinList?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindIsClusterIDinList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindRemoveClusterIdFromList?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindRemoveClusterIdFromList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindAddClusterIdToList?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddClusterIdToList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindFindExisting?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindFindExisting

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindRemoveDev?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindRemoveDev

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindRemoveSrcDev?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindRemoveSrcDev

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindNumBoundTo?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindNumBoundTo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindNumReflections?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindNumReflections

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindFind?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindFind

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindAddressClear?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddressClear

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BindInitNV?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindInitNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BindSetDefaultNV?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindSetDefaultNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BindRestoreFromNV?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindRestoreFromNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??BindWriteNV?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    BindWriteNV

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindUpdateAddr?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindUpdateAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindingAddrMgsHelperFind?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindingAddrMgsHelperFind

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindingAddrMgsHelperConvert?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindingAddrMgsHelperConvert

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindingAddrMgsHelperConvertShort?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindingAddrMgsHelperConvertShort

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindAddrMgrLocalLoad?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddrMgrLocalLoad

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??bindAddrIndexGet?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    bindAddrIndexGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GetBindingTableEntry?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    GetBindingTableEntry

        END
// 1121 
// 1122 /*********************************************************************
// 1123 *********************************************************************/
// 
// 3 076 bytes in segment BANKED_CODE
//   162 bytes in segment BANK_RELAYS
//    15 bytes in segment XDATA_Z
// 
// 3 238 bytes of CODE  memory
//    15 bytes of XDATA memory
//
//Errors: none
//Warnings: none
