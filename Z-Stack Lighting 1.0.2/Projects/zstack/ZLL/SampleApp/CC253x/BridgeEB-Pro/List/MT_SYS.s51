///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            12/Apr/2014  12:18:01 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\Texas Instruments\Z-Stack Lighting             /
//                          1.0.2\Components\mt\MT_SYS.c                      /
//    Command line       =  -f "D:\Texas Instruments\Z-Stack Lighting         /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ      /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f "D:\Texas        /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO     /
//                          -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f "D:\Texas              /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wZCL.cfg" "D:\Texas           /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Components\mt\MT_SYS.c" -D                  /
//                          FEATURE_GREEN_POWER -D SECURE=1 -D                /
//                          TC_LINKKEY_JOIN -D ZDSECMGR_TC_DEVICE_MAX=2 -D    /
//                          NV_RESTORE -D HOLD_AUTO_START -D INTER_PAN -D     /
//                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D             /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D MT_ZDO_CB_FUNC -D   /
//                          MT_UTIL_FUNC -D MT_ZDO_MGMT -D LCD_SUPPORTED -D   /
//                          HAL_LCD=FALSE -D HAL_KEY=FALSE -D ZCL_BASIC -D    /
//                          ZCL_READ -D ZCL_WRITE -D ZCL_IDENTIFY -D          /
//                          ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D         /
//                          ZCL_LIGHT_LINK_ENHANCE -D ZCL_LEVEL_CTRL -D       /
//                          ZCL_COLOR_CTRL -D xMAX_CHANNELS_24GHZ=0x02108800  /
//                          -lC "D:\Texas Instruments\Z-Stack Lighting        /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Bridge /
//                          EB-Pro\List\" -lA "D:\Texas Instruments\Z-Stack   /
//                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC25 /
//                          3x\BridgeEB-Pro\List\" --diag_suppress            /
//                          Pe001,Pa010 -o "D:\Texas Instruments\Z-Stack      /
//                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC25 /
//                          3x\BridgeEB-Pro\Obj\" -e --debug --core=plain     /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "D:\Texas                 /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\" -I   /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\Sou /
//                          rce\" -I "D:\Texas Instruments\Z-Stack Lighting   /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          Source\" -I "D:\Texas Instruments\Z-Stack         /
//                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC25 /
//                          3x\..\..\..\HomeAutomation\Source\" -I "D:\Texas  /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\HomeAutomation\SampleLight\Source\" -I         /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\ZMain\TI2530DB\" -I "D:\Texas                  /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\hal\include\" -I "D:\Texas    /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\hal\target\CC2530EB\" -I      /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\include\" -I "D:\Texas    /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\high_level\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\low_level\srf04\" -I      /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\low_level\srf04\single_ch /
//                          ip\" -I "D:\Texas Instruments\Z-Stack Lighting    /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mt\" -I "D:\Texas             /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\osal\include\" -I "D:\Texas   /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\services\saddr\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\services\sdata\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\af\" -I "D:\Texas       /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\nwk\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sapi\" -I "D:\Texas     /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sec\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sys\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\zcl\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\zdo\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\zmac\" -I "D:\Texas           /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\zmac\f8w\" -Ohz               /
//                          --require_prototypes                              /
//    List file          =  D:\Texas Instruments\Z-Stack Lighting             /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Bridge /
//                          EB-Pro\List\MT_SYS.s51                            /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME MT_SYS

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?US_DIV_MOD
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8

        PUBLIC ??MT_SysAdcRead?relay
        FUNCTION ??MT_SysAdcRead?relay,0203H
        PUBLIC ??MT_SysCommandProcessing?relay
        FUNCTION ??MT_SysCommandProcessing?relay,0203H
        PUBLIC ??MT_SysGetExtAddr?relay
        FUNCTION ??MT_SysGetExtAddr?relay,0203H
        PUBLIC ??MT_SysGetUtcTime?relay
        FUNCTION ??MT_SysGetUtcTime?relay,0203H
        PUBLIC ??MT_SysGpio?relay
        FUNCTION ??MT_SysGpio?relay,0203H
        PUBLIC ??MT_SysOsalNVDelete?relay
        FUNCTION ??MT_SysOsalNVDelete?relay,0203H
        PUBLIC ??MT_SysOsalNVItemInit?relay
        FUNCTION ??MT_SysOsalNVItemInit?relay,0203H
        PUBLIC ??MT_SysOsalNVLength?relay
        FUNCTION ??MT_SysOsalNVLength?relay,0203H
        PUBLIC ??MT_SysOsalNVRead?relay
        FUNCTION ??MT_SysOsalNVRead?relay,0203H
        PUBLIC ??MT_SysOsalNVWrite?relay
        FUNCTION ??MT_SysOsalNVWrite?relay,0203H
        PUBLIC ??MT_SysOsalStartTimer?relay
        FUNCTION ??MT_SysOsalStartTimer?relay,0203H
        PUBLIC ??MT_SysOsalStopTimer?relay
        FUNCTION ??MT_SysOsalStopTimer?relay,0203H
        PUBLIC ??MT_SysOsalTimerExpired?relay
        FUNCTION ??MT_SysOsalTimerExpired?relay,0203H
        PUBLIC ??MT_SysPing?relay
        FUNCTION ??MT_SysPing?relay,0203H
        PUBLIC ??MT_SysRandom?relay
        FUNCTION ??MT_SysRandom?relay,0203H
        PUBLIC ??MT_SysReset?relay
        FUNCTION ??MT_SysReset?relay,0203H
        PUBLIC ??MT_SysResetInd?relay
        FUNCTION ??MT_SysResetInd?relay,0203H
        PUBLIC ??MT_SysSetExtAddr?relay
        FUNCTION ??MT_SysSetExtAddr?relay,0203H
        PUBLIC ??MT_SysSetTxPower?relay
        FUNCTION ??MT_SysSetTxPower?relay,0203H
        PUBLIC ??MT_SysSetUtcTime?relay
        FUNCTION ??MT_SysSetUtcTime?relay,0203H
        PUBLIC ??MT_SysStackTune?relay
        FUNCTION ??MT_SysStackTune?relay,0203H
        PUBLIC ??MT_SysVersion?relay
        FUNCTION ??MT_SysVersion?relay,0203H
        PUBLIC MT_SysAdcRead
        FUNCTION MT_SysAdcRead,0a1203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC MT_SysCommandProcessing
        FUNCTION MT_SysCommandProcessing,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC MT_SysGetExtAddr
        FUNCTION MT_SysGetExtAddr,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 8, STACK
        PUBLIC MT_SysGetUtcTime
        FUNCTION MT_SysGetUtcTime,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 23, STACK
        PUBLIC MT_SysGpio
        FUNCTION MT_SysGpio,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC MT_SysOsalEventId
        PUBLIC MT_SysOsalNVDelete
        FUNCTION MT_SysOsalNVDelete,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_SysOsalNVItemInit
        FUNCTION MT_SysOsalNVItemInit,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC MT_SysOsalNVLength
        FUNCTION MT_SysOsalNVLength,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC MT_SysOsalNVRead
        FUNCTION MT_SysOsalNVRead,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC MT_SysOsalNVWrite
        FUNCTION MT_SysOsalNVWrite,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        PUBLIC MT_SysOsalStartTimer
        FUNCTION MT_SysOsalStartTimer,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC MT_SysOsalStopTimer
        FUNCTION MT_SysOsalStopTimer,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_SysOsalTimerExpired
        FUNCTION MT_SysOsalTimerExpired,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_SysPing
        FUNCTION MT_SysPing,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC MT_SysRandom
        FUNCTION MT_SysRandom,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC MT_SysReset
        FUNCTION MT_SysReset,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC MT_SysResetInd
        FUNCTION MT_SysResetInd,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC MT_SysSetExtAddr
        FUNCTION MT_SysSetExtAddr,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC MT_SysSetTxPower
        FUNCTION MT_SysSetTxPower,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC MT_SysSetUtcTime
        FUNCTION MT_SysSetUtcTime,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBLIC MT_SysStackTune
        FUNCTION MT_SysStackTune,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_SysVersion
        FUNCTION MT_SysVersion,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBWEAK SLEEPSTA
        PUBWEAK WDCTL
        PUBWEAK _A_IEN0
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalAdcRead          SYMBOL "HalAdcRead"
??HalAdcRead?relay  SYMBOL "?relay", HalAdcRead
MAC_MlmeSetReq      SYMBOL "MAC_MlmeSetReq"
??MAC_MlmeSetReq?relay SYMBOL "?relay", MAC_MlmeSetReq
MT_BuildAndSendZToolResponse SYMBOL "MT_BuildAndSendZToolResponse"
??MT_BuildAndSendZToolResponse?relay SYMBOL "?relay", MT_BuildAndSendZToolResponse
Onboard_rand        SYMBOL "Onboard_rand"
??Onboard_rand?relay SYMBOL "?relay", Onboard_rand
ZMacGetReq          SYMBOL "ZMacGetReq"
??ZMacGetReq?relay  SYMBOL "?relay", ZMacGetReq
ZMacSetReq          SYMBOL "ZMacSetReq"
??ZMacSetReq?relay  SYMBOL "?relay", ZMacSetReq
macRadioSetTxPower  SYMBOL "macRadioSetTxPower"
??macRadioSetTxPower?relay SYMBOL "?relay", macRadioSetTxPower
osal_ConvertUTCSecs SYMBOL "osal_ConvertUTCSecs"
??osal_ConvertUTCSecs?relay SYMBOL "?relay", osal_ConvertUTCSecs
osal_ConvertUTCTime SYMBOL "osal_ConvertUTCTime"
??osal_ConvertUTCTime?relay SYMBOL "?relay", osal_ConvertUTCTime
osal_buffer_uint32  SYMBOL "osal_buffer_uint32"
??osal_buffer_uint32?relay SYMBOL "?relay", osal_buffer_uint32
osal_build_uint16   SYMBOL "osal_build_uint16"
??osal_build_uint16?relay SYMBOL "?relay", osal_build_uint16
osal_build_uint32   SYMBOL "osal_build_uint32"
??osal_build_uint32?relay SYMBOL "?relay", osal_build_uint32
osal_getClock       SYMBOL "osal_getClock"
??osal_getClock?relay SYMBOL "?relay", osal_getClock
osal_mem_alloc      SYMBOL "osal_mem_alloc"
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
??osal_memset?relay SYMBOL "?relay", osal_memset
osal_nv_delete      SYMBOL "osal_nv_delete"
??osal_nv_delete?relay SYMBOL "?relay", osal_nv_delete
osal_nv_item_init   SYMBOL "osal_nv_item_init"
??osal_nv_item_init?relay SYMBOL "?relay", osal_nv_item_init
osal_nv_item_len    SYMBOL "osal_nv_item_len"
??osal_nv_item_len?relay SYMBOL "?relay", osal_nv_item_len
osal_nv_read        SYMBOL "osal_nv_read"
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
osal_setClock       SYMBOL "osal_setClock"
??osal_setClock?relay SYMBOL "?relay", osal_setClock
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
zgSetItem           SYMBOL "zgSetItem"
??zgSetItem?relay   SYMBOL "?relay", zgSetItem
MT_SysAdcRead       SYMBOL "MT_SysAdcRead"
??MT_SysAdcRead?relay SYMBOL "?relay", MT_SysAdcRead
MT_SysCommandProcessing SYMBOL "MT_SysCommandProcessing"
??MT_SysCommandProcessing?relay SYMBOL "?relay", MT_SysCommandProcessing
MT_SysGetExtAddr    SYMBOL "MT_SysGetExtAddr"
??MT_SysGetExtAddr?relay SYMBOL "?relay", MT_SysGetExtAddr
MT_SysGetUtcTime    SYMBOL "MT_SysGetUtcTime"
??MT_SysGetUtcTime?relay SYMBOL "?relay", MT_SysGetUtcTime
MT_SysGpio          SYMBOL "MT_SysGpio"
??MT_SysGpio?relay  SYMBOL "?relay", MT_SysGpio
MT_SysOsalNVDelete  SYMBOL "MT_SysOsalNVDelete"
??MT_SysOsalNVDelete?relay SYMBOL "?relay", MT_SysOsalNVDelete
MT_SysOsalNVItemInit SYMBOL "MT_SysOsalNVItemInit"
??MT_SysOsalNVItemInit?relay SYMBOL "?relay", MT_SysOsalNVItemInit
MT_SysOsalNVLength  SYMBOL "MT_SysOsalNVLength"
??MT_SysOsalNVLength?relay SYMBOL "?relay", MT_SysOsalNVLength
MT_SysOsalNVRead    SYMBOL "MT_SysOsalNVRead"
??MT_SysOsalNVRead?relay SYMBOL "?relay", MT_SysOsalNVRead
MT_SysOsalNVWrite   SYMBOL "MT_SysOsalNVWrite"
??MT_SysOsalNVWrite?relay SYMBOL "?relay", MT_SysOsalNVWrite
MT_SysOsalStartTimer SYMBOL "MT_SysOsalStartTimer"
??MT_SysOsalStartTimer?relay SYMBOL "?relay", MT_SysOsalStartTimer
MT_SysOsalStopTimer SYMBOL "MT_SysOsalStopTimer"
??MT_SysOsalStopTimer?relay SYMBOL "?relay", MT_SysOsalStopTimer
MT_SysOsalTimerExpired SYMBOL "MT_SysOsalTimerExpired"
??MT_SysOsalTimerExpired?relay SYMBOL "?relay", MT_SysOsalTimerExpired
MT_SysPing          SYMBOL "MT_SysPing"
??MT_SysPing?relay  SYMBOL "?relay", MT_SysPing
MT_SysRandom        SYMBOL "MT_SysRandom"
??MT_SysRandom?relay SYMBOL "?relay", MT_SysRandom
MT_SysReset         SYMBOL "MT_SysReset"
??MT_SysReset?relay SYMBOL "?relay", MT_SysReset
MT_SysResetInd      SYMBOL "MT_SysResetInd"
??MT_SysResetInd?relay SYMBOL "?relay", MT_SysResetInd
MT_SysSetExtAddr    SYMBOL "MT_SysSetExtAddr"
??MT_SysSetExtAddr?relay SYMBOL "?relay", MT_SysSetExtAddr
MT_SysSetTxPower    SYMBOL "MT_SysSetTxPower"
??MT_SysSetTxPower?relay SYMBOL "?relay", MT_SysSetTxPower
MT_SysSetUtcTime    SYMBOL "MT_SysSetUtcTime"
??MT_SysSetUtcTime?relay SYMBOL "?relay", MT_SysSetUtcTime
MT_SysStackTune     SYMBOL "MT_SysStackTune"
??MT_SysStackTune?relay SYMBOL "?relay", MT_SysStackTune
MT_SysVersion       SYMBOL "MT_SysVersion"
??MT_SysVersion?relay SYMBOL "?relay", MT_SysVersion

        EXTERN ??HalAdcRead?relay
        FUNCTION ??HalAdcRead?relay,00H
        EXTERN ??MAC_MlmeSetReq?relay
        FUNCTION ??MAC_MlmeSetReq?relay,00H
        EXTERN ??MT_BuildAndSendZToolResponse?relay
        FUNCTION ??MT_BuildAndSendZToolResponse?relay,00H
        EXTERN ??Onboard_rand?relay
        FUNCTION ??Onboard_rand?relay,00H
        EXTERN ??ZMacGetReq?relay
        FUNCTION ??ZMacGetReq?relay,00H
        EXTERN ??ZMacSetReq?relay
        FUNCTION ??ZMacSetReq?relay,00H
        EXTERN ??macRadioSetTxPower?relay
        FUNCTION ??macRadioSetTxPower?relay,00H
        EXTERN ??osal_ConvertUTCSecs?relay
        FUNCTION ??osal_ConvertUTCSecs?relay,00H
        EXTERN ??osal_ConvertUTCTime?relay
        FUNCTION ??osal_ConvertUTCTime?relay,00H
        EXTERN ??osal_buffer_uint32?relay
        FUNCTION ??osal_buffer_uint32?relay,00H
        EXTERN ??osal_build_uint16?relay
        FUNCTION ??osal_build_uint16?relay,00H
        EXTERN ??osal_build_uint32?relay
        FUNCTION ??osal_build_uint32?relay,00H
        EXTERN ??osal_getClock?relay
        FUNCTION ??osal_getClock?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_nv_delete?relay
        FUNCTION ??osal_nv_delete?relay,00H
        EXTERN ??osal_nv_item_init?relay
        FUNCTION ??osal_nv_item_init?relay,00H
        EXTERN ??osal_nv_item_len?relay
        FUNCTION ??osal_nv_item_len?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??osal_setClock?relay
        FUNCTION ??osal_setClock?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??zgSetItem?relay
        FUNCTION ??zgSetItem?relay,00H
        EXTERN HalAdcRead
        FUNCTION HalAdcRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeSetReq
        FUNCTION MAC_MlmeSetReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MTVersionString
        EXTERN MT_BuildAndSendZToolResponse
        FUNCTION MT_BuildAndSendZToolResponse,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_TaskID
        EXTERN Onboard_rand
        FUNCTION Onboard_rand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_soft_reset
        FUNCTION Onboard_soft_reset,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacGetReq
        FUNCTION ZMacGetReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN macRadioSetTxPower
        FUNCTION macRadioSetTxPower,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_ConvertUTCSecs
        FUNCTION osal_ConvertUTCSecs,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_ConvertUTCTime
        FUNCTION osal_ConvertUTCTime,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_buffer_uint32
        FUNCTION osal_buffer_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint16
        FUNCTION osal_build_uint16,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_build_uint32
        FUNCTION osal_build_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_getClock
        FUNCTION osal_getClock,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_delete
        FUNCTION osal_nv_delete,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_init
        FUNCTION osal_nv_item_init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_len
        FUNCTION osal_nv_item_len,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_setClock
        FUNCTION osal_setClock,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgSetItem
        FUNCTION zgSetItem,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\Texas Instruments\Z-Stack Lighting 1.0.2\Components\mt\MT_SYS.c
//    1 /******************************************************************************
//    2   Filename:       MT_SYS.c
//    3   Revised:        $Date: 2013-10-25 13:41:32 -0700 (Fri, 25 Oct 2013) $
//    4   Revision:       $Revision: 35804 $
//    5 
//    6   Description:   MonitorTest functions for SYS commands.
//    7 
//    8   Copyright 2007-2013 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights
//   11   granted under the terms of a software license agreement between the user
//   12   who downloaded the software, his/her employer (which must be your employer)
//   13   and Texas Instruments Incorporated (the "License"). You may not use this
//   14   Software unless you agree to abide by the terms of the License. The License
//   15   limits your use, and you acknowledge, that the Software may not be modified,
//   16   copied or distributed unless embedded on a Texas Instruments microcontroller
//   17   or used solely and exclusively in conjunction with a Texas Instruments radio
//   18   frequency transceiver, which is integrated into your product. Other than for
//   19   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20   works of, modify, distribute, perform, display or sell this Software and/or
//   21   its documentation for any purpose.
//   22 
//   23   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   30   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   31   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   32   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 
//   35   Should you have any questions regarding your right to use this Software,
//   36   contact Texas Instruments Incorporated at www.TI.com.
//   37 
//   38  *****************************************************************************/
//   39 
//   40 /***************************************************************************************************
//   41  * INCLUDES
//   42  ***************************************************************************************************/
//   43 #include "ZComDef.h"
//   44 #include "MT.h"
//   45 #include "MT_SYS.h"
//   46 #include "MT_VERSION.h"
//   47 #include "OSAL.h"
//   48 #include "OSAL_NV.h"
//   49 #include "Onboard.h"  /* This is here because RAM read/write macros need it */

        ASEGN SFR_AN:DATA:NOROOT,09dH
// unsigned char volatile __sfr SLEEPSTA
SLEEPSTA:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0c9H
// unsigned char volatile __sfr WDCTL
WDCTL:
        DATA8
        DS 1
//   50 #include "hal_adc.h"
//   51 #include "OSAL_Clock.h"
//   52 #include "mac_low_level.h"
//   53 #include "ZMAC.h"
//   54 #if !defined(CC253X_MACNP)
//   55   #include "ZGlobals.h"
//   56 #endif
//   57 
//   58 /***************************************************************************************************
//   59  * MACROS
//   60  ***************************************************************************************************/
//   61 
//   62 #define MT_SYS_DEVICE_INFO_RESPONSE_LEN 14
//   63 #define MT_NV_ITEM_MAX_LENGTH           250
//   64 
//   65 #if !defined HAL_GPIO || !HAL_GPIO
//   66 #define GPIO_DIR_IN(IDX)
//   67 #define GPIO_DIR_OUT(IDX)
//   68 #define GPIO_TRI(IDX)
//   69 #define GPIO_PULL_UP(IDX)
//   70 #define GPIO_PULL_DN(IDX)
//   71 #define GPIO_SET(IDX)
//   72 #define GPIO_CLR(IDX)
//   73 #define GPIO_TOG(IDX)
//   74 #define GPIO_GET(IDX) 0
//   75 #define GPIO_HiD_SET() (val = 0)
//   76 #define GPIO_HiD_CLR() (val = 0)
//   77 #endif
//   78 
//   79 /***************************************************************************************************
//   80  * CONSTANTS
//   81  ***************************************************************************************************/
//   82 
//   83 #if !defined MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA
//   84 #define MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA  FALSE
//   85 #endif
//   86 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   87 const uint16 MT_SysOsalEventId [] = {
MT_SysOsalEventId:
        DATA16
        DW 2048
        DW 1024
        DW 512
        DW 256
//   88                                       MT_SYS_OSAL_EVENT_0,
//   89                                       MT_SYS_OSAL_EVENT_1,
//   90                                       MT_SYS_OSAL_EVENT_2,
//   91                                       MT_SYS_OSAL_EVENT_3
//   92                                     };
//   93 
//   94 typedef enum {
//   95   GPIO_DIR,
//   96   GPIO_TRI,
//   97   GPIO_SET,
//   98   GPIO_CLR,
//   99   GPIO_TOG,
//  100   GPIO_GET,
//  101   GPIO_HiD = 0x12
//  102 } GPIO_Op_t;
//  103 
//  104 /***************************************************************************************************
//  105  * LOCAL FUNCTIONS
//  106  ***************************************************************************************************/
//  107 #if defined (MT_SYS_FUNC)
//  108 void MT_SysReset(uint8 *pBuf);
//  109 void MT_SysPing(void);
//  110 void MT_SysVersion(void);
//  111 void MT_SysSetExtAddr(uint8 *pBuf);
//  112 void MT_SysGetExtAddr(void);
//  113 void MT_SysOsalNVItemInit(uint8 *pBuf);
//  114 void MT_SysOsalNVDelete(uint8 *pBuf);
//  115 void MT_SysOsalNVLength(uint8 *pBuf);
//  116 void MT_SysOsalNVRead(uint8 *pBuf);
//  117 void MT_SysOsalNVWrite(uint8 *pBuf);
//  118 void MT_SysOsalStartTimer(uint8 *pBuf);
//  119 void MT_SysOsalStopTimer(uint8 *pBuf);
//  120 void MT_SysRandom(void);
//  121 void MT_SysAdcRead(uint8 *pBuf);
//  122 void MT_SysGpio(uint8 *pBuf);
//  123 void MT_SysStackTune(uint8 *pBuf);
//  124 void MT_SysGetDeviceInfo(uint8 *pBuf);
//  125 void MT_SysSetUtcTime(uint8 *pBuf);
//  126 void MT_SysGetUtcTime(void);
//  127 void MT_SysSetTxPower(uint8 *pBuf);
//  128 #endif /* MT_SYS_FUNC */
//  129 
//  130 #if defined (MT_SYS_FUNC)
//  131 /***************************************************************************************************
//  132  * @fn      MT_SysProcessing
//  133  *
//  134  * @brief   Process all the SYS commands that are issued by test tool
//  135  *
//  136  * @param   pBuf - pointer to the msg buffer
//  137  *
//  138  *          | LEN  | CMD0  | CMD1  |  DATA  |
//  139  *          |  1   |   1   |   1   |  0-255 |
//  140  *
//  141  * @return  status
//  142  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  143 uint8 MT_SysCommandProcessing(uint8 *pBuf)
MT_SysCommandProcessing:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function MT_SysCommandProcessing
        CODE
//  144 {
        FUNCALL MT_SysCommandProcessing, MT_SysReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysPing
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysVersion
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysSetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysGetExtAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalNVDelete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalNVItemInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalNVLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalNVRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalNVWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalStartTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysOsalStopTimer
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysRandom
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysGpio
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysStackTune
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysSetUtcTime
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysGetUtcTime
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysCommandProcessing, MT_SysSetTxPower
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  145   uint8 status = MT_RPC_SUCCESS;
        MOV     R6,#0x0
//  146 
//  147   switch (pBuf[MT_RPC_POS_CMD1])
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??MT_SysCommandProcessing_0
        DEC     A
        JZ      ??MT_SysCommandProcessing_1
        DEC     A
        JZ      ??MT_SysCommandProcessing_2
        DEC     A
        JZ      ??MT_SysCommandProcessing_3
        DEC     A
        JZ      ??MT_SysCommandProcessing_4
        ADD     A,#-0x3
        JZ      ??MT_SysCommandProcessing_5
        DEC     A
        JZ      ??MT_SysCommandProcessing_6
        DEC     A
        JZ      ??MT_SysCommandProcessing_7
        DEC     A
        JZ      ??MT_SysCommandProcessing_8
        DEC     A
        JZ      ??MT_SysCommandProcessing_9
        DEC     A
        JZ      ??MT_SysCommandProcessing_10
        DEC     A
        JZ      ??MT_SysCommandProcessing_11
        DEC     A
        JZ      ??MT_SysCommandProcessing_12
        DEC     A
        JZ      ??MT_SysCommandProcessing_13
        DEC     A
        JZ      ??MT_SysCommandProcessing_14
        DEC     A
        JZ      ??MT_SysCommandProcessing_15
        DEC     A
        JZ      ??MT_SysCommandProcessing_16
        DEC     A
        JZ      ??MT_SysCommandProcessing_17
        DEC     A
        JZ      ??MT_SysCommandProcessing_18
        SJMP    ??MT_SysCommandProcessing_19
//  148   {
//  149     case MT_SYS_RESET_REQ:
//  150       MT_SysReset(pBuf);
??MT_SysCommandProcessing_0:
        ; Setup parameters for call to function MT_SysReset
        LCALL   ??MT_SysReset?relay
//  151       break;
        SJMP    ??MT_SysCommandProcessing_20
//  152 
//  153     case MT_SYS_PING:
//  154       MT_SysPing();
??MT_SysCommandProcessing_1:
        ; Setup parameters for call to function MT_SysPing
        LCALL   ??MT_SysPing?relay
//  155       break;
        SJMP    ??MT_SysCommandProcessing_20
//  156 
//  157     case MT_SYS_VERSION:
//  158       MT_SysVersion();
??MT_SysCommandProcessing_2:
        ; Setup parameters for call to function MT_SysVersion
        LCALL   ??MT_SysVersion?relay
//  159       break;
        SJMP    ??MT_SysCommandProcessing_20
//  160 
//  161     case MT_SYS_SET_EXTADDR:
//  162       MT_SysSetExtAddr(pBuf);
??MT_SysCommandProcessing_3:
        ; Setup parameters for call to function MT_SysSetExtAddr
        LCALL   ??MT_SysSetExtAddr?relay
//  163       break;
        SJMP    ??MT_SysCommandProcessing_20
//  164 
//  165     case MT_SYS_GET_EXTADDR:
//  166       MT_SysGetExtAddr();
??MT_SysCommandProcessing_4:
        ; Setup parameters for call to function MT_SysGetExtAddr
        LCALL   ??MT_SysGetExtAddr?relay
//  167       break;
        SJMP    ??MT_SysCommandProcessing_20
//  168 
//  169 // CC253X MAC Network Processor does not have NV support
//  170 #if !defined(CC253X_MACNP)
//  171     case MT_SYS_OSAL_NV_DELETE:
//  172       MT_SysOsalNVDelete(pBuf);
??MT_SysCommandProcessing_16:
        ; Setup parameters for call to function MT_SysOsalNVDelete
        LCALL   ??MT_SysOsalNVDelete?relay
//  173       break;
        SJMP    ??MT_SysCommandProcessing_20
//  174 
//  175     case MT_SYS_OSAL_NV_ITEM_INIT:
//  176       MT_SysOsalNVItemInit(pBuf);
??MT_SysCommandProcessing_5:
        ; Setup parameters for call to function MT_SysOsalNVItemInit
        LCALL   ??MT_SysOsalNVItemInit?relay
//  177       break;
        SJMP    ??MT_SysCommandProcessing_20
//  178 
//  179     case MT_SYS_OSAL_NV_LENGTH:
//  180       MT_SysOsalNVLength(pBuf);
??MT_SysCommandProcessing_17:
        ; Setup parameters for call to function MT_SysOsalNVLength
        LCALL   ??MT_SysOsalNVLength?relay
//  181       break;
        SJMP    ??MT_SysCommandProcessing_20
//  182 
//  183     case MT_SYS_OSAL_NV_READ:
//  184       MT_SysOsalNVRead(pBuf);
??MT_SysCommandProcessing_6:
        ; Setup parameters for call to function MT_SysOsalNVRead
        LCALL   ??MT_SysOsalNVRead?relay
//  185       break;
        SJMP    ??MT_SysCommandProcessing_20
//  186 
//  187     case MT_SYS_OSAL_NV_WRITE:
//  188       MT_SysOsalNVWrite(pBuf);
??MT_SysCommandProcessing_7:
        ; Setup parameters for call to function MT_SysOsalNVWrite
        LCALL   ??MT_SysOsalNVWrite?relay
//  189       break;
        SJMP    ??MT_SysCommandProcessing_20
//  190 #endif
//  191 
//  192     case MT_SYS_OSAL_START_TIMER:
//  193       MT_SysOsalStartTimer(pBuf);
??MT_SysCommandProcessing_8:
        ; Setup parameters for call to function MT_SysOsalStartTimer
        LCALL   ??MT_SysOsalStartTimer?relay
//  194       break;
        SJMP    ??MT_SysCommandProcessing_20
//  195 
//  196     case MT_SYS_OSAL_STOP_TIMER:
//  197       MT_SysOsalStopTimer(pBuf);
??MT_SysCommandProcessing_9:
        ; Setup parameters for call to function MT_SysOsalStopTimer
        LCALL   ??MT_SysOsalStopTimer?relay
//  198       break;
        SJMP    ??MT_SysCommandProcessing_20
//  199 
//  200     case MT_SYS_RANDOM:
//  201       MT_SysRandom();
??MT_SysCommandProcessing_10:
        ; Setup parameters for call to function MT_SysRandom
        LCALL   ??MT_SysRandom?relay
//  202       break;
        SJMP    ??MT_SysCommandProcessing_20
//  203 
//  204     case MT_SYS_ADC_READ:
//  205       MT_SysAdcRead(pBuf);
??MT_SysCommandProcessing_11:
        ; Setup parameters for call to function MT_SysAdcRead
        LCALL   ??MT_SysAdcRead?relay
//  206       break;
        SJMP    ??MT_SysCommandProcessing_20
//  207 
//  208     case MT_SYS_GPIO:
//  209       MT_SysGpio(pBuf);
??MT_SysCommandProcessing_12:
        ; Setup parameters for call to function MT_SysGpio
        LCALL   ??MT_SysGpio?relay
//  210       break;
        SJMP    ??MT_SysCommandProcessing_20
//  211 
//  212     case MT_SYS_STACK_TUNE:
//  213       MT_SysStackTune(pBuf);
??MT_SysCommandProcessing_13:
        ; Setup parameters for call to function MT_SysStackTune
        LCALL   ??MT_SysStackTune?relay
//  214       break;
        SJMP    ??MT_SysCommandProcessing_20
//  215 
//  216     case MT_SYS_SET_TIME:
//  217       MT_SysSetUtcTime(pBuf);
??MT_SysCommandProcessing_14:
        ; Setup parameters for call to function MT_SysSetUtcTime
        LCALL   ??MT_SysSetUtcTime?relay
//  218       break;
        SJMP    ??MT_SysCommandProcessing_20
//  219 
//  220     case MT_SYS_GET_TIME:
//  221       MT_SysGetUtcTime();
??MT_SysCommandProcessing_15:
        ; Setup parameters for call to function MT_SysGetUtcTime
        LCALL   ??MT_SysGetUtcTime?relay
//  222       break;
        SJMP    ??MT_SysCommandProcessing_20
//  223 
//  224     case MT_SYS_SET_TX_POWER:
//  225       MT_SysSetTxPower(pBuf);
??MT_SysCommandProcessing_18:
        ; Setup parameters for call to function MT_SysSetTxPower
        LCALL   ??MT_SysSetTxPower?relay
//  226       break;
        SJMP    ??MT_SysCommandProcessing_20
//  227 
//  228     default:
//  229       status = MT_RPC_ERR_COMMAND_ID;
??MT_SysCommandProcessing_19:
        INC     R6
        INC     R6
//  230       break;
//  231   }
//  232 
//  233   return status;
??MT_SysCommandProcessing_20:
        MOV     A,R6
        MOV     R1,A
        LJMP    ??Subroutine22_0 & 0xFFFF
          CFI EndBlock cfiBlock0
//  234 }
//  235 
//  236 /**************************************************************************************************
//  237  * @fn      MT_SysReset
//  238  *
//  239  * @brief   Reset the device.
//  240  * @param   typID: 0=reset, 1=serial bootloader
//  241  *
//  242  * @return  None
//  243  *************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  244 void MT_SysReset(uint8 *pBuf)
MT_SysReset:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function MT_SysReset
        CODE
//  245 {
        FUNCALL MT_SysReset, Onboard_soft_reset
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  246   if (pBuf[MT_RPC_POS_DAT0] == 0)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??MT_SysReset_0
//  247   {
//  248     SystemReset();
        CLR     0xa8.7
        CLR     0xa8.7
        MOV     0xc9,#-0x55
        MOV     0xc9,#0x5b
??MT_SysReset_1:
        SJMP    ??MT_SysReset_1
//  249   }
//  250 #if !(defined(HAL_BOARD_F2618) || defined(HAL_BOARD_F5438) || defined(HAL_BOARD_LM3S))
//  251   else
//  252   {
//  253     SystemResetSoft();  // Especially useful for CC2531 to not break comm with USB Host.
??MT_SysReset_0:
        ; Setup parameters for call to function Onboard_soft_reset
        LCALL   Onboard_soft_reset & 0xFFFF
//  254   }
//  255 #endif
//  256 
//  257 }
        LJMP    ??Subroutine27_0 & 0xFFFF
          CFI EndBlock cfiBlock1
        REQUIRE _A_IEN0
        REQUIRE WDCTL
//  258 
//  259 /***************************************************************************************************
//  260  * @fn      MT_SysPing
//  261  *
//  262  * @brief   Process the Ping command
//  263  *
//  264  * @param   None
//  265  *
//  266  * @return  None
//  267  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  268 void MT_SysPing(void)
MT_SysPing:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function MT_SysPing
        CODE
//  269 {
        FUNCALL MT_SysPing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
//  270   uint16 tmp16;
//  271   uint8 retArray[2];
//  272 
//  273   /* Build Capabilities */
//  274   tmp16 = MT_CAP_SYS | MT_CAP_MAC | MT_CAP_NWK | MT_CAP_AF | MT_CAP_ZDO |
//  275           MT_CAP_SAPI | MT_CAP_UTIL | MT_CAP_DEBUG | MT_CAP_APP | MT_CAP_ZOAD;
//  276 
//  277   /* Convert to high byte first into temp buffer */
//  278   retArray[0] = LO_UINT16( tmp16 );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x51
        MOVX    @DPTR,A
//  279   retArray[1] = HI_UINT16( tmp16 );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        LCALL   ??Subroutine23_0 & 0xFFFF
//  280 
//  281   /* Build and send back the response */
//  282   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_PING,
//  283                                 sizeof (tmp16), retArray );
??CrossCallReturnLabel_25:
        MOV     R2,A
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock2
//  284 }
//  285 
//  286 /***************************************************************************************************
//  287  * @fn      MT_SysVersion
//  288  *
//  289  * @brief   Process the Version command
//  290  *
//  291  * @param   None
//  292  *
//  293  * @return  None
//  294  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  295 void MT_SysVersion(void)
MT_SysVersion:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function MT_SysVersion
        CODE
//  296 {
        FUNCALL MT_SysVersion, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  297   byte *verStr = (byte *)MTVersionString;
//  298   uint8 respLen = sizeof(MTVersionString);
//  299 
//  300   /* Build and send back the response */
//  301   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_VERSION,
//  302                                respLen, verStr);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,#MTVersionString & 0xff
        MOV     R5,#(MTVersionString >> 8) & 0xff
        MOV     R3,#0x5
        MOV     R2,#0x2
        MOV     R1,#0x61
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  303 }
        LJMP    ??Subroutine27_0 & 0xFFFF
          CFI EndBlock cfiBlock3
//  304 
//  305 /***************************************************************************************************
//  306  * @fn      MT_SysSetExtAddr
//  307  *
//  308  * @brief   Set the Extended Address
//  309  *
//  310  * @param   pBuf
//  311  *
//  312  * @return  None
//  313  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  314 void MT_SysSetExtAddr(uint8 *pBuf)
MT_SysSetExtAddr:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function MT_SysSetExtAddr
        CODE
//  315 {
        FUNCALL MT_SysSetExtAddr, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetExtAddr, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetExtAddr, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
//  316   uint8 retValue = ZFailure;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  317   uint8 cmdId;
//  318 
//  319   /* parse header */
//  320   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
//  321   pBuf += MT_RPC_FRAME_HDR_SZ;
        LCALL   ?Subroutine18 & 0xFFFF
//  322 
//  323   if ( ZMacSetReq(ZMacExtAddr, pBuf) == ZMacSuccess )
??CrossCallReturnLabel_21:
        ; Setup parameters for call to function ZMacSetReq
        INC     R2
        INC     R2
        INC     R2
        MOV     R3,A
        MOV     R1,#-0x1e
        LCALL   ??ZMacSetReq?relay
        MOV     A,R1
        JNZ     ??MT_SysSetExtAddr_0
//  324   {
//  325 // CC253X MAC Network Processor does not have NV support
//  326 #if !defined(CC253X_MACNP)
//  327     retValue = osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf);
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  328 #endif
//  329   }
//  330 
//  331   /* Build and send back the response */
//  332   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue);
??MT_SysSetExtAddr_0:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x61
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  333 
//  334 }
        MOV     A,#0x1
        LJMP    ??Subroutine25_0 & 0xFFFF
          CFI EndBlock cfiBlock4
//  335 
//  336 /***************************************************************************************************
//  337  * @fn      MT_SysGetExtAddr
//  338  *
//  339  * @brief   Get the Extended Address
//  340  *
//  341  * @param   None
//  342  *
//  343  * @return  None
//  344  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  345 void MT_SysGetExtAddr(void)
MT_SysGetExtAddr:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function MT_SysGetExtAddr
        CODE
//  346 {
        FUNCALL MT_SysGetExtAddr, ZMacGetReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetExtAddr, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 8, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 8, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 8)
//  347   uint8 extAddr[Z_EXTADDR_LEN];
//  348 
//  349   ZMacGetReq( ZMacExtAddr, extAddr );
        ; Setup parameters for call to function ZMacGetReq
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#-0x1e
        LCALL   ??ZMacGetReq?relay
//  350 
//  351   /* Build and send back the response */
//  352   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_GET_EXTADDR,
//  353                                Z_EXTADDR_LEN, extAddr);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x8
        MOV     R2,#0x4
        MOV     R1,#0x61
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  354 }
        MOV     A,#0x8
        LJMP    ??Subroutine26_0 & 0xFFFF
          CFI EndBlock cfiBlock5
//  355 
//  356 #if !defined(CC253X_MACNP)
//  357 /***************************************************************************************************
//  358  * @fn      MT_SysOsalNVRead
//  359  *
//  360  * @brief  Read a NV value
//  361  *
//  362  * @param  uint8 pBuf - pointer to the data
//  363  *
//  364  * @return  None
//  365  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  366 void MT_SysOsalNVRead(uint8 *pBuf)
MT_SysOsalNVRead:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function MT_SysOsalNVRead
        CODE
//  367 {
        FUNCALL MT_SysOsalNVRead, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVRead, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  368   uint16 nvId;
//  369   uint8 nvItemLen=0, nvItemOffset=0;
//  370   uint8 *pRetBuf=NULL;
//  371   uint8 respLen;
//  372 
//  373   /* Skip over RPC header */
//  374   pBuf += MT_RPC_FRAME_HDR_SZ;
        LCALL   ?Subroutine13 & 0xFFFF
//  375 
//  376   /* Get the ID */
//  377   nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
??CrossCallReturnLabel_11:
        LCALL   ?Subroutine8 & 0xFFFF
//  378   /* Get the offset */
//  379   nvItemOffset = pBuf[2];
??CrossCallReturnLabel_5:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
//  380 
//  381 #if !MT_SYS_OSAL_NV_READ_CERTIFICATE_DATA
//  382   if ((ZCD_NV_IMPLICIT_CERTIFICATE == nvId) ||
//  383       (ZCD_NV_CA_PUBLIC_KEY == nvId)        ||
//  384       (ZCD_NV_DEVICE_PRIVATE_KEY == nvId))
        MOV     A,#0x69
        XRL     A,?V0 + 0
        JNZ     ??MT_SysOsalNVRead_0
        MOV     A,R1
??MT_SysOsalNVRead_0:
        JZ      ??MT_SysOsalNVRead_1
        MOV     A,#0x6b
        XRL     A,?V0 + 0
        JNZ     ??MT_SysOsalNVRead_2
        MOV     A,R1
??MT_SysOsalNVRead_2:
        JZ      ??MT_SysOsalNVRead_1
        MOV     A,#0x6a
        XRL     A,?V0 + 0
        JNZ     ??MT_SysOsalNVRead_3
        MOV     A,R1
??MT_SysOsalNVRead_3:
        JNZ     ??MT_SysOsalNVRead_4
//  385   {
//  386     uint8 tmp[2] = { INVALIDPARAMETER, 0 };
??MT_SysOsalNVRead_1:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {2, 0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {2, 0}>` & 0xff
        SJMP    ??MT_SysOsalNVRead_5
//  387     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
//  388                                    MT_SYS_OSAL_NV_READ, 2, tmp);
//  389     return;
//  390   }
//  391 #endif
//  392 
//  393 #if !MT_SYS_KEY_MANAGEMENT
//  394   if ( (nvId == ZCD_NV_NWK_ACTIVE_KEY_INFO) ||
//  395        (nvId == ZCD_NV_NWK_ALTERN_KEY_INFO) ||
//  396       ((nvId >= ZCD_NV_TCLK_TABLE_START) && (nvId <= ZCD_NV_TCLK_TABLE_END)) ||
//  397       ((nvId >= ZCD_NV_APS_LINK_KEY_DATA_START) && (nvId <= ZCD_NV_APS_LINK_KEY_DATA_END)) ||
//  398        (nvId == ZCD_NV_PRECFGKEY) )
??MT_SysOsalNVRead_4:
        MOV     A,#0x3a
        XRL     A,?V0 + 0
        JNZ     ??MT_SysOsalNVRead_6
        MOV     A,R1
??MT_SysOsalNVRead_6:
        JZ      ??MT_SysOsalNVRead_7
        MOV     A,#0x3b
        XRL     A,?V0 + 0
        JNZ     ??MT_SysOsalNVRead_8
        MOV     A,R1
??MT_SysOsalNVRead_8:
        JZ      ??MT_SysOsalNVRead_7
        MOV     A,R4
        ADD     A,#-0x1
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#-0x2
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#-0x1
        MOV     A,R1
        SUBB    A,#0x0
        JC      ??MT_SysOsalNVRead_7
        DEC     R1
        CLR     C
        MOV     A,R0
        SUBB    A,#-0x1
        MOV     A,R1
        SUBB    A,#0x0
        JC      ??MT_SysOsalNVRead_7
        MOV     A,#0x62
        XRL     A,?V0 + 0
        JNZ     ??MT_SysOsalNVRead_9
        MOV     A,?V0 + 1
??MT_SysOsalNVRead_9:
        JNZ     ??MT_SysOsalNVRead_10
//  399   {
//  400     uint8 tmp1[2] = { INVALIDPARAMETER, 0 };
??MT_SysOsalNVRead_7:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {2, 0}>_1` >> 8) & 0xff
        MOV     DPL,#`?<Constant {2, 0}>_1` & 0xff
??MT_SysOsalNVRead_5:
        MOV     A,#0x2
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  401     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
//  402                                    MT_SYS_OSAL_NV_READ, 2, tmp1);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x2
        MOV     R2,#0x8
        MOV     R1,#0x61
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  403     return;
        LJMP    ??MT_SysOsalNVRead_11 & 0xFFFF
//  404   }
//  405 #endif //!MT_SYS_KEY_MANAGEMENT
//  406 
//  407   nvItemLen = osal_nv_item_len(nvId);
??MT_SysOsalNVRead_10:
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_nv_item_len?relay
        MOV     A,R2
        MOV     ?V0 + 5,A
//  408 
//  409   /* Return only 250 bytes max */
//  410   if (nvItemLen > MT_NV_ITEM_MAX_LENGTH)
        CLR     C
        SUBB    A,#-0x5
        JC      ??MT_SysOsalNVRead_12
//  411   {
//  412     nvItemLen = MT_NV_ITEM_MAX_LENGTH;
        MOV     ?V0 + 5,#-0x6
        SJMP    ??MT_SysOsalNVRead_13
//  413   }
//  414 
//  415   if ((nvItemLen > 0) && ((nvItemLen - nvItemOffset) > 0))
??MT_SysOsalNVRead_12:
        MOV     A,R2
        JZ      ??MT_SysOsalNVRead_14
??MT_SysOsalNVRead_13:
        MOV     ?V0 + 6,?V0 + 5
        MOV     ?V0 + 2,?V0 + 4
        MOV     A,?V0 + 6
        CLR     C
        SUBB    A,?V0 + 2
        MOV     R0,A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x1
        MOV     A,R1
        SUBB    A,#0x0
        MOV     C,0xD0 /* PSW */.2
        XRL     A,PSW
        RLC     A
        JC      ??MT_SysOsalNVRead_14
//  416   {
//  417     respLen = nvItemLen - nvItemOffset + 2;
        MOV     A,?V0 + 5
        CLR     C
        SUBB    A,?V0 + 4
        ADD     A,#0x2
        MOV     ?V0 + 6,A
        SJMP    ??MT_SysOsalNVRead_15
//  418   }
//  419   else
//  420   {
//  421     respLen = 2;
??MT_SysOsalNVRead_14:
        MOV     ?V0 + 6,#0x2
//  422   }
//  423 
//  424   pRetBuf = osal_mem_alloc(respLen);
??MT_SysOsalNVRead_15:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     ?V0 + 2,?V0 + 6
        MOV     R2,?V0 + 2
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
//  425 
//  426   if (pRetBuf != NULL)
        MOV     A,R6
        ORL     A,R7
        JZ      ??MT_SysOsalNVRead_11
//  427   {
//  428     osal_memset(pRetBuf, 0, respLen);
        ; Setup parameters for call to function osal_memset
        MOV     ?V0 + 2,?V0 + 6
        MOV     R4,?V0 + 2
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   ??osal_memset?relay
//  429 
//  430     /* Default to ZFailure */
//  431     pRetBuf[0] = ZFailure;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x1
        MOVX    @DPTR,A
//  432 
//  433     if (respLen > 2)
        INC     DPTR
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        MOV     A,?V0 + 6
        CLR     C
        SUBB    A,#0x3
        JC      ??MT_SysOsalNVRead_16
//  434     {
//  435       if (((osal_nv_read( nvId, (uint16)nvItemOffset, (uint16)nvItemLen, &pRetBuf[2])) == ZSUCCESS) && (respLen > 2))
        ; Setup parameters for call to function osal_nv_read
        MOV     A,R6
        ADD     A,#0x2
        MOV     ?V0 + 8,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 9,A
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 8,?V0 + 5
        MOV     ?V0 + 9,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 8,?V0 + 4
        MOV     R4,?V0 + 8
        MOV     R5,#0x0
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R1
        JNZ     ??MT_SysOsalNVRead_17
//  436       {
//  437         pRetBuf[0] = ZSuccess;
        MOV     DPL,R6
        MOV     DPH,R7
        CLR     A
        MOVX    @DPTR,A
//  438       }
//  439       pRetBuf[1] = nvItemLen - nvItemOffset;
??MT_SysOsalNVRead_17:
        MOV     A,?V0 + 5
        CLR     C
        SUBB    A,?V0 + 4
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        SJMP    ??MT_SysOsalNVRead_18
//  440     }
//  441     else
//  442     {
//  443       pRetBuf[1] = 0;
??MT_SysOsalNVRead_16:
        CLR     A
??MT_SysOsalNVRead_18:
        MOVX    @DPTR,A
//  444     }
//  445 
//  446     /* Build and send back the response */
//  447     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
//  448                                    MT_SYS_OSAL_NV_READ, respLen, pRetBuf );
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R3,?V0 + 6
        MOV     R2,#0x8
        MOV     R1,#0x61
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  449 
//  450     osal_mem_free(pRetBuf);
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
??MT_SysOsalNVRead_11:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock6
//  451   }
//  452 }
//  453 
//  454 /***************************************************************************************************
//  455  * @fn      MT_SysOsalNVWrite
//  456  *
//  457  * @brief
//  458  *
//  459  * @param   uint8 pData - pointer to the data
//  460  *
//  461  * @return  None
//  462  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  463 void MT_SysOsalNVWrite(uint8 *pBuf)
MT_SysOsalNVWrite:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function MT_SysOsalNVWrite
        CODE
//  464 {
        FUNCALL MT_SysOsalNVWrite, zgSetItem
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVWrite, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVWrite, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVWrite, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  465   uint16 nvId;
//  466   uint8 nvItemLen=0, nvItemOffset=0;
//  467   uint8 rtrn;
//  468 
//  469   /* Skip over RPC header */
//  470   pBuf += MT_RPC_FRAME_HDR_SZ;
        LCALL   ?Subroutine6 & 0xFFFF
//  471 
//  472   /* Get the ID */
//  473   nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
//  474   /* Get the offset */
//  475   nvItemOffset = pBuf[2];
??CrossCallReturnLabel_0:
        MOV     ?V0 + 4,A
//  476   /* Get the length */
//  477   nvItemLen = pBuf[3];
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
//  478   pBuf += 4;
        MOV     A,?V0 + 0
        ADD     A,#0x4
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
//  479 
//  480   /* Default to ZFailure */
//  481   rtrn = ZFailure;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  482 
//  483   /* Set the Z-Globals value of this NV item. */
//  484   zgSetItem( nvId, (uint16)nvItemLen, pBuf );
        MOV     DPL,R0
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,#0x0
        ; Setup parameters for call to function zgSetItem
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     A,R7
        MOV     R3,A
        LCALL   ??zgSetItem?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  485 
//  486   if ((osal_nv_write(nvId, (uint16)nvItemOffset, (uint16)nvItemLen, pBuf)) == ZSUCCESS)
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 2,?V0 + 4
        MOV     R4,?V0 + 2
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     A,R1
        JNZ     ??MT_SysOsalNVWrite_0
//  487   {
//  488     if (nvId == ZCD_NV_EXTADDR)
        MOV     A,#0x1
        XRL     A,R6
        JNZ     ??MT_SysOsalNVWrite_1
        MOV     A,R7
??MT_SysOsalNVWrite_1:
        JNZ     ??MT_SysOsalNVWrite_2
//  489     {
//  490       rtrn = ZMacSetReq(ZMacExtAddr, pBuf);
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R1,#-0x1e
        LCALL   ??ZMacSetReq?relay
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        SJMP    ??MT_SysOsalNVWrite_3
//  491     }
//  492     else
//  493     {
//  494       rtrn = ZSuccess;
??MT_SysOsalNVWrite_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
??MT_SysOsalNVWrite_3:
        MOVX    @DPTR,A
//  495     }
//  496   }
//  497 
//  498   /* Build and send back the response */
//  499   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
//  500                                  MT_SYS_OSAL_NV_WRITE, 1, &rtrn);
??MT_SysOsalNVWrite_0:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     R2,#0x9
        MOV     R1,#0x61
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  501 }
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock7
//  502 
//  503 /***************************************************************************************************
//  504  * @fn      MT_SysOsalNVItemInit
//  505  *
//  506  * @brief   Attempt to create an NV item
//  507  *
//  508  * @param   uint8 pData - pointer to the data
//  509  *
//  510  * @return  None
//  511  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  512 void MT_SysOsalNVItemInit(uint8 *pBuf)
MT_SysOsalNVItemInit:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function MT_SysOsalNVItemInit
        CODE
//  513 {
        FUNCALL MT_SysOsalNVItemInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVItemInit, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVItemInit, osal_nv_item_init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVItemInit, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
//  514   uint8 ret;
//  515   uint8 idLen;
//  516   uint16 nvId;
//  517   uint16 nvLen;
//  518 
//  519   /* Skip over RPC header */
//  520   pBuf += MT_RPC_FRAME_HDR_SZ;
        LCALL   ?Subroutine6 & 0xFFFF
//  521 
//  522   /* NV item ID */
//  523   nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
//  524   /* NV item length */
//  525   nvLen = BUILD_UINT16(pBuf[2], pBuf[3]);
??CrossCallReturnLabel_1:
        MOV     R2,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        CLR     A
        XCH     A,R0
        MOV     R1,A
        MOV     A,R2
        MOV     R4,A
        CLR     A
        ADDC    A,R1
        MOV     R5,A
//  526   /* Initialization data length */
//  527   idLen = pBuf[4];
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
//  528   pBuf += 5;
        MOV     A,?V0 + 0
        ADD     A,#0x5
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
//  529 
//  530   if ( idLen < nvLen )
        MOV     DPL,?V0 + 4
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,R0
        CLR     C
        MOV     A,?V0 + 2
        SUBB    A,R4
        CLR     A
        SUBB    A,R5
        JNC     ??MT_SysOsalNVItemInit_0
//  531   {
//  532     /* Attempt to create a new NV item */
//  533     ret = osal_nv_item_init( nvId, nvLen, NULL );
        ; Setup parameters for call to function osal_nv_item_init
        CLR     A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  534     if ( (ret == NV_ITEM_UNINIT) && (idLen > 0) )
        XRL     A,#0x9
        JNZ     ??MT_SysOsalNVItemInit_1
        MOV     A,?V0 + 4
        JZ      ??MT_SysOsalNVItemInit_1
//  535     {
//  536       /* Write initialization data to first part of new item */
//  537       (void) osal_nv_write( nvId, 0, (uint16)idLen, pBuf );
        ; Setup parameters for call to function osal_nv_write
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        SJMP    ??MT_SysOsalNVItemInit_1
//  538     }
//  539   }
//  540   else
//  541   {
//  542     /* Attempt to create/initialize a new NV item */
//  543     ret = osal_nv_item_init( nvId, nvLen, pBuf );
??MT_SysOsalNVItemInit_0:
        ; Setup parameters for call to function osal_nv_item_init
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_nv_item_init?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  544   }
//  545 
//  546   /* Build and send back the response */
//  547   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
//  548                                  MT_SYS_OSAL_NV_ITEM_INIT, 1, &ret);
??MT_SysOsalNVItemInit_1:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     R2,#0x7
        MOV     R1,#0x61
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  549 }
        MOV     A,#0x1
          CFI EndBlock cfiBlock8
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Valid
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock9

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond10 Using cfiCommon0
          CFI Function MT_SysOsalNVWrite
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond11 Using cfiCommon0
          CFI (cfiCond11) Function MT_SysOsalNVItemInit
          CFI (cfiCond11) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond11) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond11) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond11) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond11) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond11) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond11) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond11) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond11) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond11) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond11) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond11) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond11) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond11) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond11) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond11) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond11) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond11) CFA_SP SP+0
          CFI (cfiCond11) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker12 Using cfiCommon1
          CFI (cfiPicker12) NoFunction
          CFI (cfiPicker12) Picker
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x0
        MOV     R6,A
        CLR     A
        ADDC    A,R1
        MOV     R7,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond10
          CFI EndBlock cfiCond11
          CFI EndBlock cfiPicker12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function MT_SysSetExtAddr
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function MT_SysOsalNVWrite
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_0
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+0
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function MT_SysOsalNVItemInit
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_1
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+0
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        MOV     A,R2
        ADD     A,#0x3
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        RET
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16
//  550 
//  551 /***************************************************************************************************
//  552  * @fn      MT_SysOsalNVDelete
//  553  *
//  554  * @brief   Attempt to delete an NV item
//  555  *
//  556  * @param   uint8 pData - pointer to the data
//  557  *
//  558  * @return  None
//  559  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  560 void MT_SysOsalNVDelete(uint8 *pBuf)
MT_SysOsalNVDelete:
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function MT_SysOsalNVDelete
        CODE
//  561 {
        FUNCALL MT_SysOsalNVDelete, osal_nv_delete
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVDelete, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  562   uint16 nvId;
//  563   uint16 nvLen;
//  564   uint8 ret;
//  565 
//  566   /* Skip over RPC header */
//  567   pBuf += MT_RPC_FRAME_HDR_SZ;
        LCALL   ?Subroutine19 & 0xFFFF
//  568 
//  569   /* Get the ID */
//  570   nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
//  571   /* Get the length */
//  572   nvLen = BUILD_UINT16(pBuf[2], pBuf[3]);
//  573 
//  574   /* Attempt to delete the NV item */
//  575   ret = osal_nv_delete( nvId, nvLen );
??CrossCallReturnLabel_32:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        ADD     A,#0x0
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LCALL   ??osal_nv_delete?relay
        LCALL   ?Subroutine12 & 0xFFFF
//  576 
//  577   /* Build and send back the response */
//  578   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
//  579                                  MT_SYS_OSAL_NV_DELETE, 1, &ret);
??CrossCallReturnLabel_34:
        MOV     R2,#0x12
        SJMP    ??Subroutine20_0
          CFI EndBlock cfiBlock17
//  580 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock18 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
          CFI EndBlock cfiBlock18
        REQUIRE ??Subroutine20_0
        ; // Fall through to label ??Subroutine20_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine20_0:
          CFI Block cfiBlock19 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,#0x61
          CFI EndBlock cfiBlock19
        REQUIRE ??Subroutine21_0
        ; // Fall through to label ??Subroutine21_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine21_0:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        LCALL   ??MT_BuildAndSendZToolResponse?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock20
        REQUIRE ??Subroutine22_0
        ; // Fall through to label ??Subroutine22_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine22_0:
          CFI Block cfiBlock21 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock21
//  581 
//  582 /***************************************************************************************************
//  583  * @fn      MT_SysOsalNVLength
//  584  *
//  585  * @brief   Attempt to get the length to an NV item
//  586  *
//  587  * @param   uint8 pData - pointer to the data
//  588  *
//  589  * @return  None
//  590  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  591 void MT_SysOsalNVLength(uint8 *pBuf)
MT_SysOsalNVLength:
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function MT_SysOsalNVLength
        CODE
//  592 {
        FUNCALL MT_SysOsalNVLength, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalNVLength, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  593   uint16 nvId;
//  594   uint16 nvLen;
//  595   uint8 rsp[2];
//  596 
//  597   /* Skip over RPC header */
//  598   pBuf += MT_RPC_FRAME_HDR_SZ;
        LCALL   ?Subroutine13 & 0xFFFF
//  599 
//  600   /* Get the ID */
//  601   nvId = BUILD_UINT16(pBuf[0], pBuf[1]);
//  602 
//  603   /* Attempt to get NV item length */
//  604   nvLen = osal_nv_item_len( nvId );
??CrossCallReturnLabel_12:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        ADD     A,#0x0
        MOV     R2,A
        CLR     A
        ADDC    A,R1
        MOV     R3,A
        LCALL   ??osal_nv_item_len?relay
//  605   rsp[0] = LO_UINT16( nvLen );
        MOV     A,R2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  606   rsp[1] = HI_UINT16( nvLen );
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
//  607 
//  608   /* Build and send back the response */
//  609   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
//  610                                  MT_SYS_OSAL_NV_LENGTH, 2, rsp);
??CrossCallReturnLabel_23:
        MOV     R2,#0x13
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock22
//  611 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond23 Using cfiCommon0
          CFI Function MT_SysOsalNVRead
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function MT_SysOsalNVLength
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+0
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker25 Using cfiCommon1
          CFI (cfiPicker25) NoFunction
          CFI (cfiPicker25) Picker
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV     R4,A
        RET
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiPicker25

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond26 Using cfiCommon0
          CFI Function MT_SysOsalNVLength
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function MT_SysRandom
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+0
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker28 Using cfiCommon1
          CFI (cfiPicker28) NoFunction
          CFI (cfiPicker28) Picker
        MOV     A,R3
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiPicker28
        REQUIRE ??Subroutine23_0
        ; // Fall through to label ??Subroutine23_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine23_0:
          CFI Block cfiCond29 Using cfiCommon0
          CFI Function MT_SysPing
          CFI Conditional ??CrossCallReturnLabel_25
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 2)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function MT_SysAdcRead
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+0
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function MT_SysOsalNVLength
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+0
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function MT_SysRandom
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+0
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker33 Using cfiCommon1
          CFI (cfiPicker33) NoFunction
          CFI (cfiPicker33) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x2
        RET
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiPicker33
//  612 #endif // !defined(CC253X_MACNP)
//  613 
//  614 /***************************************************************************************************
//  615  * @fn      MT_SysOsalStartTimer
//  616  *
//  617  * @brief
//  618  *
//  619  * @param   uint8 pData - pointer to the data
//  620  *
//  621  * @return  None
//  622  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  623 void MT_SysOsalStartTimer(uint8 *pBuf)
MT_SysOsalStartTimer:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI Function MT_SysOsalStartTimer
        CODE
//  624 {
        FUNCALL MT_SysOsalStartTimer, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalStartTimer, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  625   uint16 eventId;
//  626   uint8 retValue = ZFailure;
        LCALL   ?Subroutine5 & 0xFFFF
//  627   uint8 cmdId;
//  628 
//  629   /* parse header */
//  630   cmdId = pBuf[MT_RPC_POS_CMD1];
//  631   pBuf += MT_RPC_FRAME_HDR_SZ;
//  632 
//  633   if (*pBuf <= 3)
??CrossCallReturnLabel_27:
        MOV     R7,A
        CLR     C
        SUBB    A,#0x4
        JNC     ??MT_SysOsalStartTimer_0
//  634   {
//  635     eventId = (uint16) MT_SysOsalEventId[*pBuf];
//  636     retValue = osal_start_timerEx(MT_TaskID, eventId, BUILD_UINT16(pBuf[1], pBuf[2]));
        ; Setup parameters for call to function osal_start_timerEx
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        LCALL   ?Subroutine8 & 0xFFFF
//  637   }
??CrossCallReturnLabel_6:
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     A,R7
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_9:
        LCALL   ??osal_start_timerEx?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        SJMP    ??MT_SysOsalStartTimer_1
//  638   else
//  639   {
//  640     retValue = ZInvalidParameter;
??MT_SysOsalStartTimer_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
//  641   }
??MT_SysOsalStartTimer_1:
        LCALL   ??Subroutine28_0 & 0xFFFF
//  642 
//  643   /* Build and send back the response */
//  644   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue);
??CrossCallReturnLabel_36:
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x61
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  645 }
        MOV     A,#0x1
          CFI EndBlock cfiBlock34
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Valid
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock35

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond36 Using cfiCommon0
          CFI Function MT_SysOsalNVRead
          CFI Conditional ??CrossCallReturnLabel_5
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function MT_SysOsalStartTimer
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+0
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiPicker38 Using cfiCommon1
          CFI (cfiPicker38) NoFunction
          CFI (cfiPicker38) Picker
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        ADD     A,#0x0
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 1,A
        RET
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond39 Using cfiCommon0
          CFI Function MT_SysOsalStartTimer
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function MT_SysOsalStopTimer
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+0
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker41 Using cfiCommon1
          CFI (cfiPicker41) NoFunction
          CFI (cfiPicker41) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiPicker41
        REQUIRE ??Subroutine24_0
        ; // Fall through to label ??Subroutine24_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine24_0:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function MT_SysAdcRead
          CFI Conditional ??CrossCallReturnLabel_29
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function MT_SysOsalStartTimer
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+0
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function MT_SysOsalStopTimer
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+0
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker45 Using cfiCommon1
          CFI (cfiPicker45) NoFunction
          CFI (cfiPicker45) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_31:
        RET
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiPicker45

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond46 Using cfiCommon0
          CFI Function MT_SysOsalNVRead
          CFI Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function MT_SysOsalNVLength
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_12
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+0
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function MT_SysOsalStartTimer
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_27
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+0
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function MT_SysOsalStopTimer
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_28
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+0
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function MT_SysAdcRead
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_29
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+0
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker51 Using cfiCommon1
          CFI (cfiPicker51) NoFunction
          CFI (cfiPicker51) Picker
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_33:
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiPicker51

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond52 Using cfiCommon0
          CFI Function MT_SysOsalNVDelete
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function MT_SysOsalNVRead
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_11
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+0
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function MT_SysOsalNVLength
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_30, ??CrossCallReturnLabel_12
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+0
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function MT_SysOsalStartTimer
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_27
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+0
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function MT_SysOsalStopTimer
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_28
          CFI (cfiCond56) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond56) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond56) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond56) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond56) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond56) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond56) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond56) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond56) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond56) CFA_SP SP+0
          CFI (cfiCond56) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function MT_SysAdcRead
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_33, ??CrossCallReturnLabel_31, ??CrossCallReturnLabel_29
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+0
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker58 Using cfiCommon1
          CFI (cfiPicker58) NoFunction
          CFI (cfiPicker58) Picker
        MOV     A,R2
        ADD     A,#0x3
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        ; Setup parameters for call to function osal_nv_delete
        ; Setup parameters for call to function osal_nv_item_len
        MOV     DPL,R2
        MOV     DPH,R3
        RET
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiPicker58
//  646 
//  647 /***************************************************************************************************
//  648  * @fn      MT_SysOsalStopTimer
//  649  *
//  650  * @brief
//  651  *
//  652  * @param   uint8 pData - pointer to the data
//  653  *
//  654  * @return  None
//  655  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  656 void MT_SysOsalStopTimer(uint8 *pBuf)
MT_SysOsalStopTimer:
          CFI Block cfiBlock59 Using cfiCommon0
          CFI Function MT_SysOsalStopTimer
        CODE
//  657 {
        FUNCALL MT_SysOsalStopTimer, osal_stop_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysOsalStopTimer, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  658   uint16 eventId;
//  659   uint8 retValue = ZFailure;
        LCALL   ?Subroutine5 & 0xFFFF
//  660   uint8 cmdId;
//  661 
//  662   /* parse header */
//  663   cmdId = pBuf[MT_RPC_POS_CMD1];
//  664   pBuf += MT_RPC_FRAME_HDR_SZ;
//  665 
//  666   if (*pBuf <= 3)
??CrossCallReturnLabel_28:
        MOV     R0,A
        CLR     C
        SUBB    A,#0x4
        JNC     ??MT_SysOsalStopTimer_0
//  667   {
//  668     eventId = (uint16) MT_SysOsalEventId[*pBuf];
//  669     retValue = osal_stop_timerEx(MT_TaskID, eventId);
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     A,R0
        LCALL   ?Subroutine10 & 0xFFFF
//  670   }
??CrossCallReturnLabel_10:
        LCALL   ??osal_stop_timerEx?relay
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        SJMP    ??MT_SysOsalStopTimer_1
//  671   else
//  672   {
//  673     retValue = ZInvalidParameter;
??MT_SysOsalStopTimer_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
??MT_SysOsalStopTimer_1:
        MOVX    @DPTR,A
//  674   }
//  675 
//  676   /* Build and send back the response */
//  677   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 1, &retValue );
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock59
//  678 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond60 Using cfiCommon0
          CFI Function MT_SysOsalStartTimer
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function MT_SysOsalStopTimer
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+0
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker62 Using cfiCommon1
          CFI (cfiPicker62) NoFunction
          CFI (cfiPicker62) Picker
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#MT_SysOsalEventId & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(MT_SysOsalEventId >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     DPTR,#MT_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiPicker62
//  679 
//  680 /***************************************************************************************************
//  681  * @fn      MT_SysRandom
//  682  *
//  683  * @brief
//  684  *
//  685  * @param   uint8 pData - pointer to the data
//  686  *
//  687  * @return  None
//  688  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  689 void MT_SysRandom()
MT_SysRandom:
          CFI Block cfiBlock63 Using cfiCommon0
          CFI Function MT_SysRandom
        CODE
//  690 {
        FUNCALL MT_SysRandom, Onboard_rand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysRandom, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  691   uint16 randValue = Onboard_rand();
        ; Setup parameters for call to function Onboard_rand
        LCALL   ??Onboard_rand?relay
//  692   uint8 retArray[2];
//  693 
//  694   retArray[0] = LO_UINT16(randValue);
        MOV     A,R2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  695   retArray[1] = HI_UINT16(randValue);
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine11 & 0xFFFF
//  696 
//  697   /* Build and send back the response */
//  698   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), MT_SYS_RANDOM, 2, retArray );
??CrossCallReturnLabel_24:
        MOV     R2,#0xc
        SJMP    ?Subroutine2
          CFI EndBlock cfiBlock63
//  699 }
//  700 
//  701 /***************************************************************************************************
//  702  * @fn      MT_SysAdcRead
//  703  *
//  704  * @brief   Reading ADC value, temperature sensor and voltage
//  705  *
//  706  * @param   uint8 pData - pointer to the data
//  707  *
//  708  * @return  None
//  709  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  710 void MT_SysAdcRead(uint8 *pBuf)
MT_SysAdcRead:
          CFI Block cfiBlock64 Using cfiCommon0
          CFI Function MT_SysAdcRead
        CODE
//  711 {
        FUNCALL MT_SysAdcRead, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysAdcRead, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysAdcRead, HalAdcRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysAdcRead, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  712 #ifndef HAL_BOARD_LM3S
//  713   uint8 channel, resolution;
//  714   uint16 tempValue;
//  715   uint8 retArray[2];
//  716   uint8 cmdId;
//  717 
//  718   /* parse header */
//  719   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ??Subroutine24_0 & 0xFFFF
//  720   pBuf += MT_RPC_FRAME_HDR_SZ;
//  721 
//  722   /* Channel */
//  723   channel = *pBuf++;
??CrossCallReturnLabel_29:
        MOV     R1,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
//  724 
//  725   /* Resolution */
//  726   resolution = *pBuf++;
//  727 
//  728   /* Voltage reading */
//  729   switch (channel)
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for MT_SysAdcRead>_0`:
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        1
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        0
        DATA
        DATA8
        DATA
        DATA8
        DB        7
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysAdcRead_0
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        2
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        14
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysAdcRead_1
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        15
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysAdcRead_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??MT_SysAdcRead_3
        CODE
//  730   {
//  731     /* Analog input channel */
//  732     case HAL_ADC_CHANNEL_0:
//  733     case HAL_ADC_CHANNEL_1:
//  734     case HAL_ADC_CHANNEL_2:
//  735     case HAL_ADC_CHANNEL_3:
//  736     case HAL_ADC_CHANNEL_4:
//  737     case HAL_ADC_CHANNEL_5:
//  738     case HAL_ADC_CHANNEL_6:
//  739     case HAL_ADC_CHANNEL_7:
//  740       tempValue = HalAdcRead(channel, resolution);
??MT_SysAdcRead_0:
        ; Setup parameters for call to function HalAdcRead
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R2,A
        SJMP    ??MT_SysAdcRead_4
//  741       break;
//  742 
//  743     /* Temperature sensor */
//  744     case(HAL_ADC_CHANNEL_TEMP):
//  745       tempValue = HalAdcRead(HAL_ADC_CHANNEL_TEMP, HAL_ADC_RESOLUTION_14);
??MT_SysAdcRead_1:
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0xe
        SJMP    ??MT_SysAdcRead_4
//  746       break;
//  747 
//  748     /* Voltage reading */
//  749     case(HAL_ADC_CHANNEL_VDD):
//  750       tempValue = HalAdcRead(HAL_ADC_CHANNEL_VDD, HAL_ADC_RESOLUTION_14);
??MT_SysAdcRead_2:
        ; Setup parameters for call to function HalAdcRead
        MOV     R2,#0x4
        MOV     R1,#0xf
??MT_SysAdcRead_4:
        LCALL   ??HalAdcRead?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
//  751       break;
        SJMP    ??MT_SysAdcRead_5
//  752 
//  753     /* Undefined channels */
//  754     default:
//  755       tempValue = 0x00;
??MT_SysAdcRead_3:
        MOV     R0,#0x0
        MOV     R1,#0x0
//  756       break;
//  757   }
//  758 
//  759   retArray[0] = LO_UINT16(tempValue);
??MT_SysAdcRead_5:
        MOV     A,R0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  760   retArray[1] = HI_UINT16(tempValue);
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        LCALL   ??Subroutine23_0 & 0xFFFF
//  761 
//  762   /* Build and send back the response */
//  763   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmdId, 2, retArray);
??CrossCallReturnLabel_26:
        MOV     A,R6
        MOV     R2,A
          CFI EndBlock cfiBlock64
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  764 #endif /* #ifndef HAL_BOARD_LM3S */
//  765 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock65 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,#0x61
        LCALL   ??MT_BuildAndSendZToolResponse?relay
        MOV     A,#0x2
          CFI EndBlock cfiBlock65
        REQUIRE ??Subroutine25_0
        ; // Fall through to label ??Subroutine25_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine25_0:
          CFI Block cfiBlock66 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Valid
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock66
//  766 
//  767 /**************************************************************************************************
//  768  * @fn      MT_SysGpio
//  769  *
//  770  * @brief   ZAccel RPC interface for controlling the available GPIO pins.
//  771  *
//  772  * @param   uint8 pData - Pointer to the data.
//  773  *
//  774  * @return  None
//  775  *************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  776 void MT_SysGpio(uint8 *pBuf)
MT_SysGpio:
          CFI Block cfiBlock67 Using cfiCommon0
          CFI Function MT_SysGpio
        CODE
//  777 {
        FUNCALL MT_SysGpio, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
//  778   uint8 cmd, val;
//  779   GPIO_Op_t op;
//  780 
//  781   cmd = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
//  782   pBuf += MT_RPC_FRAME_HDR_SZ;
//  783 
//  784   op = (GPIO_Op_t)(*pBuf++);
//  785   val = *pBuf;
//  786 
//  787   switch (op)
//  788   {
//  789     case GPIO_DIR:
//  790       if (val & BV(0)) {GPIO_DIR_OUT(0);} else {GPIO_DIR_IN(0);}
//  791       if (val & BV(1)) {GPIO_DIR_OUT(1);} else {GPIO_DIR_IN(1);}
//  792       if (val & BV(2)) {GPIO_DIR_OUT(2);} else {GPIO_DIR_IN(2);}
//  793       if (val & BV(3)) {GPIO_DIR_OUT(3);} else {GPIO_DIR_IN(3);}
//  794       break;
//  795 
//  796     case GPIO_TRI:
//  797       if(val & BV(0)) {GPIO_TRI(0);} else if(val & BV(4)) {GPIO_PULL_DN(0);} else {GPIO_PULL_UP(0);}
//  798       if(val & BV(1)) {GPIO_TRI(1);} else if(val & BV(5)) {GPIO_PULL_DN(1);} else {GPIO_PULL_UP(1);}
//  799       if(val & BV(2)) {GPIO_TRI(2);} else if(val & BV(6)) {GPIO_PULL_DN(2);} else {GPIO_PULL_UP(2);}
//  800       if(val & BV(3)) {GPIO_TRI(3);} else if(val & BV(7)) {GPIO_PULL_DN(3);} else {GPIO_PULL_UP(3);}
//  801       break;
//  802 
//  803     case GPIO_SET:
//  804       if (val & BV(0)) {GPIO_SET(0);}
//  805       if (val & BV(1)) {GPIO_SET(1);}
//  806       if (val & BV(2)) {GPIO_SET(2);}
//  807       if (val & BV(3)) {GPIO_SET(3);}
//  808       break;
//  809 
//  810     case GPIO_CLR:
//  811       if (val & BV(0)) {GPIO_CLR(0);}
//  812       if (val & BV(1)) {GPIO_CLR(1);}
//  813       if (val & BV(2)) {GPIO_CLR(2);}
//  814       if (val & BV(3)) {GPIO_CLR(3);}
//  815       break;
//  816 
//  817     case GPIO_TOG:
//  818       if (val & BV(0)) {GPIO_TOG(0);}
//  819       if (val & BV(1)) {GPIO_TOG(1);}
//  820       if (val & BV(2)) {GPIO_TOG(2);}
//  821       if (val & BV(3)) {GPIO_TOG(3);}
//  822       break;
//  823 
//  824     case GPIO_GET:
//  825       break;
//  826 
//  827     case GPIO_HiD:
//  828       (val) ? GPIO_HiD_SET() :  GPIO_HiD_CLR();
//  829       break;
//  830 
//  831     default:
//  832       break;
//  833   }
//  834 
//  835   val  = (GPIO_GET(0)) ? BV(0) : 0;
//  836   val |= (GPIO_GET(1)) ? BV(1) : 0;
//  837   val |= (GPIO_GET(2)) ? BV(2) : 0;
//  838   val |= (GPIO_GET(3)) ? BV(3) : 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        LCALL   ??Subroutine28_0 & 0xFFFF
//  839 
//  840   /* Build and send back the response */
//  841   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &val);
??CrossCallReturnLabel_37:
        MOV     R1,#0x61
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  842 }
        MOV     A,#0x1
        SJMP    ??Subroutine26_0
          CFI EndBlock cfiBlock67

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock68 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 2)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV     R1,#0x61
        LCALL   ??MT_BuildAndSendZToolResponse?relay
        MOV     A,#0x2
          CFI EndBlock cfiBlock68
        REQUIRE ??Subroutine26_0
        ; // Fall through to label ??Subroutine26_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine26_0:
          CFI Block cfiBlock69 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 8)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock69
        REQUIRE ??Subroutine27_0
        ; // Fall through to label ??Subroutine27_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine27_0:
          CFI Block cfiBlock70 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock70
//  843 
//  844 /**************************************************************************************************
//  845  * @fn      MT_SysStackTune
//  846  *
//  847  * @brief   ZAccel RPC interface for tuning the stack parameters to adjust performance
//  848  *
//  849  * @param   uint8 pData - Pointer to the data.
//  850  *
//  851  * @return  None
//  852  *************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  853 void MT_SysStackTune(uint8 *pBuf)
MT_SysStackTune:
          CFI Block cfiBlock71 Using cfiCommon0
          CFI Function MT_SysStackTune
        CODE
//  854 {
        FUNCALL MT_SysStackTune, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysStackTune, ZMacGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysStackTune, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysStackTune, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  855   uint8 cmd, rtrn;
//  856 
//  857   cmd = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
//  858   pBuf += MT_RPC_FRAME_HDR_SZ;
//  859 
//  860   switch (*pBuf++)
        MOV     A,R2
        ADD     A,#0x3
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        JZ      ??MT_SysStackTune_0
        DEC     A
        JZ      ??MT_SysStackTune_1
        SJMP    ??MT_SysStackTune_2
//  861   {
//  862   case STK_TX_PWR:
//  863     rtrn = ZMacSetReq(ZMacPhyTransmitPowerSigned, pBuf);
??MT_SysStackTune_0:
        ; Setup parameters for call to function ZMacSetReq
        MOV     R1,#-0x20
        SJMP    ??MT_SysStackTune_3
//  864     break;
//  865 
//  866   case STK_RX_ON_IDLE:
//  867     if ((*pBuf != TRUE) && (*pBuf != FALSE))
??MT_SysStackTune_1:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        XRL     A,R0
        JZ      ??MT_SysStackTune_4
        MOV     A,R0
        JZ      ??MT_SysStackTune_4
//  868     {
//  869       (void)ZMacGetReq(ZMacRxOnIdle, &rtrn);
        ; Setup parameters for call to function ZMacGetReq
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x52
        LCALL   ??ZMacGetReq?relay
        SJMP    ??MT_SysStackTune_5
//  870     }
//  871     else
//  872     {
//  873       rtrn = ZMacSetReq(ZMacRxOnIdle, pBuf);
??MT_SysStackTune_4:
        ; Setup parameters for call to function ZMacSetReq
        MOV     R1,#0x52
??MT_SysStackTune_3:
        LCALL   ??ZMacSetReq?relay
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        SJMP    ??MT_SysStackTune_6
//  874     }
//  875     break;
//  876 
//  877   default:
//  878     rtrn = ZInvalidParameter;
??MT_SysStackTune_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
??MT_SysStackTune_6:
        MOVX    @DPTR,A
//  879     break;
//  880   }
//  881 
//  882   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS), cmd, 1, &rtrn);
??MT_SysStackTune_5:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock71
//  883 }
//  884 
//  885 /***************************************************************************************************
//  886  * @fn      MT_SysSetUtcTime
//  887  *
//  888  * @brief   Set the OSAL UTC Time. UTC rollover is: 06:28:16 02/07/2136
//  889  *
//  890  * @param   pBuf - pointer to time parameters
//  891  *
//  892  * @return  None
//  893  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  894 void MT_SysSetUtcTime(uint8 *pBuf)
MT_SysSetUtcTime:
          CFI Block cfiBlock72 Using cfiCommon0
          CFI Function MT_SysSetUtcTime
        CODE
//  895 {
        FUNCALL MT_SysSetUtcTime, osal_build_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetUtcTime, osal_build_uint16
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetUtcTime, osal_ConvertUTCSecs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetUtcTime, osal_setClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetUtcTime, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  896   uint8 cmdId;
//  897   uint8 retStat;
//  898   UTCTime utcSecs;
//  899 
//  900   /* Parse header */
//  901   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
//  902   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R6
        ADD     A,#0x3
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  903 
//  904   utcSecs = osal_build_uint32( pBuf, 4 );
        ; Setup parameters for call to function osal_build_uint32
        MOV     R1,#0x4
        INC     R2
        INC     R2
        INC     R2
        MOV     R3,A
        LCALL   ??osal_build_uint32?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
//  905   if ( utcSecs == 0 )
        MOV     A,R2
        ORL     A,?V0 + 5
        ORL     A,?V0 + 6
        ORL     A,?V0 + 7
        JZ      $+5
        LJMP    ??MT_SysSetUtcTime_0 & 0xFFFF
//  906   {
//  907     UTCTimeStruct utc;
//  908 
//  909     /* Skip past UTC time */
//  910     pBuf += 4;
        MOV     A,R6
        ADD     A,#0x4
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
//  911 
//  912     /* Get time and date parameters */
//  913     utc.hour = *pBuf++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_15:
        MOV     R6,DPL
        MOV     R7,DPH
//  914     utc.minutes = *pBuf++;
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_16:
        INC     R6
        MOV     R7,DPH
//  915     utc.seconds = *pBuf++;
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine14 & 0xFFFF
//  916     utc.month = (*pBuf++) - 1;
??CrossCallReturnLabel_13:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine14 & 0xFFFF
//  917     utc.day = (*pBuf++) - 1;
??CrossCallReturnLabel_14:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine15 & 0xFFFF
//  918     utc.year = osal_build_uint16 ( pBuf );
??CrossCallReturnLabel_17:
        ; Setup parameters for call to function osal_build_uint16
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_build_uint16?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  919 
//  920     if ((utc.hour < 24) && (utc.minutes < 60) && (utc.seconds < 60) &&
//  921         (utc.month < 12) && (utc.day < 31) && (utc.year > 1999) && (utc.year < 2136))
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x18
        JC      $+5
        LJMP    ??MT_SysSetUtcTime_1 & 0xFFFF
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x3c
        JC      $+5
        LJMP    ??MT_SysSetUtcTime_1 & 0xFFFF
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x3c
        JNC     ??MT_SysSetUtcTime_1
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        CLR     C
        SUBB    A,#0xc
        JNC     ??MT_SysSetUtcTime_1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        CLR     C
        SUBB    A,#0x1f
        JNC     ??MT_SysSetUtcTime_1
        MOV     A,R4
        ADD     A,#0x30
        MOV     R0,A
        MOV     A,R5
        ADDC    A,#-0x8
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#-0x78
        MOV     A,R1
        SUBB    A,#0x0
        JNC     ??MT_SysSetUtcTime_1
//  922     {
//  923       /* Got past the course filter, now check for leap year */
//  924       if ((utc.month != 1) || (utc.day < (IsLeapYear( utc.year ) ? 29 : 28)))
        MOV     A,#0x1
        XRL     A,R2
        JNZ     ??MT_SysSetUtcTime_2
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#-0x70
        MOV     R3,#0x1
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 3,R3
        MOV     A,R2
        ORL     A,?V0 + 3
        JZ      ??MT_SysSetUtcTime_3
        MOV     A,R4
        MOV     R0,A
        MOV     A,R5
        MOV     R1,A
        MOV     R2,#0x64
        MOV     R3,#0x0
        LCALL   ?US_DIV_MOD
        MOV     ?V0 + 3,R3
        MOV     A,R2
        ORL     A,?V0 + 3
        JZ      ??MT_SysSetUtcTime_4
        MOV     A,R4
        ANL     A,#0x3
        JNZ     ??MT_SysSetUtcTime_4
??MT_SysSetUtcTime_3:
        MOV     R0,#0x1d
        SJMP    ??MT_SysSetUtcTime_5
??MT_SysSetUtcTime_4:
        MOV     R0,#0x1c
??MT_SysSetUtcTime_5:
        MOV     A,R6
        SUBB    A,R0
        JNC     ??MT_SysSetUtcTime_1
//  925       {
//  926         /* Numbers look reasonable, convert to UTC */
//  927         utcSecs = osal_ConvertUTCSecs( &utc );
??MT_SysSetUtcTime_2:
        ; Setup parameters for call to function osal_ConvertUTCSecs
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_ConvertUTCSecs?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
//  928       }
//  929     }
//  930   }
//  931 
//  932   if ( utcSecs == 0 )
??MT_SysSetUtcTime_0:
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        ORL     A,?V0 + 6
        ORL     A,?V0 + 7
        JNZ     ??MT_SysSetUtcTime_6
//  933   {
//  934     /* Bad parameter(s) */
//  935     retStat = ZInvalidParameter;
??MT_SysSetUtcTime_1:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x2
        SJMP    ??MT_SysSetUtcTime_7
//  936   }
//  937   else
//  938   {
//  939     /* Parameters accepted, set the time */
//  940     osal_setClock( utcSecs );
??MT_SysSetUtcTime_6:
        ; Setup parameters for call to function osal_setClock
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        LCALL   ??osal_setClock?relay
//  941     retStat = ZSuccess;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
//  942   }
??MT_SysSetUtcTime_7:
        LCALL   ??Subroutine28_0 & 0xFFFF
//  943 
//  944   /* Build and send back the response */
//  945   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
//  946                                  cmdId, 1, &retStat);
??CrossCallReturnLabel_38:
        MOV     R2,?V0 + 0
        MOV     R1,#0x61
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  947 }
        MOV     A,#0x8
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock72

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond73 Using cfiCommon0
          CFI Function MT_SysSetUtcTime
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function MT_SysSetUtcTime
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond74) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond74) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond74) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond74) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond74) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond74) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond74) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond74) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond74) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond74) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond74) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond74) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond74) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond74) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond74) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond74) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond74) CFA_SP SP+0
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond75 Using cfiCommon0
          CFI (cfiCond75) Function MT_SysSetUtcTime
          CFI (cfiCond75) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond75) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond75) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond75) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond75) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond75) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond75) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond75) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond75) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond75) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond75) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond75) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond75) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond75) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond75) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond75) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond75) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond75) CFA_SP SP+0
          CFI (cfiCond75) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker76 Using cfiCommon1
          CFI (cfiPicker76) NoFunction
          CFI (cfiPicker76) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        RET
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiCond75
          CFI EndBlock cfiPicker76

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond77 Using cfiCommon0
          CFI Function MT_SysSetUtcTime
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function MT_SysSetUtcTime
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond78) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond78) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond78) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond78) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond78) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond78) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond78) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond78) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond78) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond78) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond78) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond78) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond78) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond78) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond78) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond78) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond78) CFA_SP SP+0
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker79 Using cfiCommon1
          CFI (cfiPicker79) NoFunction
          CFI (cfiPicker79) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     R6
        MOV     R7,DPH
        MOVX    A,@DPTR
        DEC     A
        RET
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiPicker79

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond80 Using cfiCommon0
          CFI Function MT_SysOsalNVDelete
          CFI Conditional ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function MT_SysOsalTimerExpired
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+0
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker82 Using cfiCommon1
          CFI (cfiPicker82) NoFunction
          CFI (cfiPicker82) Picker
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiPicker82
        REQUIRE ??Subroutine28_0
        ; // Fall through to label ??Subroutine28_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine28_0:
          CFI Block cfiCond83 Using cfiCommon0
          CFI Function MT_SysOsalStartTimer
          CFI Conditional ??CrossCallReturnLabel_36
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function MT_SysGpio
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond84) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond84) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond84) CFA_SP SP+-5
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function MT_SysSetUtcTime
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+0
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function MT_SysOsalNVDelete
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+0
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function MT_SysOsalTimerExpired
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+0
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker88 Using cfiCommon1
          CFI (cfiPicker88) NoFunction
          CFI (cfiPicker88) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        RET
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiPicker88
//  948 
//  949 /***************************************************************************************************
//  950  * @fn      MT_SysGetUtcTime
//  951  *
//  952  * @brief   Get the OSAL UTC time
//  953  *
//  954  * @param   None
//  955  *
//  956  * @return  32-bit and Parsed UTC time
//  957  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  958 void MT_SysGetUtcTime(void)
MT_SysGetUtcTime:
          CFI Block cfiBlock89 Using cfiCommon0
          CFI Function MT_SysGetUtcTime
        CODE
//  959 {
        FUNCALL MT_SysGetUtcTime, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetUtcTime, osal_getClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetUtcTime, osal_ConvertUTCTime
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetUtcTime, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetUtcTime, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysGetUtcTime, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 7
        MOV     A,#-0x7
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  960   uint8 len;
//  961   uint8 *buf;
//  962 
//  963   len = sizeof( UTCTime ) + sizeof( UTCTimeStruct );
//  964 
//  965   buf = osal_mem_alloc( len );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xb
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  966   if ( buf )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??MT_SysGetUtcTime_0 & 0xFFFF
//  967   {
//  968     uint8 *pBuf;
//  969     UTCTime utcSecs;
//  970     UTCTimeStruct utcTime;
//  971 
//  972     // Get current 32-bit UTC time and parse it
//  973     utcSecs = osal_getClock();
        ; Setup parameters for call to function osal_getClock
        LCALL   ??osal_getClock?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
//  974     osal_ConvertUTCTime( &utcTime, utcSecs );
        ; Setup parameters for call to function osal_ConvertUTCTime
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_ConvertUTCTime?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
//  975 
//  976     // Start with 32-bit UTC time
//  977     pBuf = osal_buffer_uint32( buf, utcSecs );
        ; Setup parameters for call to function osal_buffer_uint32
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_buffer_uint32?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
//  978 
//  979     // Concatenate parsed UTC time fields
//  980     *pBuf++ = utcTime.hour;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV     R0,DPL
        MOV     R1,DPH
//  981     *pBuf++ = utcTime.minutes;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  982     *pBuf++ = utcTime.seconds;
??CrossCallReturnLabel_2:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine7 & 0xFFFF
//  983     *pBuf++ = utcTime.month + 1;  // Convert to human numbers
??CrossCallReturnLabel_3:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
//  984     *pBuf++ = utcTime.day + 1;
??CrossCallReturnLabel_7:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine9 & 0xFFFF
//  985     *pBuf++ = LO_UINT16( utcTime.year );
??CrossCallReturnLabel_8:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine7 & 0xFFFF
//  986     *pBuf++ = HI_UINT16( utcTime.year );
??CrossCallReturnLabel_4:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        INC     DPTR
        LCALL   ?Subroutine17 & 0xFFFF
//  987 
//  988     /* Build and send back the response */
//  989     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
//  990                                    MT_SYS_GET_TIME, (uint8)(pBuf-buf), buf);
??CrossCallReturnLabel_19:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,R6
        MOV     R2,A
        MOV     A,DPL
        CLR     C
        SUBB    A,R2
        MOV     R3,A
        MOV     R2,#0x11
        MOV     R1,#0x61
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  991 
//  992     osal_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
//  993   }
//  994 }
??MT_SysGetUtcTime_0:
        MOV     A,#0x7
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock89

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond90 Using cfiCommon0
          CFI Function MT_SysGetUtcTime
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function MT_SysGetUtcTime
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+0
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker92 Using cfiCommon1
          CFI (cfiPicker92) NoFunction
          CFI (cfiPicker92) Picker
        MOVX    A,@DPTR
        INC     A
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        INC     DPTR
        INC     R0
        MOV     R1,DPH
        RET
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiPicker92

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond93 Using cfiCommon0
          CFI Function MT_SysGetUtcTime
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function MT_SysGetUtcTime
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+0
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function MT_SysGetUtcTime
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond95) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+0
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker96 Using cfiCommon1
          CFI (cfiPicker96) NoFunction
          CFI (cfiPicker96) Picker
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_20:
        INC     R0
        MOV     R1,DPH
        RET
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiPicker96

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond97 Using cfiCommon0
          CFI Function MT_SysGetUtcTime
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function MT_SysGetUtcTime
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+0
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function MT_SysGetUtcTime
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_2
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+0
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function MT_SysGetUtcTime
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_3
          CFI (cfiCond100) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond100) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond100) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond100) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond100) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond100) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond100) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond100) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond100) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond100) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond100) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond100) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond100) CFA_SP SP+0
          CFI (cfiCond100) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function MT_SysGetUtcTime
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_20, ??CrossCallReturnLabel_4
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+0
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiPicker102 Using cfiCommon1
          CFI (cfiPicker102) NoFunction
          CFI (cfiPicker102) Picker
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        INC     DPTR
        RET
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiPicker102
//  995 
//  996 /***************************************************************************************************
//  997  * @fn      MT_SysSetTxPower
//  998  *
//  999  * @brief   Set the transmit power.
// 1000  *
// 1001  * @param   pBuf - MT message containing the ZMacTransmitPower_t power level to set.
// 1002  *
// 1003  * @return  None
// 1004  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1005 void MT_SysSetTxPower(uint8 *pBuf)
MT_SysSetTxPower:
          CFI Block cfiBlock103 Using cfiCommon0
          CFI Function MT_SysSetTxPower
        CODE
// 1006 {
        FUNCALL MT_SysSetTxPower, macRadioSetTxPower
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetTxPower, MAC_MlmeSetReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysSetTxPower, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
// 1007   /* A local variable to hold the signed dBm value of TxPower that is being requested. */
// 1008   uint8 signed_dBm_of_TxPower_requeseted;
// 1009 
// 1010   /*
// 1011    * A local variable to hold the signed dBm value of TxPower that can be set which is closest to
// 1012    * the requested dBm value of TxPower, but which is also valid according to a complex set of
// 1013    * compile-time and run-time configuration which is interpreted by the macRadioSetTxPower()
// 1014    * function.
// 1015    */
// 1016   uint8 signed_dBm_of_TxPower_range_corrected;
// 1017 
// 1018   /* Parse the requested dBm from the RPC message. */
// 1019   signed_dBm_of_TxPower_requeseted = pBuf[MT_RPC_POS_DAT0];
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 1020 
// 1021   /*
// 1022    * MAC_MlmeSetReq() will store an out-of-range dBm parameter value into the NIB. So it is not
// 1023    * possible to learn the actual dBm value that will be set by invoking MACMlmeGetReq().
// 1024    * But this actual dBm value is a required return value in the SRSP to this SREQ. Therefore,
// 1025    * it is necessary to make this redundant pre-call to macRadioSetTxPower() here in order to run
// 1026    * the code that will properly constrain the requested dBm to a valid range based on both the
// 1027    * compile-time and the run-time configurations that affect the available valid ranges
// 1028    * (i.e. MAC_MlmeSetReq() itself will invoke for a second time the macRadioSetTxPower() function).
// 1029    */
// 1030   signed_dBm_of_TxPower_range_corrected = macRadioSetTxPower(signed_dBm_of_TxPower_requeseted);
        ; Setup parameters for call to function macRadioSetTxPower
        MOV     R1,A
        LCALL   ??macRadioSetTxPower?relay
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        MOVX    @DPTR,A
// 1031 
// 1032   /*
// 1033    * Call the function to store the requested dBm in the MAC PIB and to set the TxPower as closely
// 1034    * as possible within the TxPower range that is valid for the compile-time and run-time
// 1035    * configuration.
// 1036    */
// 1037   (void)MAC_MlmeSetReq(MAC_PHY_TRANSMIT_POWER_SIGNED, &signed_dBm_of_TxPower_requeseted);
        ; Setup parameters for call to function MAC_MlmeSetReq
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#-0x20
        LCALL   ??MAC_MlmeSetReq?relay
// 1038 
// 1039   /* Build and send back the response that includes the actual dBm TxPower that can be set. */
// 1040   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_SYS),
// 1041                                        MT_SYS_SET_TX_POWER, 1,
// 1042                                        &signed_dBm_of_TxPower_range_corrected);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     R2,#0x14
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock103
// 1043 }
// 1044 #endif /* MT_SYS_FUNC */
// 1045 
// 1046 /***************************************************************************************************
// 1047  * SUPPORT
// 1048  ***************************************************************************************************/
// 1049 
// 1050 /***************************************************************************************************
// 1051  * @fn      MT_SysResetInd()
// 1052  *
// 1053  * @brief   Sends a ZTOOL "reset response" message.
// 1054  *
// 1055  * @param   None
// 1056  *
// 1057  * @return  None
// 1058  *
// 1059  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1060 void MT_SysResetInd(void)
MT_SysResetInd:
          CFI Block cfiBlock104 Using cfiCommon0
          CFI Function MT_SysResetInd
        CODE
// 1061 {
        FUNCALL MT_SysResetInd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_SysResetInd, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 6
        MOV     A,#-0x6
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 1062   uint8 retArray[6];
// 1063 
// 1064   retArray[0] = ResetReason();   /* Reason */
        MOV     A,0x9d
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        ANL     A,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 1065   osal_memcpy( &retArray[1], MTVersionString, 5 );   /* Revision info */
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,#MTVersionString & 0xff
        MOV     ?V0 + 1,#(MTVersionString >> 8) & 0xff
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R4,#0x5
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
// 1066 
// 1067   /* Send out Reset Response message */
// 1068   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_RESET_IND,
// 1069                                 sizeof(retArray), retArray);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x6
        MOV     R2,#-0x80
        MOV     R1,#0x41
        LCALL   ??MT_BuildAndSendZToolResponse?relay
// 1070 }
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock104
        REQUIRE SLEEPSTA
// 1071 
// 1072 /***************************************************************************************************
// 1073  * @fn      MT_SysOsalTimerExpired()
// 1074  *
// 1075  * @brief   Sends a SYS Osal Timer Expired
// 1076  *
// 1077  * @param   None
// 1078  *
// 1079  * @return  None
// 1080  *
// 1081  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1082 void MT_SysOsalTimerExpired(uint8 Id)
MT_SysOsalTimerExpired:
          CFI Block cfiBlock105 Using cfiCommon0
          CFI Function MT_SysOsalTimerExpired
        CODE
// 1083 {
        FUNCALL MT_SysOsalTimerExpired, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        LCALL   ?Subroutine12 & 0xFFFF
// 1084   uint8 retValue;
// 1085   retValue = Id;
// 1086   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_SYS), MT_SYS_OSAL_TIMER_EXPIRED, 1, &retValue);
??CrossCallReturnLabel_35:
        MOV     R2,#-0x7f
        MOV     R1,#0x41
        LJMP    ??Subroutine21_0 & 0xFFFF
          CFI EndBlock cfiBlock105

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysCommandProcessing?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysCommandProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysReset?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysPing?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysPing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysVersion?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysVersion

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysSetExtAddr?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysSetExtAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysGetExtAddr?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysGetExtAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysOsalNVRead?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalNVRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysOsalNVWrite?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalNVWrite

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysOsalNVItemInit?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalNVItemInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysOsalNVDelete?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalNVDelete

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysOsalNVLength?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalNVLength

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysOsalStartTimer?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalStartTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysOsalStopTimer?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalStopTimer

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysRandom?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysRandom

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysAdcRead?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysAdcRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysGpio?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysGpio

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysStackTune?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysStackTune

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysSetUtcTime?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysSetUtcTime

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysGetUtcTime?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysGetUtcTime

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysSetTxPower?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysSetTxPower

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysResetInd?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysResetInd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_SysOsalTimerExpired?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_SysOsalTimerExpired

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant {2, 0}>`:
        DATA8
        DB 2
        DB 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
`?<Constant {2, 0}>_1`:
        DATA8
        DB 2
        DB 0

        END
// 1087 }
// 1088 
// 1089 /***************************************************************************************************
// 1090  ***************************************************************************************************/
// 
// 2 666 bytes in segment BANKED_CODE
//   132 bytes in segment BANK_RELAYS
//     3 bytes in segment SFR_AN
//    12 bytes in segment XDATA_ROM_C
// 
// 2 798 bytes of CODE  memory
//    12 bytes of CONST memory
//     0 bytes of DATA  memory (+ 3 bytes shared)
//
//Errors: none
//Warnings: none
