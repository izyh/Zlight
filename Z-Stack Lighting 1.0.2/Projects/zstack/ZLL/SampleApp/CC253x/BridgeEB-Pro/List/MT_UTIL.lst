###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             12/Apr/2014  12:18:03 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Components\mt\MT_UTIL.c                      #
#    Command line       =  -f "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f "D:\Texas         #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO       #
#                          -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f "D:\Texas               #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wZCL.cfg" "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Components\mt\MT_UTIL.c" -D                  #
#                          FEATURE_GREEN_POWER -D SECURE=1 -D                 #
#                          TC_LINKKEY_JOIN -D ZDSECMGR_TC_DEVICE_MAX=2 -D     #
#                          NV_RESTORE -D HOLD_AUTO_START -D INTER_PAN -D      #
#                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC  #
#                          -D MT_ZDO_FUNC -D MT_ZDO_CB_FUNC -D MT_UTIL_FUNC   #
#                          -D MT_ZDO_MGMT -D LCD_SUPPORTED -D HAL_LCD=FALSE   #
#                          -D HAL_KEY=FALSE -D ZCL_BASIC -D ZCL_READ -D       #
#                          ZCL_WRITE -D ZCL_IDENTIFY -D ZCL_ON_OFF -D         #
#                          ZCL_SCENES -D ZCL_GROUPS -D                        #
#                          ZCL_LIGHT_LINK_ENHANCE -D ZCL_LEVEL_CTRL -D        #
#                          ZCL_COLOR_CTRL -D xMAX_CHANNELS_24GHZ=0x02108800   #
#                          -lC "D:\Texas Instruments\Z-Stack Lighting         #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\List\" -lA "D:\Texas Instruments\Z-Stack     #
#                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC253 #
#                          x\BridgeEB-Pro\List\" --diag_suppress Pe001,Pa010  #
#                          -o "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\Obj\" -e --debug --core=plain --dptr=16,1    #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\" -I    #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\Sour #
#                          ce\" -I "D:\Texas Instruments\Z-Stack Lighting     #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\S #
#                          ource\" -I "D:\Texas Instruments\Z-Stack Lighting  #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\HomeAutomation\Source\" -I "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\HomeAutomation\SampleLight\Source\" -I           #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\ZMain\TI2530DB\" -I "D:\Texas                    #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\hal\include\" -I "D:\Texas      #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\hal\target\CC2530EB\" -I        #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\include\" -I "D:\Texas      #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\high_level\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\" -I        #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\single_chip #
#                          \" -I "D:\Texas Instruments\Z-Stack Lighting       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mt\" -I "D:\Texas               #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\osal\include\" -I "D:\Texas     #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\services\saddr\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\services\sdata\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\af\" -I "D:\Texas         #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\nwk\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sapi\" -I "D:\Texas       #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sec\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sys\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\zcl\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\zdo\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\zmac\" -I "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\zmac\f8w\" -Ohz                 #
#                          --require_prototypes                               #
#    List file          =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\List\MT_UTIL.lst                             #
#    Object file        =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\Obj\MT_UTIL.r51                              #
#                                                                             #
#                                                                             #
###############################################################################

D:\Texas Instruments\Z-Stack Lighting 1.0.2\Components\mt\MT_UTIL.c
      1          /***************************************************************************************************
      2            Filename:       MT_UTIL.c
      3            Revised:        $Date: 2013-11-13 13:09:12 -0800 (Wed, 13 Nov 2013) $
      4            Revision:       $Revision: 36079 $
      5          
      6            Description:    MonitorTest Utility Functions
      7          
      8            Copyright 2007-2013 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License"). You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product. Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          
     45          #include "AddrMgr.h"
     46          
     47          #include "OnBoard.h"   /* This is here because of the key reading */
     48          #include "hal_key.h"
     49          #include "hal_led.h"
     50          #include "OSAL_Nv.h"
     51          #include "osal.h"
     52          #include "NLMEDE.h"
     53          #include "MT.h"
     54          #include "MT_UTIL.h"
     55          #include "MT_MAC.h"
     56          #include "ssp.h"
     57          #if defined ZCL_KEY_ESTABLISH
     58          #include "zcl_key_establish.h"
     59          #if defined TC_LINKKEY_JOIN
     60          #include "zcl_se.h"
     61          #endif
     62          #endif
     63          
     64          #if !defined NONWK
     65          #include "MT_ZDO.h"
     66          #include "MT_SAPI.h"
     67          #include "MT_NWK.h"
     68          #include "MT_AF.h"
     69          #include "AssocList.h"
     70          #include "ZDApp.h"
     71          #include "ZDSecMgr.h"
     72          #endif
     73          
     74          #if defined MT_SRNG
     75          #include "hal_srng.h"
     76          #endif
     77          /***************************************************************************************************
     78           * CONSTANTS
     79           ***************************************************************************************************/
     80          #define MT_UTIL_DEVICE_INFO_RESPONSE_LEN 14
     81          #define MT_UTIL_STATUS_LEN    1
     82          #define MT_UTIL_FRM_CTR_LEN   4
     83          // Status + LinkKeyDataLen + Tx+Rx Frame counter.
     84          #define MT_APSME_LINKKEY_GET_RSP_LEN (MT_UTIL_STATUS_LEN + SEC_KEY_LEN + (MT_UTIL_FRM_CTR_LEN * 2))
     85          // Status + NV id
     86          #define MT_APSME_LINKKEY_NV_ID_GET_RSP_LEN (MT_UTIL_STATUS_LEN + 2)
     87          
     88          /***************************************************************************************************
     89           * LOCAL VARIABLES
     90           ***************************************************************************************************/
     91          #if defined ZCL_KEY_ESTABLISH
     92          uint8 zcl_key_establish_task_id;
     93          #endif
     94          
     95          /***************************************************************************************************
     96           * LOCAL FUNCTIONS
     97           ***************************************************************************************************/
     98          #ifdef AUTO_PEND
     99          static void MT_UtilRevExtCpy( uint8 *pDst, uint8 *pSrc );
    100          static void MT_UtilSpi2Addr( zAddrType_t *pDst, uint8 *pSrc );
    101          #endif
    102          
    103          #if defined (MT_UTIL_FUNC)
    104          void MT_UtilGetDeviceInfo(void);
    105          void MT_UtilGetNvInfo(void);
    106          void MT_UtilSetPanID(uint8 *pBuf);
    107          void MT_UtilSetChannels(uint8 *pBuf);
    108          void MT_UtilSetSecLevel(uint8 *pBuf);
    109          void MT_UtilSetPreCfgKey(uint8 *pBuf);
    110          void MT_UtilCallbackSub(uint8 *pData);
    111          void MT_UtilKeyEvent(uint8 *pBuf);
    112          void MT_UtilTimeAlive(void);
    113          void MT_UtilLedControl(uint8 *pBuf);
    114          void MT_UtilSrcMatchEnable (uint8 *pBuf);
    115          void MT_UtilSrcMatchAddEntry (uint8 *pBuf);
    116          void MT_UtilSrcMatchDeleteEntry (uint8 *pBuf);
    117          void MT_UtilSrcMatchCheckSrcAddr (uint8 *pBuf);
    118          void MT_UtilSrcMatchAckAllPending (uint8 *pBuf);
    119          void MT_UtilSrcMatchCheckAllPending (uint8 *pBuf);
    120          #ifdef MT_SRNG
    121          void MT_UtilSrngGen(void);
    122          #endif
    123          
    124          #if !defined NONWK
    125          void MT_UtilDataReq(uint8 *pBuf);
    126          static void MT_UtilAddrMgrEntryLookupExt(uint8 *pBuf);
    127          static void MT_UtilAddrMgrEntryLookupNwk(uint8 *pBuf);
    128          #if defined MT_SYS_KEY_MANAGEMENT
    129          static void MT_UtilAPSME_LinkKeyDataGet(uint8 *pBuf);
    130          static void MT_UtilAPSME_LinkKeyNvIdGet(uint8 *pBuf);
    131          #endif //MT_SYS_KEY_MANAGEMENT
    132          static void MT_UtilAPSME_RequestKeyCmd(uint8 *pBuf);
    133          static void MT_UtilAssocCount(uint8 *pBuf);
    134          static void MT_UtilAssocFindDevice(uint8 *pBuf);
    135          static void MT_UtilAssocGetWithAddress(uint8 *pBuf);
    136          static void MT_UtilBindAddEntry(uint8 *pBuf);
    137          static void packDev_t(uint8 *pBuf, associated_devices_t *pDev);
    138          static void packBindEntry_t(uint8 *pBuf, BindingEntry_t *pBind);
    139          #if defined ZCL_KEY_ESTABLISH
    140          static void MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment(uint8 *pBuf);
    141          static void MT_UtilzclGeneral_KeyEstablishment_ECDSASign(uint8 *pBuf);
    142          #endif // ZCL_KEY_ESTABLISH
    143          static void MT_UtilSync(void);
    144          #endif // !defined NONWK
    145          #endif // MT_UTIL_FUNC
    146          
    147          #if defined (MT_UTIL_FUNC)
    148          /***************************************************************************************************
    149          * @fn      MT_UtilProcessing
    150          *
    151          * @brief   Process all the DEBUG commands that are issued by test tool
    152          *
    153          * @param   pBuf  - pointer to received SPI data message
    154          *
    155          * @return  status
    156          ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    157          uint8 MT_UtilCommandProcessing(uint8 *pBuf)
   \                     MT_UtilCommandProcessing:
    158          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV     A,#-0x16
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    159            uint8 status = MT_RPC_SUCCESS;
   \   00000A   75..00       MOV     ?V0 + 2,#0x0
    160          
    161            switch (pBuf[MT_RPC_POS_CMD1])
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   EA           MOV     A,R2
   \   000016   2403         ADD     A,#0x3
   \   000018   F582         MOV     DPL,A
   \   00001A   EB           MOV     A,R3
   \   00001B   3400         ADDC    A,#0x0
   \   00001D   F583         MOV     DPH,A
   \   00001F   E8           MOV     A,R0
   \   000020   7003         JNZ     $+5
   \   000022   02....       LJMP    ??MT_UtilCommandProcessing_0 & 0xFFFF
   \   000025   14           DEC     A
   \   000026   7003         JNZ     $+5
   \   000028   02....       LJMP    ??MT_UtilCommandProcessing_1 & 0xFFFF
   \   00002B   14           DEC     A
   \   00002C   7003         JNZ     $+5
   \   00002E   02....       LJMP    ??MT_UtilCommandProcessing_2 & 0xFFFF
   \   000031   14           DEC     A
   \   000032   7003         JNZ     $+5
   \   000034   02....       LJMP    ??MT_UtilCommandProcessing_3 & 0xFFFF
   \   000037   14           DEC     A
   \   000038   7003         JNZ     $+5
   \   00003A   02....       LJMP    ??MT_UtilCommandProcessing_4 & 0xFFFF
   \   00003D   14           DEC     A
   \   00003E   7003         JNZ     $+5
   \   000040   02....       LJMP    ??MT_UtilCommandProcessing_5 & 0xFFFF
   \   000043   14           DEC     A
   \   000044   7003         JNZ     $+5
   \   000046   02....       LJMP    ??MT_UtilCommandProcessing_6 & 0xFFFF
   \   000049   14           DEC     A
   \   00004A   7003         JNZ     $+5
   \   00004C   02....       LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
   \   00004F   24FE         ADD     A,#-0x2
   \   000051   7003         JNZ     $+5
   \   000053   02....       LJMP    ??MT_UtilCommandProcessing_8 & 0xFFFF
   \   000056   14           DEC     A
   \   000057   7003         JNZ     $+5
   \   000059   02....       LJMP    ??MT_UtilCommandProcessing_9 & 0xFFFF
   \   00005C   24FA         ADD     A,#-0x6
   \   00005E   7003         JNZ     $+5
   \   000060   02....       LJMP    ??MT_UtilCommandProcessing_10 & 0xFFFF
   \   000063   14           DEC     A
   \   000064   7003         JNZ     $+5
   \   000066   02....       LJMP    ??MT_UtilCommandProcessing_11 & 0xFFFF
   \   000069   24F1         ADD     A,#-0xf
   \   00006B   7003         JNZ     $+5
   \   00006D   02....       LJMP    ??MT_UtilCommandProcessing_12 & 0xFFFF
   \   000070   14           DEC     A
   \   000071   7003         JNZ     $+5
   \   000073   02....       LJMP    ??MT_UtilCommandProcessing_13 & 0xFFFF
   \   000076   14           DEC     A
   \   000077   7003         JNZ     $+5
   \   000079   02....       LJMP    ??MT_UtilCommandProcessing_14 & 0xFFFF
   \   00007C   14           DEC     A
   \   00007D   7003         JNZ     $+5
   \   00007F   02....       LJMP    ??MT_UtilCommandProcessing_15 & 0xFFFF
   \   000082   14           DEC     A
   \   000083   7003         JNZ     $+5
   \   000085   02....       LJMP    ??MT_UtilCommandProcessing_16 & 0xFFFF
   \   000088   14           DEC     A
   \   000089   7003         JNZ     $+5
   \   00008B   02....       LJMP    ??MT_UtilCommandProcessing_17 & 0xFFFF
   \   00008E   24E5         ADD     A,#-0x1b
   \   000090   7003         JNZ     $+5
   \   000092   02....       LJMP    ??MT_UtilCommandProcessing_18 & 0xFFFF
   \   000095   14           DEC     A
   \   000096   7003         JNZ     $+5
   \   000098   02....       LJMP    ??MT_UtilCommandProcessing_19 & 0xFFFF
   \   00009B   24F9         ADD     A,#-0x7
   \   00009D   7003         JNZ     $+5
   \   00009F   02....       LJMP    ??MT_UtilCommandProcessing_20 & 0xFFFF
   \   0000A2   14           DEC     A
   \   0000A3   7003         JNZ     $+5
   \   0000A5   02....       LJMP    ??MT_UtilCommandProcessing_21 & 0xFFFF
   \   0000A8   14           DEC     A
   \   0000A9   7003         JNZ     $+5
   \   0000AB   02....       LJMP    ??MT_UtilCommandProcessing_22 & 0xFFFF
   \   0000AE   14           DEC     A
   \   0000AF   7003         JNZ     $+5
   \   0000B1   02....       LJMP    ??MT_UtilCommandProcessing_23 & 0xFFFF
   \   0000B4   24FE         ADD     A,#-0x2
   \   0000B6   7003         JNZ     $+5
   \   0000B8   02....       LJMP    ??MT_UtilCommandProcessing_24 & 0xFFFF
   \   0000BB   246D         ADD     A,#0x6d
   \   0000BD   7003         JNZ     $+5
   \   0000BF   02....       LJMP    ??MT_UtilCommandProcessing_25 & 0xFFFF
   \   0000C2   02....       LJMP    ??MT_UtilCommandProcessing_26 & 0xFFFF
    162            {
    163              // CC253X MAC Network Processor does not have NV support
    164          #if !defined(CC253X_MACNP)
    165            case MT_UTIL_GET_DEVICE_INFO:
    166              MT_UtilGetDeviceInfo();
   \                     ??MT_UtilCommandProcessing_0:
   \   0000C5                ; Setup parameters for call to function MT_UtilGetDeviceInfo
   \   0000C5   12....       LCALL   ??MT_UtilGetDeviceInfo?relay
    167              break;
   \   0000C8   02....       LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
    168          
    169            case MT_UTIL_GET_NV_INFO:
    170              MT_UtilGetNvInfo();
   \                     ??MT_UtilCommandProcessing_1:
   \   0000CB                ; Setup parameters for call to function MT_UtilGetNvInfo
   \   0000CB   12....       LCALL   ??MT_UtilGetNvInfo?relay
    171              break;
   \   0000CE   02....       LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
    172          
    173            case MT_UTIL_SET_PANID:
    174              MT_UtilSetPanID(pBuf);
   \                     ??MT_UtilCommandProcessing_2:
   \   0000D1                ; Setup parameters for call to function MT_UtilSetPanID
   \   0000D1   12....       LCALL   ??MT_UtilSetPanID?relay
    175              break;
   \   0000D4   02....       LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
    176          
    177            case MT_UTIL_SET_CHANNELS:
    178              MT_UtilSetChannels(pBuf);
   \                     ??MT_UtilCommandProcessing_3:
   \   0000D7                ; Setup parameters for call to function MT_UtilSetChannels
   \   0000D7   12....       LCALL   ??MT_UtilSetChannels?relay
    179              break;
   \   0000DA   02....       LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
    180          
    181            case MT_UTIL_SET_SECLEVEL:
    182              MT_UtilSetSecLevel(pBuf);
   \                     ??MT_UtilCommandProcessing_4:
   \   0000DD                ; Setup parameters for call to function MT_UtilSetSecLevel
   \   0000DD   12....       LCALL   ??MT_UtilSetSecLevel?relay
    183              break;
   \   0000E0   02....       LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
    184          
    185            case MT_UTIL_SET_PRECFGKEY:
    186              MT_UtilSetPreCfgKey(pBuf);
   \                     ??MT_UtilCommandProcessing_5:
   \   0000E3                ; Setup parameters for call to function MT_UtilSetPreCfgKey
   \   0000E3   12....       LCALL   ??MT_UtilSetPreCfgKey?relay
    187              break;
   \   0000E6   02....       LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
    188          #endif
    189            case MT_UTIL_CALLBACK_SUB_CMD:
    190              MT_UtilCallbackSub(pBuf);
   \                     ??MT_UtilCommandProcessing_6:
   \   0000E9                ; Setup parameters for call to function MT_UtilCallbackSub
   \   0000E9   12....       LCALL   ??MT_UtilCallbackSub?relay
    191              break;
   \   0000EC   02....       LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
    192          
    193            case MT_UTIL_KEY_EVENT:
    194          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    195              MT_UtilKeyEvent(pBuf);
    196          #endif
    197              break;
    198          
    199            case MT_UTIL_TIME_ALIVE:
    200              MT_UtilTimeAlive();
   \                     ??MT_UtilCommandProcessing_8:
   \   0000EF                ; Setup parameters for call to function MT_UtilTimeAlive
   \   0000EF   12....       LCALL   ??MT_UtilTimeAlive?relay
    201              break;
   \   0000F2   02....       LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
    202          
    203            case MT_UTIL_LED_CONTROL:
    204          #if (defined HAL_LED) && (HAL_LED == TRUE)
    205              MT_UtilLedControl(pBuf);
   \                     ??MT_UtilCommandProcessing_9:
   \   0000F5                ; Setup parameters for call to function MT_UtilLedControl
   \   0000F5   12....       LCALL   ??MT_UtilLedControl?relay
    206          #endif
    207              break;
   \   0000F8   02....       LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
    208          
    209            case MT_UTIL_SRC_MATCH_ENABLE:
    210              MT_UtilSrcMatchEnable(pBuf);
   \                     ??MT_UtilCommandProcessing_12:
   \   0000FB                ; Setup parameters for call to function MT_UtilSrcMatchEnable
   \   0000FB   12....       LCALL   ??MT_UtilSrcMatchEnable?relay
    211              break;
   \   0000FE   02....       LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
    212          
    213            case MT_UTIL_SRC_MATCH_ADD_ENTRY:
    214              MT_UtilSrcMatchAddEntry(pBuf);
   \                     ??MT_UtilCommandProcessing_13:
   \   000101                ; Setup parameters for call to function MT_UtilSrcMatchAddEntry
   \   000101   12....       LCALL   ??MT_UtilSrcMatchAddEntry?relay
    215              break;
   \   000104   02....       LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
    216          
    217            case MT_UTIL_SRC_MATCH_DEL_ENTRY:
    218              MT_UtilSrcMatchDeleteEntry(pBuf);
   \                     ??MT_UtilCommandProcessing_14:
   \   000107                ; Setup parameters for call to function MT_UtilSrcMatchDeleteEntry
   \   000107   12....       LCALL   ??MT_UtilSrcMatchDeleteEntry?relay
    219              break;
   \   00010A   02....       LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
    220          
    221            case MT_UTIL_SRC_MATCH_CHECK_SRC_ADDR:
    222              MT_UtilSrcMatchCheckSrcAddr(pBuf);
   \                     ??MT_UtilCommandProcessing_15:
   \   00010D                ; Setup parameters for call to function MT_UtilSrcMatchCheckSrcAddr
   \   00010D   12....       LCALL   ??MT_UtilSrcMatchCheckSrcAddr?relay
    223              break;
   \   000110   02....       LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
    224          
    225            case MT_UTIL_SRC_MATCH_ACK_ALL_PENDING:
    226              MT_UtilSrcMatchAckAllPending(pBuf);
   \                     ??MT_UtilCommandProcessing_16:
   \   000113                ; Setup parameters for call to function MT_UtilSrcMatchAckAllPending
   \   000113   12....       LCALL   ??MT_UtilSrcMatchAckAllPending?relay
    227              break;
   \   000116   02....       LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
    228          
    229            case MT_UTIL_SRC_MATCH_CHECK_ALL_PENDING:
    230              MT_UtilSrcMatchCheckAllPending(pBuf);
   \                     ??MT_UtilCommandProcessing_17:
   \   000119                ; Setup parameters for call to function MT_UtilSrcMatchCheckAllPending
   \   000119   12....       LCALL   ??MT_UtilSrcMatchCheckAllPending?relay
    231              break;
   \   00011C   02....       LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
    232          
    233            case MT_UTIL_TEST_LOOPBACK:
    234              MT_BuildAndSendZToolResponse((MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_UTIL), MT_UTIL_TEST_LOOPBACK,
    235                                           pBuf[MT_RPC_POS_LEN], (pBuf+MT_RPC_FRAME_HDR_SZ));
   \                     ??MT_UtilCommandProcessing_10:
   \   00011F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00011F   AC82         MOV     R4,DPL
   \   000121   AD83         MOV     R5,DPH
   \   000123   8A82         MOV     DPL,R2
   \   000125   8B83         MOV     DPH,R3
   \   000127   E0           MOVX    A,@DPTR
   \   000128   FB           MOV     R3,A
   \   000129   7A10         MOV     R2,#0x10
   \   00012B   02....       LJMP    ??MT_UtilCommandProcessing_27 & 0xFFFF
    236              break;
    237          
    238          #if !defined NONWK
    239            case MT_UTIL_DATA_REQ:
    240              MT_UtilDataReq(pBuf);
   \                     ??MT_UtilCommandProcessing_11:
   \   00012E                ; Setup parameters for call to function MT_UtilDataReq
   \   00012E   12....       LCALL   ??MT_UtilDataReq?relay
    241              break;
   \   000131   02....       LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
    242          
    243            case MT_UTIL_ADDRMGR_EXT_ADDR_LOOKUP:
    244              MT_UtilAddrMgrEntryLookupExt(pBuf);
   \                     ??MT_UtilCommandProcessing_18:
   \   000134                ; Setup parameters for call to function MT_UtilAddrMgrEntryLookupExt
   \   000134   12....       LCALL   ??MT_UtilAddrMgrEntryLookupExt?relay
    245              break;
   \   000137   02....       LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
    246          
    247            case MT_UTIL_ADDRMGR_NWK_ADDR_LOOKUP:
    248              MT_UtilAddrMgrEntryLookupNwk(pBuf);
   \                     ??MT_UtilCommandProcessing_19:
   \   00013A   88..         MOV     ?V0 + 5,R0
   \   00013C   E0           MOVX    A,@DPTR
   \   00013D   FA           MOV     R2,A
   \   00013E   A3           INC     DPTR
   \   00013F   E0           MOVX    A,@DPTR
   \   000140   F9           MOV     R1,A
   \   000141   EA           MOV     A,R2
   \   000142   F8           MOV     R0,A
   \   000143   740A         MOV     A,#0xa
   \   000145   12....       LCALL   ?XSTACK_DISP0_8
   \   000148   E8           MOV     A,R0
   \   000149   F0           MOVX    @DPTR,A
   \   00014A   A3           INC     DPTR
   \   00014B   E9           MOV     A,R1
   \   00014C   F0           MOVX    @DPTR,A
   \   00014D                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   00014D   7409         MOV     A,#0x9
   \   00014F   12....       LCALL   ?XSTACK_DISP0_8
   \   000152   AA82         MOV     R2,DPL
   \   000154   AB83         MOV     R3,DPH
   \   000156   12....       LCALL   ??AddrMgrEntryLookupNwk?relay
   \   000159                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000159   740C         MOV     A,#0xc
   \   00015B   12....       LCALL   ?XSTACK_DISP0_8
   \   00015E   AC82         MOV     R4,DPL
   \   000160   AD83         MOV     R5,DPH
   \   000162   7B08         MOV     R3,#0x8
   \   000164   AA..         MOV     R2,?V0 + 5
   \   000166   806C         SJMP    ??MT_UtilCommandProcessing_27
    249              break;
    250          
    251          #if defined MT_SYS_KEY_MANAGEMENT
    252            case MT_UTIL_APSME_LINK_KEY_DATA_GET:
    253              MT_UtilAPSME_LinkKeyDataGet(pBuf);
    254              break;
    255          
    256            case MT_UTIL_APSME_LINK_KEY_NV_ID_GET:
    257              MT_UtilAPSME_LinkKeyNvIdGet(pBuf);
    258              break;
    259          #endif // MT_SYS_KEY_MANAGEMENT
    260          
    261            case MT_UTIL_APSME_REQUEST_KEY_CMD:
    262              MT_UtilAPSME_RequestKeyCmd(pBuf);
   \                     ??MT_UtilCommandProcessing_23:
   \   000168   88..         MOV     ?V0 + 3,R0
   \   00016A                ; Setup parameters for call to function osal_memcpy
   \   00016A   8582..       MOV     ?V0 + 0,DPL
   \   00016D   8583..       MOV     ?V0 + 1,DPH
   \   000170   85....       MOV     ?V0 + 8,?V0 + 0
   \   000173   85....       MOV     ?V0 + 9,?V0 + 1
   \   000176   75..00       MOV     ?V0 + 10,#0x0
   \   000179   78..         MOV     R0,#?V0 + 8
   \   00017B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00017E   7C08         MOV     R4,#0x8
   \   000180   7D00         MOV     R5,#0x0
   \   000182   7404         MOV     A,#0x4
   \   000184   12....       LCALL   ?XSTACK_DISP0_8
   \   000187   AA82         MOV     R2,DPL
   \   000189   AB83         MOV     R3,DPH
   \   00018B   12....       LCALL   ??osal_memcpy?relay
   \   00018E   7403         MOV     A,#0x3
   \   000190   12....       LCALL   ?DEALLOC_XSTACK8
   \   000193                ; Setup parameters for call to function ZDSecMgrRequestAppKey
   \   000193   7401         MOV     A,#0x1
   \   000195   12....       LCALL   ?XSTACK_DISP0_8
   \   000198   AA82         MOV     R2,DPL
   \   00019A   AB83         MOV     R3,DPH
   \   00019C   12....       LCALL   ??ZDSecMgrRequestAppKey?relay
   \   00019F   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0001A2   AA..         MOV     R2,?V0 + 3
   \   0001A4   802E         SJMP    ??MT_UtilCommandProcessing_27
    263              break;
    264          
    265            case MT_UTIL_ASSOC_COUNT:
    266              MT_UtilAssocCount(pBuf);
   \                     ??MT_UtilCommandProcessing_20:
   \   0001A6   88..         MOV     ?V0 + 4,R0
   \   0001A8   AE82         MOV     R6,DPL
   \   0001AA   AF83         MOV     R7,DPH
   \   0001AC   A3           INC     DPTR
   \   0001AD   8582..       MOV     ?V0 + 0,DPL
   \   0001B0   8583..       MOV     ?V0 + 1,DPH
   \   0001B3                ; Setup parameters for call to function AssocCount
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   FA           MOV     R2,A
   \   0001B5   8E82         MOV     DPL,R6
   \   0001B7   8F83         MOV     DPH,R7
   \   0001B9   E0           MOVX    A,@DPTR
   \   0001BA   F9           MOV     R1,A
   \   0001BB   12....       LCALL   ??AssocCount?relay
   \   0001BE   EA           MOV     A,R2
   \   0001BF   8E82         MOV     DPL,R6
   \   0001C1   8F83         MOV     DPH,R7
   \   0001C3   F0           MOVX    @DPTR,A
   \   0001C4   85..82       MOV     DPL,?V0 + 0
   \   0001C7   85..83       MOV     DPH,?V0 + 1
   \   0001CA   EB           MOV     A,R3
   \   0001CB   F0           MOVX    @DPTR,A
   \   0001CC                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0001CC   EE           MOV     A,R6
   \   0001CD   FC           MOV     R4,A
   \   0001CE   EF           MOV     A,R7
   \   0001CF   FD           MOV     R5,A
   \   0001D0   7B02         MOV     R3,#0x2
   \   0001D2   AA..         MOV     R2,?V0 + 4
   \                     ??MT_UtilCommandProcessing_27:
   \   0001D4   7967         MOV     R1,#0x67
   \   0001D6   8019         SJMP    ??MT_UtilCommandProcessing_28
    267              break;
    268          
    269            case MT_UTIL_ASSOC_FIND_DEVICE:
    270              MT_UtilAssocFindDevice(pBuf);
   \                     ??MT_UtilCommandProcessing_21:
   \   0001D8                ; Setup parameters for call to function MT_UtilAssocFindDevice
   \   0001D8   12....       LCALL   ??MT_UtilAssocFindDevice?relay
    271              break;
   \   0001DB   801C         SJMP    ??MT_UtilCommandProcessing_7
    272          
    273            case MT_UTIL_ASSOC_GET_WITH_ADDRESS:
    274              MT_UtilAssocGetWithAddress(pBuf);
   \                     ??MT_UtilCommandProcessing_22:
   \   0001DD                ; Setup parameters for call to function MT_UtilAssocGetWithAddress
   \   0001DD   12....       LCALL   ??MT_UtilAssocGetWithAddress?relay
    275              break;
   \   0001E0   8017         SJMP    ??MT_UtilCommandProcessing_7
    276          
    277            case MT_UTIL_BIND_ADD_ENTRY:
    278              MT_UtilBindAddEntry(pBuf);
   \                     ??MT_UtilCommandProcessing_24:
   \   0001E2                ; Setup parameters for call to function MT_UtilBindAddEntry
   \   0001E2   12....       LCALL   ??MT_UtilBindAddEntry?relay
    279              break;
   \   0001E5   8012         SJMP    ??MT_UtilCommandProcessing_7
    280          
    281          #if defined ZCL_KEY_ESTABLISH
    282            case MT_UTIL_ZCL_KEY_EST_INIT_EST:
    283              MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment(pBuf);
    284              break;
    285          
    286            case MT_UTIL_ZCL_KEY_EST_SIGN:
    287              MT_UtilzclGeneral_KeyEstablishment_ECDSASign(pBuf);
    288              break;
    289          #endif
    290          
    291            case MT_UTIL_SYNC_REQ:
    292              MT_UtilSync();
   \                     ??MT_UtilCommandProcessing_25:
   \   0001E7                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0001E7   7C00         MOV     R4,#0x0
   \   0001E9   7D00         MOV     R5,#0x0
   \   0001EB   7B00         MOV     R3,#0x0
   \   0001ED   7AE0         MOV     R2,#-0x20
   \   0001EF   7947         MOV     R1,#0x47
   \                     ??MT_UtilCommandProcessing_28:
   \   0001F1   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    293              break;
   \   0001F4   8003         SJMP    ??MT_UtilCommandProcessing_7
    294          #endif /* !defined NONWK */
    295          
    296          #ifdef MT_SRNG
    297            case MT_UTIL_SRNG_GENERATE:
    298              MT_UtilSrngGen();
    299              break;
    300          #endif
    301          
    302            default:
    303              status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_UtilCommandProcessing_26:
   \   0001F6   75..02       MOV     ?V0 + 2,#0x2
    304              break;
    305            }
    306          
    307            return status;
   \                     ??MT_UtilCommandProcessing_7:
   \   0001F9   A9..         MOV     R1,?V0 + 2
   \   0001FB   7416         MOV     A,#0x16
   \   0001FD                REQUIRE ?Subroutine0
   \   0001FD                ; // Fall through to label ?Subroutine0
    308          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F0B         MOV     R7,#0xb
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    309          
    310          /***************************************************************************************************
    311          * @fn      MT_UtilGetDeviceInfo
    312          *
    313          * @brief   The Get Device Info serial message.
    314          *
    315          * @param   None.
    316          *
    317          * @return  void
    318          ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    319          void MT_UtilGetDeviceInfo(void)
   \                     MT_UtilGetDeviceInfo:
    320          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    321            uint8  *buf;
    322            uint8  *pBuf;
    323            uint8  bufLen = MT_UTIL_DEVICE_INFO_RESPONSE_LEN;
   \   00000A   75..0E       MOV     ?V0 + 2,#0xe
    324            uint16 *assocList = NULL;
   \   00000D   7E00         MOV     R6,#0x0
   \   00000F   7F00         MOV     R7,#0x0
    325          
    326          #if !defined NONWK
    327            uint8  assocCnt = 0;
   \   000011   85..82       MOV     DPL,?XSP + 0
   \   000014   85..83       MOV     DPH,?XSP + 1
   \   000017   E4           CLR     A
   \   000018   F0           MOVX    @DPTR,A
    328          
    329            if (ZG_DEVICE_RTR_TYPE)
   \   000019   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   6004         JZ      ??MT_UtilGetDeviceInfo_0
   \   00001F   6401         XRL     A,#0x1
   \   000021   7022         JNZ     ??MT_UtilGetDeviceInfo_1
    330            {
    331              assocList = AssocMakeList( &assocCnt );
   \                     ??MT_UtilGetDeviceInfo_0:
   \   000023                ; Setup parameters for call to function AssocMakeList
   \   000023   85..82       MOV     DPL,?XSP + 0
   \   000026   85..83       MOV     DPH,?XSP + 1
   \   000029   AA82         MOV     R2,DPL
   \   00002B   AB83         MOV     R3,DPH
   \   00002D   12....       LCALL   ??AssocMakeList?relay
   \   000030   8A..         MOV     ?V0 + 0,R2
   \   000032   8B..         MOV     ?V0 + 1,R3
   \   000034   AE..         MOV     R6,?V0 + 0
   \   000036   AF..         MOV     R7,?V0 + 1
    332              bufLen += (assocCnt * sizeof(uint16));
   \   000038   85..82       MOV     DPL,?XSP + 0
   \   00003B   85..83       MOV     DPH,?XSP + 1
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   C3           CLR     C
   \   000040   33           RLC     A
   \   000041   240E         ADD     A,#0xe
   \   000043   F5..         MOV     ?V0 + 2,A
    333            }
    334          #endif
    335          
    336            buf = osal_mem_alloc( bufLen );
   \                     ??MT_UtilGetDeviceInfo_1:
   \   000045                ; Setup parameters for call to function osal_mem_alloc
   \   000045   85....       MOV     ?V0 + 0,?V0 + 2
   \   000048   AA..         MOV     R2,?V0 + 0
   \   00004A   7B00         MOV     R3,#0x0
   \   00004C   12....       LCALL   ??osal_mem_alloc?relay
   \   00004F   8A..         MOV     ?V0 + 0,R2
   \   000051   8B..         MOV     ?V0 + 1,R3
    337            if ( buf )
   \   000053   EA           MOV     A,R2
   \   000054   45..         ORL     A,?V0 + 1
   \   000056   7003         JNZ     $+5
   \   000058   02....       LJMP    ??MT_UtilGetDeviceInfo_2 & 0xFFFF
    338            {
    339              pBuf = buf;
    340          
    341              *pBuf++ = ZSUCCESS; // Status
   \   00005B   8A82         MOV     DPL,R2
   \   00005D   8B83         MOV     DPH,R3
   \   00005F   E4           CLR     A
   \   000060   12....       LCALL   ?Subroutine25 & 0xFFFF
    342          
    343              osal_nv_read( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf );
   \                     ??CrossCallReturnLabel_34:
   \   000063                ; Setup parameters for call to function osal_nv_read
   \   000063   78..         MOV     R0,#?V0 + 6
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   75..08       MOV     ?V0 + 4,#0x8
   \   00006B   75..00       MOV     ?V0 + 5,#0x0
   \   00006E   78..         MOV     R0,#?V0 + 4
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   7C00         MOV     R4,#0x0
   \   000075   7D00         MOV     R5,#0x0
   \   000077   7A01         MOV     R2,#0x1
   \   000079   7B00         MOV     R3,#0x0
   \   00007B   12....       LCALL   ??osal_nv_read?relay
   \   00007E   7404         MOV     A,#0x4
   \   000080   12....       LCALL   ?DEALLOC_XSTACK8
    344              pBuf += Z_EXTADDR_LEN;
   \   000083   E5..         MOV     A,?V0 + 6
   \   000085   2408         ADD     A,#0x8
   \   000087   F5..         MOV     ?V0 + 6,A
   \   000089   E5..         MOV     A,?V0 + 7
   \   00008B   3400         ADDC    A,#0x0
   \   00008D   F5..         MOV     ?V0 + 7,A
    345          
    346          #if defined NONWK
    347              // Skip past ZStack only parameters for NONWK
    348              *pBuf++ = 0;
    349              *pBuf++ = 0;
    350              *pBuf++ = 0;
    351              *pBuf++ = 0;
    352              *pBuf = 0;
    353          #else
    354              {
    355                uint16 shortAddr = NLME_GetShortAddr();
   \   00008F                ; Setup parameters for call to function NLME_GetShortAddr
   \   00008F   12....       LCALL   ??NLME_GetShortAddr?relay
    356                *pBuf++ = LO_UINT16( shortAddr );
   \   000092   EA           MOV     A,R2
   \   000093   85..82       MOV     DPL,?V0 + 6
   \   000096   85..83       MOV     DPH,?V0 + 7
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   A3           INC     DPTR
    357                *pBuf++ = HI_UINT16( shortAddr );
   \   00009B   EB           MOV     A,R3
   \   00009C   F0           MOVX    @DPTR,A
   \   00009D   A3           INC     DPTR
    358              }
    359          
    360              /* Return device type */
    361              *pBuf++ = ZSTACK_DEVICE_BUILD;
   \   00009E   7402         MOV     A,#0x2
   \   0000A0   12....       LCALL   ?Subroutine25 & 0xFFFF
    362          
    363              /*Return device state */
    364              *pBuf++ = (uint8)devState;
   \                     ??CrossCallReturnLabel_35:
   \   0000A3   90....       MOV     DPTR,#devState
   \   0000A6   12....       LCALL   ?Subroutine9 & 0xFFFF
    365          
    366              if (ZG_DEVICE_RTR_TYPE)
   \                     ??CrossCallReturnLabel_2:
   \   0000A9   A3           INC     DPTR
   \   0000AA   8582..       MOV     ?V0 + 4,DPL
   \   0000AD   8583..       MOV     ?V0 + 5,DPH
   \   0000B0   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   6004         JZ      ??MT_UtilGetDeviceInfo_3
   \   0000B6   6401         XRL     A,#0x1
   \   0000B8   7045         JNZ     ??MT_UtilGetDeviceInfo_4
    367              {
    368                *pBuf++ = assocCnt;
   \                     ??MT_UtilGetDeviceInfo_3:
   \   0000BA   85..82       MOV     DPL,?XSP + 0
   \   0000BD   85..83       MOV     DPH,?XSP + 1
   \   0000C0   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   0000C3   85....       MOV     ?V0 + 6,?V0 + 4
   \   0000C6   85....       MOV     ?V0 + 7,?V0 + 5
    369          
    370                if ( assocCnt )
   \   0000C9   85..82       MOV     DPL,?XSP + 0
   \   0000CC   85..83       MOV     DPH,?XSP + 1
   \   0000CF   E0           MOVX    A,@DPTR
   \   0000D0   6035         JZ      ??MT_UtilGetDeviceInfo_5
    371                {
    372                  uint8 x;
    373                  uint16 *puint16 = assocList;
   \   0000D2   EE           MOV     A,R6
   \   0000D3   F8           MOV     R0,A
   \   0000D4   EF           MOV     A,R7
   \   0000D5   F9           MOV     R1,A
    374          
    375                  for ( x = 0; x < assocCnt; x++, puint16++ )
   \   0000D6   7C00         MOV     R4,#0x0
   \                     ??MT_UtilGetDeviceInfo_6:
   \   0000D8   85..82       MOV     DPL,?XSP + 0
   \   0000DB   85..83       MOV     DPH,?XSP + 1
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   FA           MOV     R2,A
   \   0000E0   EC           MOV     A,R4
   \   0000E1   C3           CLR     C
   \   0000E2   9A           SUBB    A,R2
   \   0000E3   5022         JNC     ??MT_UtilGetDeviceInfo_5
    376                  {
    377                    *pBuf++ = LO_UINT16( *puint16 );
   \   0000E5   8882         MOV     DPL,R0
   \   0000E7   8983         MOV     DPH,R1
   \   0000E9   12....       LCALL   ?Subroutine9 & 0xFFFF
    378                    *pBuf++ = HI_UINT16( *puint16 );
   \                     ??CrossCallReturnLabel_3:
   \   0000EC   8882         MOV     DPL,R0
   \   0000EE   8983         MOV     DPH,R1
   \   0000F0   A3           INC     DPTR
   \   0000F1   12....       LCALL   ?Subroutine9 & 0xFFFF
    379                  }
   \                     ??CrossCallReturnLabel_4:
   \   0000F4   0C           INC     R4
   \   0000F5   E8           MOV     A,R0
   \   0000F6   2402         ADD     A,#0x2
   \   0000F8   F8           MOV     R0,A
   \   0000F9   E9           MOV     A,R1
   \   0000FA   3400         ADDC    A,#0x0
   \   0000FC   F9           MOV     R1,A
   \   0000FD   80D9         SJMP    ??MT_UtilGetDeviceInfo_6
    380                }
    381              }
    382              else
    383              {
    384                *pBuf++ = 0;
   \                     ??MT_UtilGetDeviceInfo_4:
   \   0000FF   85..82       MOV     DPL,?V0 + 6
   \   000102   85..83       MOV     DPH,?V0 + 7
   \   000105   E4           CLR     A
   \   000106   F0           MOVX    @DPTR,A
    385              }
    386          #endif
    387          
    388              MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
    389                                           MT_UTIL_GET_DEVICE_INFO,
    390                                           bufLen, buf );
   \                     ??MT_UtilGetDeviceInfo_5:
   \   000107                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000107   AC..         MOV     R4,?V0 + 0
   \   000109   AD..         MOV     R5,?V0 + 1
   \   00010B   AB..         MOV     R3,?V0 + 2
   \   00010D   7A00         MOV     R2,#0x0
   \   00010F   7967         MOV     R1,#0x67
   \   000111   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    391          
    392              osal_mem_free( buf );
   \   000114                ; Setup parameters for call to function osal_mem_free
   \   000114   AA..         MOV     R2,?V0 + 0
   \   000116   AB..         MOV     R3,?V0 + 1
   \   000118   12....       LCALL   ??osal_mem_free?relay
    393            }
    394          
    395            if ( assocList )
   \                     ??MT_UtilGetDeviceInfo_2:
   \   00011B   EE           MOV     A,R6
   \   00011C   4F           ORL     A,R7
   \   00011D   6007         JZ      ??MT_UtilGetDeviceInfo_7
    396            {
    397              osal_mem_free( assocList );
   \   00011F                ; Setup parameters for call to function osal_mem_free
   \   00011F   EE           MOV     A,R6
   \   000120   FA           MOV     R2,A
   \   000121   EF           MOV     A,R7
   \   000122   FB           MOV     R3,A
   \   000123   12....       LCALL   ??osal_mem_free?relay
    398            }
    399          }
   \                     ??MT_UtilGetDeviceInfo_7:
   \   000126   7401         MOV     A,#0x1
   \   000128   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   8582..       MOV     ?V0 + 6,DPL
   \   000005   8583..       MOV     ?V0 + 7,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000003   A3           INC     DPTR
   \   000004   8582..       MOV     ?V0 + 6,DPL
   \   000007   8583..       MOV     ?V0 + 7,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0 + 6
   \   000004   85..83       MOV     DPH,?V0 + 7
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    400          
    401          #ifdef MT_SRNG
    402          /***************************************************************************************************
    403          * @fn      MT_UtilSrngGen
    404          *
    405          * @brief   Generate Secure Random Numbers
    406          *
    407          * @param   None.
    408          *
    409          * @return  void
    410          ***************************************************************************************************/
    411          void MT_UtilSrngGen(void)
    412          {
    413            static uint32 count = 125000; /* 125000 * 8 bits = 1000000 bits */
    414            uint8 outrng[100];
    415            uint8 status;
    416          
    417            if(count > 0)
    418            {
    419              status = ssp_srng_generate((uint8 *)outrng, 100, NULL);
    420              if (status != SRNG_SUCCESS)
    421              {
    422                if(RNG_INIT_ERROR == status)
    423                {
    424                  ssp_srng_reseed();
    425                }
    426                else
    427                {
    428                  while(1)
    429                  {
    430                    ASM_NOP;
    431                  }
    432                } /* if(RNG_INIT_ERROR == status) */
    433              }/*if (status != SRNG_SUCCESS) */
    434          
    435              if(count >= 100)
    436              {
    437              count-=100;
    438              }
    439              else
    440              {
    441               count = 0;
    442              }
    443              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ |
    444                                           (uint8)MT_RPC_SYS_DBG),
    445                                            MT_DEBUG_MSG,
    446                                            100,
    447                                            outrng);
    448              osal_start_timerEx(MT_TaskID, MT_SRNG_EVENT, 100);
    449            }
    450          }
    451          #endif
    452          
    453          /***************************************************************************************************
    454           * @fn      MT_UtilGetNvInfo
    455           *
    456           * @brief   The Get NV Info serial message.
    457           *
    458           * @param   None.
    459           *
    460           * @return  void
    461           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    462          void MT_UtilGetNvInfo(void)
   \                     MT_UtilGetNvInfo:
    463          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    464            uint8 len;
    465            uint8 stat;
    466            uint8 *buf;
    467            uint8 *pBuf;
    468            uint16 tmp16;
    469            uint32 tmp32;
    470          
    471            /*
    472              Get required length of buffer
    473              Status + ExtAddr + ChanList + PanID  + SecLevel + PreCfgKey
    474            */
    475            len = 1 + Z_EXTADDR_LEN + 4 + 2 + 1 + SEC_KEY_LEN;
    476          
    477            buf = osal_mem_alloc( len );
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A20         MOV     R2,#0x20
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   12....       LCALL   ??osal_mem_alloc?relay
   \   000011   8A..         MOV     ?V0 + 0,R2
   \   000013   8B..         MOV     ?V0 + 1,R3
   \   000015   AE..         MOV     R6,?V0 + 0
   \   000017   AF..         MOV     R7,?V0 + 1
    478            if ( buf )
   \   000019   EE           MOV     A,R6
   \   00001A   4F           ORL     A,R7
   \   00001B   7003         JNZ     $+5
   \   00001D   02....       LJMP    ??MT_UtilGetNvInfo_0 & 0xFFFF
    479            {
    480              /* Assume NV not available */
    481              osal_memset( buf, 0xFF, len );
   \   000020                ; Setup parameters for call to function osal_memset
   \   000020   7C20         MOV     R4,#0x20
   \   000022   7D00         MOV     R5,#0x0
   \   000024   79FF         MOV     R1,#-0x1
   \   000026   12....       LCALL   ??osal_memset?relay
    482          
    483              /* Skip over status */
    484              pBuf = buf + 1;
   \   000029   8E82         MOV     DPL,R6
   \   00002B   8F83         MOV     DPH,R7
   \   00002D   A3           INC     DPTR
   \   00002E   8582..       MOV     ?V0 + 2,DPL
   \   000031   8583..       MOV     ?V0 + 3,DPH
    485          
    486              /* Start with 64-bit extended address */
    487              stat = osal_nv_read( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf );
   \   000034                ; Setup parameters for call to function osal_nv_read
   \   000034   78..         MOV     R0,#?V0 + 2
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   75..08       MOV     ?V0 + 0,#0x8
   \   00003C   75..00       MOV     ?V0 + 1,#0x0
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   7C00         MOV     R4,#0x0
   \   000046   7D00         MOV     R5,#0x0
   \   000048   7A01         MOV     R2,#0x1
   \   00004A   7B00         MOV     R3,#0x0
   \   00004C   12....       LCALL   ??osal_nv_read?relay
   \   00004F   7404         MOV     A,#0x4
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   \   000054   E9           MOV     A,R1
   \   000055   F5..         MOV     ?V0 + 0,A
    488              if ( stat ) stat = 0x01;
   \   000057   6003         JZ      ??MT_UtilGetNvInfo_1
   \   000059   75..01       MOV     ?V0 + 0,#0x1
    489              pBuf += Z_EXTADDR_LEN;
   \                     ??MT_UtilGetNvInfo_1:
   \   00005C   E5..         MOV     A,?V0 + 2
   \   00005E   2408         ADD     A,#0x8
   \   000060   F5..         MOV     ?V0 + 2,A
   \   000062   E5..         MOV     A,?V0 + 3
   \   000064   3400         ADDC    A,#0x0
   \   000066   F5..         MOV     ?V0 + 3,A
    490          
    491              /* Scan channel list (bit mask) */
    492              if (  osal_nv_read( ZCD_NV_CHANLIST, 0, sizeof( tmp32 ), &tmp32 ) )
   \   000068                ; Setup parameters for call to function osal_nv_read
   \   000068   7402         MOV     A,#0x2
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   8582..       MOV     ?V0 + 4,DPL
   \   000070   8583..       MOV     ?V0 + 5,DPH
   \   000073   78..         MOV     R0,#?V0 + 4
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000078   75..04       MOV     ?V0 + 4,#0x4
   \   00007B   75..00       MOV     ?V0 + 5,#0x0
   \   00007E   78..         MOV     R0,#?V0 + 4
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   7C00         MOV     R4,#0x0
   \   000085   7D00         MOV     R5,#0x0
   \   000087   7A84         MOV     R2,#-0x7c
   \   000089   7B00         MOV     R3,#0x0
   \   00008B   12....       LCALL   ??osal_nv_read?relay
   \   00008E   7404         MOV     A,#0x4
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
   \   000093   E9           MOV     A,R1
   \   000094   6008         JZ      ??MT_UtilGetNvInfo_2
    493                stat |= 0x02;
   \   000096   E5..         MOV     A,?V0 + 0
   \   000098   D2E1         SETB    0xE0 /* A   */.1
   \   00009A   F5..         MOV     ?V0 + 0,A
   \   00009C   8060         SJMP    ??MT_UtilGetNvInfo_3
    494              else
    495              {
    496                pBuf[0] = BREAK_UINT32( tmp32, 3 );
   \                     ??MT_UtilGetNvInfo_2:
   \   00009E   7402         MOV     A,#0x2
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   78..         MOV     R0,#?V0 + 4
   \   0000A5   12....       LCALL   ?L_MOV_X
   \   0000A8   7418         MOV     A,#0x18
   \   0000AA   78..         MOV     R0,#?V0 + 4
   \   0000AC   12....       LCALL   ?UL_SHR
   \   0000AF   85..82       MOV     DPL,?V0 + 2
   \   0000B2   85..83       MOV     DPH,?V0 + 3
   \   0000B5   E5..         MOV     A,?V0 + 4
   \   0000B7   F0           MOVX    @DPTR,A
    497                pBuf[1] = BREAK_UINT32( tmp32, 2 );
   \   0000B8   7402         MOV     A,#0x2
   \   0000BA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BD   78..         MOV     R0,#?V0 + 4
   \   0000BF   12....       LCALL   ?L_MOV_X
   \   0000C2   7410         MOV     A,#0x10
   \   0000C4   78..         MOV     R0,#?V0 + 4
   \   0000C6   12....       LCALL   ?UL_SHR
   \   0000C9   85..82       MOV     DPL,?V0 + 2
   \   0000CC   85..83       MOV     DPH,?V0 + 3
   \   0000CF   A3           INC     DPTR
   \   0000D0   E5..         MOV     A,?V0 + 4
   \   0000D2   F0           MOVX    @DPTR,A
    498                pBuf[2] = BREAK_UINT32( tmp32, 1 );
   \   0000D3   7402         MOV     A,#0x2
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   78..         MOV     R0,#?V0 + 4
   \   0000DA   12....       LCALL   ?L_MOV_X
   \   0000DD   E5..         MOV     A,?V0 + 5
   \   0000DF   85..82       MOV     DPL,?V0 + 2
   \   0000E2   85..83       MOV     DPH,?V0 + 3
   \   0000E5   A3           INC     DPTR
   \   0000E6   A3           INC     DPTR
   \   0000E7   F0           MOVX    @DPTR,A
    499                pBuf[3] = BREAK_UINT32( tmp32, 0 );
   \   0000E8   7402         MOV     A,#0x2
   \   0000EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000ED   78..         MOV     R0,#?V0 + 4
   \   0000EF   12....       LCALL   ?L_MOV_X
   \   0000F2   85..82       MOV     DPL,?V0 + 2
   \   0000F5   85..83       MOV     DPH,?V0 + 3
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   A3           INC     DPTR
   \   0000FB   E5..         MOV     A,?V0 + 4
   \   0000FD   F0           MOVX    @DPTR,A
    500              }
    501              pBuf += sizeof( tmp32 );
   \                     ??MT_UtilGetNvInfo_3:
   \   0000FE   E5..         MOV     A,?V0 + 2
   \   000100   2404         ADD     A,#0x4
   \   000102   F5..         MOV     ?V0 + 2,A
   \   000104   E5..         MOV     A,?V0 + 3
   \   000106   3400         ADDC    A,#0x0
   \   000108   F5..         MOV     ?V0 + 3,A
    502          
    503              /* ZigBee PanID */
    504              if ( osal_nv_read( ZCD_NV_PANID, 0, sizeof( tmp16 ), &tmp16 ) )
   \   00010A                ; Setup parameters for call to function osal_nv_read
   \   00010A   85..82       MOV     DPL,?XSP + 0
   \   00010D   85..83       MOV     DPH,?XSP + 1
   \   000110   8582..       MOV     ?V0 + 4,DPL
   \   000113   8583..       MOV     ?V0 + 5,DPH
   \   000116   78..         MOV     R0,#?V0 + 4
   \   000118   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011B   75..02       MOV     ?V0 + 4,#0x2
   \   00011E   75..00       MOV     ?V0 + 5,#0x0
   \   000121   78..         MOV     R0,#?V0 + 4
   \   000123   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000126   7C00         MOV     R4,#0x0
   \   000128   7D00         MOV     R5,#0x0
   \   00012A   7A83         MOV     R2,#-0x7d
   \   00012C   7B00         MOV     R3,#0x0
   \   00012E   12....       LCALL   ??osal_nv_read?relay
   \   000131   7404         MOV     A,#0x4
   \   000133   12....       LCALL   ?DEALLOC_XSTACK8
   \   000136   E9           MOV     A,R1
   \   000137   6008         JZ      ??MT_UtilGetNvInfo_4
    505                stat |= 0x04;
   \   000139   E5..         MOV     A,?V0 + 0
   \   00013B   D2E2         SETB    0xE0 /* A   */.2
   \   00013D   F5..         MOV     ?V0 + 0,A
   \   00013F   801E         SJMP    ??MT_UtilGetNvInfo_5
    506              else
    507              {
    508                pBuf[0] = LO_UINT16( tmp16 );
   \                     ??MT_UtilGetNvInfo_4:
   \   000141   85..82       MOV     DPL,?XSP + 0
   \   000144   85..83       MOV     DPH,?XSP + 1
   \   000147   E0           MOVX    A,@DPTR
   \   000148   85..82       MOV     DPL,?V0 + 2
   \   00014B   85..83       MOV     DPH,?V0 + 3
   \   00014E   F0           MOVX    @DPTR,A
    509                pBuf[1] = HI_UINT16( tmp16 );
   \   00014F   85..82       MOV     DPL,?XSP + 0
   \   000152   85..83       MOV     DPH,?XSP + 1
   \   000155   A3           INC     DPTR
   \   000156   E0           MOVX    A,@DPTR
   \   000157   85..82       MOV     DPL,?V0 + 2
   \   00015A   85..83       MOV     DPH,?V0 + 3
   \   00015D   A3           INC     DPTR
   \   00015E   F0           MOVX    @DPTR,A
    510              }
    511              pBuf += sizeof( tmp16 );
   \                     ??MT_UtilGetNvInfo_5:
   \   00015F   E5..         MOV     A,?V0 + 2
   \   000161   2402         ADD     A,#0x2
   \   000163   F5..         MOV     ?V0 + 2,A
   \   000165   E5..         MOV     A,?V0 + 3
   \   000167   3400         ADDC    A,#0x0
   \   000169   F5..         MOV     ?V0 + 3,A
    512          
    513              /* Security level */
    514              if ( osal_nv_read( ZCD_NV_SECURITY_LEVEL, 0, sizeof( uint8 ), pBuf++ ) )
   \   00016B                ; Setup parameters for call to function osal_nv_read
   \   00016B   78..         MOV     R0,#?V0 + 2
   \   00016D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000170   75..01       MOV     ?V0 + 4,#0x1
   \   000173   78..         MOV     R0,#?V0 + 4
   \   000175   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000178   7C00         MOV     R4,#0x0
   \   00017A   7D00         MOV     R5,#0x0
   \   00017C   7A61         MOV     R2,#0x61
   \   00017E   7B00         MOV     R3,#0x0
   \   000180   12....       LCALL   ??osal_nv_read?relay
   \   000183   7404         MOV     A,#0x4
   \   000185   12....       LCALL   ?DEALLOC_XSTACK8
   \   000188   E9           MOV     A,R1
   \   000189   85..82       MOV     DPL,?V0 + 2
   \   00018C   85..83       MOV     DPH,?V0 + 3
   \   00018F   A3           INC     DPTR
   \   000190   8582..       MOV     ?V0 + 2,DPL
   \   000193   8583..       MOV     ?V0 + 3,DPH
   \   000196   6006         JZ      ??MT_UtilGetNvInfo_6
    515                stat |= 0x08;
   \   000198   E5..         MOV     A,?V0 + 0
   \   00019A   D2E3         SETB    0xE0 /* A   */.3
   \   00019C   F5..         MOV     ?V0 + 0,A
    516          
    517              /* Pre-configured security key */
    518              if ( osal_nv_read( ZCD_NV_PRECFGKEY, 0, SEC_KEY_LEN, pBuf ) )
   \                     ??MT_UtilGetNvInfo_6:
   \   00019E                ; Setup parameters for call to function osal_nv_read
   \   00019E   78..         MOV     R0,#?V0 + 2
   \   0001A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A3   75..10       MOV     ?V0 + 2,#0x10
   \   0001A6   75..00       MOV     ?V0 + 3,#0x0
   \   0001A9   78..         MOV     R0,#?V0 + 2
   \   0001AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AE   7C00         MOV     R4,#0x0
   \   0001B0   7D00         MOV     R5,#0x0
   \   0001B2   7A62         MOV     R2,#0x62
   \   0001B4   7B00         MOV     R3,#0x0
   \   0001B6   12....       LCALL   ??osal_nv_read?relay
   \   0001B9   7404         MOV     A,#0x4
   \   0001BB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001BE   E9           MOV     A,R1
   \   0001BF   6006         JZ      ??MT_UtilGetNvInfo_7
    519                stat |= 0x10;
   \   0001C1   E5..         MOV     A,?V0 + 0
   \   0001C3   D2E4         SETB    0xE0 /* A   */.4
   \   0001C5   F5..         MOV     ?V0 + 0,A
    520          
    521              /* Status bit mask - bit=1 indicates failure */
    522              *buf = stat;
   \                     ??MT_UtilGetNvInfo_7:
   \   0001C7   8E82         MOV     DPL,R6
   \   0001C9   8F83         MOV     DPH,R7
   \   0001CB   E5..         MOV     A,?V0 + 0
   \   0001CD   F0           MOVX    @DPTR,A
    523          
    524              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_GET_NV_INFO,
    525                                            len, buf );
   \   0001CE                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0001CE   EE           MOV     A,R6
   \   0001CF   FC           MOV     R4,A
   \   0001D0   EF           MOV     A,R7
   \   0001D1   FD           MOV     R5,A
   \   0001D2   7B20         MOV     R3,#0x20
   \   0001D4   7A01         MOV     R2,#0x1
   \   0001D6   7967         MOV     R1,#0x67
   \   0001D8   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    526          
    527              osal_mem_free( buf );
   \   0001DB                ; Setup parameters for call to function osal_mem_free
   \   0001DB   EE           MOV     A,R6
   \   0001DC   FA           MOV     R2,A
   \   0001DD   EF           MOV     A,R7
   \   0001DE   FB           MOV     R3,A
   \   0001DF   12....       LCALL   ??osal_mem_free?relay
    528            }
    529          }
   \                     ??MT_UtilGetNvInfo_0:
   \   0001E2   7406         MOV     A,#0x6
   \   0001E4   02....       LJMP    ?Subroutine1 & 0xFFFF
    530          
    531          /***************************************************************************************************
    532           * @fn      MT_UtilSetPanID
    533           *
    534           * @brief   Set PanID message
    535           *
    536           * @param   pBuf - pointer to the data
    537           *
    538           * @return  void
    539           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    540          void MT_UtilSetPanID(uint8 *pBuf)
   \                     MT_UtilSetPanID:
    541          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    542            uint16 temp16;
    543            uint8 retValue = ZFailure;
   \   00000A   12....       LCALL   ?Subroutine10 & 0xFFFF
    544            uint8 cmdId;
    545          
    546            /* parse header */
    547            cmdId = pBuf[MT_RPC_POS_CMD1];
    548            pBuf += MT_RPC_FRAME_HDR_SZ;
    549          
    550            temp16 = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_5:
   \   00000D   FC           MOV     R4,A
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F9           MOV     R1,A
   \   000011   EC           MOV     A,R4
   \   000012   F8           MOV     R0,A
   \   000013   7401         MOV     A,#0x1
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   E8           MOV     A,R0
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   E9           MOV     A,R1
   \   00001C   F0           MOVX    @DPTR,A
    551            pBuf += sizeof(uint16);
    552          
    553            retValue = osal_nv_write(ZCD_NV_PANID, 0, osal_nv_item_len( ZCD_NV_PANID ), &temp16);
   \   00001D                ; Setup parameters for call to function osal_nv_write
   \   00001D   7401         MOV     A,#0x1
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   8582..       MOV     ?V0 + 0,DPL
   \   000025   8583..       MOV     ?V0 + 1,DPH
   \   000028   78..         MOV     R0,#?V0 + 0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D                ; Setup parameters for call to function osal_nv_item_len
   \   00002D   7A83         MOV     R2,#-0x7d
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   12....       LCALL   ??osal_nv_item_len?relay
   \   000034   8A..         MOV     ?V0 + 0,R2
   \   000036   8B..         MOV     ?V0 + 1,R3
   \   000038   78..         MOV     R0,#?V0 + 0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   7C00         MOV     R4,#0x0
   \   00003F   7D00         MOV     R5,#0x0
   \   000041   7A83         MOV     R2,#-0x7d
   \   000043   7B00         MOV     R3,#0x0
   \   000045   12....       LCALL   ??osal_nv_write?relay
   \   000048   7404         MOV     A,#0x4
   \   00004A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004D   12....       LCALL   ?Subroutine21 & 0xFFFF
    554          
    555            /* Build and send back the response */
    556            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue);
   \                     ??CrossCallReturnLabel_27:
   \   000050   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    557          }
   \   000053   7403         MOV     A,#0x3
   \   000055   02....       LJMP    ??Subroutine36_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000008   AC82         MOV     R4,DPL
   \   00000A   AD83         MOV     R5,DPH
   \   00000C   7B01         MOV     R3,#0x1
   \   00000E   EE           MOV     A,R6
   \   00000F   FA           MOV     R2,A
   \   000010   7967         MOV     R1,#0x67
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000003   FA           MOV     R2,A
   \   000004   EB           MOV     A,R3
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   7401         MOV     A,#0x1
   \   000008   F0           MOVX    @DPTR,A
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FE           MOV     R6,A
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011                ; Setup parameters for call to function osal_nv_write
   \   000011   EA           MOV     A,R2
   \   000012   2403         ADD     A,#0x3
   \   000014   22           RET
    558          
    559          /***************************************************************************************************
    560           * @fn      MT_UtilSetChannels
    561           *
    562           * @brief   Set Channels
    563           *
    564           * @param   pBuf - pointer to the data
    565           *
    566           * @return  void
    567           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    568          void MT_UtilSetChannels(uint8 *pBuf)
   \                     MT_UtilSetChannels:
    569          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    570            uint32 tmp32;
    571            uint8 retValue = ZFailure;
   \   00000A   12....       LCALL   ?Subroutine10 & 0xFFFF
    572            uint8 cmdId;
    573          
    574            /* parse header */
    575            cmdId = pBuf[MT_RPC_POS_CMD1];
    576            pBuf += MT_RPC_FRAME_HDR_SZ;
    577          
    578            tmp32 = BUILD_UINT32(pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
   \                     ??CrossCallReturnLabel_6:
   \   00000D   F5..         MOV     ?V0 + 0,A
   \   00000F   E4           CLR     A
   \   000010   F5..         MOV     ?V0 + 1,A
   \   000012   F5..         MOV     ?V0 + 2,A
   \   000014   F5..         MOV     ?V0 + 3,A
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 4,A
   \   00001A   E4           CLR     A
   \   00001B   F5..         MOV     ?V0 + 5,A
   \   00001D   F5..         MOV     ?V0 + 6,A
   \   00001F   F5..         MOV     ?V0 + 7,A
   \   000021   7408         MOV     A,#0x8
   \   000023   78..         MOV     R0,#?V0 + 4
   \   000025   12....       LCALL   ?L_SHL
   \   000028   78..         MOV     R0,#?V0 + 0
   \   00002A   79..         MOV     R1,#?V0 + 4
   \   00002C   12....       LCALL   ?L_ADD
   \   00002F   8A82         MOV     DPL,R2
   \   000031   8B83         MOV     DPH,R3
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   F5..         MOV     ?V0 + 4,A
   \   000038   E4           CLR     A
   \   000039   F5..         MOV     ?V0 + 5,A
   \   00003B   7410         MOV     A,#0x10
   \   00003D   78..         MOV     R0,#?V0 + 4
   \   00003F   12....       LCALL   ?L_SHL
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   79..         MOV     R1,#?V0 + 4
   \   000046   12....       LCALL   ?L_ADD
   \   000049   8A82         MOV     DPL,R2
   \   00004B   8B83         MOV     DPH,R3
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F5..         MOV     ?V0 + 4,A
   \   000053   E4           CLR     A
   \   000054   F5..         MOV     ?V0 + 6,A
   \   000056   7418         MOV     A,#0x18
   \   000058   78..         MOV     R0,#?V0 + 4
   \   00005A   12....       LCALL   ?L_SHL
   \   00005D   78..         MOV     R0,#?V0 + 0
   \   00005F   79..         MOV     R1,#?V0 + 4
   \   000061   12....       LCALL   ?L_ADD
   \   000064   7401         MOV     A,#0x1
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   78..         MOV     R0,#?V0 + 0
   \   00006B   12....       LCALL   ?L_MOV_TO_X
    579          
    580            retValue = osal_nv_write(ZCD_NV_CHANLIST, 0, osal_nv_item_len( ZCD_NV_CHANLIST ), &tmp32);
   \   00006E                ; Setup parameters for call to function osal_nv_write
   \   00006E   7401         MOV     A,#0x1
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   8582..       MOV     ?V0 + 0,DPL
   \   000076   8583..       MOV     ?V0 + 1,DPH
   \   000079   78..         MOV     R0,#?V0 + 0
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007E                ; Setup parameters for call to function osal_nv_item_len
   \   00007E   7A84         MOV     R2,#-0x7c
   \   000080   7B00         MOV     R3,#0x0
   \   000082   12....       LCALL   ??osal_nv_item_len?relay
   \   000085   8A..         MOV     ?V0 + 0,R2
   \   000087   8B..         MOV     ?V0 + 1,R3
   \   000089   78..         MOV     R0,#?V0 + 0
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008E   7C00         MOV     R4,#0x0
   \   000090   7D00         MOV     R5,#0x0
   \   000092   7A84         MOV     R2,#-0x7c
   \   000094   7B00         MOV     R3,#0x0
   \   000096   12....       LCALL   ??osal_nv_write?relay
   \   000099   7404         MOV     A,#0x4
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009E   12....       LCALL   ?Subroutine21 & 0xFFFF
    581          
    582            /* Build and send back the response */
    583            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue);
   \                     ??CrossCallReturnLabel_28:
   \   0000A1   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    584          }
   \   0000A4   7405         MOV     A,#0x5
   \   0000A6                REQUIRE ?Subroutine1
   \   0000A6                ; // Fall through to label ?Subroutine1
    585          
    586          /***************************************************************************************************
    587           * @fn      MT_UtilSetSecLevel
    588           *
    589           * @brief   Set Sec Level
    590           *
    591           * @param   byte *msg - pointer to the data
    592           *
    593           * @return  void
    594           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    595          void MT_UtilSetSecLevel(uint8 *pBuf)
   \                     MT_UtilSetSecLevel:
    596          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    597            uint8 retValue = ZFailure;
   \   00000A   12....       LCALL   ?Subroutine14 & 0xFFFF
    598            uint8 cmdId;
    599          
    600            /* parse header */
    601            cmdId = pBuf[MT_RPC_POS_CMD1];
    602            pBuf += MT_RPC_FRAME_HDR_SZ;
    603          
    604            retValue = osal_nv_write( ZCD_NV_SECURITY_LEVEL, 0, osal_nv_item_len( ZCD_NV_SECURITY_LEVEL ), pBuf);
   \                     ??CrossCallReturnLabel_15:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010                ; Setup parameters for call to function osal_nv_item_len
   \   000010   7A61         MOV     R2,#0x61
   \   000012   7B00         MOV     R3,#0x0
   \   000014   12....       LCALL   ??osal_nv_item_len?relay
   \   000017   8A..         MOV     ?V0 + 0,R2
   \   000019   8B..         MOV     ?V0 + 1,R3
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   7C00         MOV     R4,#0x0
   \   000022   7D00         MOV     R5,#0x0
   \   000024   7A61         MOV     R2,#0x61
   \   000026                REQUIRE ?Subroutine2
   \   000026                ; // Fall through to label ?Subroutine2
    605          
    606            /* Build and send back the response */
    607            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
    608          
    609          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??osal_nv_write?relay
   \   000005   7404         MOV     A,#0x4
   \   000007   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00000D   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   \   000010   7401         MOV     A,#0x1
   \   000012                REQUIRE ??Subroutine36_0
   \   000012                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000003   F5..         MOV     ?V0 + 0,A
   \   000005   EB           MOV     A,R3
   \   000006   3400         ADDC    A,#0x0
   \   000008   F5..         MOV     ?V0 + 1,A
   \   00000A   78..         MOV     R0,#?V0 + 0
   \   00000C   22           RET
    610          
    611          /***************************************************************************************************
    612           * @fn      MT_UtilSetPreCfgKey
    613           *
    614           * @brief   Set Pre Cfg Key
    615           *
    616           * @param   pBuf - pointer to the data
    617           *
    618           * @return  void
    619           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    620          void MT_UtilSetPreCfgKey(uint8 *pBuf)
   \                     MT_UtilSetPreCfgKey:
    621          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    622            uint8 retValue = ZFailure;
   \   00000A   12....       LCALL   ?Subroutine14 & 0xFFFF
    623            uint8 cmdId;
    624          
    625            /* parse header */
    626            cmdId = pBuf[MT_RPC_POS_CMD1];
    627            pBuf += MT_RPC_FRAME_HDR_SZ;
    628          
    629            retValue = osal_nv_write( ZCD_NV_PRECFGKEY, 0, osal_nv_item_len( ZCD_NV_PRECFGKEY ), pBuf);
   \                     ??CrossCallReturnLabel_16:
   \   00000D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000010                ; Setup parameters for call to function osal_nv_item_len
   \   000010   7A62         MOV     R2,#0x62
   \   000012   7B00         MOV     R3,#0x0
   \   000014   12....       LCALL   ??osal_nv_item_len?relay
   \   000017   8A..         MOV     ?V0 + 0,R2
   \   000019   8B..         MOV     ?V0 + 1,R3
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   7C00         MOV     R4,#0x0
   \   000022   7D00         MOV     R5,#0x0
   \   000024   7A62         MOV     R2,#0x62
   \   000026   80..         SJMP    ?Subroutine2
    630          
    631            /* Build and send back the response */
    632            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
    633          
    634          }
    635          
    636          /***************************************************************************************************
    637           * @fn      MT_UtilCallbackSub
    638           *
    639           * @brief   The Callback subscribe.
    640           *
    641           * @param   pBuf - pointer to the data
    642           *
    643           * @return  void
    644           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    645          void MT_UtilCallbackSub(uint8 *pBuf)
   \                     MT_UtilCallbackSub:
    646          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   F8           MOV     R0,A
   \   00000C   EB           MOV     A,R3
   \   00000D   F9           MOV     R1,A
    647            uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8882         MOV     DPL,R0
   \   000010   8983         MOV     DPH,R1
   \   000012   12....       LCALL   ?Subroutine18 & 0xFFFF
    648            uint8 retValue = ZFailure;
    649          
    650          #if defined(MT_MAC_CB_FUNC) || defined(MT_NWK_CB_FUNC) || defined(MT_ZDO_CB_FUNC) || defined(MT_AF_CB_FUNC) || defined(MT_SAPI_CB_FUNC)
    651            uint8 subSystem;
    652            uint16 subscribed_command;
    653          
    654            // Move past header
    655            retValue = ZSuccess;
   \                     ??CrossCallReturnLabel_23:
   \   000015   E4           CLR     A
   \   000016   F0           MOVX    @DPTR,A
    656            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   E8           MOV     A,R0
   \   000018   2403         ADD     A,#0x3
   \   00001A   F8           MOV     R0,A
   \   00001B   E9           MOV     A,R1
   \   00001C   12....       LCALL   ??Subroutine40_0 & 0xFFFF
    657          
    658            /* Command */
    659            subscribed_command = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_51:
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   FE           MOV     R6,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FD           MOV     R5,A
   \   000024   EE           MOV     A,R6
   \   000025   2400         ADD     A,#0x0
   \   000027   FC           MOV     R4,A
   \   000028   E4           CLR     A
   \   000029   3D           ADDC    A,R5
    660            pBuf += 2;
    661          
    662            /* Subsystem - 5 bits on the MSB of the command */
    663            subSystem = HI_UINT16(subscribed_command) & 0x1F ;
   \   00002A   541F         ANL     A,#0x1f
   \   00002C   FB           MOV     R3,A
    664          
    665            /* What is the action - SUBSCRIBE or !SUBSCRIBE */
    666            if (*pBuf)
   \   00002D   8882         MOV     DPL,R0
   \   00002F   8983         MOV     DPH,R1
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   E0           MOVX    A,@DPTR
   \   000034   6016         JZ      ??MT_UtilCallbackSub_0
    667            {
    668              /* Turn ON */
    669            #if defined( MT_MAC_CB_FUNC )
    670              if ((subSystem == MT_RPC_SYS_MAC) || (subscribed_command == 0xFFFF))
    671                _macCallbackSub = 0xFFFF;
    672            #endif
    673          
    674            #if defined( MT_NWK_CB_FUNC )
    675              if ((subSystem == MT_RPC_SYS_NWK) || (subscribed_command == 0xFFFF))
    676                _nwkCallbackSub = 0xFFFF;
    677            #endif
    678          
    679            #if defined( MT_ZDO_CB_FUNC )
    680              if ((subSystem == MT_RPC_SYS_ZDO) || (subscribed_command == 0xFFFF))
   \   000036   7405         MOV     A,#0x5
   \   000038   6B           XRL     A,R3
   \   000039   600A         JZ      ??MT_UtilCallbackSub_1
   \   00003B   74FF         MOV     A,#-0x1
   \   00003D   6C           XRL     A,R4
   \   00003E   7003         JNZ     ??MT_UtilCallbackSub_2
   \   000040   74FF         MOV     A,#-0x1
   \   000042   6D           XRL     A,R5
   \                     ??MT_UtilCallbackSub_2:
   \   000043   7021         JNZ     ??MT_UtilCallbackSub_3
    681                _zdoCallbackSub = 0xFFFFFFFF;
   \                     ??MT_UtilCallbackSub_1:
   \   000045   90....       MOV     DPTR,#_zdoCallbackSub
   \   000048   74FF         MOV     A,#-0x1
   \   00004A   8013         SJMP    ??MT_UtilCallbackSub_4
    682            #endif
    683          
    684            #if defined( MT_AF_CB_FUNC )
    685              if ((subSystem == MT_RPC_SYS_AF) || (subscribed_command == 0xFFFF))
    686                _afCallbackSub = 0xFFFF;
    687            #endif
    688          
    689            #if defined( MT_SAPI_CB_FUNC )
    690              if ((subSystem == MT_RPC_SYS_SAPI) || (subscribed_command == 0xFFFF))
    691                _sapiCallbackSub = 0xFFFF;
    692            #endif
    693            }
    694            else
    695            {
    696              /* Turn OFF */
    697            #if defined( MT_MAC_CB_FUNC )
    698              if ((subSystem == MT_RPC_SYS_MAC) || (subscribed_command == 0xFFFF))
    699                _macCallbackSub = 0x0000;
    700            #endif
    701          
    702            #if defined( MT_NWK_CB_FUNC )
    703              if ((subSystem == MT_RPC_SYS_NWK) || (subscribed_command == 0xFFFF))
    704                _nwkCallbackSub = 0x0000;
    705            #endif
    706          
    707            #if defined( MT_ZDO_CB_FUNC )
    708              if ((subSystem == MT_RPC_SYS_ZDO) || (subscribed_command == 0xFFFF))
   \                     ??MT_UtilCallbackSub_0:
   \   00004C   7405         MOV     A,#0x5
   \   00004E   6B           XRL     A,R3
   \   00004F   600A         JZ      ??MT_UtilCallbackSub_5
   \   000051   74FF         MOV     A,#-0x1
   \   000053   6C           XRL     A,R4
   \   000054   7003         JNZ     ??MT_UtilCallbackSub_6
   \   000056   74FF         MOV     A,#-0x1
   \   000058   6D           XRL     A,R5
   \                     ??MT_UtilCallbackSub_6:
   \   000059   700B         JNZ     ??MT_UtilCallbackSub_3
    709                _zdoCallbackSub = 0x00000000;
   \                     ??MT_UtilCallbackSub_5:
   \   00005B   90....       MOV     DPTR,#_zdoCallbackSub
   \   00005E   E4           CLR     A
   \                     ??MT_UtilCallbackSub_4:
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   A3           INC     DPTR
   \   000061   F0           MOVX    @DPTR,A
   \   000062   A3           INC     DPTR
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   F0           MOVX    @DPTR,A
    710            #endif
    711          
    712            #if defined( MT_AF_CB_FUNC )
    713              if ((subSystem == MT_RPC_SYS_AF) || (subscribed_command == 0xFFFF))
    714                _afCallbackSub = 0x0000;
    715            #endif
    716          
    717            #if defined( MT_SAPI_CB_FUNC )
    718              if ((subSystem == MT_RPC_SYS_SAPI) || (subscribed_command == 0xFFFF))
    719                  _sapiCallbackSub = 0x0000;
    720            #endif
    721            }
    722          #endif  // MT_MAC_CB_FUNC || MT_NWK_CB_FUNC || MT_ZDO_CB_FUNC || MT_AF_CB_FUNC || MT_SAPI_CB_FUNC || MT_SAPI_CB_FUNC
    723          
    724            /* Build and send back the response */
    725            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
   \                     ??MT_UtilCallbackSub_3:
   \   000066                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000066   85..82       MOV     DPL,?XSP + 0
   \   000069   85..83       MOV     DPH,?XSP + 1
   \   00006C   AC82         MOV     R4,DPL
   \   00006E   AD83         MOV     R5,DPH
   \   000070   7B01         MOV     R3,#0x1
   \   000072   02....       LJMP    ?Subroutine3 & 0xFFFF
    726          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   FA           MOV     R2,A
   \   000004   85..82       MOV     DPL,?XSP + 0
   \   000007   85..83       MOV     DPH,?XSP + 1
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7967         MOV     R1,#0x67
   \   000002   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   \   000005   7401         MOV     A,#0x1
   \   000007                REQUIRE ??Subroutine39_0
   \   000007                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F01         MOV     R7,#0x1
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   22           RET
    727          
    728          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
    729          /***************************************************************************************************
    730           * @fn      MT_UtilKeyEvent
    731           *
    732           * @brief   Process Key Event
    733           *
    734           * @param   pBuf - pointer to the data
    735           *
    736           * @return  void
    737           ***************************************************************************************************/
    738          void MT_UtilKeyEvent(uint8 *pBuf)
    739          {
    740            uint8 x = 0;
    741            uint8 retValue = ZFailure;
    742            uint8 cmdId;
    743          
    744            /* parse header */
    745            cmdId = pBuf[MT_RPC_POS_CMD1];
    746            pBuf += MT_RPC_FRAME_HDR_SZ;
    747          
    748            /* Translate between SPI values to device values */
    749            if ( *pBuf & 0x01 )
    750              x |= HAL_KEY_SW_1;
    751            if ( *pBuf & 0x02 )
    752              x |= HAL_KEY_SW_2;
    753            if ( *pBuf & 0x04 )
    754              x |= HAL_KEY_SW_3;
    755            if ( *pBuf & 0x08 )
    756            x |= HAL_KEY_SW_4;
    757          #if defined ( HAL_KEY_SW_5 )
    758            if ( *pBuf & 0x10 )
    759              x |= HAL_KEY_SW_5;
    760          #endif
    761          #if defined ( HAL_KEY_SW_6 )
    762            if ( *pBuf & 0x20 )
    763              x |= HAL_KEY_SW_6;
    764          #endif
    765          #if defined ( HAL_KEY_SW_7 )
    766            if ( *pBuf & 0x40 )
    767              x |= HAL_KEY_SW_7;
    768          #endif
    769          #if defined ( HAL_KEY_SW_8 )
    770            if ( *pBuf & 0x80 )
    771              x |= HAL_KEY_SW_8;
    772          #endif
    773            pBuf++;
    774          
    775            retValue = OnBoard_SendKeys(x, *pBuf);
    776          
    777            /* Build and send back the response */
    778            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
    779          }
    780          #endif
    781          
    782          /***************************************************************************************************
    783           * @fn      MT_UtilTimeAlive
    784           *
    785           * @brief   Process Time Alive
    786           *
    787           * @param   None.
    788           *
    789           * @return  None
    790           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    791          void MT_UtilTimeAlive(void)
   \                     MT_UtilTimeAlive:
    792          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    793            uint8 timeAlive[4];
    794            uint32 tmp32;
    795          
    796            /* Time since last reset (seconds) */
    797            tmp32 = osal_GetSystemClock() / 1000;
   \   00000A                ; Setup parameters for call to function osal_GetSystemClock
   \   00000A   12....       LCALL   ??osal_GetSystemClock?relay
   \   00000D   8A..         MOV     ?V0 + 4,R2
   \   00000F   8B..         MOV     ?V0 + 5,R3
   \   000011   8C..         MOV     ?V0 + 6,R4
   \   000013   8D..         MOV     ?V0 + 7,R5
   \   000015   90....       MOV     DPTR,#__Constant_3e8
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?L_MOV_X
   \   00001D   78..         MOV     R0,#?V0 + 4
   \   00001F   79..         MOV     R1,#?V0 + 0
   \   000021   12....       LCALL   ?UL_DIV_MOD
    798          
    799            /* Convert to high byte first into temp buffer */
    800            timeAlive[0] = BREAK_UINT32(tmp32, 0);
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   E5..         MOV     A,?V0 + 4
   \   00002C   F0           MOVX    @DPTR,A
    801            timeAlive[1] = BREAK_UINT32(tmp32, 1);
   \   00002D   85....       MOV     ?V0 + 1,?V0 + 5
   \   000030   E5..         MOV     A,?V0 + 1
   \   000032   F5..         MOV     ?V0 + 0,A
   \   000034   7401         MOV     A,#0x1
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E5..         MOV     A,?V0 + 0
   \   00003B   F0           MOVX    @DPTR,A
    802            timeAlive[2] = BREAK_UINT32(tmp32, 2);
   \   00003C   85....       MOV     ?V0 + 0,?V0 + 4
   \   00003F   85....       MOV     ?V0 + 2,?V0 + 6
   \   000042   85....       MOV     ?V0 + 3,?V0 + 7
   \   000045   7410         MOV     A,#0x10
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?UL_SHR
   \   00004C   7402         MOV     A,#0x2
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   E5..         MOV     A,?V0 + 0
   \   000053   F0           MOVX    @DPTR,A
    803            timeAlive[3] = BREAK_UINT32(tmp32, 3);
   \   000054   7418         MOV     A,#0x18
   \   000056   78..         MOV     R0,#?V0 + 4
   \   000058   12....       LCALL   ?UL_SHR
   \   00005B   7403         MOV     A,#0x3
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   E5..         MOV     A,?V0 + 4
   \   000062   12....       LCALL   ?Subroutine33 & 0xFFFF
    804          
    805            /* Build and send back the response */
    806            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
    807                                                 MT_UTIL_TIME_ALIVE, sizeof(timeAlive), timeAlive);
   \                     ??CrossCallReturnLabel_46:
   \   000065   7B04         MOV     R3,#0x4
   \   000067   7A09         MOV     R2,#0x9
   \   000069   7967         MOV     R1,#0x67
   \   00006B   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    808          }
   \   00006E   7404         MOV     A,#0x4
   \   000070   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AC82         MOV     R4,DPL
   \   000009   AD83         MOV     R5,DPH
   \   00000B   22           RET
    809          
    810          #if (defined HAL_LED) && (HAL_LED == TRUE)
    811          /***************************************************************************************************
    812           * @fn      MT_UtilLedControl
    813           *
    814           * @brief   Process the LED Control Message
    815           *
    816           * @param   pBuf - pointer to the received data
    817           *
    818           * @return  None
    819           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    820          void MT_UtilLedControl(uint8 *pBuf)
   \                     MT_UtilLedControl:
    821          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    822            uint8 iLed, Led, iMode, Mode, cmdId;
    823            uint8 retValue = ZFailure;
   \   00000A   12....       LCALL   ?Subroutine10 & 0xFFFF
    824          
    825            /* parse header */
    826            cmdId = pBuf[MT_RPC_POS_CMD1];
    827            pBuf += MT_RPC_FRAME_HDR_SZ;
    828          
    829            /* LED and Mode */
    830            iLed = *pBuf++;
   \                     ??CrossCallReturnLabel_7:
   \   00000D   F8           MOV     R0,A
   \   00000E   A3           INC     DPTR
    831            iMode = *pBuf;
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FA           MOV     R2,A
    832          
    833            if ( iLed == 1 )
   \   000011   7401         MOV     A,#0x1
   \   000013   68           XRL     A,R0
   \   000014   7004         JNZ     ??MT_UtilLedControl_0
    834              Led = HAL_LED_1;
   \   000016   7901         MOV     R1,#0x1
   \   000018   8026         SJMP    ??MT_UtilLedControl_1
    835            else if ( iLed == 2 )
   \                     ??MT_UtilLedControl_0:
   \   00001A   7402         MOV     A,#0x2
   \   00001C   68           XRL     A,R0
   \   00001D   7004         JNZ     ??MT_UtilLedControl_2
    836              Led = HAL_LED_2;
   \   00001F   7902         MOV     R1,#0x2
   \   000021   801D         SJMP    ??MT_UtilLedControl_1
    837            else if ( iLed == 3 )
   \                     ??MT_UtilLedControl_2:
   \   000023   7403         MOV     A,#0x3
   \   000025   68           XRL     A,R0
   \   000026   7004         JNZ     ??MT_UtilLedControl_3
    838              Led = HAL_LED_3;
   \   000028   7904         MOV     R1,#0x4
   \   00002A   8014         SJMP    ??MT_UtilLedControl_1
    839            else if ( iLed == 4 )
   \                     ??MT_UtilLedControl_3:
   \   00002C   7404         MOV     A,#0x4
   \   00002E   68           XRL     A,R0
   \   00002F   7004         JNZ     ??MT_UtilLedControl_4
    840              Led = HAL_LED_4;
   \   000031   7908         MOV     R1,#0x8
   \   000033   800B         SJMP    ??MT_UtilLedControl_1
    841            else if ( iLed == 0xFF )
   \                     ??MT_UtilLedControl_4:
   \   000035   74FF         MOV     A,#-0x1
   \   000037   68           XRL     A,R0
   \   000038   7004         JNZ     ??MT_UtilLedControl_5
    842              Led = HAL_LED_ALL;
   \   00003A   790F         MOV     R1,#0xf
   \   00003C   8002         SJMP    ??MT_UtilLedControl_1
    843            else
    844              Led = 0;
   \                     ??MT_UtilLedControl_5:
   \   00003E   7900         MOV     R1,#0x0
    845          
    846            if ( iMode == 0 )
   \                     ??MT_UtilLedControl_1:
   \   000040   EA           MOV     A,R2
   \   000041   7004         JNZ     ??MT_UtilLedControl_6
    847              Mode = HAL_LED_MODE_OFF;
   \   000043   7A00         MOV     R2,#0x0
   \   000045   8022         SJMP    ??MT_UtilLedControl_7
    848            else if ( iMode == 1 )
   \                     ??MT_UtilLedControl_6:
   \   000047   7401         MOV     A,#0x1
   \   000049   6A           XRL     A,R2
   \   00004A   7004         JNZ     ??MT_UtilLedControl_8
    849              Mode = HAL_LED_MODE_ON;
   \   00004C   7A01         MOV     R2,#0x1
   \   00004E   8019         SJMP    ??MT_UtilLedControl_7
    850            else if ( iMode == 2 )
   \                     ??MT_UtilLedControl_8:
   \   000050   7402         MOV     A,#0x2
   \   000052   6A           XRL     A,R2
   \   000053   7004         JNZ     ??MT_UtilLedControl_9
    851              Mode = HAL_LED_MODE_BLINK;
   \   000055   7A02         MOV     R2,#0x2
   \   000057   8010         SJMP    ??MT_UtilLedControl_7
    852            else if ( iMode == 3 )
   \                     ??MT_UtilLedControl_9:
   \   000059   7403         MOV     A,#0x3
   \   00005B   6A           XRL     A,R2
   \   00005C   7004         JNZ     ??MT_UtilLedControl_10
    853              Mode = HAL_LED_MODE_FLASH;
   \   00005E   7A04         MOV     R2,#0x4
   \   000060   8007         SJMP    ??MT_UtilLedControl_7
    854            else if ( iMode == 4 )
   \                     ??MT_UtilLedControl_10:
   \   000062   7404         MOV     A,#0x4
   \   000064   6A           XRL     A,R2
   \   000065   7010         JNZ     ??MT_UtilLedControl_11
    855              Mode = HAL_LED_MODE_TOGGLE;
   \   000067   7A08         MOV     R2,#0x8
    856            else
    857              Led = 0;
    858          
    859            if ( Led != 0 )
   \                     ??MT_UtilLedControl_7:
   \   000069   E9           MOV     A,R1
   \   00006A   600B         JZ      ??MT_UtilLedControl_11
    860            {
    861              HalLedSet (Led, Mode);
   \   00006C                ; Setup parameters for call to function HalLedSet
   \   00006C   12....       LCALL   ??HalLedSet?relay
    862              retValue = ZSuccess;
   \   00006F   85..82       MOV     DPL,?XSP + 0
   \   000072   85..83       MOV     DPH,?XSP + 1
   \   000075   E4           CLR     A
   \   000076   F0           MOVX    @DPTR,A
    863            }
    864          
    865            /* Build and send back the response */
    866            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
   \                     ??MT_UtilLedControl_11:
   \   000077                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000077   85..82       MOV     DPL,?XSP + 0
   \   00007A   85..83       MOV     DPH,?XSP + 1
   \   00007D   AC82         MOV     R4,DPL
   \   00007F   AD83         MOV     R5,DPH
   \   000081   7B01         MOV     R3,#0x1
   \   000083   EE           MOV     A,R6
   \   000084   FA           MOV     R2,A
   \   000085   02....       LJMP    ?Subroutine3 & 0xFFFF
    867          }
    868          #endif /* HAL_LED */
    869          
    870          
    871          /***************************************************************************************************
    872           * @fn          MT_UtilSrcMatchEnable
    873           *
    874           * @brief      Enabled AUTOPEND and source address matching.
    875           *
    876           * @param      pBuf - Buffer contains the data
    877           *
    878           * @return     void
    879           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC82         MOV     R4,DPL
   \   000003   AD83         MOV     R5,DPH
   \   000005   7B01         MOV     R3,#0x1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    880          void MT_UtilSrcMatchEnable (uint8 *pBuf)
   \                     MT_UtilSrcMatchEnable:
   \   000000   80..         SJMP    ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
    881          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    882            uint8 retValue, cmdId;
    883          
    884            /* Parse header */
    885            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   12....       LCALL   ?Subroutine18 & 0xFFFF
    886            pBuf += MT_RPC_FRAME_HDR_SZ;
    887          
    888          #ifdef AUTO_PEND
    889            /* Call the routine */
    890            retValue = ZMacSrcMatchEnable();
    891          #else
    892            retValue = ZMacUnsupported;
   \                     ??CrossCallReturnLabel_24:
   \   000010   74F5         MOV     A,#-0xb
   \   000012   12....       LCALL   ??Subroutine35_0 & 0xFFFF
    893          #endif
    894          
    895            /* Build and send back the response */
    896            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
   \                     ??CrossCallReturnLabel_50:
   \   000015                REQUIRE ??Subroutine37_0
   \   000015                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   7967         MOV     R1,#0x67
   \   000002   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    897          
    898          }
   \   000005   7401         MOV     A,#0x1
   \   000007                REQUIRE ??Subroutine38_0
   \   000007                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   D083         POP     DPH
   \   000005   D082         POP     DPL
   \   000007   02....       LJMP    ?BRET
    899          
    900          /***************************************************************************************************
    901           * @fn          MT_UtilSrcMatchAddEntry
    902           *
    903           * @brief       Add a short or extended address to source address table.
    904           *
    905           * @param       pBuf - Buffer contains the data
    906           *
    907           * @return      void
    908           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    909          void MT_UtilSrcMatchAddEntry (uint8 *pBuf)
   \                     MT_UtilSrcMatchAddEntry:
   \   000000   80..         SJMP    ?Subroutine4
    910          {
    911            uint8 retValue, cmdId;
    912          
    913            /* Parse header */
    914            cmdId = pBuf[MT_RPC_POS_CMD1];
    915            pBuf += MT_RPC_FRAME_HDR_SZ;
    916          
    917          #ifdef AUTO_PEND
    918            uint16 panID;
    919            zAddrType_t devAddr;
    920          
    921            /* Address mode */
    922            devAddr.addrMode = *pBuf++;
    923          
    924            /* Address based on the address mode */
    925            MT_UtilSpi2Addr( &devAddr, pBuf);
    926            pBuf += Z_EXTADDR_LEN;
    927          
    928            /* PanID */
    929            panID = BUILD_UINT16( pBuf[0] , pBuf[1] );
    930          
    931            /* Call the routine */
    932            retValue =  ZMacSrcMatchAddEntry (&devAddr, panID);
    933          #else
    934            retValue = ZMacUnsupported;
    935          #endif
    936          
    937            /* Build and send back the response */
    938            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
    939          }
    940          
    941          /***************************************************************************************************
    942           * @fn          MT_UtilSrcMatchDeleteEntry
    943           *
    944           * @brief      Delete a short or extended address from source address table.
    945           *
    946           * @param      pBuf - Buffer contains the data
    947           *
    948           * @return     void
    949           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    950          void MT_UtilSrcMatchDeleteEntry (uint8 *pBuf)
   \                     MT_UtilSrcMatchDeleteEntry:
   \   000000   80..         SJMP    ?Subroutine4
    951          {
    952            uint8 retValue, cmdId;
    953          
    954            /* Parse header */
    955            cmdId = pBuf[MT_RPC_POS_CMD1];
    956            pBuf += MT_RPC_FRAME_HDR_SZ;
    957          
    958          #ifdef AUTO_PEND
    959            uint16 panID;
    960            zAddrType_t devAddr;
    961          
    962            /* Address mode */
    963            devAddr.addrMode = *pBuf++;
    964          
    965            /* Address based on the address mode */
    966            MT_UtilSpi2Addr( &devAddr, pBuf);
    967            pBuf += Z_EXTADDR_LEN;
    968          
    969            /* PanID */
    970            panID = BUILD_UINT16( pBuf[0] , pBuf[1] );
    971          
    972            /* Call the routine */
    973            retValue =  ZMacSrcMatchDeleteEntry (&devAddr, panID);
    974          #else
    975            retValue = ZMacUnsupported;
    976          #endif
    977          
    978            /* Build and send back the response */
    979            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
    980          }
    981          
    982          /***************************************************************************************************
    983           * @fn          MT_UtilSrcMatchCheckSrcAddr
    984           *
    985           * @brief      Check if a short or extended address is in the source address table.
    986           *
    987           * @param      pBuf - Buffer contains the data
    988           *
    989           * @return     void
    990           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    991          void MT_UtilSrcMatchCheckSrcAddr (uint8 *pBuf)
   \                     MT_UtilSrcMatchCheckSrcAddr:
    992          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
    993            uint8 cmdId;
    994            uint8 retArray[2];
    995          
    996            /* Parse header */
    997            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000009   12....       LCALL   ?Subroutine15 & 0xFFFF
    998            pBuf += MT_RPC_FRAME_HDR_SZ;
    999          
   1000          #if 0  /* Unsupported  */
   1001            uint16 panID;
   1002            zAddrType_t devAddr;
   1003          
   1004            /* Address mode */
   1005            devAddr.addrMode = *pBuf++;
   1006          
   1007            /* Address based on the address mode */
   1008            MT_UtilSpi2Addr( &devAddr, pBuf);
   1009            pBuf += Z_EXTADDR_LEN;
   1010          
   1011            /* PanID */
   1012            panID = BUILD_UINT16( pBuf[0] , pBuf[1] );
   1013          
   1014            /* Call the routine */
   1015            retArray[1] =  ZMacSrcMatchCheckSrcAddr (&devAddr, panID);
   1016          
   1017              /* Return failure if the index is invalid */
   1018            if (retArray[1] == ZMacSrcMatchInvalidIndex )
   1019            {
   1020              retArray[0] = ZFailure;
   1021            }
   1022            else
   1023            {
   1024              retArray[0] = ZSuccess;
   1025            }
   1026          #else
   1027            retArray[0] = ZMacUnsupported;
   1028            retArray[1] = ZMacSrcMatchInvalidIndex;
   \                     ??CrossCallReturnLabel_17:
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   74FF         MOV     A,#-0x1
   \   000011                REQUIRE ?Subroutine6
   \   000011                ; // Fall through to label ?Subroutine6
   1029          #endif
   1030          
   1031            /* Build and send back the response */
   1032            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 2, retArray );
   1033          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   000003   7967         MOV     R1,#0x67
   \   000005   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   \   000008   7402         MOV     A,#0x2
   \   00000A   80..         SJMP    ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000007   74F5         MOV     A,#-0xb
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   7401         MOV     A,#0x1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   000003   7B02         MOV     R3,#0x2
   \   000005   22           RET
   1034          
   1035          /***************************************************************************************************
   1036           * @fn          MT_UtilSrcMatchAckAllPending
   1037           *
   1038           * @brief       Enabled/disable acknowledging all packets with pending bit set
   1039           *              It is normally enabled when adding new entries to
   1040           *              the source address table fails due to the table is full, or
   1041           *              disabled when more entries are deleted and the table has
   1042           *              empty slots.
   1043           *
   1044           * @param       pBuf - Buffer contains the data
   1045           *
   1046           * @return      void
   1047           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1048          void MT_UtilSrcMatchAckAllPending (uint8 *pBuf)
   \                     MT_UtilSrcMatchAckAllPending:
   \   000000                REQUIRE ?Subroutine4
   \   000000                ; // Fall through to label ?Subroutine4
   1049          {
   1050            uint8 retValue, cmdId;
   1051          
   1052            /* Parse header */
   1053            cmdId = pBuf[MT_RPC_POS_CMD1];
   1054            pBuf += MT_RPC_FRAME_HDR_SZ;
   1055          
   1056          #ifdef AUTO_PEND
   1057            /* Call the routine */
   1058            retValue = ZMacSrcMatchAckAllPending(*pBuf);
   1059          #else
   1060            retValue = ZMacUnsupported;
   1061          #endif
   1062          
   1063            /* Build and send back the response */
   1064            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
   1065          }
   1066          
   1067          /***************************************************************************************************
   1068           * @fn          MT_UtilSrcMatchCheckAllPending
   1069           *
   1070           * @brief       Check if acknowledging all packets with pending bit set
   1071           *              is enabled.
   1072           *
   1073           * @param       pBuf - Buffer contains the data
   1074           *
   1075           * @return      void
   1076           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1077          void MT_UtilSrcMatchCheckAllPending (uint8 *pBuf)
   \                     MT_UtilSrcMatchCheckAllPending:
   1078          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 2
   \   000004   74FE         MOV     A,#-0x2
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1079            uint8 retArray[2], cmdId;
   1080          
   1081            /* Parse header */
   1082            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000009   12....       LCALL   ?Subroutine15 & 0xFFFF
   1083            pBuf += MT_RPC_FRAME_HDR_SZ;
   1084          
   1085          #ifdef AUTO_PEND
   1086            /* Call the routine */
   1087            retArray[0] = ZMacSuccess;
   1088            retArray[1] = ZMacSrcMatchCheckAllPending();
   1089          #else
   1090            retArray[0] = ZMacUnsupported;
   1091            retArray[1] = FALSE;
   \                     ??CrossCallReturnLabel_18:
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   E4           CLR     A
   \   000010   80..         SJMP    ?Subroutine6
   1092          #endif
   1093          
   1094            /* Build and send back the response */
   1095            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 2, retArray );
   1096          }
   1097          
   1098          /***************************************************************************************************
   1099           * SUPPORT
   1100           ***************************************************************************************************/
   1101          
   1102          #ifdef AUTO_PEND
   1103          /***************************************************************************************************
   1104           * @fn      MT_UtilRevExtCpy
   1105           *
   1106           * @brief
   1107           *
   1108           *   Reverse-copy an extended address.
   1109           *
   1110           * @param   pDst - Pointer to data destination
   1111           * @param   pSrc - Pointer to data source
   1112           *
   1113           * @return  void
   1114           ***************************************************************************************************/
   1115          static void MT_UtilRevExtCpy( uint8 *pDst, uint8 *pSrc )
   1116          {
   1117            int8 i;
   1118          
   1119            for ( i = Z_EXTADDR_LEN - 1; i >= 0; i-- )
   1120            {
   1121              *pDst++ = pSrc[i];
   1122            }
   1123          }
   1124          
   1125          /***************************************************************************************************
   1126           * @fn      MT_UtilSpi2Addr
   1127           *
   1128           * @brief   Copy an address from an SPI message to an address struct.  The
   1129           *          addrMode in pAddr must already be set.
   1130           *
   1131           * @param   pDst - Pointer to address struct
   1132           * @param   pSrc - Pointer SPI message byte array
   1133           *
   1134           * @return  void
   1135           ***************************************************************************************************/
   1136          static void MT_UtilSpi2Addr( zAddrType_t *pDst, uint8 *pSrc )
   1137          {
   1138            if ( pDst->addrMode == Addr16Bit )
   1139            {
   1140              pDst->addr.shortAddr = BUILD_UINT16( pSrc[0] , pSrc[1] );
   1141            }
   1142            else if ( pDst->addrMode == Addr64Bit )
   1143            {
   1144              MT_UtilRevExtCpy( pDst->addr.extAddr, pSrc );
   1145            }
   1146          }
   1147          #endif // AUTO_PEND
   1148          
   1149          #if !defined NONWK
   1150          /**************************************************************************************************
   1151           * @fn      MT_UtilDataReq
   1152           *
   1153           * @brief   Process the MAC Data Request command.
   1154           *
   1155           * @param   pBuf - pointer to the received data
   1156           *
   1157           * @return  None
   1158          **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007                REQUIRE ??Subroutine35_0
   \   000007                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1159          void MT_UtilDataReq(uint8 *pBuf)
   \                     MT_UtilDataReq:
   1160          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 1
   \   000004   74FF         MOV     A,#-0x1
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1161            uint8 rtrn = NwkPollReq(pBuf[MT_RPC_POS_DAT0]);
   \   000009                ; Setup parameters for call to function NwkPollReq
   \   000009   8A82         MOV     DPL,R2
   \   00000B   8B83         MOV     DPH,R3
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   12....       LCALL   ??NwkPollReq?relay
   \   000015   12....       LCALL   ?Subroutine23 & 0xFFFF
   1162            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_DATA_REQ,
   1163                                                                                         1, &rtrn);
   \                     ??CrossCallReturnLabel_49:
   \   000018   7A11         MOV     R2,#0x11
   \   00001A   80..         SJMP    ??Subroutine37_0
   1164          }
   1165          
   1166          /***************************************************************************************************
   1167           * @fn      MT_UtilAddrMgrEntryLookupExt
   1168           *
   1169           * @brief   Proxy the AddrMgrEntryLookupExt() function.
   1170           *
   1171           * @param   pBuf - pointer to the received buffer
   1172           *
   1173           * @return  void
   1174           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1175          static void MT_UtilAddrMgrEntryLookupExt(uint8 *pBuf)
   \                     MT_UtilAddrMgrEntryLookupExt:
   1176          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 15
   \   000005   74F1         MOV     A,#-0xf
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1177            uint8 nwkAddr[2];
   1178            AddrMgrEntry_t entry;
   1179            uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ?Subroutine17 & 0xFFFF
   1180            pBuf += MT_RPC_FRAME_HDR_SZ;
   1181          
   1182            osal_memcpy(entry.extAddr, pBuf, Z_EXTADDR_LEN);
   \                     ??CrossCallReturnLabel_21:
   \   00000D   A982         MOV     R1,DPL
   \   00000F   AA83         MOV     R2,DPH
   \   000011   89..         MOV     ?V0 + 0,R1
   \   000013   8A..         MOV     ?V0 + 1,R2
   \   000015   75..00       MOV     ?V0 + 2,#0x0
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00001D   7C08         MOV     R4,#0x8
   \   00001F   7D00         MOV     R5,#0x0
   \   000021   EC           MOV     A,R4
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   AA82         MOV     R2,DPL
   \   000027   AB83         MOV     R3,DPH
   \   000029   12....       LCALL   ??osal_memcpy?relay
   \   00002C   7403         MOV     A,#0x3
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   1183            (void)AddrMgrEntryLookupExt(&entry);
   \   000031                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000031   7402         MOV     A,#0x2
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   AA82         MOV     R2,DPL
   \   000038   AB83         MOV     R3,DPH
   \   00003A   12....       LCALL   ??AddrMgrEntryLookupExt?relay
   1184          
   1185            nwkAddr[0] = LO_UINT16(entry.nwkAddr);
   \   00003D   7403         MOV     A,#0x3
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   E0           MOVX    A,@DPTR
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   F0           MOVX    @DPTR,A
   1186            nwkAddr[1] = HI_UINT16(entry.nwkAddr);
   \   00004A   7403         MOV     A,#0x3
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   C0E0         PUSH    A
   \   000053   7401         MOV     A,#0x1
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   D0E0         POP     A
   \   00005A   12....       LCALL   ?Subroutine22 & 0xFFFF
   1187            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
   1188                                                 cmdId, sizeof(uint16), nwkAddr);
   \                     ??CrossCallReturnLabel_31:
   \   00005D   EE           MOV     A,R6
   \   00005E   FA           MOV     R2,A
   \   00005F   7967         MOV     R1,#0x67
   \   000061   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1189          }
   \   000064   740F         MOV     A,#0xf
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
   \   000069                REQUIRE ?Subroutine5
   \   000069                ; // Fall through to label ?Subroutine5

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FE           MOV     R6,A
   \   000008                ; Setup parameters for call to function osal_memcpy
   \   000008                ; Setup parameters for call to function packDev_t
   \   000008                ; Setup parameters for call to function AssocFindDevice
   \   000008   8A82         MOV     DPL,R2
   \   00000A   8B83         MOV     DPH,R3
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   22           RET
   1190          
   1191          /***************************************************************************************************
   1192           * @fn      MT_UtilAddrMgrEntryLookupNwk
   1193           *
   1194           * @brief   Proxy the AddrMgrEntryLookupNwk() function.
   1195           *
   1196           * @param   pBuf - pointer to the received buffer
   1197           *
   1198           * @return  void
   1199           ***************************************************************************************************/
   1200          static void MT_UtilAddrMgrEntryLookupNwk(uint8 *pBuf)
   1201          {
   1202            AddrMgrEntry_t entry;
   1203            uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
   1204            pBuf += MT_RPC_FRAME_HDR_SZ;
   1205          
   1206            entry.nwkAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   1207            (void)AddrMgrEntryLookupNwk(&entry);
   1208          
   1209            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
   1210                                                 cmdId, Z_EXTADDR_LEN, entry.extAddr);
   1211          }
   1212          
   1213          #if defined MT_SYS_KEY_MANAGEMENT
   1214          /***************************************************************************************************
   1215           * @fn      MT_UtilAPSME_LinkKeyDataGet
   1216           *
   1217           * @brief   Retrieves APS Link Key data from NV.
   1218           *
   1219           * @param   pBuf - pointer to the received buffer
   1220           *
   1221           * @return  void
   1222           ***************************************************************************************************/
   1223          static void MT_UtilAPSME_LinkKeyDataGet(uint8 *pBuf)
   1224          {
   1225            uint8 rsp[MT_APSME_LINKKEY_GET_RSP_LEN];
   1226            APSME_LinkKeyData_t *pData = NULL;
   1227            uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
   1228            uint16 apsLinkKeyNvId;
   1229            uint32 *apsRxFrmCntr;
   1230            uint32 *apsTxFrmCntr;
   1231          
   1232            pBuf += MT_RPC_FRAME_HDR_SZ;
   1233          
   1234            *rsp = APSME_LinkKeyNVIdGet(pBuf, &apsLinkKeyNvId);
   1235          
   1236            if (SUCCESS == *rsp)
   1237            {
   1238              pData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
   1239          
   1240              if (pData != NULL)
   1241              {
   1242                // retrieve key from NV
   1243                if ( osal_nv_read( apsLinkKeyNvId, 0,
   1244                                  sizeof(APSME_LinkKeyData_t), pData) == SUCCESS)
   1245          
   1246                {
   1247                  uint8 *ptr = rsp+1;
   1248                  apsRxFrmCntr = &ApsLinkKeyFrmCntr[apsLinkKeyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr;
   1249                  apsTxFrmCntr = &ApsLinkKeyFrmCntr[apsLinkKeyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr;
   1250          
   1251                  (void)osal_memcpy(ptr, pData->key, SEC_KEY_LEN);
   1252                  ptr += SEC_KEY_LEN;
   1253                  *ptr++ = BREAK_UINT32(*apsTxFrmCntr, 0);
   1254                  *ptr++ = BREAK_UINT32(*apsTxFrmCntr, 1);
   1255                  *ptr++ = BREAK_UINT32(*apsTxFrmCntr, 2);
   1256                  *ptr++ = BREAK_UINT32(*apsTxFrmCntr, 3);
   1257                  *ptr++ = BREAK_UINT32(*apsRxFrmCntr, 0);
   1258                  *ptr++ = BREAK_UINT32(*apsRxFrmCntr, 1);
   1259                  *ptr++ = BREAK_UINT32(*apsRxFrmCntr, 2);
   1260                  *ptr++ = BREAK_UINT32(*apsRxFrmCntr, 3);
   1261                }
   1262          
   1263                // clear copy of key in RAM
   1264                osal_memset( pData, 0x00, sizeof(APSME_LinkKeyData_t) );
   1265          
   1266                osal_mem_free(pData);
   1267              }
   1268            }
   1269            else
   1270            {
   1271              // set data key and counters 0xFF
   1272              osal_memset(&rsp[1], 0xFF, SEC_KEY_LEN + (MT_UTIL_FRM_CTR_LEN * 2));
   1273            }
   1274          
   1275            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
   1276                                                 MT_APSME_LINKKEY_GET_RSP_LEN, rsp);
   1277          
   1278            // clear key data
   1279            osal_memset(rsp, 0x00, MT_APSME_LINKKEY_GET_RSP_LEN);
   1280          
   1281          }
   1282          
   1283          /***************************************************************************************************
   1284           * @fn      MT_UtilAPSME_LinkKeyNvIdGet
   1285           *
   1286           * @brief   Retrieves APS Link Key NV ID from the entry table.
   1287           *
   1288           * @param   pBuf - pointer to the received buffer
   1289           *
   1290           * @return  void
   1291           ***************************************************************************************************/
   1292          static void MT_UtilAPSME_LinkKeyNvIdGet(uint8 *pBuf)
   1293          {
   1294            uint8 rsp[MT_APSME_LINKKEY_NV_ID_GET_RSP_LEN];
   1295            uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
   1296            uint16 apsLinkKeyNvId;
   1297          
   1298            pBuf += MT_RPC_FRAME_HDR_SZ;
   1299          
   1300            *rsp = APSME_LinkKeyNVIdGet(pBuf, &apsLinkKeyNvId);
   1301          
   1302            if (SUCCESS == *rsp)
   1303            {
   1304              rsp[1] = LO_UINT16(apsLinkKeyNvId);
   1305              rsp[2] = HI_UINT16(apsLinkKeyNvId);
   1306            }
   1307            else
   1308            {
   1309              // send failure response with invalid NV ID
   1310              osal_memset(&rsp[1], 0xFF, 2);
   1311            }
   1312          
   1313            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
   1314                                                 MT_APSME_LINKKEY_NV_ID_GET_RSP_LEN, rsp);
   1315          }
   1316          #endif // MT_SYS_KEY_MANAGEMENT
   1317          
   1318          /***************************************************************************************************
   1319           * @fn      MT_UtilAPSME_RequestKeyCmd
   1320           *
   1321           * @brief   Send RequestKey command message to TC for a specific partner Address.
   1322           *
   1323           * @param   pBuf  - pointer to the received buffer
   1324           *
   1325           * @return  void
   1326           ***************************************************************************************************/
   1327          void MT_UtilAPSME_RequestKeyCmd(uint8 *pBuf)
   1328          {
   1329            uint8 cmdId;
   1330            uint8 partnerAddr[Z_EXTADDR_LEN];
   1331            uint8 retValue;
   1332          
   1333            // parse header
   1334            cmdId = pBuf[MT_RPC_POS_CMD1];
   1335            pBuf += MT_RPC_FRAME_HDR_SZ;
   1336          
   1337            /* PartnerAddress */
   1338            osal_memcpy(partnerAddr, pBuf, Z_EXTADDR_LEN);
   1339          
   1340            retValue = (uint8)ZDSecMgrRequestAppKey(partnerAddr);
   1341          
   1342            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue);
   1343          }
   1344          
   1345          /***************************************************************************************************
   1346           * @fn      MT_UtilAssocCount
   1347           *
   1348           * @brief   Proxy the AssocCount() function.
   1349           *
   1350           * @param   pBuf - pointer to the received buffer
   1351           *
   1352           * @return  void
   1353           ***************************************************************************************************/
   1354          static void MT_UtilAssocCount(uint8 *pBuf)
   1355          {
   1356            uint16 cnt;
   1357            uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
   1358            pBuf += MT_RPC_FRAME_HDR_SZ;
   1359          
   1360            cnt = AssocCount(pBuf[0], pBuf[1]);
   1361            pBuf[0] = LO_UINT16(cnt);
   1362            pBuf[1] = HI_UINT16(cnt);
   1363          
   1364            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 2, pBuf);
   1365          }
   1366          
   1367          /***************************************************************************************************
   1368           * @fn      MT_UtilAssocFindDevice
   1369           *
   1370           * @brief   Get an associated device by index.
   1371           *
   1372           * @param   pBuf - pointer to the received buffer
   1373           *
   1374           * @return  void
   1375           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1376          static void MT_UtilAssocFindDevice(uint8 *pBuf)
   \                     MT_UtilAssocFindDevice:
   1377          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV     A,#-0x16
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1378            uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ?Subroutine17 & 0xFFFF
   1379            uint8 buf[sizeof(associated_devices_t)];
   1380          
   1381            packDev_t(buf, AssocFindDevice(pBuf[MT_RPC_FRAME_HDR_SZ]));
   \                     ??CrossCallReturnLabel_22:
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   FA           MOV     R2,A
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   ??AssocFindDevice?relay
   \   000014   EA           MOV     A,R2
   \   000015   FC           MOV     R4,A
   \   000016   EB           MOV     A,R3
   \   000017   FD           MOV     R5,A
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   AA82         MOV     R2,DPL
   \   000020   AB83         MOV     R3,DPH
   \   000022   12....       LCALL   ??packDev_t?relay
   1382            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
   1383                                                 sizeof(associated_devices_t), buf);
   \   000025                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000025   85..82       MOV     DPL,?XSP + 0
   \   000028   85..83       MOV     DPH,?XSP + 1
   \   00002B   AC82         MOV     R4,DPL
   \   00002D   AD83         MOV     R5,DPH
   \   00002F   7B16         MOV     R3,#0x16
   \   000031   EE           MOV     A,R6
   \   000032   FA           MOV     R2,A
   \   000033                REQUIRE ?Subroutine7
   \   000033                ; // Fall through to label ?Subroutine7
   1384          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7967         MOV     R1,#0x67
   \   000002   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   \   000005   7416         MOV     A,#0x16
   \   000007   80..         SJMP    ??Subroutine39_0
   1385          
   1386          /***************************************************************************************************
   1387           * @fn      MT_UtilAssocGetWithAddress
   1388           *
   1389           * @brief   Get an associated device by address.
   1390           *
   1391           * @param   pBuf - pointer to the received buffer
   1392           *
   1393           * @return  void
   1394           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1395          static void MT_UtilAssocGetWithAddress(uint8 *pBuf)
   \                     MT_UtilAssocGetWithAddress:
   1396          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV     A,#-0x16
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1397            extern associated_devices_t *AssocGetWithAddress(uint8 *extAddr, uint16 shortAddr);
   1398            uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 0,A
   1399            uint8 buf[sizeof(associated_devices_t)];
   1400          
   1401            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   EF           MOV     A,R7
   \   00001C   3400         ADDC    A,#0x0
   \   00001E   FF           MOV     R7,A
   1402            packDev_t(buf, AssocGetWithAddress(((AddrMgrExtAddrValid(pBuf)) ? pBuf : NULL),
   1403                                            BUILD_UINT16(pBuf[Z_EXTADDR_LEN], pBuf[Z_EXTADDR_LEN+1])));
   \   00001F                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   00001F   0A           INC     R2
   \   000020   0A           INC     R2
   \   000021   0A           INC     R2
   \   000022   FB           MOV     R3,A
   \   000023   12....       LCALL   ??AddrMgrExtAddrValid?relay
   \   000026   E9           MOV     A,R1
   \   000027   6006         JZ      ??MT_UtilAssocGetWithAddress_0
   \   000029   EE           MOV     A,R6
   \   00002A   FA           MOV     R2,A
   \   00002B   EF           MOV     A,R7
   \   00002C   FB           MOV     R3,A
   \   00002D   8004         SJMP    ??MT_UtilAssocGetWithAddress_1
   \                     ??MT_UtilAssocGetWithAddress_0:
   \   00002F   7A00         MOV     R2,#0x0
   \   000031   7B00         MOV     R3,#0x0
   \                     ??MT_UtilAssocGetWithAddress_1:
   \   000033                ; Setup parameters for call to function packDev_t
   \   000033                ; Setup parameters for call to function AssocGetWithAddress
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   FC           MOV     R4,A
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   EC           MOV     A,R4
   \   000051   2400         ADD     A,#0x0
   \   000053   E4           CLR     A
   \   000054   39           ADDC    A,R1
   \   000055   FD           MOV     R5,A
   \   000056   12....       LCALL   ??AssocGetWithAddress?relay
   \   000059   EA           MOV     A,R2
   \   00005A   FC           MOV     R4,A
   \   00005B   EB           MOV     A,R3
   \   00005C   FD           MOV     R5,A
   \   00005D   85..82       MOV     DPL,?XSP + 0
   \   000060   85..83       MOV     DPH,?XSP + 1
   \   000063   AA82         MOV     R2,DPL
   \   000065   AB83         MOV     R3,DPH
   \   000067   12....       LCALL   ??packDev_t?relay
   1404          
   1405            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
   1406                                                 sizeof(associated_devices_t), buf);
   \   00006A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00006A   85..82       MOV     DPL,?XSP + 0
   \   00006D   85..83       MOV     DPH,?XSP + 1
   \   000070   AC82         MOV     R4,DPL
   \   000072   AD83         MOV     R5,DPH
   \   000074   7B16         MOV     R3,#0x16
   \   000076   AA..         MOV     R2,?V0 + 0
   \   000078   02....       LJMP    ?Subroutine7 & 0xFFFF
   1407          }
   1408          
   1409          /***************************************************************************************************
   1410           * @fn      MT_UtilBindAddEntry
   1411           *
   1412           * @brief   Add Binding Entry into Local Table.
   1413           *
   1414           * @param   pBuf - pointer to the received buffer
   1415           *
   1416           * @return  void
   1417           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1418          static void MT_UtilBindAddEntry(uint8 *pBuf)
   \                     MT_UtilBindAddEntry:
   1419          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV     A,#-0x17
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1420            uint8 srcEp;
   1421            zAddrType_t dstAddr;
   1422            uint8 dstEp;
   1423            uint8 numClusterIds;
   1424            uint16 *clusterIds;
   1425            uint8 buf[sizeof(BindingEntry_t)];
   1426            uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 7,A
   1427            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EE           MOV     A,R6
   \   000018   2403         ADD     A,#0x3
   \   00001A   FE           MOV     R6,A
   \   00001B   EF           MOV     A,R7
   \   00001C   3400         ADDC    A,#0x0
   \   00001E   FF           MOV     R7,A
   1428          
   1429            // Initialize the return buffer
   1430            osal_memset( buf, 0xFF, sizeof(BindingEntry_t) );
   \   00001F                ; Setup parameters for call to function osal_memset
   \   00001F   7C0E         MOV     R4,#0xe
   \   000021   7D00         MOV     R5,#0x0
   \   000023   79FF         MOV     R1,#-0x1
   \   000025   7409         MOV     A,#0x9
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   AA82         MOV     R2,DPL
   \   00002C   AB83         MOV     R3,DPH
   \   00002E   12....       LCALL   ??osal_memset?relay
   1431            buf[2] = 0xFE;    // set the default value of INVALID_NODE_ADDR
   \   000031   740B         MOV     A,#0xb
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   74FE         MOV     A,#-0x2
   \   000038   F0           MOVX    @DPTR,A
   1432            buf[3] = 0xFF;    // set the default value of INVALID_NODE_ADDR
   \   000039   740C         MOV     A,#0xc
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   74FF         MOV     A,#-0x1
   \   000040   F0           MOVX    @DPTR,A
   1433          
   1434            srcEp = *pBuf++;
   \   000041   8E82         MOV     DPL,R6
   \   000043   8F83         MOV     DPH,R7
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F5..         MOV     ?V0 + 4,A
   \   000048   A3           INC     DPTR
   \   000049   AE82         MOV     R6,DPL
   \   00004B   AF83         MOV     R7,DPH
   1435          
   1436            // Destination Address mode
   1437            dstAddr.addrMode = *pBuf++;
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F8           MOV     R0,A
   \   00004F   7408         MOV     A,#0x8
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   E8           MOV     A,R0
   \   000055   F0           MOVX    @DPTR,A
   \   000056   8E82         MOV     DPL,R6
   \   000058   8F83         MOV     DPH,R7
   \   00005A   A3           INC     DPTR
   \   00005B   0E           INC     R6
   \   00005C   AF83         MOV     R7,DPH
   1438          
   1439            // Destination Address
   1440            if ( dstAddr.addrMode == Addr64Bit )
   \   00005E   7403         MOV     A,#0x3
   \   000060   68           XRL     A,R0
   \   000061   7013         JNZ     ??MT_UtilBindAddEntry_0
   1441            {
   1442              uint8 *ptr; // Use this additional pointer because *pBuf is incremented later for both cases
   1443          
   1444              ptr = pBuf;
   1445              osal_cpyExtAddr( dstAddr.addr.extAddr, ptr );
   \   000063                ; Setup parameters for call to function sAddrExtCpy
   \   000063   EE           MOV     A,R6
   \   000064   FC           MOV     R4,A
   \   000065   EF           MOV     A,R7
   \   000066   FD           MOV     R5,A
   \   000067   85..82       MOV     DPL,?XSP + 0
   \   00006A   85..83       MOV     DPH,?XSP + 1
   \   00006D   AA82         MOV     R2,DPL
   \   00006F   AB83         MOV     R3,DPH
   \   000071   12....       LCALL   ??sAddrExtCpy?relay
   \   000074   8010         SJMP    ??MT_UtilBindAddEntry_1
   1446            }
   1447            else
   1448            {
   1449              dstAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_UtilBindAddEntry_0:
   \   000076   E0           MOVX    A,@DPTR
   \   000077   FA           MOV     R2,A
   \   000078   A3           INC     DPTR
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F9           MOV     R1,A
   \   00007B   EA           MOV     A,R2
   \   00007C   85..82       MOV     DPL,?XSP + 0
   \   00007F   85..83       MOV     DPH,?XSP + 1
   \   000082   F0           MOVX    @DPTR,A
   \   000083   A3           INC     DPTR
   \   000084   E9           MOV     A,R1
   \   000085   F0           MOVX    @DPTR,A
   1450            }
   1451            // The short address occupies LSB two bytes
   1452            pBuf += Z_EXTADDR_LEN;
   \                     ??MT_UtilBindAddEntry_1:
   \   000086   EE           MOV     A,R6
   \   000087   2408         ADD     A,#0x8
   \   000089   FE           MOV     R6,A
   \   00008A   EF           MOV     A,R7
   \   00008B   3400         ADDC    A,#0x0
   \   00008D   FF           MOV     R7,A
   1453          
   1454            // DstEPInt
   1455            dstEp = *pBuf++;
   \   00008E   8E82         MOV     DPL,R6
   \   000090   8F83         MOV     DPH,R7
   \   000092   E0           MOVX    A,@DPTR
   \   000093   F5..         MOV     ?V0 + 5,A
   \   000095   A3           INC     DPTR
   1456          
   1457            numClusterIds = *pBuf++;
   \   000096   E0           MOVX    A,@DPTR
   \   000097   F5..         MOV     ?V0 + 6,A
   \   000099   A3           INC     DPTR
   \   00009A   0E           INC     R6
   \   00009B   0E           INC     R6
   \   00009C   AF83         MOV     R7,DPH
   1458          
   1459            if ( numClusterIds > 0 )
   \   00009E   6063         JZ      ??MT_UtilBindAddEntry_2
   1460            {
   1461              // copy list of clusters
   1462              clusterIds = (uint16 *)osal_mem_alloc( numClusterIds * sizeof(uint16) );
   \   0000A0   C3           CLR     C
   \   0000A1   33           RLC     A
   \   0000A2   F5..         MOV     ?V0 + 2,A
   \   0000A4   E4           CLR     A
   \   0000A5   33           RLC     A
   \   0000A6   F5..         MOV     ?V0 + 3,A
   \   0000A8                ; Setup parameters for call to function osal_mem_alloc
   \   0000A8   AA..         MOV     R2,?V0 + 2
   \   0000AA   FB           MOV     R3,A
   \   0000AB   12....       LCALL   ??osal_mem_alloc?relay
   \   0000AE   8A..         MOV     ?V0 + 0,R2
   \   0000B0   8B..         MOV     ?V0 + 1,R3
   1463              osal_memcpy( clusterIds, pBuf, numClusterIds * sizeof(uint16));
   \   0000B2                ; Setup parameters for call to function osal_memcpy
   \   0000B2   8E..         MOV     ?V0 + 8,R6
   \   0000B4   8F..         MOV     ?V0 + 9,R7
   \   0000B6   75..00       MOV     ?V0 + 10,#0x0
   \   0000B9   78..         MOV     R0,#?V0 + 8
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BE   AC..         MOV     R4,?V0 + 2
   \   0000C0   AD..         MOV     R5,?V0 + 3
   \   0000C2   12....       LCALL   ??osal_memcpy?relay
   \   0000C5   7403         MOV     A,#0x3
   \   0000C7   12....       LCALL   ?DEALLOC_XSTACK8
   1464          
   1465              if ( clusterIds != NULL )
   \   0000CA   E5..         MOV     A,?V0 + 0
   \   0000CC   45..         ORL     A,?V0 + 1
   \   0000CE   6033         JZ      ??MT_UtilBindAddEntry_2
   1466              {
   1467                // The response to MT interface has to be pack into buf
   1468                packBindEntry_t( buf, bindAddEntry( srcEp, &dstAddr, dstEp, numClusterIds, clusterIds ));
   \   0000D0                ; Setup parameters for call to function packBindEntry_t
   \   0000D0                ; Setup parameters for call to function bindAddEntry
   \   0000D0   78..         MOV     R0,#?V0 + 0
   \   0000D2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D5   AD..         MOV     R5,?V0 + 6
   \   0000D7   AC..         MOV     R4,?V0 + 5
   \   0000D9   7402         MOV     A,#0x2
   \   0000DB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DE   AA82         MOV     R2,DPL
   \   0000E0   AB83         MOV     R3,DPH
   \   0000E2   A9..         MOV     R1,?V0 + 4
   \   0000E4   12....       LCALL   ??bindAddEntry?relay
   \   0000E7   7402         MOV     A,#0x2
   \   0000E9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000EC   EA           MOV     A,R2
   \   0000ED   FC           MOV     R4,A
   \   0000EE   EB           MOV     A,R3
   \   0000EF   FD           MOV     R5,A
   \   0000F0   7409         MOV     A,#0x9
   \   0000F2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F5   AA82         MOV     R2,DPL
   \   0000F7   AB83         MOV     R3,DPH
   \   0000F9   12....       LCALL   ??packBindEntry_t?relay
   1469          
   1470                osal_mem_free( clusterIds );
   \   0000FC                ; Setup parameters for call to function osal_mem_free
   \   0000FC   AA..         MOV     R2,?V0 + 0
   \   0000FE   AB..         MOV     R3,?V0 + 1
   \   000100   12....       LCALL   ??osal_mem_free?relay
   1471              }
   1472            }
   1473          
   1474            MT_BuildAndSendZToolResponse( ( (uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL ),
   1475                                          cmdId, sizeof(BindingEntry_t), buf );
   \                     ??MT_UtilBindAddEntry_2:
   \   000103                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000103   7409         MOV     A,#0x9
   \   000105   12....       LCALL   ?XSTACK_DISP0_8
   \   000108   AC82         MOV     R4,DPL
   \   00010A   AD83         MOV     R5,DPH
   \   00010C   7B0E         MOV     R3,#0xe
   \   00010E   AA..         MOV     R2,?V0 + 7
   \   000110   7967         MOV     R1,#0x67
   \   000112   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1476          }
   \   000115   7417         MOV     A,#0x17
   \   000117   02....       LJMP    ?Subroutine0 & 0xFFFF
   1477          
   1478          /***************************************************************************************************
   1479           * @fn      packDev_t
   1480           *
   1481           * @brief   Pack an associated_devices_t structure into a byte buffer (pack INVALID_NODE_ADDR if
   1482           *          the pDev parameter is NULL).
   1483           *
   1484           * @param   pBuf - pointer to the buffer into which to pack the structure.
   1485           * @param   pDev - pointer to the structure.
   1486           *
   1487           * @return  void
   1488           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1489          static void packDev_t(uint8 *pBuf, associated_devices_t *pDev)
   \                     packDev_t:
   1490          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   1491            if (NULL == pDev)
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A882         MOV     R0,DPL
   \   00000C   A983         MOV     R1,DPH
   \   00000E   EC           MOV     A,R4
   \   00000F   4D           ORL     A,R5
   \   000010   700C         JNZ     ??packDev_t_0
   1492            {
   1493              uint16 rtrn = INVALID_NODE_ADDR;
   1494              *pBuf++ = LO_UINT16(rtrn);
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   74FE         MOV     A,#-0x2
   \   000018   12....       LCALL   ?Subroutine24 & 0xFFFF
   1495              *pBuf++ = HI_UINT16(rtrn);
   1496            }
   \                     ??CrossCallReturnLabel_32:
   \   00001B   02....       LJMP    ??packDev_t_1 & 0xFFFF
   1497            else
   1498            {
   1499              *pBuf++ = LO_UINT16(pDev->shortAddr);
   \                     ??packDev_t_0:
   \   00001E   12....       LCALL   ?Subroutine8 & 0xFFFF
   1500              *pBuf++ = HI_UINT16(pDev->shortAddr);
   1501              *pBuf++ = LO_UINT16(pDev->addrIdx);
   1502              *pBuf++ = HI_UINT16(pDev->addrIdx);
   1503              *pBuf++ = pDev->nodeRelation;
   1504              *pBuf++ = pDev->devStatus;
   \                     ??CrossCallReturnLabel_0:
   \   000021   8C82         MOV     DPL,R4
   \   000023   8D83         MOV     DPH,R5
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   12....       LCALL   ?Subroutine16 & 0xFFFF
   1505              *pBuf++ = pDev->assocCnt;
   \                     ??CrossCallReturnLabel_19:
   \   00002D   8C82         MOV     DPL,R4
   \   00002F   8D83         MOV     DPH,R5
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   12....       LCALL   ?Subroutine12 & 0xFFFF
   1506              *pBuf++ = pDev->age;
   \                     ??CrossCallReturnLabel_10:
   \   00003A   12....       LCALL   ?Subroutine12 & 0xFFFF
   1507              *pBuf++ = pDev->linkInfo.txCounter;
   \                     ??CrossCallReturnLabel_11:
   \   00003D   A3           INC     DPTR
   \   00003E   12....       LCALL   ?Subroutine11 & 0xFFFF
   1508              *pBuf++ = pDev->linkInfo.txCost;
   \                     ??CrossCallReturnLabel_8:
   \   000041   12....       LCALL   ?Subroutine11 & 0xFFFF
   1509              *pBuf++ = pDev->linkInfo.rxLqi;
   \                     ??CrossCallReturnLabel_9:
   \   000044   A3           INC     DPTR
   \   000045   12....       LCALL   ?Subroutine13 & 0xFFFF
   1510              *pBuf++ = pDev->linkInfo.inKeySeqNum;
   \                     ??CrossCallReturnLabel_12:
   \   000048   240B         ADD     A,#0xb
   \   00004A   F582         MOV     DPL,A
   \   00004C   ED           MOV     A,R5
   \   00004D   3400         ADDC    A,#0x0
   \   00004F   F583         MOV     DPH,A
   \   000051   12....       LCALL   ?Subroutine13 & 0xFFFF
   1511              *pBuf++ = BREAK_UINT32(pDev->linkInfo.inFrmCntr, 0);
   \                     ??CrossCallReturnLabel_13:
   \   000054   240C         ADD     A,#0xc
   \   000056   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000059   78..         MOV     R0,#?V0 + 0
   \   00005B   12....       LCALL   ?L_MOV_X
   \   00005E   12....       LCALL   ?Subroutine20 & 0xFFFF
   1512              *pBuf++ = BREAK_UINT32(pDev->linkInfo.inFrmCntr, 1);
   \                     ??CrossCallReturnLabel_54:
   \   000061   12....       LCALL   ?L_MOV_X
   \   000064   E5..         MOV     A,?V0 + 1
   \   000066   8A82         MOV     DPL,R2
   \   000068   8B83         MOV     DPH,R3
   \   00006A   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   1513              *pBuf++ = BREAK_UINT32(pDev->linkInfo.inFrmCntr, 2);
   \                     ??CrossCallReturnLabel_56:
   \   00006D   12....       LCALL   ?L_MOV_X
   \   000070   7410         MOV     A,#0x10
   \   000072   78..         MOV     R0,#?V0 + 0
   \   000074   12....       LCALL   ?UL_SHR
   \   000077   12....       LCALL   ?Subroutine20 & 0xFFFF
   1514              *pBuf++ = BREAK_UINT32(pDev->linkInfo.inFrmCntr, 3);
   \                     ??CrossCallReturnLabel_55:
   \   00007A   12....       LCALL   ?L_MOV_X
   \   00007D   7418         MOV     A,#0x18
   \   00007F   78..         MOV     R0,#?V0 + 0
   \   000081   12....       LCALL   ?UL_SHR
   \   000084   8A82         MOV     DPL,R2
   \   000086   8B83         MOV     DPH,R3
   \   000088   E5..         MOV     A,?V0 + 0
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   A3           INC     DPTR
   \   00008C   0A           INC     R2
   \   00008D   AB83         MOV     R3,DPH
   1515              *pBuf++ = LO_UINT16(pDev->linkInfo.txFailure);
   \   00008F   EC           MOV     A,R4
   \   000090   2410         ADD     A,#0x10
   \   000092   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   000095   12....       LCALL   ?Subroutine16 & 0xFFFF
   1516              *pBuf++ = HI_UINT16(pDev->linkInfo.txFailure);
   \                     ??CrossCallReturnLabel_20:
   \   000098   8882         MOV     DPL,R0
   \   00009A   8983         MOV     DPH,R1
   \   00009C   A3           INC     DPTR
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   8A82         MOV     DPL,R2
   \   0000A0   8B83         MOV     DPH,R3
   \                     ??packDev_t_1:
   \   0000A2   F0           MOVX    @DPTR,A
   1517            }
   1518          }
   \   0000A3   7F04         MOV     R7,#0x4
   \   0000A5   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F8           MOV     R0,A
   \   000001   ED           MOV     A,R5
   \   000002                REQUIRE ??Subroutine40_0
   \   000002                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E5..         MOV     A,?V0 + 0
   \   000006                REQUIRE ??Subroutine41_0
   \   000006                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   0A           INC     R2
   \   000003   AB83         MOV     R3,DPH
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   78..         MOV     R0,#?V0 + 0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000003   8C82         MOV     DPL,R4
   \   000005   8D83         MOV     DPH,R5
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E8           MOV     A,R0
   \   000002   FA           MOV     R2,A
   \   000003   E9           MOV     A,R1
   \   000004   FB           MOV     R3,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   74FF         MOV     A,#-0x1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   F8           MOV     R0,A
   \   000001   ED           MOV     A,R5
   \   000002   3400         ADDC    A,#0x0
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   FE           MOV     R6,A
   \   000007   E9           MOV     A,R1
   \   000008   FF           MOV     R7,A
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003   EC           MOV     A,R4
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004   E0           MOVX    A,@DPTR
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   E8           MOV     A,R0
   \   00000B   FA           MOV     R2,A
   \   00000C   E9           MOV     A,R1
   \   00000D   FB           MOV     R3,A
   \   00000E   8C82         MOV     DPL,R4
   \   000010   8D83         MOV     DPH,R5
   \   000012   A3           INC     DPTR
   \   000013   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_39:
   \   000016   2402         ADD     A,#0x2
   \   000018   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   00001B   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
   \   000022   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000025   8C82         MOV     DPL,R4
   \   000027   8D83         MOV     DPH,R5
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00002F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine42_0
   \   000001                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0A           INC     R2
   \   000008   AB83         MOV     R3,DPH
   \   00000A   22           RET
   1519          
   1520          /***************************************************************************************************
   1521           * @fn      packBindEntry_t
   1522           *
   1523           * @brief   Pack a BindingEntry_t structure into a byte buffer (pack INVALID_NODE_ADDR
   1524           *          as dstIdx if the pBind parameter is NULL).
   1525           *
   1526           * @param   pBuf - pointer to the buffer into which to pack the structure.
   1527           * @param   pBind - pointer to the structure.
   1528           *
   1529           * @return  void
   1530           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1531          static void packBindEntry_t(uint8 *pBuf, BindingEntry_t *pBind)
   \                     packBindEntry_t:
   1532          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   1533            if ( NULL == pBind )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A882         MOV     R0,DPL
   \   00000C   A983         MOV     R1,DPH
   \   00000E   EC           MOV     A,R4
   \   00000F   4D           ORL     A,R5
   \   000010   7016         JNZ     ??packBindEntry_t_0
   1534            {
   1535              uint16 rtrn = INVALID_NODE_ADDR;
   1536              *pBuf++ = 0xFF;
   \   000012   8A82         MOV     DPL,R2
   \   000014   8B83         MOV     DPH,R3
   \   000016   74FF         MOV     A,#-0x1
   \   000018   12....       LCALL   ?Subroutine24 & 0xFFFF
   1537              *pBuf++ = 0xFF;
   \                     ??CrossCallReturnLabel_33:
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   1538              *pBuf++ = LO_UINT16(rtrn);
   \   00001D   14           DEC     A
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   1539              *pBuf++ = HI_UINT16(rtrn);
   \   000020   04           INC     A
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
   1540              *pBuf++ = 0xFF;
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   1541              *pBuf++ = 0xFF;
   \   000025   F0           MOVX    @DPTR,A
   \   000026   8030         SJMP    ??packBindEntry_t_1
   1542          
   1543            }
   1544            else
   1545            {
   1546              *pBuf++ = pBind->srcEP;
   \                     ??packBindEntry_t_0:
   \   000028   12....       LCALL   ?Subroutine8 & 0xFFFF
   1547              *pBuf++ = pBind->dstGroupMode;
   1548              *pBuf++ = LO_UINT16( pBind->dstIdx );
   1549              *pBuf++ = HI_UINT16( pBind->dstIdx );
   1550              *pBuf++ = pBind->dstEP;
   1551              *pBuf++ = pBind->numClusterIds;
   \                     ??CrossCallReturnLabel_1:
   \   00002B   EC           MOV     A,R4
   \   00002C   2405         ADD     A,#0x5
   \   00002E   12....       LCALL   ?Subroutine19 & 0xFFFF
   1552          
   1553              osal_memcpy( pBuf, pBind->clusterIdList, pBind->numClusterIds * sizeof(uint16));
   1554            }
   \                     ??CrossCallReturnLabel_26:
   \   000031   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000034   2406         ADD     A,#0x6
   \   000036   F5..         MOV     ?V0 + 0,A
   \   000038   ED           MOV     A,R5
   \   000039   3400         ADDC    A,#0x0
   \   00003B   F5..         MOV     ?V0 + 1,A
   \   00003D   75..00       MOV     ?V0 + 2,#0x0
   \   000040   78..         MOV     R0,#?V0 + 0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000045   8E82         MOV     DPL,R6
   \   000047   8F83         MOV     DPH,R7
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   C3           CLR     C
   \   00004B   33           RLC     A
   \   00004C   FC           MOV     R4,A
   \   00004D   E4           CLR     A
   \   00004E   33           RLC     A
   \   00004F   FD           MOV     R5,A
   \   000050   12....       LCALL   ??osal_memcpy?relay
   \   000053   7403         MOV     A,#0x3
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
   1555          }
   \                     ??packBindEntry_t_1:
   \   000058   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UtilCommandProcessing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UtilCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UtilGetDeviceInfo?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UtilGetDeviceInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UtilGetNvInfo?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UtilGetNvInfo

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UtilSetPanID?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UtilSetPanID

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UtilSetChannels?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UtilSetChannels

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UtilSetSecLevel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UtilSetSecLevel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UtilSetPreCfgKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UtilSetPreCfgKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UtilCallbackSub?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UtilCallbackSub

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UtilTimeAlive?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UtilTimeAlive

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UtilLedControl?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UtilLedControl

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UtilSrcMatchEnable?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UtilSrcMatchEnable

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UtilSrcMatchAddEntry?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UtilSrcMatchAddEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UtilSrcMatchDeleteEntry?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UtilSrcMatchDeleteEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UtilSrcMatchCheckSrcAddr?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UtilSrcMatchCheckSrcAddr

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UtilSrcMatchAckAllPending?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UtilSrcMatchAckAllPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UtilSrcMatchCheckAllPending?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UtilSrcMatchCheckAllPending

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UtilDataReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UtilDataReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UtilAddrMgrEntryLookupExt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UtilAddrMgrEntryLookupExt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UtilAssocFindDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UtilAssocFindDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UtilAssocGetWithAddress?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UtilAssocGetWithAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_UtilBindAddEntry?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_UtilBindAddEntry

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packDev_t?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packDev_t

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??packBindEntry_t?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    packBindEntry_t
   1556          
   1557          #if defined ZCL_KEY_ESTABLISH
   1558          /***************************************************************************************************
   1559           * @fn      MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment
   1560           *
   1561           * @brief   Proxy the zclGeneral_KeyEstablish_InitiateKeyEstablishment() function.
   1562           *
   1563           * @param   pBuf - pointer to the received buffer
   1564           *
   1565           * @return  void
   1566           ***************************************************************************************************/
   1567          static void MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment(uint8 *pBuf)
   1568          {
   1569            afAddrType_t partnerAddr;
   1570            uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
   1571            pBuf += MT_RPC_FRAME_HDR_SZ;
   1572          
   1573            partnerAddr.panId = 0;  // Not an inter-pan message.
   1574            partnerAddr.endPoint = pBuf[2];
   1575            partnerAddr.addrMode = (afAddrMode_t)pBuf[3];
   1576            if (afAddr64Bit == partnerAddr.addrMode)
   1577            {
   1578              (void)osal_memcpy(partnerAddr.addr.extAddr, pBuf+4, Z_EXTADDR_LEN);
   1579            }
   1580            else
   1581            {
   1582              partnerAddr.addr.shortAddr = BUILD_UINT16(pBuf[4], pBuf[5]);
   1583            }
   1584          
   1585            zcl_key_establish_task_id = pBuf[0];
   1586            *pBuf = zclGeneral_KeyEstablish_InitiateKeyEstablishment(MT_TaskID, &partnerAddr, pBuf[1]);
   1587            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, pBuf);
   1588          }
   1589          
   1590          /***************************************************************************************************
   1591           * @fn      MT_UtilzclGeneral_KeyEstablishment_ECDSASign
   1592           *
   1593           * @brief   Proxy the zclGeneral_KeyEstablishment_ECDSASign() function.
   1594           *
   1595           * @param   pBuf - pointer to the received buffer
   1596           *
   1597           * @return  void
   1598           ***************************************************************************************************/
   1599          static void MT_UtilzclGeneral_KeyEstablishment_ECDSASign(uint8 *pBuf)
   1600          {
   1601          #if defined TC_LINKKEY_JOIN
   1602            uint8 *output = osal_mem_alloc(SE_PROFILE_SIGNATURE_LENGTH+1);
   1603            uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
   1604            pBuf += MT_RPC_FRAME_HDR_SZ;
   1605          
   1606            if (NULL == output)
   1607            {
   1608              *pBuf = FAILURE;
   1609              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, pBuf);
   1610            }
   1611            else
   1612            {
   1613              *output = zclGeneral_KeyEstablishment_ECDSASign(pBuf+1, *pBuf, output+1);
   1614              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
   1615                                                   SE_PROFILE_SIGNATURE_LENGTH+1, output);
   1616              osal_mem_free(output);
   1617            }
   1618          #endif
   1619          }
   1620          
   1621          /***************************************************************************************************
   1622           * @fn      MT_UtilKeyEstablishInd
   1623           *
   1624           * @brief   Proxy the ZCL_KEY_ESTABLISH_IND command.
   1625           *
   1626           * @param   pInd - Pointer to a keyEstablishmentInd_t structure.
   1627           *
   1628           * @return  None
   1629           ***************************************************************************************************/
   1630          void MT_UtilKeyEstablishInd(keyEstablishmentInd_t *pInd)
   1631          {
   1632            uint8 msg[6];
   1633          
   1634            msg[0] = zcl_key_establish_task_id;
   1635            msg[1] = pInd->hdr.event;
   1636            msg[2] = pInd->hdr.status;
   1637            msg[3] = pInd->waitTime;
   1638            msg[4] = LO_UINT16(pInd->keyEstablishmentSuite);
   1639            msg[5] = HI_UINT16(pInd->keyEstablishmentSuite);
   1640          
   1641            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_UTIL),
   1642                                                 MT_UTIL_ZCL_KEY_ESTABLISH_IND, 6, msg);
   1643          }
   1644          #endif
   1645          
   1646          /***************************************************************************************************
   1647           * @fn      MT_UtilSync
   1648           *
   1649           * @brief   Process the MT_UTIL_SYNC command
   1650           *
   1651           * @param   None
   1652           *
   1653           * @return  None
   1654           ***************************************************************************************************/
   1655          static void MT_UtilSync(void)
   1656          {
   1657           MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_UTIL),MT_UTIL_SYNC_REQ,0,0);
   1658          }
   1659          #endif /* !defined NONWK */
   1660          #endif /* MT_UTIL_FUNC */
   1661          /**************************************************************************************************
   1662           **************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       1      0     70  MT_UtilAddrMgrEntryLookupExt
                          0 0 26 -> AddrMgrEntryLookupExt
                          0 0 26 -> MT_BuildAndSendZToolResponse
                          0 0 29 -> osal_memcpy
       0      0     72  MT_UtilAssocFindDevice
                          0 0 31 -> AssocFindDevice
                          0 0 31 -> MT_BuildAndSendZToolResponse
                          0 0 31 -> packDev_t
       0      0     72  MT_UtilAssocGetWithAddress
                          0 0 31 -> AddrMgrExtAddrValid
                          0 0 31 -> AssocGetWithAddress
                          0 0 31 -> MT_BuildAndSendZToolResponse
                          0 0 31 -> packDev_t
       1      0     86  MT_UtilBindAddEntry
                          0 0 42 -> MT_BuildAndSendZToolResponse
                          0 0 44 -> bindAddEntry
                          0 0 42 -> osal_mem_alloc
                          0 0 42 -> osal_mem_free
                          0 0 45 -> osal_memcpy
                          0 0 42 -> osal_memset
                          0 0 42 -> packBindEntry_t
                          0 0 42 -> sAddrExtCpy
       0      0     51  MT_UtilCallbackSub
                          0 0 10 -> MT_BuildAndSendZToolResponse
       1      0     44  MT_UtilCommandProcessing
                          0 0 41 -> AddrMgrEntryLookupNwk
                          0 0 41 -> AssocCount
                          0 0 41 -> MT_BuildAndSendZToolResponse
                          0 0 41 -> MT_UtilAddrMgrEntryLookupExt
                          0 0 41 -> MT_UtilAssocFindDevice
                          0 0 41 -> MT_UtilAssocGetWithAddress
                          0 0 41 -> MT_UtilBindAddEntry
                          0 0 41 -> MT_UtilCallbackSub
                          0 0 41 -> MT_UtilDataReq
                          0 0 41 -> MT_UtilGetDeviceInfo
                          0 0 41 -> MT_UtilGetNvInfo
                          0 0 41 -> MT_UtilLedControl
                          0 0 41 -> MT_UtilSetChannels
                          0 0 41 -> MT_UtilSetPanID
                          0 0 41 -> MT_UtilSetPreCfgKey
                          0 0 41 -> MT_UtilSetSecLevel
                          0 0 41 -> MT_UtilSrcMatchAckAllPending
                          0 0 41 -> MT_UtilSrcMatchAddEntry
                          0 0 41 -> MT_UtilSrcMatchCheckAllPending
                          0 0 41 -> MT_UtilSrcMatchCheckSrcAddr
                          0 0 41 -> MT_UtilSrcMatchDeleteEntry
                          0 0 41 -> MT_UtilSrcMatchEnable
                          0 0 41 -> MT_UtilTimeAlive
                          0 0 41 -> ZDSecMgrRequestAppKey
                          0 0 44 -> osal_memcpy
       3      0     42  MT_UtilDataReq
                          2 0  1 -> MT_BuildAndSendZToolResponse
                          2 0  1 -> NwkPollReq
       1      0     62  MT_UtilGetDeviceInfo
                          0 0 17 -> AssocMakeList
                          0 0 17 -> MT_BuildAndSendZToolResponse
                          0 0 17 -> NLME_GetShortAddr
                          0 0 17 -> osal_mem_alloc
                          0 0 17 -> osal_mem_free
                          0 0 21 -> osal_nv_read
       1      0     67  MT_UtilGetNvInfo
                          0 0 22 -> MT_BuildAndSendZToolResponse
                          0 0 22 -> osal_mem_alloc
                          0 0 22 -> osal_mem_free
                          0 0 22 -> osal_memset
                          0 0 26 -> osal_nv_read
       0      0     51  MT_UtilLedControl
                          0 0 10 -> HalLedSet
                          0 0 10 -> MT_BuildAndSendZToolResponse
       1      0     66  MT_UtilSetChannels
                          0 0 21 -> MT_BuildAndSendZToolResponse
                          0 0 23 -> osal_nv_item_len
                          0 0 25 -> osal_nv_write
       1      0     58  MT_UtilSetPanID
                          0 0 13 -> MT_BuildAndSendZToolResponse
                          0 0 15 -> osal_nv_item_len
                          0 0 17 -> osal_nv_write
       1      0     56  MT_UtilSetPreCfgKey
                          0 0 11 -> MT_BuildAndSendZToolResponse
                          0 0 13 -> osal_nv_item_len
                          0 0 15 -> osal_nv_write
       1      0     56  MT_UtilSetSecLevel
                          0 0 11 -> MT_BuildAndSendZToolResponse
                          0 0 13 -> osal_nv_item_len
                          0 0 15 -> osal_nv_write
       2      0     42  MT_UtilSrcMatchAckAllPending
                          2 0  1 -> MT_BuildAndSendZToolResponse
       2      0     42  MT_UtilSrcMatchAddEntry
                          2 0  1 -> MT_BuildAndSendZToolResponse
       2      0     43  MT_UtilSrcMatchCheckAllPending
                          2 0  2 -> MT_BuildAndSendZToolResponse
       2      0     43  MT_UtilSrcMatchCheckSrcAddr
                          2 0  2 -> MT_BuildAndSendZToolResponse
       2      0     42  MT_UtilSrcMatchDeleteEntry
                          2 0  1 -> MT_BuildAndSendZToolResponse
       2      0     42  MT_UtilSrcMatchEnable
                          2 0  1 -> MT_BuildAndSendZToolResponse
       1      0     61  MT_UtilTimeAlive
                          0 0 20 -> MT_BuildAndSendZToolResponse
                          0 0 20 -> osal_GetSystemClock
       1      0     56  packBindEntry_t
                          0 0 14 -> osal_memcpy
       1      0     43  packDev_t


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??MT_UtilAddrMgrEntryLookupExt?relay
       6  ??MT_UtilAssocFindDevice?relay
       6  ??MT_UtilAssocGetWithAddress?relay
       6  ??MT_UtilBindAddEntry?relay
       6  ??MT_UtilCallbackSub?relay
       6  ??MT_UtilCommandProcessing?relay
       6  ??MT_UtilDataReq?relay
       6  ??MT_UtilGetDeviceInfo?relay
       6  ??MT_UtilGetNvInfo?relay
       6  ??MT_UtilLedControl?relay
       6  ??MT_UtilSetChannels?relay
       6  ??MT_UtilSetPanID?relay
       6  ??MT_UtilSetPreCfgKey?relay
       6  ??MT_UtilSetSecLevel?relay
       6  ??MT_UtilSrcMatchAckAllPending?relay
       6  ??MT_UtilSrcMatchAddEntry?relay
       6  ??MT_UtilSrcMatchCheckAllPending?relay
       6  ??MT_UtilSrcMatchCheckSrcAddr?relay
       6  ??MT_UtilSrcMatchDeleteEntry?relay
       6  ??MT_UtilSrcMatchEnable?relay
       6  ??MT_UtilTimeAlive?relay
       8  ??Subroutine35_0
       8  ??Subroutine36_0
       7  ??Subroutine37_0
      10  ??Subroutine38_0
       8  ??Subroutine39_0
       8  ??Subroutine40_0
      12  ??Subroutine41_0
       4  ??Subroutine42_0
       6  ??packBindEntry_t?relay
       6  ??packDev_t?relay
       8  ?Subroutine0
       8  ?Subroutine1
      14  ?Subroutine10
       6  ?Subroutine11
       4  ?Subroutine12
       4  ?Subroutine13
      13  ?Subroutine14
      13  ?Subroutine15
       4  ?Subroutine16
      16  ?Subroutine17
       4  ?Subroutine18
      14  ?Subroutine19
      18  ?Subroutine2
       6  ?Subroutine20
      19  ?Subroutine21
       6  ?Subroutine22
       7  ?Subroutine23
      12  ?Subroutine24
       9  ?Subroutine25
      15  ?Subroutine26
       5  ?Subroutine27
       1  ?Subroutine28
       2  ?Subroutine29
       7  ?Subroutine3
      11  ?Subroutine30
       9  ?Subroutine31
      21  ?Subroutine32
      12  ?Subroutine33
      11  ?Subroutine34
      21  ?Subroutine4
       5  ?Subroutine5
      12  ?Subroutine6
       9  ?Subroutine7
      48  ?Subroutine8
      11  ?Subroutine9
     105  MT_UtilAddrMgrEntryLookupExt
      51  MT_UtilAssocFindDevice
     123  MT_UtilAssocGetWithAddress
     282  MT_UtilBindAddEntry
     117  MT_UtilCallbackSub
     509  MT_UtilCommandProcessing
      28  MT_UtilDataReq
     299  MT_UtilGetDeviceInfo
     487  MT_UtilGetNvInfo
     136  MT_UtilLedControl
     166  MT_UtilSetChannels
      88  MT_UtilSetPanID
      40  MT_UtilSetPreCfgKey
      38  MT_UtilSetSecLevel
       0  MT_UtilSrcMatchAckAllPending
       2  MT_UtilSrcMatchAddEntry
      18  MT_UtilSrcMatchCheckAllPending
      17  MT_UtilSrcMatchCheckSrcAddr
       2  MT_UtilSrcMatchDeleteEntry
       2  MT_UtilSrcMatchEnable
     115  MT_UtilTimeAlive
       4  __Constant_3e8
      91  packBindEntry_t
     168  packDev_t

 
 3 334 bytes in segment BANKED_CODE
   138 bytes in segment BANK_RELAYS
     4 bytes in segment XDATA_ROM_C
 
 3 472 bytes of CODE  memory
     0 bytes of CONST memory (+ 4 bytes shared)

Errors: none
Warnings: none
