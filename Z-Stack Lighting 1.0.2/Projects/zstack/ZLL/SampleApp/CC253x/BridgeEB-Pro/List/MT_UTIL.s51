///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            12/Apr/2014  12:18:03 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\Texas Instruments\Z-Stack Lighting             /
//                          1.0.2\Components\mt\MT_UTIL.c                     /
//    Command line       =  -f "D:\Texas Instruments\Z-Stack Lighting         /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ      /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f "D:\Texas        /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO     /
//                          -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f "D:\Texas              /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wZCL.cfg" "D:\Texas           /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Components\mt\MT_UTIL.c" -D                 /
//                          FEATURE_GREEN_POWER -D SECURE=1 -D                /
//                          TC_LINKKEY_JOIN -D ZDSECMGR_TC_DEVICE_MAX=2 -D    /
//                          NV_RESTORE -D HOLD_AUTO_START -D INTER_PAN -D     /
//                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D             /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D MT_ZDO_CB_FUNC -D   /
//                          MT_UTIL_FUNC -D MT_ZDO_MGMT -D LCD_SUPPORTED -D   /
//                          HAL_LCD=FALSE -D HAL_KEY=FALSE -D ZCL_BASIC -D    /
//                          ZCL_READ -D ZCL_WRITE -D ZCL_IDENTIFY -D          /
//                          ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D         /
//                          ZCL_LIGHT_LINK_ENHANCE -D ZCL_LEVEL_CTRL -D       /
//                          ZCL_COLOR_CTRL -D xMAX_CHANNELS_24GHZ=0x02108800  /
//                          -lC "D:\Texas Instruments\Z-Stack Lighting        /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Bridge /
//                          EB-Pro\List\" -lA "D:\Texas Instruments\Z-Stack   /
//                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC25 /
//                          3x\BridgeEB-Pro\List\" --diag_suppress            /
//                          Pe001,Pa010 -o "D:\Texas Instruments\Z-Stack      /
//                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC25 /
//                          3x\BridgeEB-Pro\Obj\" -e --debug --core=plain     /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "D:\Texas                 /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\" -I   /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\Sou /
//                          rce\" -I "D:\Texas Instruments\Z-Stack Lighting   /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          Source\" -I "D:\Texas Instruments\Z-Stack         /
//                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC25 /
//                          3x\..\..\..\HomeAutomation\Source\" -I "D:\Texas  /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\HomeAutomation\SampleLight\Source\" -I         /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\ZMain\TI2530DB\" -I "D:\Texas                  /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\hal\include\" -I "D:\Texas    /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\hal\target\CC2530EB\" -I      /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\include\" -I "D:\Texas    /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\high_level\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\low_level\srf04\" -I      /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\low_level\srf04\single_ch /
//                          ip\" -I "D:\Texas Instruments\Z-Stack Lighting    /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mt\" -I "D:\Texas             /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\osal\include\" -I "D:\Texas   /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\services\saddr\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\services\sdata\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\af\" -I "D:\Texas       /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\nwk\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sapi\" -I "D:\Texas     /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sec\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sys\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\zcl\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\zdo\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\zmac\" -I "D:\Texas           /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\zmac\f8w\" -Ohz               /
//                          --require_prototypes                              /
//    List file          =  D:\Texas Instruments\Z-Stack Lighting             /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Bridge /
//                          EB-Pro\List\MT_UTIL.s51                           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME MT_UTIL

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_ADD
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SHL
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?UL_DIV_MOD
        EXTERN ?UL_SHR
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8

        FUNCTION ??MT_UtilAddrMgrEntryLookupExt?relay,0203H
        FUNCTION ??MT_UtilAssocFindDevice?relay,0203H
        FUNCTION ??MT_UtilAssocGetWithAddress?relay,0203H
        FUNCTION ??MT_UtilBindAddEntry?relay,0203H
        PUBLIC ??MT_UtilCallbackSub?relay
        FUNCTION ??MT_UtilCallbackSub?relay,0203H
        PUBLIC ??MT_UtilCommandProcessing?relay
        FUNCTION ??MT_UtilCommandProcessing?relay,0203H
        PUBLIC ??MT_UtilDataReq?relay
        FUNCTION ??MT_UtilDataReq?relay,0203H
        PUBLIC ??MT_UtilGetDeviceInfo?relay
        FUNCTION ??MT_UtilGetDeviceInfo?relay,0203H
        PUBLIC ??MT_UtilGetNvInfo?relay
        FUNCTION ??MT_UtilGetNvInfo?relay,0203H
        PUBLIC ??MT_UtilLedControl?relay
        FUNCTION ??MT_UtilLedControl?relay,0203H
        PUBLIC ??MT_UtilSetChannels?relay
        FUNCTION ??MT_UtilSetChannels?relay,0203H
        PUBLIC ??MT_UtilSetPanID?relay
        FUNCTION ??MT_UtilSetPanID?relay,0203H
        PUBLIC ??MT_UtilSetPreCfgKey?relay
        FUNCTION ??MT_UtilSetPreCfgKey?relay,0203H
        PUBLIC ??MT_UtilSetSecLevel?relay
        FUNCTION ??MT_UtilSetSecLevel?relay,0203H
        PUBLIC ??MT_UtilSrcMatchAckAllPending?relay
        FUNCTION ??MT_UtilSrcMatchAckAllPending?relay,0203H
        PUBLIC ??MT_UtilSrcMatchAddEntry?relay
        FUNCTION ??MT_UtilSrcMatchAddEntry?relay,0203H
        PUBLIC ??MT_UtilSrcMatchCheckAllPending?relay
        FUNCTION ??MT_UtilSrcMatchCheckAllPending?relay,0203H
        PUBLIC ??MT_UtilSrcMatchCheckSrcAddr?relay
        FUNCTION ??MT_UtilSrcMatchCheckSrcAddr?relay,0203H
        PUBLIC ??MT_UtilSrcMatchDeleteEntry?relay
        FUNCTION ??MT_UtilSrcMatchDeleteEntry?relay,0203H
        PUBLIC ??MT_UtilSrcMatchEnable?relay
        FUNCTION ??MT_UtilSrcMatchEnable?relay,0203H
        PUBLIC ??MT_UtilTimeAlive?relay
        FUNCTION ??MT_UtilTimeAlive?relay,0203H
        FUNCTION ??packBindEntry_t?relay,0203H
        FUNCTION ??packDev_t?relay,0203H
        FUNCTION MT_UtilAddrMgrEntryLookupExt,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 29, STACK
        FUNCTION MT_UtilAssocFindDevice,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        FUNCTION MT_UtilAssocGetWithAddress,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        FUNCTION MT_UtilBindAddEntry,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 45, STACK
        PUBLIC MT_UtilCallbackSub
        FUNCTION MT_UtilCallbackSub,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_UtilCommandProcessing
        FUNCTION MT_UtilCommandProcessing,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 44, STACK
        PUBLIC MT_UtilDataReq
        FUNCTION MT_UtilDataReq,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC MT_UtilGetDeviceInfo
        FUNCTION MT_UtilGetDeviceInfo,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 21, STACK
        PUBLIC MT_UtilGetNvInfo
        FUNCTION MT_UtilGetNvInfo,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        PUBLIC MT_UtilLedControl
        FUNCTION MT_UtilLedControl,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC MT_UtilSetChannels
        FUNCTION MT_UtilSetChannels,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC MT_UtilSetPanID
        FUNCTION MT_UtilSetPanID,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 17, STACK
        PUBLIC MT_UtilSetPreCfgKey
        FUNCTION MT_UtilSetPreCfgKey,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC MT_UtilSetSecLevel
        FUNCTION MT_UtilSetSecLevel,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC MT_UtilSrcMatchAckAllPending
        FUNCTION MT_UtilSrcMatchAckAllPending,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC MT_UtilSrcMatchAddEntry
        FUNCTION MT_UtilSrcMatchAddEntry,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC MT_UtilSrcMatchCheckAllPending
        FUNCTION MT_UtilSrcMatchCheckAllPending,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC MT_UtilSrcMatchCheckSrcAddr
        FUNCTION MT_UtilSrcMatchCheckSrcAddr,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 2, STACK
        PUBLIC MT_UtilSrcMatchDeleteEntry
        FUNCTION MT_UtilSrcMatchDeleteEntry,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC MT_UtilSrcMatchEnable
        FUNCTION MT_UtilSrcMatchEnable,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC MT_UtilTimeAlive
        FUNCTION MT_UtilTimeAlive,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBWEAK __Constant_3e8
        FUNCTION packBindEntry_t,021203H
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION packDev_t,0203H
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AddrMgrEntryLookupExt SYMBOL "AddrMgrEntryLookupExt"
??AddrMgrEntryLookupExt?relay SYMBOL "?relay", AddrMgrEntryLookupExt
AddrMgrEntryLookupNwk SYMBOL "AddrMgrEntryLookupNwk"
??AddrMgrEntryLookupNwk?relay SYMBOL "?relay", AddrMgrEntryLookupNwk
AddrMgrExtAddrValid SYMBOL "AddrMgrExtAddrValid"
??AddrMgrExtAddrValid?relay SYMBOL "?relay", AddrMgrExtAddrValid
AssocCount          SYMBOL "AssocCount"
??AssocCount?relay  SYMBOL "?relay", AssocCount
AssocFindDevice     SYMBOL "AssocFindDevice"
??AssocFindDevice?relay SYMBOL "?relay", AssocFindDevice
AssocGetWithAddress SYMBOL "AssocGetWithAddress"
??AssocGetWithAddress?relay SYMBOL "?relay", AssocGetWithAddress
AssocMakeList       SYMBOL "AssocMakeList"
??AssocMakeList?relay SYMBOL "?relay", AssocMakeList
HalLedSet           SYMBOL "HalLedSet"
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
MT_BuildAndSendZToolResponse SYMBOL "MT_BuildAndSendZToolResponse"
??MT_BuildAndSendZToolResponse?relay SYMBOL "?relay", MT_BuildAndSendZToolResponse
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
NwkPollReq          SYMBOL "NwkPollReq"
??NwkPollReq?relay  SYMBOL "?relay", NwkPollReq
ZDSecMgrRequestAppKey SYMBOL "ZDSecMgrRequestAppKey"
??ZDSecMgrRequestAppKey?relay SYMBOL "?relay", ZDSecMgrRequestAppKey
bindAddEntry        SYMBOL "bindAddEntry"
??bindAddEntry?relay SYMBOL "?relay", bindAddEntry
osal_GetSystemClock SYMBOL "osal_GetSystemClock"
??osal_GetSystemClock?relay SYMBOL "?relay", osal_GetSystemClock
osal_mem_alloc      SYMBOL "osal_mem_alloc"
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
??osal_memset?relay SYMBOL "?relay", osal_memset
osal_nv_item_len    SYMBOL "osal_nv_item_len"
??osal_nv_item_len?relay SYMBOL "?relay", osal_nv_item_len
osal_nv_read        SYMBOL "osal_nv_read"
??osal_nv_read?relay SYMBOL "?relay", osal_nv_read
osal_nv_write       SYMBOL "osal_nv_write"
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
sAddrExtCpy         SYMBOL "sAddrExtCpy"
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
MT_UtilCallbackSub  SYMBOL "MT_UtilCallbackSub"
??MT_UtilCallbackSub?relay SYMBOL "?relay", MT_UtilCallbackSub
MT_UtilCommandProcessing SYMBOL "MT_UtilCommandProcessing"
??MT_UtilCommandProcessing?relay SYMBOL "?relay", MT_UtilCommandProcessing
MT_UtilDataReq      SYMBOL "MT_UtilDataReq"
??MT_UtilDataReq?relay SYMBOL "?relay", MT_UtilDataReq
MT_UtilGetDeviceInfo SYMBOL "MT_UtilGetDeviceInfo"
??MT_UtilGetDeviceInfo?relay SYMBOL "?relay", MT_UtilGetDeviceInfo
MT_UtilGetNvInfo    SYMBOL "MT_UtilGetNvInfo"
??MT_UtilGetNvInfo?relay SYMBOL "?relay", MT_UtilGetNvInfo
MT_UtilLedControl   SYMBOL "MT_UtilLedControl"
??MT_UtilLedControl?relay SYMBOL "?relay", MT_UtilLedControl
MT_UtilSetChannels  SYMBOL "MT_UtilSetChannels"
??MT_UtilSetChannels?relay SYMBOL "?relay", MT_UtilSetChannels
MT_UtilSetPanID     SYMBOL "MT_UtilSetPanID"
??MT_UtilSetPanID?relay SYMBOL "?relay", MT_UtilSetPanID
MT_UtilSetPreCfgKey SYMBOL "MT_UtilSetPreCfgKey"
??MT_UtilSetPreCfgKey?relay SYMBOL "?relay", MT_UtilSetPreCfgKey
MT_UtilSetSecLevel  SYMBOL "MT_UtilSetSecLevel"
??MT_UtilSetSecLevel?relay SYMBOL "?relay", MT_UtilSetSecLevel
MT_UtilSrcMatchAckAllPending SYMBOL "MT_UtilSrcMatchAckAllPending"
??MT_UtilSrcMatchAckAllPending?relay SYMBOL "?relay", MT_UtilSrcMatchAckAllPending
MT_UtilSrcMatchAddEntry SYMBOL "MT_UtilSrcMatchAddEntry"
??MT_UtilSrcMatchAddEntry?relay SYMBOL "?relay", MT_UtilSrcMatchAddEntry
MT_UtilSrcMatchCheckAllPending SYMBOL "MT_UtilSrcMatchCheckAllPending"
??MT_UtilSrcMatchCheckAllPending?relay SYMBOL "?relay", MT_UtilSrcMatchCheckAllPending
MT_UtilSrcMatchCheckSrcAddr SYMBOL "MT_UtilSrcMatchCheckSrcAddr"
??MT_UtilSrcMatchCheckSrcAddr?relay SYMBOL "?relay", MT_UtilSrcMatchCheckSrcAddr
MT_UtilSrcMatchDeleteEntry SYMBOL "MT_UtilSrcMatchDeleteEntry"
??MT_UtilSrcMatchDeleteEntry?relay SYMBOL "?relay", MT_UtilSrcMatchDeleteEntry
MT_UtilSrcMatchEnable SYMBOL "MT_UtilSrcMatchEnable"
??MT_UtilSrcMatchEnable?relay SYMBOL "?relay", MT_UtilSrcMatchEnable
MT_UtilTimeAlive    SYMBOL "MT_UtilTimeAlive"
??MT_UtilTimeAlive?relay SYMBOL "?relay", MT_UtilTimeAlive

        EXTERN ??AddrMgrEntryLookupExt?relay
        FUNCTION ??AddrMgrEntryLookupExt?relay,00H
        EXTERN ??AddrMgrEntryLookupNwk?relay
        FUNCTION ??AddrMgrEntryLookupNwk?relay,00H
        EXTERN ??AddrMgrExtAddrValid?relay
        FUNCTION ??AddrMgrExtAddrValid?relay,00H
        EXTERN ??AssocCount?relay
        FUNCTION ??AssocCount?relay,00H
        EXTERN ??AssocFindDevice?relay
        FUNCTION ??AssocFindDevice?relay,00H
        EXTERN ??AssocGetWithAddress?relay
        FUNCTION ??AssocGetWithAddress?relay,00H
        EXTERN ??AssocMakeList?relay
        FUNCTION ??AssocMakeList?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??MT_BuildAndSendZToolResponse?relay
        FUNCTION ??MT_BuildAndSendZToolResponse?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??NwkPollReq?relay
        FUNCTION ??NwkPollReq?relay,00H
        EXTERN ??ZDSecMgrRequestAppKey?relay
        FUNCTION ??ZDSecMgrRequestAppKey?relay,00H
        EXTERN ??bindAddEntry?relay
        FUNCTION ??bindAddEntry?relay,00H
        EXTERN ??osal_GetSystemClock?relay
        FUNCTION ??osal_GetSystemClock?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_nv_item_len?relay
        FUNCTION ??osal_nv_item_len?relay,00H
        EXTERN ??osal_nv_read?relay
        FUNCTION ??osal_nv_read?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H
        EXTERN AddrMgrEntryLookupExt
        FUNCTION AddrMgrEntryLookupExt,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrEntryLookupNwk
        FUNCTION AddrMgrEntryLookupNwk,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AddrMgrExtAddrValid
        FUNCTION AddrMgrExtAddrValid,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocCount
        FUNCTION AssocCount,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocFindDevice
        FUNCTION AssocFindDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocGetWithAddress
        FUNCTION AssocGetWithAddress,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AssocMakeList
        FUNCTION AssocMakeList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_BuildAndSendZToolResponse
        FUNCTION MT_BuildAndSendZToolResponse,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NwkPollReq
        FUNCTION NwkPollReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDSecMgrRequestAppKey
        FUNCTION ZDSecMgrRequestAppKey,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _zdoCallbackSub
        EXTERN bindAddEntry
        FUNCTION bindAddEntry,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN devState
        EXTERN osal_GetSystemClock
        FUNCTION osal_GetSystemClock,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_item_len
        FUNCTION osal_nv_item_len,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_read
        FUNCTION osal_nv_read,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zgDeviceLogicalType

// D:\Texas Instruments\Z-Stack Lighting 1.0.2\Components\mt\MT_UTIL.c
//    1 /***************************************************************************************************
//    2   Filename:       MT_UTIL.c
//    3   Revised:        $Date: 2013-11-13 13:09:12 -0800 (Wed, 13 Nov 2013) $
//    4   Revision:       $Revision: 36079 $
//    5 
//    6   Description:    MonitorTest Utility Functions
//    7 
//    8   Copyright 2007-2013 Texas Instruments Incorporated. All rights reserved.
//    9 
//   10   IMPORTANT: Your use of this Software is limited to those specific rights
//   11   granted under the terms of a software license agreement between the user
//   12   who downloaded the software, his/her employer (which must be your employer)
//   13   and Texas Instruments Incorporated (the "License"). You may not use this
//   14   Software unless you agree to abide by the terms of the License. The License
//   15   limits your use, and you acknowledge, that the Software may not be modified,
//   16   copied or distributed unless embedded on a Texas Instruments microcontroller
//   17   or used solely and exclusively in conjunction with a Texas Instruments radio
//   18   frequency transceiver, which is integrated into your product. Other than for
//   19   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   20   works of, modify, distribute, perform, display or sell this Software and/or
//   21   its documentation for any purpose.
//   22 
//   23   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   24   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   25   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   26   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   27   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   28   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   29   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   30   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   31   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   32   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   33   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   34 
//   35   Should you have any questions regarding your right to use this Software,
//   36   contact Texas Instruments Incorporated at www.TI.com.
//   37 
//   38  ***************************************************************************************************/
//   39 
//   40 /***************************************************************************************************
//   41  * INCLUDES
//   42  ***************************************************************************************************/
//   43 #include "ZComDef.h"
//   44 
//   45 #include "AddrMgr.h"
//   46 
//   47 #include "OnBoard.h"   /* This is here because of the key reading */
//   48 #include "hal_key.h"
//   49 #include "hal_led.h"
//   50 #include "OSAL_Nv.h"
//   51 #include "osal.h"
//   52 #include "NLMEDE.h"
//   53 #include "MT.h"
//   54 #include "MT_UTIL.h"
//   55 #include "MT_MAC.h"
//   56 #include "ssp.h"
//   57 #if defined ZCL_KEY_ESTABLISH
//   58 #include "zcl_key_establish.h"
//   59 #if defined TC_LINKKEY_JOIN
//   60 #include "zcl_se.h"
//   61 #endif
//   62 #endif
//   63 
//   64 #if !defined NONWK
//   65 #include "MT_ZDO.h"
//   66 #include "MT_SAPI.h"
//   67 #include "MT_NWK.h"
//   68 #include "MT_AF.h"
//   69 #include "AssocList.h"
//   70 #include "ZDApp.h"
//   71 #include "ZDSecMgr.h"
//   72 #endif
//   73 
//   74 #if defined MT_SRNG
//   75 #include "hal_srng.h"
//   76 #endif
//   77 /***************************************************************************************************
//   78  * CONSTANTS
//   79  ***************************************************************************************************/
//   80 #define MT_UTIL_DEVICE_INFO_RESPONSE_LEN 14
//   81 #define MT_UTIL_STATUS_LEN    1
//   82 #define MT_UTIL_FRM_CTR_LEN   4
//   83 // Status + LinkKeyDataLen + Tx+Rx Frame counter.
//   84 #define MT_APSME_LINKKEY_GET_RSP_LEN (MT_UTIL_STATUS_LEN + SEC_KEY_LEN + (MT_UTIL_FRM_CTR_LEN * 2))
//   85 // Status + NV id
//   86 #define MT_APSME_LINKKEY_NV_ID_GET_RSP_LEN (MT_UTIL_STATUS_LEN + 2)
//   87 
//   88 /***************************************************************************************************
//   89  * LOCAL VARIABLES
//   90  ***************************************************************************************************/
//   91 #if defined ZCL_KEY_ESTABLISH
//   92 uint8 zcl_key_establish_task_id;
//   93 #endif
//   94 
//   95 /***************************************************************************************************
//   96  * LOCAL FUNCTIONS
//   97  ***************************************************************************************************/
//   98 #ifdef AUTO_PEND
//   99 static void MT_UtilRevExtCpy( uint8 *pDst, uint8 *pSrc );
//  100 static void MT_UtilSpi2Addr( zAddrType_t *pDst, uint8 *pSrc );
//  101 #endif
//  102 
//  103 #if defined (MT_UTIL_FUNC)
//  104 void MT_UtilGetDeviceInfo(void);
//  105 void MT_UtilGetNvInfo(void);
//  106 void MT_UtilSetPanID(uint8 *pBuf);
//  107 void MT_UtilSetChannels(uint8 *pBuf);
//  108 void MT_UtilSetSecLevel(uint8 *pBuf);
//  109 void MT_UtilSetPreCfgKey(uint8 *pBuf);
//  110 void MT_UtilCallbackSub(uint8 *pData);
//  111 void MT_UtilKeyEvent(uint8 *pBuf);
//  112 void MT_UtilTimeAlive(void);
//  113 void MT_UtilLedControl(uint8 *pBuf);
//  114 void MT_UtilSrcMatchEnable (uint8 *pBuf);
//  115 void MT_UtilSrcMatchAddEntry (uint8 *pBuf);
//  116 void MT_UtilSrcMatchDeleteEntry (uint8 *pBuf);
//  117 void MT_UtilSrcMatchCheckSrcAddr (uint8 *pBuf);
//  118 void MT_UtilSrcMatchAckAllPending (uint8 *pBuf);
//  119 void MT_UtilSrcMatchCheckAllPending (uint8 *pBuf);
//  120 #ifdef MT_SRNG
//  121 void MT_UtilSrngGen(void);
//  122 #endif
//  123 
//  124 #if !defined NONWK
//  125 void MT_UtilDataReq(uint8 *pBuf);
//  126 static void MT_UtilAddrMgrEntryLookupExt(uint8 *pBuf);
//  127 static void MT_UtilAddrMgrEntryLookupNwk(uint8 *pBuf);
//  128 #if defined MT_SYS_KEY_MANAGEMENT
//  129 static void MT_UtilAPSME_LinkKeyDataGet(uint8 *pBuf);
//  130 static void MT_UtilAPSME_LinkKeyNvIdGet(uint8 *pBuf);
//  131 #endif //MT_SYS_KEY_MANAGEMENT
//  132 static void MT_UtilAPSME_RequestKeyCmd(uint8 *pBuf);
//  133 static void MT_UtilAssocCount(uint8 *pBuf);
//  134 static void MT_UtilAssocFindDevice(uint8 *pBuf);
//  135 static void MT_UtilAssocGetWithAddress(uint8 *pBuf);
//  136 static void MT_UtilBindAddEntry(uint8 *pBuf);
//  137 static void packDev_t(uint8 *pBuf, associated_devices_t *pDev);
//  138 static void packBindEntry_t(uint8 *pBuf, BindingEntry_t *pBind);
//  139 #if defined ZCL_KEY_ESTABLISH
//  140 static void MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment(uint8 *pBuf);
//  141 static void MT_UtilzclGeneral_KeyEstablishment_ECDSASign(uint8 *pBuf);
//  142 #endif // ZCL_KEY_ESTABLISH
//  143 static void MT_UtilSync(void);
//  144 #endif // !defined NONWK
//  145 #endif // MT_UTIL_FUNC
//  146 
//  147 #if defined (MT_UTIL_FUNC)
//  148 /***************************************************************************************************
//  149 * @fn      MT_UtilProcessing
//  150 *
//  151 * @brief   Process all the DEBUG commands that are issued by test tool
//  152 *
//  153 * @param   pBuf  - pointer to received SPI data message
//  154 *
//  155 * @return  status
//  156 ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  157 uint8 MT_UtilCommandProcessing(uint8 *pBuf)
MT_UtilCommandProcessing:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function MT_UtilCommandProcessing
        CODE
//  158 {
        FUNCALL MT_UtilCommandProcessing, MT_UtilGetDeviceInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilGetNvInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilSetPanID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilSetChannels
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilSetSecLevel
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilSetPreCfgKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilCallbackSub
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilTimeAlive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilLedControl
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilSrcMatchEnable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilSrcMatchAddEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilSrcMatchDeleteEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilSrcMatchCheckSrcAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilSrcMatchAckAllPending
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilSrcMatchCheckAllPending
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilDataReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilAddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, AddrMgrEntryLookupNwk
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, ZDSecMgrRequestAppKey
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, AssocCount
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilAssocFindDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilAssocGetWithAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_UtilBindAddEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilCommandProcessing, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x13
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 22
        MOV     A,#-0x16
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 41)
//  159   uint8 status = MT_RPC_SUCCESS;
        MOV     ?V0 + 2,#0x0
//  160 
//  161   switch (pBuf[MT_RPC_POS_CMD1])
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R2
        ADD     A,#0x3
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,R0
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_0 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_1 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_2 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_3 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_4 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_5 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_6 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
        ADD     A,#-0x2
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_8 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_9 & 0xFFFF
        ADD     A,#-0x6
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_10 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_11 & 0xFFFF
        ADD     A,#-0xf
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_12 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_13 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_14 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_15 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_16 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_17 & 0xFFFF
        ADD     A,#-0x1b
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_18 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_19 & 0xFFFF
        ADD     A,#-0x7
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_20 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_21 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_22 & 0xFFFF
        DEC     A
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_23 & 0xFFFF
        ADD     A,#-0x2
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_24 & 0xFFFF
        ADD     A,#0x6d
        JNZ     $+5
        LJMP    ??MT_UtilCommandProcessing_25 & 0xFFFF
        LJMP    ??MT_UtilCommandProcessing_26 & 0xFFFF
//  162   {
//  163     // CC253X MAC Network Processor does not have NV support
//  164 #if !defined(CC253X_MACNP)
//  165   case MT_UTIL_GET_DEVICE_INFO:
//  166     MT_UtilGetDeviceInfo();
??MT_UtilCommandProcessing_0:
        ; Setup parameters for call to function MT_UtilGetDeviceInfo
        LCALL   ??MT_UtilGetDeviceInfo?relay
//  167     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  168 
//  169   case MT_UTIL_GET_NV_INFO:
//  170     MT_UtilGetNvInfo();
??MT_UtilCommandProcessing_1:
        ; Setup parameters for call to function MT_UtilGetNvInfo
        LCALL   ??MT_UtilGetNvInfo?relay
//  171     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  172 
//  173   case MT_UTIL_SET_PANID:
//  174     MT_UtilSetPanID(pBuf);
??MT_UtilCommandProcessing_2:
        ; Setup parameters for call to function MT_UtilSetPanID
        LCALL   ??MT_UtilSetPanID?relay
//  175     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  176 
//  177   case MT_UTIL_SET_CHANNELS:
//  178     MT_UtilSetChannels(pBuf);
??MT_UtilCommandProcessing_3:
        ; Setup parameters for call to function MT_UtilSetChannels
        LCALL   ??MT_UtilSetChannels?relay
//  179     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  180 
//  181   case MT_UTIL_SET_SECLEVEL:
//  182     MT_UtilSetSecLevel(pBuf);
??MT_UtilCommandProcessing_4:
        ; Setup parameters for call to function MT_UtilSetSecLevel
        LCALL   ??MT_UtilSetSecLevel?relay
//  183     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  184 
//  185   case MT_UTIL_SET_PRECFGKEY:
//  186     MT_UtilSetPreCfgKey(pBuf);
??MT_UtilCommandProcessing_5:
        ; Setup parameters for call to function MT_UtilSetPreCfgKey
        LCALL   ??MT_UtilSetPreCfgKey?relay
//  187     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  188 #endif
//  189   case MT_UTIL_CALLBACK_SUB_CMD:
//  190     MT_UtilCallbackSub(pBuf);
??MT_UtilCommandProcessing_6:
        ; Setup parameters for call to function MT_UtilCallbackSub
        LCALL   ??MT_UtilCallbackSub?relay
//  191     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  192 
//  193   case MT_UTIL_KEY_EVENT:
//  194 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
//  195     MT_UtilKeyEvent(pBuf);
//  196 #endif
//  197     break;
//  198 
//  199   case MT_UTIL_TIME_ALIVE:
//  200     MT_UtilTimeAlive();
??MT_UtilCommandProcessing_8:
        ; Setup parameters for call to function MT_UtilTimeAlive
        LCALL   ??MT_UtilTimeAlive?relay
//  201     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  202 
//  203   case MT_UTIL_LED_CONTROL:
//  204 #if (defined HAL_LED) && (HAL_LED == TRUE)
//  205     MT_UtilLedControl(pBuf);
??MT_UtilCommandProcessing_9:
        ; Setup parameters for call to function MT_UtilLedControl
        LCALL   ??MT_UtilLedControl?relay
//  206 #endif
//  207     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  208 
//  209   case MT_UTIL_SRC_MATCH_ENABLE:
//  210     MT_UtilSrcMatchEnable(pBuf);
??MT_UtilCommandProcessing_12:
        ; Setup parameters for call to function MT_UtilSrcMatchEnable
        LCALL   ??MT_UtilSrcMatchEnable?relay
//  211     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  212 
//  213   case MT_UTIL_SRC_MATCH_ADD_ENTRY:
//  214     MT_UtilSrcMatchAddEntry(pBuf);
??MT_UtilCommandProcessing_13:
        ; Setup parameters for call to function MT_UtilSrcMatchAddEntry
        LCALL   ??MT_UtilSrcMatchAddEntry?relay
//  215     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  216 
//  217   case MT_UTIL_SRC_MATCH_DEL_ENTRY:
//  218     MT_UtilSrcMatchDeleteEntry(pBuf);
??MT_UtilCommandProcessing_14:
        ; Setup parameters for call to function MT_UtilSrcMatchDeleteEntry
        LCALL   ??MT_UtilSrcMatchDeleteEntry?relay
//  219     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  220 
//  221   case MT_UTIL_SRC_MATCH_CHECK_SRC_ADDR:
//  222     MT_UtilSrcMatchCheckSrcAddr(pBuf);
??MT_UtilCommandProcessing_15:
        ; Setup parameters for call to function MT_UtilSrcMatchCheckSrcAddr
        LCALL   ??MT_UtilSrcMatchCheckSrcAddr?relay
//  223     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  224 
//  225   case MT_UTIL_SRC_MATCH_ACK_ALL_PENDING:
//  226     MT_UtilSrcMatchAckAllPending(pBuf);
??MT_UtilCommandProcessing_16:
        ; Setup parameters for call to function MT_UtilSrcMatchAckAllPending
        LCALL   ??MT_UtilSrcMatchAckAllPending?relay
//  227     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  228 
//  229   case MT_UTIL_SRC_MATCH_CHECK_ALL_PENDING:
//  230     MT_UtilSrcMatchCheckAllPending(pBuf);
??MT_UtilCommandProcessing_17:
        ; Setup parameters for call to function MT_UtilSrcMatchCheckAllPending
        LCALL   ??MT_UtilSrcMatchCheckAllPending?relay
//  231     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  232 
//  233   case MT_UTIL_TEST_LOOPBACK:
//  234     MT_BuildAndSendZToolResponse((MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_UTIL), MT_UTIL_TEST_LOOPBACK,
//  235                                  pBuf[MT_RPC_POS_LEN], (pBuf+MT_RPC_FRAME_HDR_SZ));
??MT_UtilCommandProcessing_10:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R2,#0x10
        LJMP    ??MT_UtilCommandProcessing_27 & 0xFFFF
//  236     break;
//  237 
//  238 #if !defined NONWK
//  239   case MT_UTIL_DATA_REQ:
//  240     MT_UtilDataReq(pBuf);
??MT_UtilCommandProcessing_11:
        ; Setup parameters for call to function MT_UtilDataReq
        LCALL   ??MT_UtilDataReq?relay
//  241     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  242 
//  243   case MT_UTIL_ADDRMGR_EXT_ADDR_LOOKUP:
//  244     MT_UtilAddrMgrEntryLookupExt(pBuf);
??MT_UtilCommandProcessing_18:
        ; Setup parameters for call to function MT_UtilAddrMgrEntryLookupExt
        LCALL   ??MT_UtilAddrMgrEntryLookupExt?relay
//  245     break;
        LJMP    ??MT_UtilCommandProcessing_7 & 0xFFFF
//  246 
//  247   case MT_UTIL_ADDRMGR_NWK_ADDR_LOOKUP:
//  248     MT_UtilAddrMgrEntryLookupNwk(pBuf);
??MT_UtilCommandProcessing_19:
        MOV     ?V0 + 5,R0
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     R0,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function AddrMgrEntryLookupNwk
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryLookupNwk?relay
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x8
        MOV     R2,?V0 + 5
        SJMP    ??MT_UtilCommandProcessing_27
//  249     break;
//  250 
//  251 #if defined MT_SYS_KEY_MANAGEMENT
//  252   case MT_UTIL_APSME_LINK_KEY_DATA_GET:
//  253     MT_UtilAPSME_LinkKeyDataGet(pBuf);
//  254     break;
//  255 
//  256   case MT_UTIL_APSME_LINK_KEY_NV_ID_GET:
//  257     MT_UtilAPSME_LinkKeyNvIdGet(pBuf);
//  258     break;
//  259 #endif // MT_SYS_KEY_MANAGEMENT
//  260 
//  261   case MT_UTIL_APSME_REQUEST_KEY_CMD:
//  262     MT_UtilAPSME_RequestKeyCmd(pBuf);
??MT_UtilCommandProcessing_23:
        MOV     ?V0 + 3,R0
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     ?V0 + 8,?V0 + 0
        MOV     ?V0 + 9,?V0 + 1
        MOV     ?V0 + 10,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 44)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 41)
        ; Setup parameters for call to function ZDSecMgrRequestAppKey
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDSecMgrRequestAppKey?relay
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_48:
        MOV     R2,?V0 + 3
        SJMP    ??MT_UtilCommandProcessing_27
//  263     break;
//  264 
//  265   case MT_UTIL_ASSOC_COUNT:
//  266     MT_UtilAssocCount(pBuf);
??MT_UtilCommandProcessing_20:
        MOV     ?V0 + 4,R0
        MOV     R6,DPL
        MOV     R7,DPH
        INC     DPTR
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        ; Setup parameters for call to function AssocCount
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??AssocCount?relay
        MOV     A,R2
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOV     A,R3
        MOVX    @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R3,#0x2
        MOV     R2,?V0 + 4
??MT_UtilCommandProcessing_27:
        MOV     R1,#0x67
        SJMP    ??MT_UtilCommandProcessing_28
//  267     break;
//  268 
//  269   case MT_UTIL_ASSOC_FIND_DEVICE:
//  270     MT_UtilAssocFindDevice(pBuf);
??MT_UtilCommandProcessing_21:
        ; Setup parameters for call to function MT_UtilAssocFindDevice
        LCALL   ??MT_UtilAssocFindDevice?relay
//  271     break;
        SJMP    ??MT_UtilCommandProcessing_7
//  272 
//  273   case MT_UTIL_ASSOC_GET_WITH_ADDRESS:
//  274     MT_UtilAssocGetWithAddress(pBuf);
??MT_UtilCommandProcessing_22:
        ; Setup parameters for call to function MT_UtilAssocGetWithAddress
        LCALL   ??MT_UtilAssocGetWithAddress?relay
//  275     break;
        SJMP    ??MT_UtilCommandProcessing_7
//  276 
//  277   case MT_UTIL_BIND_ADD_ENTRY:
//  278     MT_UtilBindAddEntry(pBuf);
??MT_UtilCommandProcessing_24:
        ; Setup parameters for call to function MT_UtilBindAddEntry
        LCALL   ??MT_UtilBindAddEntry?relay
//  279     break;
        SJMP    ??MT_UtilCommandProcessing_7
//  280 
//  281 #if defined ZCL_KEY_ESTABLISH
//  282   case MT_UTIL_ZCL_KEY_EST_INIT_EST:
//  283     MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment(pBuf);
//  284     break;
//  285 
//  286   case MT_UTIL_ZCL_KEY_EST_SIGN:
//  287     MT_UtilzclGeneral_KeyEstablishment_ECDSASign(pBuf);
//  288     break;
//  289 #endif
//  290 
//  291   case MT_UTIL_SYNC_REQ:
//  292     MT_UtilSync();
??MT_UtilCommandProcessing_25:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R3,#0x0
        MOV     R2,#-0x20
        MOV     R1,#0x47
??MT_UtilCommandProcessing_28:
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  293     break;
        SJMP    ??MT_UtilCommandProcessing_7
//  294 #endif /* !defined NONWK */
//  295 
//  296 #ifdef MT_SRNG
//  297   case MT_UTIL_SRNG_GENERATE:
//  298     MT_UtilSrngGen();
//  299     break;
//  300 #endif
//  301 
//  302   default:
//  303     status = MT_RPC_ERR_COMMAND_ID;
??MT_UtilCommandProcessing_26:
        MOV     ?V0 + 2,#0x2
//  304     break;
//  305   }
//  306 
//  307   return status;
??MT_UtilCommandProcessing_7:
        MOV     R1,?V0 + 2
        MOV     A,#0x16
          CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  308 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 41)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Valid
        MOV     R7,#0xb
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond2 Using cfiCommon0
          CFI Function MT_UtilCommandProcessing
          CFI Conditional ??CrossCallReturnLabel_48
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond3 Using cfiCommon0
          CFI (cfiCond3) Function MT_UtilDataReq
          CFI (cfiCond3) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond3) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond3) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond3) CFA_SP SP+-5
          CFI (cfiCond3) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiPicker4 Using cfiCommon1
          CFI (cfiPicker4) NoFunction
          CFI (cfiPicker4) Picker
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
          CFI EndBlock cfiCond2
          CFI EndBlock cfiCond3
          CFI EndBlock cfiPicker4
        REQUIRE ??Subroutine35_0
        ; // Fall through to label ??Subroutine35_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine35_0:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function MT_UtilSrcMatchEnable
          CFI Conditional ??CrossCallReturnLabel_50
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function MT_UtilSrcMatchAddEntry
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond6) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond6) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond6) CFA_SP SP+-5
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond7 Using cfiCommon0
          CFI (cfiCond7) Function MT_UtilSrcMatchDeleteEntry
          CFI (cfiCond7) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond7) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond7) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond7) CFA_SP SP+-5
          CFI (cfiCond7) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond8 Using cfiCommon0
          CFI (cfiCond8) Function MT_UtilSrcMatchAckAllPending
          CFI (cfiCond8) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond8) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond8) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond8) CFA_SP SP+-5
          CFI (cfiCond8) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function MT_UtilCommandProcessing
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond9) V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond9) V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+0
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function MT_UtilDataReq
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond10) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond10) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond10) CFA_SP SP+-5
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiCond7
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11
//  309 
//  310 /***************************************************************************************************
//  311 * @fn      MT_UtilGetDeviceInfo
//  312 *
//  313 * @brief   The Get Device Info serial message.
//  314 *
//  315 * @param   None.
//  316 *
//  317 * @return  void
//  318 ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  319 void MT_UtilGetDeviceInfo(void)
MT_UtilGetDeviceInfo:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function MT_UtilGetDeviceInfo
        CODE
//  320 {
        FUNCALL MT_UtilGetDeviceInfo, AssocMakeList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetDeviceInfo, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
//  321   uint8  *buf;
//  322   uint8  *pBuf;
//  323   uint8  bufLen = MT_UTIL_DEVICE_INFO_RESPONSE_LEN;
        MOV     ?V0 + 2,#0xe
//  324   uint16 *assocList = NULL;
        MOV     R6,#0x0
        MOV     R7,#0x0
//  325 
//  326 #if !defined NONWK
//  327   uint8  assocCnt = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
//  328 
//  329   if (ZG_DEVICE_RTR_TYPE)
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??MT_UtilGetDeviceInfo_0
        XRL     A,#0x1
        JNZ     ??MT_UtilGetDeviceInfo_1
//  330   {
//  331     assocList = AssocMakeList( &assocCnt );
??MT_UtilGetDeviceInfo_0:
        ; Setup parameters for call to function AssocMakeList
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AssocMakeList?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  332     bufLen += (assocCnt * sizeof(uint16));
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        ADD     A,#0xe
        MOV     ?V0 + 2,A
//  333   }
//  334 #endif
//  335 
//  336   buf = osal_mem_alloc( bufLen );
??MT_UtilGetDeviceInfo_1:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     ?V0 + 0,?V0 + 2
        MOV     R2,?V0 + 0
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  337   if ( buf )
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??MT_UtilGetDeviceInfo_2 & 0xFFFF
//  338   {
//  339     pBuf = buf;
//  340 
//  341     *pBuf++ = ZSUCCESS; // Status
        MOV     DPL,R2
        MOV     DPH,R3
        CLR     A
        LCALL   ?Subroutine25 & 0xFFFF
//  342 
//  343     osal_nv_read( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf );
??CrossCallReturnLabel_34:
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 4,#0x8
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 17)
//  344     pBuf += Z_EXTADDR_LEN;
        MOV     A,?V0 + 6
        ADD     A,#0x8
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
//  345 
//  346 #if defined NONWK
//  347     // Skip past ZStack only parameters for NONWK
//  348     *pBuf++ = 0;
//  349     *pBuf++ = 0;
//  350     *pBuf++ = 0;
//  351     *pBuf++ = 0;
//  352     *pBuf = 0;
//  353 #else
//  354     {
//  355       uint16 shortAddr = NLME_GetShortAddr();
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
//  356       *pBuf++ = LO_UINT16( shortAddr );
        MOV     A,R2
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    @DPTR,A
        INC     DPTR
//  357       *pBuf++ = HI_UINT16( shortAddr );
        MOV     A,R3
        MOVX    @DPTR,A
        INC     DPTR
//  358     }
//  359 
//  360     /* Return device type */
//  361     *pBuf++ = ZSTACK_DEVICE_BUILD;
        MOV     A,#0x2
        LCALL   ?Subroutine25 & 0xFFFF
//  362 
//  363     /*Return device state */
//  364     *pBuf++ = (uint8)devState;
??CrossCallReturnLabel_35:
        MOV     DPTR,#devState
        LCALL   ?Subroutine9 & 0xFFFF
//  365 
//  366     if (ZG_DEVICE_RTR_TYPE)
??CrossCallReturnLabel_2:
        INC     DPTR
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
        MOV     DPTR,#zgDeviceLogicalType
        MOVX    A,@DPTR
        JZ      ??MT_UtilGetDeviceInfo_3
        XRL     A,#0x1
        JNZ     ??MT_UtilGetDeviceInfo_4
//  367     {
//  368       *pBuf++ = assocCnt;
??MT_UtilGetDeviceInfo_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_42:
        MOV     ?V0 + 6,?V0 + 4
        MOV     ?V0 + 7,?V0 + 5
//  369 
//  370       if ( assocCnt )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JZ      ??MT_UtilGetDeviceInfo_5
//  371       {
//  372         uint8 x;
//  373         uint16 *puint16 = assocList;
        MOV     A,R6
        MOV     R0,A
        MOV     A,R7
        MOV     R1,A
//  374 
//  375         for ( x = 0; x < assocCnt; x++, puint16++ )
        MOV     R4,#0x0
??MT_UtilGetDeviceInfo_6:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R4
        CLR     C
        SUBB    A,R2
        JNC     ??MT_UtilGetDeviceInfo_5
//  376         {
//  377           *pBuf++ = LO_UINT16( *puint16 );
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine9 & 0xFFFF
//  378           *pBuf++ = HI_UINT16( *puint16 );
??CrossCallReturnLabel_3:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        LCALL   ?Subroutine9 & 0xFFFF
//  379         }
??CrossCallReturnLabel_4:
        INC     R4
        MOV     A,R0
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R1,A
        SJMP    ??MT_UtilGetDeviceInfo_6
//  380       }
//  381     }
//  382     else
//  383     {
//  384       *pBuf++ = 0;
??MT_UtilGetDeviceInfo_4:
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        CLR     A
        MOVX    @DPTR,A
//  385     }
//  386 #endif
//  387 
//  388     MT_BuildAndSendZToolResponse( ((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
//  389                                  MT_UTIL_GET_DEVICE_INFO,
//  390                                  bufLen, buf );
??MT_UtilGetDeviceInfo_5:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R3,?V0 + 2
        MOV     R2,#0x0
        MOV     R1,#0x67
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  391 
//  392     osal_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_mem_free?relay
//  393   }
//  394 
//  395   if ( assocList )
??MT_UtilGetDeviceInfo_2:
        MOV     A,R6
        ORL     A,R7
        JZ      ??MT_UtilGetDeviceInfo_7
//  396   {
//  397     osal_mem_free( assocList );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
//  398   }
//  399 }
??MT_UtilGetDeviceInfo_7:
        MOV     A,#0x1
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function MT_UtilGetDeviceInfo
          CFI Conditional ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function MT_UtilGetDeviceInfo
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+0
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOV     ?V0 + 6,DPL
        MOV     ?V0 + 7,DPH
        RET
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function MT_UtilGetDeviceInfo
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function MT_UtilGetDeviceInfo
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+0
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function MT_UtilGetDeviceInfo
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+0
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_43:
        INC     DPTR
        MOV     ?V0 + 6,DPL
        MOV     ?V0 + 7,DPH
        RET
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function MT_UtilGetDeviceInfo
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function MT_UtilGetDeviceInfo
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_2
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+0
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function MT_UtilGetDeviceInfo
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_3
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+0
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function MT_UtilGetDeviceInfo
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_43, ??CrossCallReturnLabel_4
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+0
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiPicker24 Using cfiCommon1
          CFI (cfiPicker24) NoFunction
          CFI (cfiPicker24) Picker
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiPicker24
//  400 
//  401 #ifdef MT_SRNG
//  402 /***************************************************************************************************
//  403 * @fn      MT_UtilSrngGen
//  404 *
//  405 * @brief   Generate Secure Random Numbers
//  406 *
//  407 * @param   None.
//  408 *
//  409 * @return  void
//  410 ***************************************************************************************************/
//  411 void MT_UtilSrngGen(void)
//  412 {
//  413   static uint32 count = 125000; /* 125000 * 8 bits = 1000000 bits */
//  414   uint8 outrng[100];
//  415   uint8 status;
//  416 
//  417   if(count > 0)
//  418   {
//  419     status = ssp_srng_generate((uint8 *)outrng, 100, NULL);
//  420     if (status != SRNG_SUCCESS)
//  421     {
//  422       if(RNG_INIT_ERROR == status)
//  423       {
//  424         ssp_srng_reseed();
//  425       }
//  426       else
//  427       {
//  428         while(1)
//  429         {
//  430           ASM_NOP;
//  431         }
//  432       } /* if(RNG_INIT_ERROR == status) */
//  433     }/*if (status != SRNG_SUCCESS) */
//  434 
//  435     if(count >= 100)
//  436     {
//  437     count-=100;
//  438     }
//  439     else
//  440     {
//  441      count = 0;
//  442     }
//  443     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ |
//  444                                  (uint8)MT_RPC_SYS_DBG),
//  445                                   MT_DEBUG_MSG,
//  446                                   100,
//  447                                   outrng);
//  448     osal_start_timerEx(MT_TaskID, MT_SRNG_EVENT, 100);
//  449   }
//  450 }
//  451 #endif
//  452 
//  453 /***************************************************************************************************
//  454  * @fn      MT_UtilGetNvInfo
//  455  *
//  456  * @brief   The Get NV Info serial message.
//  457  *
//  458  * @param   None.
//  459  *
//  460  * @return  void
//  461  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  462 void MT_UtilGetNvInfo(void)
MT_UtilGetNvInfo:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function MT_UtilGetNvInfo
        CODE
//  463 {
        FUNCALL MT_UtilGetNvInfo, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_nv_read
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilGetNvInfo, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 6
        MOV     A,#-0x6
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
//  464   uint8 len;
//  465   uint8 stat;
//  466   uint8 *buf;
//  467   uint8 *pBuf;
//  468   uint16 tmp16;
//  469   uint32 tmp32;
//  470 
//  471   /*
//  472     Get required length of buffer
//  473     Status + ExtAddr + ChanList + PanID  + SecLevel + PreCfgKey
//  474   */
//  475   len = 1 + Z_EXTADDR_LEN + 4 + 2 + 1 + SEC_KEY_LEN;
//  476 
//  477   buf = osal_mem_alloc( len );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x20
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  478   if ( buf )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??MT_UtilGetNvInfo_0 & 0xFFFF
//  479   {
//  480     /* Assume NV not available */
//  481     osal_memset( buf, 0xFF, len );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x20
        MOV     R5,#0x0
        MOV     R1,#-0x1
        LCALL   ??osal_memset?relay
//  482 
//  483     /* Skip over status */
//  484     pBuf = buf + 1;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
//  485 
//  486     /* Start with 64-bit extended address */
//  487     stat = osal_nv_read( ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, pBuf );
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 0,#0x8
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        MOV     ?V0 + 0,A
//  488     if ( stat ) stat = 0x01;
        JZ      ??MT_UtilGetNvInfo_1
        MOV     ?V0 + 0,#0x1
//  489     pBuf += Z_EXTADDR_LEN;
??MT_UtilGetNvInfo_1:
        MOV     A,?V0 + 2
        ADD     A,#0x8
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
//  490 
//  491     /* Scan channel list (bit mask) */
//  492     if (  osal_nv_read( ZCD_NV_CHANLIST, 0, sizeof( tmp32 ), &tmp32 ) )
        ; Setup parameters for call to function osal_nv_read
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 4,#0x4
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7c
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        JZ      ??MT_UtilGetNvInfo_2
//  493       stat |= 0x02;
        MOV     A,?V0 + 0
        SETB    0xE0 /* A   */.1
        MOV     ?V0 + 0,A
        SJMP    ??MT_UtilGetNvInfo_3
//  494     else
//  495     {
//  496       pBuf[0] = BREAK_UINT32( tmp32, 3 );
??MT_UtilGetNvInfo_2:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,#0x18
        MOV     R0,#?V0 + 4
        LCALL   ?UL_SHR
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
//  497       pBuf[1] = BREAK_UINT32( tmp32, 2 );
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,#0x10
        MOV     R0,#?V0 + 4
        LCALL   ?UL_SHR
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
//  498       pBuf[2] = BREAK_UINT32( tmp32, 1 );
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 5
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  499       pBuf[3] = BREAK_UINT32( tmp32, 0 );
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 4
        LCALL   ?L_MOV_X
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
//  500     }
//  501     pBuf += sizeof( tmp32 );
??MT_UtilGetNvInfo_3:
        MOV     A,?V0 + 2
        ADD     A,#0x4
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
//  502 
//  503     /* ZigBee PanID */
//  504     if ( osal_nv_read( ZCD_NV_PANID, 0, sizeof( tmp16 ), &tmp16 ) )
        ; Setup parameters for call to function osal_nv_read
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 4,#0x2
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7d
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        JZ      ??MT_UtilGetNvInfo_4
//  505       stat |= 0x04;
        MOV     A,?V0 + 0
        SETB    0xE0 /* A   */.2
        MOV     ?V0 + 0,A
        SJMP    ??MT_UtilGetNvInfo_5
//  506     else
//  507     {
//  508       pBuf[0] = LO_UINT16( tmp16 );
??MT_UtilGetNvInfo_4:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    @DPTR,A
//  509       pBuf[1] = HI_UINT16( tmp16 );
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        MOVX    @DPTR,A
//  510     }
//  511     pBuf += sizeof( tmp16 );
??MT_UtilGetNvInfo_5:
        MOV     A,?V0 + 2
        ADD     A,#0x2
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
//  512 
//  513     /* Security level */
//  514     if ( osal_nv_read( ZCD_NV_SECURITY_LEVEL, 0, sizeof( uint8 ), pBuf++ ) )
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 4,#0x1
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x61
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        JZ      ??MT_UtilGetNvInfo_6
//  515       stat |= 0x08;
        MOV     A,?V0 + 0
        SETB    0xE0 /* A   */.3
        MOV     ?V0 + 0,A
//  516 
//  517     /* Pre-configured security key */
//  518     if ( osal_nv_read( ZCD_NV_PRECFGKEY, 0, SEC_KEY_LEN, pBuf ) )
??MT_UtilGetNvInfo_6:
        ; Setup parameters for call to function osal_nv_read
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 2,#0x10
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x62
        MOV     R3,#0x0
        LCALL   ??osal_nv_read?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        JZ      ??MT_UtilGetNvInfo_7
//  519       stat |= 0x10;
        MOV     A,?V0 + 0
        SETB    0xE0 /* A   */.4
        MOV     ?V0 + 0,A
//  520 
//  521     /* Status bit mask - bit=1 indicates failure */
//  522     *buf = stat;
??MT_UtilGetNvInfo_7:
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  523 
//  524     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_GET_NV_INFO,
//  525                                   len, buf );
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R3,#0x20
        MOV     R2,#0x1
        MOV     R1,#0x67
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  526 
//  527     osal_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
//  528   }
//  529 }
??MT_UtilGetNvInfo_0:
        MOV     A,#0x6
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock25
//  530 
//  531 /***************************************************************************************************
//  532  * @fn      MT_UtilSetPanID
//  533  *
//  534  * @brief   Set PanID message
//  535  *
//  536  * @param   pBuf - pointer to the data
//  537  *
//  538  * @return  void
//  539  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  540 void MT_UtilSetPanID(uint8 *pBuf)
MT_UtilSetPanID:
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function MT_UtilSetPanID
        CODE
//  541 {
        FUNCALL MT_UtilSetPanID, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilSetPanID, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilSetPanID, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
//  542   uint16 temp16;
//  543   uint8 retValue = ZFailure;
        LCALL   ?Subroutine10 & 0xFFFF
//  544   uint8 cmdId;
//  545 
//  546   /* parse header */
//  547   cmdId = pBuf[MT_RPC_POS_CMD1];
//  548   pBuf += MT_RPC_FRAME_HDR_SZ;
//  549 
//  550   temp16 = BUILD_UINT16(pBuf[0], pBuf[1]);
??CrossCallReturnLabel_5:
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        MOV     R0,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  551   pBuf += sizeof(uint16);
//  552 
//  553   retValue = osal_nv_write(ZCD_NV_PANID, 0, osal_nv_item_len( ZCD_NV_PANID ), &temp16);
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,#-0x7d
        MOV     R3,#0x0
        LCALL   ??osal_nv_item_len?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7d
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        LCALL   ?Subroutine21 & 0xFFFF
//  554 
//  555   /* Build and send back the response */
//  556   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue);
??CrossCallReturnLabel_27:
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  557 }
        MOV     A,#0x3
        LJMP    ??Subroutine36_0 & 0xFFFF
          CFI EndBlock cfiBlock26
//  558 
//  559 /***************************************************************************************************
//  560  * @fn      MT_UtilSetChannels
//  561  *
//  562  * @brief   Set Channels
//  563  *
//  564  * @param   pBuf - pointer to the data
//  565  *
//  566  * @return  void
//  567  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  568 void MT_UtilSetChannels(uint8 *pBuf)
MT_UtilSetChannels:
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function MT_UtilSetChannels
        CODE
//  569 {
        FUNCALL MT_UtilSetChannels, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilSetChannels, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilSetChannels, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
//  570   uint32 tmp32;
//  571   uint8 retValue = ZFailure;
        LCALL   ?Subroutine10 & 0xFFFF
//  572   uint8 cmdId;
//  573 
//  574   /* parse header */
//  575   cmdId = pBuf[MT_RPC_POS_CMD1];
//  576   pBuf += MT_RPC_FRAME_HDR_SZ;
//  577 
//  578   tmp32 = BUILD_UINT32(pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
??CrossCallReturnLabel_6:
        MOV     ?V0 + 0,A
        CLR     A
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     A,#0x8
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 5,A
        MOV     A,#0x10
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        CLR     A
        MOV     ?V0 + 6,A
        MOV     A,#0x18
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     R0,#?V0 + 0
        MOV     R1,#?V0 + 4
        LCALL   ?L_ADD
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_TO_X
//  579 
//  580   retValue = osal_nv_write(ZCD_NV_CHANLIST, 0, osal_nv_item_len( ZCD_NV_CHANLIST ), &tmp32);
        ; Setup parameters for call to function osal_nv_write
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,#-0x7c
        MOV     R3,#0x0
        LCALL   ??osal_nv_item_len?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#-0x7c
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        LCALL   ?Subroutine21 & 0xFFFF
//  581 
//  582   /* Build and send back the response */
//  583   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue);
??CrossCallReturnLabel_28:
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  584 }
        MOV     A,#0x5
          CFI EndBlock cfiBlock27
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock28 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Valid
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock28

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond29 Using cfiCommon0
          CFI Function MT_UtilSetPanID
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond30 Using cfiCommon0
          CFI (cfiCond30) Function MT_UtilSetChannels
          CFI (cfiCond30) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond30) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond30) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond30) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond30) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond30) CFA_SP SP+0
          CFI (cfiCond30) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function MT_UtilSetSecLevel
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+0
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function MT_UtilSetPreCfgKey
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+0
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker33 Using cfiCommon1
          CFI (cfiPicker33) NoFunction
          CFI (cfiPicker33) Picker
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x67
        RET
          CFI EndBlock cfiCond29
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond34 Using cfiCommon0
          CFI Function MT_UtilSetPanID
          CFI Conditional ??CrossCallReturnLabel_5
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function MT_UtilSetChannels
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+0
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function MT_UtilLedControl
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+0
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker37 Using cfiCommon1
          CFI (cfiPicker37) NoFunction
          CFI (cfiPicker37) Picker
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_44:
        MOV     R2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiPicker37
//  585 
//  586 /***************************************************************************************************
//  587  * @fn      MT_UtilSetSecLevel
//  588  *
//  589  * @brief   Set Sec Level
//  590  *
//  591  * @param   byte *msg - pointer to the data
//  592  *
//  593  * @return  void
//  594  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  595 void MT_UtilSetSecLevel(uint8 *pBuf)
MT_UtilSetSecLevel:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function MT_UtilSetSecLevel
        CODE
//  596 {
        FUNCALL MT_UtilSetSecLevel, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilSetSecLevel, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilSetSecLevel, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
//  597   uint8 retValue = ZFailure;
        LCALL   ?Subroutine14 & 0xFFFF
//  598   uint8 cmdId;
//  599 
//  600   /* parse header */
//  601   cmdId = pBuf[MT_RPC_POS_CMD1];
//  602   pBuf += MT_RPC_FRAME_HDR_SZ;
//  603 
//  604   retValue = osal_nv_write( ZCD_NV_SECURITY_LEVEL, 0, osal_nv_item_len( ZCD_NV_SECURITY_LEVEL ), pBuf);
??CrossCallReturnLabel_15:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,#0x61
        MOV     R3,#0x0
        LCALL   ??osal_nv_item_len?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x61
          CFI EndBlock cfiBlock38
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  605 
//  606   /* Build and send back the response */
//  607   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  608 
//  609 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R3,#0x0
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL   ??MT_BuildAndSendZToolResponse?relay
        MOV     A,#0x1
          CFI EndBlock cfiBlock39
        REQUIRE ??Subroutine36_0
        ; // Fall through to label ??Subroutine36_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine36_0:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Valid
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock40
//  610 
//  611 /***************************************************************************************************
//  612  * @fn      MT_UtilSetPreCfgKey
//  613  *
//  614  * @brief   Set Pre Cfg Key
//  615  *
//  616  * @param   pBuf - pointer to the data
//  617  *
//  618  * @return  void
//  619  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  620 void MT_UtilSetPreCfgKey(uint8 *pBuf)
MT_UtilSetPreCfgKey:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function MT_UtilSetPreCfgKey
        CODE
//  621 {
        FUNCALL MT_UtilSetPreCfgKey, osal_nv_item_len
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilSetPreCfgKey, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilSetPreCfgKey, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 11, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 11, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
//  622   uint8 retValue = ZFailure;
        LCALL   ?Subroutine14 & 0xFFFF
//  623   uint8 cmdId;
//  624 
//  625   /* parse header */
//  626   cmdId = pBuf[MT_RPC_POS_CMD1];
//  627   pBuf += MT_RPC_FRAME_HDR_SZ;
//  628 
//  629   retValue = osal_nv_write( ZCD_NV_PRECFGKEY, 0, osal_nv_item_len( ZCD_NV_PRECFGKEY ), pBuf);
??CrossCallReturnLabel_16:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        ; Setup parameters for call to function osal_nv_item_len
        MOV     R2,#0x62
        MOV     R3,#0x0
        LCALL   ??osal_nv_item_len?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x62
        SJMP    ?Subroutine2
          CFI EndBlock cfiBlock41
//  630 
//  631   /* Build and send back the response */
//  632   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  633 
//  634 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function MT_UtilSetSecLevel
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function MT_UtilSetPreCfgKey
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+0
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) Picker
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_45:
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        RET
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond45 Using cfiCommon0
          CFI Function MT_UtilSetPanID
          CFI Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_5
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function MT_UtilSetChannels
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_6
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond46) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond46) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond46) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+0
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function MT_UtilLedControl
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_44, ??CrossCallReturnLabel_7
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+0
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function MT_UtilSetSecLevel
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_15
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+0
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function MT_UtilSetPreCfgKey
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_45, ??CrossCallReturnLabel_16
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+0
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker50 Using cfiCommon1
          CFI (cfiPicker50) NoFunction
          CFI (cfiPicker50) Picker
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        ; Setup parameters for call to function osal_nv_write
        ; Setup parameters for call to function osal_nv_write
        MOV     A,R2
        ADD     A,#0x3
        RET
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiPicker50
//  635 
//  636 /***************************************************************************************************
//  637  * @fn      MT_UtilCallbackSub
//  638  *
//  639  * @brief   The Callback subscribe.
//  640  *
//  641  * @param   pBuf - pointer to the data
//  642  *
//  643  * @return  void
//  644  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  645 void MT_UtilCallbackSub(uint8 *pBuf)
MT_UtilCallbackSub:
          CFI Block cfiBlock51 Using cfiCommon0
          CFI Function MT_UtilCallbackSub
        CODE
//  646 {
        FUNCALL MT_UtilCallbackSub, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R2
        MOV     R0,A
        MOV     A,R3
        MOV     R1,A
//  647   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine18 & 0xFFFF
//  648   uint8 retValue = ZFailure;
//  649 
//  650 #if defined(MT_MAC_CB_FUNC) || defined(MT_NWK_CB_FUNC) || defined(MT_ZDO_CB_FUNC) || defined(MT_AF_CB_FUNC) || defined(MT_SAPI_CB_FUNC)
//  651   uint8 subSystem;
//  652   uint16 subscribed_command;
//  653 
//  654   // Move past header
//  655   retValue = ZSuccess;
??CrossCallReturnLabel_23:
        CLR     A
        MOVX    @DPTR,A
//  656   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R0
        ADD     A,#0x3
        MOV     R0,A
        MOV     A,R1
        LCALL   ??Subroutine40_0 & 0xFFFF
//  657 
//  658   /* Command */
//  659   subscribed_command = BUILD_UINT16(pBuf[0], pBuf[1]);
??CrossCallReturnLabel_51:
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,R6
        ADD     A,#0x0
        MOV     R4,A
        CLR     A
        ADDC    A,R5
//  660   pBuf += 2;
//  661 
//  662   /* Subsystem - 5 bits on the MSB of the command */
//  663   subSystem = HI_UINT16(subscribed_command) & 0x1F ;
        ANL     A,#0x1f
        MOV     R3,A
//  664 
//  665   /* What is the action - SUBSCRIBE or !SUBSCRIBE */
//  666   if (*pBuf)
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??MT_UtilCallbackSub_0
//  667   {
//  668     /* Turn ON */
//  669   #if defined( MT_MAC_CB_FUNC )
//  670     if ((subSystem == MT_RPC_SYS_MAC) || (subscribed_command == 0xFFFF))
//  671       _macCallbackSub = 0xFFFF;
//  672   #endif
//  673 
//  674   #if defined( MT_NWK_CB_FUNC )
//  675     if ((subSystem == MT_RPC_SYS_NWK) || (subscribed_command == 0xFFFF))
//  676       _nwkCallbackSub = 0xFFFF;
//  677   #endif
//  678 
//  679   #if defined( MT_ZDO_CB_FUNC )
//  680     if ((subSystem == MT_RPC_SYS_ZDO) || (subscribed_command == 0xFFFF))
        MOV     A,#0x5
        XRL     A,R3
        JZ      ??MT_UtilCallbackSub_1
        MOV     A,#-0x1
        XRL     A,R4
        JNZ     ??MT_UtilCallbackSub_2
        MOV     A,#-0x1
        XRL     A,R5
??MT_UtilCallbackSub_2:
        JNZ     ??MT_UtilCallbackSub_3
//  681       _zdoCallbackSub = 0xFFFFFFFF;
??MT_UtilCallbackSub_1:
        MOV     DPTR,#_zdoCallbackSub
        MOV     A,#-0x1
        SJMP    ??MT_UtilCallbackSub_4
//  682   #endif
//  683 
//  684   #if defined( MT_AF_CB_FUNC )
//  685     if ((subSystem == MT_RPC_SYS_AF) || (subscribed_command == 0xFFFF))
//  686       _afCallbackSub = 0xFFFF;
//  687   #endif
//  688 
//  689   #if defined( MT_SAPI_CB_FUNC )
//  690     if ((subSystem == MT_RPC_SYS_SAPI) || (subscribed_command == 0xFFFF))
//  691       _sapiCallbackSub = 0xFFFF;
//  692   #endif
//  693   }
//  694   else
//  695   {
//  696     /* Turn OFF */
//  697   #if defined( MT_MAC_CB_FUNC )
//  698     if ((subSystem == MT_RPC_SYS_MAC) || (subscribed_command == 0xFFFF))
//  699       _macCallbackSub = 0x0000;
//  700   #endif
//  701 
//  702   #if defined( MT_NWK_CB_FUNC )
//  703     if ((subSystem == MT_RPC_SYS_NWK) || (subscribed_command == 0xFFFF))
//  704       _nwkCallbackSub = 0x0000;
//  705   #endif
//  706 
//  707   #if defined( MT_ZDO_CB_FUNC )
//  708     if ((subSystem == MT_RPC_SYS_ZDO) || (subscribed_command == 0xFFFF))
??MT_UtilCallbackSub_0:
        MOV     A,#0x5
        XRL     A,R3
        JZ      ??MT_UtilCallbackSub_5
        MOV     A,#-0x1
        XRL     A,R4
        JNZ     ??MT_UtilCallbackSub_6
        MOV     A,#-0x1
        XRL     A,R5
??MT_UtilCallbackSub_6:
        JNZ     ??MT_UtilCallbackSub_3
//  709       _zdoCallbackSub = 0x00000000;
??MT_UtilCallbackSub_5:
        MOV     DPTR,#_zdoCallbackSub
        CLR     A
??MT_UtilCallbackSub_4:
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  710   #endif
//  711 
//  712   #if defined( MT_AF_CB_FUNC )
//  713     if ((subSystem == MT_RPC_SYS_AF) || (subscribed_command == 0xFFFF))
//  714       _afCallbackSub = 0x0000;
//  715   #endif
//  716 
//  717   #if defined( MT_SAPI_CB_FUNC )
//  718     if ((subSystem == MT_RPC_SYS_SAPI) || (subscribed_command == 0xFFFF))
//  719         _sapiCallbackSub = 0x0000;
//  720   #endif
//  721   }
//  722 #endif  // MT_MAC_CB_FUNC || MT_NWK_CB_FUNC || MT_ZDO_CB_FUNC || MT_AF_CB_FUNC || MT_SAPI_CB_FUNC || MT_SAPI_CB_FUNC
//  723 
//  724   /* Build and send back the response */
//  725   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
??MT_UtilCallbackSub_3:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock51
//  726 }
//  727 
//  728 #if (defined HAL_KEY) && (HAL_KEY == TRUE)
//  729 /***************************************************************************************************
//  730  * @fn      MT_UtilKeyEvent
//  731  *
//  732  * @brief   Process Key Event
//  733  *
//  734  * @param   pBuf - pointer to the data
//  735  *
//  736  * @return  void
//  737  ***************************************************************************************************/
//  738 void MT_UtilKeyEvent(uint8 *pBuf)
//  739 {
//  740   uint8 x = 0;
//  741   uint8 retValue = ZFailure;
//  742   uint8 cmdId;
//  743 
//  744   /* parse header */
//  745   cmdId = pBuf[MT_RPC_POS_CMD1];
//  746   pBuf += MT_RPC_FRAME_HDR_SZ;
//  747 
//  748   /* Translate between SPI values to device values */
//  749   if ( *pBuf & 0x01 )
//  750     x |= HAL_KEY_SW_1;
//  751   if ( *pBuf & 0x02 )
//  752     x |= HAL_KEY_SW_2;
//  753   if ( *pBuf & 0x04 )
//  754     x |= HAL_KEY_SW_3;
//  755   if ( *pBuf & 0x08 )
//  756   x |= HAL_KEY_SW_4;
//  757 #if defined ( HAL_KEY_SW_5 )
//  758   if ( *pBuf & 0x10 )
//  759     x |= HAL_KEY_SW_5;
//  760 #endif
//  761 #if defined ( HAL_KEY_SW_6 )
//  762   if ( *pBuf & 0x20 )
//  763     x |= HAL_KEY_SW_6;
//  764 #endif
//  765 #if defined ( HAL_KEY_SW_7 )
//  766   if ( *pBuf & 0x40 )
//  767     x |= HAL_KEY_SW_7;
//  768 #endif
//  769 #if defined ( HAL_KEY_SW_8 )
//  770   if ( *pBuf & 0x80 )
//  771     x |= HAL_KEY_SW_8;
//  772 #endif
//  773   pBuf++;
//  774 
//  775   retValue = OnBoard_SendKeys(x, *pBuf);
//  776 
//  777   /* Build and send back the response */
//  778   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  779 }
//  780 #endif
//  781 
//  782 /***************************************************************************************************
//  783  * @fn      MT_UtilTimeAlive
//  784  *
//  785  * @brief   Process Time Alive
//  786  *
//  787  * @param   None.
//  788  *
//  789  * @return  None
//  790  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  791 void MT_UtilTimeAlive(void)
MT_UtilTimeAlive:
          CFI Block cfiBlock52 Using cfiCommon0
          CFI Function MT_UtilTimeAlive
        CODE
//  792 {
        FUNCALL MT_UtilTimeAlive, osal_GetSystemClock
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilTimeAlive, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  793   uint8 timeAlive[4];
//  794   uint32 tmp32;
//  795 
//  796   /* Time since last reset (seconds) */
//  797   tmp32 = osal_GetSystemClock() / 1000;
        ; Setup parameters for call to function osal_GetSystemClock
        LCALL   ??osal_GetSystemClock?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     DPTR,#__Constant_3e8
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     R0,#?V0 + 4
        MOV     R1,#?V0 + 0
        LCALL   ?UL_DIV_MOD
//  798 
//  799   /* Convert to high byte first into temp buffer */
//  800   timeAlive[0] = BREAK_UINT32(tmp32, 0);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
//  801   timeAlive[1] = BREAK_UINT32(tmp32, 1);
        MOV     ?V0 + 1,?V0 + 5
        MOV     A,?V0 + 1
        MOV     ?V0 + 0,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  802   timeAlive[2] = BREAK_UINT32(tmp32, 2);
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 2,?V0 + 6
        MOV     ?V0 + 3,?V0 + 7
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  803   timeAlive[3] = BREAK_UINT32(tmp32, 3);
        MOV     A,#0x18
        MOV     R0,#?V0 + 4
        LCALL   ?UL_SHR
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 4
        LCALL   ?Subroutine33 & 0xFFFF
//  804 
//  805   /* Build and send back the response */
//  806   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
//  807                                        MT_UTIL_TIME_ALIVE, sizeof(timeAlive), timeAlive);
??CrossCallReturnLabel_46:
        MOV     R3,#0x4
        MOV     R2,#0x9
        MOV     R1,#0x67
        LCALL   ??MT_BuildAndSendZToolResponse?relay
//  808 }
        MOV     A,#0x4
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock52
//  809 
//  810 #if (defined HAL_LED) && (HAL_LED == TRUE)
//  811 /***************************************************************************************************
//  812  * @fn      MT_UtilLedControl
//  813  *
//  814  * @brief   Process the LED Control Message
//  815  *
//  816  * @param   pBuf - pointer to the received data
//  817  *
//  818  * @return  None
//  819  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  820 void MT_UtilLedControl(uint8 *pBuf)
MT_UtilLedControl:
          CFI Block cfiBlock53 Using cfiCommon0
          CFI Function MT_UtilLedControl
        CODE
//  821 {
        FUNCALL MT_UtilLedControl, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilLedControl, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  822   uint8 iLed, Led, iMode, Mode, cmdId;
//  823   uint8 retValue = ZFailure;
        LCALL   ?Subroutine10 & 0xFFFF
//  824 
//  825   /* parse header */
//  826   cmdId = pBuf[MT_RPC_POS_CMD1];
//  827   pBuf += MT_RPC_FRAME_HDR_SZ;
//  828 
//  829   /* LED and Mode */
//  830   iLed = *pBuf++;
??CrossCallReturnLabel_7:
        MOV     R0,A
        INC     DPTR
//  831   iMode = *pBuf;
        MOVX    A,@DPTR
        MOV     R2,A
//  832 
//  833   if ( iLed == 1 )
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??MT_UtilLedControl_0
//  834     Led = HAL_LED_1;
        MOV     R1,#0x1
        SJMP    ??MT_UtilLedControl_1
//  835   else if ( iLed == 2 )
??MT_UtilLedControl_0:
        MOV     A,#0x2
        XRL     A,R0
        JNZ     ??MT_UtilLedControl_2
//  836     Led = HAL_LED_2;
        MOV     R1,#0x2
        SJMP    ??MT_UtilLedControl_1
//  837   else if ( iLed == 3 )
??MT_UtilLedControl_2:
        MOV     A,#0x3
        XRL     A,R0
        JNZ     ??MT_UtilLedControl_3
//  838     Led = HAL_LED_3;
        MOV     R1,#0x4
        SJMP    ??MT_UtilLedControl_1
//  839   else if ( iLed == 4 )
??MT_UtilLedControl_3:
        MOV     A,#0x4
        XRL     A,R0
        JNZ     ??MT_UtilLedControl_4
//  840     Led = HAL_LED_4;
        MOV     R1,#0x8
        SJMP    ??MT_UtilLedControl_1
//  841   else if ( iLed == 0xFF )
??MT_UtilLedControl_4:
        MOV     A,#-0x1
        XRL     A,R0
        JNZ     ??MT_UtilLedControl_5
//  842     Led = HAL_LED_ALL;
        MOV     R1,#0xf
        SJMP    ??MT_UtilLedControl_1
//  843   else
//  844     Led = 0;
??MT_UtilLedControl_5:
        MOV     R1,#0x0
//  845 
//  846   if ( iMode == 0 )
??MT_UtilLedControl_1:
        MOV     A,R2
        JNZ     ??MT_UtilLedControl_6
//  847     Mode = HAL_LED_MODE_OFF;
        MOV     R2,#0x0
        SJMP    ??MT_UtilLedControl_7
//  848   else if ( iMode == 1 )
??MT_UtilLedControl_6:
        MOV     A,#0x1
        XRL     A,R2
        JNZ     ??MT_UtilLedControl_8
//  849     Mode = HAL_LED_MODE_ON;
        MOV     R2,#0x1
        SJMP    ??MT_UtilLedControl_7
//  850   else if ( iMode == 2 )
??MT_UtilLedControl_8:
        MOV     A,#0x2
        XRL     A,R2
        JNZ     ??MT_UtilLedControl_9
//  851     Mode = HAL_LED_MODE_BLINK;
        MOV     R2,#0x2
        SJMP    ??MT_UtilLedControl_7
//  852   else if ( iMode == 3 )
??MT_UtilLedControl_9:
        MOV     A,#0x3
        XRL     A,R2
        JNZ     ??MT_UtilLedControl_10
//  853     Mode = HAL_LED_MODE_FLASH;
        MOV     R2,#0x4
        SJMP    ??MT_UtilLedControl_7
//  854   else if ( iMode == 4 )
??MT_UtilLedControl_10:
        MOV     A,#0x4
        XRL     A,R2
        JNZ     ??MT_UtilLedControl_11
//  855     Mode = HAL_LED_MODE_TOGGLE;
        MOV     R2,#0x8
//  856   else
//  857     Led = 0;
//  858 
//  859   if ( Led != 0 )
??MT_UtilLedControl_7:
        MOV     A,R1
        JZ      ??MT_UtilLedControl_11
//  860   {
//  861     HalLedSet (Led, Mode);
        ; Setup parameters for call to function HalLedSet
        LCALL   ??HalLedSet?relay
//  862     retValue = ZSuccess;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
//  863   }
//  864 
//  865   /* Build and send back the response */
//  866   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
??MT_UtilLedControl_11:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x1
        MOV     A,R6
        MOV     R2,A
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock53
//  867 }
//  868 #endif /* HAL_LED */
//  869 
//  870 
//  871 /***************************************************************************************************
//  872  * @fn          MT_UtilSrcMatchEnable
//  873  *
//  874  * @brief      Enabled AUTOPEND and source address matching.
//  875  *
//  876  * @param      pBuf - Buffer contains the data
//  877  *
//  878  * @return     void
//  879  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  880 void MT_UtilSrcMatchEnable (uint8 *pBuf)
MT_UtilSrcMatchEnable:
          CFI Block cfiBlock54 Using cfiCommon0
          CFI Function MT_UtilSrcMatchEnable
        CODE
        FUNCALL MT_UtilSrcMatchEnable, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        SJMP    ?Subroutine4
          CFI EndBlock cfiBlock54
//  881 {
//  882   uint8 retValue, cmdId;
//  883 
//  884   /* Parse header */
//  885   cmdId = pBuf[MT_RPC_POS_CMD1];
//  886   pBuf += MT_RPC_FRAME_HDR_SZ;
//  887 
//  888 #ifdef AUTO_PEND
//  889   /* Call the routine */
//  890   retValue = ZMacSrcMatchEnable();
//  891 #else
//  892   retValue = ZMacUnsupported;
//  893 #endif
//  894 
//  895   /* Build and send back the response */
//  896   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  897 
//  898 }
//  899 
//  900 /***************************************************************************************************
//  901  * @fn          MT_UtilSrcMatchAddEntry
//  902  *
//  903  * @brief       Add a short or extended address to source address table.
//  904  *
//  905  * @param       pBuf - Buffer contains the data
//  906  *
//  907  * @return      void
//  908  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  909 void MT_UtilSrcMatchAddEntry (uint8 *pBuf)
MT_UtilSrcMatchAddEntry:
          CFI Block cfiBlock55 Using cfiCommon0
          CFI Function MT_UtilSrcMatchAddEntry
        CODE
        FUNCALL MT_UtilSrcMatchAddEntry, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        SJMP    ?Subroutine4
          CFI EndBlock cfiBlock55
//  910 {
//  911   uint8 retValue, cmdId;
//  912 
//  913   /* Parse header */
//  914   cmdId = pBuf[MT_RPC_POS_CMD1];
//  915   pBuf += MT_RPC_FRAME_HDR_SZ;
//  916 
//  917 #ifdef AUTO_PEND
//  918   uint16 panID;
//  919   zAddrType_t devAddr;
//  920 
//  921   /* Address mode */
//  922   devAddr.addrMode = *pBuf++;
//  923 
//  924   /* Address based on the address mode */
//  925   MT_UtilSpi2Addr( &devAddr, pBuf);
//  926   pBuf += Z_EXTADDR_LEN;
//  927 
//  928   /* PanID */
//  929   panID = BUILD_UINT16( pBuf[0] , pBuf[1] );
//  930 
//  931   /* Call the routine */
//  932   retValue =  ZMacSrcMatchAddEntry (&devAddr, panID);
//  933 #else
//  934   retValue = ZMacUnsupported;
//  935 #endif
//  936 
//  937   /* Build and send back the response */
//  938   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  939 }
//  940 
//  941 /***************************************************************************************************
//  942  * @fn          MT_UtilSrcMatchDeleteEntry
//  943  *
//  944  * @brief      Delete a short or extended address from source address table.
//  945  *
//  946  * @param      pBuf - Buffer contains the data
//  947  *
//  948  * @return     void
//  949  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  950 void MT_UtilSrcMatchDeleteEntry (uint8 *pBuf)
MT_UtilSrcMatchDeleteEntry:
          CFI Block cfiBlock56 Using cfiCommon0
          CFI Function MT_UtilSrcMatchDeleteEntry
        CODE
        FUNCALL MT_UtilSrcMatchDeleteEntry, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        SJMP    ?Subroutine4
          CFI EndBlock cfiBlock56
//  951 {
//  952   uint8 retValue, cmdId;
//  953 
//  954   /* Parse header */
//  955   cmdId = pBuf[MT_RPC_POS_CMD1];
//  956   pBuf += MT_RPC_FRAME_HDR_SZ;
//  957 
//  958 #ifdef AUTO_PEND
//  959   uint16 panID;
//  960   zAddrType_t devAddr;
//  961 
//  962   /* Address mode */
//  963   devAddr.addrMode = *pBuf++;
//  964 
//  965   /* Address based on the address mode */
//  966   MT_UtilSpi2Addr( &devAddr, pBuf);
//  967   pBuf += Z_EXTADDR_LEN;
//  968 
//  969   /* PanID */
//  970   panID = BUILD_UINT16( pBuf[0] , pBuf[1] );
//  971 
//  972   /* Call the routine */
//  973   retValue =  ZMacSrcMatchDeleteEntry (&devAddr, panID);
//  974 #else
//  975   retValue = ZMacUnsupported;
//  976 #endif
//  977 
//  978   /* Build and send back the response */
//  979   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
//  980 }
//  981 
//  982 /***************************************************************************************************
//  983  * @fn          MT_UtilSrcMatchCheckSrcAddr
//  984  *
//  985  * @brief      Check if a short or extended address is in the source address table.
//  986  *
//  987  * @param      pBuf - Buffer contains the data
//  988  *
//  989  * @return     void
//  990  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  991 void MT_UtilSrcMatchCheckSrcAddr (uint8 *pBuf)
MT_UtilSrcMatchCheckSrcAddr:
          CFI Block cfiBlock57 Using cfiCommon0
          CFI Function MT_UtilSrcMatchCheckSrcAddr
        CODE
//  992 {
        FUNCALL MT_UtilSrcMatchCheckSrcAddr, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
//  993   uint8 cmdId;
//  994   uint8 retArray[2];
//  995 
//  996   /* Parse header */
//  997   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine15 & 0xFFFF
//  998   pBuf += MT_RPC_FRAME_HDR_SZ;
//  999 
// 1000 #if 0  /* Unsupported  */
// 1001   uint16 panID;
// 1002   zAddrType_t devAddr;
// 1003 
// 1004   /* Address mode */
// 1005   devAddr.addrMode = *pBuf++;
// 1006 
// 1007   /* Address based on the address mode */
// 1008   MT_UtilSpi2Addr( &devAddr, pBuf);
// 1009   pBuf += Z_EXTADDR_LEN;
// 1010 
// 1011   /* PanID */
// 1012   panID = BUILD_UINT16( pBuf[0] , pBuf[1] );
// 1013 
// 1014   /* Call the routine */
// 1015   retArray[1] =  ZMacSrcMatchCheckSrcAddr (&devAddr, panID);
// 1016 
// 1017     /* Return failure if the index is invalid */
// 1018   if (retArray[1] == ZMacSrcMatchInvalidIndex )
// 1019   {
// 1020     retArray[0] = ZFailure;
// 1021   }
// 1022   else
// 1023   {
// 1024     retArray[0] = ZSuccess;
// 1025   }
// 1026 #else
// 1027   retArray[0] = ZMacUnsupported;
// 1028   retArray[1] = ZMacSrcMatchInvalidIndex;
??CrossCallReturnLabel_17:
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
          CFI EndBlock cfiBlock57
        REQUIRE ?Subroutine6
        ; // Fall through to label ?Subroutine6
// 1029 #endif
// 1030 
// 1031   /* Build and send back the response */
// 1032   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 2, retArray );
// 1033 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiBlock58 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 2)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_30:
        MOV     R1,#0x67
        LCALL   ??MT_BuildAndSendZToolResponse?relay
        MOV     A,#0x2
        SJMP    ??Subroutine38_0
          CFI EndBlock cfiBlock58
// 1034 
// 1035 /***************************************************************************************************
// 1036  * @fn          MT_UtilSrcMatchAckAllPending
// 1037  *
// 1038  * @brief       Enabled/disable acknowledging all packets with pending bit set
// 1039  *              It is normally enabled when adding new entries to
// 1040  *              the source address table fails due to the table is full, or
// 1041  *              disabled when more entries are deleted and the table has
// 1042  *              empty slots.
// 1043  *
// 1044  * @param       pBuf - Buffer contains the data
// 1045  *
// 1046  * @return      void
// 1047  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1048 void MT_UtilSrcMatchAckAllPending (uint8 *pBuf)
MT_UtilSrcMatchAckAllPending:
        CODE
        FUNCALL MT_UtilSrcMatchAckAllPending, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock59 Using cfiCommon0
          CFI NoFunction
// 1049 {
        PUSH    DPL
          CFI CFA_SP SP+-4
          CFI DPL0 Frame(CFA_SP, 4)
        PUSH    DPH
          CFI CFA_SP SP+-5
          CFI DPH0 Frame(CFA_SP, 5)
        ; Saved register size: 2
        ; Auto size: 1
        ; Saved register size: 2
        ; Auto size: 1
        ; Saved register size: 2
        ; Auto size: 1
        ; Saved register size: 2
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
// 1050   uint8 retValue, cmdId;
// 1051 
// 1052   /* Parse header */
// 1053   cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine18 & 0xFFFF
// 1054   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1055 
// 1056 #ifdef AUTO_PEND
// 1057   /* Call the routine */
// 1058   retValue = ZMacSrcMatchAckAllPending(*pBuf);
// 1059 #else
// 1060   retValue = ZMacUnsupported;
??CrossCallReturnLabel_24:
        MOV     A,#-0xb
        LCALL   ??Subroutine35_0 & 0xFFFF
          CFI EndBlock cfiBlock59
// 1061 #endif
// 1062 
// 1063   /* Build and send back the response */
// 1064   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue );
??CrossCallReturnLabel_50:
        REQUIRE ??Subroutine37_0
        ; // Fall through to label ??Subroutine37_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine37_0:
          CFI Block cfiBlock60 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 1)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV     R1,#0x67
        LCALL   ??MT_BuildAndSendZToolResponse?relay
// 1065 }
        MOV     A,#0x1
          CFI EndBlock cfiBlock60
        REQUIRE ??Subroutine38_0
        ; // Fall through to label ??Subroutine38_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine38_0:
          CFI Block cfiBlock61 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 2)
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
          CFI Valid
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock61

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond62 Using cfiCommon0
          CFI Function MT_UtilCallbackSub
          CFI Conditional ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function MT_UtilSrcMatchEnable
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond63) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond63) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond63) CFA_SP SP+-5
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function MT_UtilSrcMatchAddEntry
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond64) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond64) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond64) CFA_SP SP+-5
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function MT_UtilSrcMatchDeleteEntry
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond65) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond65) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond65) CFA_SP SP+-5
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function MT_UtilSrcMatchAckAllPending
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond66) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond66) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond66) CFA_SP SP+-5
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiPicker67 Using cfiCommon1
          CFI (cfiPicker67) NoFunction
          CFI (cfiPicker67) Picker
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_40:
        RET
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiPicker67

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond68 Using cfiCommon0
          CFI Function MT_UtilCallbackSub
          CFI Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_23
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function MT_UtilSrcMatchEnable
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_24
          CFI (cfiCond69) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond69) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond69) CFA_SP SP+-5
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function MT_UtilSrcMatchAddEntry
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_24
          CFI (cfiCond70) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond70) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond70) CFA_SP SP+-5
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond71 Using cfiCommon0
          CFI (cfiCond71) Function MT_UtilSrcMatchDeleteEntry
          CFI (cfiCond71) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_24
          CFI (cfiCond71) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond71) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond71) CFA_SP SP+-5
          CFI (cfiCond71) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function MT_UtilSrcMatchAckAllPending
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_40, ??CrossCallReturnLabel_24
          CFI (cfiCond72) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond72) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond72) CFA_SP SP+-5
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 1)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function MT_UtilSrcMatchCheckSrcAddr
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_17
          CFI (cfiCond73) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond73) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond73) CFA_SP SP+-5
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 2)
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function MT_UtilSrcMatchCheckAllPending
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_41, ??CrossCallReturnLabel_18
          CFI (cfiCond74) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond74) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond74) CFA_SP SP+-5
          CFI (cfiCond74) CFA_XSP16 add(XSP16, 2)
          CFI Block cfiPicker75 Using cfiCommon1
          CFI (cfiPicker75) NoFunction
          CFI (cfiPicker75) Picker
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiPicker75
// 1066 
// 1067 /***************************************************************************************************
// 1068  * @fn          MT_UtilSrcMatchCheckAllPending
// 1069  *
// 1070  * @brief       Check if acknowledging all packets with pending bit set
// 1071  *              is enabled.
// 1072  *
// 1073  * @param       pBuf - Buffer contains the data
// 1074  *
// 1075  * @return      void
// 1076  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1077 void MT_UtilSrcMatchCheckAllPending (uint8 *pBuf)
MT_UtilSrcMatchCheckAllPending:
          CFI Block cfiBlock76 Using cfiCommon0
          CFI Function MT_UtilSrcMatchCheckAllPending
        CODE
// 1078 {
        FUNCALL MT_UtilSrcMatchCheckAllPending, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 2, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 2, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 2)
// 1079   uint8 retArray[2], cmdId;
// 1080 
// 1081   /* Parse header */
// 1082   cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine15 & 0xFFFF
// 1083   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1084 
// 1085 #ifdef AUTO_PEND
// 1086   /* Call the routine */
// 1087   retArray[0] = ZMacSuccess;
// 1088   retArray[1] = ZMacSrcMatchCheckAllPending();
// 1089 #else
// 1090   retArray[0] = ZMacUnsupported;
// 1091   retArray[1] = FALSE;
??CrossCallReturnLabel_18:
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        SJMP    ?Subroutine6
          CFI EndBlock cfiBlock76
// 1092 #endif
// 1093 
// 1094   /* Build and send back the response */
// 1095   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 2, retArray );
// 1096 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond77 Using cfiCommon0
          CFI Function MT_UtilSrcMatchCheckSrcAddr
          CFI Conditional ??CrossCallReturnLabel_17
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 2)
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function MT_UtilSrcMatchCheckAllPending
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond78) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond78) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond78) CFA_SP SP+-5
          CFI (cfiCond78) CFA_XSP16 add(XSP16, 2)
          CFI Block cfiPicker79 Using cfiCommon1
          CFI (cfiPicker79) NoFunction
          CFI (cfiPicker79) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_41:
        MOV     A,#-0xb
        MOVX    @DPTR,A
        MOV     A,#0x1
        RET
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiPicker79
// 1097 
// 1098 /***************************************************************************************************
// 1099  * SUPPORT
// 1100  ***************************************************************************************************/
// 1101 
// 1102 #ifdef AUTO_PEND
// 1103 /***************************************************************************************************
// 1104  * @fn      MT_UtilRevExtCpy
// 1105  *
// 1106  * @brief
// 1107  *
// 1108  *   Reverse-copy an extended address.
// 1109  *
// 1110  * @param   pDst - Pointer to data destination
// 1111  * @param   pSrc - Pointer to data source
// 1112  *
// 1113  * @return  void
// 1114  ***************************************************************************************************/
// 1115 static void MT_UtilRevExtCpy( uint8 *pDst, uint8 *pSrc )
// 1116 {
// 1117   int8 i;
// 1118 
// 1119   for ( i = Z_EXTADDR_LEN - 1; i >= 0; i-- )
// 1120   {
// 1121     *pDst++ = pSrc[i];
// 1122   }
// 1123 }
// 1124 
// 1125 /***************************************************************************************************
// 1126  * @fn      MT_UtilSpi2Addr
// 1127  *
// 1128  * @brief   Copy an address from an SPI message to an address struct.  The
// 1129  *          addrMode in pAddr must already be set.
// 1130  *
// 1131  * @param   pDst - Pointer to address struct
// 1132  * @param   pSrc - Pointer SPI message byte array
// 1133  *
// 1134  * @return  void
// 1135  ***************************************************************************************************/
// 1136 static void MT_UtilSpi2Addr( zAddrType_t *pDst, uint8 *pSrc )
// 1137 {
// 1138   if ( pDst->addrMode == Addr16Bit )
// 1139   {
// 1140     pDst->addr.shortAddr = BUILD_UINT16( pSrc[0] , pSrc[1] );
// 1141   }
// 1142   else if ( pDst->addrMode == Addr64Bit )
// 1143   {
// 1144     MT_UtilRevExtCpy( pDst->addr.extAddr, pSrc );
// 1145   }
// 1146 }
// 1147 #endif // AUTO_PEND
// 1148 
// 1149 #if !defined NONWK
// 1150 /**************************************************************************************************
// 1151  * @fn      MT_UtilDataReq
// 1152  *
// 1153  * @brief   Process the MAC Data Request command.
// 1154  *
// 1155  * @param   pBuf - pointer to the received data
// 1156  *
// 1157  * @return  None
// 1158 **************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1159 void MT_UtilDataReq(uint8 *pBuf)
MT_UtilDataReq:
          CFI Block cfiBlock80 Using cfiCommon0
          CFI Function MT_UtilDataReq
        CODE
// 1160 {
        FUNCALL MT_UtilDataReq, NwkPollReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilDataReq, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
// 1161   uint8 rtrn = NwkPollReq(pBuf[MT_RPC_POS_DAT0]);
        ; Setup parameters for call to function NwkPollReq
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??NwkPollReq?relay
        LCALL   ?Subroutine23 & 0xFFFF
// 1162   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), MT_UTIL_DATA_REQ,
// 1163                                                                                1, &rtrn);
??CrossCallReturnLabel_49:
        MOV     R2,#0x11
        SJMP    ??Subroutine37_0
          CFI EndBlock cfiBlock80
// 1164 }
// 1165 
// 1166 /***************************************************************************************************
// 1167  * @fn      MT_UtilAddrMgrEntryLookupExt
// 1168  *
// 1169  * @brief   Proxy the AddrMgrEntryLookupExt() function.
// 1170  *
// 1171  * @param   pBuf - pointer to the received buffer
// 1172  *
// 1173  * @return  void
// 1174  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1175 static void MT_UtilAddrMgrEntryLookupExt(uint8 *pBuf)
MT_UtilAddrMgrEntryLookupExt:
          CFI Block cfiBlock81 Using cfiCommon0
          CFI Function MT_UtilAddrMgrEntryLookupExt
        CODE
// 1176 {
        FUNCALL MT_UtilAddrMgrEntryLookupExt, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilAddrMgrEntryLookupExt, AddrMgrEntryLookupExt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilAddrMgrEntryLookupExt, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 15
        MOV     A,#-0xf
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
// 1177   uint8 nwkAddr[2];
// 1178   AddrMgrEntry_t entry;
// 1179   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine17 & 0xFFFF
// 1180   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1181 
// 1182   osal_memcpy(entry.extAddr, pBuf, Z_EXTADDR_LEN);
??CrossCallReturnLabel_21:
        MOV     R1,DPL
        MOV     R2,DPH
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     R4,#0x8
        MOV     R5,#0x0
        MOV     A,R4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 26)
// 1183   (void)AddrMgrEntryLookupExt(&entry);
        ; Setup parameters for call to function AddrMgrEntryLookupExt
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AddrMgrEntryLookupExt?relay
// 1184 
// 1185   nwkAddr[0] = LO_UINT16(entry.nwkAddr);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 1186   nwkAddr[1] = HI_UINT16(entry.nwkAddr);
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        LCALL   ?Subroutine22 & 0xFFFF
// 1187   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
// 1188                                        cmdId, sizeof(uint16), nwkAddr);
??CrossCallReturnLabel_31:
        MOV     A,R6
        MOV     R2,A
        MOV     R1,#0x67
        LCALL   ??MT_BuildAndSendZToolResponse?relay
// 1189 }
        MOV     A,#0xf
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock81
        REQUIRE ?Subroutine5
        ; // Fall through to label ?Subroutine5

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock82 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock82

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond83 Using cfiCommon0
          CFI Function MT_UtilSrcMatchCheckSrcAddr
          CFI Conditional ??CrossCallReturnLabel_30
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI CFA_XSP16 add(XSP16, 2)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function MT_UtilSrcMatchCheckAllPending
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond84) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond84) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond84) CFA_SP SP+-5
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 2)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function MT_UtilAddrMgrEntryLookupExt
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+0
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker86 Using cfiCommon1
          CFI (cfiPicker86) NoFunction
          CFI (cfiPicker86) Picker
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_47:
        MOV     R3,#0x2
        RET
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiPicker86

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond87 Using cfiCommon0
          CFI Function MT_UtilTimeAlive
          CFI Conditional ??CrossCallReturnLabel_46
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function MT_UtilSrcMatchCheckSrcAddr
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_30
          CFI (cfiCond88) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond88) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond88) CFA_SP SP+-5
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 2)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function MT_UtilSrcMatchCheckAllPending
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_30
          CFI (cfiCond89) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond89) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond89) CFA_SP SP+-5
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 2)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function MT_UtilAddrMgrEntryLookupExt
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_47, ??CrossCallReturnLabel_31
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+0
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiPicker91 Using cfiCommon1
          CFI (cfiPicker91) NoFunction
          CFI (cfiPicker91) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        RET
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiPicker91
// 1190 
// 1191 /***************************************************************************************************
// 1192  * @fn      MT_UtilAddrMgrEntryLookupNwk
// 1193  *
// 1194  * @brief   Proxy the AddrMgrEntryLookupNwk() function.
// 1195  *
// 1196  * @param   pBuf - pointer to the received buffer
// 1197  *
// 1198  * @return  void
// 1199  ***************************************************************************************************/
// 1200 static void MT_UtilAddrMgrEntryLookupNwk(uint8 *pBuf)
// 1201 {
// 1202   AddrMgrEntry_t entry;
// 1203   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1204   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1205 
// 1206   entry.nwkAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
// 1207   (void)AddrMgrEntryLookupNwk(&entry);
// 1208 
// 1209   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL),
// 1210                                        cmdId, Z_EXTADDR_LEN, entry.extAddr);
// 1211 }
// 1212 
// 1213 #if defined MT_SYS_KEY_MANAGEMENT
// 1214 /***************************************************************************************************
// 1215  * @fn      MT_UtilAPSME_LinkKeyDataGet
// 1216  *
// 1217  * @brief   Retrieves APS Link Key data from NV.
// 1218  *
// 1219  * @param   pBuf - pointer to the received buffer
// 1220  *
// 1221  * @return  void
// 1222  ***************************************************************************************************/
// 1223 static void MT_UtilAPSME_LinkKeyDataGet(uint8 *pBuf)
// 1224 {
// 1225   uint8 rsp[MT_APSME_LINKKEY_GET_RSP_LEN];
// 1226   APSME_LinkKeyData_t *pData = NULL;
// 1227   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1228   uint16 apsLinkKeyNvId;
// 1229   uint32 *apsRxFrmCntr;
// 1230   uint32 *apsTxFrmCntr;
// 1231 
// 1232   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1233 
// 1234   *rsp = APSME_LinkKeyNVIdGet(pBuf, &apsLinkKeyNvId);
// 1235 
// 1236   if (SUCCESS == *rsp)
// 1237   {
// 1238     pData = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t));
// 1239 
// 1240     if (pData != NULL)
// 1241     {
// 1242       // retrieve key from NV
// 1243       if ( osal_nv_read( apsLinkKeyNvId, 0,
// 1244                         sizeof(APSME_LinkKeyData_t), pData) == SUCCESS)
// 1245 
// 1246       {
// 1247         uint8 *ptr = rsp+1;
// 1248         apsRxFrmCntr = &ApsLinkKeyFrmCntr[apsLinkKeyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].rxFrmCntr;
// 1249         apsTxFrmCntr = &ApsLinkKeyFrmCntr[apsLinkKeyNvId - ZCD_NV_APS_LINK_KEY_DATA_START].txFrmCntr;
// 1250 
// 1251         (void)osal_memcpy(ptr, pData->key, SEC_KEY_LEN);
// 1252         ptr += SEC_KEY_LEN;
// 1253         *ptr++ = BREAK_UINT32(*apsTxFrmCntr, 0);
// 1254         *ptr++ = BREAK_UINT32(*apsTxFrmCntr, 1);
// 1255         *ptr++ = BREAK_UINT32(*apsTxFrmCntr, 2);
// 1256         *ptr++ = BREAK_UINT32(*apsTxFrmCntr, 3);
// 1257         *ptr++ = BREAK_UINT32(*apsRxFrmCntr, 0);
// 1258         *ptr++ = BREAK_UINT32(*apsRxFrmCntr, 1);
// 1259         *ptr++ = BREAK_UINT32(*apsRxFrmCntr, 2);
// 1260         *ptr++ = BREAK_UINT32(*apsRxFrmCntr, 3);
// 1261       }
// 1262 
// 1263       // clear copy of key in RAM
// 1264       osal_memset( pData, 0x00, sizeof(APSME_LinkKeyData_t) );
// 1265 
// 1266       osal_mem_free(pData);
// 1267     }
// 1268   }
// 1269   else
// 1270   {
// 1271     // set data key and counters 0xFF
// 1272     osal_memset(&rsp[1], 0xFF, SEC_KEY_LEN + (MT_UTIL_FRM_CTR_LEN * 2));
// 1273   }
// 1274 
// 1275   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
// 1276                                        MT_APSME_LINKKEY_GET_RSP_LEN, rsp);
// 1277 
// 1278   // clear key data
// 1279   osal_memset(rsp, 0x00, MT_APSME_LINKKEY_GET_RSP_LEN);
// 1280 
// 1281 }
// 1282 
// 1283 /***************************************************************************************************
// 1284  * @fn      MT_UtilAPSME_LinkKeyNvIdGet
// 1285  *
// 1286  * @brief   Retrieves APS Link Key NV ID from the entry table.
// 1287  *
// 1288  * @param   pBuf - pointer to the received buffer
// 1289  *
// 1290  * @return  void
// 1291  ***************************************************************************************************/
// 1292 static void MT_UtilAPSME_LinkKeyNvIdGet(uint8 *pBuf)
// 1293 {
// 1294   uint8 rsp[MT_APSME_LINKKEY_NV_ID_GET_RSP_LEN];
// 1295   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1296   uint16 apsLinkKeyNvId;
// 1297 
// 1298   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1299 
// 1300   *rsp = APSME_LinkKeyNVIdGet(pBuf, &apsLinkKeyNvId);
// 1301 
// 1302   if (SUCCESS == *rsp)
// 1303   {
// 1304     rsp[1] = LO_UINT16(apsLinkKeyNvId);
// 1305     rsp[2] = HI_UINT16(apsLinkKeyNvId);
// 1306   }
// 1307   else
// 1308   {
// 1309     // send failure response with invalid NV ID
// 1310     osal_memset(&rsp[1], 0xFF, 2);
// 1311   }
// 1312 
// 1313   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
// 1314                                        MT_APSME_LINKKEY_NV_ID_GET_RSP_LEN, rsp);
// 1315 }
// 1316 #endif // MT_SYS_KEY_MANAGEMENT
// 1317 
// 1318 /***************************************************************************************************
// 1319  * @fn      MT_UtilAPSME_RequestKeyCmd
// 1320  *
// 1321  * @brief   Send RequestKey command message to TC for a specific partner Address.
// 1322  *
// 1323  * @param   pBuf  - pointer to the received buffer
// 1324  *
// 1325  * @return  void
// 1326  ***************************************************************************************************/
// 1327 void MT_UtilAPSME_RequestKeyCmd(uint8 *pBuf)
// 1328 {
// 1329   uint8 cmdId;
// 1330   uint8 partnerAddr[Z_EXTADDR_LEN];
// 1331   uint8 retValue;
// 1332 
// 1333   // parse header
// 1334   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1335   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1336 
// 1337   /* PartnerAddress */
// 1338   osal_memcpy(partnerAddr, pBuf, Z_EXTADDR_LEN);
// 1339 
// 1340   retValue = (uint8)ZDSecMgrRequestAppKey(partnerAddr);
// 1341 
// 1342   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, &retValue);
// 1343 }
// 1344 
// 1345 /***************************************************************************************************
// 1346  * @fn      MT_UtilAssocCount
// 1347  *
// 1348  * @brief   Proxy the AssocCount() function.
// 1349  *
// 1350  * @param   pBuf - pointer to the received buffer
// 1351  *
// 1352  * @return  void
// 1353  ***************************************************************************************************/
// 1354 static void MT_UtilAssocCount(uint8 *pBuf)
// 1355 {
// 1356   uint16 cnt;
// 1357   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1358   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1359 
// 1360   cnt = AssocCount(pBuf[0], pBuf[1]);
// 1361   pBuf[0] = LO_UINT16(cnt);
// 1362   pBuf[1] = HI_UINT16(cnt);
// 1363 
// 1364   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 2, pBuf);
// 1365 }
// 1366 
// 1367 /***************************************************************************************************
// 1368  * @fn      MT_UtilAssocFindDevice
// 1369  *
// 1370  * @brief   Get an associated device by index.
// 1371  *
// 1372  * @param   pBuf - pointer to the received buffer
// 1373  *
// 1374  * @return  void
// 1375  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1376 static void MT_UtilAssocFindDevice(uint8 *pBuf)
MT_UtilAssocFindDevice:
          CFI Block cfiBlock92 Using cfiCommon0
          CFI Function MT_UtilAssocFindDevice
        CODE
// 1377 {
        FUNCALL MT_UtilAssocFindDevice, AssocFindDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilAssocFindDevice, packDev_t
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilAssocFindDevice, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 22
        MOV     A,#-0x16
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
// 1378   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
        LCALL   ?Subroutine17 & 0xFFFF
// 1379   uint8 buf[sizeof(associated_devices_t)];
// 1380 
// 1381   packDev_t(buf, AssocFindDevice(pBuf[MT_RPC_FRAME_HDR_SZ]));
??CrossCallReturnLabel_22:
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??AssocFindDevice?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??packDev_t?relay
// 1382   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
// 1383                                        sizeof(associated_devices_t), buf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x16
        MOV     A,R6
        MOV     R2,A
          CFI EndBlock cfiBlock92
        REQUIRE ?Subroutine7
        ; // Fall through to label ?Subroutine7
// 1384 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiBlock93 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 31)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,#0x67
        LCALL   ??MT_BuildAndSendZToolResponse?relay
        MOV     A,#0x16
        SJMP    ??Subroutine39_0
          CFI EndBlock cfiBlock93

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond94 Using cfiCommon0
          CFI Function MT_UtilAddrMgrEntryLookupExt
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond95 Using cfiCommon0
          CFI (cfiCond95) Function MT_UtilAssocFindDevice
          CFI (cfiCond95) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond95) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond95) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond95) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond95) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond95) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond95) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond95) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond95) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond95) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond95) CFA_SP SP+0
          CFI (cfiCond95) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker96 Using cfiCommon1
          CFI (cfiPicker96) NoFunction
          CFI (cfiPicker96) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R6,A
        ; Setup parameters for call to function osal_memcpy
        ; Setup parameters for call to function packDev_t
        ; Setup parameters for call to function AssocFindDevice
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond94
          CFI EndBlock cfiCond95
          CFI EndBlock cfiPicker96

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock97 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,#0x67
        LCALL   ??MT_BuildAndSendZToolResponse?relay
        MOV     A,#0x1
          CFI EndBlock cfiBlock97
        REQUIRE ??Subroutine39_0
        ; // Fall through to label ??Subroutine39_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine39_0:
          CFI Block cfiBlock98 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 31)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Valid
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock98
// 1385 
// 1386 /***************************************************************************************************
// 1387  * @fn      MT_UtilAssocGetWithAddress
// 1388  *
// 1389  * @brief   Get an associated device by address.
// 1390  *
// 1391  * @param   pBuf - pointer to the received buffer
// 1392  *
// 1393  * @return  void
// 1394  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1395 static void MT_UtilAssocGetWithAddress(uint8 *pBuf)
MT_UtilAssocGetWithAddress:
          CFI Block cfiBlock99 Using cfiCommon0
          CFI Function MT_UtilAssocGetWithAddress
        CODE
// 1396 {
        FUNCALL MT_UtilAssocGetWithAddress, AddrMgrExtAddrValid
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilAssocGetWithAddress, AssocGetWithAddress
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilAssocGetWithAddress, packDev_t
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilAssocGetWithAddress, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 22
        MOV     A,#-0x16
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1397   extern associated_devices_t *AssocGetWithAddress(uint8 *extAddr, uint16 shortAddr);
// 1398   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
// 1399   uint8 buf[sizeof(associated_devices_t)];
// 1400 
// 1401   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R6
        ADD     A,#0x3
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
// 1402   packDev_t(buf, AssocGetWithAddress(((AddrMgrExtAddrValid(pBuf)) ? pBuf : NULL),
// 1403                                   BUILD_UINT16(pBuf[Z_EXTADDR_LEN], pBuf[Z_EXTADDR_LEN+1])));
        ; Setup parameters for call to function AddrMgrExtAddrValid
        INC     R2
        INC     R2
        INC     R2
        MOV     R3,A
        LCALL   ??AddrMgrExtAddrValid?relay
        MOV     A,R1
        JZ      ??MT_UtilAssocGetWithAddress_0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        SJMP    ??MT_UtilAssocGetWithAddress_1
??MT_UtilAssocGetWithAddress_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??MT_UtilAssocGetWithAddress_1:
        ; Setup parameters for call to function packDev_t
        ; Setup parameters for call to function AssocGetWithAddress
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R4
        ADD     A,#0x0
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        LCALL   ??AssocGetWithAddress?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??packDev_t?relay
// 1404 
// 1405   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
// 1406                                        sizeof(associated_devices_t), buf);
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0x16
        MOV     R2,?V0 + 0
        LJMP    ?Subroutine7 & 0xFFFF
          CFI EndBlock cfiBlock99
// 1407 }
// 1408 
// 1409 /***************************************************************************************************
// 1410  * @fn      MT_UtilBindAddEntry
// 1411  *
// 1412  * @brief   Add Binding Entry into Local Table.
// 1413  *
// 1414  * @param   pBuf - pointer to the received buffer
// 1415  *
// 1416  * @return  void
// 1417  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1418 static void MT_UtilBindAddEntry(uint8 *pBuf)
MT_UtilBindAddEntry:
          CFI Block cfiBlock100 Using cfiCommon0
          CFI Function MT_UtilBindAddEntry
        CODE
// 1419 {
        FUNCALL MT_UtilBindAddEntry, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 45, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 45, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, bindAddEntry
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, packBindEntry_t
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL MT_UtilBindAddEntry, MT_BuildAndSendZToolResponse
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 42, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 42, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x13
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
        ; Saved register size: 19
        ; Auto size: 23
        MOV     A,#-0x17
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1420   uint8 srcEp;
// 1421   zAddrType_t dstAddr;
// 1422   uint8 dstEp;
// 1423   uint8 numClusterIds;
// 1424   uint16 *clusterIds;
// 1425   uint8 buf[sizeof(BindingEntry_t)];
// 1426   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
// 1427   pBuf += MT_RPC_FRAME_HDR_SZ;
        MOV     A,R6
        ADD     A,#0x3
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
// 1428 
// 1429   // Initialize the return buffer
// 1430   osal_memset( buf, 0xFF, sizeof(BindingEntry_t) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0xe
        MOV     R5,#0x0
        MOV     R1,#-0x1
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
// 1431   buf[2] = 0xFE;    // set the default value of INVALID_NODE_ADDR
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x2
        MOVX    @DPTR,A
// 1432   buf[3] = 0xFF;    // set the default value of INVALID_NODE_ADDR
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x1
        MOVX    @DPTR,A
// 1433 
// 1434   srcEp = *pBuf++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 1435 
// 1436   // Destination Address mode
// 1437   dstAddr.addrMode = *pBuf++;
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     R6
        MOV     R7,DPH
// 1438 
// 1439   // Destination Address
// 1440   if ( dstAddr.addrMode == Addr64Bit )
        MOV     A,#0x3
        XRL     A,R0
        JNZ     ??MT_UtilBindAddEntry_0
// 1441   {
// 1442     uint8 *ptr; // Use this additional pointer because *pBuf is incremented later for both cases
// 1443 
// 1444     ptr = pBuf;
// 1445     osal_cpyExtAddr( dstAddr.addr.extAddr, ptr );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??sAddrExtCpy?relay
        SJMP    ??MT_UtilBindAddEntry_1
// 1446   }
// 1447   else
// 1448   {
// 1449     dstAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
??MT_UtilBindAddEntry_0:
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
// 1450   }
// 1451   // The short address occupies LSB two bytes
// 1452   pBuf += Z_EXTADDR_LEN;
??MT_UtilBindAddEntry_1:
        MOV     A,R6
        ADD     A,#0x8
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
// 1453 
// 1454   // DstEPInt
// 1455   dstEp = *pBuf++;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        INC     DPTR
// 1456 
// 1457   numClusterIds = *pBuf++;
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        INC     R6
        INC     R6
        MOV     R7,DPH
// 1458 
// 1459   if ( numClusterIds > 0 )
        JZ      ??MT_UtilBindAddEntry_2
// 1460   {
// 1461     // copy list of clusters
// 1462     clusterIds = (uint16 *)osal_mem_alloc( numClusterIds * sizeof(uint16) );
        CLR     C
        RLC     A
        MOV     ?V0 + 2,A
        CLR     A
        RLC     A
        MOV     ?V0 + 3,A
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,?V0 + 2
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
// 1463     osal_memcpy( clusterIds, pBuf, numClusterIds * sizeof(uint16));
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 8,R6
        MOV     ?V0 + 9,R7
        MOV     ?V0 + 10,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 45)
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 42)
// 1464 
// 1465     if ( clusterIds != NULL )
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??MT_UtilBindAddEntry_2
// 1466     {
// 1467       // The response to MT interface has to be pack into buf
// 1468       packBindEntry_t( buf, bindAddEntry( srcEp, &dstAddr, dstEp, numClusterIds, clusterIds ));
        ; Setup parameters for call to function packBindEntry_t
        ; Setup parameters for call to function bindAddEntry
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 44)
        MOV     R5,?V0 + 6
        MOV     R4,?V0 + 5
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,?V0 + 4
        LCALL   ??bindAddEntry?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??packBindEntry_t?relay
// 1469 
// 1470       osal_mem_free( clusterIds );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_mem_free?relay
// 1471     }
// 1472   }
// 1473 
// 1474   MT_BuildAndSendZToolResponse( ( (uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL ),
// 1475                                 cmdId, sizeof(BindingEntry_t), buf );
??MT_UtilBindAddEntry_2:
        ; Setup parameters for call to function MT_BuildAndSendZToolResponse
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R3,#0xe
        MOV     R2,?V0 + 7
        MOV     R1,#0x67
        LCALL   ??MT_BuildAndSendZToolResponse?relay
// 1476 }
        MOV     A,#0x17
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock100
// 1477 
// 1478 /***************************************************************************************************
// 1479  * @fn      packDev_t
// 1480  *
// 1481  * @brief   Pack an associated_devices_t structure into a byte buffer (pack INVALID_NODE_ADDR if
// 1482  *          the pDev parameter is NULL).
// 1483  *
// 1484  * @param   pBuf - pointer to the buffer into which to pack the structure.
// 1485  * @param   pDev - pointer to the structure.
// 1486  *
// 1487  * @return  void
// 1488  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1489 static void packDev_t(uint8 *pBuf, associated_devices_t *pDev)
packDev_t:
          CFI Block cfiBlock101 Using cfiCommon0
          CFI Function packDev_t
        CODE
// 1490 {
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 1491   if (NULL == pDev)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,R4
        ORL     A,R5
        JNZ     ??packDev_t_0
// 1492   {
// 1493     uint16 rtrn = INVALID_NODE_ADDR;
// 1494     *pBuf++ = LO_UINT16(rtrn);
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x2
        LCALL   ?Subroutine24 & 0xFFFF
// 1495     *pBuf++ = HI_UINT16(rtrn);
// 1496   }
??CrossCallReturnLabel_32:
        LJMP    ??packDev_t_1 & 0xFFFF
// 1497   else
// 1498   {
// 1499     *pBuf++ = LO_UINT16(pDev->shortAddr);
??packDev_t_0:
        LCALL   ?Subroutine8 & 0xFFFF
// 1500     *pBuf++ = HI_UINT16(pDev->shortAddr);
// 1501     *pBuf++ = LO_UINT16(pDev->addrIdx);
// 1502     *pBuf++ = HI_UINT16(pDev->addrIdx);
// 1503     *pBuf++ = pDev->nodeRelation;
// 1504     *pBuf++ = pDev->devStatus;
??CrossCallReturnLabel_0:
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine16 & 0xFFFF
// 1505     *pBuf++ = pDev->assocCnt;
??CrossCallReturnLabel_19:
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine12 & 0xFFFF
// 1506     *pBuf++ = pDev->age;
??CrossCallReturnLabel_10:
        LCALL   ?Subroutine12 & 0xFFFF
// 1507     *pBuf++ = pDev->linkInfo.txCounter;
??CrossCallReturnLabel_11:
        INC     DPTR
        LCALL   ?Subroutine11 & 0xFFFF
// 1508     *pBuf++ = pDev->linkInfo.txCost;
??CrossCallReturnLabel_8:
        LCALL   ?Subroutine11 & 0xFFFF
// 1509     *pBuf++ = pDev->linkInfo.rxLqi;
??CrossCallReturnLabel_9:
        INC     DPTR
        LCALL   ?Subroutine13 & 0xFFFF
// 1510     *pBuf++ = pDev->linkInfo.inKeySeqNum;
??CrossCallReturnLabel_12:
        ADD     A,#0xb
        MOV     DPL,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     DPH,A
        LCALL   ?Subroutine13 & 0xFFFF
// 1511     *pBuf++ = BREAK_UINT32(pDev->linkInfo.inFrmCntr, 0);
??CrossCallReturnLabel_13:
        ADD     A,#0xc
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_25:
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        LCALL   ?Subroutine20 & 0xFFFF
// 1512     *pBuf++ = BREAK_UINT32(pDev->linkInfo.inFrmCntr, 1);
??CrossCallReturnLabel_54:
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 1
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine41_0 & 0xFFFF
// 1513     *pBuf++ = BREAK_UINT32(pDev->linkInfo.inFrmCntr, 2);
??CrossCallReturnLabel_56:
        LCALL   ?L_MOV_X
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        LCALL   ?Subroutine20 & 0xFFFF
// 1514     *pBuf++ = BREAK_UINT32(pDev->linkInfo.inFrmCntr, 3);
??CrossCallReturnLabel_55:
        LCALL   ?L_MOV_X
        MOV     A,#0x18
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        INC     R2
        MOV     R3,DPH
// 1515     *pBuf++ = LO_UINT16(pDev->linkInfo.txFailure);
        MOV     A,R4
        ADD     A,#0x10
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_52:
        LCALL   ?Subroutine16 & 0xFFFF
// 1516     *pBuf++ = HI_UINT16(pDev->linkInfo.txFailure);
??CrossCallReturnLabel_20:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
??packDev_t_1:
        MOVX    @DPTR,A
// 1517   }
// 1518 }
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock101

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond102 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function packDev_t
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_0
          CFI (cfiCond103) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond103) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond103) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond103) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond103) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond103) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond103) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond103) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond103) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond103) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond103) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond103) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond103) CFA_SP SP+0
          CFI (cfiCond103) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function packBindEntry_t
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_1
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+0
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker105 Using cfiCommon1
          CFI (cfiPicker105) NoFunction
          CFI (cfiPicker105) Picker
        MOV     R0,A
        MOV     A,R5
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiPicker105
        REQUIRE ??Subroutine40_0
        ; // Fall through to label ??Subroutine40_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine40_0:
          CFI Block cfiCond106 Using cfiCommon0
          CFI Function MT_UtilCallbackSub
          CFI Conditional ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond107 Using cfiCommon0
          CFI (cfiCond107) Function packDev_t
          CFI (cfiCond107) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond107) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond107) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond107) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond107) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond107) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond107) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond107) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond107) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond107) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond107) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond107) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond107) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond107) CFA_SP SP+0
          CFI (cfiCond107) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond108 Using cfiCommon0
          CFI (cfiCond108) Function packDev_t
          CFI (cfiCond108) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_0
          CFI (cfiCond108) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond108) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond108) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond108) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond108) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond108) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond108) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond108) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond108) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond108) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond108) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond108) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond108) CFA_SP SP+0
          CFI (cfiCond108) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function packBindEntry_t
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_53, ??CrossCallReturnLabel_1
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+0
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker110 Using cfiCommon1
          CFI (cfiPicker110) NoFunction
          CFI (cfiPicker110) Picker
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
          CFI EndBlock cfiCond106
          CFI EndBlock cfiCond107
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiPicker110

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond111 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function packDev_t
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond112) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond112) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond112) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond112) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond112) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond112) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond112) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond112) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond112) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond112) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond112) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond112) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond112) CFA_SP SP+0
          CFI (cfiCond112) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker113 Using cfiCommon1
          CFI (cfiPicker113) NoFunction
          CFI (cfiPicker113) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,?V0 + 0
          CFI EndBlock cfiCond111
          CFI EndBlock cfiCond112
          CFI EndBlock cfiPicker113
        REQUIRE ??Subroutine41_0
        ; // Fall through to label ??Subroutine41_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine41_0:
          CFI Block cfiCond114 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_56
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function packDev_t
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond115) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond115) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond115) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond115) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond115) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond115) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond115) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond115) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond115) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond115) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond115) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond115) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond115) CFA_SP SP+0
          CFI (cfiCond115) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function packDev_t
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+0
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker117 Using cfiCommon1
          CFI (cfiPicker117) NoFunction
          CFI (cfiPicker117) Picker
        MOVX    @DPTR,A
        INC     DPTR
        INC     R2
        MOV     R3,DPH
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     R0,#?V0 + 0
        RET
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiPicker117

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond118 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond119 Using cfiCommon0
          CFI (cfiCond119) Function packDev_t
          CFI (cfiCond119) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond119) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond119) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond119) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond119) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond119) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond119) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond119) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond119) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond119) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond119) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond119) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond119) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond119) CFA_SP SP+0
          CFI (cfiCond119) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker120 Using cfiCommon1
          CFI (cfiPicker120) NoFunction
          CFI (cfiPicker120) Picker
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_58:
        RET
          CFI EndBlock cfiCond118
          CFI EndBlock cfiCond119
          CFI EndBlock cfiPicker120

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond121 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function packDev_t
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+0
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker123 Using cfiCommon1
          CFI (cfiPicker123) NoFunction
          CFI (cfiPicker123) Picker
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_36:
        RET
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiPicker123

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond124 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function packDev_t
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_11
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+0
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function packDev_t
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_8
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+0
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function packDev_t
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_9
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+0
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker128 Using cfiCommon1
          CFI (cfiPicker128) NoFunction
          CFI (cfiPicker128) Picker
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiPicker128

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond129 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function packDev_t
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+0
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker131 Using cfiCommon1
          CFI (cfiPicker131) NoFunction
          CFI (cfiPicker131) Picker
        LCALL   ?Subroutine26 & 0xFFFF
??CrossCallReturnLabel_37:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiPicker131
// 1519 
// 1520 /***************************************************************************************************
// 1521  * @fn      packBindEntry_t
// 1522  *
// 1523  * @brief   Pack a BindingEntry_t structure into a byte buffer (pack INVALID_NODE_ADDR
// 1524  *          as dstIdx if the pBind parameter is NULL).
// 1525  *
// 1526  * @param   pBuf - pointer to the buffer into which to pack the structure.
// 1527  * @param   pBind - pointer to the structure.
// 1528  *
// 1529  * @return  void
// 1530  ***************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1531 static void packBindEntry_t(uint8 *pBuf, BindingEntry_t *pBind)
packBindEntry_t:
          CFI Block cfiBlock132 Using cfiCommon0
          CFI Function packBindEntry_t
        CODE
// 1532 {
        FUNCALL packBindEntry_t, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
// 1533   if ( NULL == pBind )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOV     A,R4
        ORL     A,R5
        JNZ     ??packBindEntry_t_0
// 1534   {
// 1535     uint16 rtrn = INVALID_NODE_ADDR;
// 1536     *pBuf++ = 0xFF;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x1
        LCALL   ?Subroutine24 & 0xFFFF
// 1537     *pBuf++ = 0xFF;
??CrossCallReturnLabel_33:
        MOVX    @DPTR,A
        INC     DPTR
// 1538     *pBuf++ = LO_UINT16(rtrn);
        DEC     A
        MOVX    @DPTR,A
        INC     DPTR
// 1539     *pBuf++ = HI_UINT16(rtrn);
        INC     A
        MOVX    @DPTR,A
        INC     DPTR
// 1540     *pBuf++ = 0xFF;
        MOVX    @DPTR,A
        INC     DPTR
// 1541     *pBuf++ = 0xFF;
        MOVX    @DPTR,A
        SJMP    ??packBindEntry_t_1
// 1542 
// 1543   }
// 1544   else
// 1545   {
// 1546     *pBuf++ = pBind->srcEP;
??packBindEntry_t_0:
        LCALL   ?Subroutine8 & 0xFFFF
// 1547     *pBuf++ = pBind->dstGroupMode;
// 1548     *pBuf++ = LO_UINT16( pBind->dstIdx );
// 1549     *pBuf++ = HI_UINT16( pBind->dstIdx );
// 1550     *pBuf++ = pBind->dstEP;
// 1551     *pBuf++ = pBind->numClusterIds;
??CrossCallReturnLabel_1:
        MOV     A,R4
        ADD     A,#0x5
        LCALL   ?Subroutine19 & 0xFFFF
// 1552 
// 1553     osal_memcpy( pBuf, pBind->clusterIdList, pBind->numClusterIds * sizeof(uint16));
// 1554   }
??CrossCallReturnLabel_26:
        LCALL   ?Subroutine13 & 0xFFFF
??CrossCallReturnLabel_14:
        ADD     A,#0x6
        MOV     ?V0 + 0,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        MOV     R4,A
        CLR     A
        RLC     A
        MOV     R5,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
// 1555 }
??packBindEntry_t_1:
        LJMP    ?Subroutine5 & 0xFFFF
          CFI EndBlock cfiBlock132

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond133 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function packBindEntry_t
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+0
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker135 Using cfiCommon1
          CFI (cfiPicker135) NoFunction
          CFI (cfiPicker135) Picker
        MOVX    @DPTR,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#-0x1
        RET
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiPicker135

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond136 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function packBindEntry_t
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+0
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker138 Using cfiCommon1
          CFI (cfiPicker138) NoFunction
          CFI (cfiPicker138) Picker
        MOV     R0,A
        MOV     A,R5
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        RET
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiPicker138

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond139 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function packDev_t
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond140) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond140) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond140) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond140) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond140) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond140) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond140) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond140) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond140) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond140) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond140) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond140) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond140) CFA_SP SP+0
          CFI (cfiCond140) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function packBindEntry_t
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond141) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond141) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond141) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond141) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond141) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond141) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond141) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond141) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond141) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond141) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond141) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond141) CFA_SP SP+0
          CFI (cfiCond141) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker142 Using cfiCommon1
          CFI (cfiPicker142) NoFunction
          CFI (cfiPicker142) Picker
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_38:
        RET
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiPicker142

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond143 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function packDev_t
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_13
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond144) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+0
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function packBindEntry_t
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_14
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+0
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function packDev_t
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_0
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+0
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function packBindEntry_t
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_1
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+0
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker148 Using cfiCommon1
          CFI (cfiPicker148) NoFunction
          CFI (cfiPicker148) Picker
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_62:
        ; Setup parameters for call to function osal_memcpy
        MOV     A,R4
        RET
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiPicker148

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond149 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function packBindEntry_t
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond150) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond150) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond150) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond150) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond150) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond150) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond150) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond150) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond150) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond150) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond150) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond150) CFA_SP SP+0
          CFI (cfiCond150) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker151 Using cfiCommon1
          CFI (cfiPicker151) NoFunction
          CFI (cfiPicker151) Picker
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_39:
        ADD     A,#0x2
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL   ??Subroutine42_0 & 0xFFFF
??CrossCallReturnLabel_57:
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_59:
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_60:
        RET
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiPicker151

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond152 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function packBindEntry_t
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_1
          CFI (cfiCond153) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond153) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond153) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond153) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond153) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond153) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond153) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond153) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond153) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond153) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond153) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond153) CFA_SP SP+0
          CFI (cfiCond153) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function packDev_t
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_0
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+0
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function packBindEntry_t
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_1
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+0
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker156 Using cfiCommon1
          CFI (cfiPicker156) NoFunction
          CFI (cfiPicker156) Picker
        INC     DPTR
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiPicker156
        REQUIRE ??Subroutine42_0
        ; // Fall through to label ??Subroutine42_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine42_0:
          CFI Block cfiCond157 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function packDev_t
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_20
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+0
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function packDev_t
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_0
          CFI (cfiCond159) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond159) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond159) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond159) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond159) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond159) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond159) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond159) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond159) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond159) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond159) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond159) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond159) CFA_SP SP+0
          CFI (cfiCond159) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function packBindEntry_t
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_1
          CFI (cfiCond160) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond160) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond160) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond160) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond160) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond160) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond160) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond160) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond160) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond160) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond160) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond160) CFA_SP SP+0
          CFI (cfiCond160) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function packDev_t
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_0
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+0
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function packBindEntry_t
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_1
          CFI (cfiCond162) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond162) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond162) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond162) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond162) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond162) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond162) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond162) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond162) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond162) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond162) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond162) CFA_SP SP+0
          CFI (cfiCond162) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function packDev_t
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_0
          CFI (cfiCond163) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond163) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond163) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond163) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond163) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond163) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond163) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond163) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond163) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond163) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond163) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond163) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond163) CFA_SP SP+0
          CFI (cfiCond163) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function packBindEntry_t
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_1
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+0
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker165 Using cfiCommon1
          CFI (cfiPicker165) NoFunction
          CFI (cfiPicker165) Picker
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_63:
        RET
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiPicker165

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond166 Using cfiCommon0
          CFI Function packDev_t
          CFI Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function packDev_t
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_36, ??CrossCallReturnLabel_11
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+0
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function packDev_t
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_8
          CFI (cfiCond168) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond168) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond168) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond168) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond168) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond168) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond168) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond168) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond168) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond168) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond168) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond168) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond168) CFA_SP SP+0
          CFI (cfiCond168) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function packDev_t
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_61, ??CrossCallReturnLabel_37, ??CrossCallReturnLabel_9
          CFI (cfiCond169) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond169) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond169) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond169) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond169) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond169) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond169) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond169) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond169) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond169) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond169) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond169) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond169) CFA_SP SP+0
          CFI (cfiCond169) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function packDev_t
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_12
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+0
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function packDev_t
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_13
          CFI (cfiCond171) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond171) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond171) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond171) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond171) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond171) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond171) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond171) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond171) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond171) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond171) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond171) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond171) CFA_SP SP+0
          CFI (cfiCond171) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function packBindEntry_t
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_38, ??CrossCallReturnLabel_14
          CFI (cfiCond172) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond172) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond172) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond172) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond172) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond172) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond172) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond172) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond172) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond172) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond172) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond172) CFA_SP SP+0
          CFI (cfiCond172) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function packDev_t
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_0
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+0
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function packBindEntry_t
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_39, ??CrossCallReturnLabel_1
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+0
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond175 Using cfiCommon0
          CFI (cfiCond175) Function packDev_t
          CFI (cfiCond175) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_0
          CFI (cfiCond175) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond175) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond175) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond175) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond175) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond175) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond175) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond175) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond175) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond175) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond175) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond175) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond175) CFA_SP SP+0
          CFI (cfiCond175) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond176 Using cfiCommon0
          CFI (cfiCond176) Function packBindEntry_t
          CFI (cfiCond176) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_1
          CFI (cfiCond176) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond176) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond176) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond176) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond176) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond176) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond176) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond176) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond176) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond176) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond176) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond176) CFA_SP SP+0
          CFI (cfiCond176) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function packDev_t
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_0
          CFI (cfiCond177) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond177) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond177) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond177) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond177) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond177) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond177) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond177) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond177) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond177) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond177) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond177) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond177) CFA_SP SP+0
          CFI (cfiCond177) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function packBindEntry_t
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_1
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+0
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function packDev_t
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_19
          CFI (cfiCond179) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond179) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond179) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond179) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond179) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond179) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond179) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond179) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond179) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond179) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond179) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond179) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond179) CFA_SP SP+0
          CFI (cfiCond179) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond180 Using cfiCommon0
          CFI (cfiCond180) Function packDev_t
          CFI (cfiCond180) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_20
          CFI (cfiCond180) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond180) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond180) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond180) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond180) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond180) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond180) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond180) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond180) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond180) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond180) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond180) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond180) CFA_SP SP+0
          CFI (cfiCond180) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function packDev_t
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_0
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+0
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function packBindEntry_t
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_63, ??CrossCallReturnLabel_57, ??CrossCallReturnLabel_1
          CFI (cfiCond182) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond182) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond182) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond182) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond182) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond182) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond182) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond182) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond182) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond182) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond182) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond182) CFA_SP SP+0
          CFI (cfiCond182) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker183 Using cfiCommon1
          CFI (cfiPicker183) NoFunction
          CFI (cfiPicker183) Picker
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        INC     R2
        MOV     R3,DPH
        RET
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiCond175
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiPicker183

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UtilCommandProcessing?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilCommandProcessing

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UtilGetDeviceInfo?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilGetDeviceInfo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UtilGetNvInfo?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilGetNvInfo

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UtilSetPanID?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilSetPanID

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UtilSetChannels?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilSetChannels

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UtilSetSecLevel?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilSetSecLevel

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UtilSetPreCfgKey?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilSetPreCfgKey

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UtilCallbackSub?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilCallbackSub

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UtilTimeAlive?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilTimeAlive

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UtilLedControl?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilLedControl

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UtilSrcMatchEnable?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilSrcMatchEnable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UtilSrcMatchAddEntry?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilSrcMatchAddEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UtilSrcMatchDeleteEntry?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilSrcMatchDeleteEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UtilSrcMatchCheckSrcAddr?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilSrcMatchCheckSrcAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UtilSrcMatchAckAllPending?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilSrcMatchAckAllPending

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UtilSrcMatchCheckAllPending?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilSrcMatchCheckAllPending

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UtilDataReq?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilDataReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UtilAddrMgrEntryLookupExt?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilAddrMgrEntryLookupExt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UtilAssocFindDevice?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilAssocFindDevice

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UtilAssocGetWithAddress?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilAssocGetWithAddress

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??MT_UtilBindAddEntry?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    MT_UtilBindAddEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??packDev_t?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    packDev_t

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??packBindEntry_t?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    packBindEntry_t

        END
// 1556 
// 1557 #if defined ZCL_KEY_ESTABLISH
// 1558 /***************************************************************************************************
// 1559  * @fn      MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment
// 1560  *
// 1561  * @brief   Proxy the zclGeneral_KeyEstablish_InitiateKeyEstablishment() function.
// 1562  *
// 1563  * @param   pBuf - pointer to the received buffer
// 1564  *
// 1565  * @return  void
// 1566  ***************************************************************************************************/
// 1567 static void MT_UtilzclGeneral_KeyEstablish_InitiateKeyEstablishment(uint8 *pBuf)
// 1568 {
// 1569   afAddrType_t partnerAddr;
// 1570   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1571   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1572 
// 1573   partnerAddr.panId = 0;  // Not an inter-pan message.
// 1574   partnerAddr.endPoint = pBuf[2];
// 1575   partnerAddr.addrMode = (afAddrMode_t)pBuf[3];
// 1576   if (afAddr64Bit == partnerAddr.addrMode)
// 1577   {
// 1578     (void)osal_memcpy(partnerAddr.addr.extAddr, pBuf+4, Z_EXTADDR_LEN);
// 1579   }
// 1580   else
// 1581   {
// 1582     partnerAddr.addr.shortAddr = BUILD_UINT16(pBuf[4], pBuf[5]);
// 1583   }
// 1584 
// 1585   zcl_key_establish_task_id = pBuf[0];
// 1586   *pBuf = zclGeneral_KeyEstablish_InitiateKeyEstablishment(MT_TaskID, &partnerAddr, pBuf[1]);
// 1587   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, pBuf);
// 1588 }
// 1589 
// 1590 /***************************************************************************************************
// 1591  * @fn      MT_UtilzclGeneral_KeyEstablishment_ECDSASign
// 1592  *
// 1593  * @brief   Proxy the zclGeneral_KeyEstablishment_ECDSASign() function.
// 1594  *
// 1595  * @param   pBuf - pointer to the received buffer
// 1596  *
// 1597  * @return  void
// 1598  ***************************************************************************************************/
// 1599 static void MT_UtilzclGeneral_KeyEstablishment_ECDSASign(uint8 *pBuf)
// 1600 {
// 1601 #if defined TC_LINKKEY_JOIN
// 1602   uint8 *output = osal_mem_alloc(SE_PROFILE_SIGNATURE_LENGTH+1);
// 1603   uint8 cmdId = pBuf[MT_RPC_POS_CMD1];
// 1604   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1605 
// 1606   if (NULL == output)
// 1607   {
// 1608     *pBuf = FAILURE;
// 1609     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId, 1, pBuf);
// 1610   }
// 1611   else
// 1612   {
// 1613     *output = zclGeneral_KeyEstablishment_ECDSASign(pBuf+1, *pBuf, output+1);
// 1614     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_UTIL), cmdId,
// 1615                                          SE_PROFILE_SIGNATURE_LENGTH+1, output);
// 1616     osal_mem_free(output);
// 1617   }
// 1618 #endif
// 1619 }
// 1620 
// 1621 /***************************************************************************************************
// 1622  * @fn      MT_UtilKeyEstablishInd
// 1623  *
// 1624  * @brief   Proxy the ZCL_KEY_ESTABLISH_IND command.
// 1625  *
// 1626  * @param   pInd - Pointer to a keyEstablishmentInd_t structure.
// 1627  *
// 1628  * @return  None
// 1629  ***************************************************************************************************/
// 1630 void MT_UtilKeyEstablishInd(keyEstablishmentInd_t *pInd)
// 1631 {
// 1632   uint8 msg[6];
// 1633 
// 1634   msg[0] = zcl_key_establish_task_id;
// 1635   msg[1] = pInd->hdr.event;
// 1636   msg[2] = pInd->hdr.status;
// 1637   msg[3] = pInd->waitTime;
// 1638   msg[4] = LO_UINT16(pInd->keyEstablishmentSuite);
// 1639   msg[5] = HI_UINT16(pInd->keyEstablishmentSuite);
// 1640 
// 1641   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_UTIL),
// 1642                                        MT_UTIL_ZCL_KEY_ESTABLISH_IND, 6, msg);
// 1643 }
// 1644 #endif
// 1645 
// 1646 /***************************************************************************************************
// 1647  * @fn      MT_UtilSync
// 1648  *
// 1649  * @brief   Process the MT_UTIL_SYNC command
// 1650  *
// 1651  * @param   None
// 1652  *
// 1653  * @return  None
// 1654  ***************************************************************************************************/
// 1655 static void MT_UtilSync(void)
// 1656 {
// 1657  MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ|(uint8)MT_RPC_SYS_UTIL),MT_UTIL_SYNC_REQ,0,0);
// 1658 }
// 1659 #endif /* !defined NONWK */
// 1660 #endif /* MT_UTIL_FUNC */
// 1661 /**************************************************************************************************
// 1662  **************************************************************************************************/
// 
// 3 334 bytes in segment BANKED_CODE
//   138 bytes in segment BANK_RELAYS
//     4 bytes in segment XDATA_ROM_C
// 
// 3 472 bytes of CODE  memory
//     0 bytes of CONST memory (+ 4 bytes shared)
//
//Errors: none
//Warnings: none
