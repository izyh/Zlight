###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             12/Apr/2014  12:18:04 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Components\mt\MT_ZDO.c                       #
#    Command line       =  -f "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f "D:\Texas         #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO       #
#                          -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f "D:\Texas               #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wZCL.cfg" "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Components\mt\MT_ZDO.c" -D                   #
#                          FEATURE_GREEN_POWER -D SECURE=1 -D                 #
#                          TC_LINKKEY_JOIN -D ZDSECMGR_TC_DEVICE_MAX=2 -D     #
#                          NV_RESTORE -D HOLD_AUTO_START -D INTER_PAN -D      #
#                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC  #
#                          -D MT_ZDO_FUNC -D MT_ZDO_CB_FUNC -D MT_UTIL_FUNC   #
#                          -D MT_ZDO_MGMT -D LCD_SUPPORTED -D HAL_LCD=FALSE   #
#                          -D HAL_KEY=FALSE -D ZCL_BASIC -D ZCL_READ -D       #
#                          ZCL_WRITE -D ZCL_IDENTIFY -D ZCL_ON_OFF -D         #
#                          ZCL_SCENES -D ZCL_GROUPS -D                        #
#                          ZCL_LIGHT_LINK_ENHANCE -D ZCL_LEVEL_CTRL -D        #
#                          ZCL_COLOR_CTRL -D xMAX_CHANNELS_24GHZ=0x02108800   #
#                          -lC "D:\Texas Instruments\Z-Stack Lighting         #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\List\" -lA "D:\Texas Instruments\Z-Stack     #
#                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC253 #
#                          x\BridgeEB-Pro\List\" --diag_suppress Pe001,Pa010  #
#                          -o "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\Obj\" -e --debug --core=plain --dptr=16,1    #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\" -I    #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\Sour #
#                          ce\" -I "D:\Texas Instruments\Z-Stack Lighting     #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\S #
#                          ource\" -I "D:\Texas Instruments\Z-Stack Lighting  #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\HomeAutomation\Source\" -I "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\HomeAutomation\SampleLight\Source\" -I           #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\ZMain\TI2530DB\" -I "D:\Texas                    #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\hal\include\" -I "D:\Texas      #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\hal\target\CC2530EB\" -I        #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\include\" -I "D:\Texas      #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\high_level\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\" -I        #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\single_chip #
#                          \" -I "D:\Texas Instruments\Z-Stack Lighting       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mt\" -I "D:\Texas               #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\osal\include\" -I "D:\Texas     #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\services\saddr\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\services\sdata\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\af\" -I "D:\Texas         #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\nwk\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sapi\" -I "D:\Texas       #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sec\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sys\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\zcl\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\zdo\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\zmac\" -I "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\zmac\f8w\" -Ohz                 #
#                          --require_prototypes                               #
#    List file          =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\List\MT_ZDO.lst                              #
#    Object file        =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\Obj\MT_ZDO.r51                               #
#                                                                             #
#                                                                             #
###############################################################################

D:\Texas Instruments\Z-Stack Lighting 1.0.2\Components\mt\MT_ZDO.c
      1          /**************************************************************************************************
      2            Filename:       MT_ZDO.c
      3            Revised:        $Date: 2013-11-13 13:09:12 -0800 (Wed, 13 Nov 2013) $
      4            Revision:       $Revision: 36079 $
      5          
      6            Description:    MonitorTest functions for the ZDO layer.
      7          
      8          
      9            Copyright 2004-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          #ifdef MT_ZDO_FUNC
     41          
     42          /**************************************************************************************************
     43           * INCLUDES
     44           **************************************************************************************************/
     45          #include "ZComDef.h"
     46          #include "OSAL.h"
     47          #include "OSAL_Nv.h"
     48          #include "MT.h"
     49          #include "MT_ZDO.h"
     50          #include "APSMEDE.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDApp.h"
     55          #include "OnBoard.h"
     56          #include "aps_groups.h"
     57          
     58          #if defined ( MT_ZDO_EXTENSIONS )
     59            #include "rtg.h"
     60          #endif
     61          #if defined ( MT_SYS_KEY_MANAGEMENT ) || defined ( MT_ZDO_EXTENSIONS )
     62            #include "ZDSecMgr.h"
     63          #endif
     64          
     65          #include "nwk_util.h"
     66          
     67          /**************************************************************************************************
     68           * CONSTANTS
     69           **************************************************************************************************/
     70          #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
     71          #define MT_ZDO_ADDR_RSP_LEN               0x0D
     72          #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
     73          #define MT_ZDO_BEACON_IND_LEN             21
     74          #define MT_ZDO_BEACON_IND_PACK_LEN        (MT_UART_TX_BUFF_MAX - SPI_0DATA_MSG_LEN)
     75          #define MT_ZDO_JOIN_CNF_LEN               5
     76          
     77          // Message must pack nwk addr, entire (not just pointer to) ieee addr, and packet cost, so the
     78          // sizeof(zdoConcentratorInd_t) is not usable.
     79          #define MT_ZDO_CONCENTRATOR_IND_LEN      (2 + Z_EXTADDR_LEN + 1)
     80          
     81          #define MTZDO_RESPONSE_BUFFER_LEN   100
     82          
     83          #define MTZDO_MAX_MATCH_CLUSTERS    16
     84          #define MTZDO_MAX_ED_BIND_CLUSTERS  15
     85          
     86          // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
     87          #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
     88          
     89          #define MT_ZDO_STATUS_LEN   1
     90          
     91          #if defined ( MT_ZDO_EXTENSIONS )
     92          typedef struct
     93          {
     94            uint16            ami;
     95            uint16            keyNvId;   // index to the Link Key table in NV
     96            ZDSecMgr_Authentication_Option authenticateOption;
     97          } ZDSecMgrEntry_t;
     98          #endif  // MT_ZDO_EXTENSIONS
     99          
    100          /**************************************************************************************************
    101           * GLOBAL VARIABLES
    102           **************************************************************************************************/

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    103          uint32 _zdoCallbackSub;
   \                     _zdoCallbackSub:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    104          uint8 *pBeaconIndBuf = NULL;
   \                     pBeaconIndBuf:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    105          
    106          /**************************************************************************************************
    107           * LOCAL VARIABLES
    108           **************************************************************************************************/
    109          
    110          /**************************************************************************************************
    111           * LOCAL FUNCTIONS
    112           **************************************************************************************************/
    113          #if defined (MT_ZDO_FUNC)
    114          void MT_ZdoNWKAddressRequest(uint8 *pBuf);
    115          void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
    116          void MT_ZdoNodeDescRequest(uint8 *pBuf);
    117          void MT_ZdoPowerDescRequest(uint8 *pBuf);
    118          void MT_ZdoSimpleDescRequest(uint8 *pBuf);
    119          void MT_ZdoActiveEpRequest(uint8 *pBuf);
    120          void MT_ZdoMatchDescRequest(uint8 *pBuf);
    121          void MT_ZdoComplexDescRequest(uint8 *pBuf);
    122          void MT_ZdoUserDescRequest(uint8 *pBuf);
    123          void MT_ZdoEndDevAnnce(uint8 *pBuf);
    124          void MT_ZdoUserDescSet(uint8 *pBuf);
    125          void MT_ZdoServiceDiscRequest(uint8 *pBuf);
    126          #if defined ( ZIGBEE_CHILD_AGING )
    127          void MT_ZdoEndDeviceTimeoutRequest(uint8 *pBuf);
    128          #endif // ZIGBEE_CHILD_AGING
    129          void MT_ZdoEndDevBindRequest(uint8 *pBuf);
    130          void MT_ZdoBindRequest(uint8 *pBuf);
    131          void MT_ZdoUnbindRequest(uint8 *pBuf);
    132          void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
    133          #if defined ( MT_SYS_KEY_MANAGEMENT )
    134          void MT_ZdoSetLinkKey(uint8 *pBuf);
    135          void MT_ZdoRemoveLinkKey(uint8 *pBuf);
    136          void MT_ZdoGetLinkKey(uint8 *pBuf);
    137          #endif /* MT_SYS_KEY_MANAGEMENT */
    138          void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf);
    139          void MT_ZdoJoinReq(uint8 *pBuf);
    140          /* Call back function */
    141          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr );
    142          void *MT_ZdoBeaconIndCB ( void *pStr );
    143          void *MT_ZdoJoinCnfCB ( void *pStr );
    144          #if defined (MT_ZDO_MGMT)
    145          void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
    146          void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
    147          void MT_ZdoMgmtBindRequest(uint8 *pBuf);
    148          void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
    149          void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
    150          void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
    151          void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
    152          #endif /* MT_ZDO_MGMT */
    153          void MT_ZdoSendData( uint8 *pBuf );
    154          void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf );
    155          void MT_ZdoStartupFromApp(uint8 *pBuf);
    156          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
    157          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
    158          #endif /* MT_ZDO_FUNC */
    159          
    160          #if defined (MT_ZDO_CB_FUNC)
    161          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
    162          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
    163          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
    164          void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
    165          void* MT_ZdoSrcRtgCB( void *pStr );
    166          static void *MT_ZdoConcentratorIndCB(void *pStr);
    167          static void *MT_ZdoLeaveInd(void *vPtr);
    168          #endif /* MT_ZDO_CB_FUNC */
    169          
    170          #if defined ( MT_ZDO_EXTENSIONS )
    171          void MT_ZdoSecAddLinkKey( uint8 *pBuf );
    172          void MT_ZdoSecEntryLookupExt( uint8 *pBuf );
    173          void MT_ZdoSecDeviceRemove( uint8 *pBuf );
    174          void MT_ZdoExtRouteDisc( uint8 *pBuf );
    175          void MT_ZdoExtRouteCheck( uint8 *pBuf );
    176          static void MT_ZdoExtRemoveGroup( uint8 *pBuf );
    177          static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf );
    178          static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf );
    179          static void MT_ZdoExtFindGroup( uint8 *pBuf );
    180          static void MT_ZdoExtAddGroup( uint8 *pBuf );
    181          static void MT_ZdoExtCountAllGroups( uint8 *pBuf );
    182          extern ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
    183          #endif // MT_ZDO_EXTENSIONS
    184          
    185          #if defined (MT_ZDO_FUNC)
    186          /***************************************************************************************************
    187           * @fn      MT_ZdoInit
    188           *
    189           * @brief   MT ZDO initialization
    190           *
    191           * @param   none
    192           *
    193           * @return  none
    194           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    195          void MT_ZdoInit(void)
   \                     MT_ZdoInit:
    196          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    197          #ifdef MT_ZDO_CB_FUNC
    198            /* Register with ZDO for indication callbacks */
    199            ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000004   7A..         MOV     R2,#??MT_ZdoSrcRtgCB?relay & 0xff
   \   000006   7B..         MOV     R3,#(??MT_ZdoSrcRtgCB?relay >> 8) & 0xff
   \   000008   7900         MOV     R1,#0x0
   \   00000A   12....       LCALL   ??ZDO_RegisterForZdoCB?relay
    200            ZDO_RegisterForZdoCB(ZDO_CONCENTRATOR_IND_CBID, &MT_ZdoConcentratorIndCB);
   \   00000D                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00000D   7A..         MOV     R2,#??MT_ZdoConcentratorIndCB?relay & 0xff
   \   00000F   7B..         MOV     R3,#(??MT_ZdoConcentratorIndCB?relay >> 8) & 0xff
   \   000011   7901         MOV     R1,#0x1
   \   000013   12....       LCALL   ??ZDO_RegisterForZdoCB?relay
    201            ZDO_RegisterForZdoCB(ZDO_LEAVE_IND_CBID, &MT_ZdoLeaveInd);
   \   000016                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000016   7A..         MOV     R2,#??MT_ZdoLeaveInd?relay & 0xff
   \   000018   7B..         MOV     R3,#(??MT_ZdoLeaveInd?relay >> 8) & 0xff
   \   00001A   7906         MOV     R1,#0x6
   \   00001C   12....       LCALL   ??ZDO_RegisterForZdoCB?relay
    202          #endif
    203          }
   \   00001F                REQUIRE ?Subroutine0
   \   00001F                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    204          
    205          /***************************************************************************************************
    206           * @fn      MT_ZdoCommandProcessing
    207           *
    208           * @brief
    209           *
    210           *   Process all the ZDO commands that are issued by test tool
    211           *
    212           * @param   pBuf - pointer to the msg buffer
    213           *
    214           *          | LEN  | CMD0  | CMD1  |  DATA  |
    215           *          |  1   |   1   |   1   |  0-255 |
    216           *
    217           * @return  status
    218           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    219          uint8 MT_ZdoCommandProcessing(uint8* pBuf)
   \                     MT_ZdoCommandProcessing:
    220          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    221            uint8 status = MT_RPC_SUCCESS;
   \   000005   7E00         MOV     R6,#0x0
    222          
    223            switch (pBuf[MT_RPC_POS_CMD1])
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   7003         JNZ     $+5
   \   000010   02....       LJMP    ??MT_ZdoCommandProcessing_0 & 0xFFFF
   \   000013   14           DEC     A
   \   000014   7003         JNZ     $+5
   \   000016   02....       LJMP    ??MT_ZdoCommandProcessing_1 & 0xFFFF
   \   000019   14           DEC     A
   \   00001A   7003         JNZ     $+5
   \   00001C   02....       LJMP    ??MT_ZdoCommandProcessing_2 & 0xFFFF
   \   00001F   14           DEC     A
   \   000020   7003         JNZ     $+5
   \   000022   02....       LJMP    ??MT_ZdoCommandProcessing_3 & 0xFFFF
   \   000025   14           DEC     A
   \   000026   7003         JNZ     $+5
   \   000028   02....       LJMP    ??MT_ZdoCommandProcessing_4 & 0xFFFF
   \   00002B   14           DEC     A
   \   00002C   7003         JNZ     $+5
   \   00002E   02....       LJMP    ??MT_ZdoCommandProcessing_5 & 0xFFFF
   \   000031   14           DEC     A
   \   000032   7003         JNZ     $+5
   \   000034   02....       LJMP    ??MT_ZdoCommandProcessing_6 & 0xFFFF
   \   000037   14           DEC     A
   \   000038   7003         JNZ     $+5
   \   00003A   02....       LJMP    ??MT_ZdoCommandProcessing_7 & 0xFFFF
   \   00003D   14           DEC     A
   \   00003E   7003         JNZ     $+5
   \   000040   02....       LJMP    ??MT_ZdoCommandProcessing_8 & 0xFFFF
   \   000043   24FE         ADD     A,#-0x2
   \   000045   7003         JNZ     $+5
   \   000047   02....       LJMP    ??MT_ZdoCommandProcessing_9 & 0xFFFF
   \   00004A   14           DEC     A
   \   00004B   7003         JNZ     $+5
   \   00004D   02....       LJMP    ??MT_ZdoCommandProcessing_10 & 0xFFFF
   \   000050   14           DEC     A
   \   000051   7003         JNZ     $+5
   \   000053   02....       LJMP    ??MT_ZdoCommandProcessing_11 & 0xFFFF
   \   000056   14           DEC     A
   \   000057   7003         JNZ     $+5
   \   000059   02....       LJMP    ??MT_ZdoCommandProcessing_12 & 0xFFFF
   \   00005C   24ED         ADD     A,#-0x13
   \   00005E   7003         JNZ     $+5
   \   000060   02....       LJMP    ??MT_ZdoCommandProcessing_13 & 0xFFFF
   \   000063   14           DEC     A
   \   000064   7003         JNZ     $+5
   \   000066   02....       LJMP    ??MT_ZdoCommandProcessing_14 & 0xFFFF
   \   000069   14           DEC     A
   \   00006A   7003         JNZ     $+5
   \   00006C   02....       LJMP    ??MT_ZdoCommandProcessing_15 & 0xFFFF
   \   00006F   24FC         ADD     A,#-0x4
   \   000071   7003         JNZ     $+5
   \   000073   02....       LJMP    ??MT_ZdoCommandProcessing_16 & 0xFFFF
   \   000076   14           DEC     A
   \   000077   7003         JNZ     $+5
   \   000079   02....       LJMP    ??MT_ZdoCommandProcessing_17 & 0xFFFF
   \   00007C   14           DEC     A
   \   00007D   7003         JNZ     $+5
   \   00007F   02....       LJMP    ??MT_ZdoCommandProcessing_18 & 0xFFFF
   \   000082   14           DEC     A
   \   000083   7003         JNZ     $+5
   \   000085   02....       LJMP    ??MT_ZdoCommandProcessing_19 & 0xFFFF
   \   000088   24F9         ADD     A,#-0x7
   \   00008A   7003         JNZ     $+5
   \   00008C   02....       LJMP    ??MT_ZdoCommandProcessing_20 & 0xFFFF
   \   00008F   14           DEC     A
   \   000090   7003         JNZ     $+5
   \   000092   02....       LJMP    ??MT_ZdoCommandProcessing_21 & 0xFFFF
   \   000095   14           DEC     A
   \   000096   7003         JNZ     $+5
   \   000098   02....       LJMP    ??MT_ZdoCommandProcessing_22 & 0xFFFF
   \   00009B   14           DEC     A
   \   00009C   7003         JNZ     $+5
   \   00009E   02....       LJMP    ??MT_ZdoCommandProcessing_23 & 0xFFFF
   \   0000A1   14           DEC     A
   \   0000A2   7003         JNZ     $+5
   \   0000A4   02....       LJMP    ??MT_ZdoCommandProcessing_24 & 0xFFFF
   \   0000A7   14           DEC     A
   \   0000A8   7003         JNZ     $+5
   \   0000AA   02....       LJMP    ??MT_ZdoCommandProcessing_25 & 0xFFFF
   \   0000AD   14           DEC     A
   \   0000AE   7003         JNZ     $+5
   \   0000B0   02....       LJMP    ??MT_ZdoCommandProcessing_26 & 0xFFFF
   \   0000B3   14           DEC     A
   \   0000B4   7003         JNZ     $+5
   \   0000B6   02....       LJMP    ??MT_ZdoCommandProcessing_27 & 0xFFFF
   \   0000B9   24F9         ADD     A,#-0x7
   \   0000BB   7003         JNZ     $+5
   \   0000BD   02....       LJMP    ??MT_ZdoCommandProcessing_28 & 0xFFFF
   \   0000C0   14           DEC     A
   \   0000C1   7003         JNZ     $+5
   \   0000C3   02....       LJMP    ??MT_ZdoCommandProcessing_29 & 0xFFFF
   \   0000C6   14           DEC     A
   \   0000C7   7003         JNZ     $+5
   \   0000C9   02....       LJMP    ??MT_ZdoCommandProcessing_30 & 0xFFFF
   \   0000CC   02....       LJMP    ??MT_ZdoCommandProcessing_31 & 0xFFFF
    224            {
    225          #if defined ( ZDO_NWKADDR_REQUEST )
    226              case MT_ZDO_NWK_ADDR_REQ:
    227                MT_ZdoNWKAddressRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_0:
   \   0000CF                ; Setup parameters for call to function MT_ZdoNWKAddressRequest
   \   0000CF   12....       LCALL   ??MT_ZdoNWKAddressRequest?relay
    228                break;
   \   0000D2   02....       LJMP    ??MT_ZdoCommandProcessing_32 & 0xFFFF
    229          #endif
    230          
    231          #if defined ( ZDO_IEEEADDR_REQUEST )
    232              case MT_ZDO_IEEE_ADDR_REQ:
    233                MT_ZdoIEEEAddrRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_1:
   \   0000D5                ; Setup parameters for call to function MT_ZdoIEEEAddrRequest
   \   0000D5   12....       LCALL   ??MT_ZdoIEEEAddrRequest?relay
    234                break;
   \   0000D8   02....       LJMP    ??MT_ZdoCommandProcessing_32 & 0xFFFF
    235          #endif
    236          
    237          #if defined ( ZDO_NODEDESC_REQUEST )
    238              case MT_ZDO_NODE_DESC_REQ:
    239                MT_ZdoNodeDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_2:
   \   0000DB                ; Setup parameters for call to function MT_ZdoNodeDescRequest
   \   0000DB   12....       LCALL   ??MT_ZdoNodeDescRequest?relay
    240                break;
   \   0000DE   02....       LJMP    ??MT_ZdoCommandProcessing_32 & 0xFFFF
    241          #endif
    242          
    243          #if defined ( ZDO_POWERDESC_REQUEST )
    244              case MT_ZDO_POWER_DESC_REQ:
    245                MT_ZdoPowerDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_3:
   \   0000E1                ; Setup parameters for call to function MT_ZdoPowerDescRequest
   \   0000E1   12....       LCALL   ??MT_ZdoPowerDescRequest?relay
    246                break;
   \   0000E4   02....       LJMP    ??MT_ZdoCommandProcessing_32 & 0xFFFF
    247          #endif
    248          
    249          #if defined ( ZDO_SIMPLEDESC_REQUEST )
    250              case MT_ZDO_SIMPLE_DESC_REQ:
    251                MT_ZdoSimpleDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_4:
   \   0000E7                ; Setup parameters for call to function MT_ZdoSimpleDescRequest
   \   0000E7   12....       LCALL   ??MT_ZdoSimpleDescRequest?relay
    252                break;
   \   0000EA   02....       LJMP    ??MT_ZdoCommandProcessing_32 & 0xFFFF
    253          #endif
    254          
    255          #if defined ( ZDO_ACTIVEEP_REQUEST )
    256              case MT_ZDO_ACTIVE_EP_REQ:
    257                MT_ZdoActiveEpRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_5:
   \   0000ED                ; Setup parameters for call to function MT_ZdoActiveEpRequest
   \   0000ED   12....       LCALL   ??MT_ZdoActiveEpRequest?relay
    258                break;
   \   0000F0   807F         SJMP    ??MT_ZdoCommandProcessing_32
    259          #endif
    260          
    261          #if defined ( ZDO_MATCH_REQUEST )
    262              case MT_ZDO_MATCH_DESC_REQ:
    263                MT_ZdoMatchDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_6:
   \   0000F2                ; Setup parameters for call to function MT_ZdoMatchDescRequest
   \   0000F2   12....       LCALL   ??MT_ZdoMatchDescRequest?relay
    264                break;
   \   0000F5   807A         SJMP    ??MT_ZdoCommandProcessing_32
    265          #endif
    266          
    267          #if defined ( ZDO_COMPLEXDESC_REQUEST )
    268              case MT_ZDO_COMPLEX_DESC_REQ:
    269                MT_ZdoComplexDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_7:
   \   0000F7                ; Setup parameters for call to function MT_ZdoComplexDescRequest
   \   0000F7   12....       LCALL   ??MT_ZdoComplexDescRequest?relay
    270                break;
   \   0000FA   8075         SJMP    ??MT_ZdoCommandProcessing_32
    271          #endif
    272          
    273          #if defined ( ZDO_USERDESC_REQUEST )
    274              case MT_ZDO_USER_DESC_REQ:
    275                MT_ZdoUserDescRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_8:
   \   0000FC                ; Setup parameters for call to function MT_ZdoUserDescRequest
   \   0000FC   12....       LCALL   ??MT_ZdoUserDescRequest?relay
    276                break;
   \   0000FF   8070         SJMP    ??MT_ZdoCommandProcessing_32
    277          #endif
    278          
    279          #if defined ( ZDO_ENDDEVICE_ANNCE )
    280              case MT_ZDO_END_DEV_ANNCE:
    281                MT_ZdoEndDevAnnce(pBuf);
   \                     ??MT_ZdoCommandProcessing_9:
   \   000101                ; Setup parameters for call to function MT_ZdoEndDevAnnce
   \   000101   12....       LCALL   ??MT_ZdoEndDevAnnce?relay
    282                break;
   \   000104   806B         SJMP    ??MT_ZdoCommandProcessing_32
    283          #endif
    284          
    285          #if defined ( ZDO_USERDESCSET_REQUEST )
    286              case MT_ZDO_USER_DESC_SET:
    287                MT_ZdoUserDescSet(pBuf);
   \                     ??MT_ZdoCommandProcessing_10:
   \   000106                ; Setup parameters for call to function MT_ZdoUserDescSet
   \   000106   12....       LCALL   ??MT_ZdoUserDescSet?relay
    288                break;
   \   000109   8066         SJMP    ??MT_ZdoCommandProcessing_32
    289          #endif
    290          
    291          #if defined ( ZDO_SERVERDISC_REQUEST )
    292              case MT_ZDO_SERVICE_DISC_REQ:
    293                MT_ZdoServiceDiscRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_11:
   \   00010B                ; Setup parameters for call to function MT_ZdoServiceDiscRequest
   \   00010B   12....       LCALL   ??MT_ZdoServiceDiscRequest?relay
    294                break;
   \   00010E   8061         SJMP    ??MT_ZdoCommandProcessing_32
    295          #endif
    296          
    297          #if defined ( ZIGBEE_CHILD_AGING )
    298          #if defined ( ZDO_ENDDEVICETIMEOUT_REQUEST )
    299              case MT_ZDO_END_DEVICE_TIMEOUT_REQ:
    300                MT_ZdoEndDeviceTimeoutRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_12:
   \   000110                ; Setup parameters for call to function MT_ZdoEndDeviceTimeoutRequest
   \   000110   12....       LCALL   ??MT_ZdoEndDeviceTimeoutRequest?relay
    301                break;
   \   000113   805C         SJMP    ??MT_ZdoCommandProcessing_32
    302          #endif
    303          #endif // ZIGBEE_CHILD_AGING
    304          
    305          #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
    306              case MT_ZDO_END_DEV_BIND_REQ:
    307                MT_ZdoEndDevBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_13:
   \   000115                ; Setup parameters for call to function MT_ZdoEndDevBindRequest
   \   000115   12....       LCALL   ??MT_ZdoEndDevBindRequest?relay
    308                break;
   \   000118   8057         SJMP    ??MT_ZdoCommandProcessing_32
    309          #endif
    310          
    311          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    312              case MT_ZDO_BIND_REQ:
    313                MT_ZdoBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_14:
   \   00011A                ; Setup parameters for call to function MT_ZdoBindRequest
   \   00011A   12....       LCALL   ??MT_ZdoBindRequest?relay
    314                break;
   \   00011D   8052         SJMP    ??MT_ZdoCommandProcessing_32
    315          #endif
    316          
    317          #if defined ( ZDO_BIND_UNBIND_REQUEST )
    318              case MT_ZDO_UNBIND_REQ:
    319                MT_ZdoUnbindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_15:
   \   00011F                ; Setup parameters for call to function MT_ZdoUnbindRequest
   \   00011F   12....       LCALL   ??MT_ZdoUnbindRequest?relay
    320                break;
   \   000122   804D         SJMP    ??MT_ZdoCommandProcessing_32
    321          #endif
    322          
    323          #if defined ( MT_SYS_KEY_MANAGEMENT )
    324              case MT_ZDO_SET_LINK_KEY:
    325                MT_ZdoSetLinkKey(pBuf);
    326                break;
    327          
    328              case MT_ZDO_REMOVE_LINK_KEY:
    329                MT_ZdoRemoveLinkKey(pBuf);
    330                break;
    331          
    332              case MT_ZDO_GET_LINK_KEY:
    333                MT_ZdoGetLinkKey(pBuf);
    334                break;
    335          #endif // MT_SYS_KEY_MANAGEMENT
    336          
    337          #if defined ( ZDO_MANUAL_JOIN )
    338              case MT_ZDO_NWK_DISCOVERY_REQ:
    339                MT_ZdoNetworkDiscoveryReq(pBuf);
   \                     ??MT_ZdoCommandProcessing_16:
   \   000124                ; Setup parameters for call to function MT_ZdoNetworkDiscoveryReq
   \   000124   12....       LCALL   ??MT_ZdoNetworkDiscoveryReq?relay
    340                break;
   \   000127   8048         SJMP    ??MT_ZdoCommandProcessing_32
    341          
    342              case MT_ZDO_JOIN_REQ:
    343                MT_ZdoJoinReq(pBuf);
   \                     ??MT_ZdoCommandProcessing_17:
   \   000129                ; Setup parameters for call to function MT_ZdoJoinReq
   \   000129   12....       LCALL   ??MT_ZdoJoinReq?relay
    344                break;
   \   00012C   8043         SJMP    ??MT_ZdoCommandProcessing_32
    345          #endif
    346          
    347          #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
    348              case MT_ZDO_MGMT_NWKDISC_REQ:
    349                MT_ZdoMgmtNwkDiscRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_20:
   \   00012E                ; Setup parameters for call to function MT_ZdoMgmtNwkDiscRequest
   \   00012E   12....       LCALL   ??MT_ZdoMgmtNwkDiscRequest?relay
    350                break;
   \   000131   803E         SJMP    ??MT_ZdoCommandProcessing_32
    351          #endif
    352          
    353          #if defined ( ZDO_MGMT_LQI_REQUEST )
    354              case MT_ZDO_MGMT_LQI_REQ:
    355                MT_ZdoMgmtLqiRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_21:
   \   000133                ; Setup parameters for call to function MT_ZdoMgmtLqiRequest
   \   000133   12....       LCALL   ??MT_ZdoMgmtLqiRequest?relay
    356                break;
   \   000136   8039         SJMP    ??MT_ZdoCommandProcessing_32
    357          #endif
    358          
    359          #if defined ( ZDO_MGMT_RTG_REQUEST )
    360              case MT_ZDO_MGMT_RTG_REQ:
    361                MT_ZdoMgmtRtgRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_22:
   \   000138                ; Setup parameters for call to function MT_ZdoMgmtRtgRequest
   \   000138   12....       LCALL   ??MT_ZdoMgmtRtgRequest?relay
    362                break;
   \   00013B   8034         SJMP    ??MT_ZdoCommandProcessing_32
    363          #endif
    364          
    365          #if defined ( ZDO_MGMT_BIND_REQUEST )
    366              case MT_ZDO_MGMT_BIND_REQ:
    367                MT_ZdoMgmtBindRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_23:
   \   00013D                ; Setup parameters for call to function MT_ZdoMgmtBindRequest
   \   00013D   12....       LCALL   ??MT_ZdoMgmtBindRequest?relay
    368                break;
   \   000140   802F         SJMP    ??MT_ZdoCommandProcessing_32
    369          #endif
    370          
    371          #if defined ( ZDO_MGMT_LEAVE_REQUEST )
    372              case MT_ZDO_MGMT_LEAVE_REQ:
    373                MT_ZdoMgmtLeaveRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_24:
   \   000142                ; Setup parameters for call to function MT_ZdoMgmtLeaveRequest
   \   000142   12....       LCALL   ??MT_ZdoMgmtLeaveRequest?relay
    374                break;
   \   000145   802A         SJMP    ??MT_ZdoCommandProcessing_32
    375          #endif
    376          
    377          #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
    378              case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
    379                MT_ZdoMgmtDirectJoinRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_25:
   \   000147                ; Setup parameters for call to function MT_ZdoMgmtDirectJoinRequest
   \   000147   12....       LCALL   ??MT_ZdoMgmtDirectJoinRequest?relay
    380                break;
   \   00014A   8025         SJMP    ??MT_ZdoCommandProcessing_32
    381          #endif
    382          
    383          #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
    384              case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
    385                MT_ZdoMgmtPermitJoinRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_26:
   \   00014C                ; Setup parameters for call to function MT_ZdoMgmtPermitJoinRequest
   \   00014C   12....       LCALL   ??MT_ZdoMgmtPermitJoinRequest?relay
    386                break;
   \   00014F   8020         SJMP    ??MT_ZdoCommandProcessing_32
    387          #endif
    388          
    389          #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
    390              case MT_ZDO_MGMT_NWK_UPDATE_REQ:
    391                MT_ZdoMgmtNwkUpdateRequest(pBuf);
   \                     ??MT_ZdoCommandProcessing_27:
   \   000151                ; Setup parameters for call to function MT_ZdoMgmtNwkUpdateRequest
   \   000151   12....       LCALL   ??MT_ZdoMgmtNwkUpdateRequest?relay
    392                break;
   \   000154   801B         SJMP    ??MT_ZdoCommandProcessing_32
    393          #endif
    394          
    395          #if defined ( ZDO_NETWORKSTART_REQUEST )
    396              case MT_ZDO_STARTUP_FROM_APP:
    397                MT_ZdoStartupFromApp(pBuf);
   \                     ??MT_ZdoCommandProcessing_30:
   \   000156                ; Setup parameters for call to function MT_ZdoStartupFromApp
   \   000156   12....       LCALL   ??MT_ZdoStartupFromApp?relay
    398                break;
   \   000159   8016         SJMP    ??MT_ZdoCommandProcessing_32
    399          #endif
    400          
    401              case MT_ZDO_SEND_DATA:
    402                MT_ZdoSendData( pBuf );
   \                     ??MT_ZdoCommandProcessing_18:
   \   00015B                ; Setup parameters for call to function MT_ZdoSendData
   \   00015B   12....       LCALL   ??MT_ZdoSendData?relay
    403                break;
   \   00015E   8011         SJMP    ??MT_ZdoCommandProcessing_32
    404          
    405              case MT_ZDO_NWK_ADDR_OF_INTEREST_REQ:
    406                MT_ZdoNwkAddrOfInterestReq( pBuf );
   \                     ??MT_ZdoCommandProcessing_19:
   \   000160                ; Setup parameters for call to function MT_ZdoNwkAddrOfInterestReq
   \   000160   12....       LCALL   ??MT_ZdoNwkAddrOfInterestReq?relay
    407                break;
   \   000163   800C         SJMP    ??MT_ZdoCommandProcessing_32
    408          
    409              case MT_ZDO_MSG_CB_REGISTER:
    410                MT_ZdoRegisterForZDOMsg(pBuf);
   \                     ??MT_ZdoCommandProcessing_28:
   \   000165                ; Setup parameters for call to function MT_ZdoRegisterForZDOMsg
   \   000165   12....       LCALL   ??MT_ZdoRegisterForZDOMsg?relay
    411                break;
   \   000168   8007         SJMP    ??MT_ZdoCommandProcessing_32
    412          
    413              case MT_ZDO_MSG_CB_REMOVE:
    414                MT_ZdoRemoveRegisteredCB(pBuf);
   \                     ??MT_ZdoCommandProcessing_29:
   \   00016A                ; Setup parameters for call to function MT_ZdoRemoveRegisteredCB
   \   00016A   12....       LCALL   ??MT_ZdoRemoveRegisteredCB?relay
    415                break;
   \   00016D   8002         SJMP    ??MT_ZdoCommandProcessing_32
    416          
    417          #if defined ( MT_ZDO_EXTENSIONS )
    418              case MT_ZDO_SEC_ADD_LINK_KEY:
    419                MT_ZdoSecAddLinkKey( pBuf );
    420                break;
    421          
    422              case MT_ZDO_SEC_ENTRY_LOOKUP_EXT:
    423                MT_ZdoSecEntryLookupExt( pBuf );
    424                break;
    425          
    426              case MT_ZDO_SEC_DEVICE_REMOVE:
    427                 MT_ZdoSecDeviceRemove( pBuf );
    428                 break;
    429          
    430              case MT_ZDO_EXT_ROUTE_DISC:
    431                 MT_ZdoExtRouteDisc( pBuf );
    432                 break;
    433          
    434              case MT_ZDO_EXT_ROUTE_CHECK:
    435                 MT_ZdoExtRouteCheck( pBuf );
    436                 break;
    437          
    438              case MT_ZDO_EXT_REMOVE_GROUP:
    439                MT_ZdoExtRemoveGroup( pBuf );
    440                break;
    441          
    442              case MT_ZDO_EXT_REMOVE_ALL_GROUP:
    443                MT_ZdoExtRemoveAllGroup( pBuf );
    444                break;
    445          
    446              case MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT:
    447                MT_ZdoExtFindAllGroupsEndpoint( pBuf );
    448                break;
    449          
    450              case MT_ZDO_EXT_FIND_GROUP:
    451                MT_ZdoExtFindGroup( pBuf );
    452                break;
    453          
    454              case MT_ZDO_EXT_ADD_GROUP:
    455                MT_ZdoExtAddGroup( pBuf );
    456                break;
    457          
    458              case MT_ZDO_EXT_COUNT_ALL_GROUPS:
    459                MT_ZdoExtCountAllGroups( pBuf );
    460                break;
    461          #endif  // MT_ZDO_EXTENSIONS
    462          
    463              default:
    464                status = MT_RPC_ERR_COMMAND_ID;
   \                     ??MT_ZdoCommandProcessing_31:
   \   00016F   0E           INC     R6
   \   000170   0E           INC     R6
    465                break;
    466            }
    467          
    468            return status;
   \                     ??MT_ZdoCommandProcessing_32:
   \   000171   EE           MOV     A,R6
   \   000172   F9           MOV     R1,A
   \   000173   02....       LJMP    ??Subroutine107_0 & 0xFFFF
    469          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    470          
    471          /***************************************************************************************************
    472           * @fn      MT_ZdoNwkAddrReq
    473           *
    474           * @brief   Handle a nwk address request.
    475           *
    476           * @param   pData  - MT message data
    477           *
    478           * @return  void
    479           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    480          void MT_ZdoNWKAddressRequest(uint8 *pBuf)
   \                     MT_ZdoNWKAddressRequest:
    481          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    482            uint8 cmdId;
    483            uint8 retValue;
    484            uint8 reqType;
    485            uint8 startIndex;
    486            uint8 *pExtAddr;
    487          
    488            /* parse header */
    489            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 0,A
    490            pBuf += MT_RPC_FRAME_HDR_SZ;
    491          
    492            /* parse parameters */
    493            pExtAddr = pBuf;
   \   000013   EA           MOV     A,R2
   \   000014   2403         ADD     A,#0x3
   \   000016   FE           MOV     R6,A
   \   000017   EB           MOV     A,R3
   \   000018   3400         ADDC    A,#0x0
   \   00001A   FF           MOV     R7,A
    494            pBuf += Z_EXTADDR_LEN;
   \   00001B   EE           MOV     A,R6
   \   00001C   2408         ADD     A,#0x8
   \   00001E   FA           MOV     R2,A
   \   00001F   EF           MOV     A,R7
   \   000020   12....       LCALL   ?Subroutine39 & 0xFFFF
    495          
    496            /* Request type */
    497            reqType = *pBuf++;
    498          
    499            /* Start index */
    500            startIndex = *pBuf;
    501          
    502            retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
   \                     ??CrossCallReturnLabel_50:
   \   000023   12....       LCALL   ??ZDP_NwkAddrReq?relay
   \   000026                REQUIRE ?Subroutine9
   \   000026                ; // Fall through to label ?Subroutine9
    503          
    504            /* Build and send back the response */
    505            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    506          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000003   80..         SJMP    ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000003                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   000003                ; Setup parameters for call to function ZDP_IEEEAddrReq
   \   000003   7D00         MOV     R5,#0x0
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FC           MOV     R4,A
   \   000007   EE           MOV     A,R6
   \   000008   FA           MOV     R2,A
   \   000009   EF           MOV     A,R7
   \   00000A   FB           MOV     R3,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   7965         MOV     R1,#0x65
   \   000002   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   \   000005                REQUIRE ??Subroutine101_0
   \   000005                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   7401         MOV     A,#0x1
   \   000002   80..         SJMP    ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine107_0
   \   000003                ; // Fall through to label ??Subroutine107_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007                REQUIRE ??Subroutine116_0
   \   000007                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   AC82         MOV     R4,DPL
   \   000003   AD83         MOV     R5,DPH
   \   000005   7B01         MOV     R3,#0x1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000003   AA..         MOV     R2,?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000003   F9           MOV     R1,A
   \   000004   A3           INC     DPTR
   \   000005   22           RET
    507          
    508          /***************************************************************************************************
    509           * @fn      MT_ZdoIEEEAddrRequest
    510           *
    511           * @brief   Handle a IEEE address request.
    512           *
    513           * @param   pData  - MT message data
    514           *
    515           * @return  void
    516           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    517          void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
   \                     MT_ZdoIEEEAddrRequest:
    518          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    519            uint8 cmdId;
    520            uint8 retValue;
    521            uint16 shortAddr;
    522            uint8 reqType;
    523            uint8 startIndex;
    524          
    525            /* parse header */
    526            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ?Subroutine38 & 0xFFFF
    527            pBuf += MT_RPC_FRAME_HDR_SZ;
    528          
    529            /* Dev address */
    530            shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_48:
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000014   FE           MOV     R6,A
   \   000015   E4           CLR     A
   \   000016   39           ADDC    A,R1
   \   000017   FF           MOV     R7,A
    531            pBuf += 2;
   \   000018   EA           MOV     A,R2
   \   000019   2402         ADD     A,#0x2
   \   00001B   FA           MOV     R2,A
   \   00001C   EB           MOV     A,R3
   \   00001D   12....       LCALL   ?Subroutine39 & 0xFFFF
    532          
    533            /* request type */
    534            reqType = *pBuf++;
    535          
    536            /* start index */
    537            startIndex = *pBuf;
    538          
    539            retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
   \                     ??CrossCallReturnLabel_51:
   \   000020   12....       LCALL   ??ZDP_IEEEAddrReq?relay
   \   000023   80..         SJMP    ?Subroutine9
    540          
    541            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    542          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EC           MOV     A,R4
   \   000006   2400         ADD     A,#0x0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL   ??Subroutine119_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V0 + 0,A
   \   000009   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   EA           MOV     A,R2
   \   000001   2403         ADD     A,#0x3
   \   000003   FA           MOV     R2,A
   \   000004   EB           MOV     A,R3
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   22           RET
    543          
    544          /***************************************************************************************************
    545           * @fn      MT_ZdoNodeDescRequest
    546           *
    547           * @brief   Handle a Node Descriptor request.
    548           *
    549           * @param   pData  - MT message data
    550           *
    551           * @return  void
    552           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   12....       LCALL   ?XSTACK_DISP0_8
   \   000003   AA82         MOV     R2,DPL
   \   000005   AB83         MOV     R3,DPH
   \   000007   12....       LCALL   ??ZDP_NWKAddrOfInterestReq?relay
   \   00000A                REQUIRE ??Subroutine103_0
   \   00000A                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   7401         MOV     A,#0x1
   \   000002                REQUIRE ??Subroutine104_0
   \   000002                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine105_0
   \   000003                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000003   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   \   000006   740A         MOV     A,#0xa
   \   000008                REQUIRE ??Subroutine106_0
   \   000008                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007                REQUIRE ??Subroutine108_0
   \   000007                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000003   FA           MOV     R2,A
   \   000004   7965         MOV     R1,#0x65
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    553          void MT_ZdoNodeDescRequest (uint8 *pBuf)
   \                     MT_ZdoNodeDescRequest:
    554          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    555            uint8 cmdId;
    556            uint8 retValue;
    557            zAddrType_t destAddr;
    558            uint16 shortAddr;
    559          
    560            /* parse header */
    561            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine115_0 & 0xFFFF
    562            pBuf += MT_RPC_FRAME_HDR_SZ;
    563          
    564            /* Destination address */
    565            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_185:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine11 & 0xFFFF
    566            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_169:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine49 & 0xFFFF
    567            pBuf += 2;
    568          
    569            /* Network address of interest */
    570            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    571            pBuf += 2;
    572          
    573            retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
   \                     ??CrossCallReturnLabel_68:
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001C   7902         MOV     R1,#0x2
   \   00001E   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000021   E9           MOV     A,R1
   \   000022   80..         SJMP    ??Subroutine102_0
    574          
    575            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    576          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FB           MOV     R3,A
   \   000009   EC           MOV     A,R4
   \   00000A   2400         ADD     A,#0x0
   \   00000C   E4           CLR     A
   \   00000D   3B           ADDC    A,R3
   \   00000E   FD           MOV     R5,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000003                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000003                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000003                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   000003                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000003                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000003                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000003   75..00       MOV     ?V0 + 0,#0x0
   \   000006   78..         MOV     R0,#?V0 + 0
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004                REQUIRE ??Subroutine109_0
   \   000004                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine110_0
   \   000001                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   EA           MOV     A,R2
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   EB           MOV     A,R3
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003                REQUIRE ??Subroutine113_0
   \   000003                ; // Fall through to label ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine114_0
   \   000004                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000003   F9           MOV     R1,A
   \   000004   EC           MOV     A,R4
   \   000005   F8           MOV     R0,A
   \   000006   7401         MOV     A,#0x1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000003   7409         MOV     A,#0x9
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FE           MOV     R6,A
   \   000008   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   00000B   22           RET
    577          
    578          /***************************************************************************************************
    579           * @fn      MT_ZdoPowerDescRequest
    580           *
    581           * @brief   Handle a Power Descriptor request.
    582           *
    583           * @param   pData  - MT message data
    584           *
    585           * @return  void
    586           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000003                REQUIRE ??Subroutine102_0
   \   000003                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    587          void MT_ZdoPowerDescRequest(uint8 *pBuf)
   \                     MT_ZdoPowerDescRequest:
    588          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    589            uint8 cmdId;
    590            uint8 retValue;
    591            zAddrType_t destAddr;
    592            uint16 shortAddr;
    593          
    594            /* parse header */
    595            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine115_0 & 0xFFFF
    596            pBuf += MT_RPC_FRAME_HDR_SZ;
    597          
    598            /* Dev address */
    599            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_186:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine11 & 0xFFFF
    600            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_170:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine49 & 0xFFFF
    601            pBuf += 2;
    602          
    603            /* Network address of interest */
    604            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    605            pBuf += 2;
    606          
    607            retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
   \                     ??CrossCallReturnLabel_69:
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001C   7903         MOV     R1,#0x3
   \   00001E   80..         SJMP    ?Subroutine1
    608          
    609            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    610          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET
    611          
    612          /***************************************************************************************************
    613           * @fn      MT_ZdoSimpleDescRequest
    614           *
    615           * @brief   Handle a Simple Descriptor request.
    616           *
    617           * @param   pBuf  - MT message data
    618           *
    619           * @return  void
    620           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    621          void MT_ZdoSimpleDescRequest(uint8 *pBuf)
   \                     MT_ZdoSimpleDescRequest:
    622          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    623            uint8 cmdId;
    624            uint8 retValue;
    625            uint8 epInt;
    626            zAddrType_t destAddr;
    627            uint16 shortAddr;
    628          
    629            /* parse header */
    630            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine115_0 & 0xFFFF
    631            pBuf += MT_RPC_FRAME_HDR_SZ;
    632          
    633            /* Dev address */
    634            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_187:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine11 & 0xFFFF
    635            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_171:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine49 & 0xFFFF
    636            pBuf += 2;
    637          
    638            /* Network address of interest */
    639            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    640            pBuf += 2;
    641          
    642            /* endpoint/interface */
    643            epInt = *pBuf++;
    644          
    645            retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
   \                     ??CrossCallReturnLabel_70:
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001C   8A82         MOV     DPL,R2
   \   00001E   8B83         MOV     DPH,R3
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F9           MOV     R1,A
   \   000024   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   AA82         MOV     R2,DPL
   \   00002C   AB83         MOV     R3,DPH
   \   00002E   12....       LCALL   ??ZDP_SimpleDescReq?relay
   \   000031   02....       LJMP    ??Subroutine103_0 & 0xFFFF
    646          
    647            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    648          }
    649          
    650          /***************************************************************************************************
    651           * @fn      MT_ZdoActiveEpRequest
    652           *
    653           * @brief   Handle a Active EP request.
    654           *
    655           * @param   pBuf  - MT message data
    656           *
    657           * @return  void
    658           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    659          void MT_ZdoActiveEpRequest(uint8 *pBuf)
   \                     MT_ZdoActiveEpRequest:
    660          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    661            uint8 cmdId;
    662            uint8 retValue;
    663            zAddrType_t destAddr;
    664            uint16 shortAddr;
    665          
    666            /* parse header */
    667            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine115_0 & 0xFFFF
    668            pBuf += MT_RPC_FRAME_HDR_SZ;
    669          
    670            /* Dev address */
    671            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_188:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine11 & 0xFFFF
    672            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_172:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine49 & 0xFFFF
    673            pBuf += 2;
    674          
    675            /* Network address of interest */
    676            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    677            pBuf += 2;
    678          
    679            retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
   \                     ??CrossCallReturnLabel_71:
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001C   7905         MOV     R1,#0x5
   \   00001E   02....       LJMP    ?Subroutine1 & 0xFFFF
    680          
    681            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    682          }
    683          
    684          /***************************************************************************************************
    685           * @fn      MT_ZdoMatchDescRequest
    686           *
    687           * @brief   Handle a Match Descriptor request.
    688           *
    689           * @param   pBuf  - MT message data
    690           *
    691           * @return  void
    692           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    693          void MT_ZdoMatchDescRequest(uint8 *pBuf)
   \                     MT_ZdoMatchDescRequest:
    694          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 74
   \   000005   74B6         MOV     A,#-0x4a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    695            uint8 cmdId;
    696            uint8 retValue = 0;
   \   00000A   12....       LCALL   ?Subroutine10 & 0xFFFF
    697            uint8 i, numInClusters, numOutClusters;
    698            uint16 profileId;
    699            zAddrType_t destAddr;
    700            uint16 shortAddr;
    701            uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
    702          
    703            /* parse header */
    704            cmdId = pBuf[MT_RPC_POS_CMD1];
    705            pBuf += MT_RPC_FRAME_HDR_SZ;
    706          
    707            /* Dev address */
    708            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_183:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine11 & 0xFFFF
    709            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_173:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine37 & 0xFFFF
    710            pBuf += 2;
    711          
    712            /* Network address of interest */
    713            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    714            pBuf += 2;
   \                     ??CrossCallReturnLabel_46:
   \   000019   12....       LCALL   ?Subroutine53 & 0xFFFF
    715          
    716            /* Profile ID */
    717            profileId = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_166:
   \   00001C   12....       LCALL   ?Subroutine15 & 0xFFFF
    718            pBuf += 2;
    719          
    720            /* NumInClusters */
    721            numInClusters = *pBuf++;
   \                     ??CrossCallReturnLabel_4:
   \   00001F   FF           MOV     R7,A
   \   000020   A3           INC     DPTR
   \   000021   AA82         MOV     R2,DPL
   \   000023   AB83         MOV     R3,DPH
    722            if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \   000025   C3           CLR     C
   \   000026   9411         SUBB    A,#0x11
   \   000028   5015         JNC     ??MT_ZdoMatchDescRequest_0
    723            {
    724              /* IN clusters */
    725              for ( i = 0; i < numInClusters; i++ )
   \   00002A   88..         MOV     ?V0 + 2,R0
   \                     ??MT_ZdoMatchDescRequest_1:
   \   00002C   E5..         MOV     A,?V0 + 2
   \   00002E   C3           CLR     C
   \   00002F   9F           SUBB    A,R7
   \   000030   5016         JNC     ??MT_ZdoMatchDescRequest_2
    726              {
    727                inClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
   \   000032   12....       LCALL   ?Subroutine20 & 0xFFFF
    728                pBuf += 2;
    729              }
    730            }
   \                     ??CrossCallReturnLabel_11:
   \   000035   742A         MOV     A,#0x2a
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   00003D   80ED         SJMP    ??MT_ZdoMatchDescRequest_1
    731            else
    732            {
    733              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_0:
   \   00003F   85..82       MOV     DPL,?XSP + 0
   \   000042   85..83       MOV     DPH,?XSP + 1
   \   000045   7480         MOV     A,#-0x80
   \   000047   F0           MOVX    @DPTR,A
    734            }
    735          
    736            /* NumOutClusters */
    737            numOutClusters = *pBuf++;
   \                     ??MT_ZdoMatchDescRequest_2:
   \   000048   8A82         MOV     DPL,R2
   \   00004A   8B83         MOV     DPH,R3
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F5..         MOV     ?V0 + 6,A
   \   00004F   A3           INC     DPTR
   \   000050   AA82         MOV     R2,DPL
   \   000052   AB83         MOV     R3,DPH
    738            if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
   \   000054   C3           CLR     C
   \   000055   9411         SUBB    A,#0x11
   \   000057   5017         JNC     ??MT_ZdoMatchDescRequest_3
    739            {
    740              /* OUT Clusters */
    741              for ( i = 0; i < numOutClusters; i++ )
   \   000059   75..00       MOV     ?V0 + 2,#0x0
   \                     ??MT_ZdoMatchDescRequest_4:
   \   00005C   E5..         MOV     A,?V0 + 2
   \   00005E   C3           CLR     C
   \   00005F   95..         SUBB    A,?V0 + 6
   \   000061   5017         JNC     ??MT_ZdoMatchDescRequest_5
    742              {
    743                outClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
   \   000063   12....       LCALL   ?Subroutine20 & 0xFFFF
    744                pBuf += 2;
    745              }
    746            }
   \                     ??CrossCallReturnLabel_12:
   \   000066   740A         MOV     A,#0xa
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   00006E   80EC         SJMP    ??MT_ZdoMatchDescRequest_4
    747            else
    748            {
    749              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoMatchDescRequest_3:
   \   000070   85..82       MOV     DPL,?XSP + 0
   \   000073   85..83       MOV     DPH,?XSP + 1
   \   000076   7480         MOV     A,#-0x80
   \   000078   8059         SJMP    ??MT_ZdoMatchDescRequest_6
    750            }
    751          
    752            if ( retValue == 0 )
   \                     ??MT_ZdoMatchDescRequest_5:
   \   00007A   85..82       MOV     DPL,?XSP + 0
   \   00007D   85..83       MOV     DPH,?XSP + 1
   \   000080   E0           MOVX    A,@DPTR
   \   000081   7051         JNZ     ??MT_ZdoMatchDescRequest_7
    753            {
    754              retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
    755                                                 inClusters, numOutClusters, outClusters, 0);
   \   000083                ; Setup parameters for call to function ZDP_MatchDescReq
   \   000083   75..00       MOV     ?V0 + 2,#0x0
   \   000086   78..         MOV     R0,#?V0 + 2
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008B   740B         MOV     A,#0xb
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   8582..       MOV     ?V0 + 2,DPL
   \   000093   8583..       MOV     ?V0 + 3,DPH
   \   000096   78..         MOV     R0,#?V0 + 2
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009B   E5..         MOV     A,?V0 + 6
   \   00009D   F5..         MOV     ?V0 + 2,A
   \   00009F   78..         MOV     R0,#?V0 + 2
   \   0000A1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A4   742E         MOV     A,#0x2e
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   8582..       MOV     ?V0 + 2,DPL
   \   0000AC   8583..       MOV     ?V0 + 3,DPH
   \   0000AF   78..         MOV     R0,#?V0 + 2
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B4   78..         MOV     R0,#?V0 + 0
   \   0000B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B9   EF           MOV     A,R7
   \   0000BA   F9           MOV     R1,A
   \   0000BB   7409         MOV     A,#0x9
   \   0000BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C0   AA82         MOV     R2,DPL
   \   0000C2   AB83         MOV     R3,DPH
   \   0000C4   12....       LCALL   ??ZDP_MatchDescReq?relay
   \   0000C7   7408         MOV     A,#0x8
   \   0000C9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000CC   E9           MOV     A,R1
   \   0000CD   85..82       MOV     DPL,?XSP + 0
   \   0000D0   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_ZdoMatchDescRequest_6:
   \   0000D3   F0           MOVX    @DPTR,A
    756            }
    757          
    758            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoMatchDescRequest_7:
   \   0000D4                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000D4   AC82         MOV     R4,DPL
   \   0000D6   AD83         MOV     R5,DPH
   \   0000D8   7B01         MOV     R3,#0x1
   \   0000DA   EE           MOV     A,R6
   \   0000DB   FA           MOV     R2,A
   \   0000DC   7965         MOV     R1,#0x65
   \   0000DE   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    759          }
   \   0000E1   744A         MOV     A,#0x4a
   \   0000E3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E6   7F07         MOV     R7,#0x7
   \   0000E8   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000003   E5..         MOV     A,?V0 + 4
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   E5..         MOV     A,?V0 + 5
   \   000009                REQUIRE ??Subroutine111_0
   \   000009                ; // Fall through to label ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000003   05..         INC     ?V0 + 2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   2402         ADD     A,#0x2
   \   000002                REQUIRE ??Subroutine112_0
   \   000002                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   FA           MOV     R2,A
   \   000001   EB           MOV     A,R3
   \   000002   3400         ADDC    A,#0x0
   \   000004   FB           MOV     R3,A
   \   000005                ; Setup parameters for call to function ZDApp_NetworkDiscoveryReq
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 4,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F9           MOV     R1,A
   \   00000A   E5..         MOV     A,?V0 + 4
   \   00000C   2400         ADD     A,#0x0
   \   00000E   E4           CLR     A
   \   00000F   39           ADDC    A,R1
   \   000010   F5..         MOV     ?V0 + 5,A
   \   000012   E5..         MOV     A,?V0 + 2
   \   000014   33           RLC     A
   \   000015   F8           MOV     R0,A
   \   000016   E4           CLR     A
   \   000017   33           RLC     A
   \   000018   F9           MOV     R1,A
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E4           CLR     A
   \   000007   F0           MOVX    @DPTR,A
   \   000008                REQUIRE ??Subroutine115_0
   \   000008                ; // Fall through to label ??Subroutine115_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   E582         MOV     A,DPL
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   E583         MOV     A,DPH
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000003   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   000006   E4           CLR     A
   \   000007   39           ADDC    A,R1
   \   000008   FD           MOV     R5,A
   \   000009   EA           MOV     A,R2
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine119_0
   \   000004                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   E4           CLR     A
   \   000007   C8           XCH     A,R0
   \   000008   F9           MOV     R1,A
   \   000009   E5..         MOV     A,?V0 + 0
   \   00000B   2400         ADD     A,#0x0
   \   00000D   E4           CLR     A
   \   00000E   39           ADDC    A,R1
   \   00000F   F5..         MOV     ?V0 + 1,A
   \   000011   EA           MOV     A,R2
   \   000012   2402         ADD     A,#0x2
   \   000014   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   FA           MOV     R2,A
   \   000001   EB           MOV     A,R3
   \   000002   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000005   22           RET
    760          
    761          /***************************************************************************************************
    762           * @fn      MT_ZdoComplexDescRequest
    763           *
    764           * @brief   Handle a Complex Descriptor request.
    765           *
    766           * @param   pBuf  - MT message data
    767           *
    768           * @return  void
    769           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    770          void MT_ZdoComplexDescRequest(uint8 *pBuf)
   \                     MT_ZdoComplexDescRequest:
    771          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    772            uint8 cmdId;
    773            uint8 retValue;
    774            zAddrType_t destAddr;
    775            uint16 shortAddr;
    776          
    777            /* parse header */
    778            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine115_0 & 0xFFFF
    779            pBuf += MT_RPC_FRAME_HDR_SZ;
    780          
    781            /* Dev address */
    782            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_189:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine11 & 0xFFFF
    783            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_174:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine49 & 0xFFFF
    784            pBuf += 2;
    785          
    786            /* Network address of interest */
    787            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    788            pBuf += 2;
    789          
    790            retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
   \                     ??CrossCallReturnLabel_72:
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001C   7910         MOV     R1,#0x10
   \   00001E   02....       LJMP    ?Subroutine1 & 0xFFFF
    791          
    792            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    793          }
    794          
    795          /***************************************************************************************************
    796           * @fn      MT_ZdoUserDescRequest
    797           *
    798           * @brief   Handle a User Descriptor request.
    799           *
    800           * @param   pBuf  - MT message data
    801           *
    802           * @return  void
    803           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    804          void MT_ZdoUserDescRequest(uint8 *pBuf)
   \                     MT_ZdoUserDescRequest:
    805          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    806            uint8 cmdId;
    807            uint8 retValue;
    808            zAddrType_t destAddr;
    809            uint16 shortAddr;
    810          
    811            /* parse header */
    812            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine115_0 & 0xFFFF
    813            pBuf += MT_RPC_FRAME_HDR_SZ;
    814          
    815            /* Dev address */
    816            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_190:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine11 & 0xFFFF
    817            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_175:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine49 & 0xFFFF
    818            pBuf += 2;
    819          
    820            /* Network address of interest */
    821            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
    822            pBuf += 2;
    823          
    824            retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
   \                     ??CrossCallReturnLabel_73:
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001C   7911         MOV     R1,#0x11
   \   00001E   02....       LJMP    ?Subroutine1 & 0xFFFF
    825          
    826            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    827          }
    828          
    829          /***************************************************************************************************
    830           * @fn      MT_ZdoEndDevAnnce
    831           *
    832           * @brief   Handle a End Device Announce Descriptor request.
    833           *
    834           * @param   pBuf  - MT message data
    835           *
    836           * @return  void
    837           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   00000A                REQUIRE ??Subroutine99_0
   \   00000A                ; // Fall through to label ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   FA           MOV     R2,A
   \   000001                REQUIRE ??Subroutine100_0
   \   000001                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    838          void MT_ZdoEndDevAnnce(uint8 *pBuf)
   \                     MT_ZdoEndDevAnnce:
    839          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine25 & 0xFFFF
    840            uint8 cmdId;
    841            uint8 retValue;
    842            uint16 shortAddr;
    843            uint8 *pIEEEAddr;
    844          
    845            /* parse header */
    846            cmdId = pBuf[MT_RPC_POS_CMD1];
    847            pBuf += MT_RPC_FRAME_HDR_SZ;
    848          
    849            /* network address */
    850            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_22:
   \   00000D   F8           MOV     R0,A
   \   00000E   E4           CLR     A
   \   00000F   C8           XCH     A,R0
   \   000010   12....       LCALL   ?Subroutine66 & 0xFFFF
    851            pBuf += 2;
    852          
    853            /* extended address */
    854            pIEEEAddr = pBuf;
    855            pBuf += Z_EXTADDR_LEN;
    856          
    857            retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
   \                     ??CrossCallReturnLabel_108:
   \   000013                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000013   88..         MOV     ?V0 + 0,R0
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8D83         MOV     DPH,R5
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
   \   000028   12....       LCALL   ??ZDP_DeviceAnnce?relay
   \   00002B   7401         MOV     A,#0x1
   \   00002D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000030   02....       LJMP    ?Subroutine7 & 0xFFFF
    858          
    859            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    860          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   F9           MOV     R1,A
   \   000001   EA           MOV     A,R2
   \   000002   2400         ADD     A,#0x0
   \   000004   E4           CLR     A
   \   000005   39           ADDC    A,R1
   \   000006   FB           MOV     R3,A
   \   000007   EC           MOV     A,R4
   \   000008   2402         ADD     A,#0x2
   \   00000A   FC           MOV     R4,A
   \   00000B   ED           MOV     A,R5
   \   00000C   3400         ADDC    A,#0x0
   \   00000E   FD           MOV     R5,A
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000003   8C82         MOV     DPL,R4
   \   000005   8D83         MOV     DPH,R5
   \   000007   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   EA           MOV     A,R2
   \   000001   FC           MOV     R4,A
   \   000002   EB           MOV     A,R3
   \   000003   FD           MOV     R5,A
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   2403         ADD     A,#0x3
   \   00000F   FC           MOV     R4,A
   \   000010   ED           MOV     A,R5
   \   000011   3400         ADDC    A,#0x0
   \   000013   FD           MOV     R5,A
   \   000014   22           RET
    861          
    862          /***************************************************************************************************
    863           * @fn      MT_ZdoUserDescSet
    864           *
    865           * @brief   Handle a User Descriptor Set.
    866           *
    867           * @param   pBuf  - MT message data
    868           *
    869           * @return  void
    870           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    871          void MT_ZdoUserDescSet(uint8 *pBuf)
   \                     MT_ZdoUserDescSet:
    872          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 27
   \   000005   74E5         MOV     A,#-0x1b
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    873            uint8 cmdId;
    874            uint8 retValue;
    875            zAddrType_t destAddr;
    876            uint16 shortAddr;
    877            UserDescriptorFormat_t userDesc;
    878          
    879            /* parse header */
    880            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 3,A
    881            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000013   12....       LCALL   ?Subroutine94 & 0xFFFF
    882          
    883            /* Dev address */
    884            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_197:
   \   000016   7409         MOV     A,#0x9
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine11 & 0xFFFF
    885            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_176:
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   12....       LCALL   ?Subroutine29 & 0xFFFF
    886            pBuf += 2;
    887          
    888            /* Network address of interest */
    889            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    890            pBuf += 2;
   \                     ??CrossCallReturnLabel_30:
   \   000024   12....       LCALL   ?Subroutine52 & 0xFFFF
    891          
    892            /* User descriptor */
    893            userDesc.len = *pBuf++;
   \                     ??CrossCallReturnLabel_203:
   \   000027   C0E0         PUSH    A
   \   000029   740A         MOV     A,#0xa
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   D0E0         POP     A
   \   000030   12....       LCALL   ?Subroutine60 & 0xFFFF
    894            osal_memcpy( userDesc.desc, pBuf, userDesc.len );
   \                     ??CrossCallReturnLabel_85:
   \   000033                ; Setup parameters for call to function osal_memcpy
   \   000033   8A..         MOV     ?V0 + 0,R2
   \   000035   8B..         MOV     ?V0 + 1,R3
   \   000037   88..         MOV     ?V0 + 2,R0
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003E   740D         MOV     A,#0xd
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   E0           MOVX    A,@DPTR
   \   000044   FC           MOV     R4,A
   \   000045   7D00         MOV     R5,#0x0
   \   000047   740E         MOV     A,#0xe
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   AA82         MOV     R2,DPL
   \   00004E   AB83         MOV     R3,DPH
   \   000050   12....       LCALL   ??osal_memcpy?relay
   \   000053   7403         MOV     A,#0x3
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
    895            pBuf += 16;
    896          
    897            retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
   \   000058                ; Setup parameters for call to function ZDP_UserDescSet
   \   000058   740A         MOV     A,#0xa
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   8582..       MOV     ?V0 + 0,DPL
   \   000060   8583..       MOV     ?V0 + 1,DPH
   \   000063   78..         MOV     R0,#?V0 + 0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   7900         MOV     R1,#0x0
   \   00006A   EE           MOV     A,R6
   \   00006B   FC           MOV     R4,A
   \   00006C   EF           MOV     A,R7
   \   00006D   FD           MOV     R5,A
   \   00006E   7403         MOV     A,#0x3
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   AA82         MOV     R2,DPL
   \   000075   AB83         MOV     R3,DPH
   \   000077   12....       LCALL   ??ZDP_UserDescSet?relay
   \   00007A   7402         MOV     A,#0x2
   \   00007C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007F   12....       LCALL   ?Subroutine97 & 0xFFFF
    898          
    899            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??CrossCallReturnLabel_200:
   \   000082   AA..         MOV     R2,?V0 + 3
   \   000084   7965         MOV     R1,#0x65
   \   000086   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    900          }
   \   000089   741B         MOV     A,#0x1b
   \   00008B                REQUIRE ?Subroutine2
   \   00008B                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F04         MOV     R7,#0x4
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   EA           MOV     A,R2
   \   000001   2402         ADD     A,#0x2
   \   000003                REQUIRE ??Subroutine117_0
   \   000003                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004                REQUIRE ??Subroutine118_0
   \   000004                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   AA82         MOV     R2,DPL
   \   000008   AB83         MOV     R3,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000003   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   000006   F8           MOV     R0,A
   \   000007   E4           CLR     A
   \   000008   C8           XCH     A,R0
   \   000009   F9           MOV     R1,A
   \   00000A   EC           MOV     A,R4
   \   00000B   2400         ADD     A,#0x0
   \   00000D   FE           MOV     R6,A
   \   00000E   E4           CLR     A
   \   00000F   39           ADDC    A,R1
   \   000010   FF           MOV     R7,A
   \   000011   22           RET
    901          
    902          /***************************************************************************************************
    903           * @fn      MT_ZdoServiceDiscRequest
    904           *
    905           * @brief   Handle a Server Discovery request.
    906           *
    907           * @param   pBuf  - MT message data
    908           *
    909           * @return  void
    910           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    911          void MT_ZdoServiceDiscRequest(uint8 *pBuf)
   \                     MT_ZdoServiceDiscRequest:
    912          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    913            uint8 cmdId;
    914            uint8 retValue;
    915            uint16 serviceMask;
    916          
    917            /* parse header */
    918            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ?Subroutine26 & 0xFFFF
    919            pBuf += MT_RPC_FRAME_HDR_SZ;
    920          
    921            /* Service Mask */
    922            serviceMask = BUILD_UINT16( pBuf[0], pBuf[1]);
    923            pBuf += 2;
    924          
    925            retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
   \                     ??CrossCallReturnLabel_24:
   \   00000D                ; Setup parameters for call to function ZDP_ServerDiscReq
   \   00000D   7900         MOV     R1,#0x0
   \   00000F   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   000012   FB           MOV     R3,A
   \   000013   EC           MOV     A,R4
   \   000014   FA           MOV     R2,A
   \   000015   12....       LCALL   ??ZDP_ServerDiscReq?relay
   \   000018   02....       LJMP    ?Subroutine7 & 0xFFFF
    926          
    927            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
    928          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000003   22           RET
    929          
    930          #if defined ( ZIGBEE_CHILD_AGING )
    931          /***************************************************************************************************
    932           * @fn      MT_ZdoEndDeviceTimeoutRequest
    933           *
    934           * @brief   Handle an End Device Timeout request.
    935           *
    936           * @param   pBuf  - MT message data
    937           *
    938           * @return  void
    939           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    940          void MT_ZdoEndDeviceTimeoutRequest(uint8 *pBuf)
   \                     MT_ZdoEndDeviceTimeoutRequest:
    941          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine25 & 0xFFFF
    942            uint8 cmdId;
    943            uint8 retValue;
    944            uint16 parentAddr;
    945            uint16 reqTimeout;
    946          
    947            /* parse header */
    948            cmdId = pBuf[MT_RPC_POS_CMD1];
    949            pBuf += MT_RPC_FRAME_HDR_SZ;
    950          
    951            /* Parent address */
    952            parentAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_23:
   \   00000D   12....       LCALL   ?Subroutine66 & 0xFFFF
    953            pBuf += 2;
    954          
    955            /* Requested Timeout */
    956            reqTimeout = BUILD_UINT16( pBuf[0], pBuf[1] );
    957            pBuf += 2;
    958          
    959            retValue = (uint8)ZDP_EndDeviceTimeoutReq( parentAddr, reqTimeout, 0 );
   \                     ??CrossCallReturnLabel_109:
   \   000010                ; Setup parameters for call to function ZDP_EndDeviceTimeoutReq
   \   000010   7900         MOV     R1,#0x0
   \   000012   8C82         MOV     DPL,R4
   \   000014   8D83         MOV     DPH,R5
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 0,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   FD           MOV     R5,A
   \   00001C   AC..         MOV     R4,?V0 + 0
   \   00001E   12....       LCALL   ??ZDP_EndDeviceTimeoutReq?relay
   \   000021   12....       LCALL   ?Subroutine58 & 0xFFFF
    960          
    961            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??CrossCallReturnLabel_153:
   \   000024   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
    962          }
   \   000027   7401         MOV     A,#0x1
   \   000029   02....       LJMP    ??Subroutine122_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    963          #endif // ZIGBEE_CHILD_AGING
    964          
    965          /***************************************************************************************************
    966           * @fn      MT_ZdoEndDevBindRequest
    967           *
    968           * @brief   Handle a End Device Bind request.
    969           *
    970           * @param   pBuf  - MT message data
    971           *
    972           * @return  void
    973           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    974          void MT_ZdoEndDevBindRequest(uint8 *pBuf)
   \                     MT_ZdoEndDevBindRequest:
    975          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 70
   \   000005   74BA         MOV     A,#-0x46
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    976            uint8 cmdId;
    977            uint8 retValue = 0;
   \   00000A   12....       LCALL   ?Subroutine10 & 0xFFFF
    978            uint8 i, epInt, numInClusters, numOutClusters;
    979            zAddrType_t destAddr;
    980            uint16 shortAddr;
    981            uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
    982          
    983            /* parse header */
    984            cmdId = pBuf[MT_RPC_POS_CMD1];
    985            pBuf += MT_RPC_FRAME_HDR_SZ;
    986          
    987            /* Dev address */
    988            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_184:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine11 & 0xFFFF
    989            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_177:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine37 & 0xFFFF
    990            pBuf += 2;
    991          
    992            /* Local coordinator of the binding */
    993            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
    994            pBuf += 2;
    995          
    996            /* For now, skip past the extended address */
    997            pBuf += Z_EXTADDR_LEN;
   \                     ??CrossCallReturnLabel_47:
   \   000019   240A         ADD     A,#0xa
   \   00001B   12....       LCALL   ?Subroutine50 & 0xFFFF
    998          
    999            /* Endpoint */
   1000            epInt = *pBuf++;
   \                     ??CrossCallReturnLabel_74:
   \   00001E   AA82         MOV     R2,DPL
   \   000020   AB83         MOV     R3,DPH
   1001          
   1002            /* Profile ID */
   1003            profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000022   12....       LCALL   ?Subroutine15 & 0xFFFF
   1004            pBuf += 2;
   1005          
   1006            /* NumInClusters */
   1007            numInClusters = *pBuf++;
   \                     ??CrossCallReturnLabel_5:
   \   000025   F5..         MOV     ?V0 + 4,A
   \   000027   A3           INC     DPTR
   \   000028   0A           INC     R2
   \   000029   AB83         MOV     R3,DPH
   1008            if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \   00002B   C3           CLR     C
   \   00002C   9410         SUBB    A,#0x10
   \   00002E   5019         JNC     ??MT_ZdoEndDevBindRequest_0
   1009            {
   1010              for ( i = 0; i < numInClusters; i++ )
   \   000030   88..         MOV     ?V0 + 2,R0
   \                     ??MT_ZdoEndDevBindRequest_1:
   \   000032   E5..         MOV     A,?V0 + 2
   \   000034   C3           CLR     C
   \   000035   95..         SUBB    A,?V0 + 4
   \   000037   5019         JNC     ??MT_ZdoEndDevBindRequest_2
   1011              {
   1012                inClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   000039   12....       LCALL   ?Subroutine21 & 0xFFFF
   1013                pBuf += 2;
   1014              }
   1015            }
   \                     ??CrossCallReturnLabel_13:
   \   00003C   7428         MOV     A,#0x28
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   000044   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000047   80E9         SJMP    ??MT_ZdoEndDevBindRequest_1
   1016            else
   1017            {
   1018              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_0:
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   7480         MOV     A,#-0x80
   \   000051   F0           MOVX    @DPTR,A
   1019            }
   1020          
   1021            /* NumOutClusters */
   1022            numOutClusters = *pBuf++;
   \                     ??MT_ZdoEndDevBindRequest_2:
   \   000052   8A82         MOV     DPL,R2
   \   000054   8B83         MOV     DPH,R3
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F5..         MOV     ?V0 + 5,A
   \   000059   A3           INC     DPTR
   \   00005A   AA82         MOV     R2,DPL
   \   00005C   AB83         MOV     R3,DPH
   1023            if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
   \   00005E   C3           CLR     C
   \   00005F   9410         SUBB    A,#0x10
   \   000061   501A         JNC     ??MT_ZdoEndDevBindRequest_3
   1024            {
   1025              for ( i = 0; i < numOutClusters; i++ )
   \   000063   75..00       MOV     ?V0 + 2,#0x0
   \                     ??MT_ZdoEndDevBindRequest_4:
   \   000066   E5..         MOV     A,?V0 + 2
   \   000068   C3           CLR     C
   \   000069   95..         SUBB    A,?V0 + 5
   \   00006B   501A         JNC     ??MT_ZdoEndDevBindRequest_5
   1026              {
   1027                outClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
   \   00006D   12....       LCALL   ?Subroutine21 & 0xFFFF
   1028                pBuf += 2;
   1029              }
   1030            }
   \                     ??CrossCallReturnLabel_14:
   \   000070   740A         MOV     A,#0xa
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   000078   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   00007B   80E9         SJMP    ??MT_ZdoEndDevBindRequest_4
   1031            else
   1032            {
   1033              retValue = ZDP_INVALID_REQTYPE;
   \                     ??MT_ZdoEndDevBindRequest_3:
   \   00007D   85..82       MOV     DPL,?XSP + 0
   \   000080   85..83       MOV     DPH,?XSP + 1
   \   000083   7480         MOV     A,#-0x80
   \   000085   8062         SJMP    ??MT_ZdoEndDevBindRequest_6
   1034            }
   1035          
   1036            if ( retValue == 0 )
   \                     ??MT_ZdoEndDevBindRequest_5:
   \   000087   85..82       MOV     DPL,?XSP + 0
   \   00008A   85..83       MOV     DPH,?XSP + 1
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   705A         JNZ     ??MT_ZdoEndDevBindRequest_7
   1037            {
   1038              retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
   1039                                                    numInClusters, inClusters, numOutClusters, outClusters, 0);
   \   000090                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   000090   75..00       MOV     ?V0 + 2,#0x0
   \   000093   78..         MOV     R0,#?V0 + 2
   \   000095   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000098   740B         MOV     A,#0xb
   \   00009A   12....       LCALL   ?XSTACK_DISP0_8
   \   00009D   8582..       MOV     ?V0 + 2,DPL
   \   0000A0   8583..       MOV     ?V0 + 3,DPH
   \   0000A3   78..         MOV     R0,#?V0 + 2
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A8   E5..         MOV     A,?V0 + 5
   \   0000AA   F5..         MOV     ?V0 + 2,A
   \   0000AC   78..         MOV     R0,#?V0 + 2
   \   0000AE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B1   742C         MOV     A,#0x2c
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   8582..       MOV     ?V0 + 2,DPL
   \   0000B9   8583..       MOV     ?V0 + 3,DPH
   \   0000BC   78..         MOV     R0,#?V0 + 2
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C1   E5..         MOV     A,?V0 + 4
   \   0000C3   F5..         MOV     ?V0 + 2,A
   \   0000C5   78..         MOV     R0,#?V0 + 2
   \   0000C7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CA   78..         MOV     R0,#?V0 + 0
   \   0000CC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CF   EF           MOV     A,R7
   \   0000D0   F9           MOV     R1,A
   \   0000D1   740A         MOV     A,#0xa
   \   0000D3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D6   AA82         MOV     R2,DPL
   \   0000D8   AB83         MOV     R3,DPH
   \   0000DA   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   0000DD   7409         MOV     A,#0x9
   \   0000DF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E2   E9           MOV     A,R1
   \   0000E3   85..82       MOV     DPL,?XSP + 0
   \   0000E6   85..83       MOV     DPH,?XSP + 1
   \                     ??MT_ZdoEndDevBindRequest_6:
   \   0000E9   F0           MOVX    @DPTR,A
   1040            }
   1041          
   1042            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoEndDevBindRequest_7:
   \   0000EA                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000EA   AC82         MOV     R4,DPL
   \   0000EC   AD83         MOV     R5,DPH
   \   0000EE   7B01         MOV     R3,#0x1
   \   0000F0   EE           MOV     A,R6
   \   0000F1   FA           MOV     R2,A
   \   0000F2   7965         MOV     R1,#0x65
   \   0000F4   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1043          }
   \   0000F7   7446         MOV     A,#0x46
   \   0000F9   02....       LJMP    ??Subroutine120_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000003   E5..         MOV     A,?V0 + 6
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   E5..         MOV     A,?V0 + 7
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 6,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F9           MOV     R1,A
   \   00000A   E5..         MOV     A,?V0 + 6
   \   00000C   2400         ADD     A,#0x0
   \   00000E   E4           CLR     A
   \   00000F   39           ADDC    A,R1
   \   000010   F5..         MOV     ?V0 + 7,A
   \   000012   E5..         MOV     A,?V0 + 2
   \   000014   33           RLC     A
   \   000015   F8           MOV     R0,A
   \   000016   E4           CLR     A
   \   000017   33           RLC     A
   \   000018   F9           MOV     R1,A
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine121_0
   \   000003                ; // Fall through to label ??Subroutine121_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000003   FF           MOV     R7,A
   \   000004   A3           INC     DPTR
   \   000005   22           RET
   1044          
   1045          /***************************************************************************************************
   1046           * @fn      MT_ZdoBindRequest
   1047           *
   1048           * @brief   Handle a Bind request.
   1049           *
   1050           * @param   pBuf  - MT message data
   1051           *
   1052           * @return  void
   1053           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1054          void MT_ZdoBindRequest(uint8 *pBuf)
   \                     MT_ZdoBindRequest:
   1055          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine34 & 0xFFFF
   1056            uint8 cmdId;
   1057            uint8 retValue;
   1058            zAddrType_t destAddr, devAddr;
   1059            uint8 *pSrcAddr, *ptr;
   1060            uint8 srcEPInt, dstEPInt;
   1061            uint16 clusterID;
   1062          
   1063            /* parse header */
   1064            cmdId = pBuf[MT_RPC_POS_CMD1];
   1065            pBuf += MT_RPC_FRAME_HDR_SZ;
   1066          
   1067            /* Dev address */
   1068            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_40:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine43 & 0xFFFF
   1069            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_58:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine14 & 0xFFFF
   1070            pBuf += 2;
   1071          
   1072            /* SrcAddress */
   1073            pSrcAddr = pBuf;
   1074            pBuf += Z_EXTADDR_LEN;
   1075          
   1076            /* SrcEPInt */
   1077            srcEPInt = *pBuf++;
   1078          
   1079            /* ClusterID */
   1080            clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
   1081            pBuf += 2;
   1082          
   1083            /* Destination Address mode */
   1084            devAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_2:
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ?Subroutine62 & 0xFFFF
   1085          
   1086            /* Destination Address */
   1087            if ( devAddr.addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_99:
   \   00001F   7012         JNZ     ??MT_ZdoBindRequest_0
   1088            {
   1089              ptr = pBuf;
   1090              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   000021                ; Setup parameters for call to function sAddrExtCpy
   \   000021   EE           MOV     A,R6
   \   000022   FC           MOV     R4,A
   \   000023   EF           MOV     A,R7
   \   000024   FD           MOV     R5,A
   \   000025   7401         MOV     A,#0x1
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   AA82         MOV     R2,DPL
   \   00002C   AB83         MOV     R3,DPH
   \   00002E   12....       LCALL   ??sAddrExtCpy?relay
   \   000031   8009         SJMP    ??CrossCallReturnLabel_88
   1091            }
   1092            else
   1093            {
   1094              devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoBindRequest_0:
   \   000033   12....       LCALL   ?Subroutine30 & 0xFFFF
   1095            }
   \                     ??CrossCallReturnLabel_32:
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   12....       LCALL   ?Subroutine61 & 0xFFFF
   1096            /* The short address occupies LSB two bytes */
   1097            pBuf += Z_EXTADDR_LEN;
   1098          
   1099            /* DstEPInt */
   1100            dstEPInt = *pBuf;
   1101          
   1102            retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \                     ??CrossCallReturnLabel_88:
   \   00003C                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   00003C   75..00       MOV     ?V0 + 4,#0x0
   \   00003F   78..         MOV     R0,#?V0 + 4
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F5..         MOV     ?V0 + 4,A
   \   000053   78..         MOV     R0,#?V0 + 4
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000058   7403         MOV     A,#0x3
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   8582..       MOV     ?V0 + 4,DPL
   \   000060   8583..       MOV     ?V0 + 5,DPH
   \   000063   78..         MOV     R0,#?V0 + 4
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   78..         MOV     R0,#?V0 + 6
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   78..         MOV     R0,#?V0 + 2
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000072   A9..         MOV     R1,?V0 + 1
   \   000074   7412         MOV     A,#0x12
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   AC82         MOV     R4,DPL
   \   00007B   AD83         MOV     R5,DPH
   \   00007D   7A21         MOV     R2,#0x21
   \   00007F   02....       LJMP    ?Subroutine4 & 0xFFFF
   1103          
   1104            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1105          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   8E82         MOV     DPL,R6
   \   000004   8F83         MOV     DPH,R7
   \   000006   A3           INC     DPTR
   \   000007   0E           INC     R6
   \   000008   AF83         MOV     R7,DPH
   \   00000A   7403         MOV     A,#0x3
   \   00000C   68           XRL     A,R0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00000A   740A         MOV     A,#0xa
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   000007   7412         MOV     A,#0x12
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_129:
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000003   F9           MOV     R1,A
   \   000004   EA           MOV     A,R2
   \   000005   F8           MOV     R0,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   EE           MOV     A,R6
   \   000006   2402         ADD     A,#0x2
   \   000008   F5..         MOV     ?V0 + 2,A
   \   00000A   EF           MOV     A,R7
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F5..         MOV     ?V0 + 3,A
   \   00000F   E5..         MOV     A,?V0 + 2
   \   000011   2408         ADD     A,#0x8
   \   000013   FE           MOV     R6,A
   \   000014   E5..         MOV     A,?V0 + 3
   \   000016   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000019   F5..         MOV     ?V0 + 1,A
   \   00001B   A3           INC     DPTR
   \   00001C   AE82         MOV     R6,DPL
   \   00001E   AF83         MOV     R7,DPH
   \   000020   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000023   F9           MOV     R1,A
   \   000024   EA           MOV     A,R2
   \   000025   2400         ADD     A,#0x0
   \   000027   F5..         MOV     ?V0 + 6,A
   \   000029   E4           CLR     A
   \   00002A   39           ADDC    A,R1
   \   00002B   F5..         MOV     ?V0 + 7,A
   \   00002D   EE           MOV     A,R6
   \   00002E   2402         ADD     A,#0x2
   \   000030   FE           MOV     R6,A
   \   000031   EF           MOV     A,R7
   \   000032   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000035   F8           MOV     R0,A
   \   000036   7409         MOV     A,#0x9
   \   000038   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FF           MOV     R7,A
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   12....       LCALL   ??ZDP_BindUnbindReq?relay
   \   000005   7408         MOV     A,#0x8
   \   000007   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00000D   7965         MOV     R1,#0x65
   \   00000F   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   \   000012   7413         MOV     A,#0x13
   \   000014                REQUIRE ??Subroutine120_0
   \   000014                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V0 + 0,A
   \   000009   EE           MOV     A,R6
   \   00000A   2403         ADD     A,#0x3
   \   00000C   FE           MOV     R6,A
   \   00000D   EF           MOV     A,R7
   \   00000E   3400         ADDC    A,#0x0
   \   000010   FF           MOV     R7,A
   \   000011   22           RET
   1106          
   1107          /***************************************************************************************************
   1108           * @fn      MT_ZdoUnbindRequest
   1109           *
   1110           * @brief   Handle a Unbind request.
   1111           *
   1112           * @param   pBuf  - MT message data
   1113           *
   1114           * @return  void
   1115           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1116          void MT_ZdoUnbindRequest(uint8 *pBuf)
   \                     MT_ZdoUnbindRequest:
   1117          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 19
   \   000005   74ED         MOV     A,#-0x13
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine34 & 0xFFFF
   1118            uint8 cmdId;
   1119            uint8 retValue;
   1120            zAddrType_t destAddr, devAddr;
   1121            uint8 *pSrcAddr, *ptr;
   1122            uint8 srcEPInt, dstEPInt;
   1123            uint16 clusterID;
   1124          
   1125            /* parse header */
   1126            cmdId = pBuf[MT_RPC_POS_CMD1];
   1127            pBuf += MT_RPC_FRAME_HDR_SZ;
   1128          
   1129            /* dev address */
   1130            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_41:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine43 & 0xFFFF
   1131            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_59:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine14 & 0xFFFF
   1132            pBuf += 2;
   1133          
   1134            /* SrcAddress */
   1135            pSrcAddr = pBuf;
   1136            pBuf += Z_EXTADDR_LEN;
   1137          
   1138            /* SrcEPInt */
   1139            srcEPInt = *pBuf++;
   1140          
   1141            /* ClusterID */
   1142            clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
   1143            pBuf += 2;
   1144          
   1145            /* Destination Address mode */
   1146            devAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_3:
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ?Subroutine62 & 0xFFFF
   1147          
   1148            /* Destination Address */
   1149            if ( devAddr.addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_100:
   \   00001F   7012         JNZ     ??MT_ZdoUnbindRequest_0
   1150            {
   1151              ptr = pBuf;
   1152              osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
   \   000021                ; Setup parameters for call to function sAddrExtCpy
   \   000021   EE           MOV     A,R6
   \   000022   FC           MOV     R4,A
   \   000023   EF           MOV     A,R7
   \   000024   FD           MOV     R5,A
   \   000025   7401         MOV     A,#0x1
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   AA82         MOV     R2,DPL
   \   00002C   AB83         MOV     R3,DPH
   \   00002E   12....       LCALL   ??sAddrExtCpy?relay
   \   000031   8009         SJMP    ??CrossCallReturnLabel_89
   1153            }
   1154            else
   1155            {
   1156              devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??MT_ZdoUnbindRequest_0:
   \   000033   12....       LCALL   ?Subroutine30 & 0xFFFF
   1157            }
   \                     ??CrossCallReturnLabel_33:
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   12....       LCALL   ?Subroutine61 & 0xFFFF
   1158            /* The short address occupies LSB two bytes */
   1159            pBuf += Z_EXTADDR_LEN;
   1160          
   1161            /* dstEPInt */
   1162            dstEPInt = *pBuf;
   1163          
   1164            retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
   \                     ??CrossCallReturnLabel_89:
   \   00003C                ; Setup parameters for call to function ZDP_BindUnbindReq
   \   00003C   75..00       MOV     ?V0 + 4,#0x0
   \   00003F   78..         MOV     R0,#?V0 + 4
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000044   8E82         MOV     DPL,R6
   \   000046   8F83         MOV     DPH,R7
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F5..         MOV     ?V0 + 4,A
   \   000053   78..         MOV     R0,#?V0 + 4
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000058   7403         MOV     A,#0x3
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   8582..       MOV     ?V0 + 4,DPL
   \   000060   8583..       MOV     ?V0 + 5,DPH
   \   000063   78..         MOV     R0,#?V0 + 4
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   78..         MOV     R0,#?V0 + 6
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   78..         MOV     R0,#?V0 + 2
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000072   A9..         MOV     R1,?V0 + 1
   \   000074   7412         MOV     A,#0x12
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   AC82         MOV     R4,DPL
   \   00007B   AD83         MOV     R5,DPH
   \   00007D   7A22         MOV     R2,#0x22
   \   00007F   02....       LJMP    ?Subroutine4 & 0xFFFF
   1165          
   1166            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1167          }
   1168          
   1169          #if defined (MT_SYS_KEY_MANAGEMENT)
   1170          /***************************************************************************************************
   1171           * @fn      MT_ZdoSetLinkKey
   1172           *
   1173           * @brief   Set an application or trust center link key.
   1174           *
   1175           * @param   pBuf  - MT message data
   1176           *
   1177           * @return  void
   1178           ***************************************************************************************************/
   1179          void MT_ZdoSetLinkKey(uint8 *pBuf)
   1180          {
   1181            uint8 cmdId;
   1182            uint8 retValue;
   1183            uint8 *pExtAddr;
   1184            uint8 *pKey;
   1185            uint16 shortAddr;
   1186          
   1187            /* parse header */
   1188            cmdId = pBuf[MT_RPC_POS_CMD1];
   1189            pBuf += MT_RPC_FRAME_HDR_SZ;
   1190          
   1191            /* ShortAddr */
   1192            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1193            pBuf += 2;
   1194          
   1195            /* Extended Addr */
   1196            pExtAddr = pBuf;
   1197            pBuf += Z_EXTADDR_LEN;
   1198          
   1199            /* Key data */
   1200            pKey = pBuf;
   1201          
   1202            retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
   1203          
   1204            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1205          }
   1206          
   1207          /***************************************************************************************************
   1208           * @fn      MT_ZdoRemoveLinkKey
   1209           *
   1210           * @brief   Remove an application or trust center link key.
   1211           *
   1212           * @param   pBuf  - MT message data
   1213           *
   1214           * @return  void
   1215           ***************************************************************************************************/
   1216          void MT_ZdoRemoveLinkKey(uint8 *pBuf)
   1217          {
   1218            uint8 cmdId;
   1219            uint8 retValue;
   1220            uint8 *pExtAddr;
   1221          
   1222            /* parse header */
   1223            cmdId = pBuf[MT_RPC_POS_CMD1];
   1224            pBuf += MT_RPC_FRAME_HDR_SZ;
   1225          
   1226            /* ShortAddr */
   1227            pExtAddr = pBuf;
   1228          
   1229            retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
   1230          
   1231            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1232          }
   1233          
   1234          /***************************************************************************************************
   1235           * @fn      MT_ZdoGetLinkKey
   1236           *
   1237           * @brief   Get the application link key.
   1238           *
   1239           * @param   pBuf  - MT message data
   1240           *
   1241           * @return  void
   1242           ***************************************************************************************************/
   1243          void MT_ZdoGetLinkKey(uint8 *pBuf)
   1244          {
   1245            uint8 cmdId;
   1246            uint8 retValue;
   1247            uint8 *pExtAddr;
   1248            uint8 *retBuf = NULL;
   1249            uint8 len;
   1250            APSME_LinkKeyData_t *pApsLinkKey = NULL;
   1251            uint16 apsLinkKeyNvId;
   1252          
   1253            // parse header
   1254            cmdId = pBuf[MT_RPC_POS_CMD1];
   1255            pBuf += MT_RPC_FRAME_HDR_SZ;
   1256          
   1257            // Extended Address
   1258            pExtAddr = pBuf;
   1259          
   1260            // Fetch the key NV ID
   1261            retValue = APSME_LinkKeyNVIdGet( pExtAddr, &apsLinkKeyNvId );
   1262          
   1263            if (retValue == ZSuccess)
   1264            {
   1265              if ((pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t))) != NULL)
   1266              {
   1267                // retrieve key from NV
   1268                if (osal_nv_read( apsLinkKeyNvId, 0,
   1269                                 sizeof(APSME_LinkKeyData_t), pApsLinkKey) != SUCCESS)
   1270                {
   1271                  retValue = ZNwkUnknownDevice;
   1272                }
   1273              }
   1274              else
   1275              {
   1276                retValue = ZNwkUnknownDevice;
   1277              }
   1278            }
   1279          
   1280            // Construct the response message
   1281            len = MT_ZDO_STATUS_LEN + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
   1282            if ((retBuf = (uint8 *)osal_mem_alloc(len)) != NULL)
   1283            {
   1284              if (retValue == ZSuccess)
   1285              {
   1286                // Extended Address
   1287                osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
   1288          
   1289                // Key data
   1290                osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pApsLinkKey->key, SEC_KEY_LEN );
   1291              }
   1292              else
   1293              {
   1294                // Failed case - set the rest fields to all FF
   1295                osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );
   1296              }
   1297          
   1298              retBuf[0] = retValue;  // Status
   1299          
   1300              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
   1301          
   1302              // clear retBuf because it contains key data and free allocated memory
   1303              osal_memset(retBuf, 0x00, len);
   1304          
   1305              osal_mem_free(retBuf);
   1306            }
   1307          
   1308            // clear copy of key in RAM
   1309            if (pApsLinkKey != NULL)
   1310            {
   1311              osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
   1312          
   1313              osal_mem_free(pApsLinkKey);
   1314            }
   1315          
   1316            return;
   1317          }
   1318          #endif // MT_SYS_KEY_MANAGEMENT
   1319          
   1320          #if defined (MT_ZDO_MGMT)
   1321          /***************************************************************************************************
   1322           * @fn      MT_ZdoMgmtNwkDiscRequest
   1323           *
   1324           * @brief   Handle a Mgmt Nwk Discovery request.
   1325           *
   1326           * @param   pBuf  - MT message data
   1327           *
   1328           * @return  void
   1329           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1330          void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
   \                     MT_ZdoMgmtNwkDiscRequest:
   1331          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1332            uint8 cmdId;
   1333            uint8 retValue;
   1334            zAddrType_t destAddr;
   1335            uint32 scanChannels;
   1336            uint8 scanDuration, startIndex;
   1337          
   1338            /* parse header */
   1339            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   1340            pBuf += MT_RPC_FRAME_HDR_SZ;
   1341          
   1342            /* Dev address */
   1343            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_191:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine11 & 0xFFFF
   1344            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_178:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine61 & 0xFFFF
   1345            pBuf += 2;
   \                     ??CrossCallReturnLabel_90:
   \   000019   EA           MOV     A,R2
   \   00001A   12....       LCALL   ?Subroutine53 & 0xFFFF
   1346          
   1347            /* Scan Channels */
   1348            scanChannels = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
   \                     ??CrossCallReturnLabel_167:
   \   00001D   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000020   A3           INC     DPTR
   \   000021   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000024   7408         MOV     A,#0x8
   \   000026   78..         MOV     R0,#?V0 + 4
   \   000028   12....       LCALL   ?L_SHL
   \   00002B   78..         MOV     R0,#?V0 + 0
   \   00002D   79..         MOV     R1,#?V0 + 4
   \   00002F   12....       LCALL   ?L_ADD
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F5..         MOV     ?V0 + 4,A
   \   00003B   E4           CLR     A
   \   00003C   F5..         MOV     ?V0 + 5,A
   \   00003E   7410         MOV     A,#0x10
   \   000040   78..         MOV     R0,#?V0 + 4
   \   000042   12....       LCALL   ?L_SHL
   \   000045   78..         MOV     R0,#?V0 + 0
   \   000047   79..         MOV     R1,#?V0 + 4
   \   000049   12....       LCALL   ?L_ADD
   \   00004C   8A82         MOV     DPL,R2
   \   00004E   8B83         MOV     DPH,R3
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F5..         MOV     ?V0 + 4,A
   \   000056   E4           CLR     A
   \   000057   F5..         MOV     ?V0 + 6,A
   \   000059   7418         MOV     A,#0x18
   \   00005B   78..         MOV     R0,#?V0 + 4
   \   00005D   12....       LCALL   ?L_SHL
   \   000060   78..         MOV     R0,#?V0 + 0
   \   000062   79..         MOV     R1,#?V0 + 4
   \   000064   12....       LCALL   ?L_ADD
   1349            pBuf += 4;
   \   000067   EA           MOV     A,R2
   \   000068   2404         ADD     A,#0x4
   \   00006A   12....       LCALL   ?Subroutine51 & 0xFFFF
   1350          
   1351            /* Scan Duration */
   1352            scanDuration = *pBuf++;
   \                     ??CrossCallReturnLabel_76:
   \   00006D   AA82         MOV     R2,DPL
   \   00006F   AB83         MOV     R3,DPH
   1353          
   1354            /* Start Index */
   1355            startIndex = *pBuf;
   1356          
   1357            retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
   \   000071                ; Setup parameters for call to function ZDP_MgmtNwkDiscReq
   \   000071   78..         MOV     R0,#?V0 + 0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000076   7D00         MOV     R5,#0x0
   \   000078   8A82         MOV     DPL,R2
   \   00007A   8B83         MOV     DPH,R3
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   FC           MOV     R4,A
   \   00007E   7405         MOV     A,#0x5
   \   000080   12....       LCALL   ?XSTACK_DISP0_8
   \   000083   AA82         MOV     R2,DPL
   \   000085   AB83         MOV     R3,DPH
   \   000087   12....       LCALL   ??ZDP_MgmtNwkDiscReq?relay
   \   00008A   7404         MOV     A,#0x4
   \   00008C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008F   E9           MOV     A,R1
   \   000090   85..82       MOV     DPL,?XSP + 0
   \   000093   85..83       MOV     DPH,?XSP + 1
   \   000096   F0           MOVX    @DPTR,A
   1358          
   1359            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \   000097                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000097                REQUIRE ?Subroutine8
   \   000097                ; // Fall through to label ?Subroutine8
   1360          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   AC82         MOV     R4,DPL
   \   000002   AD83         MOV     R5,DPH
   \   000004   7B01         MOV     R3,#0x1
   \   000006   EE           MOV     A,R6
   \   000007   FA           MOV     R2,A
   \   000008   7965         MOV     R1,#0x65
   \   00000A   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   \   00000D   740A         MOV     A,#0xa
   \   00000F   80..         SJMP    ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   FA           MOV     R2,A
   \   000001   EB           MOV     A,R3
   \   000002   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   E4           CLR     A
   \   000004   F5..         MOV     ?V0 + 5,A
   \   000006   F5..         MOV     ?V0 + 6,A
   \   000008   F5..         MOV     ?V0 + 7,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   E4           CLR     A
   \   000004   F5..         MOV     ?V0 + 1,A
   \   000006   F5..         MOV     ?V0 + 2,A
   \   000008   F5..         MOV     ?V0 + 3,A
   \   00000A   22           RET
   1361          
   1362          /***************************************************************************************************
   1363           * @fn      MT_ZdoMgmtLqiRequest
   1364           *
   1365           * @brief   Handle a Mgmt Lqi request.
   1366           *
   1367           * @param   pBuf  - MT message data
   1368           *
   1369           * @return  void
   1370           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1371          void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
   \                     MT_ZdoMgmtLqiRequest:
   1372          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1373            uint8 cmdId;
   1374            uint8 retValue;
   1375            zAddrType_t destAddr;
   1376            uint8 startIndex;
   1377          
   1378            /* parse header */
   1379            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ?Subroutine22 & 0xFFFF
   1380            pBuf += MT_RPC_FRAME_HDR_SZ;
   1381          
   1382            /* Dev address */
   1383            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_15:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine28 & 0xFFFF
   1384            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_27:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine18 & 0xFFFF
   1385            pBuf += 2;
   1386          
   1387            /* Start Index */
   1388            startIndex = *pBuf;
   1389          
   1390            retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
   \                     ??CrossCallReturnLabel_6:
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001C   7401         MOV     A,#0x1
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   8582..       MOV     ?V0 + 0,DPL
   \   000024   8583..       MOV     ?V0 + 1,DPH
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   75..31       MOV     ?V0 + 0,#0x31
   \   00002F   02....       LJMP    ?Subroutine3 & 0xFFFF
   1391          
   1392            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1393          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000006   F9           MOV     R1,A
   \   000007   EC           MOV     A,R4
   \   000008   F8           MOV     R0,A
   \   000009   7402         MOV     A,#0x2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000003   740A         MOV     A,#0xa
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000007   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   00000A                ; Setup parameters for call to function ZDP_SendData
   \   00000A                ; Setup parameters for call to function ZDP_SendData
   \   00000A                ; Setup parameters for call to function ZDP_SendData
   \   00000A   75..00       MOV     ?V0 + 0,#0x0
   \   00000D   78..         MOV     R0,#?V0 + 0
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   75..00       MOV     ?V0 + 1,#0x0
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   7901         MOV     R1,#0x1
   \   00000A   7407         MOV     A,#0x7
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   AC82         MOV     R4,DPL
   \   000011   AD83         MOV     R5,DPH
   \   000013   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000015   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000017   12....       LCALL   ??ZDP_SendData?relay
   \   00001A   7405         MOV     A,#0x5
   \   00001C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001F   7401         MOV     A,#0x1
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   E9           MOV     A,R1
   \   000025   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000028   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   \   00002B   740B         MOV     A,#0xb
   \   00002D                REQUIRE ??Subroutine122_0
   \   00002D                ; // Fall through to label ??Subroutine122_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
   1394          
   1395          /***************************************************************************************************
   1396           * @fn      MT_ZdoMgmtRtgRequest
   1397           *
   1398           * @brief   Handle a Mgmt Rtg request.
   1399           *
   1400           * @param   pBuf  - MT message data
   1401           *
   1402           * @return  void
   1403           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1404          void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
   \                     MT_ZdoMgmtRtgRequest:
   1405          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1406            uint8 cmdId;
   1407            uint8 retValue;
   1408            zAddrType_t destAddr;
   1409            uint8 startIndex;
   1410          
   1411            /* parse header */
   1412            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ?Subroutine22 & 0xFFFF
   1413            pBuf += MT_RPC_FRAME_HDR_SZ;
   1414          
   1415            /* Dev Address */
   1416            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_16:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine28 & 0xFFFF
   1417            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
   \                     ??CrossCallReturnLabel_28:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine18 & 0xFFFF
   1418            pBuf += 2;
   1419          
   1420            /* Start Index */
   1421            startIndex = *pBuf;
   1422          
   1423            retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
   \                     ??CrossCallReturnLabel_7:
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001C   7401         MOV     A,#0x1
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   8582..       MOV     ?V0 + 0,DPL
   \   000024   8583..       MOV     ?V0 + 1,DPH
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   75..32       MOV     ?V0 + 0,#0x32
   \   00002F   80..         SJMP    ?Subroutine3
   1424          
   1425            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1426          }
   1427          
   1428          /***************************************************************************************************
   1429           * @fn      MT_ZdoMgmtBindRequest
   1430           *
   1431           * @brief   Handle a Mgmt Bind request.
   1432           *
   1433           * @param   pBuf  - MT message data
   1434           *
   1435           * @return  void
   1436           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1437          void MT_ZdoMgmtBindRequest(uint8 *pBuf)
   \                     MT_ZdoMgmtBindRequest:
   1438          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1439            uint8 cmdId;
   1440            uint8 retValue;
   1441            zAddrType_t destAddr;
   1442            uint8 startIndex;
   1443          
   1444            /* parse header */
   1445            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ?Subroutine22 & 0xFFFF
   1446            pBuf += MT_RPC_FRAME_HDR_SZ;
   1447          
   1448            /* Dev Address */
   1449            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_17:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine28 & 0xFFFF
   1450            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_29:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine18 & 0xFFFF
   1451            pBuf += 2;
   1452          
   1453            /* Start Index */
   1454            startIndex = *pBuf;
   1455          
   1456            retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
   \                     ??CrossCallReturnLabel_8:
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001C   7401         MOV     A,#0x1
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   8582..       MOV     ?V0 + 0,DPL
   \   000024   8583..       MOV     ?V0 + 1,DPH
   \   000027   78..         MOV     R0,#?V0 + 0
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   75..33       MOV     ?V0 + 0,#0x33
   \   00002F                REQUIRE ?Subroutine3
   \   00002F                ; // Fall through to label ?Subroutine3
   1457          
   1458            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1459          }
   1460          
   1461          /***************************************************************************************************
   1462           * @fn      MT_ZdoMgmtLeaveRequest
   1463           *
   1464           * @brief   Handle a Mgmt Leave request.
   1465           *
   1466           * @param   pBuf  - MT message data
   1467           *
   1468           * @return  void
   1469           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1470          void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
   \                     MT_ZdoMgmtLeaveRequest:
   1471          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1472            uint8 cmdId;
   1473            uint8 retValue;
   1474            zAddrType_t destAddr;
   1475            uint8 *pIEEEAddr;
   1476            uint8 removeChildren;
   1477            uint8 rejoin;
   1478          
   1479            /* parse header */
   1480            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   1481            pBuf += MT_RPC_FRAME_HDR_SZ;
   1482          
   1483            /* Destination Address */
   1484            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_192:
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   12....       LCALL   ?Subroutine11 & 0xFFFF
   1485            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_179:
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine61 & 0xFFFF
   1486            pBuf += 2;
   \                     ??CrossCallReturnLabel_91:
   \   000019   12....       LCALL   ?Subroutine67 & 0xFFFF
   1487          
   1488            /* IEEE address */
   1489            pIEEEAddr = pBuf;
   \                     ??CrossCallReturnLabel_110:
   \   00001C   EA           MOV     A,R2
   \   00001D   F8           MOV     R0,A
   \   00001E   EB           MOV     A,R3
   \   00001F   F9           MOV     R1,A
   \   000020   E8           MOV     A,R0
   \   000021   FC           MOV     R4,A
   \   000022   E9           MOV     A,R1
   \   000023   FD           MOV     R5,A
   1490            pBuf += Z_EXTADDR_LEN;
   \   000024   EA           MOV     A,R2
   \   000025   2408         ADD     A,#0x8
   \   000027   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   1491          
   1492            /* Rejoin if bit0 is set */
   1493            rejoin = ( *pBuf & 0x01 ) ? TRUE : FALSE;
   1494          
   1495            /* Remove Children if bit1 is set */
   1496            removeChildren = ( *pBuf & 0x02 ) ? TRUE : FALSE;
   1497          
   1498            retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
   \                     ??CrossCallReturnLabel_205:
   \   00002A   A2E1         MOV     C,0xE0 /* A   */.1
   \   00002C   5004         JNC     ??MT_ZdoMgmtLeaveRequest_0
   \   00002E   D2F0         SETB    B.0
   \   000030   8002         SJMP    ??MT_ZdoMgmtLeaveRequest_1
   \                     ??MT_ZdoMgmtLeaveRequest_0:
   \   000032   C2F0         CLR     B.0
   \                     ??MT_ZdoMgmtLeaveRequest_1:
   \   000034                ; Setup parameters for call to function ZDP_MgmtLeaveReq
   \   000034   75..00       MOV     ?V0 + 0,#0x0
   \   000037   78..         MOV     R0,#?V0 + 0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003C   8A82         MOV     DPL,R2
   \   00003E   8B83         MOV     DPH,R3
   \   000040   E0           MOVX    A,@DPTR
   \   000041   A2E0         MOV     C,0xE0 /* A   */.0
   \   000043   E4           CLR     A
   \   000044   33           RLC     A
   \   000045   F5..         MOV     ?V0 + 0,A
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004C   A2F0         MOV     C,B.0
   \   00004E   E4           CLR     A
   \   00004F   33           RLC     A
   \   000050   F9           MOV     R1,A
   \   000051   7403         MOV     A,#0x3
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   AA82         MOV     R2,DPL
   \   000058   AB83         MOV     R3,DPH
   \   00005A   12....       LCALL   ??ZDP_MgmtLeaveReq?relay
   \   00005D   7402         MOV     A,#0x2
   \   00005F   02....       LJMP    ??Subroutine104_0 & 0xFFFF
   1499          
   1500            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1501          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000003   22           RET
   1502          
   1503          /***************************************************************************************************
   1504           * @fn      MT_ZdoMgmtDirectJoinRequest
   1505           *
   1506           * @brief   Handle a Mgmt Direct Join request.
   1507           *
   1508           * @param   pBuf  - MT message data
   1509           *
   1510           * @return  void
   1511           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1512          void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
   \                     MT_ZdoMgmtDirectJoinRequest:
   1513          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine78 & 0xFFFF
   1514            uint8 cmdId;
   1515            uint8 retValue;
   1516            zAddrType_t destAddr;
   1517            uint8 *deviceAddr;
   1518            uint8 capInfo;
   1519          
   1520            /* parse header */
   1521            cmdId = pBuf[MT_RPC_POS_CMD1];
   1522            pBuf += MT_RPC_FRAME_HDR_SZ;
   1523          
   1524            /* Destination Address */
   1525            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_132:
   \   00000D   7409         MOV     A,#0x9
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   7402         MOV     A,#0x2
   \   000014   F0           MOVX    @DPTR,A
   1526            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000015   8C82         MOV     DPL,R4
   \   000017   8D83         MOV     DPH,R5
   \   000019   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine61 & 0xFFFF
   1527            pBuf += 2;
   \                     ??CrossCallReturnLabel_92:
   \   000022   EC           MOV     A,R4
   \   000023   2402         ADD     A,#0x2
   \   000025   FC           MOV     R4,A
   \   000026   ED           MOV     A,R5
   \   000027   3400         ADDC    A,#0x0
   \   000029   FD           MOV     R5,A
   1528          
   1529            /* Device Address */
   1530            deviceAddr = pBuf;
   1531            pBuf += Z_EXTADDR_LEN;
   1532          
   1533            /* Capability information */
   1534            capInfo = *pBuf;
   1535          
   1536            retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
   \   00002A                ; Setup parameters for call to function ZDP_MgmtDirectJoinReq
   \   00002A   75..00       MOV     ?V0 + 0,#0x0
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000032   8C82         MOV     DPL,R4
   \   000034   8D83         MOV     DPH,R5
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F9           MOV     R1,A
   \   000040   7402         MOV     A,#0x2
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   AA82         MOV     R2,DPL
   \   000047   AB83         MOV     R3,DPH
   \   000049   12....       LCALL   ??ZDP_MgmtDirectJoinReq?relay
   \   00004C   02....       LJMP    ??Subroutine103_0 & 0xFFFF
   1537          
   1538            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1539          }
   1540          
   1541          /***************************************************************************************************
   1542           * @fn      MT_ZdoMgmtPermitJoinRequest
   1543           *
   1544           * @brief   Handle a Mgmt Permit Join request.
   1545           *
   1546           * @param   pBuf  - MT message data
   1547           *
   1548           * @return  void
   1549           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1550          void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
   \                     MT_ZdoMgmtPermitJoinRequest:
   1551          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1552            uint8 cmdId;
   1553            uint8 retValue;
   1554            zAddrType_t destAddr;
   1555            uint8 duration, tcSignificance;
   1556          
   1557            /* parse header */
   1558            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ?Subroutine26 & 0xFFFF
   1559            pBuf += MT_RPC_FRAME_HDR_SZ;
   1560          
   1561            /* Destination Address */
   1562            destAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_25:
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   E0           MOVX    A,@DPTR
   \   000012   C0E0         PUSH    A
   \   000014   7409         MOV     A,#0x9
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   D0E0         POP     A
   \   00001B   12....       LCALL   ?Subroutine60 & 0xFFFF
   1563            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_86:
   \   00001E   12....       LCALL   ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   12....       LCALL   ?Subroutine61 & 0xFFFF
   1564            pBuf += 2;
   \                     ??CrossCallReturnLabel_93:
   \   000027   EA           MOV     A,R2
   \   000028   2402         ADD     A,#0x2
   \   00002A   12....       LCALL   ?Subroutine51 & 0xFFFF
   1565          
   1566            /* Duration */
   1567            duration = *pBuf++;
   1568          
   1569            /* Trust center significance */
   1570            tcSignificance = *pBuf;
   1571          
   1572            retValue = (byte)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
   \                     ??CrossCallReturnLabel_77:
   \   00002D                ; Setup parameters for call to function ZDP_MgmtPermitJoinReq
   \   00002D   7D00         MOV     R5,#0x0
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   FC           MOV     R4,A
   \   000031   7401         MOV     A,#0x1
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   AA82         MOV     R2,DPL
   \   000038   AB83         MOV     R3,DPH
   \   00003A   12....       LCALL   ??ZDP_MgmtPermitJoinReq?relay
   \   00003D   02....       LJMP    ??Subroutine105_0 & 0xFFFF
   1573          
   1574            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   1575          }
   1576          
   1577          /***************************************************************************************************
   1578           * @fn      MT_ZdoMgmtNwkUpdateRequest
   1579           *
   1580           * @brief   Handle a Mgmt Nwk Update request.
   1581           *
   1582           * @param   pBuf  - MT message data
   1583           *
   1584           * @return  void
   1585           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1586          void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
   \                     MT_ZdoMgmtNwkUpdateRequest:
   1587          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1588            uint8 cmdId;
   1589            uint8 retValue;
   1590            zAddrType_t destAddr;
   1591            uint32 channelMask;
   1592            uint8 scanDuration, scanCount;
   1593            uint16 nwkManagerAddr;
   1594          
   1595              /* parse header */
   1596            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ?Subroutine26 & 0xFFFF
   1597            pBuf += MT_RPC_FRAME_HDR_SZ;
   1598          
   1599            /* Destination address */
   1600            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_26:
   \   00000D   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   12....       LCALL   ?Subroutine61 & 0xFFFF
   1601            pBuf += 2;
   \                     ??CrossCallReturnLabel_94:
   \   000016   12....       LCALL   ?Subroutine52 & 0xFFFF
   1602          
   1603            /* Destination address mode */
   1604            destAddr.addrMode = *pBuf++;
   \                     ??CrossCallReturnLabel_204:
   \   000019   C0E0         PUSH    A
   \   00001B   7409         MOV     A,#0x9
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   D0E0         POP     A
   \   000022   12....       LCALL   ?Subroutine60 & 0xFFFF
   1605          
   1606            channelMask = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
   \                     ??CrossCallReturnLabel_87:
   \   000025   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000028   A3           INC     DPTR
   \   000029   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   00002C   7408         MOV     A,#0x8
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?L_SHL
   \   000033   78..         MOV     R0,#?V0 + 4
   \   000035   79..         MOV     R1,#?V0 + 0
   \   000037   12....       LCALL   ?L_ADD
   \   00003A   8A82         MOV     DPL,R2
   \   00003C   8B83         MOV     DPH,R3
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   E0           MOVX    A,@DPTR
   \   000041   F5..         MOV     ?V0 + 0,A
   \   000043   E4           CLR     A
   \   000044   F5..         MOV     ?V0 + 1,A
   \   000046   7410         MOV     A,#0x10
   \   000048   78..         MOV     R0,#?V0 + 0
   \   00004A   12....       LCALL   ?L_SHL
   \   00004D   78..         MOV     R0,#?V0 + 4
   \   00004F   79..         MOV     R1,#?V0 + 0
   \   000051   12....       LCALL   ?L_ADD
   \   000054   8A82         MOV     DPL,R2
   \   000056   8B83         MOV     DPH,R3
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   F5..         MOV     ?V0 + 0,A
   \   00005E   E4           CLR     A
   \   00005F   F5..         MOV     ?V0 + 2,A
   \   000061   7418         MOV     A,#0x18
   \   000063   78..         MOV     R0,#?V0 + 0
   \   000065   12....       LCALL   ?L_SHL
   \   000068   78..         MOV     R0,#?V0 + 4
   \   00006A   79..         MOV     R1,#?V0 + 0
   \   00006C   12....       LCALL   ?L_ADD
   1607            pBuf += 4;
   \   00006F   EA           MOV     A,R2
   \   000070   2404         ADD     A,#0x4
   \   000072   12....       LCALL   ?Subroutine50 & 0xFFFF
   1608          
   1609            /* Scan duration */
   1610            scanDuration = *pBuf++;
   1611          
   1612            /* Scan count */
   1613            scanCount = *pBuf++;
   \                     ??CrossCallReturnLabel_75:
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F5..         MOV     ?V0 + 2,A
   \   000078   A3           INC     DPTR
   1614          
   1615            /* NWK manager address */
   1616            nwkManagerAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000079   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00007C   F5..         MOV     ?V0 + 0,A
   \   00007E   E4           CLR     A
   \   00007F   39           ADDC    A,R1
   \   000080   F5..         MOV     ?V0 + 1,A
   1617          
   1618            /* Send the Management Network Update request */
   1619            retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1620                                                    scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   \   000082                ; Setup parameters for call to function ZDP_MgmtNwkUpdateReq
   \   000082   78..         MOV     R0,#?V0 + 0
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000087   78..         MOV     R0,#?V0 + 4
   \   000089   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00008C   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   AA82         MOV     R2,DPL
   \   000094   AB83         MOV     R3,DPH
   \   000096   12....       LCALL   ??ZDP_MgmtNwkUpdateReq?relay
   \   000099   7406         MOV     A,#0x6
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009E   E9           MOV     A,R1
   \   00009F   85..82       MOV     DPL,?XSP + 0
   \   0000A2   85..83       MOV     DPH,?XSP + 1
   \   0000A5   F0           MOVX    @DPTR,A
   1621          
   1622            /*
   1623              Since we don't recevied our own broadcast messages, we should
   1624              send a unicast copy of the message to ourself.
   1625            */
   1626            if ( destAddr.addrMode == AddrBroadcast )
   \   0000A6   7409         MOV     A,#0x9
   \   0000A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   640F         XRL     A,#0xf
   \   0000AE   702D         JNZ     ??MT_ZdoMgmtNwkUpdateRequest_0
   1627            {
   1628              destAddr.addrMode = Addr16Bit;
   \   0000B0   12....       LCALL   ?Subroutine63 & 0xFFFF
   1629              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   \                     ??CrossCallReturnLabel_101:
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   12....       LCALL   ?Subroutine61 & 0xFFFF
   1630              retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
   1631                                                       scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
   \                     ??CrossCallReturnLabel_95:
   \   0000B9                ; Setup parameters for call to function ZDP_MgmtNwkUpdateReq
   \   0000B9   78..         MOV     R0,#?V0 + 0
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BE   78..         MOV     R0,#?V0 + 4
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   0000C3   12....       LCALL   ?Subroutine44 & 0xFFFF
   1632            }
   \                     ??CrossCallReturnLabel_61:
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   AA82         MOV     R2,DPL
   \   0000CB   AB83         MOV     R3,DPH
   \   0000CD   12....       LCALL   ??ZDP_MgmtNwkUpdateReq?relay
   \   0000D0   7406         MOV     A,#0x6
   \   0000D2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D5   E9           MOV     A,R1
   \   0000D6   85..82       MOV     DPL,?XSP + 0
   \   0000D9   85..83       MOV     DPH,?XSP + 1
   \   0000DC   F0           MOVX    @DPTR,A
   1633          
   1634            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoMgmtNwkUpdateRequest_0:
   \   0000DD                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000DD   85..82       MOV     DPL,?XSP + 0
   \   0000E0   85..83       MOV     DPH,?XSP + 1
   \   0000E3   02....       LJMP    ?Subroutine8 & 0xFFFF
   1635          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   90....       MOV     DPTR,#_NIB + 109
   \   000003   E0           MOVX    A,@DPTR
   \   000004   04           INC     A
   \   000005   FD           MOV     R5,A
   \   000006   AC..         MOV     R4,?V0 + 2
   \   000008   EF           MOV     A,R7
   \   000009   F9           MOV     R1,A
   \   00000A   7407         MOV     A,#0x7
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   90....       MOV     DPTR,#_NIB + 20
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   22           RET
   1636          #endif /* MT_ZDO_MGMT */
   1637          
   1638          /***************************************************************************************************
   1639           * @fn      MT_ZdoSendData
   1640           *
   1641           * @brief   Handle a ZDO Send Data request.
   1642           *
   1643           * @param   pBuf  - MT message data
   1644           *
   1645           * @return  void
   1646           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1647          void MT_ZdoSendData( uint8 *pBuf )
   \                     MT_ZdoSendData:
   1648          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1649            uint8 cmdId;
   1650            uint8 retValue;
   1651            zAddrType_t destAddr;
   1652            uint8 transSeq;
   1653            uint8 len;
   1654            uint16 cmd;
   1655          
   1656              /* parse header */
   1657            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
   1658            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000012   EA           MOV     A,R2
   \   000013   2403         ADD     A,#0x3
   \   000015   F5..         MOV     ?V0 + 0,A
   \   000017   EB           MOV     A,R3
   \   000018   3400         ADDC    A,#0x0
   \   00001A   F5..         MOV     ?V0 + 1,A
   1659          
   1660            /* Destination address */
   1661            destAddr.addrMode = Addr16Bit;
   \   00001C   740A         MOV     A,#0xa
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   7402         MOV     A,#0x2
   \   000023   F0           MOVX    @DPTR,A
   1662            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000024   85..82       MOV     DPL,?V0 + 0
   \   000027   85..83       MOV     DPH,?V0 + 1
   \   00002A   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   00002D   7402         MOV     A,#0x2
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   12....       LCALL   ?Subroutine61 & 0xFFFF
   1663            pBuf += 2;
   \                     ??CrossCallReturnLabel_96:
   \   000035   E5..         MOV     A,?V0 + 0
   \   000037   2402         ADD     A,#0x2
   \   000039   F5..         MOV     ?V0 + 0,A
   \   00003B   E5..         MOV     A,?V0 + 1
   \   00003D   12....       LCALL   ?Subroutine55 & 0xFFFF
   1664          
   1665            /* Destination address mode */
   1666            transSeq = *pBuf++;
   \                     ??CrossCallReturnLabel_78:
   \   000040   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000043   85..82       MOV     DPL,?V0 + 0
   \   000046   85..83       MOV     DPH,?V0 + 1
   \   000049   A3           INC     DPTR
   \   00004A   8582..       MOV     ?V0 + 0,DPL
   \   00004D   8583..       MOV     ?V0 + 1,DPH
   1667          
   1668            /* cmd */
   1669            cmd = BUILD_UINT16( pBuf[0], pBuf[1] );
   \   000050   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000053   F8           MOV     R0,A
   \   000054   E4           CLR     A
   \   000055   C8           XCH     A,R0
   \   000056   12....       LCALL   ?Subroutine69 & 0xFFFF
   1670            pBuf += 2;
   \                     ??CrossCallReturnLabel_115:
   \   000059   E5..         MOV     A,?V0 + 0
   \   00005B   2402         ADD     A,#0x2
   \   00005D   F5..         MOV     ?V0 + 0,A
   \   00005F   E5..         MOV     A,?V0 + 1
   \   000061   3400         ADDC    A,#0x0
   1671            len = *pBuf++;
   \   000063   85..82       MOV     DPL,?V0 + 0
   \   000066   F583         MOV     DPH,A
   \   000068   E0           MOVX    A,@DPTR
   \   000069   FF           MOV     R7,A
   \   00006A   A3           INC     DPTR
   \   00006B   8582..       MOV     ?V0 + 0,DPL
   \   00006E   8583..       MOV     ?V0 + 1,DPH
   1672          
   1673            /* Send the Generic ZDO message request */
   1674            retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
   \   000071                ; Setup parameters for call to function ZDP_SendData
   \   000071   88..         MOV     ?V0 + 4,R0
   \   000073   78..         MOV     R0,#?V0 + 4
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000078   78..         MOV     R0,#?V0 + 0
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007D   78..         MOV     R0,#?V0 + 2
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   EF           MOV     A,R7
   \   000083   F9           MOV     R1,A
   \   000084   7407         MOV     A,#0x7
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   AC82         MOV     R4,DPL
   \   00008B   AD83         MOV     R5,DPH
   \   00008D   7405         MOV     A,#0x5
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   AA82         MOV     R2,DPL
   \   000094   AB83         MOV     R3,DPH
   \   000096   12....       LCALL   ??ZDP_SendData?relay
   \   000099   7405         MOV     A,#0x5
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009E   7401         MOV     A,#0x1
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   E9           MOV     A,R1
   \   0000A4   F0           MOVX    @DPTR,A
   1675            /*
   1676              Since we don't recevied our own broadcast messages, we should
   1677              send a unicast copy of the message to ourself.
   1678            */
   1679            if ( destAddr.addrMode == AddrBroadcast )
   \   0000A5   740A         MOV     A,#0xa
   \   0000A7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   640F         XRL     A,#0xf
   \   0000AD   703D         JNZ     ??MT_ZdoSendData_0
   1680            {
   1681              destAddr.addrMode = Addr16Bit;
   \   0000AF   12....       LCALL   ?Subroutine89 & 0xFFFF
   1682              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   \                     ??CrossCallReturnLabel_140:
   \   0000B2   7402         MOV     A,#0x2
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   12....       LCALL   ?Subroutine61 & 0xFFFF
   1683              retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
   \                     ??CrossCallReturnLabel_97:
   \   0000BA                ; Setup parameters for call to function ZDP_SendData
   \   0000BA   78..         MOV     R0,#?V0 + 4
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BF   78..         MOV     R0,#?V0 + 0
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C4   78..         MOV     R0,#?V0 + 2
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C9   EF           MOV     A,R7
   \   0000CA   F9           MOV     R1,A
   \   0000CB   7407         MOV     A,#0x7
   \   0000CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D0   AC82         MOV     R4,DPL
   \   0000D2   AD83         MOV     R5,DPH
   \   0000D4   7405         MOV     A,#0x5
   \   0000D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D9   AA82         MOV     R2,DPL
   \   0000DB   AB83         MOV     R3,DPH
   \   0000DD   12....       LCALL   ??ZDP_SendData?relay
   \   0000E0   7405         MOV     A,#0x5
   \   0000E2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E5   7401         MOV     A,#0x1
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   E9           MOV     A,R1
   \   0000EB   F0           MOVX    @DPTR,A
   1684            }
   1685          
   1686            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoSendData_0:
   \   0000EC                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000EC   7401         MOV     A,#0x1
   \   0000EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F1   AC82         MOV     R4,DPL
   \   0000F3   AD83         MOV     R5,DPH
   \   0000F5   7B01         MOV     R3,#0x1
   \   0000F7   EE           MOV     A,R6
   \   0000F8   FA           MOV     R2,A
   \   0000F9   7965         MOV     R1,#0x65
   \   0000FB   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1687          }
   \   0000FE   740B         MOV     A,#0xb
   \   000100   12....       LCALL   ?DEALLOC_XSTACK8
   \   000103   7F05         MOV     R7,#0x5
   \   000105   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   F9           MOV     R1,A
   \   000001   EA           MOV     A,R2
   \   000002   2400         ADD     A,#0x0
   \   000004   F5..         MOV     ?V0 + 2,A
   \   000006   E4           CLR     A
   \   000007   39           ADDC    A,R1
   \   000008   F5..         MOV     ?V0 + 3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 1,A
   \   000004   85..82       MOV     DPL,?V0 + 0
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   000003   22           RET
   1688          
   1689          /***************************************************************************************************
   1690           * @fn      MT_ZdoNwkAddrOfInterestReq
   1691           *
   1692           * @brief   Handle a ZDO Network Address of Interest request.
   1693           *
   1694           * @param   pBuf  - MT message data
   1695           *
   1696           * @return  void
   1697           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1698          void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf )
   \                     MT_ZdoNwkAddrOfInterestReq:
   1699          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1700            uint8 cmdId;
   1701            uint8 retValue;
   1702            zAddrType_t destAddr;
   1703            uint16 nwkAddr;
   1704            uint8 cmd;
   1705          
   1706              /* parse header */
   1707            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   00000A   12....       LCALL   ?Subroutine38 & 0xFFFF
   1708            pBuf += MT_RPC_FRAME_HDR_SZ;
   1709          
   1710            /* Destination address */
   1711            destAddr.addrMode = Addr16Bit;
   \                     ??CrossCallReturnLabel_49:
   \   00000D   7409         MOV     A,#0x9
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine11 & 0xFFFF
   1712            destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   \                     ??CrossCallReturnLabel_180:
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   12....       LCALL   ?Subroutine29 & 0xFFFF
   1713            pBuf += 2;
   1714          
   1715            /* Network Address of Interest */
   1716            nwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   1717            pBuf += 2;
   1718          
   1719            cmd = *pBuf++;
   \                     ??CrossCallReturnLabel_31:
   \   00001B   8A82         MOV     DPL,R2
   \   00001D   8B83         MOV     DPH,R3
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F5..         MOV     ?V0 + 2,A
   1720          
   1721            /* Send the Generic ZDO message request */
   1722            retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
   \   000024                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   000024   88..         MOV     ?V0 + 1,R0
   \   000026   78..         MOV     R0,#?V0 + 1
   \   000028   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002B   A9..         MOV     R1,?V0 + 2
   \   00002D   EF           MOV     A,R7
   \   00002E   FD           MOV     R5,A
   \   00002F   7402         MOV     A,#0x2
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   AA82         MOV     R2,DPL
   \   000036   AB83         MOV     R3,DPH
   \   000038   12....       LCALL   ??ZDP_NWKAddrOfInterestReq?relay
   \   00003B   7401         MOV     A,#0x1
   \   00003D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000040   E9           MOV     A,R1
   \   000041   85..82       MOV     DPL,?XSP + 0
   \   000044   85..83       MOV     DPH,?XSP + 1
   \   000047   F0           MOVX    @DPTR,A
   1723          
   1724          
   1725            /*
   1726              Since we don't recevied our own broadcast messages, we should
   1727              send a unicast copy of the message to ourself.
   1728            */
   1729            if ( destAddr.addrMode == AddrBroadcast )
   \   000048   7409         MOV     A,#0x9
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   640F         XRL     A,#0xf
   \   000050   702D         JNZ     ??MT_ZdoNwkAddrOfInterestReq_0
   1730            {
   1731              destAddr.addrMode = Addr16Bit;
   \   000052   12....       LCALL   ?Subroutine63 & 0xFFFF
   1732              destAddr.addr.shortAddr = _NIB.nwkDevAddress;
   \                     ??CrossCallReturnLabel_102:
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   12....       LCALL   ?Subroutine61 & 0xFFFF
   1733              retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
   \                     ??CrossCallReturnLabel_98:
   \   00005B                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   00005B   78..         MOV     R0,#?V0 + 1
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000060   A9..         MOV     R1,?V0 + 2
   \   000062   EE           MOV     A,R6
   \   000063   FC           MOV     R4,A
   \   000064   EF           MOV     A,R7
   \   000065   FD           MOV     R5,A
   \   000066   7402         MOV     A,#0x2
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   AA82         MOV     R2,DPL
   \   00006D   AB83         MOV     R3,DPH
   \   00006F   12....       LCALL   ??ZDP_NWKAddrOfInterestReq?relay
   \   000072   7401         MOV     A,#0x1
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
   \   000077   E9           MOV     A,R1
   \   000078   85..82       MOV     DPL,?XSP + 0
   \   00007B   85..83       MOV     DPH,?XSP + 1
   \   00007E   F0           MOVX    @DPTR,A
   1734            }
   1735          
   1736            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
   \                     ??MT_ZdoNwkAddrOfInterestReq_0:
   \   00007F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00007F   85..82       MOV     DPL,?XSP + 0
   \   000082   85..83       MOV     DPH,?XSP + 1
   \   000085   AC82         MOV     R4,DPL
   \   000087   AD83         MOV     R5,DPH
   \   000089   7B01         MOV     R3,#0x1
   \   00008B   AA..         MOV     R2,?V0 + 0
   \   00008D   7965         MOV     R1,#0x65
   \   00008F   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1737          }
   \   000092   740A         MOV     A,#0xa
   \   000094   02....       LJMP    ?Subroutine5 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine132_0
   \   000003                ; // Fall through to label ??Subroutine132_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine132_0:
   \   000000   7F03         MOV     R7,#0x3
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1738          
   1739          /***************************************************************************************************
   1740           * @fn      MT_ZdoStartupFromApp
   1741           *
   1742           * @brief   Handle a Startup from App request.
   1743           *
   1744           * @param   pBuf  - MT message data
   1745           *
   1746           * @return  void
   1747           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1748          void MT_ZdoStartupFromApp(uint8 *pBuf)
   \                     MT_ZdoStartupFromApp:
   1749          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1750            uint8 cmd0, cmd1, retValue;
   1751          
   1752            /* parse header */
   1753            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   FF           MOV     R7,A
   1754            cmd1 = pBuf[MT_RPC_POS_CMD1];
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   1755            pBuf += MT_RPC_FRAME_HDR_SZ;
   1756          
   1757            retValue = ZDOInitDevice(100);
   \   000019                ; Setup parameters for call to function ZDOInitDevice
   \   000019   7A64         MOV     R2,#0x64
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   ??ZDOInitDevice?relay
   \   000020   12....       LCALL   ?Subroutine65 & 0xFFFF
   1758          
   1759            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??CrossCallReturnLabel_105:
   \   000023   700D         JNZ     ??MT_ZdoStartupFromApp_0
   1760            {
   1761              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
   \   000025                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000025   AC82         MOV     R4,DPL
   \   000027   AD83         MOV     R5,DPH
   \   000029   7B01         MOV     R3,#0x1
   \   00002B   EE           MOV     A,R6
   \   00002C   FA           MOV     R2,A
   \   00002D   7965         MOV     R1,#0x65
   \   00002F   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1762            }
   1763          }
   \                     ??MT_ZdoStartupFromApp_0:
   \   000032   02....       LJMP    ??Subroutine101_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   74E0         MOV     A,#-0x20
   \   00000A   5F           ANL     A,R7
   \   00000B   6420         XRL     A,#0x20
   \   00000D   22           RET
   1764          
   1765          
   1766          /***************************************************************************************************
   1767           * @fn      MT_ZdoNetworkDiscoveryReq
   1768           *
   1769           * @brief   Handle a ZDO Network Discovery request.
   1770           *
   1771           * @param   pBuf  - MT message data
   1772           *
   1773           * @return  void
   1774           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1775          void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf)
   \                     MT_ZdoNetworkDiscoveryReq:
   1776          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1777            uint8  retValue = ZFailure;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   7401         MOV     A,#0x1
   \   000012   12....       LCALL   ?Subroutine88 & 0xFFFF
   1778            uint8  cmdId;
   1779            uint32 scanChannels;
   1780          
   1781            /* parse header */
   1782            cmdId = pBuf[MT_RPC_POS_CMD1];
   \                     ??CrossCallReturnLabel_138:
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FF           MOV     R7,A
   1783            pBuf += MT_RPC_FRAME_HDR_SZ;
   \   000017   EA           MOV     A,R2
   \   000018   2403         ADD     A,#0x3
   \   00001A   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   1784          
   1785            /* Packet format */
   1786            /* scan channels (4) | scan duration (1) */
   1787          
   1788            /* Scan channels */
   1789            scanChannels = osal_build_uint32(pBuf, 4);
   1790            pBuf += 4;
   1791          
   1792            retValue = ZDApp_NetworkDiscoveryReq(scanChannels, *pBuf);
   \                     ??CrossCallReturnLabel_168:
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FE           MOV     R6,A
   \   000023                ; Setup parameters for call to function osal_build_uint32
   \   000023   7904         MOV     R1,#0x4
   \   000025   12....       LCALL   ??osal_build_uint32?relay
   \   000028   EE           MOV     A,R6
   \   000029   F9           MOV     R1,A
   \   00002A   12....       LCALL   ??ZDApp_NetworkDiscoveryReq?relay
   \   00002D   E9           MOV     A,R1
   \   00002E   85..82       MOV     DPL,?XSP + 0
   \   000031   85..83       MOV     DPH,?XSP + 1
   \   000034   F0           MOVX    @DPTR,A
   1793          
   1794            // Register ZDO callback for MT to handle the network discovery confirm
   1795            // and beacon notification confirm
   1796            ZDO_RegisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID, &MT_ZdoNwkDiscoveryCnfCB );
   \   000035                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000035   7A..         MOV     R2,#??MT_ZdoNwkDiscoveryCnfCB?relay & 0xff
   \   000037   7B..         MOV     R3,#(??MT_ZdoNwkDiscoveryCnfCB?relay >> 8) & 0xff
   \   000039   7902         MOV     R1,#0x2
   \   00003B   12....       LCALL   ??ZDO_RegisterForZdoCB?relay
   1797            ZDO_RegisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID, &MT_ZdoBeaconIndCB );
   \   00003E                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   00003E   7A..         MOV     R2,#??MT_ZdoBeaconIndCB?relay & 0xff
   \   000040   7B..         MOV     R3,#(??MT_ZdoBeaconIndCB?relay >> 8) & 0xff
   \   000042   7903         MOV     R1,#0x3
   \   000044   12....       LCALL   ??ZDO_RegisterForZdoCB?relay
   1798          
   1799            /* Build and send back the response */
   1800            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   \   000047                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000047   85..82       MOV     DPL,?XSP + 0
   \   00004A   85..83       MOV     DPH,?XSP + 1
   \   00004D   AC82         MOV     R4,DPL
   \   00004F   AD83         MOV     R5,DPH
   \   000051   7B01         MOV     R3,#0x1
   \   000053   EF           MOV     A,R7
   \   000054   02....       LJMP    ??Subroutine99_0 & 0xFFFF
   1801          }
   1802          
   1803          
   1804          /***************************************************************************************************
   1805           * @fn      MT_ZdoJoinReq
   1806           *
   1807           * @brief   Handle a ZDO Join request.
   1808           *
   1809           * @param   pBuf  - MT message data
   1810           *
   1811           * @return  void
   1812           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1813          void MT_ZdoJoinReq(uint8 *pBuf)
   \                     MT_ZdoJoinReq:
   1814          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1815            uint8  retValue = ZFailure;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
   1816            uint8  cmdId;
   1817            uint16 panId;
   1818            uint16 chosenParent;
   1819          
   1820            /* parse header */
   1821            cmdId = pBuf[MT_RPC_POS_CMD1];
   \   000017   12....       LCALL   ?Subroutine75 & 0xFFFF
   1822            pBuf += MT_RPC_FRAME_HDR_SZ;
   1823          
   1824            /* Packet format */
   1825            /* channel     (1) | panID (2) | extendedPanID (8) | chosenParent (2) |
   1826             * parentDepth (1) | stackProfile  (1)
   1827             */
   1828          
   1829            panId        = BUILD_UINT16(pBuf[1], pBuf[2]);
   1830            chosenParent = BUILD_UINT16(pBuf[11], pBuf[12]);
   1831          
   1832            retValue = ZDApp_JoinReq(pBuf[0], panId, &(pBuf[3]), chosenParent, pBuf[13], pBuf[14]);
   \                     ??CrossCallReturnLabel_125:
   \   00001A                ; Setup parameters for call to function ZDApp_JoinReq
   \   00001A   EE           MOV     A,R6
   \   00001B   240E         ADD     A,#0xe
   \   00001D   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000020   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000023   EE           MOV     A,R6
   \   000024   240D         ADD     A,#0xd
   \   000026   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002C   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   00002F   FA           MOV     R2,A
   \   000030   EE           MOV     A,R6
   \   000031   240C         ADD     A,#0xc
   \   000033   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000036   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000039   78..         MOV     R0,#?V0 + 2
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   EE           MOV     A,R6
   \   00003F   2403         ADD     A,#0x3
   \   000041   FC           MOV     R4,A
   \   000042   EF           MOV     A,R7
   \   000043   3400         ADDC    A,#0x0
   \   000045   FD           MOV     R5,A
   \   000046   8E82         MOV     DPL,R6
   \   000048   8F83         MOV     DPH,R7
   \   00004A   A3           INC     DPTR
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FA           MOV     R2,A
   \   00004D   8E82         MOV     DPL,R6
   \   00004F   8F83         MOV     DPH,R7
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F9           MOV     R1,A
   \   000055   EA           MOV     A,R2
   \   000056   2400         ADD     A,#0x0
   \   000058   E4           CLR     A
   \   000059   39           ADDC    A,R1
   \   00005A   FB           MOV     R3,A
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   F9           MOV     R1,A
   \   000061   12....       LCALL   ??ZDApp_JoinReq?relay
   \   000064   7404         MOV     A,#0x4
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
   \   000069   E9           MOV     A,R1
   \   00006A   85..82       MOV     DPL,?XSP + 0
   \   00006D   85..83       MOV     DPH,?XSP + 1
   \   000070   F0           MOVX    @DPTR,A
   1833          
   1834            /* Register for MT to receive Join Confirm */
   1835            ZDO_RegisterForZdoCB( ZDO_JOIN_CNF_CBID, &MT_ZdoJoinCnfCB );
   \   000071                ; Setup parameters for call to function ZDO_RegisterForZdoCB
   \   000071   7A..         MOV     R2,#??MT_ZdoJoinCnfCB?relay & 0xff
   \   000073   7B..         MOV     R3,#(??MT_ZdoJoinCnfCB?relay >> 8) & 0xff
   \   000075   7904         MOV     R1,#0x4
   \   000077   12....       LCALL   ??ZDO_RegisterForZdoCB?relay
   1836          
   1837            /* Build and send back the response */
   1838            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
   \   00007A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00007A   85..82       MOV     DPL,?XSP + 0
   \   00007D   85..83       MOV     DPH,?XSP + 1
   \   000080   AC82         MOV     R4,DPL
   \   000082   AD83         MOV     R5,DPH
   \   000084   7B01         MOV     R3,#0x1
   \   000086   AA..         MOV     R2,?V0 + 0
   \   000088   7965         MOV     R1,#0x65
   \   00008A   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1839          
   1840          }
   \   00008D   7401         MOV     A,#0x1
   \   00008F   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003                REQUIRE ??Subroutine123_0
   \   000003                ; // Fall through to label ??Subroutine123_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine124_0
   \   000003                ; // Fall through to label ??Subroutine124_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine124_0:
   \   000000   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F5..         MOV     ?V0 + 1,A
   \   000009   78..         MOV     R0,#?V0 + 1
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine129_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET
   1841          
   1842          
   1843          /***************************************************************************************************
   1844           * @fn          MT_ZdoNwkDiscoveryCnfCB
   1845           *
   1846           * @brief       Send an indication to inform host device the completion of
   1847           *              network discovery scan
   1848           *
   1849           * @param       pStr - pointer to a parameter and a structure of parameters
   1850           *
   1851           * @return      void
   1852           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1853          void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr )
   \                     MT_ZdoNwkDiscoveryCnfCB:
   1854          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1855            /* pStr: status (uint8) */
   1856            /* Packet Format */
   1857            /* Status (1) */
   1858          
   1859            // Scan completed. De-register the callback with ZDO
   1860            ZDO_DeregisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID );
   \   000009                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   000009   7902         MOV     R1,#0x2
   \   00000B   12....       LCALL   ??ZDO_DeregisterForZdoCB?relay
   1861            ZDO_DeregisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID );
   \   00000E                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   00000E   7903         MOV     R1,#0x3
   \   000010   12....       LCALL   ??ZDO_DeregisterForZdoCB?relay
   1862          
   1863            // Send the buffered beacon indication
   1864            MT_ZdoBeaconIndCB ( NULL );
   \   000013                ; Setup parameters for call to function MT_ZdoBeaconIndCB
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7B00         MOV     R3,#0x0
   \   000017   12....       LCALL   ??MT_ZdoBeaconIndCB?relay
   1865          
   1866            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1867                                                   MT_ZDO_NWK_DISCOVERY_CNF, 1, pStr);
   \   00001A                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00001A   EE           MOV     A,R6
   \   00001B   FC           MOV     R4,A
   \   00001C   EF           MOV     A,R7
   \   00001D   FD           MOV     R5,A
   \   00001E   7B01         MOV     R3,#0x1
   \   000020   7AC7         MOV     R2,#-0x39
   \   000022   7945         MOV     R1,#0x45
   \   000024   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1868            return NULL;
   \   000027   7A00         MOV     R2,#0x0
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   02....       LJMP    ??Subroutine107_0 & 0xFFFF
   1869          }
   1870          
   1871          /***************************************************************************************************
   1872           * @fn          MT_ZdoBeaconIndCB
   1873           *
   1874           * @brief       Send an indication to host device of a beacon notification
   1875           *
   1876           * @param       pStr -  pointer to a parameter and a structure of parameters
   1877           *
   1878           * @return      void
   1879           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1880          void *MT_ZdoBeaconIndCB ( void *pStr )
   \                     MT_ZdoBeaconIndCB:
   1881          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1882            zdoBeaconInd_t *pBeacon = pStr;
   1883            uint8 *pTmp;
   1884          
   1885            /* Packet Format */
   1886            /* devCnt (1) | device #1 (21) | device #2 (21) |... | device #n (21) */
   1887          
   1888            if( pStr != NULL)
   \   000009   EE           MOV     A,R6
   \   00000A   4F           ORL     A,R7
   \   00000B   90....       MOV     DPTR,#pBeaconIndBuf
   \   00000E   7003         JNZ     $+5
   \   000010   02....       LJMP    ??MT_ZdoBeaconIndCB_0 & 0xFFFF
   1889            {
   1890              if( pBeaconIndBuf == NULL )
   \   000013   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000016   701C         JNZ     ??MT_ZdoBeaconIndCB_1
   1891              {
   1892                // If pBeaconIndBuf has not been allocated yet
   1893                // allocate memory now with MAX_UART_TX_BUFF
   1894                if( NULL == (pBeaconIndBuf = (uint8 *)osal_mem_alloc(MT_ZDO_BEACON_IND_PACK_LEN)))
   \   000018                ; Setup parameters for call to function osal_mem_alloc
   \   000018   7A7B         MOV     R2,#0x7b
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   ??osal_mem_alloc?relay
   \   00001F   90....       MOV     DPTR,#pBeaconIndBuf
   \   000022   EA           MOV     A,R2
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \   000025   EB           MOV     A,R3
   \   000026   F0           MOVX    @DPTR,A
   \   000027   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   00002A   7003         JNZ     $+5
   \   00002C   02....       LJMP    ??MT_ZdoBeaconIndCB_2 & 0xFFFF
   1895                {
   1896                  // Memory failure
   1897                  return NULL;
   1898                }
   1899                pBeaconIndBuf[0] = 0; // First byte is devCnt. Initialize to 0.
   \   00002F   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   1900              }
   \                     ??CrossCallReturnLabel_236:
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   1901          
   1902              // Fill in the buffer with the beacon indication
   1903              pTmp = pBeaconIndBuf + (1 + pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN);
   \                     ??MT_ZdoBeaconIndCB_1:
   \   000034   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000037   75F015       MOV     B,#0x15
   \   00003A   A4           MUL     AB
   \   00003B   F8           MOV     R0,A
   \   00003C   A9F0         MOV     R1,B
   \   00003E   90....       MOV     DPTR,#pBeaconIndBuf
   \   000041   E0           MOVX    A,@DPTR
   \   000042   28           ADD     A,R0
   \   000043   FA           MOV     R2,A
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   39           ADDC    A,R1
   \   000047   8A82         MOV     DPL,R2
   \   000049   F583         MOV     DPH,A
   \   00004B   A3           INC     DPTR
   \   00004C   AA82         MOV     R2,DPL
   \   00004E   AB83         MOV     R3,DPH
   1904              *pTmp++ = LO_UINT16(pBeacon->sourceAddr);
   \   000050   8E82         MOV     DPL,R6
   \   000052   8F83         MOV     DPH,R7
   \   000054   12....       LCALL   ?Subroutine33 & 0xFFFF
   1905              *pTmp++ = HI_UINT16(pBeacon->sourceAddr);
   \                     ??CrossCallReturnLabel_38:
   \   000057   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   1906              *pTmp++ = LO_UINT16(pBeacon->panID);
   \                     ??CrossCallReturnLabel_246:
   \   00005A   2402         ADD     A,#0x2
   \   00005C   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   00005F   A3           INC     DPTR
   \   000060   0A           INC     R2
   \   000061   AB83         MOV     R3,DPH
   1907              *pTmp++ = HI_UINT16(pBeacon->panID);
   \   000063   8882         MOV     DPL,R0
   \   000065   8983         MOV     DPH,R1
   \   000067   A3           INC     DPTR
   \   000068   12....       LCALL   ?Subroutine33 & 0xFFFF
   1908              *pTmp++ = pBeacon->logicalChannel;
   \                     ??CrossCallReturnLabel_39:
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   12....       LCALL   ?Subroutine24 & 0xFFFF
   1909              *pTmp++ = pBeacon->permitJoining;
   \                     ??CrossCallReturnLabel_20:
   \   000071   12....       LCALL   ?Subroutine24 & 0xFFFF
   1910              *pTmp++ = pBeacon->routerCapacity;
   \                     ??CrossCallReturnLabel_21:
   \   000074   A3           INC     DPTR
   \   000075   12....       LCALL   ?Subroutine23 & 0xFFFF
   1911              *pTmp++ = pBeacon->deviceCapacity;
   \                     ??CrossCallReturnLabel_18:
   \   000078   12....       LCALL   ?Subroutine23 & 0xFFFF
   1912              *pTmp++ = pBeacon->protocolVersion;
   \                     ??CrossCallReturnLabel_19:
   \   00007B   A3           INC     DPTR
   \   00007C   12....       LCALL   ?Subroutine19 & 0xFFFF
   1913              *pTmp++ = pBeacon->stackProfile;
   \                     ??CrossCallReturnLabel_9:
   \   00007F   12....       LCALL   ?Subroutine19 & 0xFFFF
   1914              *pTmp++ = pBeacon->LQI;
   \                     ??CrossCallReturnLabel_10:
   \   000082   A3           INC     DPTR
   \   000083   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   1915              *pTmp++ = pBeacon->depth;
   \                     ??CrossCallReturnLabel_247:
   \   000086   240B         ADD     A,#0xb
   \   000088   12....       LCALL   ?Subroutine16 & 0xFFFF
   1916              *pTmp++ = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_244:
   \   00008B   240C         ADD     A,#0xc
   \   00008D   12....       LCALL   ?Subroutine16 & 0xFFFF
   1917              osal_memcpy( pTmp, pBeacon->extendedPanID, Z_EXTADDR_LEN);
   \                     ??CrossCallReturnLabel_245:
   \   000090   240D         ADD     A,#0xd
   \   000092   F5..         MOV     ?V0 + 0,A
   \   000094   EF           MOV     A,R7
   \   000095   3400         ADDC    A,#0x0
   \   000097   F5..         MOV     ?V0 + 1,A
   \   000099   75..00       MOV     ?V0 + 2,#0x0
   \   00009C   78..         MOV     R0,#?V0 + 0
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000A1   7C08         MOV     R4,#0x8
   \   0000A3   7D00         MOV     R5,#0x0
   \   0000A5   12....       LCALL   ??osal_memcpy?relay
   \   0000A8   7403         MOV     A,#0x3
   \   0000AA   12....       LCALL   ?DEALLOC_XSTACK8
   1918          
   1919              pBeaconIndBuf[0] += 1; // Increment the devCnt
   \   0000AD   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0000B0   04           INC     A
   \   0000B1   F0           MOVX    @DPTR,A
   1920          
   1921              // Check if the buffer can fit in another beacon
   1922              if( ((pBeaconIndBuf[0] + 1) * MT_ZDO_BEACON_IND_LEN + 1) > MT_ZDO_BEACON_IND_PACK_LEN )
   \   0000B2   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000B5   FB           MOV     R3,A
   \   0000B6   75F015       MOV     B,#0x15
   \   0000B9   A4           MUL     AB
   \   0000BA   2416         ADD     A,#0x16
   \   0000BC   F8           MOV     R0,A
   \   0000BD   E5F0         MOV     A,B
   \   0000BF   3400         ADDC    A,#0x0
   \   0000C1   F9           MOV     R1,A
   \   0000C2   C3           CLR     C
   \   0000C3   E8           MOV     A,R0
   \   0000C4   947C         SUBB    A,#0x7c
   \   0000C6   E9           MOV     A,R1
   \   0000C7   9400         SUBB    A,#0x0
   \   0000C9   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0000CB   65D0         XRL     A,PSW
   \   0000CD   33           RLC     A
   \   0000CE   4044         JC      ??MT_ZdoBeaconIndCB_2
   1923              {
   1924                // Packet full, send the packet over MT
   1925                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1926                                             MT_ZDO_BEACON_NOTIFY_IND,
   1927                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   \   0000D0                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000D0   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0000D3   EB           MOV     A,R3
   \   0000D4   A4           MUL     AB
   \   0000D5   04           INC     A
   \   0000D6   FB           MOV     R3,A
   \   0000D7   7AC5         MOV     R2,#-0x3b
   \   0000D9   7945         MOV     R1,#0x45
   \   0000DB   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1928                pBeaconIndBuf[0] = 0; // Reset the devCnt back to zero
   \   0000DE   12....       LCALL   ?Subroutine81 & 0xFFFF
   1929              }
   1930            }
   \                     ??CrossCallReturnLabel_238:
   \   0000E1   E4           CLR     A
   \   0000E2   802F         SJMP    ??MT_ZdoBeaconIndCB_3
   1931            else
   1932            {
   1933              if( (pBeaconIndBuf != NULL) && (pBeaconIndBuf[0] != 0) )
   \                     ??MT_ZdoBeaconIndCB_0:
   \   0000E4   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   0000E7   602B         JZ      ??MT_ZdoBeaconIndCB_2
   \   0000E9   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   F8           MOV     R0,A
   \   0000EE   6013         JZ      ??MT_ZdoBeaconIndCB_4
   1934              {
   1935                // End of beacon indication, send the packet over MT
   1936                MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1937                                             MT_ZDO_BEACON_NOTIFY_IND,
   1938                                             (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
   \   0000F0                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   0000F0   12....       LCALL   ?Subroutine47 & 0xFFFF
   1939              }
   \                     ??CrossCallReturnLabel_65:
   \   0000F3   E8           MOV     A,R0
   \   0000F4   A4           MUL     AB
   \   0000F5   04           INC     A
   \   0000F6   FB           MOV     R3,A
   \   0000F7   7AC5         MOV     R2,#-0x3b
   \   0000F9   7945         MOV     R1,#0x45
   \   0000FB   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1940              // Free the allocated memory
   1941              if(pBeaconIndBuf != NULL)
   \   0000FE   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000101   6011         JZ      ??MT_ZdoBeaconIndCB_2
   1942              {
   1943                osal_mem_free(pBeaconIndBuf);
   \                     ??MT_ZdoBeaconIndCB_4:
   \   000103                ; Setup parameters for call to function osal_mem_free
   \   000103   90....       MOV     DPTR,#pBeaconIndBuf
   \   000106   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000109   FB           MOV     R3,A
   \   00010A   12....       LCALL   ??osal_mem_free?relay
   1944                pBeaconIndBuf = NULL;
   \   00010D   90....       MOV     DPTR,#pBeaconIndBuf
   \   000110   E4           CLR     A
   \   000111   F0           MOVX    @DPTR,A
   \   000112   A3           INC     DPTR
   \                     ??MT_ZdoBeaconIndCB_3:
   \   000113   F0           MOVX    @DPTR,A
   1945              }
   1946            }
   1947          
   1948            return NULL;
   \                     ??MT_ZdoBeaconIndCB_2:
   \   000114   7A00         MOV     R2,#0x0
   \   000116   7B00         MOV     R3,#0x0
   \   000118   02....       LJMP    ??Subroutine132_0 & 0xFFFF
   1949          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   90....       MOV     DPTR,#pBeaconIndBuf
   \   000003   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000006   FD           MOV     R5,A
   \   000007   75F015       MOV     B,#0x15
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   F8           MOV     R0,A
   \   000001   EF           MOV     A,R7
   \   000002                REQUIRE ??Subroutine125_0
   \   000002                ; // Fall through to label ??Subroutine125_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine125_0:
   \   000000   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   90....       MOV     DPTR,#pBeaconIndBuf
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F8           MOV     R0,A
   \   000005   A3           INC     DPTR
   \   000006                REQUIRE ??Subroutine126_0
   \   000006                ; // Fall through to label ??Subroutine126_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine126_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   90....       MOV     DPTR,#pBeaconIndBuf
   \   000003                REQUIRE ??Subroutine127_0
   \   000003                ; // Fall through to label ??Subroutine127_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine127_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000006                REQUIRE ??Subroutine128_0
   \   000006                ; // Fall through to label ??Subroutine128_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine128_0:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003   EE           MOV     A,R6
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0A           INC     R2
   \   000008   AB83         MOV     R3,DPH
   \   00000A   22           RET
   1950          
   1951          
   1952          
   1953          /***************************************************************************************************
   1954           * @fn          MT_ZdoJoinCnfCB
   1955           *
   1956           * @brief       Handle the ZDO Join Confirm from ZDO
   1957           *
   1958           * @param       pStr - pointer to a parameter and a structure of parameters
   1959           *
   1960           * @return      void
   1961           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1962          void *MT_ZdoJoinCnfCB ( void *pStr )
   \                     MT_ZdoJoinCnfCB:
   1963          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1964            /* pStr: zdoJoinCnf_t* */
   1965            /* Packet Format */
   1966            /* Status (1) | device addr (2) | parent addr (2) */
   1967          
   1968            uint8 buf[MT_ZDO_JOIN_CNF_LEN];
   1969            zdoJoinCnf_t *joinCnf = pStr;
   1970          
   1971            /* Join Complete. De-register the callback with ZDO */
   1972            ZDO_DeregisterForZdoCB( ZDO_JOIN_CNF_CBID );
   \   00000E                ; Setup parameters for call to function ZDO_DeregisterForZdoCB
   \   00000E   7904         MOV     R1,#0x4
   \   000010   12....       LCALL   ??ZDO_DeregisterForZdoCB?relay
   1973          
   1974            buf[0] = joinCnf->status;
   \   000013   12....       LCALL   ?Subroutine36 & 0xFFFF
   1975            buf[1] = LO_UINT16( joinCnf->deviceAddr );
   \                     ??CrossCallReturnLabel_44:
   \   000016   A882         MOV     R0,DPL
   \   000018   A983         MOV     R1,DPH
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   C0E0         PUSH    A
   \   00001D   7401         MOV     A,#0x1
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   D0E0         POP     A
   \   000024   F0           MOVX    @DPTR,A
   1976            buf[2] = HI_UINT16( joinCnf->deviceAddr );
   \   000025   8882         MOV     DPL,R0
   \   000027   8983         MOV     DPH,R1
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   C0E0         PUSH    A
   \   00002D   7402         MOV     A,#0x2
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   D0E0         POP     A
   \   000034   F0           MOVX    @DPTR,A
   1977            buf[3] = LO_UINT16( joinCnf->parentAddr );
   \   000035   EE           MOV     A,R6
   \   000036   2403         ADD     A,#0x3
   \   000038   F8           MOV     R0,A
   \   000039   EF           MOV     A,R7
   \   00003A   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   00003D   C0E0         PUSH    A
   \   00003F   7403         MOV     A,#0x3
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   D0E0         POP     A
   \   000046   F0           MOVX    @DPTR,A
   1978            buf[4] = HI_UINT16( joinCnf->parentAddr );
   \   000047   8882         MOV     DPL,R0
   \   000049   8983         MOV     DPH,R1
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   C0E0         PUSH    A
   \   00004F   7404         MOV     A,#0x4
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   D0E0         POP     A
   \   000056   12....       LCALL   ?Subroutine59 & 0xFFFF
   1979          
   1980            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   1981                                         MT_ZDO_JOIN_CNF, MT_ZDO_JOIN_CNF_LEN, buf);
   \                     ??CrossCallReturnLabel_82:
   \   000059   7B05         MOV     R3,#0x5
   \   00005B   7AC6         MOV     R2,#-0x3a
   \   00005D   7945         MOV     R1,#0x45
   \   00005F   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   1982          
   1983            return NULL;
   \   000062   7A00         MOV     R2,#0x0
   \   000064   7B00         MOV     R3,#0x0
   \   000066   7405         MOV     A,#0x5
   \   000068   02....       LJMP    ??Subroutine106_0 & 0xFFFF
   1984          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AC82         MOV     R4,DPL
   \   000009   AD83         MOV     R5,DPH
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET
   1985          
   1986          /*************************************************************************************************
   1987           * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
   1988           *
   1989           * @brief   MT proxy for ZDO_RegisterForZDOMsg.
   1990           *
   1991           * @param   pBuf  - MT message data
   1992           *
   1993           * @return  void
   1994           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1995          void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
   \                     MT_ZdoRegisterForZDOMsg:
   1996          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1997            uint8 cmd0, cmd1, tmp;
   1998            uint16 cId;
   1999          
   2000            /* parse header */
   2001            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   12....       LCALL   ?Subroutine13 & 0xFFFF
   2002            cmd1 = pBuf[MT_RPC_POS_CMD1];
   2003            pBuf += MT_RPC_FRAME_HDR_SZ;
   2004          
   2005            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   2006            tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
   \                     ??CrossCallReturnLabel_0:
   \   00000D   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
   \   000010   12....       LCALL   ?Subroutine65 & 0xFFFF
   2007          
   2008            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??CrossCallReturnLabel_106:
   \   000013   700D         JNZ     ??MT_ZdoRegisterForZDOMsg_0
   2009            {
   2010              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   \   000015                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000015   AC82         MOV     R4,DPL
   \   000017   AD83         MOV     R5,DPH
   \   000019   7B01         MOV     R3,#0x1
   \   00001B   EE           MOV     A,R6
   \   00001C   FA           MOV     R2,A
   \   00001D   7965         MOV     R1,#0x65
   \   00001F   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   2011            }
   2012          }
   \                     ??MT_ZdoRegisterForZDOMsg_0:
   \   000022   02....       LJMP    ??Subroutine101_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FF           MOV     R7,A
   \   000007   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   00000A                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00000A                ; Setup parameters for call to function ZDO_RemoveRegisteredCB
   \   00000A   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   00000D   FA           MOV     R2,A
   \   00000E   E4           CLR     A
   \   00000F   39           ADDC    A,R1
   \   000010   FB           MOV     R3,A
   \   000011   90....       MOV     DPTR,#MT_TaskID
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   22           RET
   2013          
   2014          /*************************************************************************************************
   2015           * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
   2016           *
   2017           * @brief   MT proxy for ZDO_RemoveRegisteredCB.
   2018           *
   2019           * @param   pBuf  - MT message data
   2020           *
   2021           * @return  void
   2022           *************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2023          void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
   \                     MT_ZdoRemoveRegisteredCB:
   2024          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2025            uint8 cmd0, cmd1, tmp;
   2026            uint16 cId;
   2027          
   2028            /* parse header */
   2029            cmd0 = pBuf[MT_RPC_POS_CMD0];
   \   00000A   12....       LCALL   ?Subroutine13 & 0xFFFF
   2030            cmd1 = pBuf[MT_RPC_POS_CMD1];
   2031            pBuf += MT_RPC_FRAME_HDR_SZ;
   2032          
   2033            cId = BUILD_UINT16(pBuf[0], pBuf[1]);
   2034            tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
   \                     ??CrossCallReturnLabel_1:
   \   00000D   12....       LCALL   ??ZDO_RemoveRegisteredCB?relay
   \   000010   12....       LCALL   ?Subroutine65 & 0xFFFF
   2035          
   2036            if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
   \                     ??CrossCallReturnLabel_107:
   \   000013   700D         JNZ     ??MT_ZdoRemoveRegisteredCB_0
   2037            {
   2038              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
   \   000015                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000015   AC82         MOV     R4,DPL
   \   000017   AD83         MOV     R5,DPH
   \   000019   7B01         MOV     R3,#0x1
   \   00001B   EE           MOV     A,R6
   \   00001C   FA           MOV     R2,A
   \   00001D   7965         MOV     R1,#0x65
   \   00001F   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   2039            }
   2040          }
   \                     ??MT_ZdoRemoveRegisteredCB_0:
   \   000022   02....       LJMP    ??Subroutine101_0 & 0xFFFF
   2041          
   2042          #endif /* MT_ZDO_FUNC */
   2043          
   2044          
   2045          /***************************************************************************************************
   2046           * Callback handling function
   2047           ***************************************************************************************************/
   2048          
   2049          #if defined (MT_ZDO_CB_FUNC)
   2050          
   2051          /***************************************************************************************************
   2052           * @fn      MT_ZdoStateChangeCB
   2053           *
   2054           * @brief   Handle state change OSAL message from ZDO.
   2055           *
   2056           * @param   pMsg  - Message data
   2057           *
   2058           * @return  void
   2059           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2060          void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
   \                     MT_ZdoStateChangeCB:
   2061          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2062            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2063                                                 MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
   \   000004                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   AC82         MOV     R4,DPL
   \   00000B   AD83         MOV     R5,DPH
   \   00000D   7B01         MOV     R3,#0x1
   \   00000F   7AC0         MOV     R2,#-0x40
   \   000011   7945         MOV     R1,#0x45
   \   000013   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   2064          }
   \   000016   02....       LJMP    ?Subroutine0 & 0xFFFF
   2065          
   2066          /***************************************************************************************************
   2067           * @fn     MT_ZdoDirectCB()
   2068           *
   2069           * @brief  ZDO direct callback.  Build an MT message directly from the
   2070           *         over-the-air ZDO message.
   2071           *
   2072           * @param  pData - Incoming AF frame.
   2073           *
   2074           * @return  none
   2075           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2076          void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   \                     MT_ZdoDirectCB:
   2077          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2078            uint8 len, *pBuf;
   2079            uint16 origClusterId;
   2080          
   2081            // save original value because MT_ZdoHandleExceptions() function could modify pData->clusterId
   2082            origClusterId = pData->clusterId;
   \   000009   EE           MOV     A,R6
   \   00000A   2404         ADD     A,#0x4
   \   00000C   F5..         MOV     ?V0 + 2,A
   \   00000E   EF           MOV     A,R7
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F5..         MOV     ?V0 + 3,A
   \   000013   85..82       MOV     DPL,?V0 + 2
   \   000016   F583         MOV     DPH,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V0 + 1,A
   2083          
   2084            // Is the message an exception or not a response?
   2085            if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (origClusterId & ZDO_RESPONSE_BIT) == 0 ) )
   \   00001C                ; Setup parameters for call to function MT_ZdoHandleExceptions
   \   00001C   12....       LCALL   ??MT_ZdoHandleExceptions?relay
   \   00001F   E9           MOV     A,R1
   \   000020   6003         JZ      $+5
   \   000022   02....       LJMP    ??MT_ZdoDirectCB_0 & 0xFFFF
   \   000025   E5..         MOV     A,?V0 + 1
   \   000027   5480         ANL     A,#0x80
   \   000029   7003         JNZ     $+5
   \   00002B   02....       LJMP    ??MT_ZdoDirectCB_0 & 0xFFFF
   2086            {
   2087              return;  // Handled somewhere else or not needed.
   2088            }
   2089          
   2090            /* ZDO data starts after one-byte sequence number and the msg buffer length includes
   2091             * two bytes for srcAddr.
   2092             */
   2093            len = pData->cmd.DataLength - 1 + sizeof(uint16);
   \   00002E   EE           MOV     A,R6
   \   00002F   2420         ADD     A,#0x20
   \   000031   F5..         MOV     ?V0 + 6,A
   \   000033   EF           MOV     A,R7
   \   000034   3400         ADDC    A,#0x0
   \   000036   F5..         MOV     ?V0 + 7,A
   \   000038   85..82       MOV     DPL,?V0 + 6
   \   00003B   F583         MOV     DPH,A
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   04           INC     A
   \   00003F   F5..         MOV     ?V0 + 4,A
   2094          
   2095            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   \   000041                ; Setup parameters for call to function osal_mem_alloc
   \   000041   FA           MOV     R2,A
   \   000042   7B00         MOV     R3,#0x0
   \   000044   12....       LCALL   ??osal_mem_alloc?relay
   \   000047   8A..         MOV     ?V0 + 0,R2
   \   000049   8B..         MOV     ?V0 + 1,R3
   \   00004B   EA           MOV     A,R2
   \   00004C   45..         ORL     A,?V0 + 1
   \   00004E   6063         JZ      ??MT_ZdoDirectCB_0
   2096            {
   2097              uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
   \   000050   85..82       MOV     DPL,?V0 + 2
   \   000053   85..83       MOV     DPH,?V0 + 3
   \   000056   E0           MOVX    A,@DPTR
   \   000057   4480         ORL     A,#0x80
   \   000059   F5..         MOV     ?V0 + 2,A
   2098          
   2099              pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
   \   00005B   EE           MOV     A,R6
   \   00005C   2406         ADD     A,#0x6
   \   00005E   12....       LCALL   ?Subroutine45 & 0xFFFF
   2100              pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
   \                     ??CrossCallReturnLabel_231:
   \   000061   8882         MOV     DPL,R0
   \   000063   8983         MOV     DPH,R1
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   8A82         MOV     DPL,R2
   \   000069   8B83         MOV     DPH,R3
   \   00006B   A3           INC     DPTR
   \   00006C   F0           MOVX    @DPTR,A
   2101          
   2102              /* copy ZDO data, skipping one-byte sequence number */
   2103              osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
   \   00006D                ; Setup parameters for call to function osal_memcpy
   \   00006D   EE           MOV     A,R6
   \   00006E   2422         ADD     A,#0x22
   \   000070   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000073   2401         ADD     A,#0x1
   \   000075   F5..         MOV     ?V0 + 8,A
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   3400         ADDC    A,#0x0
   \   00007B   F5..         MOV     ?V0 + 9,A
   \   00007D   75..00       MOV     ?V0 + 10,#0x0
   \   000080   78..         MOV     R0,#?V0 + 8
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000085   85..82       MOV     DPL,?V0 + 6
   \   000088   85..83       MOV     DPH,?V0 + 7
   \   00008B   E0           MOVX    A,@DPTR
   \   00008C   24FF         ADD     A,#-0x1
   \   00008E   FC           MOV     R4,A
   \   00008F   A3           INC     DPTR
   \   000090   E0           MOVX    A,@DPTR
   \   000091   34FF         ADDC    A,#-0x1
   \   000093   FD           MOV     R5,A
   \   000094   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000097   12....       LCALL   ??osal_memcpy?relay
   \   00009A   7403         MOV     A,#0x3
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
   2104          
   2105              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   \   00009F                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00009F   AC..         MOV     R4,?V0 + 0
   \   0000A1   AD..         MOV     R5,?V0 + 1
   \   0000A3   AB..         MOV     R3,?V0 + 4
   \   0000A5   AA..         MOV     R2,?V0 + 2
   \   0000A7   7945         MOV     R1,#0x45
   \   0000A9   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   2106              osal_mem_free(pBuf);
   \   0000AC                ; Setup parameters for call to function osal_mem_free
   \   0000AC   AA..         MOV     R2,?V0 + 0
   \   0000AE   AB..         MOV     R3,?V0 + 1
   \   0000B0   12....       LCALL   ??osal_mem_free?relay
   2107            }
   \                     ??MT_ZdoDirectCB_0:
   \   0000B3                REQUIRE ?Subroutine6
   \   0000B3                ; // Fall through to label ?Subroutine6
   2108          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F0B         MOV     R7,#0xb
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   2109          
   2110          /***************************************************************************************************
   2111           * @fn     MT_ZdoHandleExceptions()
   2112           *
   2113           * @brief  Handles all messages that are an exception to the generic MT ZDO Response.
   2114           *
   2115           * @param  pData - Incoming AF frame.
   2116           *
   2117           * @return  TRUE if handled by this function, FALSE if not
   2118           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2119          uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
   \                     MT_ZdoHandleExceptions:
   2120          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   2121            uint8 ret = TRUE;
   \   00000E   75..01       MOV     ?V0 + 2,#0x1
   2122            ZDO_NwkIEEEAddrResp_t *nwkRsp;
   2123            ZDO_DeviceAnnce_t devAnnce;
   2124            uint8 doDefault = FALSE;
   2125          
   2126            switch ( inMsg->clusterID )
   \   000011   EE           MOV     A,R6
   \   000012   240C         ADD     A,#0xc
   \   000014   F8           MOV     R0,A
   \   000015   EF           MOV     A,R7
   \   000016   3400         ADDC    A,#0x0
   \   000018   F9           MOV     R1,A
   \   000019   88..         MOV     ?V0 + 0,R0
   \   00001B   89..         MOV     ?V0 + 1,R1
   \   00001D   8882         MOV     DPL,R0
   \   00001F   F583         MOV     DPH,A
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F5..         MOV     ?V0 + 4,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F5..         MOV     ?V0 + 5,A
   \   000028   78..         MOV     R0,#?V0 + 4
   \   00002A   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for MT_ZdoHandleExceptions>_0`:
   \   00002D   0100         DW        1
   \   00002F   0080         DW        32768
   \   000031   0180         DW        32769
   \   000033   ....         DW        ??MT_ZdoHandleExceptions_0
   \   000035   0200         DW        2
   \   000037   1300         DW        19
   \   000039   ....         DW        ??MT_ZdoHandleExceptions_1
   \   00003B   0480         DW        32772
   \   00003D   ....         DW        ??MT_ZdoHandleExceptions_2
   \   00003F   ....         DW        ??MT_ZdoHandleExceptions_3
   2127            {
   2128              case NWK_addr_rsp:
   2129              case IEEE_addr_rsp:
   2130                if ( NULL != (nwkRsp = ZDO_ParseAddrRsp(inMsg)) )
   \                     ??MT_ZdoHandleExceptions_0:
   \   000041                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   000041   EE           MOV     A,R6
   \   000042   FA           MOV     R2,A
   \   000043   EF           MOV     A,R7
   \   000044   FB           MOV     R3,A
   \   000045   12....       LCALL   ??ZDO_ParseAddrRsp?relay
   \   000048   8A..         MOV     ?V0 + 4,R2
   \   00004A   8B..         MOV     ?V0 + 5,R3
   \   00004C   AE..         MOV     R6,?V0 + 4
   \   00004E   AF..         MOV     R7,?V0 + 5
   \   000050   EE           MOV     A,R6
   \   000051   4F           ORL     A,R7
   \   000052   607D         JZ      ??MT_ZdoHandleExceptions_4
   2131                {
   2132                  if ( nwkRsp->status == ZDO_SUCCESS )
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   E0           MOVX    A,@DPTR
   \   000059   700D         JNZ     ??MT_ZdoHandleExceptions_5
   2133                  {
   2134                    MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
   \   00005B                ; Setup parameters for call to function MT_ZdoAddrRspCB
   \   00005B   85..82       MOV     DPL,?V0 + 0
   \   00005E   85..83       MOV     DPH,?V0 + 1
   \   000061   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   2135                  }
   \                     ??CrossCallReturnLabel_211:
   \   000064   FD           MOV     R5,A
   \   000065   12....       LCALL   ??MT_ZdoAddrRspCB?relay
   2136                  osal_mem_free( nwkRsp );
   \                     ??MT_ZdoHandleExceptions_5:
   \   000068                ; Setup parameters for call to function osal_mem_free
   \   000068   EE           MOV     A,R6
   \   000069   FA           MOV     R2,A
   \   00006A   EF           MOV     A,R7
   \   00006B   FB           MOV     R3,A
   \   00006C   12....       LCALL   ??osal_mem_free?relay
   \   00006F   8060         SJMP    ??MT_ZdoHandleExceptions_4
   2137                }
   2138                break;
   2139          
   2140              case Device_annce:
   2141                ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
   \                     ??MT_ZdoHandleExceptions_1:
   \   000071                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   000071   85..82       MOV     DPL,?XSP + 0
   \   000074   85..83       MOV     DPH,?XSP + 1
   \   000077   AC82         MOV     R4,DPL
   \   000079   AD83         MOV     R5,DPH
   \   00007B   EE           MOV     A,R6
   \   00007C   FA           MOV     R2,A
   \   00007D   EF           MOV     A,R7
   \   00007E   FB           MOV     R3,A
   \   00007F   12....       LCALL   ??ZDO_ParseDeviceAnnce?relay
   2142                MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
   \   000082                ; Setup parameters for call to function MT_ZdoEndDevAnnceCB
   \   000082   8E82         MOV     DPL,R6
   \   000084   8F83         MOV     DPH,R7
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   00008B   FD           MOV     R5,A
   \   00008C   85..82       MOV     DPL,?XSP + 0
   \   00008F   85..83       MOV     DPH,?XSP + 1
   \   000092   AA82         MOV     R2,DPL
   \   000094   AB83         MOV     R3,DPH
   \   000096   12....       LCALL   ??MT_ZdoEndDevAnnceCB?relay
   2143                break;
   \   000099   8036         SJMP    ??MT_ZdoHandleExceptions_4
   2144          
   2145              case Simple_Desc_rsp:
   2146                if ( pData->cmd.DataLength > 5 )
   \                     ??MT_ZdoHandleExceptions_2:
   \   00009B   EA           MOV     A,R2
   \   00009C   2420         ADD     A,#0x20
   \   00009E   F8           MOV     R0,A
   \   00009F   EB           MOV     A,R3
   \   0000A0   3400         ADDC    A,#0x0
   \   0000A2   F9           MOV     R1,A
   \   0000A3   8882         MOV     DPL,R0
   \   0000A5   8983         MOV     DPH,R1
   \   0000A7   C3           CLR     C
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   9406         SUBB    A,#0x6
   \   0000AB   A3           INC     DPTR
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   9400         SUBB    A,#0x0
   \   0000AF   501D         JNC     ??MT_ZdoHandleExceptions_3
   2147                {
   2148                  ret = FALSE;
   2149                }
   2150                else
   2151                {
   2152                  doDefault = TRUE;
   2153                }
   2154                break;
   2155          
   2156              default:
   2157                ret = FALSE;
   2158                break;
   2159            }
   2160          
   2161            if ( doDefault )
   2162            {
   2163              ret = FALSE;
   \   0000B1   75..00       MOV     ?V0 + 2,#0x0
   2164              pData->clusterId = MtZdoDef_rsp;
   \   0000B4   8A82         MOV     DPL,R2
   \   0000B6   8B83         MOV     DPH,R3
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   7440         MOV     A,#0x40
   \   0000BE   F0           MOVX    @DPTR,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   E4           CLR     A
   \   0000C1   F0           MOVX    @DPTR,A
   2165              pData->cmd.DataLength = 2;
   \   0000C2   8882         MOV     DPL,R0
   \   0000C4   8983         MOV     DPH,R1
   \   0000C6   7402         MOV     A,#0x2
   \   0000C8   F0           MOVX    @DPTR,A
   \   0000C9   A3           INC     DPTR
   \   0000CA   E4           CLR     A
   \   0000CB   F0           MOVX    @DPTR,A
   \   0000CC   8003         SJMP    ??MT_ZdoHandleExceptions_4
   2166            }
   \                     ??MT_ZdoHandleExceptions_3:
   \   0000CE   75..00       MOV     ?V0 + 2,#0x0
   2167          
   2168            return ( ret );
   \                     ??MT_ZdoHandleExceptions_4:
   \   0000D1   A9..         MOV     R1,?V0 + 2
   \   0000D3   740B         MOV     A,#0xb
   \   0000D5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D8   7F06         MOV     R7,#0x6
   \   0000DA   02....       LJMP    ?BANKED_LEAVE_XDATA
   2169          }
   2170          
   2171          /***************************************************************************************************
   2172           * @fn      MT_ZdoAddrRspCB
   2173           *
   2174           * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
   2175           *
   2176           * @param   pMsg  - Message data
   2177           *
   2178           * @return  void
   2179           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2180          void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
   \                     MT_ZdoAddrRspCB:
   2181          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 2,R4
   2182            uint8   listLen, len, *pBuf;
   2183          
   2184            /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
   2185          
   2186            /* get length, sanity check length */
   2187            listLen = pMsg->numAssocDevs;
   \   00000B   EA           MOV     A,R2
   \   00000C   240B         ADD     A,#0xb
   \   00000E   F582         MOV     DPL,A
   \   000010   EB           MOV     A,R3
   \   000011   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000014   F5..         MOV     ?V0 + 4,A
   2188          
   2189            /* calculate msg length */
   2190            len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
   \   000016   C3           CLR     C
   \   000017   33           RLC     A
   \   000018   240D         ADD     A,#0xd
   \   00001A   F5..         MOV     ?V0 + 5,A
   2191          
   2192            /* get buffer */
   2193            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   \   00001C                ; Setup parameters for call to function osal_mem_alloc
   \   00001C   FA           MOV     R2,A
   \   00001D   7B00         MOV     R3,#0x0
   \   00001F   12....       LCALL   ??osal_mem_alloc?relay
   \   000022   8A..         MOV     ?V0 + 6,R2
   \   000024   8B..         MOV     ?V0 + 7,R3
   \   000026   EA           MOV     A,R2
   \   000027   45..         ORL     A,?V0 + 7
   \   000029   7003         JNZ     $+5
   \   00002B   02....       LJMP    ??MT_ZdoAddrRspCB_0 & 0xFFFF
   2194            {
   2195              uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
   2196              uint8 *pTmp = pBuf;
   \   00002E   AE..         MOV     R6,?V0 + 6
   \   000030   AF..         MOV     R7,?V0 + 7
   2197          
   2198              *pTmp++ = pMsg->status;
   \   000032   85..82       MOV     DPL,?V0 + 0
   \   000035   85..83       MOV     DPH,?V0 + 1
   \   000038   E0           MOVX    A,@DPTR
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   AE82         MOV     R6,DPL
   \   000041   AF83         MOV     R7,DPH
   2199          
   2200              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   \   000043                ; Setup parameters for call to function sAddrExtCpy
   \   000043   E5..         MOV     A,?V0 + 0
   \   000045   2403         ADD     A,#0x3
   \   000047   FC           MOV     R4,A
   \   000048   E5..         MOV     A,?V0 + 1
   \   00004A   3400         ADDC    A,#0x0
   \   00004C   FD           MOV     R5,A
   \   00004D   EE           MOV     A,R6
   \   00004E   FA           MOV     R2,A
   \   00004F   EF           MOV     A,R7
   \   000050   FB           MOV     R3,A
   \   000051   12....       LCALL   ??sAddrExtCpy?relay
   2201              pTmp += Z_EXTADDR_LEN;
   \   000054   EE           MOV     A,R6
   \   000055   2408         ADD     A,#0x8
   \   000057   FE           MOV     R6,A
   \   000058   EF           MOV     A,R7
   \   000059   3400         ADDC    A,#0x0
   \   00005B   FF           MOV     R7,A
   2202          
   2203              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   \   00005C   85..82       MOV     DPL,?V0 + 0
   \   00005F   85..83       MOV     DPH,?V0 + 1
   \   000062   A3           INC     DPTR
   \   000063   A882         MOV     R0,DPL
   \   000065   A983         MOV     R1,DPH
   \   000067   12....       LCALL   ??Subroutine130_0 & 0xFFFF
   2204              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   \                     ??CrossCallReturnLabel_254:
   \   00006A   8882         MOV     DPL,R0
   \   00006C   8983         MOV     DPH,R1
   \   00006E   12....       LCALL   ?Subroutine17 & 0xFFFF
   2205          
   2206              *pTmp++ = pMsg->startIndex;
   \                     ??CrossCallReturnLabel_256:
   \   000071   E5..         MOV     A,?V0 + 0
   \   000073   240C         ADD     A,#0xc
   \   000075   F582         MOV     DPL,A
   \   000077   E5..         MOV     A,?V0 + 1
   \   000079   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   00007C   8E82         MOV     DPL,R6
   \   00007E   8F83         MOV     DPH,R7
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   2207              *pTmp++ = listLen;
   \   000082   E5..         MOV     A,?V0 + 4
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   2208          
   2209              MT_Word2Buf(pTmp, pMsg->devList, listLen);
   \   000086                ; Setup parameters for call to function MT_Word2Buf
   \   000086   F9           MOV     R1,A
   \   000087   E5..         MOV     A,?V0 + 0
   \   000089   240D         ADD     A,#0xd
   \   00008B   FC           MOV     R4,A
   \   00008C   E5..         MOV     A,?V0 + 1
   \   00008E   3400         ADDC    A,#0x0
   \   000090   FD           MOV     R5,A
   \   000091   AA82         MOV     R2,DPL
   \   000093   AB83         MOV     R3,DPH
   \   000095   12....       LCALL   ??MT_Word2Buf?relay
   2210          
   2211              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
   \   000098                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000098   AC..         MOV     R4,?V0 + 6
   \   00009A   AD..         MOV     R5,?V0 + 7
   \   00009C   AB..         MOV     R3,?V0 + 5
   \   00009E   E5..         MOV     A,?V0 + 2
   \   0000A0   4480         ORL     A,#0x80
   \   0000A2   FA           MOV     R2,A
   \   0000A3   7945         MOV     R1,#0x45
   \   0000A5   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   2212              osal_mem_free(pBuf);
   \   0000A8                ; Setup parameters for call to function osal_mem_free
   \   0000A8   AA..         MOV     R2,?V0 + 6
   \   0000AA   AB..         MOV     R3,?V0 + 7
   \   0000AC   12....       LCALL   ??osal_mem_free?relay
   2213            }
   2214          }
   \                     ??MT_ZdoAddrRspCB_0:
   \   0000AF   7F0A         MOV     R7,#0xa
   \   0000B1   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine130_0
   \   000001                ; // Fall through to label ??Subroutine130_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine130_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0E           INC     R6
   \   000008   AF83         MOV     R7,DPH
   \   00000A   22           RET
   2215          
   2216          /***************************************************************************************************
   2217           * @fn      MT_ZdoEndDevAnnceCB
   2218           *
   2219           * @brief   Handle end device announce OSAL message from ZDO.
   2220           *
   2221           * @param   pMsg  - Message data
   2222           *
   2223           * @return  void
   2224           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2225          void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
   \                     MT_ZdoEndDevAnnceCB:
   2226          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 2,R2
   \   000007   8B..         MOV     ?V0 + 3,R3
   \   000009   8C..         MOV     ?V0 + 4,R4
   \   00000B   8D..         MOV     ?V0 + 5,R5
   2227            uint8 *pBuf;
   2228          
   2229            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
   \   00000D                ; Setup parameters for call to function osal_mem_alloc
   \   00000D   7A0D         MOV     R2,#0xd
   \   00000F   7B00         MOV     R3,#0x0
   \   000011   12....       LCALL   ??osal_mem_alloc?relay
   \   000014   8A..         MOV     ?V0 + 0,R2
   \   000016   8B..         MOV     ?V0 + 1,R3
   \   000018   EA           MOV     A,R2
   \   000019   45..         ORL     A,?V0 + 1
   \   00001B   6069         JZ      ??MT_ZdoEndDevAnnceCB_0
   2230            {
   2231              uint8 *pTmp = pBuf;
   \   00001D   AE..         MOV     R6,?V0 + 0
   \   00001F   AF..         MOV     R7,?V0 + 1
   2232          
   2233              *pTmp++ = LO_UINT16(srcAddr);
   \   000021   8E82         MOV     DPL,R6
   \   000023   8F83         MOV     DPH,R7
   \   000025   E5..         MOV     A,?V0 + 4
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   2234              *pTmp++ = HI_UINT16(srcAddr);
   \   000029   E5..         MOV     A,?V0 + 5
   \   00002B   F0           MOVX    @DPTR,A
   \   00002C   A3           INC     DPTR
   \   00002D   AE82         MOV     R6,DPL
   \   00002F   AF83         MOV     R7,DPH
   2235          
   2236              *pTmp++ = LO_UINT16(pMsg->nwkAddr);
   \   000031   85..82       MOV     DPL,?V0 + 2
   \   000034   85..83       MOV     DPH,?V0 + 3
   \   000037   12....       LCALL   ??Subroutine130_0 & 0xFFFF
   2237              *pTmp++ = HI_UINT16(pMsg->nwkAddr);
   \                     ??CrossCallReturnLabel_255:
   \   00003A   85..82       MOV     DPL,?V0 + 2
   \   00003D   85..83       MOV     DPH,?V0 + 3
   \   000040   12....       LCALL   ?Subroutine17 & 0xFFFF
   2238          
   2239              osal_cpyExtAddr(pTmp, pMsg->extAddr);
   \                     ??CrossCallReturnLabel_257:
   \   000043                ; Setup parameters for call to function sAddrExtCpy
   \   000043   E5..         MOV     A,?V0 + 2
   \   000045   2402         ADD     A,#0x2
   \   000047   FC           MOV     R4,A
   \   000048   E5..         MOV     A,?V0 + 3
   \   00004A   3400         ADDC    A,#0x0
   \   00004C   FD           MOV     R5,A
   \   00004D   EE           MOV     A,R6
   \   00004E   FA           MOV     R2,A
   \   00004F   EF           MOV     A,R7
   \   000050   FB           MOV     R3,A
   \   000051   12....       LCALL   ??sAddrExtCpy?relay
   2240              pTmp += Z_EXTADDR_LEN;
   2241          
   2242              *pTmp = pMsg->capabilities;
   \   000054   85..82       MOV     DPL,?V0 + 2
   \   000057   85..83       MOV     DPH,?V0 + 3
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   8E82         MOV     DPL,R6
   \   000067   8F83         MOV     DPH,R7
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   F0           MOVX    @DPTR,A
   2243          
   2244              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2245                                                   MT_ZDO_END_DEVICE_ANNCE_IND,
   2246                                                   MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
   \   000072                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000072   AC..         MOV     R4,?V0 + 0
   \   000074   AD..         MOV     R5,?V0 + 1
   \   000076   7B0D         MOV     R3,#0xd
   \   000078   7AC1         MOV     R2,#-0x3f
   \   00007A   7945         MOV     R1,#0x45
   \   00007C   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   2247              osal_mem_free(pBuf);
   \   00007F                ; Setup parameters for call to function osal_mem_free
   \   00007F   AA..         MOV     R2,?V0 + 0
   \   000081   AB..         MOV     R3,?V0 + 1
   \   000083   12....       LCALL   ??osal_mem_free?relay
   2248            }
   2249          }
   \                     ??MT_ZdoEndDevAnnceCB_0:
   \   000086   02....       LJMP    ??Subroutine121_0 & 0xFFFF
   2250          
   2251          /***************************************************************************************************
   2252           * @fn      MT_ZdoSrcRtgCB
   2253           *
   2254           * @brief   Handle Src Route from ZDO.
   2255           *
   2256           * @param   pStr  - pointer to the data structure for the src route
   2257           *
   2258           * @return  void*
   2259           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2260          void* MT_ZdoSrcRtgCB( void *pStr )
   \                     MT_ZdoSrcRtgCB:
   2261          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2262            uint8 len, *pBuf;
   2263            zdoSrcRtg_t *pSrcRtg = pStr;
   2264          
   2265            // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
   2266            len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
   \   000009   EE           MOV     A,R6
   \   00000A   2402         ADD     A,#0x2
   \   00000C   F5..         MOV     ?V0 + 0,A
   \   00000E   EF           MOV     A,R7
   \   00000F   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000012   E0           MOVX    A,@DPTR
   \   000013   C3           CLR     C
   \   000014   33           RLC     A
   \   000015   2403         ADD     A,#0x3
   \   000017   F5..         MOV     ?V0 + 4,A
   2267          
   2268            if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
   \   000019                ; Setup parameters for call to function osal_mem_alloc
   \   000019   FA           MOV     R2,A
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   ??osal_mem_alloc?relay
   \   00001F   8A..         MOV     ?V0 + 2,R2
   \   000021   8B..         MOV     ?V0 + 3,R3
   \   000023   EA           MOV     A,R2
   \   000024   45..         ORL     A,?V0 + 3
   \   000026   6061         JZ      ??MT_ZdoSrcRtgCB_0
   2269            {
   2270              uint8 idx, *pTmp = pBuf;
   \   000028   A8..         MOV     R0,?V0 + 2
   \   00002A   A9..         MOV     R1,?V0 + 3
   2271              uint16 *pRelay;
   2272          
   2273              // Packet payload
   2274              *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   12....       LCALL   ?Subroutine40 & 0xFFFF
   2275              *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
   \                     ??CrossCallReturnLabel_52:
   \   000033   8E82         MOV     DPL,R6
   \   000035   8F83         MOV     DPH,R7
   \   000037   12....       LCALL   ?Subroutine27 & 0xFFFF
   2276              *pTmp++ = pSrcRtg->relayCnt;
   \                     ??CrossCallReturnLabel_259:
   \   00003A   85..82       MOV     DPL,?V0 + 0
   \   00003D   85..83       MOV     DPH,?V0 + 1
   \   000040   12....       LCALL   ??Subroutine131_0 & 0xFFFF
   2277          
   2278              // Relay List
   2279              if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
   \                     ??CrossCallReturnLabel_258:
   \   000043   8E82         MOV     DPL,R6
   \   000045   8F83         MOV     DPH,R7
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   00004D   FB           MOV     R3,A
   \   00004E   EA           MOV     A,R2
   \   00004F   4B           ORL     A,R3
   \   000050   6023         JZ      ??MT_ZdoSrcRtgCB_1
   2280              {
   2281                for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
   \   000052   7E00         MOV     R6,#0x0
   \   000054   8012         SJMP    ??MT_ZdoSrcRtgCB_2
   2282                {
   2283                  *pTmp++ = LO_UINT16(*pRelay);
   \                     ??MT_ZdoSrcRtgCB_3:
   \   000056   8A82         MOV     DPL,R2
   \   000058   8B83         MOV     DPH,R3
   \   00005A   12....       LCALL   ?Subroutine40 & 0xFFFF
   2284                  *pTmp++ = HI_UINT16(*pRelay);
   \                     ??CrossCallReturnLabel_53:
   \   00005D   8A82         MOV     DPL,R2
   \   00005F   8B83         MOV     DPH,R3
   \   000061   12....       LCALL   ?Subroutine27 & 0xFFFF
   2285                  pRelay++;
   \                     ??CrossCallReturnLabel_260:
   \   000064   12....       LCALL   ?Subroutine67 & 0xFFFF
   2286                }
   \                     ??CrossCallReturnLabel_112:
   \   000067   0E           INC     R6
   \                     ??MT_ZdoSrcRtgCB_2:
   \   000068   85..82       MOV     DPL,?V0 + 0
   \   00006B   85..83       MOV     DPH,?V0 + 1
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   FC           MOV     R4,A
   \   000070   EE           MOV     A,R6
   \   000071   C3           CLR     C
   \   000072   9C           SUBB    A,R4
   \   000073   40E1         JC      ??MT_ZdoSrcRtgCB_3
   2287              }
   2288              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2289                                                   MT_ZDO_SRC_RTG_IND, len, pBuf);
   \                     ??MT_ZdoSrcRtgCB_1:
   \   000075                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   000075   AC..         MOV     R4,?V0 + 2
   \   000077   AD..         MOV     R5,?V0 + 3
   \   000079   AB..         MOV     R3,?V0 + 4
   \   00007B   7AC4         MOV     R2,#-0x3c
   \   00007D   7945         MOV     R1,#0x45
   \   00007F   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   2290              osal_mem_free(pBuf);
   \   000082                ; Setup parameters for call to function osal_mem_free
   \   000082   AA..         MOV     R2,?V0 + 2
   \   000084   AB..         MOV     R3,?V0 + 3
   \   000086   12....       LCALL   ??osal_mem_free?relay
   2291            }
   2292          
   2293            return NULL;
   \                     ??MT_ZdoSrcRtgCB_0:
   \   000089   7A00         MOV     R2,#0x0
   \   00008B   7B00         MOV     R3,#0x0
   \   00008D   02....       LJMP    ??Subroutine121_0 & 0xFFFF
   2294          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   A882         MOV     R0,DPL
   \   000009   A983         MOV     R1,DPH
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine131_0
   \   000001                ; // Fall through to label ??Subroutine131_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine131_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   08           INC     R0
   \   000008   A983         MOV     R1,DPH
   \   00000A   22           RET
   2295          
   2296          /***************************************************************************************************
   2297           * @fn          MT_ZdoConcentratorIndCB
   2298           *
   2299           * @brief       Handle the ZDO Concentrator Indication callback from the ZDO.
   2300           *
   2301           * @param       pStr - pointer to a parameter and a structure of parameters
   2302           *
   2303           * @return      NULL
   2304           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2305          static void *MT_ZdoConcentratorIndCB(void *pStr)
   \                     MT_ZdoConcentratorIndCB:
   2306          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2307            uint8 buf[MT_ZDO_CONCENTRATOR_IND_LEN], *pTmp = buf;
   2308            zdoConcentratorInd_t *pInd = (zdoConcentratorInd_t *)pStr;
   2309          
   2310            *pTmp++ = LO_UINT16(pInd->nwkAddr);
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   12....       LCALL   ?Subroutine48 & 0xFFFF
   2311            *pTmp++ = HI_UINT16(pInd->nwkAddr);
   \                     ??CrossCallReturnLabel_67:
   \   000011   8A82         MOV     DPL,R2
   \   000013   8B83         MOV     DPH,R3
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   C0E0         PUSH    A
   \   000019   7401         MOV     A,#0x1
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   D0E0         POP     A
   \   000020   12....       LCALL   ?Subroutine88 & 0xFFFF
   2312            pTmp = osal_memcpy(pTmp, pInd->extAddr, Z_EXTADDR_LEN);
   2313            *pTmp = pInd->pktCost;
   \                     ??CrossCallReturnLabel_139:
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   C0E0         PUSH    A
   \   000028                ; Setup parameters for call to function osal_memcpy
   \   000028   8A82         MOV     DPL,R2
   \   00002A   8B83         MOV     DPH,R3
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F5..         MOV     ?V0 + 0,A
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F5..         MOV     ?V0 + 1,A
   \   000035   75..00       MOV     ?V0 + 2,#0x0
   \   000038   78..         MOV     R0,#?V0 + 0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003D   7C08         MOV     R4,#0x8
   \   00003F   7D00         MOV     R5,#0x0
   \   000041   7405         MOV     A,#0x5
   \   000043   12....       LCALL   ?XSTACK_DISP0_8
   \   000046   AA82         MOV     R2,DPL
   \   000048   AB83         MOV     R3,DPH
   \   00004A   12....       LCALL   ??osal_memcpy?relay
   \   00004D   7403         MOV     A,#0x3
   \   00004F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000052   8A82         MOV     DPL,R2
   \   000054   8B83         MOV     DPH,R3
   \   000056   D0E0         POP     A
   \   000058   12....       LCALL   ?Subroutine59 & 0xFFFF
   2314          
   2315            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2316                                              MT_ZDO_CONCENTRATOR_IND_CB, MT_ZDO_CONCENTRATOR_IND_LEN, buf);
   \                     ??CrossCallReturnLabel_83:
   \   00005B   7B0B         MOV     R3,#0xb
   \   00005D   7AC8         MOV     R2,#-0x38
   \   00005F   7945         MOV     R1,#0x45
   \   000061   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   2317            return NULL;
   \   000064   7A00         MOV     R2,#0x0
   \   000066   7B00         MOV     R3,#0x0
   \   000068   740B         MOV     A,#0xb
   \   00006A   02....       LJMP    ?Subroutine5 & 0xFFFF
   2318          }
   2319          
   2320          /***************************************************************************************************
   2321           * @fn          MT_ZdoLeaveInd
   2322           *
   2323           * @brief       Handle the ZDO Leave Indication callback from the ZDO.
   2324           *
   2325           * @param       vPtr - Pointer to the received Leave Indication message.
   2326           *
   2327           * @return      NULL
   2328           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2329          static void *MT_ZdoLeaveInd(void *vPtr)
   \                     MT_ZdoLeaveInd:
   2330          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 13
   \   000005   74F3         MOV     A,#-0xd
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2331            NLME_LeaveInd_t *pInd = (NLME_LeaveInd_t *)vPtr;
   2332            uint8 buf[sizeof(NLME_LeaveInd_t)];
   2333          
   2334            buf[0] = LO_UINT16(pInd->srcAddr);
   \   00000E   12....       LCALL   ?Subroutine36 & 0xFFFF
   2335            buf[1] = HI_UINT16(pInd->srcAddr);
   \                     ??CrossCallReturnLabel_45:
   \   000011   E0           MOVX    A,@DPTR
   \   000012   C0E0         PUSH    A
   \   000014   7401         MOV     A,#0x1
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   D0E0         POP     A
   \   00001B   F0           MOVX    @DPTR,A
   2336            (void)osal_memcpy(buf+2, pInd->extAddr, Z_EXTADDR_LEN);
   \   00001C                ; Setup parameters for call to function osal_memcpy
   \   00001C   8E82         MOV     DPL,R6
   \   00001E   8F83         MOV     DPH,R7
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A982         MOV     R1,DPL
   \   000024   AA83         MOV     R2,DPH
   \   000026   89..         MOV     ?V0 + 0,R1
   \   000028   8A..         MOV     ?V0 + 1,R2
   \   00002A   75..00       MOV     ?V0 + 2,#0x0
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000032   7C08         MOV     R4,#0x8
   \   000034   7D00         MOV     R5,#0x0
   \   000036   7405         MOV     A,#0x5
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   AA82         MOV     R2,DPL
   \   00003D   AB83         MOV     R3,DPH
   \   00003F   12....       LCALL   ??osal_memcpy?relay
   \   000042   7403         MOV     A,#0x3
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   2337            buf[2+Z_EXTADDR_LEN] = pInd->request;
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   E0           MOVX    A,@DPTR
   \   000056   C0E0         PUSH    A
   \   000058   740A         MOV     A,#0xa
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   D0E0         POP     A
   \   00005F   F0           MOVX    @DPTR,A
   2338            buf[3+Z_EXTADDR_LEN] = pInd->removeChildren;
   \   000060   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000063   C0E0         PUSH    A
   \   000065   740B         MOV     A,#0xb
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   D0E0         POP     A
   \   00006C   F0           MOVX    @DPTR,A
   2339            buf[4+Z_EXTADDR_LEN] = pInd->rejoin;
   \   00006D   EE           MOV     A,R6
   \   00006E   240C         ADD     A,#0xc
   \   000070   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000073   C0E0         PUSH    A
   \   000075   740C         MOV     A,#0xc
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   D0E0         POP     A
   \   00007C   12....       LCALL   ?Subroutine59 & 0xFFFF
   2340          
   2341            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2342                                                 MT_ZDO_LEAVE_IND, 5+Z_EXTADDR_LEN, buf);
   \                     ??CrossCallReturnLabel_84:
   \   00007F   7B0D         MOV     R3,#0xd
   \   000081   7AC9         MOV     R2,#-0x37
   \   000083   7945         MOV     R1,#0x45
   \   000085   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   2343            return NULL;
   \   000088   7A00         MOV     R2,#0x0
   \   00008A   7B00         MOV     R3,#0x0
   \   00008C   740D         MOV     A,#0xd
   \   00008E                REQUIRE ?Subroutine5
   \   00008E                ; // Fall through to label ?Subroutine5
   2344          }
   2345          #endif // MT_ZDO_CB_FUNC
   2346          
   2347          /***************************************************************************************************
   2348           * @fn      MT_ZdoSendMsgCB
   2349           *
   2350           * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
   2351           *
   2352           * @param   pMsg  - Message data
   2353           *
   2354           * @return  void
   2355           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine129_0
   \   000004                ; // Fall through to label ??Subroutine129_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2356          void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
   \                     MT_ZdoSendMsgCB:
   2357          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   2358            uint8 len = pMsg->asduLen + 9;
   \   000009   EA           MOV     A,R2
   \   00000A   2410         ADD     A,#0x10
   \   00000C   F8           MOV     R0,A
   \   00000D   EB           MOV     A,R3
   \   00000E   3400         ADDC    A,#0x0
   \   000010   F9           MOV     R1,A
   \   000011   88..         MOV     ?V0 + 2,R0
   \   000013   89..         MOV     ?V0 + 3,R1
   \   000015   8882         MOV     DPL,R0
   \   000017   F583         MOV     DPH,A
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   2409         ADD     A,#0x9
   \   00001C   F5..         MOV     ?V0 + 4,A
   2359            uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
   \   00001E                ; Setup parameters for call to function osal_mem_alloc
   \   00001E   FA           MOV     R2,A
   \   00001F   7B00         MOV     R3,#0x0
   \   000021   12....       LCALL   ??osal_mem_alloc?relay
   \   000024   8A..         MOV     ?V0 + 6,R2
   \   000026   8B..         MOV     ?V0 + 7,R3
   \   000028   AE..         MOV     R6,?V0 + 6
   \   00002A   AF..         MOV     R7,?V0 + 7
   2360          
   2361            if (pBuf != NULL)
   \   00002C   EE           MOV     A,R6
   \   00002D   4F           ORL     A,R7
   \   00002E   6072         JZ      ??MT_ZdoSendMsgCB_0
   2362            {
   2363              uint8 *pTmp = pBuf;
   2364          
   2365              // Assuming exclusive use of network short addresses.
   2366              *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
   \   000030   E5..         MOV     A,?V0 + 0
   \   000032   2402         ADD     A,#0x2
   \   000034   F8           MOV     R0,A
   \   000035   E5..         MOV     A,?V0 + 1
   \   000037   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   00003A   A3           INC     DPTR
   \   00003B   AA82         MOV     R2,DPL
   \   00003D   12....       LCALL   ??Subroutine133_0 & 0xFFFF
   2367              *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
   2368              *pTmp++ = pMsg->wasBroadcast;
   \                     ??CrossCallReturnLabel_263:
   \   000040   240B         ADD     A,#0xb
   \   000042   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000045   12....       LCALL   ??Subroutine134_0 & 0xFFFF
   2369              *pTmp++ = LO_UINT16(pMsg->clusterID);
   \                     ??CrossCallReturnLabel_264:
   \   000048   240C         ADD     A,#0xc
   \   00004A   12....       LCALL   ?Subroutine12 & 0xFFFF
   2370              *pTmp++ = HI_UINT16(pMsg->clusterID);
   2371              *pTmp++ = pMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_261:
   \   00004D   240E         ADD     A,#0xe
   \   00004F   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000052   12....       LCALL   ??Subroutine134_0 & 0xFFFF
   2372              *pTmp++ = pMsg->TransSeq;
   \                     ??CrossCallReturnLabel_265:
   \   000055   240F         ADD     A,#0xf
   \   000057   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   00005A   12....       LCALL   ??Subroutine134_0 & 0xFFFF
   2373              // Skipping asduLen since it can be deduced from the RPC packet length.
   2374              *pTmp++ = LO_UINT16(pMsg->macDestAddr);
   \                     ??CrossCallReturnLabel_266:
   \   00005D   2411         ADD     A,#0x11
   \   00005F   12....       LCALL   ?Subroutine12 & 0xFFFF
   2375              *pTmp++ = HI_UINT16(pMsg->macDestAddr);
   2376              (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
   \                     ??CrossCallReturnLabel_262:
   \   000062   2413         ADD     A,#0x13
   \   000064   F582         MOV     DPL,A
   \   000066   E5..         MOV     A,?V0 + 1
   \   000068   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   00006B   F5..         MOV     ?V0 + 0,A
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   85....       MOV     ?V0 + 8,?V0 + 0
   \   000072   F5..         MOV     ?V0 + 9,A
   \   000074   75..00       MOV     ?V0 + 10,#0x0
   \   000077   78..         MOV     R0,#?V0 + 8
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00007C   85..82       MOV     DPL,?V0 + 2
   \   00007F   85..83       MOV     DPH,?V0 + 3
   \   000082   E0           MOVX    A,@DPTR
   \   000083   FC           MOV     R4,A
   \   000084   7D00         MOV     R5,#0x0
   \   000086   12....       LCALL   ??osal_memcpy?relay
   \   000089   7403         MOV     A,#0x3
   \   00008B   12....       LCALL   ?DEALLOC_XSTACK8
   2377          
   2378              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2379                                                   MT_ZDO_MSG_CB_INCOMING, len, pBuf);
   \   00008E                ; Setup parameters for call to function MT_BuildAndSendZToolResponse
   \   00008E   EE           MOV     A,R6
   \   00008F   FC           MOV     R4,A
   \   000090   EF           MOV     A,R7
   \   000091   FD           MOV     R5,A
   \   000092   AB..         MOV     R3,?V0 + 4
   \   000094   7AFF         MOV     R2,#-0x1
   \   000096   7945         MOV     R1,#0x45
   \   000098   12....       LCALL   ??MT_BuildAndSendZToolResponse?relay
   2380          
   2381              osal_mem_free(pBuf);
   \   00009B                ; Setup parameters for call to function osal_mem_free
   \   00009B   EE           MOV     A,R6
   \   00009C   FA           MOV     R2,A
   \   00009D   EF           MOV     A,R7
   \   00009E   FB           MOV     R3,A
   \   00009F   12....       LCALL   ??osal_mem_free?relay
   2382            }
   2383          }
   \                     ??MT_ZdoSendMsgCB_0:
   \   0000A2   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F8           MOV     R0,A
   \   000001   E5..         MOV     A,?V0 + 1
   \   000003   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000006   A3           INC     DPTR
   \   000007   0A           INC     R2
   \   000008                REQUIRE ??Subroutine133_0
   \   000008                ; // Fall through to label ??Subroutine133_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine133_0:
   \   000000   AB83         MOV     R3,DPH
   \   000002   8882         MOV     DPL,R0
   \   000004   8983         MOV     DPH,R1
   \   000006   A3           INC     DPTR
   \   000007                REQUIRE ??Subroutine134_0
   \   000007                ; // Fall through to label ??Subroutine134_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine134_0:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000003                ; Setup parameters for call to function osal_memcpy
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoCommandProcessing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoCommandProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoNWKAddressRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNWKAddressRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoIEEEAddrRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoIEEEAddrRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoNodeDescRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNodeDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoPowerDescRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoPowerDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoSimpleDescRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSimpleDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoActiveEpRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoActiveEpRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoMatchDescRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMatchDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoComplexDescRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoComplexDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoUserDescRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUserDescRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoEndDevAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDevAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoUserDescSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoServiceDiscRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoServiceDiscRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoEndDeviceTimeoutRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDeviceTimeoutRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoEndDevBindRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDevBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoBindRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoUnbindRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoUnbindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoMgmtNwkDiscRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMgmtNwkDiscRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoMgmtLqiRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMgmtLqiRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoMgmtRtgRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMgmtRtgRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoMgmtBindRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMgmtBindRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoMgmtLeaveRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMgmtLeaveRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoMgmtDirectJoinRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMgmtDirectJoinRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoMgmtPermitJoinRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMgmtPermitJoinRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoMgmtNwkUpdateRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoMgmtNwkUpdateRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoSendData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoNwkAddrOfInterestReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNwkAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoStartupFromApp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoStartupFromApp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoNetworkDiscoveryReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoNwkDiscoveryCnfCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoNwkDiscoveryCnfCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoBeaconIndCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoBeaconIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoJoinCnfCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoJoinCnfCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoRegisterForZDOMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoRegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoRemoveRegisteredCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoRemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoStateChangeCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoStateChangeCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoDirectCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoDirectCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoHandleExceptions?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoHandleExceptions

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoAddrRspCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoAddrRspCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoEndDevAnnceCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoEndDevAnnceCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoSrcRtgCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSrcRtgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoConcentratorIndCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoConcentratorIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoLeaveInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoLeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ZdoSendMsgCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ZdoSendMsgCB
   2384          
   2385          #if defined ( MT_ZDO_EXTENSIONS )
   2386          /***************************************************************************************************
   2387           * @fn          MT_ZdoSecAddLinkKey
   2388           *
   2389           * @brief       Handle the ZDO Security Add Link Key extension message
   2390           *
   2391           * @param       pBuf - Pointer to the received message data.
   2392           *
   2393           * @return      NULL
   2394           ***************************************************************************************************/
   2395          static void MT_ZdoSecAddLinkKey( uint8 *pBuf )
   2396          {
   2397            uint16 shortAddr;
   2398            uint8 *pExtAddr;
   2399            uint8 status;
   2400          
   2401            shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2402            pBuf += 2;
   2403            pExtAddr = pBuf;
   2404            pBuf += Z_EXTADDR_LEN;
   2405          
   2406            status = ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pBuf );
   2407          
   2408            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2409                                                 MT_ZDO_SEC_ADD_LINK_KEY, 1, &status );
   2410          }
   2411          
   2412          /***************************************************************************************************
   2413           * @fn          MT_ZdoSecEntryLookupExt
   2414           *
   2415           * @brief       Handle the ZDO Security Entry Lookup Extended extension message
   2416           *
   2417           * @param       pBuf - Pointer to the received message data.
   2418           *
   2419           * @return      NULL
   2420           ***************************************************************************************************/
   2421          static void MT_ZdoSecEntryLookupExt( uint8 *pBuf )
   2422          {
   2423            ZDSecMgrEntry_t *pEntry = NULL;
   2424            uint8 buf[6] = {0};
   2425          
   2426            // lookup entry index for specified EXT address
   2427            buf[0] = ZDSecMgrEntryLookupExt( pBuf, &pEntry );
   2428            if ( pEntry )
   2429            {
   2430              buf[1] = LO_UINT16( pEntry->ami );
   2431              buf[2] = HI_UINT16( pEntry->ami );
   2432              buf[3] = LO_UINT16( pEntry->keyNvId );
   2433              buf[4] = HI_UINT16( pEntry->keyNvId );
   2434              buf[5] = (uint8)pEntry->authenticateOption;
   2435            }
   2436          
   2437            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2438                                                 MT_ZDO_SEC_ENTRY_LOOKUP_EXT, 6, buf );
   2439          }
   2440          
   2441          /***************************************************************************************************
   2442           * @fn          MT_ZdoSecDeviceRemove
   2443           *
   2444           * @brief       Handle the ZDO Security Remove Device extension message
   2445           *
   2446           * @param       pBuf - Pointer to the received message data.
   2447           *
   2448           * @return      NULL
   2449           ***************************************************************************************************/
   2450          static void MT_ZdoSecDeviceRemove( uint8 *pBuf )
   2451          {
   2452            ZStatus_t status;
   2453          
   2454            // lookup entry index for specified EXT address
   2455            status = ZDSecMgrDeviceRemoveByExtAddr( pBuf );
   2456          
   2457            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2458                                                 MT_ZDO_SEC_DEVICE_REMOVE, 1, &status );
   2459          }
   2460          
   2461          /***************************************************************************************************
   2462           * @fn          MT_ZdoExtRouteDisc
   2463           *
   2464           * @brief       Handle the ZDO Route Discovery extension message
   2465           *
   2466           * @param       pBuf - Pointer to the received message data.
   2467           *
   2468           * @return      NULL
   2469           ***************************************************************************************************/
   2470          static void MT_ZdoExtRouteDisc( uint8 *pBuf )
   2471          {
   2472            ZStatus_t status;
   2473            uint16 dstAddr;
   2474          
   2475            dstAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2476          
   2477            // lookup entry index for specified EXT address
   2478            status = NLME_RouteDiscoveryRequest( dstAddr, pBuf[2], pBuf[3] );
   2479          
   2480          
   2481            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2482                                                 MT_ZDO_EXT_ROUTE_DISC, 1, &status );
   2483          }
   2484          
   2485          /***************************************************************************************************
   2486           * @fn          MT_ZdoExtRouteCheck
   2487           *
   2488           * @brief       Handle the ZDO Route Check extension message
   2489           *
   2490           * @param       pBuf - Pointer to the received message data.
   2491           *
   2492           * @return      NULL
   2493           ***************************************************************************************************/
   2494          static void MT_ZdoExtRouteCheck( uint8 *pBuf )
   2495          {
   2496            ZStatus_t status;
   2497            uint16 dstAddr;
   2498          
   2499            dstAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
   2500          
   2501            // lookup entry index for specified EXT address
   2502            status = RTG_CheckRtStatus( dstAddr, pBuf[2], pBuf[3] );
   2503          
   2504            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2505                                                 MT_ZDO_EXT_ROUTE_CHECK, 1, &status );
   2506          }
   2507          
   2508          /***************************************************************************************************
   2509           * @fn          MT_ZdoExtRemoveGroup
   2510           *
   2511           * @brief       Handle the ZDO extension Remove Group message
   2512           *
   2513           * @param       pBuf - Pointer to the received message data.
   2514           *
   2515           * @return      NULL
   2516           ***************************************************************************************************/
   2517          static void MT_ZdoExtRemoveGroup( uint8 *pBuf )
   2518          {
   2519            ZStatus_t status;
   2520            uint8 endpoint;
   2521            uint16 groupID;
   2522          
   2523            endpoint = *pBuf++;
   2524            groupID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2525          
   2526            if ( aps_RemoveGroup( endpoint, groupID ) )
   2527            {
   2528              status = ZSuccess;
   2529            }
   2530            else
   2531            {
   2532              status = ZFailure;
   2533            }
   2534          
   2535            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2536                                                 MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
   2537          }
   2538          
   2539          /***************************************************************************************************
   2540           * @fn          MT_ZdoExtRemoveAllGroup
   2541           *
   2542           * @brief       Handle the ZDO extension Remove All Groups message
   2543           *
   2544           * @param       pBuf - Pointer to the received message data.
   2545           *
   2546           * @return      NULL
   2547           ***************************************************************************************************/
   2548          static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf )
   2549          {
   2550            ZStatus_t status = ZSuccess;
   2551          
   2552            aps_RemoveAllGroup( *pBuf );
   2553          
   2554            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2555                                                 MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
   2556          }
   2557          
   2558          /***************************************************************************************************
   2559           * @fn          MT_ZdoExtFindAllGroupsEndpoint
   2560           *
   2561           * @brief       Handle the ZDO extension Find All Groups for Endpoint message
   2562           *
   2563           * @param       pBuf - Pointer to the received message data.
   2564           *
   2565           * @return      NULL
   2566           ***************************************************************************************************/
   2567          static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf )
   2568          {
   2569            uint16 groupList[ APS_MAX_GROUPS ];
   2570            uint8 groups;
   2571            uint8 msgLen;
   2572            uint8 *pMsg;
   2573          
   2574            groups = aps_FindAllGroupsForEndpoint( *pBuf, groupList );
   2575          
   2576            msgLen = 1 + (2 * groups);
   2577            pMsg = osal_mem_alloc( msgLen );
   2578            if ( pMsg )
   2579            {
   2580              uint8 x;
   2581              uint8 *pBuf = pMsg;
   2582          
   2583              *pBuf++ = groups;
   2584              for ( x = 0; x < groups; x++ )
   2585              {
   2586                *pBuf++ = LO_UINT16( groupList[x] );
   2587                *pBuf++ = HI_UINT16( groupList[x] );
   2588              }
   2589          
   2590              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2591                                                 MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, msgLen, pMsg );
   2592              osal_mem_free( pMsg );
   2593            }
   2594            else
   2595            {
   2596              groups = 0;
   2597              MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2598                                                 MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, 1, &groups );
   2599            }
   2600          }
   2601          
   2602          /***************************************************************************************************
   2603           * @fn          MT_ZdoExtFindGroup
   2604           *
   2605           * @brief       Handle the ZDO extension Find Group message
   2606           *
   2607           * @param       pBuf - Pointer to the received message data.
   2608           *
   2609           * @return      NULL
   2610           ***************************************************************************************************/
   2611          static void MT_ZdoExtFindGroup( uint8 *pBuf )
   2612          {
   2613            uint8 endpoint;
   2614            uint16 groupID;
   2615            aps_Group_t *pGroup;
   2616            uint8 buf[1+2+APS_GROUP_NAME_LEN] = {0};
   2617          
   2618            endpoint = *pBuf++;
   2619            groupID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2620          
   2621            pGroup = aps_FindGroup( endpoint, groupID );
   2622            if ( pGroup  )
   2623            {
   2624              buf[0] = ZSuccess;
   2625              buf[1] = LO_UINT16( pGroup->ID );
   2626              buf[2] = HI_UINT16( pGroup->ID );
   2627              buf[3] = pGroup->name[0];
   2628              osal_memcpy( &buf[4], &pGroup->name[1], buf[3] );
   2629            }
   2630            else
   2631            {
   2632              buf[0] = ZFailure;
   2633            }
   2634          
   2635            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2636                                MT_ZDO_EXT_FIND_GROUP, (1+2+APS_GROUP_NAME_LEN), buf );
   2637          }
   2638          
   2639          /***************************************************************************************************
   2640           * @fn          MT_ZdoExtAddGroup
   2641           *
   2642           * @brief       Handle the ZDO extension Add Group message
   2643           *
   2644           * @param       pBuf - Pointer to the received message data.
   2645           *
   2646           * @return      NULL
   2647           ***************************************************************************************************/
   2648          static void MT_ZdoExtAddGroup( uint8 *pBuf )
   2649          {
   2650            ZStatus_t status = ZSuccess;
   2651            aps_Group_t group = {0};
   2652            uint8 endpoint;
   2653          
   2654            endpoint = *pBuf++;
   2655            group.ID = BUILD_UINT16( pBuf[0], pBuf[1] );
   2656            group.name[0] = pBuf[2];
   2657            if ( group.name[0] > (APS_GROUP_NAME_LEN-1) )
   2658            {
   2659              group.name[0] = (APS_GROUP_NAME_LEN-1);
   2660            }
   2661          
   2662            if (group.name[0] > 0 )
   2663            {
   2664              osal_memcpy( &group.name[1], &pBuf[3], group.name[0] );
   2665            }
   2666          
   2667            status = aps_AddGroup( endpoint, &group );
   2668          
   2669            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2670                                                 MT_ZDO_EXT_ADD_GROUP, 1, &status );
   2671          }
   2672          
   2673          /***************************************************************************************************
   2674           * @fn          MT_ZdoExtCountAllGroups
   2675           *
   2676           * @brief       Handle the ZDO extension Count All Groups message
   2677           *
   2678           * @param       pBuf - Pointer to the received message data.
   2679           *
   2680           * @return      NULL
   2681           ***************************************************************************************************/
   2682          static void MT_ZdoExtCountAllGroups( uint8 *pBuf )
   2683          {
   2684            ZStatus_t status = 0;
   2685          
   2686            status = (ZStatus_t)aps_CountAllGroups();
   2687          
   2688            MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
   2689                                                 MT_ZDO_EXT_COUNT_ALL_GROUPS, 1, &status );
   2690          }
   2691          
   2692          
   2693          #endif // MT_ZDO_EXTENSIONS
   2694          
   2695          #endif   /*ZDO Command Processing in MT*/
   2696          /***************************************************************************************************
   2697          ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       1      0     29  MT_ZdoActiveEpRequest
                          0 0 19 -> MT_BuildAndSendZToolResponse
                          0 0 20 -> ZDP_NWKAddrOfInterestReq
       1      0     43  MT_ZdoAddrRspCB
                          0 0 18 -> MT_BuildAndSendZToolResponse
                          0 0 18 -> MT_Word2Buf
                          0 0 18 -> osal_mem_alloc
                          0 0 18 -> osal_mem_free
                          0 0 18 -> sAddrExtCpy
       1      0     23  MT_ZdoBeaconIndCB
                          0 0 11 -> MT_BuildAndSendZToolResponse
                          0 0 11 -> osal_mem_alloc
                          0 0 11 -> osal_mem_free
                          0 0 14 -> osal_memcpy
       1      0     52  MT_ZdoBindRequest
                          0 0 35 -> MT_BuildAndSendZToolResponse
                          0 0 43 -> ZDP_BindUnbindReq
                          0 0 35 -> sAddrExtCpy
       0      0      9  MT_ZdoCommandProcessing
                          0 0  9 -> MT_ZdoActiveEpRequest
                          0 0  9 -> MT_ZdoBindRequest
                          0 0  9 -> MT_ZdoComplexDescRequest
                          0 0  9 -> MT_ZdoEndDevAnnce
                          0 0  9 -> MT_ZdoEndDevBindRequest
                          0 0  9 -> MT_ZdoEndDeviceTimeoutRequest
                          0 0  9 -> MT_ZdoIEEEAddrRequest
                          0 0  9 -> MT_ZdoJoinReq
                          0 0  9 -> MT_ZdoMatchDescRequest
                          0 0  9 -> MT_ZdoMgmtBindRequest
                          0 0  9 -> MT_ZdoMgmtDirectJoinRequest
                          0 0  9 -> MT_ZdoMgmtLeaveRequest
                          0 0  9 -> MT_ZdoMgmtLqiRequest
                          0 0  9 -> MT_ZdoMgmtNwkDiscRequest
                          0 0  9 -> MT_ZdoMgmtNwkUpdateRequest
                          0 0  9 -> MT_ZdoMgmtPermitJoinRequest
                          0 0  9 -> MT_ZdoMgmtRtgRequest
                          0 0  9 -> MT_ZdoNWKAddressRequest
                          0 0  9 -> MT_ZdoNetworkDiscoveryReq
                          0 0  9 -> MT_ZdoNodeDescRequest
                          0 0  9 -> MT_ZdoNwkAddrOfInterestReq
                          0 0  9 -> MT_ZdoPowerDescRequest
                          0 0  9 -> MT_ZdoRegisterForZDOMsg
                          0 0  9 -> MT_ZdoRemoveRegisteredCB
                          0 0  9 -> MT_ZdoSendData
                          0 0  9 -> MT_ZdoServiceDiscRequest
                          0 0  9 -> MT_ZdoSimpleDescRequest
                          0 0  9 -> MT_ZdoStartupFromApp
                          0 0  9 -> MT_ZdoUnbindRequest
                          0 0  9 -> MT_ZdoUserDescRequest
                          0 0  9 -> MT_ZdoUserDescSet
       1      0     29  MT_ZdoComplexDescRequest
                          0 0 19 -> MT_BuildAndSendZToolResponse
                          0 0 20 -> ZDP_NWKAddrOfInterestReq
       1      0     25  MT_ZdoConcentratorIndCB
                          0 0 22 -> MT_BuildAndSendZToolResponse
                          1 0 25 -> osal_memcpy
       1      0     22  MT_ZdoDirectCB
                          0 0 19 -> MT_BuildAndSendZToolResponse
                          0 0 19 -> MT_ZdoHandleExceptions
                          0 0 19 -> osal_mem_alloc
                          0 0 19 -> osal_mem_free
                          0 0 22 -> osal_memcpy
       1      0     20  MT_ZdoEndDevAnnce
                          0 0 10 -> MT_BuildAndSendZToolResponse
                          0 0 11 -> ZDP_DeviceAnnce
       1      0     41  MT_ZdoEndDevAnnceCB
                          0 0 16 -> MT_BuildAndSendZToolResponse
                          0 0 16 -> osal_mem_alloc
                          0 0 16 -> osal_mem_free
                          0 0 16 -> sAddrExtCpy
       1      0    104  MT_ZdoEndDevBindRequest
                          0 0 86 -> MT_BuildAndSendZToolResponse
                          0 0 95 -> ZDP_EndDeviceBindReq
       1      0     20  MT_ZdoEndDeviceTimeoutRequest
                          0 0 11 -> MT_BuildAndSendZToolResponse
                          0 0 11 -> ZDP_EndDeviceTimeoutReq
       0      0     44  MT_ZdoHandleExceptions
                          0 0 25 -> MT_ZdoAddrRspCB
                          0 0 25 -> MT_ZdoEndDevAnnceCB
                          0 0 25 -> ZDO_ParseAddrRsp
                          0 0 25 -> ZDO_ParseDeviceAnnce
                          0 0 25 -> osal_mem_free
       1      0     19  MT_ZdoIEEEAddrRequest
                          0 0 10 -> MT_BuildAndSendZToolResponse
                          0 0 10 -> ZDP_IEEEAddrReq
       2      0      0  MT_ZdoInit
                          2 0  0 -> ZDO_RegisterForZdoCB
       1      0     14  MT_ZdoJoinCnfCB
                          0 0 14 -> MT_BuildAndSendZToolResponse
                          0 0 14 -> ZDO_DeregisterForZdoCB
       1      0     26  MT_ZdoJoinReq
                          0 0 13 -> MT_BuildAndSendZToolResponse
                          0 0 17 -> ZDApp_JoinReq
                          0 0 13 -> ZDO_RegisterForZdoCB
       1      0     27  MT_ZdoLeaveInd
                          0 0 24 -> MT_BuildAndSendZToolResponse
                          0 0 27 -> osal_memcpy
       1      0    106  MT_ZdoMatchDescRequest
                          0 0 89 -> MT_BuildAndSendZToolResponse
                          0 0 97 -> ZDP_MatchDescReq
       1      0     35  MT_ZdoMgmtBindRequest
                          0 0 21 -> MT_BuildAndSendZToolResponse
                          0 0 26 -> ZDP_SendData
       1      0     29  MT_ZdoMgmtDirectJoinRequest
                          0 0 19 -> MT_BuildAndSendZToolResponse
                          0 0 20 -> ZDP_MgmtDirectJoinReq
       1      0     30  MT_ZdoMgmtLeaveRequest
                          0 0 19 -> MT_BuildAndSendZToolResponse
                          0 0 21 -> ZDP_MgmtLeaveReq
       1      0     35  MT_ZdoMgmtLqiRequest
                          0 0 21 -> MT_BuildAndSendZToolResponse
                          0 0 26 -> ZDP_SendData
       1      0     39  MT_ZdoMgmtNwkDiscRequest
                          0 0 26 -> MT_BuildAndSendZToolResponse
                          0 0 30 -> ZDP_MgmtNwkDiscReq
       1      0     41  MT_ZdoMgmtNwkUpdateRequest
                          0 0 26 -> MT_BuildAndSendZToolResponse
                          0 0 32 -> ZDP_MgmtNwkUpdateReq
       1      0     28  MT_ZdoMgmtPermitJoinRequest
                          0 0 19 -> MT_BuildAndSendZToolResponse
                          0 0 19 -> ZDP_MgmtPermitJoinReq
       1      0     35  MT_ZdoMgmtRtgRequest
                          0 0 21 -> MT_BuildAndSendZToolResponse
                          0 0 26 -> ZDP_SendData
       1      0     19  MT_ZdoNWKAddressRequest
                          0 0 10 -> MT_BuildAndSendZToolResponse
                          0 0 10 -> ZDP_NwkAddrReq
       1      0     19  MT_ZdoNetworkDiscoveryReq
                          0 0 10 -> MT_BuildAndSendZToolResponse
                          0 0 10 -> ZDApp_NetworkDiscoveryReq
                          0 0 10 -> ZDO_RegisterForZdoCB
                          0 0 10 -> osal_build_uint32
       1      0     29  MT_ZdoNodeDescRequest
                          0 0 19 -> MT_BuildAndSendZToolResponse
                          0 0 20 -> ZDP_NWKAddrOfInterestReq
       1      0     31  MT_ZdoNwkAddrOfInterestReq
                          0 0 21 -> MT_BuildAndSendZToolResponse
                          0 0 22 -> ZDP_NWKAddrOfInterestReq
       0      0      9  MT_ZdoNwkDiscoveryCnfCB
                          0 0  9 -> MT_BuildAndSendZToolResponse
                          0 0  9 -> MT_ZdoBeaconIndCB
                          0 0  9 -> ZDO_DeregisterForZdoCB
       1      0     29  MT_ZdoPowerDescRequest
                          0 0 19 -> MT_BuildAndSendZToolResponse
                          0 0 20 -> ZDP_NWKAddrOfInterestReq
       1      0     19  MT_ZdoRegisterForZDOMsg
                          0 0 10 -> MT_BuildAndSendZToolResponse
                          0 0 10 -> ZDO_RegisterForZDOMsg
       1      0     19  MT_ZdoRemoveRegisteredCB
                          0 0 10 -> MT_BuildAndSendZToolResponse
                          0 0 10 -> ZDO_RemoveRegisteredCB
       1      0     38  MT_ZdoSendData
                          0 0 24 -> MT_BuildAndSendZToolResponse
                          0 0 29 -> ZDP_SendData
       1      0     22  MT_ZdoSendMsgCB
                          0 0 19 -> MT_BuildAndSendZToolResponse
                          0 0 19 -> osal_mem_alloc
                          0 0 19 -> osal_mem_free
                          0 0 22 -> osal_memcpy
       1      0     19  MT_ZdoServiceDiscRequest
                          0 0 10 -> MT_BuildAndSendZToolResponse
                          0 0 10 -> ZDP_ServerDiscReq
       1      0     29  MT_ZdoSimpleDescRequest
                          0 0 19 -> MT_BuildAndSendZToolResponse
                          0 0 20 -> ZDP_SimpleDescReq
       1      0     16  MT_ZdoSrcRtgCB
                          0 0 16 -> MT_BuildAndSendZToolResponse
                          0 0 16 -> osal_mem_alloc
                          0 0 16 -> osal_mem_free
       1      0     19  MT_ZdoStartupFromApp
                          0 0 10 -> MT_BuildAndSendZToolResponse
                          0 0 10 -> ZDOInitDevice
       2      0      0  MT_ZdoStateChangeCB
                          2 0  0 -> MT_BuildAndSendZToolResponse
       1      0     52  MT_ZdoUnbindRequest
                          0 0 35 -> MT_BuildAndSendZToolResponse
                          0 0 43 -> ZDP_BindUnbindReq
                          0 0 35 -> sAddrExtCpy
       1      0     29  MT_ZdoUserDescRequest
                          0 0 19 -> MT_BuildAndSendZToolResponse
                          0 0 20 -> ZDP_NWKAddrOfInterestReq
       1      0     51  MT_ZdoUserDescSet
                          0 0 39 -> MT_BuildAndSendZToolResponse
                          0 0 41 -> ZDP_UserDescSet
                          0 0 42 -> osal_memcpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??MT_ZdoActiveEpRequest?relay
       6  ??MT_ZdoAddrRspCB?relay
       6  ??MT_ZdoBeaconIndCB?relay
       6  ??MT_ZdoBindRequest?relay
       6  ??MT_ZdoCommandProcessing?relay
       6  ??MT_ZdoComplexDescRequest?relay
       6  ??MT_ZdoConcentratorIndCB?relay
       6  ??MT_ZdoDirectCB?relay
       6  ??MT_ZdoEndDevAnnce?relay
       6  ??MT_ZdoEndDevAnnceCB?relay
       6  ??MT_ZdoEndDevBindRequest?relay
       6  ??MT_ZdoEndDeviceTimeoutRequest?relay
       6  ??MT_ZdoHandleExceptions?relay
       6  ??MT_ZdoIEEEAddrRequest?relay
       6  ??MT_ZdoInit?relay
       6  ??MT_ZdoJoinCnfCB?relay
       6  ??MT_ZdoJoinReq?relay
       6  ??MT_ZdoLeaveInd?relay
       6  ??MT_ZdoMatchDescRequest?relay
       6  ??MT_ZdoMgmtBindRequest?relay
       6  ??MT_ZdoMgmtDirectJoinRequest?relay
       6  ??MT_ZdoMgmtLeaveRequest?relay
       6  ??MT_ZdoMgmtLqiRequest?relay
       6  ??MT_ZdoMgmtNwkDiscRequest?relay
       6  ??MT_ZdoMgmtNwkUpdateRequest?relay
       6  ??MT_ZdoMgmtPermitJoinRequest?relay
       6  ??MT_ZdoMgmtRtgRequest?relay
       6  ??MT_ZdoNWKAddressRequest?relay
       6  ??MT_ZdoNetworkDiscoveryReq?relay
       6  ??MT_ZdoNodeDescRequest?relay
       6  ??MT_ZdoNwkAddrOfInterestReq?relay
       6  ??MT_ZdoNwkDiscoveryCnfCB?relay
       6  ??MT_ZdoPowerDescRequest?relay
       6  ??MT_ZdoRegisterForZDOMsg?relay
       6  ??MT_ZdoRemoveRegisteredCB?relay
       6  ??MT_ZdoSendData?relay
       6  ??MT_ZdoSendMsgCB?relay
       6  ??MT_ZdoServiceDiscRequest?relay
       6  ??MT_ZdoSimpleDescRequest?relay
       6  ??MT_ZdoSrcRtgCB?relay
       6  ??MT_ZdoStartupFromApp?relay
       6  ??MT_ZdoStateChangeCB?relay
       6  ??MT_ZdoUnbindRequest?relay
       6  ??MT_ZdoUserDescRequest?relay
       6  ??MT_ZdoUserDescSet?relay
       5  ??Subroutine100_0
       4  ??Subroutine101_0
      10  ??Subroutine102_0
       2  ??Subroutine103_0
       3  ??Subroutine104_0
       8  ??Subroutine105_0
       3  ??Subroutine106_0
       5  ??Subroutine107_0
       7  ??Subroutine108_0
       1  ??Subroutine109_0
       9  ??Subroutine110_0
       6  ??Subroutine111_0
      10  ??Subroutine112_0
       4  ??Subroutine113_0
       9  ??Subroutine114_0
       6  ??Subroutine115_0
       8  ??Subroutine116_0
       4  ??Subroutine117_0
       5  ??Subroutine118_0
       9  ??Subroutine119_0
       3  ??Subroutine120_0
       5  ??Subroutine121_0
       8  ??Subroutine122_0
       3  ??Subroutine123_0
       5  ??Subroutine124_0
       4  ??Subroutine125_0
       6  ??Subroutine126_0
       8  ??Subroutine127_0
       5  ??Subroutine128_0
       5  ??Subroutine129_0
      11  ??Subroutine130_0
      11  ??Subroutine131_0
       5  ??Subroutine132_0
       7  ??Subroutine133_0
       6  ??Subroutine134_0
       1  ??Subroutine99_0
       7  ?Subroutine0
       3  ?Subroutine1
       8  ?Subroutine10
       3  ?Subroutine11
       8  ?Subroutine12
      23  ?Subroutine13
      57  ?Subroutine14
      24  ?Subroutine15
       6  ?Subroutine16
       1  ?Subroutine17
      16  ?Subroutine18
       6  ?Subroutine19
       8  ?Subroutine2
      26  ?Subroutine20
      26  ?Subroutine21
       6  ?Subroutine22
       4  ?Subroutine23
       8  ?Subroutine24
      11  ?Subroutine25
       4  ?Subroutine26
       1  ?Subroutine27
      12  ?Subroutine28
      18  ?Subroutine29
      45  ?Subroutine3
       6  ?Subroutine30
       3  ?Subroutine31
       5  ?Subroutine32
       4  ?Subroutine33
      10  ?Subroutine34
       6  ?Subroutine35
      13  ?Subroutine36
      11  ?Subroutine37
      13  ?Subroutine38
      12  ?Subroutine39
      20  ?Subroutine4
      12  ?Subroutine40
      11  ?Subroutine41
      11  ?Subroutine42
      13  ?Subroutine43
      13  ?Subroutine44
       2  ?Subroutine45
       4  ?Subroutine46
      11  ?Subroutine47
       4  ?Subroutine48
       9  ?Subroutine49
       3  ?Subroutine5
       6  ?Subroutine50
       6  ?Subroutine51
       3  ?Subroutine52
       2  ?Subroutine53
       9  ?Subroutine54
      10  ?Subroutine55
      12  ?Subroutine56
       3  ?Subroutine57
       7  ?Subroutine58
      12  ?Subroutine59
       5  ?Subroutine6
      11  ?Subroutine60
       6  ?Subroutine61
      14  ?Subroutine62
       6  ?Subroutine63
       6  ?Subroutine64
      14  ?Subroutine65
      16  ?Subroutine66
       4  ?Subroutine67
      10  ?Subroutine68
      11  ?Subroutine69
      10  ?Subroutine7
      12  ?Subroutine70
      10  ?Subroutine71
       4  ?Subroutine72
       4  ?Subroutine73
       9  ?Subroutine74
      18  ?Subroutine75
      16  ?Subroutine76
       7  ?Subroutine77
      21  ?Subroutine78
       4  ?Subroutine79
      17  ?Subroutine8
       4  ?Subroutine80
       6  ?Subroutine81
       9  ?Subroutine82
       6  ?Subroutine83
       6  ?Subroutine84
       9  ?Subroutine85
       4  ?Subroutine86
       4  ?Subroutine87
       8  ?Subroutine88
      12  ?Subroutine89
       5  ?Subroutine9
       5  ?Subroutine90
      11  ?Subroutine91
       9  ?Subroutine92
       5  ?Subroutine93
       9  ?Subroutine94
       9  ?Subroutine95
       9  ?Subroutine96
       7  ?Subroutine97
      11  ?Subroutine98
      33  MT_ZdoActiveEpRequest
     180  MT_ZdoAddrRspCB
     283  MT_ZdoBeaconIndCB
     130  MT_ZdoBindRequest
     374  MT_ZdoCommandProcessing
      33  MT_ZdoComplexDescRequest
     109  MT_ZdoConcentratorIndCB
     179  MT_ZdoDirectCB
      51  MT_ZdoEndDevAnnce
     137  MT_ZdoEndDevAnnceCB
     252  MT_ZdoEndDevBindRequest
      44  MT_ZdoEndDeviceTimeoutRequest
     221  MT_ZdoHandleExceptions
      37  MT_ZdoIEEEAddrRequest
      31  MT_ZdoInit
     107  MT_ZdoJoinCnfCB
     146  MT_ZdoJoinReq
     142  MT_ZdoLeaveInd
     235  MT_ZdoMatchDescRequest
      47  MT_ZdoMgmtBindRequest
      79  MT_ZdoMgmtDirectJoinRequest
      98  MT_ZdoMgmtLeaveRequest
      50  MT_ZdoMgmtLqiRequest
     151  MT_ZdoMgmtNwkDiscRequest
     230  MT_ZdoMgmtNwkUpdateRequest
      64  MT_ZdoMgmtPermitJoinRequest
      49  MT_ZdoMgmtRtgRequest
      38  MT_ZdoNWKAddressRequest
      87  MT_ZdoNetworkDiscoveryReq
      36  MT_ZdoNodeDescRequest
     151  MT_ZdoNwkAddrOfInterestReq
      46  MT_ZdoNwkDiscoveryCnfCB
      32  MT_ZdoPowerDescRequest
      37  MT_ZdoRegisterForZDOMsg
      37  MT_ZdoRemoveRegisteredCB
     264  MT_ZdoSendData
     165  MT_ZdoSendMsgCB
      27  MT_ZdoServiceDiscRequest
      52  MT_ZdoSimpleDescRequest
     144  MT_ZdoSrcRtgCB
      53  MT_ZdoStartupFromApp
      25  MT_ZdoStateChangeCB
     130  MT_ZdoUnbindRequest
      33  MT_ZdoUserDescRequest
     139  MT_ZdoUserDescSet
       4  _zdoCallbackSub
       2  pBeaconIndBuf

 
 6 179 bytes in segment BANKED_CODE
   270 bytes in segment BANK_RELAYS
     6 bytes in segment XDATA_Z
 
 6 449 bytes of CODE  memory
     6 bytes of XDATA memory

Errors: none
Warnings: none
