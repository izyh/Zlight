###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             12/Apr/2014  12:18:13 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Components\stack\zdo\ZDProfile.c             #
#    Command line       =  -f "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f "D:\Texas         #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO       #
#                          -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f "D:\Texas               #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wZCL.cfg" "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Components\stack\zdo\ZDProfile.c" -D         #
#                          FEATURE_GREEN_POWER -D SECURE=1 -D                 #
#                          TC_LINKKEY_JOIN -D ZDSECMGR_TC_DEVICE_MAX=2 -D     #
#                          NV_RESTORE -D HOLD_AUTO_START -D INTER_PAN -D      #
#                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC  #
#                          -D MT_ZDO_FUNC -D MT_ZDO_CB_FUNC -D MT_UTIL_FUNC   #
#                          -D MT_ZDO_MGMT -D LCD_SUPPORTED -D HAL_LCD=FALSE   #
#                          -D HAL_KEY=FALSE -D ZCL_BASIC -D ZCL_READ -D       #
#                          ZCL_WRITE -D ZCL_IDENTIFY -D ZCL_ON_OFF -D         #
#                          ZCL_SCENES -D ZCL_GROUPS -D                        #
#                          ZCL_LIGHT_LINK_ENHANCE -D ZCL_LEVEL_CTRL -D        #
#                          ZCL_COLOR_CTRL -D xMAX_CHANNELS_24GHZ=0x02108800   #
#                          -lC "D:\Texas Instruments\Z-Stack Lighting         #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\List\" -lA "D:\Texas Instruments\Z-Stack     #
#                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC253 #
#                          x\BridgeEB-Pro\List\" --diag_suppress Pe001,Pa010  #
#                          -o "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\Obj\" -e --debug --core=plain --dptr=16,1    #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\" -I    #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\Sour #
#                          ce\" -I "D:\Texas Instruments\Z-Stack Lighting     #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\S #
#                          ource\" -I "D:\Texas Instruments\Z-Stack Lighting  #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\HomeAutomation\Source\" -I "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\HomeAutomation\SampleLight\Source\" -I           #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\ZMain\TI2530DB\" -I "D:\Texas                    #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\hal\include\" -I "D:\Texas      #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\hal\target\CC2530EB\" -I        #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\include\" -I "D:\Texas      #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\high_level\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\" -I        #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\single_chip #
#                          \" -I "D:\Texas Instruments\Z-Stack Lighting       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mt\" -I "D:\Texas               #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\osal\include\" -I "D:\Texas     #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\services\saddr\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\services\sdata\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\af\" -I "D:\Texas         #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\nwk\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sapi\" -I "D:\Texas       #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sec\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sys\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\zcl\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\zdo\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\zmac\" -I "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\zmac\f8w\" -Ohz                 #
#                          --require_prototypes                               #
#    List file          =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\List\ZDProfile.lst                           #
#    Object file        =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\Obj\ZDProfile.r51                            #
#                                                                             #
#                                                                             #
###############################################################################

D:\Texas Instruments\Z-Stack Lighting 1.0.2\Components\stack\zdo\ZDProfile.c
      1          /**************************************************************************************************
      2            Filename:       ZDProfile.c
      3            Revised:        $Date: 2013-10-02 15:57:50 -0700 (Wed, 02 Oct 2013) $
      4            Revision:       $Revision: 35529 $
      5          
      6            Description:    This is the Zigbee Device Profile.
      7          
      8          
      9            Copyright 2004-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "AF.h"
     46          #include "NLMEDE.h"
     47          #include "nwk_util.h"
     48          #include "APS.h"
     49          
     50          #include "AddrMgr.h"
     51          #include "ZDConfig.h"
     52          #include "ZDProfile.h"
     53          #include "ZDObject.h"
     54          #include "ZDNwkMgr.h"
     55          
     56          #if defined( LCD_SUPPORTED )
     57            #include "OnBoard.h"
     58          #endif
     59          
     60          #include "nwk_util.h"
     61          
     62          #if defined( MT_ZDO_FUNC )
     63            #include "MT_ZDO.h"
     64          #endif
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          #define ZADDR_TO_AFADDR( pZADDR, AFADDR ) {                            \
     71            (AFADDR).endPoint = ZDP_AF_ENDPOINT;                                 \
     72            (AFADDR).addrMode = (afAddrMode_t)(pZADDR)->addrMode;                \
     73            (AFADDR).addr.shortAddr = (pZADDR)->addr.shortAddr;                  \
     74          }
     75          
     76          #define FillAndSendBuffer( TRANSSEQ, ADDR, ID, LEN, BUF ) {     \
     77            afStatus_t stat;                                    \
     78            ZDP_TmpBuf = (BUF)+1;                               \
     79            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     80            osal_mem_free( (BUF) );                             \
     81            ZDP_TmpBuf = ZDP_Buf+1;                             \
     82            return stat;                                        \
     83          }
     84          
     85          #define FillAndSendTxOptions( TRANSSEQ, ADDR, ID, LEN, TxO ) {  \
     86            afStatus_t stat;                                    \
     87            ZDP_TxOptions = (TxO);                              \
     88            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     89            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
     90            return stat;                                        \
     91          }
     92          
     93          #define FillAndSendBufferTxOptions( TRANSSEQ, ADDR, ID, LEN, BUF, TxO ) { \
     94            afStatus_t stat;                                    \
     95            ZDP_TmpBuf = (BUF)+1;                               \
     96            ZDP_TxOptions = (TxO);                              \
     97            stat = fillAndSend( (TRANSSEQ), (ADDR), (ID), (LEN) );          \
     98            osal_mem_free( (BUF) );                             \
     99            ZDP_TmpBuf = ZDP_Buf+1;                             \
    100            ZDP_TxOptions = AF_TX_OPTIONS_NONE;                 \
    101            return stat;                                        \
    102          }
    103          
    104          /*********************************************************************
    105           * CONSTANTS
    106           */
    107          
    108          #define ZDP_BUF_SZ          80
    109          

   \                                 In  segment CODE_C, align 1
    110          CONST byte ZDP_AF_ENDPOINT = 0;
   \                     ZDP_AF_ENDPOINT:
   \   000000   00           DB 0
    111          
    112          // Routing table options
    113          #define ZP_RTG_RECORD       0x04       // Routing table indication that a route record is needed
    114          #define ZP_MTO_ROUTE_RC     0x08       // Concentrator with routing cache
    115          #define ZP_MTO_ROUTE_NRC    0x10       // Concentrator with limited cache
    116          
    117          
    118          /*********************************************************************
    119           * TYPEDEFS
    120           */
    121          typedef struct
    122          {
    123            void *next;
    124            uint8 taskID;
    125            uint16 clusterID;
    126          } ZDO_MsgCB_t;
    127          
    128          
    129          /*********************************************************************
    130           * GLOBAL VARIABLES
    131           */
    132          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          byte ZDP_TransID = 0;
   \                     ZDP_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134          
    135          /*********************************************************************
    136           * EXTERNAL VARIABLES
    137           */
    138          
    139          extern endPointDesc_t ZDApp_epDesc;
    140          
    141          /*********************************************************************
    142           * EXTERNAL FUNCTIONS
    143           */
    144          
    145          /*********************************************************************
    146           * LOCAL FUNCTIONS
    147           */
    148          
    149          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len );
    150          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg );
    151          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg );
    152          
    153          /*********************************************************************
    154           * LOCAL VARIABLES
    155           */
    156          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    157          static uint8  ZDP_Buf[ ZDP_BUF_SZ ];
   \                     ZDP_Buf:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    158          static uint8 *ZDP_TmpBuf = ZDP_Buf+1;
   \                     ZDP_TmpBuf:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDP_TmpBuf>`
   \   000002                REQUIRE __INIT_XDATA_I
    159          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    160          byte ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \                     ZDP_TxOptions:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    161          ZDO_MsgCB_t *zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   \                     zdoMsgCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    162          
    163          /*********************************************************************
    164           * ZDO Message Processing table
    165           */
    166          
    167          typedef void (*pfnZDPMsgProcessor)( zdoIncomingMsg_t *inMsg );
    168          
    169          typedef struct
    170          {
    171            uint16                clusterID;
    172            pfnZDPMsgProcessor    pFn;
    173          } zdpMsgProcItem_t;
    174          

   \                                 In  segment CODE_C, align 1
    175          CONST zdpMsgProcItem_t zdpMsgProcs[] =
   \                     zdpMsgProcs:
   \   000000   0000         DW 0
   \   000002   ....         DW ??zdpProcessAddrReq?relay
   \   000004   1300         DW 19
   \   000006   ....         DW ??ZDO_ProcessDeviceAnnce?relay
   \   000008   0100         DW 1
   \   00000A   ....         DW ??zdpProcessAddrReq?relay
   \   00000C   0200         DW 2
   \   00000E   ....         DW ??ZDO_ProcessNodeDescReq?relay
   \   000010   0300         DW 3
   \   000012   ....         DW ??ZDO_ProcessPowerDescReq?relay
   \   000014   0400         DW 4
   \   000016   ....         DW ??ZDO_ProcessSimpleDescReq?relay
   \   000018   0500         DW 5
   \   00001A   ....         DW ??ZDO_ProcessActiveEPReq?relay
   \   00001C   0600         DW 6
   \   00001E   ....         DW ??ZDO_ProcessMatchDescReq?relay
   \   000020   3000         DW 48
   \   000022   ....         DW ??ZDO_ProcessMgmtNwkDiscReq?relay
   \   000024   3100         DW 49
   \   000026   ....         DW ??ZDO_ProcessMgmtLqiReq?relay
   \   000028   3200         DW 50
   \   00002A   ....         DW ??ZDO_ProcessMgmtRtgReq?relay
   \   00002C   3300         DW 51
   \   00002E   ....         DW ??ZDO_ProcessMgmtBindReq?relay
   \   000030   3500         DW 53
   \   000032   ....         DW ??ZDO_ProcessMgmtDirectJoinReq?relay
   \   000034   3400         DW 52
   \   000036   ....         DW ??ZDO_ProcessMgmtLeaveReq?relay
   \   000038   3600         DW 54
   \   00003A   ....         DW ??ZDO_ProcessMgmtPermitJoinReq?relay
   \   00003C   1100         DW 17
   \   00003E   ....         DW ??ZDO_ProcessUserDescReq?relay
   \   000040   1400         DW 20
   \   000042   ....         DW ??ZDO_ProcessUserDescSet?relay
   \   000044   1500         DW 21
   \   000046   ....         DW ??ZDO_ProcessServerDiscReq?relay
   \   000048   1F00         DW 31
   \   00004A   ....         DW ??ZDO_ProcessEndDeviceTimeoutReq?relay
   \   00004C   FFFF         DW 65535
   \   00004E   0000         DW 0H
    176          {
    177          #if ( RFD_RCVC_ALWAYS_ON==TRUE ) || ( ZG_BUILD_RTR_TYPE )
    178            // These aren't processed by sleeping end devices.
    179            { NWK_addr_req,           zdpProcessAddrReq },
    180            { Device_annce,           ZDO_ProcessDeviceAnnce },
    181          #endif
    182            { IEEE_addr_req,          zdpProcessAddrReq },
    183            { Node_Desc_req,          ZDO_ProcessNodeDescReq },
    184            { Power_Desc_req,         ZDO_ProcessPowerDescReq },
    185            { Simple_Desc_req,        ZDO_ProcessSimpleDescReq },
    186            { Active_EP_req,          ZDO_ProcessActiveEPReq },
    187            { Match_Desc_req,         ZDO_ProcessMatchDescReq },
    188          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
    189            { Mgmt_NWK_Disc_req,      ZDO_ProcessMgmtNwkDiscReq },
    190          #endif
    191          #if defined ( ZDO_MGMT_LQI_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    192            { Mgmt_Lqi_req,           ZDO_ProcessMgmtLqiReq },
    193          #endif
    194          #if defined ( ZDO_MGMT_RTG_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    195            { Mgmt_Rtg_req,           ZDO_ProcessMgmtRtgReq },
    196          #endif
    197          #if defined ( ZDO_MGMT_BIND_RESPONSE ) && defined ( REFLECTOR )
    198            { Mgmt_Bind_req,          ZDO_ProcessMgmtBindReq },
    199          #endif
    200          #if defined ( ZDO_MGMT_JOINDIRECT_RESPONSE ) && ( ZG_BUILD_RTR_TYPE )
    201            { Mgmt_Direct_Join_req,   ZDO_ProcessMgmtDirectJoinReq },
    202          #endif
    203          #if defined ( ZDO_MGMT_LEAVE_RESPONSE )
    204            { Mgmt_Leave_req,         ZDO_ProcessMgmtLeaveReq },
    205          #endif
    206          #if defined ( ZDO_MGMT_PERMIT_JOIN_RESPONSE )  && ( ZG_BUILD_RTR_TYPE )
    207            { Mgmt_Permit_Join_req,   ZDO_ProcessMgmtPermitJoinReq },
    208          #endif
    209          #if defined ( ZDO_USERDESC_RESPONSE )
    210            { User_Desc_req,          ZDO_ProcessUserDescReq },
    211          #endif
    212          #if defined ( ZDO_USERDESCSET_RESPONSE )
    213            { User_Desc_set,          ZDO_ProcessUserDescSet },
    214          #endif
    215          #if defined ( ZDO_SERVERDISC_RESPONSE )
    216            { Server_Discovery_req,   ZDO_ProcessServerDiscReq },
    217          #endif
    218          #if defined ( ZIGBEE_CHILD_AGING )
    219          #if defined ( ZDO_ENDDEVICETIMEOUT_REQUEST )
    220            { End_Device_Timeout_req, ZDO_ProcessEndDeviceTimeoutReq },
    221          #endif
    222          #endif // ZIGBEE_CHILD_AGING
    223            {0xFFFF, NULL} // Last
    224          };
    225          
    226          /*********************************************************************
    227           * @fn          fillAndSend
    228           *
    229           * @brief       Combined to reduce space
    230           *
    231           * @param
    232           * @param
    233           *
    234           * @return      afStatus_t
    235           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    236          static afStatus_t fillAndSend( uint8 *transSeq, zAddrType_t *addr, cId_t clusterID, byte len )
   \                     fillAndSend:
    237          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V0 + 6,R1
   \   000014   741C         MOV     A,#0x1c
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ??Subroutine104_0 & 0xFFFF
    238            afAddrType_t afAddr;
    239          
    240            osal_memset( &afAddr, 0, sizeof(afAddrType_t) );
   \                     ??CrossCallReturnLabel_211:
   \   00001C                ; Setup parameters for call to function osal_memset
   \   00001C   7C0C         MOV     R4,#0xc
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   7900         MOV     R1,#0x0
   \   000022   85..82       MOV     DPL,?XSP + 0
   \   000025   85..83       MOV     DPH,?XSP + 1
   \   000028   AA82         MOV     R2,DPL
   \   00002A   AB83         MOV     R3,DPH
   \   00002C   12....       LCALL   ??osal_memset?relay
    241            ZADDR_TO_AFADDR( addr, afAddr );
   \   00002F   7409         MOV     A,#0x9
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E4           CLR     A
   \   000035   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   C0E0         PUSH    A
   \   00003D   7408         MOV     A,#0x8
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   D0E0         POP     A
   \   000044   F0           MOVX    @DPTR,A
   \   000045   8E82         MOV     DPL,R6
   \   000047   8F83         MOV     DPH,R7
   \   000049   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   00004C   F0           MOVX    @DPTR,A
    242          
    243            *(ZDP_TmpBuf-1) = *transSeq;
   \   00004D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000050   E0           MOVX    A,@DPTR
   \   000051   24FF         ADD     A,#-0x1
   \   000053   F5..         MOV     ?V0 + 4,A
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   34FF         ADDC    A,#-0x1
   \   000059   F5..         MOV     ?V0 + 5,A
   \   00005B   85..82       MOV     DPL,?V0 + 2
   \   00005E   85..83       MOV     DPH,?V0 + 3
   \   000061   12....       LCALL   ?Subroutine45 & 0xFFFF
    244          
    245            return AF_DataRequest( &afAddr, &ZDApp_epDesc, clusterID,
    246                                     (uint16)(len+1), (uint8*)(ZDP_TmpBuf-1),
    247                                     transSeq, ZDP_TxOptions,  AF_DEFAULT_RADIUS );
   \                     ??CrossCallReturnLabel_60:
   \   000064                ; Setup parameters for call to function AF_DataRequest
   \   000064   75..1E       MOV     ?V0 + 7,#0x1e
   \   000067   78..         MOV     R0,#?V0 + 7
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006C   78..         MOV     R0,#?V0 + 2
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000071   78..         MOV     R0,#?V0 + 4
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   85....       MOV     ?V0 + 2,?V0 + 6
   \   000079   E5..         MOV     A,?V0 + 2
   \   00007B   2401         ADD     A,#0x1
   \   00007D   F5..         MOV     ?V0 + 2,A
   \   00007F   E4           CLR     A
   \   000080   3400         ADDC    A,#0x0
   \   000082   F5..         MOV     ?V0 + 3,A
   \   000084   78..         MOV     R0,#?V0 + 2
   \   000086   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000089   78..         MOV     R0,#?V0 + 0
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008E   90....       MOV     DPTR,#ZDP_TxOptions
   \   000091   E0           MOVX    A,@DPTR
   \   000092   F9           MOV     R1,A
   \   000093   7C..         MOV     R4,#ZDApp_epDesc & 0xff
   \   000095   7D..         MOV     R5,#(ZDApp_epDesc >> 8) & 0xff
   \   000097   7409         MOV     A,#0x9
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   AA82         MOV     R2,DPL
   \   00009E   AB83         MOV     R3,DPH
   \   0000A0   12....       LCALL   ??AF_DataRequest?relay
   \   0000A3   7409         MOV     A,#0x9
   \   0000A5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A8   740C         MOV     A,#0xc
   \   0000AA   02....       LJMP    ??Subroutine98_0 & 0xFFFF
    248          
    249          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0 + 4
   \   000004   85..83       MOV     DPH,?V0 + 5
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   E8           MOV     A,R0
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   E9           MOV     A,R1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine98_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F08         MOV     R7,#0x8
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
    250          
    251          /*********************************************************************
    252           * @fn          ZDP_SendData
    253           *
    254           * @brief       This builds and send a request message that has
    255           *              NWKAddrOfInterest as its only parameter.
    256           *
    257           * @param       dstAddr - destination address
    258           * @param       cmd - clusterID
    259           * @param       dataLen - number of bytes of data
    260           * @param       data - pointer to the data
    261           * @param       SecurityEnable - Security Options
    262           *
    263           * @return      afStatus_t
    264           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    265          afStatus_t ZDP_SendData( uint8 *TransSeq, zAddrType_t *dstAddr, uint16 cmd,
   \                     ZDP_SendData:
    266                                  byte len, uint8 *buf, byte SecurityEnable )
    267          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   740E         MOV     A,#0xe
   \   000009   12....       LCALL   ?XSTACK_DISP0_8
   \   00000C   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   00000F   7412         MOV     A,#0x12
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 1,A
    268            uint8 *pBuf = ZDP_TmpBuf;
   \   000017   12....       LCALL   ?Subroutine22 & 0xFFFF
    269            byte cnt = len;
   \                     ??CrossCallReturnLabel_115:
   \   00001A   EE           MOV     A,R6
   \   00001B   FF           MOV     R7,A
   \   00001C   7410         MOV     A,#0x10
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000024   801D         SJMP    ??ZDP_SendData_0
    270          
    271            while ( cnt-- )
    272            {
    273              *pBuf++ = *buf++;
   \                     ??ZDP_SendData_1:
   \   000026   8882         MOV     DPL,R0
   \   000028   8983         MOV     DPH,R1
   \   00002A   12....       LCALL   ?Subroutine45 & 0xFFFF
    274            }
   \                     ??CrossCallReturnLabel_61:
   \   00002D   8882         MOV     DPL,R0
   \   00002F   8983         MOV     DPH,R1
   \   000031   A3           INC     DPTR
   \   000032   A882         MOV     R0,DPL
   \   000034   A983         MOV     R1,DPH
   \   000036   85..82       MOV     DPL,?V0 + 4
   \   000039   85..83       MOV     DPH,?V0 + 5
   \   00003C   A3           INC     DPTR
   \   00003D   8582..       MOV     ?V0 + 4,DPL
   \   000040   8583..       MOV     ?V0 + 5,DPH
   \                     ??ZDP_SendData_0:
   \   000043   8F..         MOV     ?V0 + 0,R7
   \   000045   74FF         MOV     A,#-0x1
   \   000047   25..         ADD     A,?V0 + 0
   \   000049   1F           DEC     R7
   \   00004A   04           INC     A
   \   00004B   70D9         JNZ     ??ZDP_SendData_1
    275          
    276            FillAndSendTxOptions( TransSeq, dstAddr, cmd, len, ((SecurityEnable) ? AF_EN_SECURITY : 0) );
   \   00004D   E5..         MOV     A,?V0 + 1
   \   00004F   90....       MOV     DPTR,#ZDP_TxOptions
   \   000052   6004         JZ      ??ZDP_SendData_2
   \   000054   7440         MOV     A,#0x40
   \   000056   8001         SJMP    ??ZDP_SendData_3
   \                     ??ZDP_SendData_2:
   \   000058   E4           CLR     A
   \                     ??ZDP_SendData_3:
   \   000059   F0           MOVX    @DPTR,A
   \   00005A                ; Setup parameters for call to function fillAndSend
   \   00005A   78..         MOV     R0,#?V0 + 2
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   EE           MOV     A,R6
   \   000060   F9           MOV     R1,A
   \   000061   12....       LCALL   ??fillAndSend?relay
   \   000064   7402         MOV     A,#0x2
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
   \   000069   90....       MOV     DPTR,#ZDP_TxOptions
   \   00006C   E4           CLR     A
   \   00006D   F0           MOVX    @DPTR,A
   \   00006E   02....       LJMP    ?Subroutine1 & 0xFFFF
    277          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine83_0
   \   000003                ; // Fall through to label ??Subroutine83_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine83_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine89_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_263:
   \   000003   22           RET
    278          
    279          /*********************************************************************
    280           * @fn          ZDP_NWKAddrOfInterestReq
    281           *
    282           * @brief       This builds and send a request message that has
    283           *              NWKAddrOfInterest as its only parameter.
    284           *
    285           * @param       dstAddr - destination address
    286           * @param       nwkAddr - 16 bit address
    287           * @param       SecurityEnable - Security Options
    288           *
    289           * @return      afStatus_t
    290           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    291          afStatus_t ZDP_NWKAddrOfInterestReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_NWKAddrOfInterestReq:
    292                                               byte cmd, byte SecurityEnable )
    293          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    294            (void)SecurityEnable;  // Intentionally unreferenced parameter
    295          
    296            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000007   12....       LCALL   ?Subroutine17 & 0xFFFF
    297            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
    298          
    299            return fillAndSend( &ZDP_TransID, dstAddr, cmd, 2 );
   \                     ??CrossCallReturnLabel_9:
   \   00000A                ; Setup parameters for call to function fillAndSend
   \   00000A   8E..         MOV     ?V0 + 0,R6
   \   00000C   02....       LJMP    ?Subroutine2 & 0xFFFF
    300          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   75..00       MOV     ?V0 + 1,#0x0
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   7902         MOV     R1,#0x2
   \   00000A                REQUIRE ??Subroutine84_0
   \   00000A                ; // Fall through to label ??Subroutine84_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine84_0:
   \   000000   EA           MOV     A,R2
   \   000001   FC           MOV     R4,A
   \   000002   EB           MOV     A,R3
   \   000003   FD           MOV     R5,A
   \   000004   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000006   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000008                REQUIRE ??Subroutine85_0
   \   000008                ; // Fall through to label ??Subroutine85_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine85_0:
   \   000000   12....       LCALL   ??fillAndSend?relay
   \   000003   7402         MOV     A,#0x2
   \   000005                REQUIRE ??Subroutine86_0
   \   000005                ; // Fall through to label ??Subroutine86_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine86_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000006   EC           MOV     A,R4
   \   000007   F0           MOVX    @DPTR,A
   \   000008   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   00000B   ED           MOV     A,R5
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    301          
    302          /*********************************************************************
    303           * Address Requests
    304           */
    305          
    306          /*********************************************************************
    307           * @fn          ZDP_NwkAddrReq
    308           *
    309           * @brief       This builds and send a NWK_addr_req message.  This
    310           *              function sends a broadcast message looking for a 16
    311           *              bit address with a 64 bit address as bait.
    312           *
    313           * @param       IEEEAddress - looking for this device
    314           * @param       SecurityEnable - Security Options
    315           *
    316           * @return      afStatus_t
    317           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          afStatus_t ZDP_NwkAddrReq( uint8 *IEEEAddress, byte ReqType,
   \                     ZDP_NwkAddrReq:
    319                                     byte StartIndex, byte SecurityEnable )
    320          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   89..         MOV     ?V0 + 2,R1
   \   000010   8C..         MOV     ?V0 + 3,R4
    321            uint8 *pBuf = ZDP_TmpBuf;
   \   000012   12....       LCALL   ?Subroutine12 & 0xFFFF
    322            byte len = Z_EXTADDR_LEN + 1 + 1;  // IEEEAddress + ReqType + StartIndex.
    323            zAddrType_t dstAddr;
    324          
    325            (void)SecurityEnable;  // Intentionally unreferenced parameter
    326          
    327            if ( osal_ExtAddrEqual( saveExtAddr, IEEEAddress ) == FALSE )
   \                     ??CrossCallReturnLabel_217:
   \   000015                ; Setup parameters for call to function sAddrExtCmp
   \   000015   EE           MOV     A,R6
   \   000016   FC           MOV     R4,A
   \   000017   EF           MOV     A,R7
   \   000018   FD           MOV     R5,A
   \   000019   7A..         MOV     R2,#saveExtAddr & 0xff
   \   00001B   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   00001D   12....       LCALL   ??sAddrExtCmp?relay
   \   000020   E9           MOV     A,R1
   \   000021   700A         JNZ     ??ZDP_NwkAddrReq_0
    328            {
    329              dstAddr.addrMode = AddrBroadcast;
   \   000023   7408         MOV     A,#0x8
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   12....       LCALL   ?Subroutine75 & 0xFFFF
    330              dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    331            }
   \                     ??CrossCallReturnLabel_107:
   \   00002B   800E         SJMP    ??CrossCallReturnLabel_16
    332            else
    333            {
    334              dstAddr.addrMode = Addr16Bit;
   \                     ??ZDP_NwkAddrReq_0:
   \   00002D   7408         MOV     A,#0x8
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   7402         MOV     A,#0x2
   \   000034   F0           MOVX    @DPTR,A
    335              dstAddr.addr.shortAddr = ZDAppNwkAddr.addr.shortAddr;
   \   000035   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000038   12....       LCALL   ?Subroutine21 & 0xFFFF
    336            }
   \                     ??CrossCallReturnLabel_16:
   \   00003B   F0           MOVX    @DPTR,A
    337          
    338            pBuf = osal_cpyExtAddr( pBuf, IEEEAddress );
   \   00003C                ; Setup parameters for call to function sAddrExtCpy
   \   00003C   EE           MOV     A,R6
   \   00003D   FC           MOV     R4,A
   \   00003E   EF           MOV     A,R7
   \   00003F   FD           MOV     R5,A
   \   000040   AA..         MOV     R2,?V0 + 0
   \   000042   AB..         MOV     R3,?V0 + 1
   \   000044   12....       LCALL   ??sAddrExtCpy?relay
    339          
    340            *pBuf++ = ReqType;
   \   000047   8A82         MOV     DPL,R2
   \   000049   8B83         MOV     DPH,R3
   \   00004B   E5..         MOV     A,?V0 + 2
   \   00004D   F0           MOVX    @DPTR,A
   \   00004E   A3           INC     DPTR
    341            *pBuf++ = StartIndex;
   \   00004F   E5..         MOV     A,?V0 + 3
   \   000051   F0           MOVX    @DPTR,A
    342          
    343            return fillAndSend( &ZDP_TransID, &dstAddr, NWK_addr_req, len );
   \   000052                ; Setup parameters for call to function fillAndSend
   \   000052   E4           CLR     A
   \   000053   F5..         MOV     ?V0 + 0,A
   \   000055   F5..         MOV     ?V0 + 1,A
   \   000057   78..         MOV     R0,#?V0 + 0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005C   790A         MOV     R1,#0xa
   \   00005E   7402         MOV     A,#0x2
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   AC82         MOV     R4,DPL
   \   000065   AD83         MOV     R5,DPH
   \   000067   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000069   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00006B   12....       LCALL   ??fillAndSend?relay
   \   00006E   7402         MOV     A,#0x2
   \   000070   12....       LCALL   ?DEALLOC_XSTACK8
   \   000073   7409         MOV     A,#0x9
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   \   000078   02....       LJMP    ?Subroutine1 & 0xFFFF
    344          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   740F         MOV     A,#0xf
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   74FD         MOV     A,#-0x3
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   74FF         MOV     A,#-0x1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine104_0
   \   000003                ; // Fall through to label ??Subroutine104_0
    345          
    346          /*********************************************************************
    347           * @fn          ZDP_IEEEAddrReq
    348           *
    349           * @brief       This builds and send a IEEE_addr_req message.  This
    350           *              function sends a unicast message looking for a 64
    351           *              bit IEEE address with a 16 bit address as bait.
    352           *
    353           * @param       ReqType - ZDP_IEEEADDR_REQTYPE_SINGLE or
    354           *                        ZDP_IEEEADDR_REQTYPE_EXTENDED
    355           * @param       SecurityEnable - Security Options
    356           *
    357           * @return      afStatus_t
    358           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    359          afStatus_t ZDP_IEEEAddrReq( uint16 shortAddr, byte ReqType,
   \                     ZDP_IEEEAddrReq:
    360                                      byte StartIndex, byte SecurityEnable )
    361          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
    362            uint8 *pBuf = ZDP_TmpBuf;
   \   00000E   12....       LCALL   ??Subroutine111_0 & 0xFFFF
    363            byte len = 2 + 1 + 1;  // shortAddr + ReqType + StartIndex.
    364            zAddrType_t dstAddr;
    365          
    366            (void)SecurityEnable;  // Intentionally unreferenced parameter
    367          
    368            dstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \                     ??CrossCallReturnLabel_258:
   \   000011   7408         MOV     A,#0x8
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   12....       LCALL   ?Subroutine51 & 0xFFFF
    369            dstAddr.addr.shortAddr = shortAddr;
    370          
    371            *pBuf++ = LO_UINT16( shortAddr );
   \                     ??CrossCallReturnLabel_71:
   \   000019   EA           MOV     A,R2
   \   00001A   8882         MOV     DPL,R0
   \   00001C   8983         MOV     DPH,R1
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
    372            *pBuf++ = HI_UINT16( shortAddr );
   \   000020   EB           MOV     A,R3
   \   000021   F0           MOVX    @DPTR,A
   \   000022   A3           INC     DPTR
    373          
    374            *pBuf++ = ReqType;
   \   000023   EE           MOV     A,R6
   \   000024   F0           MOVX    @DPTR,A
   \   000025   A3           INC     DPTR
    375            *pBuf++ = StartIndex;
   \   000026   EF           MOV     A,R7
   \   000027   F0           MOVX    @DPTR,A
    376          
    377            return fillAndSend( &ZDP_TransID, &dstAddr, IEEE_addr_req, len );
   \   000028                ; Setup parameters for call to function fillAndSend
   \   000028   75..01       MOV     ?V0 + 0,#0x1
   \   00002B   75..00       MOV     ?V0 + 1,#0x0
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7904         MOV     R1,#0x4
   \   000035   02....       LJMP    ?Subroutine7 & 0xFFFF
    378          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7402         MOV     A,#0x2
   \   000002   12....       LCALL   ?XSTACK_DISP0_8
   \   000005   AC82         MOV     R4,DPL
   \   000007   AD83         MOV     R5,DPH
   \   000009   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   00000B   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   00000D   12....       LCALL   ??fillAndSend?relay
   \   000010   7402         MOV     A,#0x2
   \   000012   12....       LCALL   ?DEALLOC_XSTACK8
   \   000015                REQUIRE ??Subroutine88_0
   \   000015                ; // Fall through to label ??Subroutine88_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine88_0:
   \   000000   7409         MOV     A,#0x9
   \   000002   02....       LJMP    ??Subroutine86_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   7402         MOV     A,#0x2
   \   000002   F0           MOVX    @DPTR,A
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   EA           MOV     A,R2
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   EB           MOV     A,R3
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine112_0
   \   000003                ; // Fall through to label ??Subroutine112_0
    379          
    380          /*********************************************************************
    381           * @fn          ZDP_MatchDescReq
    382           *
    383           * @brief       This builds and send a Match_Desc_req message.  This
    384           *              function sends a broadcast or unicast message
    385           *              requesting the list of endpoint/interfaces that
    386           *              match profile ID and cluster IDs.
    387           *
    388           * @param       dstAddr - destination address
    389           * @param       nwkAddr - network address of interest
    390           * @param       ProfileID - Profile ID
    391           * @param       NumInClusters - number of input clusters
    392           * @param       InClusterList - input cluster ID list
    393           * @param       NumOutClusters - number of output clusters
    394           * @param       OutClusterList - output cluster ID list
    395           * @param       SecurityEnable - Security Options
    396           *
    397           * @return      afStatus_t
    398           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    399          afStatus_t ZDP_MatchDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_MatchDescReq:
    400                                          uint16 ProfileID,
    401                                          byte NumInClusters, cId_t *InClusterList,
    402                                          byte NumOutClusters, cId_t *OutClusterList,
    403                                          byte SecurityEnable )
    404          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine41 & 0xFFFF
    405            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_244:
   \   000008   7412         MOV     A,#0x12
   \   00000A   12....       LCALL   ?XSTACK_DISP0_8
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   F5..         MOV     ?V0 + 0,A
    406            // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    407            byte i, len = 2 + 2 + 1 + 1;  // nwkAddr+ProfileID+NumInClusters+NumOutClusters.
    408          
    409            (void)SecurityEnable;  // Intentionally unreferenced parameter
    410          
    411            len += (NumInClusters + NumOutClusters) * sizeof(uint16);
   \   000010   EE           MOV     A,R6
   \   000011   25..         ADD     A,?V0 + 0
   \   000013   C3           CLR     C
   \   000014   33           RLC     A
   \   000015   2406         ADD     A,#0x6
   \   000017   FF           MOV     R7,A
    412          
    413            if ( len >= ZDP_BUF_SZ-1 )
   \   000018   C3           CLR     C
   \   000019   944F         SUBB    A,#0x4f
   \   00001B   4005         JC      ??ZDP_MatchDescReq_0
    414            {
    415              return afStatus_MEM_FAIL;
   \   00001D   7910         MOV     R1,#0x10
   \   00001F   02....       LJMP    ??ZDP_MatchDescReq_1 & 0xFFFF
    416            }
    417          
    418            // The spec changed in Zigbee 2007 (2.4.3.1.7.1) to not allow sending
    419            // this command to 0xFFFF.  So, here we will filter this and replace
    420            // with 0xFFFD to only send to devices with RX ON.  This includes the
    421            // network address of interest.
    422            if ( ((dstAddr->addrMode == AddrBroadcast) || (dstAddr->addrMode == Addr16Bit))
    423                && (dstAddr->addr.shortAddr == NWK_BROADCAST_SHORTADDR_DEVALL) )
   \                     ??ZDP_MatchDescReq_0:
   \   000022   8A82         MOV     DPL,R2
   \   000024   8B83         MOV     DPH,R3
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F5..         MOV     ?V0 + 1,A
   \   000031   740F         MOV     A,#0xf
   \   000033   65..         XRL     A,?V0 + 1
   \   000035   6006         JZ      ??ZDP_MatchDescReq_2
   \   000037   7402         MOV     A,#0x2
   \   000039   65..         XRL     A,?V0 + 1
   \   00003B   7018         JNZ     ??ZDP_MatchDescReq_3
   \                     ??ZDP_MatchDescReq_2:
   \   00003D   8A82         MOV     DPL,R2
   \   00003F   8B83         MOV     DPH,R3
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F4           CPL     A
   \   000043   7003         JNZ     ??ZDP_MatchDescReq_4
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F4           CPL     A
   \                     ??ZDP_MatchDescReq_4:
   \   000048   700B         JNZ     ??ZDP_MatchDescReq_3
    424            {
    425              dstAddr->addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00004A   8A82         MOV     DPL,R2
   \   00004C   8B83         MOV     DPH,R3
   \   00004E   74FD         MOV     A,#-0x3
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   74FF         MOV     A,#-0x1
   \   000054   F0           MOVX    @DPTR,A
    426            }
    427            if ( nwkAddr == NWK_BROADCAST_SHORTADDR_DEVALL )
   \                     ??ZDP_MatchDescReq_3:
   \   000055   74FF         MOV     A,#-0x1
   \   000057   6C           XRL     A,R4
   \   000058   7003         JNZ     ??ZDP_MatchDescReq_5
   \   00005A   74FF         MOV     A,#-0x1
   \   00005C   6D           XRL     A,R5
   \                     ??ZDP_MatchDescReq_5:
   \   00005D   7004         JNZ     ??ZDP_MatchDescReq_6
    428            {
    429              nwkAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
   \   00005F   7CFD         MOV     R4,#-0x3
   \   000061   7DFF         MOV     R5,#-0x1
    430            }
    431          
    432            *pBuf++ = LO_UINT16( nwkAddr );   // NWKAddrOfInterest
   \                     ??ZDP_MatchDescReq_6:
   \   000063   EC           MOV     A,R4
   \   000064   8882         MOV     DPL,R0
   \   000066   8983         MOV     DPH,R1
   \   000068   F0           MOVX    @DPTR,A
   \   000069   A3           INC     DPTR
    433            *pBuf++ = HI_UINT16( nwkAddr );
   \   00006A   ED           MOV     A,R5
   \   00006B   12....       LCALL   ??Subroutine91_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   00006E   740E         MOV     A,#0xe
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   12....       LCALL   ?Subroutine25 & 0xFFFF
    434          
    435            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
    436            *pBuf++ = HI_UINT16( ProfileID );
   \                     ??CrossCallReturnLabel_21:
   \   000076   A3           INC     DPTR
    437          
    438            *pBuf++ = NumInClusters; // Input cluster list
   \   000077   EE           MOV     A,R6
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   08           INC     R0
   \   00007B   08           INC     R0
   \   00007C   08           INC     R0
   \   00007D   A983         MOV     R1,DPH
    439            if ( NumInClusters )
   \   00007F   6011         JZ      ??ZDP_MatchDescReq_7
    440            {
    441              for (i=0; i<NumInClusters; ++i)  {
   \   000081   75..00       MOV     ?V0 + 1,#0x0
   \   000084   7410         MOV     A,#0x10
   \   000086   12....       LCALL   ?XSTACK_DISP0_8
   \   000089   12....       LCALL   ?Subroutine27 & 0xFFFF
    442                *pBuf++ = LO_UINT16( InClusterList[i] );
   \                     ??CrossCallReturnLabel_25:
   \   00008C   12....       LCALL   ?Subroutine11 & 0xFFFF
    443                *pBuf++ = HI_UINT16( InClusterList[i] );
    444              }
    445            }
   \                     ??CrossCallReturnLabel_3:
   \   00008F   9E           SUBB    A,R6
   \   000090   40FA         JC      ??CrossCallReturnLabel_25
    446          
    447            *pBuf++ = NumOutClusters; // Output cluster list
   \                     ??ZDP_MatchDescReq_7:
   \   000092   8882         MOV     DPL,R0
   \   000094   8983         MOV     DPH,R1
   \   000096   E5..         MOV     A,?V0 + 0
   \   000098   12....       LCALL   ??Subroutine91_0 & 0xFFFF
    448            if ( NumOutClusters )
   \                     ??CrossCallReturnLabel_135:
   \   00009B   6012         JZ      ??ZDP_MatchDescReq_8
    449            {
    450              for (i=0; i<NumOutClusters; ++i)  {
   \   00009D   75..00       MOV     ?V0 + 1,#0x0
   \   0000A0   7413         MOV     A,#0x13
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   12....       LCALL   ?Subroutine27 & 0xFFFF
    451                *pBuf++ = LO_UINT16( OutClusterList[i] );
   \                     ??CrossCallReturnLabel_26:
   \   0000A8   12....       LCALL   ?Subroutine11 & 0xFFFF
    452                *pBuf++ = HI_UINT16( OutClusterList[i] );
    453              }
    454            }
   \                     ??CrossCallReturnLabel_4:
   \   0000AB   95..         SUBB    A,?V0 + 0
   \   0000AD   40F9         JC      ??CrossCallReturnLabel_26
    455          
    456            return fillAndSend( &ZDP_TransID, dstAddr, Match_Desc_req, len );
   \                     ??ZDP_MatchDescReq_8:
   \   0000AF                ; Setup parameters for call to function fillAndSend
   \   0000AF   75..06       MOV     ?V0 + 0,#0x6
   \   0000B2   75..00       MOV     ?V0 + 1,#0x0
   \   0000B5   78..         MOV     R0,#?V0 + 0
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BA   EF           MOV     A,R7
   \   0000BB   F9           MOV     R1,A
   \   0000BC   EA           MOV     A,R2
   \   0000BD   FC           MOV     R4,A
   \   0000BE   EB           MOV     A,R3
   \   0000BF   FD           MOV     R5,A
   \   0000C0   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000C2   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000C4   12....       LCALL   ??fillAndSend?relay
   \   0000C7   7402         MOV     A,#0x2
   \   0000C9   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_MatchDescReq_1:
   \   0000CC                REQUIRE ?Subroutine1
   \   0000CC                ; // Fall through to label ?Subroutine1
    457          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   E5..         MOV     A,?V0 + 1
   \   000002   C3           CLR     C
   \   000003   33           RLC     A
   \   000004   F5..         MOV     ?V0 + 2,A
   \   000006   E4           CLR     A
   \   000007   33           RLC     A
   \   000008   F5..         MOV     ?V0 + 3,A
   \   00000A   EC           MOV     A,R4
   \   00000B   25..         ADD     A,?V0 + 2
   \   00000D   F5..         MOV     ?V0 + 2,A
   \   00000F   ED           MOV     A,R5
   \   000010   35..         ADDC    A,?V0 + 3
   \   000012   F5..         MOV     ?V0 + 3,A
   \   000014   85..82       MOV     DPL,?V0 + 2
   \   000017   F583         MOV     DPH,A
   \   000019   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   00001C   85..82       MOV     DPL,?V0 + 2
   \   00001F   85..83       MOV     DPH,?V0 + 3
   \   000022   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000025   05..         INC     ?V0 + 1
   \   000027   E5..         MOV     A,?V0 + 1
   \   000029   C3           CLR     C
   \   00002A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine91_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   A882         MOV     R0,DPL
   \   000004   A983         MOV     R1,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine94_0
   \   000001                ; // Fall through to label ??Subroutine94_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine94_0:
   \   000000   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000003   08           INC     R0
   \   000004   A983         MOV     R1,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   EC           MOV     A,R4
   \   000006   8882         MOV     DPL,R0
   \   000008   8983         MOV     DPH,R1
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   A3           INC     DPTR
   \   00000C   ED           MOV     A,R5
   \   00000D   F0           MOVX    @DPTR,A
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000003   A882         MOV     R0,DPL
   \   000005   A983         MOV     R1,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   E9           MOV     A,R1
   \   000001                REQUIRE ??Subroutine110_0
   \   000001                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   FE           MOV     R6,A
   \   000001                REQUIRE ??Subroutine111_0
   \   000001                ; // Fall through to label ??Subroutine111_0
    458          
    459          /*********************************************************************
    460           * @fn          ZDP_SimpleDescReq
    461           *
    462           * @brief       This builds and send a NWK_Simple_Desc_req
    463           *              message.  This function sends unicast message to the
    464           *              destination device.
    465           *
    466           * @param       dstAddr - destination address
    467           * @param       nwkAddr - 16 bit address
    468           * @param       epIntf - endpoint/interface
    469           * @param       SecurityEnable - Security Options
    470           *
    471           * @return      afStatus_t
    472           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    473          afStatus_t ZDP_SimpleDescReq( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_SimpleDescReq:
    474                                              byte endPoint, byte SecurityEnable )
    475          
    476          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    477            (void)SecurityEnable;  // Intentionally unreferenced parameter
    478          
    479            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \   000005   12....       LCALL   ?Subroutine17 & 0xFFFF
    480            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
    481            ZDP_TmpBuf[2] = endPoint;
   \                     ??CrossCallReturnLabel_10:
   \   000008   12....       LCALL   ?Subroutine28 & 0xFFFF
    482          
    483            return fillAndSend( &ZDP_TransID, dstAddr, Simple_Desc_req, 3 );
   \                     ??CrossCallReturnLabel_31:
   \   00000B                ; Setup parameters for call to function fillAndSend
   \   00000B   75..04       MOV     ?V0 + 0,#0x4
   \   00000E   75..00       MOV     ?V0 + 1,#0x0
   \   000011   78..         MOV     R0,#?V0 + 0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7903         MOV     R1,#0x3
   \   000018   02....       LJMP    ??Subroutine84_0 & 0xFFFF
    484          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000003   A3           INC     DPTR
   \   000004   E9           MOV     A,R1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET
    485          
    486          /*********************************************************************
    487           * @fn          ZDP_UserDescSet
    488           *
    489           * @brief       This builds and send a User_Desc_set message to set
    490           *              the user descriptor.  This function sends unicast
    491           *              message to the destination device.
    492           *
    493           * @param       dstAddr - destination address
    494           * @param       nwkAddr - 16 bit address
    495           * @param       UserDescriptor - user descriptor
    496           * @param       SecurityEnable - Security Options
    497           *
    498           * @return      afStatus_t
    499           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    500          afStatus_t ZDP_UserDescSet( zAddrType_t *dstAddr, uint16 nwkAddr,
   \                     ZDP_UserDescSet:
    501                                    UserDescriptorFormat_t *UserDescriptor,
    502                                    byte SecurityEnable )
    503          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 2,R2
   \   000007   8B..         MOV     ?V0 + 3,R3
    504            uint8 *pBuf = ZDP_TmpBuf;
   \   000009   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   00000C   7413         MOV     A,#0x13
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?Subroutine39 & 0xFFFF
    505            byte len = (UserDescriptor->len < AF_MAX_USER_DESCRIPTOR_LEN) ?
    506                        UserDescriptor->len : AF_MAX_USER_DESCRIPTOR_LEN;
   \                     ??CrossCallReturnLabel_49:
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F8           MOV     R0,A
   \   00001A   C3           CLR     C
   \   00001B   9410         SUBB    A,#0x10
   \   00001D   5004         JNC     ??ZDP_UserDescSet_0
   \   00001F   88..         MOV     ?V0 + 0,R0
   \   000021   8003         SJMP    ??ZDP_UserDescSet_1
   \                     ??ZDP_UserDescSet_0:
   \   000023   75..10       MOV     ?V0 + 0,#0x10
    507            byte addrLen = 2;
    508          
    509            (void)SecurityEnable;  // Intentionally unreferenced parameter
    510          
    511            *pBuf++ = LO_UINT16( nwkAddr );
   \                     ??ZDP_UserDescSet_1:
   \   000026   EC           MOV     A,R4
   \   000027   85..82       MOV     DPL,?V0 + 4
   \   00002A   85..83       MOV     DPH,?V0 + 5
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
    512            *pBuf++ = HI_UINT16( nwkAddr );
   \   00002F   ED           MOV     A,R5
   \   000030   F0           MOVX    @DPTR,A
   \   000031   A3           INC     DPTR
    513          
    514            *pBuf++ = len;
   \   000032   E5..         MOV     A,?V0 + 0
   \   000034   F0           MOVX    @DPTR,A
   \   000035   A3           INC     DPTR
   \   000036   8582..       MOV     ?V0 + 4,DPL
   \   000039   8583..       MOV     ?V0 + 5,DPH
    515            addrLen = 3;
    516          
    517            pBuf = osal_memcpy( pBuf, UserDescriptor->desc, len );
    518            osal_memset( pBuf, AF_USER_DESCRIPTOR_FILL, AF_MAX_USER_DESCRIPTOR_LEN-len );
   \   00003C                ; Setup parameters for call to function osal_memset
   \   00003C   F5..         MOV     ?V0 + 6,A
   \   00003E   7410         MOV     A,#0x10
   \   000040   C3           CLR     C
   \   000041   95..         SUBB    A,?V0 + 6
   \   000043   FC           MOV     R4,A
   \   000044   95E0         SUBB    A,0xE0 /* A   */
   \   000046   FD           MOV     R5,A
   \   000047   7920         MOV     R1,#0x20
   \   000049   E9           MOV     A,R1
   \   00004A   C0E0         PUSH    A
   \   00004C   EC           MOV     A,R4
   \   00004D   FE           MOV     R6,A
   \   00004E   ED           MOV     A,R5
   \   00004F   FF           MOV     R7,A
   \   000050                ; Setup parameters for call to function osal_memcpy
   \   000050   8A82         MOV     DPL,R2
   \   000052   8B83         MOV     DPH,R3
   \   000054   A3           INC     DPTR
   \   000055   A982         MOV     R1,DPL
   \   000057   AA83         MOV     R2,DPH
   \   000059   89..         MOV     ?V0 + 8,R1
   \   00005B   8A..         MOV     ?V0 + 9,R2
   \   00005D   75..00       MOV     ?V0 + 10,#0x0
   \   000060   78..         MOV     R0,#?V0 + 8
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000065   AC..         MOV     R4,?V0 + 6
   \   000067   7D00         MOV     R5,#0x0
   \   000069   AA..         MOV     R2,?V0 + 4
   \   00006B   AB..         MOV     R3,?V0 + 5
   \   00006D   12....       LCALL   ??osal_memcpy?relay
   \   000070   7403         MOV     A,#0x3
   \   000072   12....       LCALL   ?DEALLOC_XSTACK8
   \   000075   EE           MOV     A,R6
   \   000076   FC           MOV     R4,A
   \   000077   EF           MOV     A,R7
   \   000078   FD           MOV     R5,A
   \   000079   D0E0         POP     A
   \   00007B   F9           MOV     R1,A
   \   00007C   12....       LCALL   ??osal_memset?relay
    519          
    520            return fillAndSend( &ZDP_TransID, dstAddr, User_Desc_set, (AF_MAX_USER_DESCRIPTOR_LEN + addrLen) );
   \   00007F                ; Setup parameters for call to function fillAndSend
   \   00007F   75..14       MOV     ?V0 + 4,#0x14
   \   000082   75..00       MOV     ?V0 + 5,#0x0
   \   000085   78..         MOV     R0,#?V0 + 4
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008A   7913         MOV     R1,#0x13
   \   00008C   AC..         MOV     R4,?V0 + 2
   \   00008E   AD..         MOV     R5,?V0 + 3
   \   000090   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000092   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000094   12....       LCALL   ??fillAndSend?relay
   \   000097   7402         MOV     A,#0x2
   \   000099   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009C   7F0B         MOV     R7,#0xb
   \   00009E   02....       LJMP    ?BANKED_LEAVE_XDATA
    521          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_261:
   \   000003   E8           MOV     A,R0
   \   000004   FA           MOV     R2,A
   \   000005   E9           MOV     A,R1
   \   000006   FB           MOV     R3,A
   \   000007   22           RET
    522          
    523          /*********************************************************************
    524           * @fn          ZDP_ServerDiscReq
    525           *
    526           * @brief       Build and send a Server_Discovery_req request message.
    527           *
    528           * @param       serverMask - 16-bit bit-mask of server services being sought.
    529           * @param       SecurityEnable - Security Options
    530           *
    531           * @return      afStatus_t
    532           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    533          afStatus_t ZDP_ServerDiscReq( uint16 serverMask, byte SecurityEnable )
   \                     ZDP_ServerDiscReq:
    534          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine41 & 0xFFFF
    535            uint8 *pBuf = ZDP_TmpBuf;
    536            zAddrType_t dstAddr;
    537          
    538            dstAddr.addrMode = AddrBroadcast;
   \                     ??CrossCallReturnLabel_245:
   \   00000D   7408         MOV     A,#0x8
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   12....       LCALL   ?Subroutine50 & 0xFFFF
    539            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    540          
    541            *pBuf++ = LO_UINT16( serverMask );
   \                     ??CrossCallReturnLabel_69:
   \   000015   EA           MOV     A,R2
   \   000016   8882         MOV     DPL,R0
   \   000018   8983         MOV     DPH,R1
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
    542            *pBuf = HI_UINT16( serverMask );
   \   00001C   EB           MOV     A,R3
   \   00001D   F0           MOVX    @DPTR,A
    543          
    544            FillAndSendTxOptions( &ZDP_TransID, &dstAddr, Server_Discovery_req, 2,
    545                       ((SecurityEnable) ? AF_EN_SECURITY : AF_TX_OPTIONS_NONE) );
   \   00001E   EE           MOV     A,R6
   \   00001F   90....       MOV     DPTR,#ZDP_TxOptions
   \   000022   6004         JZ      ??ZDP_ServerDiscReq_0
   \   000024   7440         MOV     A,#0x40
   \   000026   8001         SJMP    ??ZDP_ServerDiscReq_1
   \                     ??ZDP_ServerDiscReq_0:
   \   000028   E4           CLR     A
   \                     ??ZDP_ServerDiscReq_1:
   \   000029   F0           MOVX    @DPTR,A
   \   00002A                ; Setup parameters for call to function fillAndSend
   \   00002A   75..15       MOV     ?V0 + 0,#0x15
   \   00002D   75..00       MOV     ?V0 + 1,#0x0
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7902         MOV     R1,#0x2
   \   000037   E9           MOV     A,R1
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   AC82         MOV     R4,DPL
   \   00003D   AD83         MOV     R5,DPH
   \   00003F   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000041   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000043   12....       LCALL   ??fillAndSend?relay
   \   000046   7402         MOV     A,#0x2
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004B   90....       MOV     DPTR,#ZDP_TxOptions
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
   \   000050   02....       LJMP    ??Subroutine88_0 & 0xFFFF
    546          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET
    547          
    548          /*********************************************************************
    549           * @fn          ZDP_DeviceAnnce
    550           *
    551           * @brief       This builds and send a Device_Annce message.  This
    552           *              function sends a broadcast message.
    553           *
    554           * @param       nwkAddr - 16 bit address of the device
    555           * @param       IEEEAddr - 64 bit address of the device
    556           * @param       capabilities - device capabilities.  This field is only
    557           *                 sent for v1.1 networks.
    558           * @param       SecurityEnable - Security Options
    559           *
    560           * @return      afStatus_t
    561           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    562          afStatus_t ZDP_DeviceAnnce( uint16 nwkAddr, uint8 *IEEEAddr,
   \                     ZDP_DeviceAnnce:
    563                                        byte capabilities, byte SecurityEnable )
    564          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
    565            zAddrType_t dstAddr;
    566            uint8 len;
    567          
    568            (void)SecurityEnable;  // Intentionally unreferenced parameter
    569          
    570            dstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00000C   7408         MOV     A,#0x8
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   12....       LCALL   ?Subroutine50 & 0xFFFF
    571            dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
    572          
    573            ZDP_TmpBuf[0] = LO_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_70:
   \   000014   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_155:
   \   000017   EA           MOV     A,R2
   \   000018   12....       LCALL   ?Subroutine29 & 0xFFFF
    574            ZDP_TmpBuf[1] = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_117:
   \   00001B   EB           MOV     A,R3
   \   00001C   F0           MOVX    @DPTR,A
    575            osal_cpyExtAddr( &ZDP_TmpBuf[2], IEEEAddr );
   \   00001D                ; Setup parameters for call to function sAddrExtCpy
   \   00001D   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000020   E0           MOVX    A,@DPTR
   \   000021   2402         ADD     A,#0x2
   \   000023   FA           MOV     R2,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   3400         ADDC    A,#0x0
   \   000028   FB           MOV     R3,A
   \   000029   12....       LCALL   ??sAddrExtCpy?relay
    576            len = 2 + Z_EXTADDR_LEN;
    577          
    578            ZDP_TmpBuf[10] = capabilities;
   \   00002C   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_267:
   \   00002F   C8           XCH     A,R0
   \   000030   240A         ADD     A,#0xa
   \   000032   F582         MOV     DPL,A
   \   000034   E8           MOV     A,R0
   \   000035   12....       LCALL   ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000038   EE           MOV     A,R6
   \   000039   F0           MOVX    @DPTR,A
    579            len++;
    580          
    581            return fillAndSend( &ZDP_TransID, &dstAddr, Device_annce, len );
   \   00003A                ; Setup parameters for call to function fillAndSend
   \   00003A   75..13       MOV     ?V0 + 0,#0x13
   \   00003D   75..00       MOV     ?V0 + 1,#0x0
   \   000040   78..         MOV     R0,#?V0 + 0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   790B         MOV     R1,#0xb
   \   000047   80..         SJMP    ?Subroutine7
    582          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                REQUIRE ??Subroutine87_0
   \   000001                ; // Fall through to label ??Subroutine87_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine87_0:
   \   000000   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine95_0
   \   000003                ; // Fall through to label ??Subroutine95_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine95_0:
   \   000000   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine101_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine113_0
   \   000003                ; // Fall through to label ??Subroutine113_0
    583          
    584          #if defined ( ZIGBEE_CHILD_AGING )
    585          /*********************************************************************
    586           * @fn          ZDP_EndDeviceTimeoutReq
    587           *
    588           * @brief       This builds and send an End_Device_Timeout_req message.
    589           *
    590           * @param       parentAddr - destination address
    591           * @param       reqTimeout - Timeout value the device is requesting
    592           * @param       SecurityEnable - Security Options
    593           *
    594           * @return      afStatus_t
    595           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    596          afStatus_t ZDP_EndDeviceTimeoutReq( uint16 parentAddr, uint16 reqTimeout,
   \                     ZDP_EndDeviceTimeoutReq:
    597                                              uint8 SecurityEnable )
    598          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EC           MOV     A,R4
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
    599            uint8 *pBuf = ZDP_TmpBuf;
    600            uint8 len = Z_EXTADDR_LEN + 2;  // Device_IEEEAddress + reqTimeout.
    601            zAddrType_t dstAddr;
    602          
    603            (void)SecurityEnable;  // Intentionally unreferenced parameter
    604          
    605            dstAddr.addrMode = Addr16Bit;
   \   00000E   7408         MOV     A,#0x8
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   12....       LCALL   ?Subroutine51 & 0xFFFF
    606            dstAddr.addr.shortAddr = parentAddr;
    607          
    608            pBuf = osal_cpyExtAddr( pBuf, saveExtAddr );
   \                     ??CrossCallReturnLabel_72:
   \   000016                ; Setup parameters for call to function sAddrExtCpy
   \   000016   7C..         MOV     R4,#saveExtAddr & 0xff
   \   000018   7D..         MOV     R5,#(saveExtAddr >> 8) & 0xff
   \   00001A   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   00001D   12....       LCALL   ??sAddrExtCpy?relay
   \   000020   8A82         MOV     DPL,R2
   \   000022   8B83         MOV     DPH,R3
    609          
    610            *pBuf++ = LO_UINT16( reqTimeout );
   \   000024   EE           MOV     A,R6
   \   000025   F0           MOVX    @DPTR,A
   \   000026   A3           INC     DPTR
    611            *pBuf++ = HI_UINT16( reqTimeout );
   \   000027   EF           MOV     A,R7
   \   000028   F0           MOVX    @DPTR,A
    612          
    613            return fillAndSend( &ZDP_TransID, &dstAddr, End_Device_Timeout_req, len );
   \   000029                ; Setup parameters for call to function fillAndSend
   \   000029   75..1F       MOV     ?V0 + 0,#0x1f
   \   00002C   75..00       MOV     ?V0 + 1,#0x0
   \   00002F   78..         MOV     R0,#?V0 + 0
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000034   790A         MOV     R1,#0xa
   \   000036                REQUIRE ?Subroutine7
   \   000036                ; // Fall through to label ?Subroutine7
    614          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine97_0
   \   000003                ; // Fall through to label ??Subroutine97_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine97_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET
    615          #endif // ZIGBEE_CHILD_AGING
    616          
    617          /*********************************************************************
    618           * Address Responses
    619           */
    620          
    621          /*********************************************************************
    622           * @fn      zdpProcessAddrReq
    623           *
    624           * @brief   Process an incoming NWK_addr_req or IEEE_addr_req message and then
    625           *          build and send a corresponding NWK_addr_rsp or IEEE_addr_rsp msg.
    626           *
    627           * @param   inMsg - incoming message
    628           *
    629           * @return  none
    630           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    631          void zdpProcessAddrReq( zdoIncomingMsg_t *inMsg )
   \                     zdpProcessAddrReq:
    632          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 8,R2
   \   00000C   8B..         MOV     ?V0 + 9,R3
    633            associated_devices_t *pAssoc;
    634            uint8 reqType;
    635            uint16 aoi = INVALID_NODE_ADDR;
   \   00000E   75..FE       MOV     ?V0 + 2,#-0x2
   \   000011   75..FF       MOV     ?V0 + 3,#-0x1
    636            uint8 *ieee = NULL;
   \   000014   75..00       MOV     ?V0 + 0,#0x0
   \   000017   75..00       MOV     ?V0 + 1,#0x0
    637          
    638            reqType = inMsg->asdu[(inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 ) ];
   \   00001A   EA           MOV     A,R2
   \   00001B   240C         ADD     A,#0xc
   \   00001D   F5..         MOV     ?V0 + 10,A
   \   00001F   EB           MOV     A,R3
   \   000020   3400         ADDC    A,#0x0
   \   000022   F5..         MOV     ?V0 + 11,A
   \   000024   85..82       MOV     DPL,?V0 + 10
   \   000027   F583         MOV     DPH,A
   \   000029   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   00002C   4B           ORL     A,R3
   \   00002D   7004         JNZ     ??zdpProcessAddrReq_0
   \   00002F   7C08         MOV     R4,#0x8
   \   000031   8002         SJMP    ??zdpProcessAddrReq_1
   \                     ??zdpProcessAddrReq_0:
   \   000033   7C02         MOV     R4,#0x2
   \                     ??zdpProcessAddrReq_1:
   \   000035   E5..         MOV     A,?V0 + 8
   \   000037   2413         ADD     A,#0x13
   \   000039   F5..         MOV     ?V0 + 12,A
   \   00003B   E5..         MOV     A,?V0 + 9
   \   00003D   3400         ADDC    A,#0x0
   \   00003F   F5..         MOV     ?V0 + 13,A
   \   000041   85..82       MOV     DPL,?V0 + 12
   \   000044   F583         MOV     DPH,A
   \   000046   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000049   2C           ADD     A,R4
   \   00004A   F582         MOV     DPL,A
   \   00004C   E9           MOV     A,R1
   \   00004D   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000050   F5..         MOV     ?V0 + 4,A
    639          
    640            if ( inMsg->clusterID == NWK_addr_req )
   \   000052   EA           MOV     A,R2
   \   000053   4B           ORL     A,R3
   \   000054   704B         JNZ     ??zdpProcessAddrReq_2
    641          
    642            {
    643              ieee = inMsg->asdu;
   \   000056   88..         MOV     ?V0 + 0,R0
   \   000058   89..         MOV     ?V0 + 1,R1
    644          
    645              if ( osal_ExtAddrEqual( saveExtAddr, ieee ) )
   \   00005A                ; Setup parameters for call to function sAddrExtCmp
   \   00005A   AC..         MOV     R4,?V0 + 0
   \   00005C   AD..         MOV     R5,?V0 + 1
   \   00005E   7A..         MOV     R2,#saveExtAddr & 0xff
   \   000060   7B..         MOV     R3,#(saveExtAddr >> 8) & 0xff
   \   000062   12....       LCALL   ??sAddrExtCmp?relay
   \   000065   E9           MOV     A,R1
   \   000066   6006         JZ      ??zdpProcessAddrReq_3
    646              {
    647                aoi = ZDAppNwkAddr.addr.shortAddr;
   \   000068   12....       LCALL   ?Subroutine18 & 0xFFFF
    648              }
   \                     ??CrossCallReturnLabel_127:
   \   00006B   02....       LJMP    ??zdpProcessAddrReq_4 & 0xFFFF
    649              // Handle response for sleeping end devices
    650              else if ( (ZSTACK_ROUTER_BUILD)
    651                && (((pAssoc = AssocGetWithExt( ieee )) != NULL)
    652                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_3:
   \   00006E                ; Setup parameters for call to function AssocGetWithExt
   \   00006E   AA..         MOV     R2,?V0 + 0
   \   000070   AB..         MOV     R3,?V0 + 1
   \   000072   12....       LCALL   ??AssocGetWithExt?relay
   \   000075   8A..         MOV     ?V0 + 6,R2
   \   000077   8B..         MOV     ?V0 + 7,R3
   \   000079   A8..         MOV     R0,?V0 + 6
   \   00007B   A9..         MOV     R1,?V0 + 7
   \   00007D   E8           MOV     A,R0
   \   00007E   49           ORL     A,R1
   \   00007F   7003         JNZ     $+5
   \   000081   02....       LJMP    ??zdpProcessAddrReq_5 & 0xFFFF
   \   000084   8882         MOV     DPL,R0
   \   000086   8983         MOV     DPH,R1
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   6401         XRL     A,#0x1
   \   00008F   6003         JZ      $+5
   \   000091   02....       LJMP    ??zdpProcessAddrReq_5 & 0xFFFF
    653              {
    654                aoi = pAssoc->shortAddr;
   \   000094   8882         MOV     DPL,R0
   \   000096   8983         MOV     DPH,R1
   \   000098   12....       LCALL   ??Subroutine89_0 & 0xFFFF
    655                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??CrossCallReturnLabel_124:
   \   00009B   E5..         MOV     A,?V0 + 4
   \   00009D   707C         JNZ     ??zdpProcessAddrReq_6
   \   00009F   807D         SJMP    ??zdpProcessAddrReq_4
    656                  reqType = 0xFF; // Force Invalid
    657              }
    658            }
    659            else  // if ( inMsg->clusterID == IEEE_addr_req )
    660            {
    661              aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \                     ??zdpProcessAddrReq_2:
   \   0000A1   8882         MOV     DPL,R0
   \   0000A3   8983         MOV     DPH,R1
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   FA           MOV     R2,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   E0           MOVX    A,@DPTR
   \   0000A9   F9           MOV     R1,A
   \   0000AA   EA           MOV     A,R2
   \   0000AB   2400         ADD     A,#0x0
   \   0000AD   F5..         MOV     ?V0 + 2,A
   \   0000AF   E4           CLR     A
   \   0000B0   39           ADDC    A,R1
   \   0000B1   F5..         MOV     ?V0 + 3,A
    662          
    663              if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   0000B3   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0000B6   E0           MOVX    A,@DPTR
   \   0000B7   65..         XRL     A,?V0 + 2
   \   0000B9   7004         JNZ     ??zdpProcessAddrReq_7
   \   0000BB   A3           INC     DPTR
   \   0000BC   E0           MOVX    A,@DPTR
   \   0000BD   65..         XRL     A,?V0 + 3
   \                     ??zdpProcessAddrReq_7:
   \   0000BF   7008         JNZ     ??zdpProcessAddrReq_8
    664              {
    665                ieee = saveExtAddr;
   \   0000C1   75....       MOV     ?V0 + 0,#saveExtAddr & 0xff
   \   0000C4   75....       MOV     ?V0 + 1,#(saveExtAddr >> 8) & 0xff
   \   0000C7   8055         SJMP    ??zdpProcessAddrReq_4
    666              }
    667              else if ( (ZSTACK_ROUTER_BUILD)
    668                && (((pAssoc = AssocGetWithShort( aoi )) != NULL)
    669                       && (pAssoc->nodeRelation == CHILD_RFD)) )
   \                     ??zdpProcessAddrReq_8:
   \   0000C9                ; Setup parameters for call to function AssocGetWithShort
   \   0000C9   AB..         MOV     R3,?V0 + 3
   \   0000CB   12....       LCALL   ??AssocGetWithShort?relay
   \   0000CE   8A..         MOV     ?V0 + 6,R2
   \   0000D0   8B..         MOV     ?V0 + 7,R3
   \   0000D2   A8..         MOV     R0,?V0 + 6
   \   0000D4   A9..         MOV     R1,?V0 + 7
   \   0000D6   E8           MOV     A,R0
   \   0000D7   49           ORL     A,R1
   \   0000D8   6056         JZ      ??zdpProcessAddrReq_5
   \   0000DA   8882         MOV     DPL,R0
   \   0000DC   8983         MOV     DPH,R1
   \   0000DE   A3           INC     DPTR
   \   0000DF   A3           INC     DPTR
   \   0000E0   A3           INC     DPTR
   \   0000E1   A3           INC     DPTR
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   6401         XRL     A,#0x1
   \   0000E5   7049         JNZ     ??zdpProcessAddrReq_5
    670              {
    671                AddrMgrEntry_t addrEntry;
    672                addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   0000E7   7401         MOV     A,#0x1
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   E4           CLR     A
   \   0000ED   12....       LCALL   ?Subroutine58 & 0xFFFF
    673                addrEntry.index = pAssoc->addrIdx;
   \                     ??CrossCallReturnLabel_85:
   \   0000F0   A3           INC     DPTR
   \   0000F1   A3           INC     DPTR
   \   0000F2   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   0000F5   740C         MOV     A,#0xc
   \   0000F7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FA   12....       LCALL   ?Subroutine56 & 0xFFFF
    674                if ( AddrMgrEntryGet( &addrEntry ) )
   \                     ??CrossCallReturnLabel_233:
   \   0000FD                ; Setup parameters for call to function AddrMgrEntryGet
   \   0000FD   7401         MOV     A,#0x1
   \   0000FF   12....       LCALL   ?XSTACK_DISP0_8
   \   000102   AA82         MOV     R2,DPL
   \   000104   AB83         MOV     R3,DPH
   \   000106   12....       LCALL   ??AddrMgrEntryGet?relay
   \   000109   E9           MOV     A,R1
   \   00010A   600B         JZ      ??zdpProcessAddrReq_9
    675                {
    676                  ieee = addrEntry.extAddr;
   \   00010C   7404         MOV     A,#0x4
   \   00010E   12....       LCALL   ?XSTACK_DISP0_8
   \   000111   8582..       MOV     ?V0 + 0,DPL
   \   000114   8583..       MOV     ?V0 + 1,DPH
    677                }
    678          
    679                if ( reqType != ZDP_ADDR_REQTYPE_SINGLE )
   \                     ??zdpProcessAddrReq_9:
   \   000117   E5..         MOV     A,?V0 + 4
   \   000119   6003         JZ      ??zdpProcessAddrReq_4
    680                  reqType = 0xFF; // Force Invalid
   \                     ??zdpProcessAddrReq_6:
   \   00011B   75..FF       MOV     ?V0 + 4,#-0x1
    681              }
    682            }
    683          
    684            if ( ((aoi != INVALID_NODE_ADDR) && (ieee != NULL)) || (inMsg->wasBroadcast == FALSE) )
   \                     ??zdpProcessAddrReq_4:
   \   00011E   74FE         MOV     A,#-0x2
   \   000120   65..         XRL     A,?V0 + 2
   \   000122   7004         JNZ     ??zdpProcessAddrReq_10
   \   000124   74FF         MOV     A,#-0x1
   \   000126   65..         XRL     A,?V0 + 3
   \                     ??zdpProcessAddrReq_10:
   \   000128   6006         JZ      ??zdpProcessAddrReq_5
   \   00012A   E5..         MOV     A,?V0 + 0
   \   00012C   45..         ORL     A,?V0 + 1
   \   00012E   7010         JNZ     ??zdpProcessAddrReq_11
   \                     ??zdpProcessAddrReq_5:
   \   000130   E5..         MOV     A,?V0 + 8
   \   000132   240B         ADD     A,#0xb
   \   000134   F582         MOV     DPL,A
   \   000136   E5..         MOV     A,?V0 + 9
   \   000138   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   00013B   6003         JZ      $+5
   \   00013D   02....       LJMP    ??zdpProcessAddrReq_12 & 0xFFFF
    685            {
    686              uint8 stat;
    687              uint8 *pBuf = ZDP_TmpBuf;
   \                     ??zdpProcessAddrReq_11:
   \   000140   12....       LCALL   ?Subroutine32 & 0xFFFF
    688              // Status + IEEE-Addr + Nwk-Addr.
    689              uint8 len = 1 + Z_EXTADDR_LEN + 2;
   \                     ??CrossCallReturnLabel_242:
   \   000143   75..0B       MOV     ?V0 + 5,#0xb
    690          
    691              // If aoi and iee are both setup, we found results
    692              if ( (aoi != INVALID_NODE_ADDR) && (ieee != NULL) )
   \   000146   74FE         MOV     A,#-0x2
   \   000148   65..         XRL     A,?V0 + 2
   \   00014A   7004         JNZ     ??zdpProcessAddrReq_13
   \   00014C   74FF         MOV     A,#-0x1
   \   00014E   65..         XRL     A,?V0 + 3
   \                     ??zdpProcessAddrReq_13:
   \   000150   601A         JZ      ??zdpProcessAddrReq_14
   \   000152   E5..         MOV     A,?V0 + 0
   \   000154   45..         ORL     A,?V0 + 1
   \   000156   6014         JZ      ??zdpProcessAddrReq_14
    693              {
    694                stat = ((reqType == ZDP_ADDR_REQTYPE_SINGLE) || (reqType == ZDP_ADDR_REQTYPE_EXTENDED))
    695                              ? ZDP_SUCCESS : ZDP_INVALID_REQTYPE;
   \   000158   E5..         MOV     A,?V0 + 4
   \   00015A   6006         JZ      ??zdpProcessAddrReq_15
   \   00015C   7401         MOV     A,#0x1
   \   00015E   65..         XRL     A,?V0 + 4
   \   000160   7005         JNZ     ??zdpProcessAddrReq_16
   \                     ??zdpProcessAddrReq_15:
   \   000162   75..00       MOV     ?V0 + 6,#0x0
   \   000165   801F         SJMP    ??zdpProcessAddrReq_17
   \                     ??zdpProcessAddrReq_16:
   \   000167   75..80       MOV     ?V0 + 6,#-0x80
   \   00016A   801A         SJMP    ??zdpProcessAddrReq_17
    696              }
    697              else
    698              {
    699                // not found and the req was unicast to this device
    700                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??zdpProcessAddrReq_14:
   \   00016C   75..81       MOV     ?V0 + 6,#-0x7f
    701          
    702                // Fill in the missing field with this device's address
    703                if ( inMsg->clusterID == NWK_addr_req )
   \   00016F   85..82       MOV     DPL,?V0 + 10
   \   000172   85..83       MOV     DPH,?V0 + 11
   \   000175   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000178   49           ORL     A,R1
   \   000179   7005         JNZ     ??zdpProcessAddrReq_18
    704                {
    705                  aoi = ZDAppNwkAddr.addr.shortAddr;
   \   00017B   12....       LCALL   ?Subroutine18 & 0xFFFF
    706                }
   \                     ??CrossCallReturnLabel_128:
   \   00017E   8006         SJMP    ??zdpProcessAddrReq_17
    707                else
    708                {
    709                  ieee = saveExtAddr;
   \                     ??zdpProcessAddrReq_18:
   \   000180   75....       MOV     ?V0 + 0,#saveExtAddr & 0xff
   \   000183   75....       MOV     ?V0 + 1,#(saveExtAddr >> 8) & 0xff
    710                }
    711              }
    712          
    713              *pBuf++ = stat;
   \                     ??zdpProcessAddrReq_17:
   \   000186   8E82         MOV     DPL,R6
   \   000188   8F83         MOV     DPH,R7
   \   00018A   E5..         MOV     A,?V0 + 6
   \   00018C   F0           MOVX    @DPTR,A
   \   00018D   A3           INC     DPTR
    714          
    715              pBuf = osal_cpyExtAddr( pBuf, ieee );
   \   00018E                ; Setup parameters for call to function sAddrExtCpy
   \   00018E   AC..         MOV     R4,?V0 + 0
   \   000190   AD..         MOV     R5,?V0 + 1
   \   000192   AA82         MOV     R2,DPL
   \   000194   AB83         MOV     R3,DPH
   \   000196   12....       LCALL   ??sAddrExtCpy?relay
   \   000199   8A..         MOV     ?V0 + 0,R2
   \   00019B   8B..         MOV     ?V0 + 1,R3
   \   00019D   AE..         MOV     R6,?V0 + 0
   \   00019F   AF..         MOV     R7,?V0 + 1
    716          
    717              *pBuf++ = LO_UINT16( aoi );
   \   0001A1   8E82         MOV     DPL,R6
   \   0001A3   8F83         MOV     DPH,R7
   \   0001A5   E5..         MOV     A,?V0 + 2
   \   0001A7   F0           MOVX    @DPTR,A
   \   0001A8   A3           INC     DPTR
    718              *pBuf++ = HI_UINT16( aoi );
   \   0001A9   E5..         MOV     A,?V0 + 3
   \   0001AB   12....       LCALL   ??Subroutine100_0 & 0xFFFF
    719          
    720              if ( ZSTACK_ROUTER_BUILD )
    721              {
    722                if ( (reqType == ZDP_ADDR_REQTYPE_EXTENDED) && (aoi == ZDAppNwkAddr.addr.shortAddr)
    723                     && (stat == ZDP_SUCCESS) )
   \                     ??CrossCallReturnLabel_180:
   \   0001AE   7401         MOV     A,#0x1
   \   0001B0   65..         XRL     A,?V0 + 4
   \   0001B2   6003         JZ      $+5
   \   0001B4   02....       LJMP    ??zdpProcessAddrReq_19 & 0xFFFF
   \   0001B7   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0001BA   E0           MOVX    A,@DPTR
   \   0001BB   65..         XRL     A,?V0 + 2
   \   0001BD   7004         JNZ     ??zdpProcessAddrReq_20
   \   0001BF   A3           INC     DPTR
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   65..         XRL     A,?V0 + 3
   \                     ??zdpProcessAddrReq_20:
   \   0001C3   6003         JZ      $+5
   \   0001C5   02....       LJMP    ??zdpProcessAddrReq_19 & 0xFFFF
   \   0001C8   E5..         MOV     A,?V0 + 6
   \   0001CA   6003         JZ      $+5
   \   0001CC   02....       LJMP    ??zdpProcessAddrReq_19 & 0xFFFF
    724                {
    725                  uint8  cnt = 0;
   \   0001CF   85..82       MOV     DPL,?XSP + 0
   \   0001D2   85..83       MOV     DPH,?XSP + 1
   \   0001D5   E4           CLR     A
   \   0001D6   F0           MOVX    @DPTR,A
    726                  uint16 *list = AssocMakeList( &cnt );
   \   0001D7                ; Setup parameters for call to function AssocMakeList
   \   0001D7   AA82         MOV     R2,DPL
   \   0001D9   AB83         MOV     R3,DPH
   \   0001DB   12....       LCALL   ??AssocMakeList?relay
    727          
    728                  if ( list != NULL )
   \   0001DE   8E82         MOV     DPL,R6
   \   0001E0   8F83         MOV     DPH,R7
   \   0001E2   A3           INC     DPTR
   \   0001E3   A983         MOV     R1,DPH
   \   0001E5   EA           MOV     A,R2
   \   0001E6   4B           ORL     A,R3
   \   0001E7   7003         JNZ     $+5
   \   0001E9   02....       LJMP    ??zdpProcessAddrReq_21 & 0xFFFF
    729                  {
    730                    byte idx = inMsg->asdu[(((inMsg->clusterID == NWK_addr_req) ? Z_EXTADDR_LEN : sizeof( uint16 )) + 1)];
   \   0001EC   85..82       MOV     DPL,?V0 + 10
   \   0001EF   85..83       MOV     DPH,?V0 + 11
   \   0001F2   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0001F5   EC           MOV     A,R4
   \   0001F6   4D           ORL     A,R5
   \   0001F7   7004         JNZ     ??zdpProcessAddrReq_22
   \   0001F9   7C08         MOV     R4,#0x8
   \   0001FB   8002         SJMP    ??zdpProcessAddrReq_23
   \                     ??zdpProcessAddrReq_22:
   \   0001FD   7C02         MOV     R4,#0x2
   \                     ??zdpProcessAddrReq_23:
   \   0001FF   85..82       MOV     DPL,?V0 + 12
   \   000202   85..83       MOV     DPH,?V0 + 13
   \   000205   E0           MOVX    A,@DPTR
   \   000206   2C           ADD     A,R4
   \   000207   F5..         MOV     ?V0 + 0,A
   \   000209   A3           INC     DPTR
   \   00020A   E0           MOVX    A,@DPTR
   \   00020B   3400         ADDC    A,#0x0
   \   00020D   85..82       MOV     DPL,?V0 + 0
   \   000210   F583         MOV     DPH,A
   \   000212   A3           INC     DPTR
   \   000213   E0           MOVX    A,@DPTR
   \   000214   F5..         MOV     ?V0 + 0,A
    731                    uint16 *pList = list + idx;
   \   000216   C3           CLR     C
   \   000217   33           RLC     A
   \   000218   FC           MOV     R4,A
   \   000219   E4           CLR     A
   \   00021A   33           RLC     A
   \   00021B   FD           MOV     R5,A
   \   00021C   EA           MOV     A,R2
   \   00021D   2C           ADD     A,R4
   \   00021E   FC           MOV     R4,A
   \   00021F   EB           MOV     A,R3
   \   000220   3D           ADDC    A,R5
   \   000221   FD           MOV     R5,A
    732          
    733                    // NumAssocDev field is only present on success.
    734                    if ( cnt > idx )
   \   000222   85..82       MOV     DPL,?XSP + 0
   \   000225   85..83       MOV     DPH,?XSP + 1
   \   000228   E0           MOVX    A,@DPTR
   \   000229   F5..         MOV     ?V0 + 1,A
   \   00022B   E5..         MOV     A,?V0 + 0
   \   00022D   C3           CLR     C
   \   00022E   95..         SUBB    A,?V0 + 1
   \   000230   500D         JNC     ??zdpProcessAddrReq_24
    735                    {
    736                      cnt -= idx;
   \   000232   E0           MOVX    A,@DPTR
   \   000233   C3           CLR     C
   \   000234   95..         SUBB    A,?V0 + 0
   \   000236   F0           MOVX    @DPTR,A
    737                      len += (cnt * sizeof( uint16 ));
   \   000237   C3           CLR     C
   \   000238   33           RLC     A
   \   000239   240B         ADD     A,#0xb
   \   00023B   F5..         MOV     ?V0 + 5,A
   \   00023D   8002         SJMP    ??zdpProcessAddrReq_25
    738                    }
    739                    else
    740                    {
    741                      cnt = 0;
   \                     ??zdpProcessAddrReq_24:
   \   00023F   E4           CLR     A
   \   000240   F0           MOVX    @DPTR,A
    742                    }
    743                    *pBuf++ = cnt;
   \                     ??zdpProcessAddrReq_25:
   \   000241   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000244   0E           INC     R6
   \   000245   E9           MOV     A,R1
   \   000246   FF           MOV     R7,A
    744                    len++;
    745          
    746                    // StartIndex field is only present if NumAssocDev field is non-zero.
    747                    *pBuf++ = idx;
   \   000247   8E82         MOV     DPL,R6
   \   000249   8F83         MOV     DPH,R7
   \   00024B   E5..         MOV     A,?V0 + 0
   \   00024D   F0           MOVX    @DPTR,A
   \   00024E   A3           INC     DPTR
   \   00024F   0E           INC     R6
   \   000250   AF83         MOV     R7,DPH
    748                    len++;
   \   000252   05..         INC     ?V0 + 5
   \   000254   05..         INC     ?V0 + 5
   \   000256   8024         SJMP    ??zdpProcessAddrReq_26
    749          
    750                    while ( cnt != 0 )
    751                    {
    752                      *pBuf++ = LO_UINT16( *pList );
   \                     ??zdpProcessAddrReq_27:
   \   000258   8C82         MOV     DPL,R4
   \   00025A   8D83         MOV     DPH,R5
   \   00025C   12....       LCALL   ?Subroutine15 & 0xFFFF
    753                      *pBuf++ = HI_UINT16( *pList );
   \                     ??CrossCallReturnLabel_5:
   \   00025F   8C82         MOV     DPL,R4
   \   000261   8D83         MOV     DPH,R5
   \   000263   A3           INC     DPTR
   \   000264   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000267   A3           INC     DPTR
   \   000268   0E           INC     R6
   \   000269   AF83         MOV     R7,DPH
    754                      pList++;
   \   00026B   EC           MOV     A,R4
   \   00026C   2402         ADD     A,#0x2
   \   00026E   FC           MOV     R4,A
   \   00026F   ED           MOV     A,R5
   \   000270   3400         ADDC    A,#0x0
   \   000272   FD           MOV     R5,A
    755                      cnt--;
   \   000273   85..82       MOV     DPL,?XSP + 0
   \   000276   85..83       MOV     DPH,?XSP + 1
   \   000279   E0           MOVX    A,@DPTR
   \   00027A   14           DEC     A
   \   00027B   F0           MOVX    @DPTR,A
    756                    }
   \                     ??zdpProcessAddrReq_26:
   \   00027C   85..82       MOV     DPL,?XSP + 0
   \   00027F   85..83       MOV     DPH,?XSP + 1
   \   000282   E0           MOVX    A,@DPTR
   \   000283   70D3         JNZ     ??zdpProcessAddrReq_27
    757          
    758                    osal_mem_free( (uint8 *)list );
   \   000285                ; Setup parameters for call to function osal_mem_free
   \   000285   12....       LCALL   ??osal_mem_free?relay
   \   000288   8009         SJMP    ??zdpProcessAddrReq_19
    759                  }
    760                  else
    761                  {
    762                    // NumAssocDev field is only present on success.
    763                    *pBuf++ = 0;
   \                     ??zdpProcessAddrReq_21:
   \   00028A   8E82         MOV     DPL,R6
   \   00028C   8F83         MOV     DPH,R7
   \   00028E   E4           CLR     A
   \   00028F   F0           MOVX    @DPTR,A
    764                    len++;
   \   000290   75..0C       MOV     ?V0 + 5,#0xc
    765                  }
    766                }
    767              }
    768          
    769              ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??zdpProcessAddrReq_19:
   \   000293   90....       MOV     DPTR,#ZDP_TxOptions
   \   000296   7410         MOV     A,#0x10
   \   000298   F0           MOVX    @DPTR,A
    770              fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), (cId_t)(inMsg->clusterID | ZDO_RESPONSE_BIT), len );
   \   000299                ; Setup parameters for call to function fillAndSend
   \   000299   85..82       MOV     DPL,?V0 + 10
   \   00029C   85..83       MOV     DPH,?V0 + 11
   \   00029F   E0           MOVX    A,@DPTR
   \   0002A0   F5..         MOV     ?V0 + 0,A
   \   0002A2   A3           INC     DPTR
   \   0002A3   E0           MOVX    A,@DPTR
   \   0002A4   4480         ORL     A,#0x80
   \   0002A6   F5..         MOV     ?V0 + 1,A
   \   0002A8   78..         MOV     R0,#?V0 + 0
   \   0002AA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002AD   A9..         MOV     R1,?V0 + 5
   \   0002AF   E5..         MOV     A,?V0 + 8
   \   0002B1   2402         ADD     A,#0x2
   \   0002B3   FC           MOV     R4,A
   \   0002B4   E5..         MOV     A,?V0 + 9
   \   0002B6   3400         ADDC    A,#0x0
   \   0002B8   FD           MOV     R5,A
   \   0002B9   E5..         MOV     A,?V0 + 8
   \   0002BB   240F         ADD     A,#0xf
   \   0002BD   FA           MOV     R2,A
   \   0002BE   E5..         MOV     A,?V0 + 9
   \   0002C0   3400         ADDC    A,#0x0
   \   0002C2   FB           MOV     R3,A
   \   0002C3   12....       LCALL   ??fillAndSend?relay
   \   0002C6   7402         MOV     A,#0x2
   \   0002C8   12....       LCALL   ?DEALLOC_XSTACK8
    771              ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   0002CB   90....       MOV     DPTR,#ZDP_TxOptions
   \   0002CE   E4           CLR     A
   \   0002CF   F0           MOVX    @DPTR,A
    772            }
    773          }
   \                     ??zdpProcessAddrReq_12:
   \   0002D0   740E         MOV     A,#0xe
   \   0002D2   02....       LJMP    ??Subroutine107_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000003                REQUIRE ??Subroutine89_0
   \   000003                ; // Fall through to label ??Subroutine89_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine96_0:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   F0           MOVX    @DPTR,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   EA           MOV     A,R2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine100_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AE82         MOV     R6,DPL
   \   000004   AF83         MOV     R7,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000003   A3           INC     DPTR
   \   000004   AE82         MOV     R6,DPL
   \   000006   AF83         MOV     R7,DPH
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F0E         MOV     R7,#0xe
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine108_0
   \   000001                ; // Fall through to label ??Subroutine108_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003                REQUIRE ??Subroutine109_0
   \   000003                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET
    774          
    775          /*********************************************************************
    776           * @fn          ZDP_NodeDescMsg
    777           *
    778           * @brief       Builds and sends a Node Descriptor message, unicast to the
    779           *              specified device.
    780           *
    781           * @param       inMsg - incoming message
    782           * @param       nwkAddr - 16 bit network address for device
    783           * @param       pNodeDesc - pointer to the node descriptor
    784           *
    785           * @return      afStatus_t
    786           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    787          afStatus_t ZDP_NodeDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_NodeDescMsg:
    788                                     uint16 nwkAddr, NodeDescriptorFormat_t *pNodeDesc )
    789          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    790            uint8 *pBuf = ZDP_TmpBuf;
   \   000005   12....       LCALL   ??Subroutine111_0 & 0xFFFF
    791            byte len;
    792          
    793            len = 1 + 2 + 13;  // Status + nwkAddr + Node descriptor
    794          
    795            *pBuf++ = ZDP_SUCCESS;
   \                     ??CrossCallReturnLabel_259:
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   12....       LCALL   ?Subroutine57 & 0xFFFF
    796          
    797            *pBuf++ = LO_UINT16( nwkAddr );
    798            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_82:
   \   00000F   12....       LCALL   ??Subroutine91_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000012   740A         MOV     A,#0xa
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ?Subroutine27 & 0xFFFF
    799          
    800            *pBuf++ = (byte)((pNodeDesc->ComplexDescAvail << 3) |
    801                               (pNodeDesc->UserDescAvail << 4) |
    802                               (pNodeDesc->LogicalType & 0x07));
   \                     ??CrossCallReturnLabel_28:
   \   00001A   8C82         MOV     DPL,R4
   \   00001C   8D83         MOV     DPH,R5
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   541F         ANL     A,#0x1f
   \   000021   12....       LCALL   ?Subroutine55 & 0xFFFF
    803          
    804            *pBuf++ = (byte)((pNodeDesc->FrequencyBand << 3) | (pNodeDesc->APSFlags & 0x07));
   \                     ??CrossCallReturnLabel_80:
   \   000024   12....       LCALL   ?Subroutine24 & 0xFFFF
    805            *pBuf++ = pNodeDesc->CapabilityFlags;
   \                     ??CrossCallReturnLabel_19:
   \   000027   12....       LCALL   ?Subroutine13 & 0xFFFF
    806            *pBuf++ = pNodeDesc->ManufacturerCode[0];
   \                     ??CrossCallReturnLabel_129:
   \   00002A   12....       LCALL   ??Subroutine90_0 & 0xFFFF
    807            *pBuf++ = pNodeDesc->ManufacturerCode[1];
   \                     ??CrossCallReturnLabel_131:
   \   00002D   12....       LCALL   ?Subroutine9 & 0xFFFF
    808            *pBuf++ = pNodeDesc->MaxBufferSize;
   \                     ??CrossCallReturnLabel_0:
   \   000030   12....       LCALL   ?Subroutine55 & 0xFFFF
    809            *pBuf++ = pNodeDesc->MaxInTransferSize[0];
   \                     ??CrossCallReturnLabel_81:
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   12....       LCALL   ?Subroutine36 & 0xFFFF
    810            *pBuf++ = pNodeDesc->MaxInTransferSize[1];
   \                     ??CrossCallReturnLabel_39:
   \   00003B   8C82         MOV     DPL,R4
   \   00003D   8D83         MOV     DPH,R5
   \   00003F   12....       LCALL   ?Subroutine10 & 0xFFFF
    811          
    812            *pBuf++ = LO_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_141:
   \   000042   2408         ADD     A,#0x8
   \   000044   FE           MOV     R6,A
   \   000045   ED           MOV     A,R5
   \   000046   3400         ADDC    A,#0x0
   \   000048   FF           MOV     R7,A
   \   000049   8E82         MOV     DPL,R6
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   12....       LCALL   ?Subroutine36 & 0xFFFF
    813            *pBuf++ = HI_UINT16( pNodeDesc->ServerMask );
   \                     ??CrossCallReturnLabel_40:
   \   000050   8E82         MOV     DPL,R6
   \   000052   8F83         MOV     DPH,R7
   \   000054   12....       LCALL   ?Subroutine13 & 0xFFFF
    814            *pBuf++ = pNodeDesc->MaxOutTransferSize[0];
   \                     ??CrossCallReturnLabel_130:
   \   000057   12....       LCALL   ?Subroutine10 & 0xFFFF
    815            *pBuf++ = pNodeDesc->MaxOutTransferSize[1];
   \                     ??CrossCallReturnLabel_142:
   \   00005A   240B         ADD     A,#0xb
   \   00005C   F582         MOV     DPL,A
   \   00005E   ED           MOV     A,R5
   \   00005F   12....       LCALL   ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000062   12....       LCALL   ??Subroutine93_0 & 0xFFFF
    816            *pBuf = pNodeDesc->DescriptorCapability;
   \                     ??CrossCallReturnLabel_145:
   \   000065   240C         ADD     A,#0xc
   \   000067   F582         MOV     DPL,A
   \   000069   ED           MOV     A,R5
   \   00006A   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   00006D   8882         MOV     DPL,R0
   \   00006F   8983         MOV     DPH,R1
   \   000071   F0           MOVX    @DPTR,A
    817          
    818            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Node_Desc_rsp, len );
   \   000072                ; Setup parameters for call to function fillAndSend
   \   000072   75..02       MOV     ?V0 + 0,#0x2
   \   000075   75..80       MOV     ?V0 + 1,#-0x80
   \   000078   78..         MOV     R0,#?V0 + 0
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007D   7910         MOV     R1,#0x10
   \   00007F   EA           MOV     A,R2
   \   000080   2402         ADD     A,#0x2
   \   000082   FC           MOV     R4,A
   \   000083   EB           MOV     A,R3
   \   000084   3400         ADDC    A,#0x0
   \   000086   FD           MOV     R5,A
   \   000087   EA           MOV     A,R2
   \   000088   240F         ADD     A,#0xf
   \   00008A   FA           MOV     R2,A
   \   00008B   EB           MOV     A,R3
   \   00008C                REQUIRE ?Subroutine8
   \   00008C                ; // Fall through to label ?Subroutine8
    819          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   3400         ADDC    A,#0x0
   \   000002   FB           MOV     R3,A
   \   000003   02....       LJMP    ??Subroutine85_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   08           INC     R0
   \   000007   A983         MOV     R1,DPH
   \   000009   8C82         MOV     DPL,R4
   \   00000B   8D83         MOV     DPH,R5
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine90_0
   \   000001                ; // Fall through to label ??Subroutine90_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine90_0:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000003   8C82         MOV     DPL,R4
   \   000005   8D83         MOV     DPH,R5
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   E4           CLR     A
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EC           MOV     A,R4
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   ED           MOV     A,R5
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000003   8C82         MOV     DPL,R4
   \   000005   8D83         MOV     DPH,R5
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006                REQUIRE ??Subroutine92_0
   \   000006                ; // Fall through to label ??Subroutine92_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine92_0:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine93_0
   \   000001                ; // Fall through to label ??Subroutine93_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine93_0:
   \   000000   12....       LCALL   ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000003   EC           MOV     A,R4
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET
    820          
    821          /*********************************************************************
    822           * @fn          ZDP_PowerDescMsg
    823           *
    824           * @brief       Builds and sends a Power Descriptor message, unicast to the
    825           *              specified device.
    826           *
    827           * @param       inMsg - incoming message (request)
    828           * @param       nwkAddr - 16 bit network address for device
    829           * @param       pPowerDesc - pointer to the node descriptor
    830           *
    831           * @return      afStatus_t
    832           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    833          afStatus_t ZDP_PowerDescMsg( zdoIncomingMsg_t *inMsg,
   \                     ZDP_PowerDescMsg:
    834                               uint16 nwkAddr, NodePowerDescriptorFormat_t *pPowerDesc )
    835          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    836            uint8 *pBuf = ZDP_TmpBuf;
   \   000009   12....       LCALL   ?Subroutine43 & 0xFFFF
    837            byte len = 1 + 2 + 2;  // Status + nwkAddr + Node Power descriptor.
    838          
    839            *pBuf++ = ZDP_SUCCESS;
   \                     ??CrossCallReturnLabel_171:
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   12....       LCALL   ?Subroutine57 & 0xFFFF
    840          
    841            *pBuf++ = LO_UINT16( nwkAddr );
    842            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_83:
   \   000013   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000016   740A         MOV     A,#0xa
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_264:
   \   00001E   12....       LCALL   ?Subroutine26 & 0xFFFF
    843          
    844            *pBuf++ = (byte)((pPowerDesc->AvailablePowerSources << 4)
    845                              | (pPowerDesc->PowerMode & 0x0F));
    846            *pBuf++ = (byte)((pPowerDesc->CurrentPowerSourceLevel << 4)
    847                              | (pPowerDesc->CurrentPowerSource & 0x0F));
   \                     ??CrossCallReturnLabel_23:
   \   000021   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000024   540F         ANL     A,#0xf
   \   000026   F9           MOV     R1,A
   \   000027   740C         MOV     A,#0xc
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?US_SHR
   \   00002E   E5..         MOV     A,?V0 + 0
   \   000030   C4           SWAP    A
   \   000031   49           ORL     A,R1
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   F0           MOVX    @DPTR,A
    848          
    849            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Power_Desc_rsp, len );
   \   000037                ; Setup parameters for call to function fillAndSend
   \   000037   75..03       MOV     ?V0 + 0,#0x3
   \   00003A   75..80       MOV     ?V0 + 1,#-0x80
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   7905         MOV     R1,#0x5
   \   000044   EE           MOV     A,R6
   \   000045   2402         ADD     A,#0x2
   \   000047   FC           MOV     R4,A
   \   000048   EF           MOV     A,R7
   \   000049   3400         ADDC    A,#0x0
   \   00004B   FD           MOV     R5,A
   \   00004C   EE           MOV     A,R6
   \   00004D   240F         ADD     A,#0xf
   \   00004F   FA           MOV     R2,A
   \   000050   EF           MOV     A,R7
   \   000051   80..         SJMP    ?Subroutine8
    850          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   AA82         MOV     R2,DPL
   \   000004   AB83         MOV     R3,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   AB83         MOV     R3,DPH
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0A           INC     R2
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   F9           MOV     R1,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   22           RET
    851          
    852          /*********************************************************************
    853           * @fn          ZDP_SimpleDescMsg
    854           *
    855           * @brief       Builds and sends a Simple Descriptor message, unicast to the
    856           *              specified device.
    857           *
    858           * @param       inMsg - incoming message (request)
    859           * @param       Status - message status (ZDP_SUCCESS or other)
    860           * @param       pSimpleDesc - pointer to the node descriptor
    861           *
    862           * @return      afStatus_t
    863           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    864          afStatus_t ZDP_SimpleDescMsg( zdoIncomingMsg_t *inMsg, byte Status,
   \                     ZDP_SimpleDescMsg:
    865                                        SimpleDescriptionFormat_t *pSimpleDesc )
    866          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   12....       LCALL   ?Subroutine41 & 0xFFFF
    867            uint8 *pBuf = ZDP_TmpBuf;
    868            uint8 i, len;
    869          
    870            if ( Status == ZDP_SUCCESS && pSimpleDesc )
   \                     ??CrossCallReturnLabel_246:
   \   00000C   EC           MOV     A,R4
   \   00000D   2409         ADD     A,#0x9
   \   00000F   FA           MOV     R2,A
   \   000010   ED           MOV     A,R5
   \   000011   3400         ADDC    A,#0x0
   \   000013   FB           MOV     R3,A
   \   000014   8A..         MOV     ?V0 + 4,R2
   \   000016   8B..         MOV     ?V0 + 5,R3
   \   000018   EC           MOV     A,R4
   \   000019   2406         ADD     A,#0x6
   \   00001B   FA           MOV     R2,A
   \   00001C   ED           MOV     A,R5
   \   00001D   3400         ADDC    A,#0x0
   \   00001F   FB           MOV     R3,A
   \   000020   8A..         MOV     ?V0 + 6,R2
   \   000022   8B..         MOV     ?V0 + 7,R3
   \   000024   EE           MOV     A,R6
   \   000025   7022         JNZ     ??ZDP_SimpleDescMsg_0
   \   000027   EC           MOV     A,R4
   \   000028   4D           ORL     A,R5
   \   000029   601E         JZ      ??ZDP_SimpleDescMsg_0
    871            {
    872              // Status + NWKAddrOfInterest + desc length + empty simple descriptor.
    873              len = 1 + 2 + 1 + 8;
    874              len += (pSimpleDesc->AppNumInClusters + pSimpleDesc->AppNumOutClusters) * sizeof ( uint16 );
   \   00002B   85..82       MOV     DPL,?V0 + 4
   \   00002E   85..83       MOV     DPH,?V0 + 5
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FA           MOV     R2,A
   \   000033   85..82       MOV     DPL,?V0 + 6
   \   000036   8B83         MOV     DPH,R3
   \   000038   E0           MOVX    A,@DPTR
   \   000039   2A           ADD     A,R2
   \   00003A   C3           CLR     C
   \   00003B   33           RLC     A
   \   00003C   240C         ADD     A,#0xc
   \   00003E   FA           MOV     R2,A
    875            }
    876            else
    877            {
    878              len = 1 + 2 + 1; // Status + desc length
    879            }
    880            if ( len >= ZDP_BUF_SZ-1 )
   \   00003F   C3           CLR     C
   \   000040   944F         SUBB    A,#0x4f
   \   000042   4007         JC      ??ZDP_SimpleDescMsg_1
    881            {
    882              return afStatus_MEM_FAIL;
   \   000044   7910         MOV     R1,#0x10
   \   000046   02....       LJMP    ??ZDP_SimpleDescMsg_2 & 0xFFFF
    883            }
   \                     ??ZDP_SimpleDescMsg_0:
   \   000049   7A04         MOV     R2,#0x4
    884          
    885            *pBuf++ = Status;
   \                     ??ZDP_SimpleDescMsg_1:
   \   00004B   12....       LCALL   ?Subroutine47 & 0xFFFF
    886          
    887            *pBuf++ = LO_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_138:
   \   00004E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000051   12....       LCALL   ?Subroutine36 & 0xFFFF
    888            *pBuf++ = HI_UINT16( ZDAppNwkAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_41:
   \   000054   90....       MOV     DPTR,#ZDAppNwkAddr + 1
   \   000057   12....       LCALL   ?Subroutine82 & 0xFFFF
    889          
    890            if ( len > 4 )
   \                     ??CrossCallReturnLabel_225:
   \   00005A   EA           MOV     A,R2
   \   00005B   C3           CLR     C
   \   00005C   9405         SUBB    A,#0x5
   \   00005E   5003         JNC     $+5
   \   000060   02....       LJMP    ??ZDP_SimpleDescMsg_3 & 0xFFFF
    891            {
    892              *pBuf++ = len - 4;   // Simple descriptor length
   \   000063   74FC         MOV     A,#-0x4
   \   000065   2A           ADD     A,R2
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   08           INC     R0
   \   000069   08           INC     R0
   \   00006A   A983         MOV     R1,DPH
    893          
    894              *pBuf++ = pSimpleDesc->EndPoint;
   \   00006C   8C82         MOV     DPL,R4
   \   00006E   8D83         MOV     DPH,R5
   \   000070   12....       LCALL   ?Subroutine24 & 0xFFFF
    895              *pBuf++ = LO_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_20:
   \   000073   8582..       MOV     ?V0 + 2,DPL
   \   000076   8583..       MOV     ?V0 + 3,DPH
   \   000079   12....       LCALL   ?Subroutine20 & 0xFFFF
    896              *pBuf++ = HI_UINT16( pSimpleDesc->AppProfId );
   \                     ??CrossCallReturnLabel_13:
   \   00007C   12....       LCALL   ??Subroutine92_0 & 0xFFFF
    897              *pBuf++ = LO_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_143:
   \   00007F   2403         ADD     A,#0x3
   \   000081   F5..         MOV     ?V0 + 2,A
   \   000083   ED           MOV     A,R5
   \   000084   3400         ADDC    A,#0x0
   \   000086   F5..         MOV     ?V0 + 3,A
   \   000088   85..82       MOV     DPL,?V0 + 2
   \   00008B   F583         MOV     DPH,A
   \   00008D   12....       LCALL   ?Subroutine20 & 0xFFFF
    898              *pBuf++ = HI_UINT16( pSimpleDesc->AppDeviceId );
   \                     ??CrossCallReturnLabel_14:
   \   000090   12....       LCALL   ?Subroutine9 & 0xFFFF
    899          
    900              *pBuf++ = (byte)(pSimpleDesc->AppDevVer & 0x0F);
   \                     ??CrossCallReturnLabel_1:
   \   000093   540F         ANL     A,#0xf
   \   000095   8882         MOV     DPL,R0
   \   000097   8983         MOV     DPH,R1
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   A3           INC     DPTR
   \   00009B   08           INC     R0
   \   00009C   A983         MOV     R1,DPH
    901          
    902              *pBuf++ = pSimpleDesc->AppNumInClusters;
   \   00009E   85..82       MOV     DPL,?V0 + 6
   \   0000A1   8B83         MOV     DPH,R3
   \   0000A3   12....       LCALL   ?Subroutine36 & 0xFFFF
    903              if ( pSimpleDesc->AppNumInClusters )
   \                     ??CrossCallReturnLabel_42:
   \   0000A6   85..82       MOV     DPL,?V0 + 6
   \   0000A9   8B83         MOV     DPH,R3
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   6033         JZ      ??ZDP_SimpleDescMsg_4
    904              {
    905                for (i=0; i<pSimpleDesc->AppNumInClusters; ++i)
   \   0000AE   7B00         MOV     R3,#0x0
   \   0000B0   EC           MOV     A,R4
   \   0000B1   2407         ADD     A,#0x7
   \   0000B3   F5..         MOV     ?V0 + 2,A
   \   0000B5   ED           MOV     A,R5
   \   0000B6   3400         ADDC    A,#0x0
   \   0000B8   85....       MOV     ?V0 + 8,?V0 + 2
   \   0000BB   F5..         MOV     ?V0 + 9,A
   \   0000BD   8015         SJMP    ??CrossCallReturnLabel_37
    906                {
    907                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??ZDP_SimpleDescMsg_5:
   \   0000BF   EB           MOV     A,R3
   \   0000C0   C3           CLR     C
   \   0000C1   33           RLC     A
   \   0000C2   F5..         MOV     ?V0 + 2,A
   \   0000C4   E4           CLR     A
   \   0000C5   33           RLC     A
   \   0000C6   F5..         MOV     ?V0 + 3,A
   \   0000C8   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   0000CB   12....       LCALL   ?Subroutine16 & 0xFFFF
    908                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppInClusterList[i] );
   \                     ??CrossCallReturnLabel_221:
   \   0000CE   12....       LCALL   ?Subroutine46 & 0xFFFF
    909                }
   \                     ??CrossCallReturnLabel_63:
   \   0000D1   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0000D4   85..82       MOV     DPL,?V0 + 6
   \   0000D7   85..83       MOV     DPH,?V0 + 7
   \   0000DA   E0           MOVX    A,@DPTR
   \   0000DB   FF           MOV     R7,A
   \   0000DC   EB           MOV     A,R3
   \   0000DD   C3           CLR     C
   \   0000DE   9F           SUBB    A,R7
   \   0000DF   40DE         JC      ??ZDP_SimpleDescMsg_5
    910              }
    911          
    912              *pBuf++ = pSimpleDesc->AppNumOutClusters;
   \                     ??ZDP_SimpleDescMsg_4:
   \   0000E1   85..82       MOV     DPL,?V0 + 4
   \   0000E4   85..83       MOV     DPH,?V0 + 5
   \   0000E7   12....       LCALL   ??Subroutine105_0 & 0xFFFF
    913              if ( pSimpleDesc->AppNumOutClusters )
   \                     ??CrossCallReturnLabel_219:
   \   0000EA   85..82       MOV     DPL,?V0 + 4
   \   0000ED   85..83       MOV     DPH,?V0 + 5
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   6044         JZ      ??ZDP_SimpleDescMsg_6
    914              {
    915                for (i=0; i<pSimpleDesc->AppNumOutClusters; ++i)
   \   0000F3   7B00         MOV     R3,#0x0
   \   0000F5   EC           MOV     A,R4
   \   0000F6   240A         ADD     A,#0xa
   \   0000F8   FC           MOV     R4,A
   \   0000F9   ED           MOV     A,R5
   \   0000FA   3400         ADDC    A,#0x0
   \   0000FC   FD           MOV     R5,A
   \   0000FD   8C..         MOV     ?V0 + 2,R4
   \   0000FF   8D..         MOV     ?V0 + 3,R5
   \                     ??ZDP_SimpleDescMsg_7:
   \   000101   85..82       MOV     DPL,?V0 + 4
   \   000104   85..83       MOV     DPH,?V0 + 5
   \   000107   E0           MOVX    A,@DPTR
   \   000108   FC           MOV     R4,A
   \   000109   EB           MOV     A,R3
   \   00010A   C3           CLR     C
   \   00010B   9C           SUBB    A,R4
   \   00010C   5029         JNC     ??ZDP_SimpleDescMsg_6
    916                {
    917                  *pBuf++ = LO_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \   00010E   EB           MOV     A,R3
   \   00010F   C3           CLR     C
   \   000110   33           RLC     A
   \   000111   FC           MOV     R4,A
   \   000112   E4           CLR     A
   \   000113   33           RLC     A
   \   000114   FD           MOV     R5,A
   \   000115   85..82       MOV     DPL,?V0 + 2
   \   000118   85..83       MOV     DPH,?V0 + 3
   \   00011B   E0           MOVX    A,@DPTR
   \   00011C   2C           ADD     A,R4
   \   00011D   FF           MOV     R7,A
   \   00011E   A3           INC     DPTR
   \   00011F   E0           MOVX    A,@DPTR
   \   000120   3D           ADDC    A,R5
   \   000121   12....       LCALL   ?Subroutine16 & 0xFFFF
    918                  *pBuf++ = HI_UINT16( pSimpleDesc->pAppOutClusterList[i] );
   \                     ??CrossCallReturnLabel_222:
   \   000124   85..82       MOV     DPL,?V0 + 2
   \   000127   85..83       MOV     DPH,?V0 + 3
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   2C           ADD     A,R4
   \   00012C   FF           MOV     R7,A
   \   00012D   A3           INC     DPTR
   \   00012E   E0           MOVX    A,@DPTR
   \   00012F   3D           ADDC    A,R5
   \   000130   12....       LCALL   ?Subroutine35 & 0xFFFF
    919                }
    920              }
    921            }
   \                     ??CrossCallReturnLabel_38:
   \   000133   80CC         SJMP    ??ZDP_SimpleDescMsg_7
    922          
    923            else
    924            {
    925              *pBuf = 0; // Description Length = 0;
   \                     ??ZDP_SimpleDescMsg_3:
   \   000135   E4           CLR     A
   \   000136   F0           MOVX    @DPTR,A
    926            }
    927          
    928            return fillAndSend( &(inMsg->TransSeq), &(inMsg->srcAddr), Simple_Desc_rsp, len );
   \                     ??ZDP_SimpleDescMsg_6:
   \   000137                ; Setup parameters for call to function fillAndSend
   \   000137   75..04       MOV     ?V0 + 2,#0x4
   \   00013A   75..80       MOV     ?V0 + 3,#-0x80
   \   00013D   78..         MOV     R0,#?V0 + 2
   \   00013F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000142   EA           MOV     A,R2
   \   000143   F9           MOV     R1,A
   \   000144   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000147   E5..         MOV     A,?V0 + 0
   \   000149   240F         ADD     A,#0xf
   \   00014B   FA           MOV     R2,A
   \   00014C   E5..         MOV     A,?V0 + 1
   \   00014E   3400         ADDC    A,#0x0
   \   000150   FB           MOV     R3,A
   \   000151   12....       LCALL   ??fillAndSend?relay
   \   000154   7402         MOV     A,#0x2
   \   000156   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_SimpleDescMsg_2:
   \   000159                REQUIRE ?Subroutine4
   \   000159                ; // Fall through to label ?Subroutine4
    929          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   7F0C         MOV     R7,#0xc
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   EE           MOV     A,R6
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005                REQUIRE ??Subroutine91_0
   \   000005                ; // Fall through to label ??Subroutine91_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   85..82       MOV     DPL,?V0 + 8
   \   000003   85..83       MOV     DPH,?V0 + 9
   \   000006   E0           MOVX    A,@DPTR
   \   000007   25..         ADD     A,?V0 + 2
   \   000009   FF           MOV     R7,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   35..         ADDC    A,?V0 + 3
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   8F82         MOV     DPL,R7
   \   000002   F583         MOV     DPH,A
   \   000004   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000007   0B           INC     R3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   12....       LCALL   ??Subroutine94_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000003   85..82       MOV     DPL,?V0 + 2
   \   000006   85..83       MOV     DPH,?V0 + 3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2402         ADD     A,#0x2
   \   000004   FC           MOV     R4,A
   \   000005   E5..         MOV     A,?V0 + 1
   \   000007   3400         ADDC    A,#0x0
   \   000009   FD           MOV     R5,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   8F82         MOV     DPL,R7
   \   000002   F583         MOV     DPH,A
   \   000004                REQUIRE ??Subroutine105_0
   \   000004                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   000003   22           RET
    930          
    931          /*********************************************************************
    932           * @fn          ZDP_EPRsp
    933           *
    934           * @brief       This builds and send an endpoint list. Used in
    935           *              Active_EP_rsp and Match_Desc_Rsp
    936           *              message.  This function sends unicast message to the
    937           *              requesting device.
    938           *
    939           * @param       MsgType - either Active_EP_rsp or Match_Desc_Rsp
    940           * @param       dstAddr - destination address
    941           * @param       Status - message status (ZDP_SUCCESS or other)
    942           * @param       nwkAddr - Device's short address that this response describes
    943           * @param       Count - number of endpoint/interfaces in list
    944           * @param       pEPIntfList - Array of Endpoint/Interfaces
    945           * @param       SecurityEnable - Security Options
    946           *
    947           * @return      afStatus_t
    948           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    949          afStatus_t ZDP_EPRsp( uint16 MsgType, byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_EPRsp:
    950                                  byte Status, uint16 nwkAddr, byte Count,
    951                                  uint8 *pEPList,
    952                                  byte SecurityEnable )
    953          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 2,R2
   \   000014   8B..         MOV     ?V0 + 3,R3
   \   000016   EC           MOV     A,R4
   \   000017   FE           MOV     R6,A
   \   000018   ED           MOV     A,R5
   \   000019   FF           MOV     R7,A
   \   00001A   7410         MOV     A,#0x10
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F8           MOV     R0,A
   \   000021   7414         MOV     A,#0x14
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ??Subroutine83_0 & 0xFFFF
    954            uint8 *pBuf = ZDP_TmpBuf;
   \                     ??CrossCallReturnLabel_113:
   \   000029   12....       LCALL   ?Subroutine43 & 0xFFFF
    955            byte len = 1 + 2 + 1;  // Status + nwkAddr + endpoint/interface count.
   \                     ??CrossCallReturnLabel_172:
   \   00002C   75..04       MOV     ?V0 + 0,#0x4
    956            byte txOptions;
    957          
    958            (void)SecurityEnable;  // Intentionally unreferenced parameter
    959          
    960            if ( MsgType == Match_Desc_rsp )
   \   00002F   7406         MOV     A,#0x6
   \   000031   65..         XRL     A,?V0 + 2
   \   000033   7004         JNZ     ??ZDP_EPRsp_0
   \   000035   7480         MOV     A,#-0x80
   \   000037   65..         XRL     A,?V0 + 3
   \                     ??ZDP_EPRsp_0:
   \   000039   7005         JNZ     ??ZDP_EPRsp_1
    961              txOptions = AF_MSG_ACK_REQUEST;
   \   00003B   75..10       MOV     ?V0 + 1,#0x10
   \   00003E   8003         SJMP    ??ZDP_EPRsp_2
    962            else
    963              txOptions = 0;
   \                     ??ZDP_EPRsp_1:
   \   000040   75..00       MOV     ?V0 + 1,#0x0
    964          
    965              *pBuf++ = Status;
   \                     ??ZDP_EPRsp_2:
   \   000043   E8           MOV     A,R0
   \   000044   8A82         MOV     DPL,R2
   \   000046   8B83         MOV     DPH,R3
   \   000048   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00004B   7411         MOV     A,#0x11
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   12....       LCALL   ?Subroutine19 & 0xFFFF
    966            *pBuf++ = LO_UINT16( nwkAddr );
    967            *pBuf++ = HI_UINT16( nwkAddr );
   \                     ??CrossCallReturnLabel_11:
   \   000053   7413         MOV     A,#0x13
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   E0           MOVX    A,@DPTR
   \   000059   F9           MOV     R1,A
    968          
    969            *pBuf++ = Count;   // Endpoint/Interface count
   \   00005A   8A82         MOV     DPL,R2
   \   00005C   8B83         MOV     DPH,R3
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   0A           INC     R2
   \   000061   AB83         MOV     R3,DPH
    970          
    971            if ( Count )
   \   000063   601B         JZ      ??ZDP_EPRsp_3
    972            {
    973              len += Count;
   \   000065   7404         MOV     A,#0x4
   \   000067   29           ADD     A,R1
   \   000068   F5..         MOV     ?V0 + 0,A
    974              osal_memcpy( pBuf, pEPList, Count );
   \   00006A                ; Setup parameters for call to function osal_memcpy
   \   00006A   75..00       MOV     ?V0 + 6,#0x0
   \   00006D   78..         MOV     R0,#?V0 + 4
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000072   89..         MOV     ?V0 + 4,R1
   \   000074   AC..         MOV     R4,?V0 + 4
   \   000076   7D00         MOV     R5,#0x0
   \   000078   12....       LCALL   ??osal_memcpy?relay
   \   00007B   7403         MOV     A,#0x3
   \   00007D   12....       LCALL   ?DEALLOC_XSTACK8
    975            }
    976          
    977            FillAndSendTxOptions( &TransSeq, dstAddr, MsgType, len, txOptions );
   \                     ??ZDP_EPRsp_3:
   \   000080   E5..         MOV     A,?V0 + 1
   \   000082   90....       MOV     DPTR,#ZDP_TxOptions
   \   000085   F0           MOVX    @DPTR,A
   \   000086                ; Setup parameters for call to function fillAndSend
   \   000086   78..         MOV     R0,#?V0 + 2
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008B   A9..         MOV     R1,?V0 + 0
   \   00008D   EE           MOV     A,R6
   \   00008E   FC           MOV     R4,A
   \   00008F   EF           MOV     A,R7
   \   000090   FD           MOV     R5,A
   \   000091   7402         MOV     A,#0x2
   \   000093   12....       LCALL   ?XSTACK_DISP0_8
   \   000096   AA82         MOV     R2,DPL
   \   000098   AB83         MOV     R3,DPH
   \   00009A   12....       LCALL   ??fillAndSend?relay
   \   00009D   7402         MOV     A,#0x2
   \   00009F   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A2   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000A5   E4           CLR     A
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   04           INC     A
   \   0000A8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AB   7F07         MOV     R7,#0x7
   \   0000AD   02....       LJMP    ?BANKED_LEAVE_XDATA
    978          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000003   0A           INC     R2
   \   000004   0A           INC     R2
   \   000005   AB83         MOV     R3,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_266:
   \   000003   F9           MOV     R1,A
   \   000004   E8           MOV     A,R0
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   E9           MOV     A,R1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET
    979          
    980          /*********************************************************************
    981           * @fn          ZDP_UserDescRsp
    982           *
    983           * @brief       Build and send the User Decriptor Response.
    984           *
    985           *
    986           * @param       dstAddr - destination address
    987           * @param       nwkAddrOfInterest -
    988           * @param       userDesc -
    989           * @param       SecurityEnable - Security Options
    990           *
    991           * @return      ZStatus_t
    992           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    993          ZStatus_t ZDP_UserDescRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_UserDescRsp:
    994                          uint16 nwkAddrOfInterest, UserDescriptorFormat_t *userDesc,
    995                          byte SecurityEnable )
    996          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EA           MOV     A,R2
   \   000013   FE           MOV     R6,A
   \   000014   EB           MOV     A,R3
   \   000015   FF           MOV     R7,A
    997            uint8 *pBuf = ZDP_TmpBuf;
   \   000016   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000019   7413         MOV     A,#0x13
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   000021   88..         MOV     ?V0 + 8,R0
   \   000023   89..         MOV     ?V0 + 9,R1
    998            byte len = 1 + 2 + 1;  // Status + nwkAddr + descriptor length.
    999          
   1000            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1001          
   1002            len += userDesc->len;
   \   000025   8882         MOV     DPL,R0
   \   000027   F583         MOV     DPH,A
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   2404         ADD     A,#0x4
   \   00002C   F5..         MOV     ?V0 + 2,A
   1003          
   1004            *pBuf++ = ZSUCCESS;
   \   00002E   85..82       MOV     DPL,?V0 + 0
   \   000031   85..83       MOV     DPH,?V0 + 1
   \   000034   12....       LCALL   ?Subroutine57 & 0xFFFF
   1005          
   1006            *pBuf++ = LO_UINT16( nwkAddrOfInterest );
   1007            *pBuf++ = HI_UINT16( nwkAddrOfInterest );
   \                     ??CrossCallReturnLabel_84:
   \   000037   12....       LCALL   ?Subroutine52 & 0xFFFF
   1008          
   1009            *pBuf++ = userDesc->len;
   \                     ??CrossCallReturnLabel_73:
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   85..82       MOV     DPL,?V0 + 0
   \   00003E   85..83       MOV     DPH,?V0 + 1
   \   000041   12....       LCALL   ?Subroutine52 & 0xFFFF
   1010            osal_memcpy( pBuf, userDesc->desc, userDesc->len );
   \                     ??CrossCallReturnLabel_74:
   \   000044   A3           INC     DPTR
   \   000045   A982         MOV     R1,DPL
   \   000047   AA83         MOV     R2,DPH
   \   000049   89..         MOV     ?V0 + 4,R1
   \   00004B   8A..         MOV     ?V0 + 5,R2
   \   00004D   75..00       MOV     ?V0 + 6,#0x0
   \   000050   78..         MOV     R0,#?V0 + 4
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000055   85..82       MOV     DPL,?V0 + 8
   \   000058   85..83       MOV     DPH,?V0 + 9
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   FC           MOV     R4,A
   \   00005D   7D00         MOV     R5,#0x0
   \   00005F   AA..         MOV     R2,?V0 + 0
   \   000061   AB..         MOV     R3,?V0 + 1
   \   000063   12....       LCALL   ??osal_memcpy?relay
   \   000066   7403         MOV     A,#0x3
   \   000068   12....       LCALL   ?DEALLOC_XSTACK8
   1011          
   1012            return (ZStatus_t)fillAndSend( &TransSeq, dstAddr, User_Desc_rsp, len );
   \   00006B                ; Setup parameters for call to function fillAndSend
   \   00006B   75..11       MOV     ?V0 + 0,#0x11
   \   00006E   75..80       MOV     ?V0 + 1,#-0x80
   \   000071   78..         MOV     R0,#?V0 + 0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   A9..         MOV     R1,?V0 + 2
   \   000078   EE           MOV     A,R6
   \   000079   FC           MOV     R4,A
   \   00007A   EF           MOV     A,R7
   \   00007B   FD           MOV     R5,A
   \   00007C   7402         MOV     A,#0x2
   \   00007E   12....       LCALL   ?XSTACK_DISP0_8
   \   000081   AA82         MOV     R2,DPL
   \   000083   AB83         MOV     R3,DPH
   \   000085   12....       LCALL   ??fillAndSend?relay
   \   000088   7402         MOV     A,#0x2
   \   00008A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008D   7401         MOV     A,#0x1
   \   00008F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000092                REQUIRE ?Subroutine5
   \   000092                ; // Fall through to label ?Subroutine5
   1013          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   8582..       MOV     ?V0 + 0,DPL
   \   000005   8583..       MOV     ?V0 + 1,DPH
   \   000008                ; Setup parameters for call to function osal_memcpy
   \   000008   8882         MOV     DPL,R0
   \   00000A   8983         MOV     DPH,R1
   \   00000C   22           RET
   1014          
   1015          /*********************************************************************
   1016           * @fn          ZDP_ServerDiscRsp
   1017           *
   1018           * @brief       Build and send the Server_Discovery_rsp response.
   1019           *
   1020           * @param       transID - Transaction sequence number of request.
   1021           * @param       dstAddr - Network Destination Address.
   1022           * @param       status - Status of response to request.
   1023           * @param       aoi - Network Address of Interest of request.
   1024           * @param       serverMask - Bit map of service(s) being sought.
   1025           * @param       SecurityEnable - Security Options
   1026           *
   1027           * @return      ZStatus_t
   1028           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1029          ZStatus_t ZDP_ServerDiscRsp( byte transID, zAddrType_t *dstAddr, byte status,
   \                     ZDP_ServerDiscRsp:
   1030                                     uint16 aoi, uint16 serverMask, byte SecurityEnable )
   1031          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   EC           MOV     A,R4
   \   000013   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   1032            const byte len = 1  + 2;  // status + aoi + mask.
   1033            uint8 *pBuf = ZDP_TmpBuf;
   1034            ZStatus_t stat;
   1035          
   1036            // Intentionally unreferenced parameters
   1037            (void)aoi;
   1038            (void)SecurityEnable;
   1039          
   1040            *pBuf++ = status;
   \                     ??CrossCallReturnLabel_247:
   \   000016   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000019   740D         MOV     A,#0xd
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ?Subroutine25 & 0xFFFF
   1041          
   1042            *pBuf++ = LO_UINT16( serverMask );
   1043            *pBuf++ = HI_UINT16( serverMask );
   1044          
   1045            ZDP_TxOptions = AF_MSG_ACK_REQUEST;
   \                     ??CrossCallReturnLabel_22:
   \   000021   90....       MOV     DPTR,#ZDP_TxOptions
   \   000024   7410         MOV     A,#0x10
   \   000026   F0           MOVX    @DPTR,A
   1046            stat = fillAndSend( &transID, dstAddr, Server_Discovery_rsp, len );
   \   000027                ; Setup parameters for call to function fillAndSend
   \   000027   75..15       MOV     ?V0 + 0,#0x15
   \   00002A   75..80       MOV     ?V0 + 1,#-0x80
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7903         MOV     R1,#0x3
   \   000034   EA           MOV     A,R2
   \   000035   FC           MOV     R4,A
   \   000036   EB           MOV     A,R3
   \   000037   FD           MOV     R5,A
   \   000038   7402         MOV     A,#0x2
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   AA82         MOV     R2,DPL
   \   00003F   AB83         MOV     R3,DPH
   \   000041   12....       LCALL   ??fillAndSend?relay
   \   000044   7402         MOV     A,#0x2
   \   000046   12....       LCALL   ?DEALLOC_XSTACK8
   1047            ZDP_TxOptions = AF_TX_OPTIONS_NONE;
   \   000049   90....       MOV     DPTR,#ZDP_TxOptions
   \   00004C   E4           CLR     A
   \   00004D   F0           MOVX    @DPTR,A
   1048          
   1049            return ( stat );
   \   00004E   04           INC     A
   \   00004F   02....       LJMP    ??Subroutine86_0 & 0xFFFF
   1050          }
   1051          
   1052          /*********************************************************************
   1053           * @fn          ZDP_GenericRsp
   1054           *
   1055           * @brief       Sends a response message with only the parameter status
   1056           *              byte and the addr of interest for data.
   1057           *              This function sends unicast message to the
   1058           *              requesting device.
   1059           *
   1060           * @param       dstAddr - destination address
   1061           * @param       status  - generic status for response
   1062           * @param       aoi     - address of interest
   1063           * @param       dstAddr - destination address
   1064           * @param       rspId   - response cluster ID
   1065           * @param       SecurityEnable - Security Options
   1066           *
   1067           * @return      afStatus_t
   1068           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1069          afStatus_t ZDP_GenericRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_GenericRsp:
   1070                               byte status, uint16 aoi, uint16 rspID, byte SecurityEnable )
   1071          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   740D         MOV     A,#0xd
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   1072            uint8 len;
   1073          
   1074            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1075          
   1076            ZDP_TmpBuf[0] = status;
   \                     ??CrossCallReturnLabel_213:
   \   00001A   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   00001D   EC           MOV     A,R4
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   740B         MOV     A,#0xb
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   1077            ZDP_TmpBuf[1] = LO_UINT16( aoi );
   \                     ??CrossCallReturnLabel_251:
   \   000027   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   FC           MOV     R4,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F583         MOV     DPH,A
   \   000030   8C82         MOV     DPL,R4
   \   000032   A3           INC     DPTR
   \   000033   E8           MOV     A,R0
   \   000034   F0           MOVX    @DPTR,A
   1078            ZDP_TmpBuf[2] = HI_UINT16( aoi );
   \   000035   12....       LCALL   ?Subroutine28 & 0xFFFF
   1079          
   1080            // Length byte
   1081            ZDP_TmpBuf[3] = 0;
   \                     ??CrossCallReturnLabel_32:
   \   000038   12....       LCALL   ??Subroutine87_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   E4           CLR     A
   \   00003E   F0           MOVX    @DPTR,A
   1082            len = 4;
   1083          
   1084            return fillAndSend( &TransSeq, dstAddr, rspID, len );
   \   00003F                ; Setup parameters for call to function fillAndSend
   \   00003F   78..         MOV     R0,#?V0 + 0
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000044   7904         MOV     R1,#0x4
   \   000046   EA           MOV     A,R2
   \   000047   FC           MOV     R4,A
   \   000048   EB           MOV     A,R3
   \   000049   FD           MOV     R5,A
   \   00004A   7402         MOV     A,#0x2
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   AA82         MOV     R2,DPL
   \   000051   AB83         MOV     R3,DPH
   \   000053   12....       LCALL   ??fillAndSend?relay
   \   000056   7402         MOV     A,#0x2
   \   000058   12....       LCALL   ?DEALLOC_XSTACK8
   \   00005B   7401         MOV     A,#0x1
   \   00005D   02....       LJMP    ??Subroutine86_0 & 0xFFFF
   1085          }
   1086          
   1087          /*********************************************************************
   1088           * Binding
   1089           */
   1090          /*********************************************************************
   1091           * @fn          ZDP_EndDeviceBindReq
   1092           *
   1093           * @brief       This builds and sends a End_Device_Bind_req message.
   1094           *              This function sends a unicast message.
   1095           *
   1096           * @param       dstAddr - destination address
   1097           * @param       LocalCoordinator - short address of local coordinator
   1098           * @param       epIntf - Endpoint/Interface of Simple Desc
   1099           * @param       ProfileID - Profile ID
   1100           *
   1101           *   The Input cluster list is the opposite of what you would think.
   1102           *   This is the output cluster list of this device
   1103           * @param       NumInClusters - number of input clusters
   1104           * @param       InClusterList - input cluster ID list
   1105           *
   1106           *   The Output cluster list is the opposite of what you would think.
   1107           *   This is the input cluster list of this device
   1108           * @param       NumOutClusters - number of output clusters
   1109           * @param       OutClusterList - output cluster ID list
   1110           *
   1111           * @param       SecurityEnable - Security Options
   1112           *
   1113           * @return      afStatus_t
   1114           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1115          afStatus_t ZDP_EndDeviceBindReq( zAddrType_t *dstAddr,
   \                     ZDP_EndDeviceBindReq:
   1116                                           uint16 LocalCoordinator,
   1117                                           byte endPoint,
   1118                                           uint16 ProfileID,
   1119                                           byte NumInClusters, cId_t *InClusterList,
   1120                                           byte NumOutClusters, cId_t *OutClusterList,
   1121                                           byte SecurityEnable )
   1122          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 6,R2
   \   000007   8B..         MOV     ?V0 + 7,R3
   \   000009   8C..         MOV     ?V0 + 4,R4
   \   00000B   8D..         MOV     ?V0 + 5,R5
   \   00000D   89..         MOV     ?V0 + 3,R1
   1123            uint8 *pBuf = ZDP_TmpBuf;
   \   00000F   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000012   7414         MOV     A,#0x14
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F5..         MOV     ?V0 + 2,A
   \   00001A   7417         MOV     A,#0x17
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 1,A
   1124            uint8 i, len;
   1125            uint8 *ieeeAddr;
   1126          
   1127            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1128          
   1129            // LocalCoordinator + SrcExtAddr + ep + ProfileID +  NumInClusters + NumOutClusters.
   1130            len = 2 + Z_EXTADDR_LEN + 1 + 2 + 1 + 1;
   1131            len += (NumInClusters + NumOutClusters) * sizeof ( uint16 );
   \   000022   E5..         MOV     A,?V0 + 2
   \   000024   25..         ADD     A,?V0 + 1
   \   000026   C3           CLR     C
   \   000027   33           RLC     A
   \   000028   240F         ADD     A,#0xf
   \   00002A   F5..         MOV     ?V0 + 0,A
   1132          
   1133            if ( len >= ZDP_BUF_SZ-1 )
   \   00002C   C3           CLR     C
   \   00002D   944F         SUBB    A,#0x4f
   \   00002F   4005         JC      ??ZDP_EndDeviceBindReq_0
   1134            {
   1135              return afStatus_MEM_FAIL;
   \   000031   7910         MOV     R1,#0x10
   \   000033   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1136            }
   1137          
   1138            if ( LocalCoordinator != NLME_GetShortAddr() )
   \                     ??ZDP_EndDeviceBindReq_0:
   \   000036                ; Setup parameters for call to function NLME_GetShortAddr
   \   000036   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000039   EA           MOV     A,R2
   \   00003A   65..         XRL     A,?V0 + 4
   \   00003C   7003         JNZ     ??ZDP_EndDeviceBindReq_2
   \   00003E   EB           MOV     A,R3
   \   00003F   65..         XRL     A,?V0 + 5
   \                     ??ZDP_EndDeviceBindReq_2:
   \   000041   6005         JZ      ??ZDP_EndDeviceBindReq_3
   1139            {
   1140              return afStatus_INVALID_PARAMETER;
   \   000043   7902         MOV     R1,#0x2
   \   000045   02....       LJMP    ??ZDP_EndDeviceBindReq_1 & 0xFFFF
   1141            }
   1142          
   1143            *pBuf++ = LO_UINT16( LocalCoordinator );
   \                     ??ZDP_EndDeviceBindReq_3:
   \   000048   8E82         MOV     DPL,R6
   \   00004A   8F83         MOV     DPH,R7
   \   00004C   12....       LCALL   ?Subroutine48 & 0xFFFF
   1144            *pBuf++ = HI_UINT16( LocalCoordinator );
   1145          
   1146            ieeeAddr = NLME_GetExtAddr();
   1147            pBuf = osal_cpyExtAddr( pBuf, ieeeAddr );
   \                     ??CrossCallReturnLabel_178:
   \   00004F                ; Setup parameters for call to function sAddrExtCpy
   \   00004F                ; Setup parameters for call to function NLME_GetExtAddr
   \   00004F   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000052   EA           MOV     A,R2
   \   000053   FC           MOV     R4,A
   \   000054   EB           MOV     A,R3
   \   000055   FD           MOV     R5,A
   \   000056   EE           MOV     A,R6
   \   000057   FA           MOV     R2,A
   \   000058   EF           MOV     A,R7
   \   000059   FB           MOV     R3,A
   \   00005A   12....       LCALL   ??sAddrExtCpy?relay
   \   00005D   8A..         MOV     ?V0 + 4,R2
   \   00005F   8B..         MOV     ?V0 + 5,R3
   \   000061   AE..         MOV     R6,?V0 + 4
   \   000063   AF..         MOV     R7,?V0 + 5
   1148          
   1149            *pBuf++ = endPoint;
   \   000065   8E82         MOV     DPL,R6
   \   000067   8F83         MOV     DPH,R7
   \   000069   E5..         MOV     A,?V0 + 3
   \   00006B   12....       LCALL   ??Subroutine100_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   00006E   7412         MOV     A,#0x12
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   12....       LCALL   ?Subroutine40 & 0xFFFF
   1150          
   1151            *pBuf++ = LO_UINT16( ProfileID );   // Profile ID
   \                     ??CrossCallReturnLabel_51:
   \   000076   8E82         MOV     DPL,R6
   \   000078   8F83         MOV     DPH,R7
   \   00007A   12....       LCALL   ??Subroutine108_0 & 0xFFFF
   1152            *pBuf++ = HI_UINT16( ProfileID );
   \                     ??CrossCallReturnLabel_232:
   \   00007D   A3           INC     DPTR
   1153          
   1154            *pBuf++ = NumInClusters; // Input cluster list
   \   00007E   E5..         MOV     A,?V0 + 2
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   0E           INC     R6
   \   000083   0E           INC     R6
   \   000084   0E           INC     R6
   \   000085   AF83         MOV     R7,DPH
   1155            for ( i = 0; i < NumInClusters; ++i )
   \   000087   7C00         MOV     R4,#0x0
   \   000089   7415         MOV     A,#0x15
   \   00008B   12....       LCALL   ?XSTACK_DISP0_8
   \   00008E   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000091   8026         SJMP    ??CrossCallReturnLabel_35
   1156            {
   1157              *pBuf++ = LO_UINT16(InClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_4:
   \   000093   EC           MOV     A,R4
   \   000094   C3           CLR     C
   \   000095   33           RLC     A
   \   000096   F5..         MOV     ?V0 + 4,A
   \   000098   E4           CLR     A
   \   000099   33           RLC     A
   \   00009A   F5..         MOV     ?V0 + 5,A
   \   00009C   EA           MOV     A,R2
   \   00009D   25..         ADD     A,?V0 + 4
   \   00009F   F5..         MOV     ?V0 + 4,A
   \   0000A1   EB           MOV     A,R3
   \   0000A2   35..         ADDC    A,?V0 + 5
   \   0000A4   F5..         MOV     ?V0 + 5,A
   \   0000A6   85..82       MOV     DPL,?V0 + 4
   \   0000A9   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   0000AC   E8           MOV     A,R0
   \   0000AD   FE           MOV     R6,A
   \   0000AE   E9           MOV     A,R1
   \   0000AF   FF           MOV     R7,A
   1158              *pBuf++ = HI_UINT16(InClusterList[i]);
   \   0000B0   85..82       MOV     DPL,?V0 + 4
   \   0000B3   85..83       MOV     DPH,?V0 + 5
   \   0000B6   12....       LCALL   ?Subroutine33 & 0xFFFF
   1159            }
   \                     ??CrossCallReturnLabel_35:
   \   0000B9   8E82         MOV     DPL,R6
   \   0000BB   8F83         MOV     DPH,R7
   \   0000BD   A3           INC     DPTR
   \   0000BE   A882         MOV     R0,DPL
   \   0000C0   A983         MOV     R1,DPH
   \   0000C2   EC           MOV     A,R4
   \   0000C3   C3           CLR     C
   \   0000C4   95..         SUBB    A,?V0 + 2
   \   0000C6   40CB         JC      ??ZDP_EndDeviceBindReq_4
   1160          
   1161            *pBuf++ = NumOutClusters; // Output cluster list
   \   0000C8   8E82         MOV     DPL,R6
   \   0000CA   8F83         MOV     DPH,R7
   \   0000CC   E5..         MOV     A,?V0 + 1
   \   0000CE   F0           MOVX    @DPTR,A
   \   0000CF   E8           MOV     A,R0
   \   0000D0   FE           MOV     R6,A
   \   0000D1   E9           MOV     A,R1
   \   0000D2   FF           MOV     R7,A
   1162            for ( i = 0; i < NumOutClusters; ++i )
   \   0000D3   7C00         MOV     R4,#0x0
   \   0000D5   7418         MOV     A,#0x18
   \   0000D7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000DA   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   0000DD   801B         SJMP    ??CrossCallReturnLabel_36
   1163            {
   1164              *pBuf++ = LO_UINT16(OutClusterList[i]);
   \                     ??ZDP_EndDeviceBindReq_5:
   \   0000DF   EC           MOV     A,R4
   \   0000E0   C3           CLR     C
   \   0000E1   33           RLC     A
   \   0000E2   FA           MOV     R2,A
   \   0000E3   E4           CLR     A
   \   0000E4   33           RLC     A
   \   0000E5   FB           MOV     R3,A
   \   0000E6   E8           MOV     A,R0
   \   0000E7   2A           ADD     A,R2
   \   0000E8   FA           MOV     R2,A
   \   0000E9   E9           MOV     A,R1
   \   0000EA   3B           ADDC    A,R3
   \   0000EB   FB           MOV     R3,A
   \   0000EC   8A82         MOV     DPL,R2
   \   0000EE   8B83         MOV     DPH,R3
   \   0000F0   12....       LCALL   ?Subroutine15 & 0xFFFF
   1165              *pBuf++ = HI_UINT16(OutClusterList[i]);
   \                     ??CrossCallReturnLabel_6:
   \   0000F3   8A82         MOV     DPL,R2
   \   0000F5   8B83         MOV     DPH,R3
   \   0000F7   12....       LCALL   ?Subroutine33 & 0xFFFF
   1166            }
   \                     ??CrossCallReturnLabel_36:
   \   0000FA   EC           MOV     A,R4
   \   0000FB   C3           CLR     C
   \   0000FC   95..         SUBB    A,?V0 + 1
   \   0000FE   40DF         JC      ??ZDP_EndDeviceBindReq_5
   1167          
   1168            return fillAndSend( &ZDP_TransID, dstAddr, End_Device_Bind_req, len );
   \   000100                ; Setup parameters for call to function fillAndSend
   \   000100   75..20       MOV     ?V0 + 4,#0x20
   \   000103   75..00       MOV     ?V0 + 5,#0x0
   \   000106   78..         MOV     R0,#?V0 + 4
   \   000108   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010B   A9..         MOV     R1,?V0 + 0
   \   00010D   AC..         MOV     R4,?V0 + 6
   \   00010F   AD..         MOV     R5,?V0 + 7
   \   000111   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000113   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000115   12....       LCALL   ??fillAndSend?relay
   \   000118   7402         MOV     A,#0x2
   \   00011A   12....       LCALL   ?DEALLOC_XSTACK8
   \                     ??ZDP_EndDeviceBindReq_1:
   \   00011D   02....       LJMP    ?Subroutine5 & 0xFFFF
   1169          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine96_0
   \   000002                ; // Fall through to label ??Subroutine96_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000004   0C           INC     R4
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   E5..         MOV     A,?V0 + 4
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?V0 + 5
   \   000006                REQUIRE ??Subroutine100_0
   \   000006                ; // Fall through to label ??Subroutine100_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   000003   A3           INC     DPTR
   \   000004   0E           INC     R6
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET
   1170          
   1171          /*********************************************************************
   1172           * @fn          ZDP_BindUnbindReq
   1173           *
   1174           * @brief       This builds and send a Bind_req or Unbind_req message
   1175           *              Depending on the ClusterID. This function
   1176           *              sends a unicast message to the local coordinator.
   1177           *
   1178           * @param       BindOrUnbind - either Bind_req or Unbind_req
   1179           * @param       dstAddr - destination address of the message
   1180           * @param       SourceAddr - source 64 bit address of the binding
   1181           * @param       SrcEPIntf - Source endpoint/interface
   1182           * @param       ClusterID - Binding cluster ID
   1183           * @param       DestinationAddr - destination 64 bit addr of binding
   1184           * @param       DstEPIntf - destination endpoint/interface
   1185           * @param       SecurityEnable - Security Options
   1186           *
   1187           * @return      afStatus_t
   1188           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1189          afStatus_t ZDP_BindUnbindReq( uint16 BindOrUnbind, zAddrType_t *dstAddr,
   \                     ZDP_BindUnbindReq:
   1190                                        uint8 *SourceAddr, byte SrcEndPoint,
   1191                                        cId_t ClusterID,
   1192                                        zAddrType_t *destinationAddr, byte DstEndPoint,
   1193                                        byte SecurityEnable )
   1194          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   \   000009   8C..         MOV     ?V0 + 8,R4
   \   00000B   8D..         MOV     ?V0 + 9,R5
   \   00000D   89..         MOV     ?V0 + 6,R1
   \   00000F   7414         MOV     A,#0x14
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   000017   741A         MOV     A,#0x1a
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 3,A
   1195            uint8 *pBuf = ZDP_TmpBuf;
   \   00001F   12....       LCALL   ?Subroutine43 & 0xFFFF
   1196            byte len;
   1197          
   1198            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1199          
   1200            // SourceAddr + SrcEPIntf + ClusterID +  addrMode.
   1201            len = Z_EXTADDR_LEN + 1 + sizeof( cId_t ) + sizeof( uint8 );
   \                     ??CrossCallReturnLabel_173:
   \   000022   75..0C       MOV     ?V0 + 2,#0xc
   \   000025   7418         MOV     A,#0x18
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   1202            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_239:
   \   00002D   EE           MOV     A,R6
   \   00002E   2408         ADD     A,#0x8
   \   000030   F5..         MOV     ?V0 + 4,A
   \   000032   EF           MOV     A,R7
   \   000033   3400         ADDC    A,#0x0
   \   000035   F5..         MOV     ?V0 + 5,A
   \   000037   85..82       MOV     DPL,?V0 + 4
   \   00003A   F583         MOV     DPH,A
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F8           MOV     R0,A
   \   00003E   7403         MOV     A,#0x3
   \   000040   68           XRL     A,R0
   \   000041   7005         JNZ     ??ZDP_BindUnbindReq_0
   1203              len += Z_EXTADDR_LEN + 1;     // +1 for DstEPIntf
   \   000043   75..15       MOV     ?V0 + 2,#0x15
   \   000046   8008         SJMP    ??ZDP_BindUnbindReq_1
   1204            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_0:
   \   000048   7401         MOV     A,#0x1
   \   00004A   68           XRL     A,R0
   \   00004B   7003         JNZ     ??ZDP_BindUnbindReq_1
   1205              len += sizeof ( uint16 );
   \   00004D   75..0E       MOV     ?V0 + 2,#0xe
   1206          
   1207            pBuf = osal_cpyExtAddr( pBuf, SourceAddr );
   \                     ??ZDP_BindUnbindReq_1:
   \   000050                ; Setup parameters for call to function sAddrExtCpy
   \   000050   12....       LCALL   ??sAddrExtCpy?relay
   1208            *pBuf++ = SrcEndPoint;
   \   000053   8A82         MOV     DPL,R2
   \   000055   8B83         MOV     DPH,R3
   \   000057   E5..         MOV     A,?V0 + 6
   \   000059   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00005C   7416         MOV     A,#0x16
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   12....       LCALL   ?Subroutine19 & 0xFFFF
   1209          
   1210            *pBuf++ = LO_UINT16( ClusterID );
   1211          
   1212            *pBuf++ = HI_UINT16( ClusterID );
   1213            *pBuf++ = destinationAddr->addrMode;
   \                     ??CrossCallReturnLabel_12:
   \   000064   85..82       MOV     DPL,?V0 + 4
   \   000067   85..83       MOV     DPH,?V0 + 5
   \   00006A   12....       LCALL   ?Subroutine38 & 0xFFFF
   1214            if ( destinationAddr->addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_46:
   \   00006D   85..82       MOV     DPL,?V0 + 4
   \   000070   85..83       MOV     DPH,?V0 + 5
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F8           MOV     R0,A
   \   000075   7403         MOV     A,#0x3
   \   000077   68           XRL     A,R0
   \   000078   700F         JNZ     ??ZDP_BindUnbindReq_2
   1215            {
   1216              pBuf = osal_cpyExtAddr( pBuf, destinationAddr->addr.extAddr );
   1217              *pBuf = DstEndPoint;
   \   00007A                ; Setup parameters for call to function sAddrExtCpy
   \   00007A   EE           MOV     A,R6
   \   00007B   FC           MOV     R4,A
   \   00007C   EF           MOV     A,R7
   \   00007D   FD           MOV     R5,A
   \   00007E   12....       LCALL   ??sAddrExtCpy?relay
   \   000081   8A82         MOV     DPL,R2
   \   000083   8B83         MOV     DPH,R3
   \   000085   E5..         MOV     A,?V0 + 3
   \   000087   8016         SJMP    ??ZDP_BindUnbindReq_3
   1218            }
   1219            else if ( destinationAddr->addrMode == AddrGroup )
   \                     ??ZDP_BindUnbindReq_2:
   \   000089   7401         MOV     A,#0x1
   \   00008B   68           XRL     A,R0
   \   00008C   7012         JNZ     ??ZDP_BindUnbindReq_4
   1220            {
   1221              *pBuf++ = LO_UINT16( destinationAddr->addr.shortAddr );
   \   00008E   8E82         MOV     DPL,R6
   \   000090   8F83         MOV     DPH,R7
   \   000092   12....       LCALL   ?Subroutine38 & 0xFFFF
   1222              *pBuf++ = HI_UINT16( destinationAddr->addr.shortAddr );
   \                     ??CrossCallReturnLabel_47:
   \   000095   8E82         MOV     DPL,R6
   \   000097   8F83         MOV     DPH,R7
   \   000099   A3           INC     DPTR
   \   00009A   E0           MOVX    A,@DPTR
   \   00009B   8A82         MOV     DPL,R2
   \   00009D   8B83         MOV     DPH,R3
   \                     ??ZDP_BindUnbindReq_3:
   \   00009F   F0           MOVX    @DPTR,A
   1223            }
   1224          
   1225            FillAndSendTxOptions( &ZDP_TransID, dstAddr, BindOrUnbind, len, AF_MSG_ACK_REQUEST );
   \                     ??ZDP_BindUnbindReq_4:
   \   0000A0   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000A3   7410         MOV     A,#0x10
   \   0000A5   F0           MOVX    @DPTR,A
   \   0000A6                ; Setup parameters for call to function fillAndSend
   \   0000A6   78..         MOV     R0,#?V0 + 0
   \   0000A8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AB   A9..         MOV     R1,?V0 + 2
   \   0000AD   AC..         MOV     R4,?V0 + 8
   \   0000AF   AD..         MOV     R5,?V0 + 9
   \   0000B1   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   0000B3   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   0000B5   12....       LCALL   ??fillAndSend?relay
   \   0000B8   7402         MOV     A,#0x2
   \   0000BA   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BD   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000C0   E4           CLR     A
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   02....       LJMP    ?Subroutine4 & 0xFFFF
   1226          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000003   22           RET
   1227          
   1228          /*********************************************************************
   1229           * Network Management
   1230           */
   1231          
   1232          /*********************************************************************
   1233           * @fn          ZDP_MgmtNwkDiscReq
   1234           *
   1235           * @brief       This builds and send a Mgmt_NWK_Disc_req message. This
   1236           *              function sends a unicast message.
   1237           *
   1238           * @param       dstAddr - destination address of the message
   1239           * @param       ScanChannels - 32 bit address bit map
   1240           * @param       StartIndex - Starting index within the reporting network
   1241           *                           list
   1242           * @param       SecurityEnable - Security Options
   1243           *
   1244           * @return      afStatus_t
   1245           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1246          afStatus_t ZDP_MgmtNwkDiscReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscReq:
   1247                                         uint32 ScanChannels,
   1248                                         byte ScanDuration,
   1249                                         byte StartIndex,
   1250                                         byte SecurityEnable )
   1251          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
   \   00000B   8C..         MOV     ?V0 + 1,R4
   \   00000D   7410         MOV     A,#0x10
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   78..         MOV     R0,#?V0 + 4
   \   000014   12....       LCALL   ?L_MOV_X
   1252            uint8 *pBuf = ZDP_TmpBuf;
   1253            byte len = sizeof( uint32 )+1+1;  // ScanChannels + ScanDuration + StartIndex.
   1254          
   1255            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1256          
   1257            pBuf = osal_buffer_uint32( pBuf, ScanChannels );
   \   000017                ; Setup parameters for call to function osal_buffer_uint32
   \   000017   78..         MOV     R0,#?V0 + 4
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   00001C   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   00001F   12....       LCALL   ??osal_buffer_uint32?relay
   \   000022   7404         MOV     A,#0x4
   \   000024   12....       LCALL   ?DEALLOC_XSTACK8
   \   000027   8A82         MOV     DPL,R2
   \   000029   8B83         MOV     DPH,R3
   1258          
   1259            *pBuf++ = ScanDuration;
   \   00002B   E5..         MOV     A,?V0 + 0
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   A3           INC     DPTR
   1260            *pBuf = StartIndex;
   \   00002F   E5..         MOV     A,?V0 + 1
   \   000031   F0           MOVX    @DPTR,A
   1261          
   1262            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Disc_req, len );
   \   000032                ; Setup parameters for call to function fillAndSend
   \   000032   75..30       MOV     ?V0 + 2,#0x30
   \   000035   75..00       MOV     ?V0 + 3,#0x0
   \   000038   78..         MOV     R0,#?V0 + 2
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   7906         MOV     R1,#0x6
   \   00003F   EE           MOV     A,R6
   \   000040   FC           MOV     R4,A
   \   000041   EF           MOV     A,R7
   \   000042   FD           MOV     R5,A
   \   000043                REQUIRE ?Subroutine0
   \   000043                ; // Fall through to label ?Subroutine0
   1263          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000002   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000004   12....       LCALL   ??fillAndSend?relay
   \   000007   7402         MOV     A,#0x2
   \   000009                REQUIRE ??Subroutine98_0
   \   000009                ; // Fall through to label ??Subroutine98_0
   1264          
   1265          /*********************************************************************
   1266           * @fn          ZDP_MgmtDirectJoinReq
   1267           *
   1268           * @brief       This builds and send a Mgmt_Direct_Join_req message. This
   1269           *              function sends a unicast message.
   1270           *
   1271           * @param       dstAddr - destination address of the message
   1272           * @param       deviceAddr - 64 bit IEEE Address
   1273           * @param       SecurityEnable - Security Options
   1274           *
   1275           * @return      afStatus_t
   1276           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1277          afStatus_t ZDP_MgmtDirectJoinReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtDirectJoinReq:
   1278                                         uint8 *deviceAddr,
   1279                                         byte capInfo,
   1280                                         byte SecurityEnable )
   1281          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
   1282            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1283          
   1284            osal_cpyExtAddr( ZDP_TmpBuf, deviceAddr );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   00000E   12....       LCALL   ??sAddrExtCpy?relay
   1285            ZDP_TmpBuf[Z_EXTADDR_LEN] = capInfo;
   \   000011   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000014   C8           XCH     A,R0
   \   000015   2408         ADD     A,#0x8
   \   000017   F582         MOV     DPL,A
   \   000019   E8           MOV     A,R0
   \   00001A   12....       LCALL   ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   00001D   E5..         MOV     A,?V0 + 0
   \   00001F   F0           MOVX    @DPTR,A
   1286          
   1287            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Direct_Join_req, (Z_EXTADDR_LEN + 1) );
   \   000020                ; Setup parameters for call to function fillAndSend
   \   000020   75..35       MOV     ?V0 + 2,#0x35
   \   000023                REQUIRE ?Subroutine6
   \   000023                ; // Fall through to label ?Subroutine6
   1288          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   75..00       MOV     ?V0 + 3,#0x0
   \   000003   78..         MOV     R0,#?V0 + 2
   \   000005   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000008   7909         MOV     R1,#0x9
   \   00000A   EE           MOV     A,R6
   \   00000B   FC           MOV     R4,A
   \   00000C   EF           MOV     A,R7
   \   00000D   FD           MOV     R5,A
   \   00000E   7A..         MOV     R2,#ZDP_TransID & 0xff
   \   000010   7B..         MOV     R3,#(ZDP_TransID >> 8) & 0xff
   \   000012   12....       LCALL   ??fillAndSend?relay
   \   000015   7402         MOV     A,#0x2
   \   000017                REQUIRE ??Subroutine99_0
   \   000017                ; // Fall through to label ??Subroutine99_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine99_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F04         MOV     R7,#0x4
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
   1289          
   1290          /*********************************************************************
   1291           * @fn          ZDP_MgmtPermitJoinReq
   1292           *
   1293           * @brief       This builds and send a Mgmt_Permit_Join_req message.
   1294           *
   1295           * @param       dstAddr - destination address of the message
   1296           * @param       duration - Permit duration
   1297           * @param       TcSignificance - Trust Center Significance
   1298           *
   1299           * @return      afStatus_t
   1300           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1301          afStatus_t ZDP_MgmtPermitJoinReq( zAddrType_t *dstAddr, byte duration,
   \                     ZDP_MgmtPermitJoinReq:
   1302                                            byte TcSignificance, byte SecurityEnable )
   1303          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1304            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1305          
   1306            // Build buffer
   1307            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION] = duration;
   \   000005   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000008   E9           MOV     A,R1
   \   000009   12....       LCALL   ?Subroutine29 & 0xFFFF
   1308            ZDP_TmpBuf[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG]   = TcSignificance;
   \                     ??CrossCallReturnLabel_118:
   \   00000C   EC           MOV     A,R4
   \   00000D   F0           MOVX    @DPTR,A
   1309          
   1310            // Send the message
   1311            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Permit_Join_req,
   1312                                ZDP_MGMT_PERMIT_JOIN_REQ_SIZE );
   \   00000E                ; Setup parameters for call to function fillAndSend
   \   00000E   75..36       MOV     ?V0 + 0,#0x36
   \   000011   02....       LJMP    ?Subroutine2 & 0xFFFF
   1313          }
   1314          
   1315          /*********************************************************************
   1316           * @fn          ZDP_MgmtLeaveReq
   1317           *
   1318           * @brief       This builds and send a Mgmt_Leave_req message.
   1319           *
   1320           * @param       dstAddr - destination address of the message
   1321           *              IEEEAddr - IEEE adddress of device that is removed
   1322           *              RemoveChildren - set to 1 to remove the children of the
   1323           *                                device as well. 0 otherwise.
   1324           *              Rejoin - set to 1 if the removed device should rejoin
   1325                                   afterwards. 0 otherwise.
   1326           *
   1327           * @return      afStatus_t
   1328           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1329          afStatus_t ZDP_MgmtLeaveReq( zAddrType_t *dstAddr, uint8 *IEEEAddr, uint8 RemoveChildren,
   \                     ZDP_MgmtLeaveReq:
   1330                           uint8 Rejoin, uint8 SecurityEnable )
   1331          
   1332          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   89..         MOV     ?V0 + 0,R1
   \   00000B   740C         MOV     A,#0xc
   \   00000D   12....       LCALL   ?XSTACK_DISP0_8
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F5..         MOV     ?V0 + 1,A
   1333            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1334          
   1335            osal_cpyExtAddr( ZDP_TmpBuf, IEEEAddr );
   \   000013                ; Setup parameters for call to function sAddrExtCpy
   \   000013   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000016   12....       LCALL   ??sAddrExtCpy?relay
   1336            ZDP_TmpBuf[Z_EXTADDR_LEN] = 0;
   \   000019   90....       MOV     DPTR,#ZDP_TmpBuf
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   2408         ADD     A,#0x8
   \   00001F   F8           MOV     R0,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000025   E4           CLR     A
   \   000026   F0           MOVX    @DPTR,A
   1337          
   1338            if ( RemoveChildren == TRUE )
   \   000027   04           INC     A
   \   000028   65..         XRL     A,?V0 + 0
   \   00002A   7003         JNZ     ??ZDP_MgmtLeaveReq_0
   1339            {
   1340              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_RC;
   \   00002C   7440         MOV     A,#0x40
   \   00002E   F0           MOVX    @DPTR,A
   1341            }
   1342            if ( Rejoin == TRUE )
   \                     ??ZDP_MgmtLeaveReq_0:
   \   00002F   7401         MOV     A,#0x1
   \   000031   65..         XRL     A,?V0 + 1
   \   000033   7004         JNZ     ??ZDP_MgmtLeaveReq_1
   1343            {
   1344              ZDP_TmpBuf[Z_EXTADDR_LEN] |= ZDP_MGMT_LEAVE_REQ_REJOIN;
   \   000035   E0           MOVX    A,@DPTR
   \   000036   D2E7         SETB    0xE0 /* A   */.7
   \   000038   F0           MOVX    @DPTR,A
   1345            }
   1346          
   1347            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_Leave_req, (Z_EXTADDR_LEN + 1) );
   \                     ??ZDP_MgmtLeaveReq_1:
   \   000039                ; Setup parameters for call to function fillAndSend
   \   000039   75..34       MOV     ?V0 + 2,#0x34
   \   00003C   80..         SJMP    ?Subroutine6
   1348          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   22           RET
   1349          
   1350          /*********************************************************************
   1351           * @fn          ZDP_MgmtNwkUpdateReq
   1352           *
   1353           * @brief       This builds and send a Mgmt_NWK_Update_req message. This
   1354           *              function sends a unicast or broadcast message.
   1355           *
   1356           * @param       dstAddr - destination address of the message
   1357           * @param       ChannelMask - 32 bit address bit map
   1358           * @param       ScanDuration - length of time to spend scanning each channel
   1359           * @param       ScanCount - number of energy scans to be conducted
   1360           * @param       NwkUpdateId - NWk Update Id value
   1361           * @param       NwkManagerAddr - NWK address for device with Network Manager
   1362           *                               bit set in its Node Descriptor
   1363           *
   1364           * @return      afStatus_t
   1365           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1366          afStatus_t ZDP_MgmtNwkUpdateReq( zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateReq:
   1367                                           uint32 ChannelMask,
   1368                                           uint8 ScanDuration,
   1369                                           uint8 ScanCount,
   1370                                           uint8 NwkUpdateId,
   1371                                           uint16 NwkManagerAddr )
   1372          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 6,R2
   \   000007   8B..         MOV     ?V0 + 7,R3
   \   000009   E9           MOV     A,R1
   \   00000A   FE           MOV     R6,A
   \   00000B   8C..         MOV     ?V0 + 4,R4
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   \   00000F   7410         MOV     A,#0x10
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   78..         MOV     R0,#?V0 + 0
   \   000016   12....       LCALL   ?L_MOV_X
   1373            uint8 *pBuf = ZDP_TmpBuf;
   1374            byte len = sizeof( uint32 ) + 1;  // ChannelMask + ScanDuration
   \   000019   75..05       MOV     ?V0 + 5,#0x5
   1375          
   1376            pBuf = osal_buffer_uint32( pBuf, ChannelMask );
   \   00001C                ; Setup parameters for call to function osal_buffer_uint32
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000021   12....       LCALL   ?Subroutine43 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000024   12....       LCALL   ??osal_buffer_uint32?relay
   \   000027   7404         MOV     A,#0x4
   \   000029   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002C   8A..         MOV     ?V0 + 0,R2
   \   00002E   8B..         MOV     ?V0 + 1,R3
   \   000030   A8..         MOV     R0,?V0 + 0
   \   000032   A9..         MOV     R1,?V0 + 1
   1377          
   1378            *pBuf++ = ScanDuration;
   \   000034   12....       LCALL   ?Subroutine47 & 0xFFFF
   1379          
   1380            if ( ScanDuration <= 0x05 )
   \                     ??CrossCallReturnLabel_140:
   \   000037   A3           INC     DPTR
   \   000038   AB83         MOV     R3,DPH
   \   00003A   C3           CLR     C
   \   00003B   9406         SUBB    A,#0x6
   \   00003D   500B         JNC     ??ZDP_MgmtNwkUpdateReq_0
   1381            {
   1382              // Request is to scan over channelMask
   1383              len += sizeof( uint8 );
   \   00003F   75..06       MOV     ?V0 + 5,#0x6
   1384          
   1385              *pBuf++ = ScanCount;
   \   000042   8882         MOV     DPL,R0
   \   000044   8983         MOV     DPH,R1
   \   000046   E5..         MOV     A,?V0 + 4
   \   000048   802D         SJMP    ??ZDP_MgmtNwkUpdateReq_1
   1386            }
   1387            else if ( ( ScanDuration == 0xFE ) || ( ScanDuration == 0xFF ) )
   \                     ??ZDP_MgmtNwkUpdateReq_0:
   \   00004A   74FE         MOV     A,#-0x2
   \   00004C   6E           XRL     A,R6
   \   00004D   6005         JZ      ??ZDP_MgmtNwkUpdateReq_2
   \   00004F   74FF         MOV     A,#-0x1
   \   000051   6E           XRL     A,R6
   \   000052   7024         JNZ     ??ZDP_MgmtNwkUpdateReq_3
   1388            {
   1389              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   1390              len += sizeof( uint8 );
   \                     ??ZDP_MgmtNwkUpdateReq_2:
   \   000054   75..06       MOV     ?V0 + 5,#0x6
   1391          
   1392              *pBuf++ = NwkUpdateId;
   \   000057   EF           MOV     A,R7
   \   000058   8882         MOV     DPL,R0
   \   00005A   8983         MOV     DPH,R1
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   08           INC     R0
   \   00005E   EB           MOV     A,R3
   \   00005F   F9           MOV     R1,A
   1393          
   1394              if ( ScanDuration == 0xFF )
   \   000060   74FF         MOV     A,#-0x1
   \   000062   6E           XRL     A,R6
   \   000063   7013         JNZ     ??ZDP_MgmtNwkUpdateReq_3
   1395              {
   1396                len += sizeof( uint16 );
   \   000065   75..08       MOV     ?V0 + 5,#0x8
   \   000068   7414         MOV     A,#0x14
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   12....       LCALL   ?Subroutine42 & 0xFFFF
   1397          
   1398                *pBuf++  = LO_UINT16( NwkManagerAddr );
   \                     ??CrossCallReturnLabel_55:
   \   000070   8882         MOV     DPL,R0
   \   000072   8983         MOV     DPH,R1
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   1399                *pBuf++  = HI_UINT16( NwkManagerAddr );
   \   000076   EB           MOV     A,R3
   \                     ??ZDP_MgmtNwkUpdateReq_1:
   \   000077   F0           MOVX    @DPTR,A
   1400              }
   1401            }
   1402          
   1403            return fillAndSend( &ZDP_TransID, dstAddr, Mgmt_NWK_Update_req, len );
   \                     ??ZDP_MgmtNwkUpdateReq_3:
   \   000078                ; Setup parameters for call to function fillAndSend
   \   000078   75..38       MOV     ?V0 + 0,#0x38
   \   00007B   75..00       MOV     ?V0 + 1,#0x0
   \   00007E   78..         MOV     R0,#?V0 + 0
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   A9..         MOV     R1,?V0 + 5
   \   000085   AC..         MOV     R4,?V0 + 6
   \   000087   AD..         MOV     R5,?V0 + 7
   \   000089   02....       LJMP    ?Subroutine0 & 0xFFFF
   1404          }
   1405          
   1406          
   1407          /*********************************************************************
   1408           * Network Management Responses
   1409           */
   1410          
   1411          /*********************************************************************
   1412           * @fn          ZDP_MgmtNwkDiscRsp
   1413           *
   1414           * @brief       This builds and send a Mgmt_NWK_Disc_rsp message. This
   1415           *              function sends a unicast message.
   1416           *
   1417           * @param       dstAddr - destination address of the message
   1418           * @param       Status - message status (ZDP_SUCCESS or other)
   1419           * @param       NetworkCount - Total number of networks found
   1420           * @param       StartIndex - Starting index within the reporting network
   1421           *                           list
   1422           * @param       NetworkListCount - number of network lists included
   1423           *                                 in this message
   1424           * @param       NetworkList - List of network descriptors
   1425           * @param       SecurityEnable - Security Options
   1426           *
   1427           * @return      afStatus_t
   1428           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1429          afStatus_t ZDP_MgmtNwkDiscRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkDiscRsp:
   1430                                      byte Status,
   1431                                      byte NetworkCount,
   1432                                      byte StartIndex,
   1433                                      byte NetworkListCount,
   1434                                      networkDesc_t *NetworkList,
   1435                                      byte SecurityEnable )
   1436          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   00000D   8C..         MOV     ?V0 + 10,R4
   \   00000F   8D..         MOV     ?V0 + 7,R5
   \   000011   7417         MOV     A,#0x17
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 2,A
   \   000019   7418         MOV     A,#0x18
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 4,A
   1437            uint8 *buf;
   1438            uint8 *pBuf;
   1439            byte len = 1+1+1+1;  // Status + NetworkCount + StartIndex + NetworkCountList.
   1440            byte idx;
   1441          
   1442            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1443          
   1444            len += (NetworkListCount * ( ZDP_NETWORK_EXTENDED_DISCRIPTOR_SIZE - 2 ));
   \   000021   75F00C       MOV     B,#0xc
   \   000024   A4           MUL     AB
   \   000025   2404         ADD     A,#0x4
   \   000027   F5..         MOV     ?V0 + 5,A
   1445          
   1446            buf = osal_mem_alloc( len+1 );
   \   000029                ; Setup parameters for call to function osal_mem_alloc
   \   000029   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00002C   12....       LCALL   ??osal_mem_alloc?relay
   \   00002F   8A..         MOV     ?V0 + 0,R2
   \   000031   8B..         MOV     ?V0 + 1,R3
   1447            if ( buf == NULL )
   \   000033   EA           MOV     A,R2
   \   000034   45..         ORL     A,?V0 + 1
   \   000036   7005         JNZ     ??ZDP_MgmtNwkDiscRsp_0
   1448            {
   1449              return afStatus_MEM_FAIL;
   \   000038   7910         MOV     R1,#0x10
   \   00003A   02....       LJMP    ??CrossCallReturnLabel_77 & 0xFFFF
   1450            }
   1451          
   1452            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkDiscRsp_0:
   \   00003D   8A82         MOV     DPL,R2
   \   00003F   8B83         MOV     DPH,R3
   \   000041   A3           INC     DPTR
   \   000042   8582..       MOV     ?V0 + 8,DPL
   \   000045   8583..       MOV     ?V0 + 9,DPH
   1453          
   1454            *pBuf++ = Status;
   \   000048   E5..         MOV     A,?V0 + 10
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
   1455            *pBuf++ = NetworkCount;
   \   00004C   E5..         MOV     A,?V0 + 7
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   1456            *pBuf++ = StartIndex;
   \   000050   E5..         MOV     A,?V0 + 2
   \   000052   F0           MOVX    @DPTR,A
   \   000053   A3           INC     DPTR
   1457            *pBuf++ = NetworkListCount;
   \   000054   E5..         MOV     A,?V0 + 4
   \   000056   12....       LCALL   ??Subroutine100_0 & 0xFFFF
   1458          
   1459            for ( idx = 0; idx < NetworkListCount; idx++ )
   \                     ??CrossCallReturnLabel_182:
   \   000059   75..00       MOV     ?V0 + 6,#0x0
   \   00005C   7419         MOV     A,#0x19
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000064   8015         SJMP    ??ZDP_MgmtNwkDiscRsp_1
   1460            {
   1461              osal_cpyExtAddr( pBuf, NetworkList->extendedPANID);
   1462              pBuf += Z_EXTADDR_LEN;
   1463          
   1464              *pBuf++  = NetworkList->logicalChannel;                // LogicalChannel
   1465              *pBuf    = NetworkList->stackProfile;                  // Stack profile
   1466              *pBuf++ |= (byte)(NetworkList->version << 4);          // ZigBee Version
   1467              *pBuf    = BEACON_ORDER_NO_BEACONS;                    // Beacon Order
   1468              *pBuf++ |= (uint8)(BEACON_ORDER_NO_BEACONS << 4);      // Superframe Order
   1469          
   1470              if ( NetworkList->chosenRouter != INVALID_NODE_ADDR )
   1471              {
   1472                *pBuf++ = TRUE;                         // Permit Joining
   1473              }
   1474              else
   1475              {
   1476                *pBuf++ = FALSE;
   \                     ??ZDP_MgmtNwkDiscRsp_2:
   \   000066   E4           CLR     A
   \                     ??ZDP_MgmtNwkDiscRsp_3:
   \   000067   F0           MOVX    @DPTR,A
   \   000068   0E           INC     R6
   \   000069   E9           MOV     A,R1
   \   00006A   FF           MOV     R7,A
   1477              }
   1478          
   1479              NetworkList = NetworkList->nextDesc;    // Move to next list entry
   \   00006B   E5..         MOV     A,?V0 + 2
   \   00006D   2414         ADD     A,#0x14
   \   00006F   F582         MOV     DPL,A
   \   000071   E5..         MOV     A,?V0 + 3
   \   000073   12....       LCALL   ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000076   12....       LCALL   ??Subroutine89_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   000079   05..         INC     ?V0 + 6
   \                     ??ZDP_MgmtNwkDiscRsp_1:
   \   00007B   E5..         MOV     A,?V0 + 6
   \   00007D   C3           CLR     C
   \   00007E   95..         SUBB    A,?V0 + 4
   \   000080   4003         JC      $+5
   \   000082   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_4 & 0xFFFF
   \   000085                ; Setup parameters for call to function sAddrExtCpy
   \   000085   E5..         MOV     A,?V0 + 2
   \   000087   240B         ADD     A,#0xb
   \   000089   FC           MOV     R4,A
   \   00008A   E5..         MOV     A,?V0 + 3
   \   00008C   3400         ADDC    A,#0x0
   \   00008E   FD           MOV     R5,A
   \   00008F   EE           MOV     A,R6
   \   000090   FA           MOV     R2,A
   \   000091   EF           MOV     A,R7
   \   000092   FB           MOV     R3,A
   \   000093   12....       LCALL   ??sAddrExtCpy?relay
   \   000096   EE           MOV     A,R6
   \   000097   2408         ADD     A,#0x8
   \   000099   FE           MOV     R6,A
   \   00009A   EF           MOV     A,R7
   \   00009B   3400         ADDC    A,#0x0
   \   00009D   FF           MOV     R7,A
   \   00009E   85..82       MOV     DPL,?V0 + 2
   \   0000A1   85..83       MOV     DPH,?V0 + 3
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   0000A9   85..82       MOV     DPL,?V0 + 2
   \   0000AC   85..83       MOV     DPH,?V0 + 3
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   12....       LCALL   ??Subroutine96_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   0000B8   EE           MOV     A,R6
   \   0000B9   F8           MOV     R0,A
   \   0000BA   EF           MOV     A,R7
   \   0000BB   F9           MOV     R1,A
   \   0000BC   A3           INC     DPTR
   \   0000BD   0E           INC     R6
   \   0000BE   AF83         MOV     R7,DPH
   \   0000C0   85..82       MOV     DPL,?V0 + 2
   \   0000C3   85..83       MOV     DPH,?V0 + 3
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000CE   8E82         MOV     DPL,R6
   \   0000D0   8F83         MOV     DPH,R7
   \   0000D2   740F         MOV     A,#0xf
   \   0000D4   F0           MOVX    @DPTR,A
   \   0000D5   08           INC     R0
   \   0000D6   EF           MOV     A,R7
   \   0000D7   F9           MOV     R1,A
   \   0000D8   A3           INC     DPTR
   \   0000D9   0E           INC     R6
   \   0000DA   AF83         MOV     R7,DPH
   \   0000DC   8882         MOV     DPL,R0
   \   0000DE   8983         MOV     DPH,R1
   \   0000E0   740F         MOV     A,#0xf
   \   0000E2   44F0         ORL     A,#0xf0
   \   0000E4   F0           MOVX    @DPTR,A
   \   0000E5   8E82         MOV     DPL,R6
   \   0000E7   8F83         MOV     DPH,R7
   \   0000E9   A3           INC     DPTR
   \   0000EA   A983         MOV     R1,DPH
   \   0000EC   85..82       MOV     DPL,?V0 + 2
   \   0000EF   85..83       MOV     DPH,?V0 + 3
   \   0000F2   A3           INC     DPTR
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   A3           INC     DPTR
   \   0000F8   A3           INC     DPTR
   \   0000F9   E0           MOVX    A,@DPTR
   \   0000FA   64FE         XRL     A,#0xfe
   \   0000FC   7003         JNZ     ??ZDP_MgmtNwkDiscRsp_5
   \   0000FE   A3           INC     DPTR
   \   0000FF   E0           MOVX    A,@DPTR
   \   000100   F4           CPL     A
   \                     ??ZDP_MgmtNwkDiscRsp_5:
   \   000101   8E82         MOV     DPL,R6
   \   000103   8F83         MOV     DPH,R7
   \   000105   7003         JNZ     $+5
   \   000107   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_2 & 0xFFFF
   \   00010A   7401         MOV     A,#0x1
   \   00010C   02....       LJMP    ??ZDP_MgmtNwkDiscRsp_3 & 0xFFFF
   1480            }
   1481          
   1482            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_NWK_Disc_rsp, len, buf );
   \                     ??ZDP_MgmtNwkDiscRsp_4:
   \   00010F   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000112   E5..         MOV     A,?V0 + 8
   \   000114   F0           MOVX    @DPTR,A
   \   000115   A3           INC     DPTR
   \   000116   E5..         MOV     A,?V0 + 9
   \   000118   F0           MOVX    @DPTR,A
   \   000119                ; Setup parameters for call to function fillAndSend
   \   000119   75..30       MOV     ?V0 + 2,#0x30
   \   00011C   75..80       MOV     ?V0 + 3,#-0x80
   \   00011F   78..         MOV     R0,#?V0 + 2
   \   000121   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000124   A9..         MOV     R1,?V0 + 5
   \   000126   AC..         MOV     R4,?V0 + 12
   \   000128   AD..         MOV     R5,?V0 + 13
   \   00012A   7402         MOV     A,#0x2
   \   00012C   12....       LCALL   ?XSTACK_DISP0_8
   \   00012F   AA82         MOV     R2,DPL
   \   000131   AB83         MOV     R3,DPH
   \   000133   12....       LCALL   ??fillAndSend?relay
   \   000136   7402         MOV     A,#0x2
   \   000138   12....       LCALL   ?DEALLOC_XSTACK8
   \   00013B   E9           MOV     A,R1
   \   00013C   FE           MOV     R6,A
   \   00013D                ; Setup parameters for call to function osal_mem_free
   \   00013D   AA..         MOV     R2,?V0 + 0
   \   00013F   AB..         MOV     R3,?V0 + 1
   \   000141   12....       LCALL   ??osal_mem_free?relay
   \   000144   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000147   02....       LJMP    ?Subroutine3 & 0xFFFF
   1483          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000003   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   EE           MOV     A,R6
   \   00000B   F9           MOV     R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   C4           SWAP    A
   \   000002   54F0         ANL     A,#0xf0
   \   000004   FA           MOV     R2,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   4A           ORL     A,R2
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   2401         ADD     A,#0x1
   \   000002   FA           MOV     R2,A
   \   000003   E4           CLR     A
   \   000004   3400         ADDC    A,#0x0
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   E9           MOV     A,R1
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   8A..         MOV     ?V0 + 12,R2
   \   00000A   8B..         MOV     ?V0 + 13,R3
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7401         MOV     A,#0x1
   \   000002                REQUIRE ??Subroutine107_0
   \   000002                ; // Fall through to label ??Subroutine107_0
   1484          
   1485          /*********************************************************************
   1486           * @fn          ZDP_MgmtLqiRsp
   1487           *
   1488           * @brief       This builds and send a Mgmt_Lqi_rsp message. This
   1489           *              function sends a unicast message.
   1490           *
   1491           * @param       dstAddr - destination address of the message
   1492           * @param       Status - message status (ZDP_SUCCESS or other)
   1493           * @param       NeighborLqiEntries - Total number of entries found
   1494           * @param       StartIndex - Starting index within the reporting list
   1495           * @param       NeighborLqiCount - number of lists included
   1496           *                                 in this message
   1497           * @param       NeighborLqiList - List of NeighborLqiItems.  This list
   1498           *                is the list to be sent, not the entire list
   1499           * @param       SecurityEnable - true if secure
   1500           *
   1501           * @return      ZStatus_t
   1502           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1503          ZStatus_t ZDP_MgmtLqiRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtLqiRsp:
   1504                                    byte Status,
   1505                                    byte NeighborLqiEntries,
   1506                                    byte StartIndex,
   1507                                    byte NeighborLqiCount,
   1508                                    ZDP_MgmtLqiItem_t* NeighborList,
   1509                                    byte SecurityEnable )
   1510          {
   \   000000   74E9         MOV     A,#-0x17
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 23
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00000D   8D..         MOV     ?V0 + 14,R5
   \   00000F   7418         MOV     A,#0x18
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 4,A
   \   000017   741A         MOV     A,#0x1a
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   1511            ZDP_MgmtLqiItem_t* list = NeighborList;
   1512            uint8 *buf, *pBuf;
   1513            byte len, x;
   1514          
   1515            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1516          
   1517            if ( ZSuccess != Status )
   \                     ??CrossCallReturnLabel_214:
   \   00001F   EC           MOV     A,R4
   \   000020   6024         JZ      ??ZDP_MgmtLqiRsp_0
   1518            {
   1519              ZDP_TmpBuf[0] = Status;
   \   000022   12....       LCALL   ?Subroutine31 & 0xFFFF
   1520              return fillAndSend( &TransSeq, dstAddr, Mgmt_Lqi_rsp, 1 );
   1521            }
   \                     ??CrossCallReturnLabel_158:
   \   000025   EC           MOV     A,R4
   \   000026   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   7901         MOV     R1,#0x1
   \   00002E   AC..         MOV     R4,?V0 + 12
   \   000030   AD..         MOV     R5,?V0 + 13
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   AA82         MOV     R2,DPL
   \   000039   AB83         MOV     R3,DPH
   \   00003B   12....       LCALL   ??fillAndSend?relay
   \   00003E   7402         MOV     A,#0x2
   \   000040   12....       LCALL   ?DEALLOC_XSTACK8
   \   000043   02....       LJMP    ??CrossCallReturnLabel_78 & 0xFFFF
   \                     ??ZDP_MgmtLqiRsp_0:
   \   000046   7419         MOV     A,#0x19
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   F5..         MOV     ?V0 + 5,A
   1522          
   1523            // (Status + NeighborLqiEntries + StartIndex + NeighborLqiCount) +
   1524            //  neighbor LQI data.
   1525            len = (1 + 1 + 1 + 1) + (NeighborLqiCount * ZDP_MGMTLQI_EXTENDED_SIZE);
   \   00004E   75F016       MOV     B,#0x16
   \   000051   A4           MUL     AB
   \   000052   2404         ADD     A,#0x4
   \   000054   F5..         MOV     ?V0 + 6,A
   1526          
   1527            buf = osal_mem_alloc( len+1 );
   \   000056                ; Setup parameters for call to function osal_mem_alloc
   \   000056   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000059   12....       LCALL   ??osal_mem_alloc?relay
   \   00005C   8A..         MOV     ?V0 + 2,R2
   \   00005E   8B..         MOV     ?V0 + 3,R3
   1528            if ( buf == NULL )
   \   000060   EA           MOV     A,R2
   \   000061   45..         ORL     A,?V0 + 3
   \   000063   7005         JNZ     ??ZDP_MgmtLqiRsp_1
   1529            {
   1530              return afStatus_MEM_FAIL;
   \   000065   7910         MOV     R1,#0x10
   \   000067   02....       LJMP    ??CrossCallReturnLabel_78 & 0xFFFF
   1531            }
   1532          
   1533            pBuf = buf+1;
   \                     ??ZDP_MgmtLqiRsp_1:
   \   00006A   8A82         MOV     DPL,R2
   \   00006C   8B83         MOV     DPH,R3
   \   00006E   A3           INC     DPTR
   \   00006F   8582..       MOV     ?V0 + 8,DPL
   \   000072   8583..       MOV     ?V0 + 9,DPH
   1534          
   1535            *pBuf++ = Status;
   \   000075   E4           CLR     A
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   1536            *pBuf++ = NeighborLqiEntries;
   \   000078   E5..         MOV     A,?V0 + 14
   \   00007A   F0           MOVX    @DPTR,A
   \   00007B   A3           INC     DPTR
   1537            *pBuf++ = StartIndex;
   \   00007C   12....       LCALL   ?Subroutine48 & 0xFFFF
   1538            *pBuf++ = NeighborLqiCount;
   1539          
   1540            for ( x = 0; x < NeighborLqiCount; x++ )
   \                     ??CrossCallReturnLabel_179:
   \   00007F   75..00       MOV     ?V0 + 4,#0x0
   \   000082   02....       LJMP    ??ZDP_MgmtLqiRsp_2 & 0xFFFF
   1541            {
   1542              osal_cpyExtAddr( pBuf, list->extPanID);         // Extended PanID
   \                     ??ZDP_MgmtLqiRsp_3:
   \   000085                ; Setup parameters for call to function sAddrExtCpy
   \   000085   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000088   EE           MOV     A,R6
   \   000089   FA           MOV     R2,A
   \   00008A   EF           MOV     A,R7
   \   00008B   FB           MOV     R3,A
   \   00008C   12....       LCALL   ??sAddrExtCpy?relay
   1543              pBuf += Z_EXTADDR_LEN;
   1544          
   1545              // EXTADDR
   1546              pBuf = osal_cpyExtAddr( pBuf, list->extAddr );
   \   00008F                ; Setup parameters for call to function sAddrExtCpy
   \   00008F   E5..         MOV     A,?V0 + 0
   \   000091   240A         ADD     A,#0xa
   \   000093   FC           MOV     R4,A
   \   000094   E5..         MOV     A,?V0 + 1
   \   000096   3400         ADDC    A,#0x0
   \   000098   FD           MOV     R5,A
   \   000099   EE           MOV     A,R6
   \   00009A   2408         ADD     A,#0x8
   \   00009C   FA           MOV     R2,A
   \   00009D   EF           MOV     A,R7
   \   00009E   3400         ADDC    A,#0x0
   \   0000A0   FB           MOV     R3,A
   \   0000A1   12....       LCALL   ??sAddrExtCpy?relay
   \   0000A4   8A..         MOV     ?V0 + 10,R2
   \   0000A6   8B..         MOV     ?V0 + 11,R3
   \   0000A8   AE..         MOV     R6,?V0 + 10
   \   0000AA   AF..         MOV     R7,?V0 + 11
   1547          
   1548              // NWKADDR
   1549              *pBuf++ = LO_UINT16( list->nwkAddr );
   \   0000AC   E5..         MOV     A,?V0 + 0
   \   0000AE   2412         ADD     A,#0x12
   \   0000B0   F8           MOV     R0,A
   \   0000B1   E5..         MOV     A,?V0 + 1
   \   0000B3   12....       LCALL   ??Subroutine106_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   0000B6   12....       LCALL   ?Subroutine15 & 0xFFFF
   1550              *pBuf++ = HI_UINT16( list->nwkAddr );
   \                     ??CrossCallReturnLabel_8:
   \   0000B9   8882         MOV     DPL,R0
   \   0000BB   8983         MOV     DPH,R1
   \   0000BD   A3           INC     DPTR
   \   0000BE   12....       LCALL   ??Subroutine103_0 & 0xFFFF
   1551          
   1552              // DEVICETYPE
   1553              *pBuf = list->devType;
   \                     ??CrossCallReturnLabel_205:
   \   0000C1   2414         ADD     A,#0x14
   \   0000C3   F582         MOV     DPL,A
   \   0000C5   E5..         MOV     A,?V0 + 1
   \   0000C7   3400         ADDC    A,#0x0
   \   0000C9   12....       LCALL   ?Subroutine34 & 0xFFFF
   1554          
   1555              // RXONIDLE
   1556              *pBuf |= (uint8)(list->rxOnIdle << 2);
   \                     ??CrossCallReturnLabel_167:
   \   0000CC   E5..         MOV     A,?V0 + 0
   \   0000CE   2415         ADD     A,#0x15
   \   0000D0   F582         MOV     DPL,A
   \   0000D2   E5..         MOV     A,?V0 + 1
   \   0000D4   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   0000D7   33           RLC     A
   \   0000D8   33           RLC     A
   \   0000D9   54FC         ANL     A,#0xfc
   \   0000DB   F8           MOV     R0,A
   \   0000DC   8E82         MOV     DPL,R6
   \   0000DE   8F83         MOV     DPH,R7
   \   0000E0   E0           MOVX    A,@DPTR
   \   0000E1   48           ORL     A,R0
   \   0000E2   F0           MOVX    @DPTR,A
   1557          
   1558              // RELATIONSHIP
   1559              *pBuf++ |= (uint8)(list->relation << 4);
   \   0000E3   EE           MOV     A,R6
   \   0000E4   F8           MOV     R0,A
   \   0000E5   EF           MOV     A,R7
   \   0000E6   F9           MOV     R1,A
   \   0000E7   A3           INC     DPTR
   \   0000E8   0E           INC     R6
   \   0000E9   AF83         MOV     R7,DPH
   \   0000EB   E5..         MOV     A,?V0 + 0
   \   0000ED   2416         ADD     A,#0x16
   \   0000EF   F582         MOV     DPL,A
   \   0000F1   E5..         MOV     A,?V0 + 1
   \   0000F3   12....       LCALL   ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   0000F6   12....       LCALL   ?Subroutine30 & 0xFFFF
   1560          
   1561              // PERMITJOINING
   1562              *pBuf++ = (uint8)(list->permit);
   \                     ??CrossCallReturnLabel_34:
   \   0000F9   E5..         MOV     A,?V0 + 0
   \   0000FB   2417         ADD     A,#0x17
   \   0000FD   12....       LCALL   ?Subroutine14 & 0xFFFF
   1563          
   1564              // DEPTH
   1565              *pBuf++ = list->depth;
   1566          
   1567              // LQI
   1568              *pBuf++ = list->lqi;
   1569          
   1570              list++; // next list entry
   1571            }
   \                     ??CrossCallReturnLabel_202:
   \   000100   2418         ADD     A,#0x18
   \   000102   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000105   2419         ADD     A,#0x19
   \   000107   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   00010A   241A         ADD     A,#0x1a
   \   00010C   F5..         MOV     ?V0 + 0,A
   \   00010E   E5..         MOV     A,?V0 + 1
   \   000110   3400         ADDC    A,#0x0
   \   000112   F5..         MOV     ?V0 + 1,A
   \   000114   05..         INC     ?V0 + 4
   \                     ??ZDP_MgmtLqiRsp_2:
   \   000116   E5..         MOV     A,?V0 + 4
   \   000118   C3           CLR     C
   \   000119   95..         SUBB    A,?V0 + 5
   \   00011B   5003         JNC     $+5
   \   00011D   02....       LJMP    ??ZDP_MgmtLqiRsp_3 & 0xFFFF
   1572          
   1573            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Lqi_rsp, len, buf );
   \   000120   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000123   E5..         MOV     A,?V0 + 8
   \   000125   F0           MOVX    @DPTR,A
   \   000126   A3           INC     DPTR
   \   000127   E5..         MOV     A,?V0 + 9
   \   000129   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   00012C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012F   A9..         MOV     R1,?V0 + 6
   \   000131   AC..         MOV     R4,?V0 + 12
   \   000133   AD..         MOV     R5,?V0 + 13
   \   000135   7402         MOV     A,#0x2
   \   000137   12....       LCALL   ?XSTACK_DISP0_8
   \   00013A   AA82         MOV     R2,DPL
   \   00013C   AB83         MOV     R3,DPH
   \   00013E   12....       LCALL   ??fillAndSend?relay
   \   000141   7402         MOV     A,#0x2
   \   000143   12....       LCALL   ?DEALLOC_XSTACK8
   \   000146   E9           MOV     A,R1
   \   000147   FE           MOV     R6,A
   \   000148                ; Setup parameters for call to function osal_mem_free
   \   000148   AA..         MOV     R2,?V0 + 2
   \   00014A   AB..         MOV     R3,?V0 + 3
   \   00014C   12....       LCALL   ??osal_mem_free?relay
   \   00014F   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000152   7401         MOV     A,#0x1
   \   000154   12....       LCALL   ?DEALLOC_XSTACK8
   \   000157   7F0F         MOV     R7,#0xf
   \   000159   02....       LJMP    ?BANKED_LEAVE_XDATA
   1574          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function fillAndSend
   \   000001                ; Setup parameters for call to function fillAndSend
   \   000001   75..31       MOV     ?V0 + 0,#0x31
   \   000004   75..80       MOV     ?V0 + 1,#-0x80
   \   000007   78..         MOV     R0,#?V0 + 0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004   3400         ADDC    A,#0x0
   \   000006   F583         MOV     DPH,A
   \   000008                REQUIRE ??Subroutine103_0
   \   000008                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   22           RET
   1575          
   1576          /*********************************************************************
   1577           * @fn          ZDP_MgmtRtgRsp
   1578           *
   1579           * @brief       This builds and send a Mgmt_Rtg_rsp message. This
   1580           *              function sends a unicast message.
   1581           *
   1582           * @param       dstAddr - destination address of the message
   1583           * @param       Status - message status (ZDP_SUCCESS or other)
   1584           * @param       RoutingTableEntries - Total number of entries
   1585           * @param       StartIndex - Starting index within the reporting list
   1586           * @param       RoutingTableListCount - number of entries included
   1587           *                                      in this message
   1588           * @param       RoutingTableList - List of Routing Table entries
   1589           * @param       SecurityEnable - true to enable security for this message
   1590           *
   1591           * @return      ZStatus_t
   1592           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1593          ZStatus_t ZDP_MgmtRtgRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtRtgRsp:
   1594                                      byte Status,
   1595                                      byte RoutingTableEntries,
   1596                                      byte StartIndex,
   1597                                      byte RoutingListCount,
   1598                                      rtgItem_t *RoutingTableList,
   1599                                      byte SecurityEnable )
   1600          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   8A..         MOV     ?V0 + 2,R2
   \   000014   8B..         MOV     ?V0 + 3,R3
   \   000016   8C..         MOV     ?V0 + 1,R4
   \   000018   8D..         MOV     ?V0 + 0,R5
   \   00001A   7415         MOV     A,#0x15
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   F5..         MOV     ?V0 + 6,A
   \   000022   7416         MOV     A,#0x16
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   E0           MOVX    A,@DPTR
   \   000028   F5..         MOV     ?V0 + 5,A
   1601            uint8 *buf;
   1602            uint8 *pBuf;
   1603            // Status + RoutingTableEntries + StartIndex + RoutingListCount.
   1604            byte len = 1 + 1 + 1 + 1;
   1605            byte x;
   1606          
   1607            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1608          
   1609            // Add an array for Routing List data
   1610            len += (RoutingListCount * ZDP_ROUTINGENTRY_SIZE);
   \   00002A   75F005       MOV     B,#0x5
   \   00002D   A4           MUL     AB
   \   00002E   2404         ADD     A,#0x4
   \   000030   F5..         MOV     ?V0 + 4,A
   1611          
   1612            buf = osal_mem_alloc( (short)(len+1) );
   \   000032                ; Setup parameters for call to function osal_mem_alloc
   \   000032   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000035   12....       LCALL   ??osal_mem_alloc?relay
   \   000038   8A..         MOV     ?V0 + 8,R2
   \   00003A   8B..         MOV     ?V0 + 9,R3
   \   00003C   AE..         MOV     R6,?V0 + 8
   \   00003E   AF..         MOV     R7,?V0 + 9
   1613            if ( buf == NULL )
   \   000040   EE           MOV     A,R6
   \   000041   4F           ORL     A,R7
   \   000042   7005         JNZ     ??ZDP_MgmtRtgRsp_0
   1614            {
   1615              return afStatus_MEM_FAIL;
   \   000044   7910         MOV     R1,#0x10
   \   000046   02....       LJMP    ??ZDP_MgmtRtgRsp_1 & 0xFFFF
   1616            }
   1617          
   1618            pBuf = buf+1;
   \                     ??ZDP_MgmtRtgRsp_0:
   \   000049   8E82         MOV     DPL,R6
   \   00004B   8F83         MOV     DPH,R7
   \   00004D   A3           INC     DPTR
   \   00004E   AA82         MOV     R2,DPL
   \   000050   AB83         MOV     R3,DPH
   1619          
   1620            *pBuf++ = Status;
   \   000052   E5..         MOV     A,?V0 + 1
   \   000054   F0           MOVX    @DPTR,A
   \   000055   A3           INC     DPTR
   1621            *pBuf++ = RoutingTableEntries;
   \   000056   E5..         MOV     A,?V0 + 0
   \   000058   F0           MOVX    @DPTR,A
   \   000059   A3           INC     DPTR
   1622            *pBuf++ = StartIndex;
   \   00005A   E5..         MOV     A,?V0 + 6
   \   00005C   F0           MOVX    @DPTR,A
   \   00005D   A3           INC     DPTR
   1623            *pBuf++ = RoutingListCount;
   \   00005E   E5..         MOV     A,?V0 + 5
   \   000060   12....       LCALL   ??Subroutine91_0 & 0xFFFF
   1624          
   1625            for ( x = 0; x < RoutingListCount; x++ )
   \                     ??CrossCallReturnLabel_137:
   \   000063   75..00       MOV     ?V0 + 6,#0x0
   \   000066   7417         MOV     A,#0x17
   \   000068   12....       LCALL   ?XSTACK_DISP0_8
   \   00006B   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   00006E   8075         SJMP    ??ZDP_MgmtRtgRsp_2
   1626            {
   1627              *pBuf++ = LO_UINT16( RoutingTableList->dstAddress );  // Destination Address
   \                     ??ZDP_MgmtRtgRsp_3:
   \   000070   8C82         MOV     DPL,R4
   \   000072   8D83         MOV     DPH,R5
   \   000074   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   1628              *pBuf++ = HI_UINT16( RoutingTableList->dstAddress );
   \                     ??CrossCallReturnLabel_220:
   \   000077   8C82         MOV     DPL,R4
   \   000079   8D83         MOV     DPH,R5
   \   00007B   12....       LCALL   ?Subroutine9 & 0xFFFF
   1629          
   1630              *pBuf = (RoutingTableList->status & 0x07);
   \                     ??CrossCallReturnLabel_2:
   \   00007E   5407         ANL     A,#0x7
   \   000080   8882         MOV     DPL,R0
   \   000082   8983         MOV     DPH,R1
   \   000084   F0           MOVX    @DPTR,A
   1631              if ( RoutingTableList->options & (ZP_MTO_ROUTE_RC | ZP_MTO_ROUTE_NRC) )
   \   000085   EC           MOV     A,R4
   \   000086   2406         ADD     A,#0x6
   \   000088   F582         MOV     DPL,A
   \   00008A   ED           MOV     A,R5
   \   00008B   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   00008E   5418         ANL     A,#0x18
   \   000090   6027         JZ      ??ZDP_MgmtRtgRsp_4
   1632              {
   1633                uint8 options = 0;
   1634                options |= ZDO_MGMT_RTG_ENTRY_MANYTOONE;
   \   000092   75..02       MOV     ?V0 + 7,#0x2
   1635          
   1636                if ( RoutingTableList->options & ZP_RTG_RECORD )
   \   000095   E0           MOVX    A,@DPTR
   \   000096   A2E2         MOV     C,0xE0 /* A   */.2
   \   000098   5003         JNC     ??ZDP_MgmtRtgRsp_5
   1637                {
   1638                  options |= ZDO_MGMT_RTG_ENTRY_ROUTE_RECORD_REQUIRED;
   \   00009A   75..06       MOV     ?V0 + 7,#0x6
   1639                }
   1640          
   1641                if ( RoutingTableList->options & ZP_MTO_ROUTE_NRC )
   \                     ??ZDP_MgmtRtgRsp_5:
   \   00009D   A2E4         MOV     C,0xE0 /* A   */.4
   \   00009F   5007         JNC     ??ZDP_MgmtRtgRsp_6
   1642                {
   1643                  options |= ZDO_MGMT_RTG_ENTRY_MEMORY_CONSTRAINED;
   \   0000A1   D3           SETB    C
   \   0000A2   E5..         MOV     A,?V0 + 7
   \   0000A4   D2E0         SETB    0xE0 /* A   */.0
   \   0000A6   F5..         MOV     ?V0 + 7,A
   1644                }
   1645          
   1646                *pBuf |= (options << 3);
   \                     ??ZDP_MgmtRtgRsp_6:
   \   0000A8   E5..         MOV     A,?V0 + 7
   \   0000AA   33           RLC     A
   \   0000AB   33           RLC     A
   \   0000AC   33           RLC     A
   \   0000AD   54F8         ANL     A,#0xf8
   \   0000AF   F5..         MOV     ?V0 + 7,A
   \   0000B1   8882         MOV     DPL,R0
   \   0000B3   8983         MOV     DPH,R1
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   45..         ORL     A,?V0 + 7
   \   0000B8   F0           MOVX    @DPTR,A
   1647              }
   1648              pBuf++;
   \                     ??ZDP_MgmtRtgRsp_4:
   \   0000B9   8882         MOV     DPL,R0
   \   0000BB   8983         MOV     DPH,R1
   \   0000BD   A3           INC     DPTR
   \   0000BE   08           INC     R0
   \   0000BF   A983         MOV     R1,DPH
   1649          
   1650              *pBuf++ = LO_UINT16( RoutingTableList->nextHopAddress );  // Next hop
   \   0000C1   EC           MOV     A,R4
   \   0000C2   2402         ADD     A,#0x2
   \   0000C4   F5..         MOV     ?V0 + 8,A
   \   0000C6   ED           MOV     A,R5
   \   0000C7   3400         ADDC    A,#0x0
   \   0000C9   F5..         MOV     ?V0 + 9,A
   \   0000CB   85..82       MOV     DPL,?V0 + 8
   \   0000CE   F583         MOV     DPH,A
   \   0000D0   12....       LCALL   ?Subroutine36 & 0xFFFF
   1651              *pBuf++ = HI_UINT16( RoutingTableList->nextHopAddress );
   \                     ??CrossCallReturnLabel_43:
   \   0000D3   85..82       MOV     DPL,?V0 + 8
   \   0000D6   85..83       MOV     DPH,?V0 + 9
   \   0000D9   12....       LCALL   ??Subroutine92_0 & 0xFFFF
   1652              RoutingTableList++;    // Move to next list entry
   1653            }
   \                     ??CrossCallReturnLabel_144:
   \   0000DC   2407         ADD     A,#0x7
   \   0000DE   FC           MOV     R4,A
   \   0000DF   ED           MOV     A,R5
   \   0000E0   3400         ADDC    A,#0x0
   \   0000E2   FD           MOV     R5,A
   \   0000E3   05..         INC     ?V0 + 6
   \                     ??ZDP_MgmtRtgRsp_2:
   \   0000E5   E5..         MOV     A,?V0 + 6
   \   0000E7   C3           CLR     C
   \   0000E8   95..         SUBB    A,?V0 + 5
   \   0000EA   4084         JC      ??ZDP_MgmtRtgRsp_3
   1654          
   1655            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Rtg_rsp, len, buf );
   \   0000EC   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000EF   EA           MOV     A,R2
   \   0000F0   F0           MOVX    @DPTR,A
   \   0000F1   A3           INC     DPTR
   \   0000F2   EB           MOV     A,R3
   \   0000F3   F0           MOVX    @DPTR,A
   \   0000F4                ; Setup parameters for call to function fillAndSend
   \   0000F4   75..32       MOV     ?V0 + 6,#0x32
   \   0000F7   75..80       MOV     ?V0 + 7,#-0x80
   \   0000FA   78..         MOV     R0,#?V0 + 6
   \   0000FC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FF   A9..         MOV     R1,?V0 + 4
   \   000101   AC..         MOV     R4,?V0 + 2
   \   000103   AD..         MOV     R5,?V0 + 3
   \   000105   7402         MOV     A,#0x2
   \   000107   12....       LCALL   ?XSTACK_DISP0_8
   \   00010A   AA82         MOV     R2,DPL
   \   00010C   AB83         MOV     R3,DPH
   \   00010E   12....       LCALL   ??fillAndSend?relay
   \   000111   7402         MOV     A,#0x2
   \   000113   12....       LCALL   ?DEALLOC_XSTACK8
   \   000116   E9           MOV     A,R1
   \   000117   F5..         MOV     ?V0 + 2,A
   \   000119                ; Setup parameters for call to function osal_mem_free
   \   000119   EE           MOV     A,R6
   \   00011A   FA           MOV     R2,A
   \   00011B   EF           MOV     A,R7
   \   00011C   FB           MOV     R3,A
   \   00011D   12....       LCALL   ??osal_mem_free?relay
   \   000120   90....       MOV     DPTR,#ZDP_TmpBuf
   \   000123   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   000125   F0           MOVX    @DPTR,A
   \   000126   A3           INC     DPTR
   \   000127   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   000129   F0           MOVX    @DPTR,A
   \   00012A   A9..         MOV     R1,?V0 + 2
   \                     ??ZDP_MgmtRtgRsp_1:
   \   00012C   7401         MOV     A,#0x1
   \   00012E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000131   02....       LJMP    ?Subroutine4 & 0xFFFF
   1656          }
   1657          
   1658          /*********************************************************************
   1659           * @fn          ZDP_MgmtBindRsp
   1660           *
   1661           * @brief       This builds and send a Mgmt_Bind_rsp message. This
   1662           *              function sends a unicast message.
   1663           *
   1664           * @param       dstAddr - destination address of the message
   1665           * @param       Status - message status (ZDP_SUCCESS or other)
   1666           * @param       BindingTableEntries - Total number of entries
   1667           * @param       StartIndex - Starting index within the reporting list
   1668           * @param       BindingTableListCount - number of entries included
   1669           *                                 in this message
   1670           * @param       BindingTableList - List of Binding Table entries
   1671           * @param       SecurityEnable - Security Options
   1672           *
   1673           * @return      ZStatus_t
   1674           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine101_0
   \   000003                ; // Fall through to label ??Subroutine101_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1675          ZStatus_t ZDP_MgmtBindRsp( byte TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtBindRsp:
   1676                                      byte Status,
   1677                                      byte BindingTableEntries,
   1678                                      byte StartIndex,
   1679                                      byte BindingTableListCount,
   1680                                      apsBindingItem_t *BindingTableList,
   1681                                      byte SecurityEnable )
   1682          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   00000D   8C..         MOV     ?V0 + 10,R4
   \   00000F   8D..         MOV     ?V0 + 5,R5
   \   000011   7417         MOV     A,#0x17
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FE           MOV     R6,A
   \   000018   7418         MOV     A,#0x18
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   F5..         MOV     ?V0 + 4,A
   1683            uint8 *buf;
   1684            uint8 *pBuf;
   1685            uint8 maxLen; // maxLen is the maximum packet length to allocate enough memory space
   1686            uint8 len;    // Actual length varies due to different addrMode
   1687            uint8 x;
   1688            byte extZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1; // One more byte for cluserID and DstAddrMode
   1689            byte shortZdpBindEntrySize = ZDP_BINDINGENTRY_SIZE + 1 + 1 + 2 - 8 - 1; // clusterID + DstAddrMode + shortAddr - ExtAddr - DstEndpoint
   1690          
   1691            (void)SecurityEnable;  // Intentionally unreferenced parameter
   1692          
   1693            // Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1694            maxLen = 1 + 1 + 1 + 1;
   1695            maxLen += (BindingTableListCount * extZdpBindEntrySize );  //max length
   1696            buf = osal_mem_alloc( maxLen + 1 );  // +1 for transaction ID
   \   000020                ; Setup parameters for call to function osal_mem_alloc
   \   000020   75F015       MOV     B,#0x15
   \   000023   A4           MUL     AB
   \   000024   2404         ADD     A,#0x4
   \   000026   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000029   12....       LCALL   ??osal_mem_alloc?relay
   \   00002C   8A..         MOV     ?V0 + 2,R2
   \   00002E   8B..         MOV     ?V0 + 3,R3
   1697          
   1698            if ( buf == NULL )
   \   000030   EA           MOV     A,R2
   \   000031   45..         ORL     A,?V0 + 3
   \   000033   7005         JNZ     ??ZDP_MgmtBindRsp_0
   1699            {
   1700              return afStatus_MEM_FAIL;
   \   000035   7910         MOV     R1,#0x10
   \   000037   02....       LJMP    ??CrossCallReturnLabel_79 & 0xFFFF
   1701            }
   1702          
   1703            pBuf = buf+1;
   \                     ??ZDP_MgmtBindRsp_0:
   \   00003A   8A82         MOV     DPL,R2
   \   00003C   8B83         MOV     DPH,R3
   \   00003E   A3           INC     DPTR
   \   00003F   8582..       MOV     ?V0 + 6,DPL
   \   000042   8583..       MOV     ?V0 + 7,DPH
   1704          
   1705            *pBuf++ = Status;
   \   000045   E5..         MOV     A,?V0 + 10
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   1706            *pBuf++ = BindingTableEntries;
   \   000049   E5..         MOV     A,?V0 + 5
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   1707            *pBuf++ = StartIndex;
   \   00004D   EE           MOV     A,R6
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   1708            *pBuf++ = BindingTableListCount;
   \   000050   E5..         MOV     A,?V0 + 4
   \   000052   12....       LCALL   ?Subroutine49 & 0xFFFF
   1709          
   1710            // Initial length = Status + BindingTableEntries + StartIndex + BindingTableListCount.
   1711            // length += ZDP_BINDINGENTRY_SIZE   -- Version 1.0
   1712            //           extZdpBindEntrySize     -- Version 1.1 extended address mode
   1713            //           shortZdpBindEntrySize   -- Version 1.1 group address mode
   1714          
   1715            len = 1 + 1 + 1 + 1;
   \                     ??CrossCallReturnLabel_67:
   \   000055   75..04       MOV     ?V0 + 0,#0x4
   1716            for ( x = 0; x < BindingTableListCount; x++ )
   \   000058   75..00       MOV     ?V0 + 1,#0x0
   \   00005B   7419         MOV     A,#0x19
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   000063   8021         SJMP    ??ZDP_MgmtBindRsp_1
   1717            {
   1718              pBuf = osal_cpyExtAddr( pBuf, BindingTableList->srcAddr );
   1719              *pBuf++ = BindingTableList->srcEP;
   1720          
   1721              // Cluster ID
   1722              *pBuf++ = LO_UINT16( BindingTableList->clusterID );
   1723              *pBuf++ = HI_UINT16( BindingTableList->clusterID );
   1724          
   1725              *pBuf++ = BindingTableList->dstAddr.addrMode;
   1726              if ( BindingTableList->dstAddr.addrMode == Addr64Bit )
   1727              {
   1728                len += extZdpBindEntrySize;
   1729                pBuf = osal_cpyExtAddr( pBuf, BindingTableList->dstAddr.addr.extAddr );
   1730                *pBuf++ = BindingTableList->dstEP;
   1731              }
   1732              else
   1733              {
   1734                len += shortZdpBindEntrySize;
   \                     ??ZDP_MgmtBindRsp_2:
   \   000065   740E         MOV     A,#0xe
   \   000067   25..         ADD     A,?V0 + 0
   \   000069   F5..         MOV     ?V0 + 0,A
   1735                *pBuf++ = LO_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \   00006B   8C82         MOV     DPL,R4
   \   00006D   8D83         MOV     DPH,R5
   \   00006F   12....       LCALL   ?Subroutine38 & 0xFFFF
   1736                *pBuf++ = HI_UINT16( BindingTableList->dstAddr.addr.shortAddr );
   \                     ??CrossCallReturnLabel_48:
   \   000072   8C82         MOV     DPL,R4
   \   000074   8D83         MOV     DPH,R5
   \   000076   A3           INC     DPTR
   \   000077   12....       LCALL   ?Subroutine81 & 0xFFFF
   1737              }
   \                     ??CrossCallReturnLabel_111:
   \   00007A   AB83         MOV     R3,DPH
   1738              BindingTableList++;    // Move to next list entry
   \   00007C   EE           MOV     A,R6
   \   00007D   2415         ADD     A,#0x15
   \   00007F   FE           MOV     R6,A
   \   000080   EF           MOV     A,R7
   \   000081   3400         ADDC    A,#0x0
   \   000083   FF           MOV     R7,A
   \   000084   05..         INC     ?V0 + 1
   \                     ??ZDP_MgmtBindRsp_1:
   \   000086   E5..         MOV     A,?V0 + 1
   \   000088   C3           CLR     C
   \   000089   95..         SUBB    A,?V0 + 4
   \   00008B   5052         JNC     ??ZDP_MgmtBindRsp_3
   \   00008D                ; Setup parameters for call to function sAddrExtCpy
   \   00008D   EE           MOV     A,R6
   \   00008E   FC           MOV     R4,A
   \   00008F   EF           MOV     A,R7
   \   000090   FD           MOV     R5,A
   \   000091   12....       LCALL   ??sAddrExtCpy?relay
   \   000094   8E82         MOV     DPL,R6
   \   000096   8F83         MOV     DPH,R7
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000A3   AB83         MOV     R3,DPH
   \   0000A5   EE           MOV     A,R6
   \   0000A6   2409         ADD     A,#0x9
   \   0000A8   F8           MOV     R0,A
   \   0000A9   EF           MOV     A,R7
   \   0000AA   3400         ADDC    A,#0x0
   \   0000AC   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000AF   A3           INC     DPTR
   \   0000B0   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   0000B3   2413         ADD     A,#0x13
   \   0000B5   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   0000B8   12....       LCALL   ?Subroutine37 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0000BB   240B         ADD     A,#0xb
   \   0000BD   FC           MOV     R4,A
   \   0000BE   EF           MOV     A,R7
   \   0000BF   3400         ADDC    A,#0x0
   \   0000C1   FD           MOV     R5,A
   \   0000C2   8882         MOV     DPL,R0
   \   0000C4   8983         MOV     DPH,R1
   \   0000C6   E0           MOVX    A,@DPTR
   \   0000C7   6403         XRL     A,#0x3
   \   0000C9   709A         JNZ     ??ZDP_MgmtBindRsp_2
   \   0000CB   7415         MOV     A,#0x15
   \   0000CD   25..         ADD     A,?V0 + 0
   \   0000CF   F5..         MOV     ?V0 + 0,A
   \   0000D1                ; Setup parameters for call to function sAddrExtCpy
   \   0000D1   12....       LCALL   ??sAddrExtCpy?relay
   \   0000D4   EE           MOV     A,R6
   \   0000D5   2414         ADD     A,#0x14
   \   0000D7   12....       LCALL   ?Subroutine64 & 0xFFFF
   1739            }
   \                     ??CrossCallReturnLabel_190:
   \   0000DA   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   0000DD   809B         SJMP    ??CrossCallReturnLabel_111
   1740          
   1741            FillAndSendBuffer( &TransSeq, dstAddr, Mgmt_Bind_rsp, len, buf );
   \                     ??ZDP_MgmtBindRsp_3:
   \   0000DF   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000E2   E5..         MOV     A,?V0 + 6
   \   0000E4   F0           MOVX    @DPTR,A
   \   0000E5   A3           INC     DPTR
   \   0000E6   E5..         MOV     A,?V0 + 7
   \   0000E8   F0           MOVX    @DPTR,A
   \   0000E9                ; Setup parameters for call to function fillAndSend
   \   0000E9   75..33       MOV     ?V0 + 6,#0x33
   \   0000EC   75..80       MOV     ?V0 + 7,#-0x80
   \   0000EF   78..         MOV     R0,#?V0 + 6
   \   0000F1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F4   A9..         MOV     R1,?V0 + 0
   \   0000F6   AC..         MOV     R4,?V0 + 12
   \   0000F8   AD..         MOV     R5,?V0 + 13
   \   0000FA   7402         MOV     A,#0x2
   \   0000FC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FF   AA82         MOV     R2,DPL
   \   000101   AB83         MOV     R3,DPH
   \   000103   12....       LCALL   ??fillAndSend?relay
   \   000106   7402         MOV     A,#0x2
   \   000108   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010B   E9           MOV     A,R1
   \   00010C   FE           MOV     R6,A
   \   00010D                ; Setup parameters for call to function osal_mem_free
   \   00010D   AA..         MOV     R2,?V0 + 2
   \   00010F   AB..         MOV     R3,?V0 + 3
   \   000111   12....       LCALL   ??osal_mem_free?relay
   \   000114   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000117   02....       LJMP    ?Subroutine3 & 0xFFFF
   1742          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   F8           MOV     R0,A
   \   000001   EF           MOV     A,R7
   \   000002                REQUIRE ??Subroutine106_0
   \   000002                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   AA82         MOV     R2,DPL
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000003   EE           MOV     A,R6
   \   000004   22           RET
   1743          
   1744          /*********************************************************************
   1745           * @fn          ZDP_MgmtNwkUpdateNotify
   1746           *
   1747           * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
   1748           *              function sends a unicast message.
   1749           *
   1750           * @param       dstAddr - destination address of the message
   1751           * @param       status - message status (ZDP_SUCCESS or other)
   1752           * @param       scannedChannels - List of channels scanned by the request
   1753           * @param       totalTransmissions - Total transmissions
   1754           * @param       transmissionFailures - Sum of transmission failures
   1755           * @param       listCount - Number of records contained in the energyValues list
   1756           * @param       energyValues - List of descriptors, one for each of ListCount,
   1757           *                             of the enegry detect descriptors
   1758           * @param       txOptions - Transmit options
   1759           * @param       securityEnable - Security options
   1760           *
   1761           * @return      afStatus_t
   1762           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1763          afStatus_t ZDP_MgmtNwkUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
   \                     ZDP_MgmtNwkUpdateNotify:
   1764                                              uint8 status, uint32 scannedChannels,
   1765                                              uint16 totalTransmissions, uint16 transmissionFailures,
   1766                                              uint8 listCount, uint8 *energyValues, uint8 txOptions,
   1767                                              uint8 securityEnable )
   1768          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   00000D   8C..         MOV     ?V0 + 9,R4
   \   00000F   8D..         MOV     ?V0 + 0,R5
   \   000011   7417         MOV     A,#0x17
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   78..         MOV     R0,#?V0 + 4
   \   000018   12....       LCALL   ?L_MOV_X
   \   00001B   741F         MOV     A,#0x1f
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F5..         MOV     ?V0 + 10,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 11,A
   \   000027   7421         MOV     A,#0x21
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V0 + 8,A
   1769            uint8 *buf;
   1770            uint8 *pBuf;
   1771            uint8 len;
   1772          
   1773            (void)securityEnable;  // Intentionally unreferenced parameter
   1774          
   1775            // Status + ScannedChannels + totalTransmissions + transmissionFailures + ListCount + energyValues
   1776            len = 1 + 4 + 2 + 2 + 1 + listCount;
   \   00002F   740A         MOV     A,#0xa
   \   000031   25..         ADD     A,?V0 + 0
   \   000033   F5..         MOV     ?V0 + 1,A
   1777          
   1778            buf = osal_mem_alloc( len+1 ); // +1 for transaction ID
   \   000035                ; Setup parameters for call to function osal_mem_alloc
   \   000035   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000038   12....       LCALL   ??osal_mem_alloc?relay
   \   00003B   8A..         MOV     ?V0 + 2,R2
   \   00003D   8B..         MOV     ?V0 + 3,R3
   \   00003F   AE..         MOV     R6,?V0 + 2
   \   000041   AF..         MOV     R7,?V0 + 3
   1779            if ( buf == NULL )
   \   000043   EE           MOV     A,R6
   \   000044   4F           ORL     A,R7
   \   000045   7005         JNZ     ??ZDP_MgmtNwkUpdateNotify_0
   1780            {
   1781              return afStatus_MEM_FAIL;
   \   000047   7910         MOV     R1,#0x10
   \   000049   02....       LJMP    ??ZDP_MgmtNwkUpdateNotify_1 & 0xFFFF
   1782            }
   1783          
   1784            pBuf = buf+1;
   \                     ??ZDP_MgmtNwkUpdateNotify_0:
   \   00004C   8E82         MOV     DPL,R6
   \   00004E   8F83         MOV     DPH,R7
   \   000050   A3           INC     DPTR
   \   000051   8582..       MOV     ?V0 + 2,DPL
   \   000054   8583..       MOV     ?V0 + 3,DPH
   1785          
   1786            *pBuf++ = status;
   \   000057   E5..         MOV     A,?V0 + 9
   \   000059   12....       LCALL   ?Subroutine49 & 0xFFFF
   1787          
   1788            pBuf = osal_buffer_uint32( pBuf, scannedChannels );
   \                     ??CrossCallReturnLabel_68:
   \   00005C                ; Setup parameters for call to function osal_buffer_uint32
   \   00005C   78..         MOV     R0,#?V0 + 4
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000061   12....       LCALL   ??osal_buffer_uint32?relay
   \   000064   7404         MOV     A,#0x4
   \   000066   12....       LCALL   ?DEALLOC_XSTACK8
   \   000069   741B         MOV     A,#0x1b
   \   00006B   12....       LCALL   ?XSTACK_DISP0_8
   \   00006E   12....       LCALL   ?Subroutine23 & 0xFFFF
   1789          
   1790            *pBuf++ = LO_UINT16( totalTransmissions );
   1791            *pBuf++ = HI_UINT16( totalTransmissions );
   \                     ??CrossCallReturnLabel_17:
   \   000071   AA82         MOV     R2,DPL
   \   000073   AB83         MOV     R3,DPH
   \   000075   741D         MOV     A,#0x1d
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   12....       LCALL   ?Subroutine23 & 0xFFFF
   1792          
   1793            *pBuf++ = LO_UINT16( transmissionFailures );
   1794            *pBuf++ = HI_UINT16( transmissionFailures );
   1795          
   1796            *pBuf++ = listCount;
   \                     ??CrossCallReturnLabel_18:
   \   00007D   E5..         MOV     A,?V0 + 0
   \   00007F   F0           MOVX    @DPTR,A
   \   000080   A3           INC     DPTR
   \   000081   0A           INC     R2
   \   000082   0A           INC     R2
   \   000083   0A           INC     R2
   \   000084   AB83         MOV     R3,DPH
   1797          
   1798            if ( listCount > 0 )
   \   000086   601D         JZ      ??ZDP_MgmtNwkUpdateNotify_2
   1799              osal_memcpy( pBuf, energyValues, listCount );
   \   000088                ; Setup parameters for call to function osal_memcpy
   \   000088   85....       MOV     ?V0 + 4,?V0 + 10
   \   00008B   85....       MOV     ?V0 + 5,?V0 + 11
   \   00008E   75..00       MOV     ?V0 + 6,#0x0
   \   000091   78..         MOV     R0,#?V0 + 4
   \   000093   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000096   85....       MOV     ?V0 + 4,?V0 + 0
   \   000099   AC..         MOV     R4,?V0 + 4
   \   00009B   7D00         MOV     R5,#0x0
   \   00009D   12....       LCALL   ??osal_memcpy?relay
   \   0000A0   7403         MOV     A,#0x3
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   1800          
   1801            FillAndSendBufferTxOptions( &TransSeq, dstAddr, Mgmt_NWK_Update_notify, len, buf, txOptions );
   \                     ??ZDP_MgmtNwkUpdateNotify_2:
   \   0000A5   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000A8   E5..         MOV     A,?V0 + 2
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   E5..         MOV     A,?V0 + 3
   \   0000AE   F0           MOVX    @DPTR,A
   \   0000AF   E5..         MOV     A,?V0 + 8
   \   0000B1   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000B4   F0           MOVX    @DPTR,A
   \   0000B5                ; Setup parameters for call to function fillAndSend
   \   0000B5   75..38       MOV     ?V0 + 2,#0x38
   \   0000B8   75..80       MOV     ?V0 + 3,#-0x80
   \   0000BB   78..         MOV     R0,#?V0 + 2
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C0   A9..         MOV     R1,?V0 + 1
   \   0000C2   AC..         MOV     R4,?V0 + 12
   \   0000C4   AD..         MOV     R5,?V0 + 13
   \   0000C6   7402         MOV     A,#0x2
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   AA82         MOV     R2,DPL
   \   0000CD   AB83         MOV     R3,DPH
   \   0000CF   12....       LCALL   ??fillAndSend?relay
   \   0000D2   7402         MOV     A,#0x2
   \   0000D4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D7   E9           MOV     A,R1
   \   0000D8   F5..         MOV     ?V0 + 1,A
   \   0000DA                ; Setup parameters for call to function osal_mem_free
   \   0000DA   EE           MOV     A,R6
   \   0000DB   FA           MOV     R2,A
   \   0000DC   EF           MOV     A,R7
   \   0000DD   FB           MOV     R3,A
   \   0000DE   12....       LCALL   ??osal_mem_free?relay
   \   0000E1   90....       MOV     DPTR,#ZDP_TmpBuf
   \   0000E4   74..         MOV     A,#(ZDP_Buf + 1) & 0xff
   \   0000E6   F0           MOVX    @DPTR,A
   \   0000E7   A3           INC     DPTR
   \   0000E8   74..         MOV     A,#((ZDP_Buf + 1) >> 8) & 0xff
   \   0000EA   F0           MOVX    @DPTR,A
   \   0000EB   90....       MOV     DPTR,#ZDP_TxOptions
   \   0000EE   E4           CLR     A
   \   0000EF   F0           MOVX    @DPTR,A
   \   0000F0   A9..         MOV     R1,?V0 + 1
   \                     ??ZDP_MgmtNwkUpdateNotify_1:
   \   0000F2                REQUIRE ?Subroutine3
   \   0000F2                ; // Fall through to label ?Subroutine3
   1802          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000003   22           RET
   1803          
   1804          /*********************************************************************
   1805           * Functions to register for ZDO Over-the-air messages
   1806           */
   1807          
   1808          /*********************************************************************
   1809           * @fn          ZDO_RegisterForZDOMsg
   1810           *
   1811           * @brief       Call this function to register of an incoming over
   1812           *              the air ZDO message - probably a response message
   1813           *              but requests can also be received.
   1814           *              Messages are delivered to the task with ZDO_CB_MSG
   1815           *              as the message ID.
   1816           *
   1817           * @param       taskID - Where you would like the message delivered
   1818           * @param       clusterID - What message?
   1819           *                          ZDO_ALL_MSGS_CLUSTERID - all responses
   1820           *                          and device announce
   1821           *
   1822           * @return      ZSuccess - successful, ZMemError if not
   1823           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1824          ZStatus_t ZDO_RegisterForZDOMsg( uint8 taskID, uint16 clusterID )
   \                     ZDO_RegisterForZDOMsg:
   1825          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   1826            ZDO_MsgCB_t *pList;
   1827            ZDO_MsgCB_t *pLast;
   1828            ZDO_MsgCB_t *pNew;
   1829          
   1830            // Look for duplicate
   1831            pList = pLast = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   12....       LCALL   ??Subroutine109_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000011   EE           MOV     A,R6
   \   000012   F8           MOV     R0,A
   \   000013   EF           MOV     A,R7
   \   000014   8028         SJMP    ??CrossCallReturnLabel_265
   1832            while ( pList )
   1833            {
   1834              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   \                     ??ZDO_RegisterForZDOMsg_0:
   \   000016   8882         MOV     DPL,R0
   \   000018   8983         MOV     DPH,R1
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   65..         XRL     A,?V0 + 2
   \   00001F   7012         JNZ     ??ZDO_RegisterForZDOMsg_1
   \   000021   8882         MOV     DPL,R0
   \   000023   8983         MOV     DPH,R1
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   E0           MOVX    A,@DPTR
   \   000029   65..         XRL     A,?V0 + 0
   \   00002B   7004         JNZ     ??ZDO_RegisterForZDOMsg_2
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   65..         XRL     A,?V0 + 1
   \                     ??ZDO_RegisterForZDOMsg_2:
   \   000031   6053         JZ      ??CrossCallReturnLabel_234
   1835                return ( ZSuccess );
   1836              pLast = pList;
   \                     ??ZDO_RegisterForZDOMsg_1:
   \   000033   E8           MOV     A,R0
   \   000034   FE           MOV     R6,A
   \   000035   E9           MOV     A,R1
   \   000036   FF           MOV     R7,A
   1837              pList = (ZDO_MsgCB_t *)pList->next;
   \   000037   8882         MOV     DPL,R0
   \   000039   8983         MOV     DPH,R1
   \   00003B   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   1838            }
   \                     ??CrossCallReturnLabel_265:
   \   00003E   F9           MOV     R1,A
   \   00003F   E8           MOV     A,R0
   \   000040   49           ORL     A,R1
   \   000041   70D3         JNZ     ??ZDO_RegisterForZDOMsg_0
   1839          
   1840            // Add to the list
   1841            pNew = (ZDO_MsgCB_t *)osal_mem_alloc( sizeof ( ZDO_MsgCB_t ) );
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   7A05         MOV     R2,#0x5
   \   000045   7B00         MOV     R3,#0x0
   \   000047   12....       LCALL   ??osal_mem_alloc?relay
   \   00004A   8A..         MOV     ?V0 + 4,R2
   \   00004C   8B..         MOV     ?V0 + 5,R3
   \   00004E   A8..         MOV     R0,?V0 + 4
   \   000050   A9..         MOV     R1,?V0 + 5
   1842            if ( pNew )
   \   000052   E8           MOV     A,R0
   \   000053   49           ORL     A,R1
   \   000054   6034         JZ      ??ZDO_RegisterForZDOMsg_3
   1843            {
   1844              pNew->taskID = taskID;
   \   000056   8882         MOV     DPL,R0
   \   000058   8983         MOV     DPH,R1
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   E5..         MOV     A,?V0 + 2
   \   00005E   12....       LCALL   ?Subroutine58 & 0xFFFF
   1845              pNew->clusterID = clusterID;
   \                     ??CrossCallReturnLabel_86:
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   E5..         MOV     A,?V0 + 0
   \   000066   F0           MOVX    @DPTR,A
   \   000067   A3           INC     DPTR
   \   000068   E5..         MOV     A,?V0 + 1
   \   00006A   12....       LCALL   ?Subroutine58 & 0xFFFF
   1846              pNew->next = NULL;
   \                     ??CrossCallReturnLabel_87:
   \   00006D   E4           CLR     A
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   F0           MOVX    @DPTR,A
   1847              if ( zdoMsgCBs )
   \   000071   90....       MOV     DPTR,#zdoMsgCBs
   \   000074   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000077   4B           ORL     A,R3
   \   000078   6006         JZ      ??ZDO_RegisterForZDOMsg_4
   1848              {
   1849                pLast->next = pNew;
   \   00007A   8E82         MOV     DPL,R6
   \   00007C   8F83         MOV     DPH,R7
   \   00007E   8003         SJMP    ??ZDO_RegisterForZDOMsg_5
   1850              }
   1851              else
   1852                zdoMsgCBs = pNew;
   \                     ??ZDO_RegisterForZDOMsg_4:
   \   000080   90....       MOV     DPTR,#zdoMsgCBs
   \                     ??ZDO_RegisterForZDOMsg_5:
   \   000083   12....       LCALL   ?Subroutine56 & 0xFFFF
   1853              return ( ZSuccess );
   \                     ??CrossCallReturnLabel_234:
   \   000086   7900         MOV     R1,#0x0
   \   000088   8002         SJMP    ??ZDO_RegisterForZDOMsg_6
   1854            }
   1855            else
   1856              return ( ZMemError );
   \                     ??ZDO_RegisterForZDOMsg_3:
   \   00008A   7910         MOV     R1,#0x10
   \                     ??ZDO_RegisterForZDOMsg_6:
   \   00008C   02....       LJMP    ?Subroutine1 & 0xFFFF
   1857          }
   1858          
   1859          /*********************************************************************
   1860           * @fn          ZDO_RemoveRegisteredCB
   1861           *
   1862           * @brief       Call this function if you don't want to receive the
   1863           *              incoming message.
   1864           *
   1865           * @param       taskID - Where the messages are being delivered.
   1866           * @param       clusterID - What message?
   1867           *
   1868           * @return      ZSuccess - successful, ZFailure if not found
   1869           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1870          ZStatus_t ZDO_RemoveRegisteredCB( uint8 taskID, uint16 clusterID )
   \                     ZDO_RemoveRegisteredCB:
   1871          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1872            ZDO_MsgCB_t *pList;
   1873            ZDO_MsgCB_t *pLast = NULL;
   \   000007   7C00         MOV     R4,#0x0
   \   000009   7D00         MOV     R5,#0x0
   1874          
   1875            pList = zdoMsgCBs;
   \   00000B   90....       MOV     DPTR,#zdoMsgCBs
   \   00000E   8008         SJMP    ??ZDO_RemoveRegisteredCB_0
   1876            while ( pList )
   1877            {
   1878              if ( pList->taskID == taskID && pList->clusterID == clusterID )
   1879              {
   1880                if ( pLast )
   1881                {
   1882                  // remove this one from the linked list
   1883                  pLast->next = pList->next;
   1884                }
   1885                else if ( pList->next )
   1886                {
   1887                  // remove the first one from the linked list
   1888                  zdoMsgCBs = pList->next;
   1889                }
   1890                else
   1891                {
   1892                  // remove the only item from the list
   1893                  zdoMsgCBs = (ZDO_MsgCB_t *)NULL;
   1894                }
   1895                osal_mem_free( pList );
   1896                return ( ZSuccess );
   1897              }
   1898              pLast = pList;
   \                     ??ZDO_RemoveRegisteredCB_1:
   \   000010   E8           MOV     A,R0
   \   000011   FC           MOV     R4,A
   \   000012   E9           MOV     A,R1
   \   000013   FD           MOV     R5,A
   1899              pList = pList->next;
   \   000014   8882         MOV     DPL,R0
   \   000016   8983         MOV     DPH,R1
   \                     ??ZDO_RemoveRegisteredCB_0:
   \   000018   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00001B   49           ORL     A,R1
   \   00001C   6047         JZ      ??ZDO_RemoveRegisteredCB_2
   \   00001E   8882         MOV     DPL,R0
   \   000020   8983         MOV     DPH,R1
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   6E           XRL     A,R6
   \   000026   70E8         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   000028   8882         MOV     DPL,R0
   \   00002A   8983         MOV     DPH,R1
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6A           XRL     A,R2
   \   000031   7003         JNZ     ??ZDO_RemoveRegisteredCB_3
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6B           XRL     A,R3
   \                     ??ZDO_RemoveRegisteredCB_3:
   \   000036   70D8         JNZ     ??ZDO_RemoveRegisteredCB_1
   \   000038   8882         MOV     DPL,R0
   \   00003A   8983         MOV     DPH,R1
   \   00003C   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   00003F   EC           MOV     A,R4
   \   000040   4D           ORL     A,R5
   \   000041   6006         JZ      ??ZDO_RemoveRegisteredCB_4
   \   000043   8C82         MOV     DPL,R4
   \   000045   8D83         MOV     DPH,R5
   \   000047   8007         SJMP    ??ZDO_RemoveRegisteredCB_5
   \                     ??ZDO_RemoveRegisteredCB_4:
   \   000049   EA           MOV     A,R2
   \   00004A   4B           ORL     A,R3
   \   00004B   90....       MOV     DPTR,#zdoMsgCBs
   \   00004E   6006         JZ      ??ZDO_RemoveRegisteredCB_6
   \                     ??ZDO_RemoveRegisteredCB_5:
   \   000050   EA           MOV     A,R2
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   EB           MOV     A,R3
   \   000054   8003         SJMP    ??ZDO_RemoveRegisteredCB_7
   \                     ??ZDO_RemoveRegisteredCB_6:
   \   000056   E4           CLR     A
   \   000057   F0           MOVX    @DPTR,A
   \   000058   A3           INC     DPTR
   \                     ??ZDO_RemoveRegisteredCB_7:
   \   000059   F0           MOVX    @DPTR,A
   \   00005A                ; Setup parameters for call to function osal_mem_free
   \   00005A   E8           MOV     A,R0
   \   00005B   FA           MOV     R2,A
   \   00005C   E9           MOV     A,R1
   \   00005D   FB           MOV     R3,A
   \   00005E   12....       LCALL   ??osal_mem_free?relay
   \   000061   7900         MOV     R1,#0x0
   \   000063   8002         SJMP    ??ZDO_RemoveRegisteredCB_8
   1900            }
   1901          
   1902            return ( ZFailure );
   \                     ??ZDO_RemoveRegisteredCB_2:
   \   000065   7901         MOV     R1,#0x1
   \                     ??ZDO_RemoveRegisteredCB_8:
   \   000067   7F01         MOV     R7,#0x1
   \   000069   02....       LJMP    ?BANKED_LEAVE_XDATA
   1903          }
   1904          
   1905          /*********************************************************************
   1906           * @fn          ZDO_SendMsgCBs
   1907           *
   1908           * @brief       This function sends messages to registered tasks.
   1909           *              Local to ZDO and shouldn't be called outside of ZDO.
   1910           *
   1911           * @param       inMsg - incoming message
   1912           *
   1913           * @return      TRUE if sent to at least 1 task, FALSE if not
   1914           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1915          uint8 ZDO_SendMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDO_SendMsgCBs:
   1916          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 2,R2
   \   000007   8B..         MOV     ?V0 + 3,R3
   1917            uint8 ret = FALSE;
   \   000009   75..00       MOV     ?V0 + 4,#0x0
   1918            ZDO_MsgCB_t *pList = zdoMsgCBs;
   \   00000C   90....       MOV     DPTR,#zdoMsgCBs
   \   00000F   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   000012   EA           MOV     A,R2
   \   000013   2410         ADD     A,#0x10
   \   000015   F5..         MOV     ?V0 + 8,A
   \   000017   EB           MOV     A,R3
   \   000018   3400         ADDC    A,#0x0
   \   00001A   F5..         MOV     ?V0 + 9,A
   \   00001C   02....       LJMP    ??CrossCallReturnLabel_216 & 0xFFFF
   1919            while ( pList )
   1920            {
   1921              if ( (pList->clusterID == inMsg->clusterID)
   1922                 || ((pList->clusterID == ZDO_ALL_MSGS_CLUSTERID)
   1923                     && ((inMsg->clusterID & ZDO_RESPONSE_BIT) || (inMsg->clusterID == Device_annce))) )
   \                     ??ZDO_SendMsgCBs_0:
   \   00001F   E5..         MOV     A,?V0 + 2
   \   000021   240C         ADD     A,#0xc
   \   000023   F582         MOV     DPL,A
   \   000025   E5..         MOV     A,?V0 + 3
   \   000027   12....       LCALL   ??Subroutine101_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   00002A   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   00002D   85..82       MOV     DPL,?V0 + 0
   \   000030   85..83       MOV     DPH,?V0 + 1
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   12....       LCALL   ??Subroutine97_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000039   E8           MOV     A,R0
   \   00003A   6A           XRL     A,R2
   \   00003B   7002         JNZ     ??ZDO_SendMsgCBs_1
   \   00003D   E9           MOV     A,R1
   \   00003E   6B           XRL     A,R3
   \                     ??ZDO_SendMsgCBs_1:
   \   00003F   601D         JZ      ??ZDO_SendMsgCBs_2
   \   000041   74FF         MOV     A,#-0x1
   \   000043   6A           XRL     A,R2
   \   000044   7003         JNZ     ??ZDO_SendMsgCBs_3
   \   000046   74FF         MOV     A,#-0x1
   \   000048   6B           XRL     A,R3
   \                     ??ZDO_SendMsgCBs_3:
   \   000049   6003         JZ      $+5
   \   00004B   02....       LJMP    ??ZDO_SendMsgCBs_4 & 0xFFFF
   \   00004E   E9           MOV     A,R1
   \   00004F   5480         ANL     A,#0x80
   \   000051   700B         JNZ     ??ZDO_SendMsgCBs_2
   \   000053   7413         MOV     A,#0x13
   \   000055   68           XRL     A,R0
   \   000056   7001         JNZ     ??ZDO_SendMsgCBs_5
   \   000058   E9           MOV     A,R1
   \                     ??ZDO_SendMsgCBs_5:
   \   000059   6003         JZ      $+5
   \   00005B   02....       LJMP    ??ZDO_SendMsgCBs_4 & 0xFFFF
   1924              {
   1925                zdoIncomingMsg_t *msgPtr;
   1926          
   1927                // Send the address to the task
   1928                msgPtr = (zdoIncomingMsg_t *)osal_msg_allocate( sizeof( zdoIncomingMsg_t ) + inMsg->asduLen );
   \                     ??ZDO_SendMsgCBs_2:
   \   00005E                ; Setup parameters for call to function osal_msg_allocate
   \   00005E   85..82       MOV     DPL,?V0 + 8
   \   000061   85..83       MOV     DPH,?V0 + 9
   \   000064   E0           MOVX    A,@DPTR
   \   000065   2417         ADD     A,#0x17
   \   000067   FA           MOV     R2,A
   \   000068   E4           CLR     A
   \   000069   3400         ADDC    A,#0x0
   \   00006B   FB           MOV     R3,A
   \   00006C   12....       LCALL   ??osal_msg_allocate?relay
   \   00006F   8A..         MOV     ?V0 + 6,R2
   \   000071   8B..         MOV     ?V0 + 7,R3
   \   000073   AE..         MOV     R6,?V0 + 6
   \   000075   AF..         MOV     R7,?V0 + 7
   1929                if ( msgPtr )
   \   000077   EE           MOV     A,R6
   \   000078   4F           ORL     A,R7
   \   000079   6076         JZ      ??ZDO_SendMsgCBs_4
   1930                {
   1931                  // copy struct
   1932                  osal_memcpy( msgPtr, inMsg, sizeof( zdoIncomingMsg_t ));
   \   00007B                ; Setup parameters for call to function osal_memcpy
   \   00007B   85....       MOV     ?V0 + 4,?V0 + 2
   \   00007E   85....       MOV     ?V0 + 5,?V0 + 3
   \   000081   75..00       MOV     ?V0 + 6,#0x0
   \   000084   78..         MOV     R0,#?V0 + 4
   \   000086   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000089   7C17         MOV     R4,#0x17
   \   00008B   7D00         MOV     R5,#0x0
   \   00008D   12....       LCALL   ??osal_memcpy?relay
   \   000090   7403         MOV     A,#0x3
   \   000092   12....       LCALL   ?DEALLOC_XSTACK8
   1933          
   1934                  if ( inMsg->asduLen )
   \   000095   85..82       MOV     DPL,?V0 + 8
   \   000098   85..83       MOV     DPH,?V0 + 9
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   6038         JZ      ??ZDO_SendMsgCBs_6
   1935                  {
   1936                    msgPtr->asdu = (byte*)(((byte*)msgPtr) + sizeof( zdoIncomingMsg_t ));
   \   00009E   EE           MOV     A,R6
   \   00009F   2417         ADD     A,#0x17
   \   0000A1   FA           MOV     R2,A
   \   0000A2   EF           MOV     A,R7
   \   0000A3   3400         ADDC    A,#0x0
   \   0000A5   FB           MOV     R3,A
   \   0000A6   EE           MOV     A,R6
   \   0000A7   2413         ADD     A,#0x13
   \   0000A9   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   0000AC   EA           MOV     A,R2
   \   0000AD   F0           MOVX    @DPTR,A
   \   0000AE   A3           INC     DPTR
   \   0000AF   EB           MOV     A,R3
   \   0000B0   F0           MOVX    @DPTR,A
   1937                    osal_memcpy( msgPtr->asdu, inMsg->asdu, inMsg->asduLen );
   \   0000B1                ; Setup parameters for call to function osal_memcpy
   \   0000B1   E5..         MOV     A,?V0 + 2
   \   0000B3   2413         ADD     A,#0x13
   \   0000B5   F582         MOV     DPL,A
   \   0000B7   E5..         MOV     A,?V0 + 3
   \   0000B9   12....       LCALL   ??Subroutine101_0 & 0xFFFF
   1938                  }
   \                     ??CrossCallReturnLabel_189:
   \   0000BC   12....       LCALL   ??Subroutine83_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   0000BF   78..         MOV     R0,#?V0 + 4
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C4   85..82       MOV     DPL,?V0 + 8
   \   0000C7   85..83       MOV     DPH,?V0 + 9
   \   0000CA   E0           MOVX    A,@DPTR
   \   0000CB   FC           MOV     R4,A
   \   0000CC   7D00         MOV     R5,#0x0
   \   0000CE   12....       LCALL   ??osal_memcpy?relay
   \   0000D1   7403         MOV     A,#0x3
   \   0000D3   12....       LCALL   ?DEALLOC_XSTACK8
   1939          
   1940                  msgPtr->hdr.event = ZDO_CB_MSG;
   \                     ??ZDO_SendMsgCBs_6:
   \   0000D6   8E82         MOV     DPL,R6
   \   0000D8   8F83         MOV     DPH,R7
   \   0000DA   74D3         MOV     A,#-0x2d
   \   0000DC   F0           MOVX    @DPTR,A
   1941                  osal_msg_send( pList->taskID, (uint8 *)msgPtr );
   \   0000DD                ; Setup parameters for call to function osal_msg_send
   \   0000DD   EE           MOV     A,R6
   \   0000DE   FA           MOV     R2,A
   \   0000DF   EF           MOV     A,R7
   \   0000E0   FB           MOV     R3,A
   \   0000E1   85..82       MOV     DPL,?V0 + 0
   \   0000E4   85..83       MOV     DPH,?V0 + 1
   \   0000E7   A3           INC     DPTR
   \   0000E8   A3           INC     DPTR
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   F9           MOV     R1,A
   \   0000EB   12....       LCALL   ??osal_msg_send?relay
   1942                  ret = TRUE;
   \   0000EE   75..01       MOV     ?V0 + 4,#0x1
   1943                }
   1944              }
   1945              pList = (ZDO_MsgCB_t *)pList->next;
   \                     ??ZDO_SendMsgCBs_4:
   \   0000F1   85..82       MOV     DPL,?V0 + 0
   \   0000F4   85..83       MOV     DPH,?V0 + 1
   \   0000F7   12....       LCALL   ??Subroutine104_0 & 0xFFFF
   1946            }
   \                     ??CrossCallReturnLabel_216:
   \   0000FA   E5..         MOV     A,?V0 + 0
   \   0000FC   45..         ORL     A,?V0 + 1
   \   0000FE   6003         JZ      $+5
   \   000100   02....       LJMP    ??ZDO_SendMsgCBs_0 & 0xFFFF
   1947            return ( ret );
   \   000103   A9..         MOV     R1,?V0 + 4
   \   000105   02....       LJMP    ?Subroutine5 & 0xFFFF
   1948          }
   1949          
   1950          /*********************************************************************
   1951           * Incoming message processor
   1952           */
   1953          
   1954          /*********************************************************************
   1955           * @fn          ZDP_IncomingData
   1956           *
   1957           * @brief       This function indicates the transfer of a data PDU (ASDU)
   1958           *              from the APS sub-layer to the ZDO.
   1959           *
   1960           * @param       pData - Incoming Message
   1961           *
   1962           * @return      none
   1963           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine102_0
   \   000003                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1964          void ZDP_IncomingData( afIncomingMSGPacket_t *pData )
   \                     ZDP_IncomingData:
   1965          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 23
   \   000005   74E9         MOV     A,#-0x17
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1966            uint8 x = 0;
   \   00000E   75..00       MOV     ?V0 + 0,#0x0
   1967            uint8 handled;
   1968            zdoIncomingMsg_t inMsg;
   1969          
   1970            inMsg.srcAddr.addrMode = Addr16Bit;
   \   000011   740A         MOV     A,#0xa
   \   000013   12....       LCALL   ?XSTACK_DISP0_8
   \   000016   7402         MOV     A,#0x2
   \   000018   12....       LCALL   ?Subroutine53 & 0xFFFF
   1971            inMsg.srcAddr.addr.shortAddr = pData->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_76:
   \   00001B   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_254:
   \   00001E   7402         MOV     A,#0x2
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   12....       LCALL   ?Subroutine56 & 0xFFFF
   1972            inMsg.wasBroadcast = pData->wasBroadcast;
   \                     ??CrossCallReturnLabel_235:
   \   000026   EE           MOV     A,R6
   \   000027   2415         ADD     A,#0x15
   \   000029   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   00002C   C0E0         PUSH    A
   \   00002E   740B         MOV     A,#0xb
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   D0E0         POP     A
   \   000035   12....       LCALL   ?Subroutine76 & 0xFFFF
   1973            inMsg.clusterID = pData->clusterId;
   \                     ??CrossCallReturnLabel_109:
   \   000038   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_255:
   \   00003B   740C         MOV     A,#0xc
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   12....       LCALL   ?Subroutine56 & 0xFFFF
   1974            inMsg.SecurityUse = pData->SecurityUse;
   \                     ??CrossCallReturnLabel_236:
   \   000043   EE           MOV     A,R6
   \   000044   2419         ADD     A,#0x19
   \   000046   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000049   C0E0         PUSH    A
   \   00004B   740E         MOV     A,#0xe
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   D0E0         POP     A
   \   000052   F0           MOVX    @DPTR,A
   1975          
   1976            inMsg.asduLen = pData->cmd.DataLength-1;
   \   000053   EE           MOV     A,R6
   \   000054   2420         ADD     A,#0x20
   \   000056   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000059   14           DEC     A
   \   00005A   C0E0         PUSH    A
   \   00005C   7410         MOV     A,#0x10
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   D0E0         POP     A
   \   000063   F0           MOVX    @DPTR,A
   1977            inMsg.asdu = pData->cmd.Data+1;
   \   000064   EE           MOV     A,R6
   \   000065   2422         ADD     A,#0x22
   \   000067   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   2401         ADD     A,#0x1
   \   00006D   FA           MOV     R2,A
   \   00006E   A3           INC     DPTR
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   3400         ADDC    A,#0x0
   \   000072   FB           MOV     R3,A
   \   000073   7413         MOV     A,#0x13
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   EA           MOV     A,R2
   \   000079   F0           MOVX    @DPTR,A
   \   00007A   A3           INC     DPTR
   \   00007B   EB           MOV     A,R3
   \   00007C   12....       LCALL   ?Subroutine58 & 0xFFFF
   1978            inMsg.TransSeq = pData->cmd.Data[0];
   \                     ??CrossCallReturnLabel_88:
   \   00007F   12....       LCALL   ??Subroutine95_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000082   E0           MOVX    A,@DPTR
   \   000083   C0E0         PUSH    A
   \   000085   740F         MOV     A,#0xf
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   D0E0         POP     A
   \   00008C   F0           MOVX    @DPTR,A
   1979            inMsg.macDestAddr = pData->macDestAddr;
   \   00008D   EE           MOV     A,R6
   \   00008E   2412         ADD     A,#0x12
   \   000090   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000093   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_256:
   \   000096   7411         MOV     A,#0x11
   \   000098   12....       LCALL   ?XSTACK_DISP0_8
   \   00009B   12....       LCALL   ?Subroutine56 & 0xFFFF
   1980            inMsg.macSrcAddr = pData->macSrcAddr;
   \                     ??CrossCallReturnLabel_237:
   \   00009E   EE           MOV     A,R6
   \   00009F   2424         ADD     A,#0x24
   \   0000A1   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   0000A4   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_257:
   \   0000A7   7415         MOV     A,#0x15
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   12....       LCALL   ?Subroutine56 & 0xFFFF
   1981          
   1982            handled = ZDO_SendMsgCBs( &inMsg );
   \                     ??CrossCallReturnLabel_238:
   \   0000AF                ; Setup parameters for call to function ZDO_SendMsgCBs
   \   0000AF   85..82       MOV     DPL,?XSP + 0
   \   0000B2   85..83       MOV     DPH,?XSP + 1
   \   0000B5   AA82         MOV     R2,DPL
   \   0000B7   AB83         MOV     R3,DPH
   \   0000B9   12....       LCALL   ??ZDO_SendMsgCBs?relay
   \   0000BC   E9           MOV     A,R1
   \   0000BD   F5..         MOV     ?V0 + 1,A
   1983          
   1984          #if (defined MT_ZDO_CB_FUNC)
   1985          #if !defined MT_TASK
   1986            if (zgZdoDirectCB)
   1987          #endif
   1988            {
   1989              MT_ZdoDirectCB( pData, &inMsg );
   \   0000BF                ; Setup parameters for call to function MT_ZdoDirectCB
   \   0000BF   85..82       MOV     DPL,?XSP + 0
   \   0000C2   85..83       MOV     DPH,?XSP + 1
   \   0000C5   AC82         MOV     R4,DPL
   \   0000C7   AD83         MOV     R5,DPH
   \   0000C9   EE           MOV     A,R6
   \   0000CA   FA           MOV     R2,A
   \   0000CB   EF           MOV     A,R7
   \   0000CC   FB           MOV     R3,A
   \   0000CD   12....       LCALL   ??MT_ZdoDirectCB?relay
   \   0000D0   8002         SJMP    ??ZDP_IncomingData_0
   1990            }
   1991          #endif
   1992          
   1993            while ( zdpMsgProcs[x].clusterID != 0xFFFF )
   1994            {
   1995              if ( zdpMsgProcs[x].clusterID == inMsg.clusterID )
   1996              {
   1997                zdpMsgProcs[x].pFn( &inMsg );
   1998                return;
   1999              }
   2000              x++;
   \                     ??ZDP_IncomingData_1:
   \   0000D2   05..         INC     ?V0 + 0
   \                     ??ZDP_IncomingData_0:
   \   0000D4   85....       MOV     ?V0 + 2,?V0 + 0
   \   0000D7   75..00       MOV     ?V0 + 3,#0x0
   \   0000DA   7402         MOV     A,#0x2
   \   0000DC   78..         MOV     R0,#?V0 + 2
   \   0000DE   12....       LCALL   ?S_SHL
   \   0000E1   74..         MOV     A,#zdpMsgProcs & 0xff
   \   0000E3   25..         ADD     A,?V0 + 2
   \   0000E5   F8           MOV     R0,A
   \   0000E6   74..         MOV     A,#(zdpMsgProcs >> 8) & 0xff
   \   0000E8   35..         ADDC    A,?V0 + 3
   \   0000EA   F9           MOV     R1,A
   \   0000EB   8882         MOV     DPL,R0
   \   0000ED   8983         MOV     DPH,R1
   \   0000EF   E4           CLR     A
   \   0000F0   93           MOVC    A,@A+DPTR
   \   0000F1   C0E0         PUSH    A
   \   0000F3   7401         MOV     A,#0x1
   \   0000F5   93           MOVC    A,@A+DPTR
   \   0000F6   F583         MOV     DPH,A
   \   0000F8   D082         POP     DPL
   \   0000FA   AA82         MOV     R2,DPL
   \   0000FC   AB83         MOV     R3,DPH
   \   0000FE   74FF         MOV     A,#-0x1
   \   000100   6A           XRL     A,R2
   \   000101   7003         JNZ     ??ZDP_IncomingData_2
   \   000103   74FF         MOV     A,#-0x1
   \   000105   6B           XRL     A,R3
   \                     ??ZDP_IncomingData_2:
   \   000106   602E         JZ      ??ZDP_IncomingData_3
   \   000108   740C         MOV     A,#0xc
   \   00010A   12....       LCALL   ?XSTACK_DISP0_8
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   6A           XRL     A,R2
   \   00010F   7003         JNZ     ??ZDP_IncomingData_4
   \   000111   A3           INC     DPTR
   \   000112   E0           MOVX    A,@DPTR
   \   000113   6B           XRL     A,R3
   \                     ??ZDP_IncomingData_4:
   \   000114   70BC         JNZ     ??ZDP_IncomingData_1
   \   000116                ; Setup parameters for indirect call
   \   000116   85..82       MOV     DPL,?XSP + 0
   \   000119   85..83       MOV     DPH,?XSP + 1
   \   00011C   AA82         MOV     R2,DPL
   \   00011E   AB83         MOV     R3,DPH
   \   000120   8882         MOV     DPL,R0
   \   000122   8983         MOV     DPH,R1
   \   000124   A3           INC     DPTR
   \   000125   A3           INC     DPTR
   \   000126   E4           CLR     A
   \   000127   93           MOVC    A,@A+DPTR
   \   000128   C0E0         PUSH    A
   \   00012A   7401         MOV     A,#0x1
   \   00012C   93           MOVC    A,@A+DPTR
   \   00012D   F583         MOV     DPH,A
   \   00012F   D082         POP     DPL
   \   000131   12....       LCALL   ?CALL_IND
   \   000134   8011         SJMP    ??ZDP_IncomingData_5
   2001            }
   2002          
   2003            // Handle unhandled messages
   2004            if ( !handled )
   \                     ??ZDP_IncomingData_3:
   \   000136   E5..         MOV     A,?V0 + 1
   \   000138   700D         JNZ     ??ZDP_IncomingData_5
   2005              ZDApp_InMsgCB( &inMsg );
   \   00013A                ; Setup parameters for call to function ZDApp_InMsgCB
   \   00013A   85..82       MOV     DPL,?XSP + 0
   \   00013D   85..83       MOV     DPH,?XSP + 1
   \   000140   AA82         MOV     R2,DPL
   \   000142   AB83         MOV     R3,DPH
   \   000144   12....       LCALL   ??ZDApp_InMsgCB?relay
   \                     ??ZDP_IncomingData_5:
   \   000147   7417         MOV     A,#0x17
   \   000149   02....       LJMP    ??Subroutine99_0 & 0xFFFF
   2006          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDP_TmpBuf>`:
   \   000000   ....         DW ZDP_Buf + 1H

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??fillAndSend?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    fillAndSend

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SendData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SendData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NWKAddrOfInterestReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NWKAddrOfInterestReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NwkAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NwkAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_IEEEAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IEEEAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MatchDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SimpleDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_UserDescSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_ServerDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_DeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_DeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EndDeviceTimeoutReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceTimeoutReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zdpProcessAddrReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zdpProcessAddrReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_NodeDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_NodeDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_PowerDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_PowerDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_SimpleDescMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_SimpleDescMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EPRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EPRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_UserDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_UserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_ServerDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_ServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_GenericRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_GenericRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_EndDeviceBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_EndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_BindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_BindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtDirectJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtPermitJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtLeaveReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkUpdateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtLqiRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtRtgRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtBindRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_MgmtNwkUpdateNotify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_MgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RegisterForZDOMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RemoveRegisteredCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RemoveRegisteredCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SendMsgCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SendMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDP_IncomingData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDP_IncomingData
   2007          
   2008          /*********************************************************************
   2009          *********************************************************************/
   2010          

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       1      0     14  ZDO_RegisterForZDOMsg
                          0 0 14 -> osal_mem_alloc
       0      0      9  ZDO_RemoveRegisteredCB
                          0 0  9 -> osal_mem_free
       0      0     56  ZDO_SendMsgCBs
                          0 0 21 -> osal_memcpy
                          0 0 18 -> osal_msg_allocate
                          0 0 18 -> osal_msg_send
       1      0     30  ZDP_BindUnbindReq
                          0 0 22 -> fillAndSend
                          0 0 20 -> sAddrExtCpy
                          1 0 20 -> sAddrExtCpy
       1      0     22  ZDP_DeviceAnnce
                          0 0 21 -> fillAndSend
                          0 0 19 -> sAddrExtCpy
       1      0     26  ZDP_EPRsp
                          0 0 18 -> fillAndSend
                          0 0 19 -> osal_memcpy
       1      0     29  ZDP_EndDeviceBindReq
                          0 0 18 -> NLME_GetExtAddr
                          0 0 18 -> NLME_GetShortAddr
                          0 0 20 -> fillAndSend
                          0 0 18 -> sAddrExtCpy
       1      0     21  ZDP_EndDeviceTimeoutReq
                          0 0 21 -> fillAndSend
                          0 0 19 -> sAddrExtCpy
       1      0     17  ZDP_GenericRsp
                          0 0 13 -> fillAndSend
       1      0     21  ZDP_IEEEAddrReq
                          0 0 21 -> fillAndSend
       1      0     35  ZDP_IncomingData
                          0 0 35 -> MT_ZdoDirectCB
                          0 0 35 -> ZDApp_InMsgCB
                          0 0 35 -> ZDO_SendMsgCBs
       1      0     24  ZDP_MatchDescReq
                          0 0 16 -> fillAndSend
       1      0     30  ZDP_MgmtBindRsp
                          0 0 25 -> fillAndSend
                          0 0 23 -> osal_mem_alloc
                          0 0 23 -> osal_mem_free
                          0 0 23 -> sAddrExtCpy
       1      0     15  ZDP_MgmtDirectJoinReq
                          0 0 14 -> fillAndSend
                          0 0 12 -> sAddrExtCpy
       0      0     16  ZDP_MgmtLeaveReq
                          0 0 14 -> fillAndSend
                          0 0 12 -> sAddrExtCpy
       1      0     31  ZDP_MgmtLqiRsp
                          0 0 26 -> fillAndSend
                          0 0 24 -> osal_mem_alloc
                          0 0 24 -> osal_mem_free
                          0 0 24 -> sAddrExtCpy
       1      0     24  ZDP_MgmtNwkDiscReq
                          0 0 18 -> fillAndSend
                          0 0 20 -> osal_buffer_uint32
       1      0     30  ZDP_MgmtNwkDiscRsp
                          0 0 25 -> fillAndSend
                          0 0 23 -> osal_mem_alloc
                          0 0 23 -> osal_mem_free
                          0 0 23 -> sAddrExtCpy
       1      0     39  ZDP_MgmtNwkUpdateNotify
                          0 0 25 -> fillAndSend
                          0 0 27 -> osal_buffer_uint32
                          0 0 23 -> osal_mem_alloc
                          0 0 23 -> osal_mem_free
                          0 0 26 -> osal_memcpy
       1      0     26  ZDP_MgmtNwkUpdateReq
                          0 0 18 -> fillAndSend
                          0 0 20 -> osal_buffer_uint32
       1      0     12  ZDP_MgmtPermitJoinReq
                          0 0 12 -> fillAndSend
       1      0     28  ZDP_MgmtRtgRsp
                          0 0 23 -> fillAndSend
                          0 0 21 -> osal_mem_alloc
                          0 0 21 -> osal_mem_free
       1      0     13  ZDP_NWKAddrOfInterestReq
                          0 0 12 -> fillAndSend
       1      0     14  ZDP_NodeDescMsg
                          0 0 12 -> fillAndSend
       1      0     25  ZDP_NwkAddrReq
                          0 0 25 -> fillAndSend
                          0 0 23 -> sAddrExtCmp
                          0 0 23 -> sAddrExtCpy
       1      0     14  ZDP_PowerDescMsg
                          0 0 12 -> fillAndSend
       1      0     21  ZDP_SendData
                          0 0 16 -> fillAndSend
       1      0     21  ZDP_ServerDiscReq
                          0 0 21 -> fillAndSend
       1      0     17  ZDP_ServerDiscRsp
                          0 0 13 -> fillAndSend
       1      0     22  ZDP_SimpleDescMsg
                          0 0 22 -> fillAndSend
       1      0     13  ZDP_SimpleDescReq
                          0 0 12 -> fillAndSend
       1      0     25  ZDP_UserDescRsp
                          0 0 21 -> fillAndSend
                          0 0 22 -> osal_memcpy
       1      0     24  ZDP_UserDescSet
                          0 0 21 -> fillAndSend
                          1 0 22 -> osal_memcpy
                          0 0 19 -> osal_memset
       1      0     75  fillAndSend
                          0 0 37 -> AF_DataRequest
                          0 0 28 -> osal_memset
       1      0     38  zdpProcessAddrReq
                          0 0 36 -> AddrMgrEntryGet
                          0 0 36 -> AssocGetWithExt
                          0 0 36 -> AssocGetWithShort
                          0 0 36 -> AssocMakeList
                          0 0 38 -> fillAndSend
                          0 0 36 -> osal_mem_free
                          0 0 36 -> sAddrExtCmp
                          0 0 36 -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDP_TmpBuf>
       7  ??Subroutine100_0
       5  ??Subroutine101_0
       6  ??Subroutine102_0
       6  ??Subroutine103_0
       8  ??Subroutine104_0
       4  ??Subroutine105_0
       8  ??Subroutine106_0
       8  ??Subroutine107_0
       5  ??Subroutine108_0
       6  ??Subroutine109_0
       1  ??Subroutine110_0
       3  ??Subroutine111_0
       4  ??Subroutine112_0
       5  ??Subroutine113_0
       8  ??Subroutine83_0
       8  ??Subroutine84_0
       5  ??Subroutine85_0
       8  ??Subroutine86_0
       4  ??Subroutine87_0
       5  ??Subroutine88_0
       8  ??Subroutine89_0
       4  ??Subroutine90_0
       7  ??Subroutine91_0
       1  ??Subroutine92_0
       5  ??Subroutine93_0
       4  ??Subroutine94_0
       4  ??Subroutine95_0
       4  ??Subroutine96_0
       6  ??Subroutine97_0
       8  ??Subroutine98_0
       8  ??Subroutine99_0
       6  ??ZDO_RegisterForZDOMsg?relay
       6  ??ZDO_RemoveRegisteredCB?relay
       6  ??ZDO_SendMsgCBs?relay
       6  ??ZDP_BindUnbindReq?relay
       6  ??ZDP_DeviceAnnce?relay
       6  ??ZDP_EPRsp?relay
       6  ??ZDP_EndDeviceBindReq?relay
       6  ??ZDP_EndDeviceTimeoutReq?relay
       6  ??ZDP_GenericRsp?relay
       6  ??ZDP_IEEEAddrReq?relay
       6  ??ZDP_IncomingData?relay
       6  ??ZDP_MatchDescReq?relay
       6  ??ZDP_MgmtBindRsp?relay
       6  ??ZDP_MgmtDirectJoinReq?relay
       6  ??ZDP_MgmtLeaveReq?relay
       6  ??ZDP_MgmtLqiRsp?relay
       6  ??ZDP_MgmtNwkDiscReq?relay
       6  ??ZDP_MgmtNwkDiscRsp?relay
       6  ??ZDP_MgmtNwkUpdateNotify?relay
       6  ??ZDP_MgmtNwkUpdateReq?relay
       6  ??ZDP_MgmtPermitJoinReq?relay
       6  ??ZDP_MgmtRtgRsp?relay
       6  ??ZDP_NWKAddrOfInterestReq?relay
       6  ??ZDP_NodeDescMsg?relay
       6  ??ZDP_NwkAddrReq?relay
       6  ??ZDP_PowerDescMsg?relay
       6  ??ZDP_SendData?relay
       6  ??ZDP_ServerDiscReq?relay
       6  ??ZDP_ServerDiscRsp?relay
       6  ??ZDP_SimpleDescMsg?relay
       6  ??ZDP_SimpleDescReq?relay
       6  ??ZDP_UserDescRsp?relay
       6  ??ZDP_UserDescSet?relay
       6  ??fillAndSend?relay
       6  ??zdpProcessAddrReq?relay
       9  ?Subroutine0
       5  ?Subroutine1
       6  ?Subroutine10
      43  ?Subroutine11
       3  ?Subroutine12
       1  ?Subroutine13
       8  ?Subroutine14
       9  ?Subroutine15
       4  ?Subroutine16
      14  ?Subroutine17
       3  ?Subroutine18
       8  ?Subroutine19
      10  ?Subroutine2
      10  ?Subroutine20
      14  ?Subroutine21
       3  ?Subroutine22
       4  ?Subroutine23
       9  ?Subroutine24
      15  ?Subroutine25
      13  ?Subroutine26
       6  ?Subroutine27
       7  ?Subroutine28
       1  ?Subroutine29
       2  ?Subroutine3
      13  ?Subroutine30
       3  ?Subroutine31
       3  ?Subroutine32
       6  ?Subroutine33
       2  ?Subroutine34
       9  ?Subroutine35
       4  ?Subroutine36
       5  ?Subroutine37
       4  ?Subroutine38
       8  ?Subroutine39
       5  ?Subroutine4
       5  ?Subroutine40
       1  ?Subroutine41
       7  ?Subroutine42
       3  ?Subroutine43
      10  ?Subroutine44
       9  ?Subroutine45
      15  ?Subroutine46
       5  ?Subroutine47
       6  ?Subroutine48
       7  ?Subroutine49
       5  ?Subroutine5
       5  ?Subroutine50
      15  ?Subroutine51
      13  ?Subroutine52
       6  ?Subroutine53
      13  ?Subroutine54
      15  ?Subroutine55
       1  ?Subroutine56
       8  ?Subroutine57
       6  ?Subroutine58
      13  ?Subroutine59
      23  ?Subroutine6
      10  ?Subroutine60
       8  ?Subroutine61
       3  ?Subroutine62
       2  ?Subroutine63
       3  ?Subroutine64
      11  ?Subroutine65
      11  ?Subroutine66
       1  ?Subroutine67
       6  ?Subroutine68
      15  ?Subroutine69
      21  ?Subroutine7
       8  ?Subroutine70
       8  ?Subroutine71
       8  ?Subroutine72
       5  ?Subroutine73
       4  ?Subroutine74
      16  ?Subroutine75
      10  ?Subroutine76
       7  ?Subroutine77
       7  ?Subroutine78
       9  ?Subroutine79
       6  ?Subroutine8
       3  ?Subroutine80
       9  ?Subroutine81
       8  ?Subroutine82
       8  ?Subroutine9
     143  ZDO_RegisterForZDOMsg
     108  ZDO_RemoveRegisteredCB
     264  ZDO_SendMsgCBs
       1  ZDP_AF_ENDPOINT
     197  ZDP_BindUnbindReq
      80  ZDP_Buf
      73  ZDP_DeviceAnnce
     176  ZDP_EPRsp
     288  ZDP_EndDeviceBindReq
      54  ZDP_EndDeviceTimeoutReq
      96  ZDP_GenericRsp
      56  ZDP_IEEEAddrReq
     332  ZDP_IncomingData
     204  ZDP_MatchDescReq
     282  ZDP_MgmtBindRsp
      35  ZDP_MgmtDirectJoinReq
      62  ZDP_MgmtLeaveReq
     348  ZDP_MgmtLqiRsp
      67  ZDP_MgmtNwkDiscReq
     330  ZDP_MgmtNwkDiscRsp
     242  ZDP_MgmtNwkUpdateNotify
     140  ZDP_MgmtNwkUpdateReq
      20  ZDP_MgmtPermitJoinReq
     308  ZDP_MgmtRtgRsp
      15  ZDP_NWKAddrOfInterestReq
     140  ZDP_NodeDescMsg
     123  ZDP_NwkAddrReq
      83  ZDP_PowerDescMsg
     113  ZDP_SendData
      83  ZDP_ServerDiscReq
      82  ZDP_ServerDiscRsp
     345  ZDP_SimpleDescMsg
      27  ZDP_SimpleDescReq
       2  ZDP_TmpBuf
       1  ZDP_TransID
       1  ZDP_TxOptions
     146  ZDP_UserDescRsp
     161  ZDP_UserDescSet
     173  fillAndSend
       2  zdoMsgCBs
      80  zdpMsgProcs
     725  zdpProcessAddrReq

 
 6 881 bytes in segment BANKED_CODE
   210 bytes in segment BANK_RELAYS
    81 bytes in segment CODE_C
     2 bytes in segment XDATA_I
     2 bytes in segment XDATA_ID
    84 bytes in segment XDATA_Z
 
 7 174 bytes of CODE  memory
    86 bytes of XDATA memory

Errors: none
Warnings: none
