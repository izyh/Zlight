###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             12/Apr/2014  12:18:16 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Components\stack\nwk\nwk_globals.c           #
#    Command line       =  -f "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f "D:\Texas         #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO       #
#                          -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f "D:\Texas               #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wZCL.cfg" "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Components\stack\nwk\nwk_globals.c" -D       #
#                          FEATURE_GREEN_POWER -D SECURE=1 -D                 #
#                          TC_LINKKEY_JOIN -D ZDSECMGR_TC_DEVICE_MAX=2 -D     #
#                          NV_RESTORE -D HOLD_AUTO_START -D INTER_PAN -D      #
#                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC  #
#                          -D MT_ZDO_FUNC -D MT_ZDO_CB_FUNC -D MT_UTIL_FUNC   #
#                          -D MT_ZDO_MGMT -D LCD_SUPPORTED -D HAL_LCD=FALSE   #
#                          -D HAL_KEY=FALSE -D ZCL_BASIC -D ZCL_READ -D       #
#                          ZCL_WRITE -D ZCL_IDENTIFY -D ZCL_ON_OFF -D         #
#                          ZCL_SCENES -D ZCL_GROUPS -D                        #
#                          ZCL_LIGHT_LINK_ENHANCE -D ZCL_LEVEL_CTRL -D        #
#                          ZCL_COLOR_CTRL -D xMAX_CHANNELS_24GHZ=0x02108800   #
#                          -lC "D:\Texas Instruments\Z-Stack Lighting         #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\List\" -lA "D:\Texas Instruments\Z-Stack     #
#                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC253 #
#                          x\BridgeEB-Pro\List\" --diag_suppress Pe001,Pa010  #
#                          -o "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\Obj\" -e --debug --core=plain --dptr=16,1    #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\" -I    #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\Sour #
#                          ce\" -I "D:\Texas Instruments\Z-Stack Lighting     #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\S #
#                          ource\" -I "D:\Texas Instruments\Z-Stack Lighting  #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\HomeAutomation\Source\" -I "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\HomeAutomation\SampleLight\Source\" -I           #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\ZMain\TI2530DB\" -I "D:\Texas                    #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\hal\include\" -I "D:\Texas      #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\hal\target\CC2530EB\" -I        #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\include\" -I "D:\Texas      #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\high_level\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\" -I        #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\single_chip #
#                          \" -I "D:\Texas Instruments\Z-Stack Lighting       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mt\" -I "D:\Texas               #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\osal\include\" -I "D:\Texas     #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\services\saddr\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\services\sdata\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\af\" -I "D:\Texas         #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\nwk\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sapi\" -I "D:\Texas       #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sec\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sys\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\zcl\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\zdo\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\zmac\" -I "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\zmac\f8w\" -Ohz                 #
#                          --require_prototypes                               #
#    List file          =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\List\nwk_globals.lst                         #
#    Object file        =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\Obj\nwk_globals.r51                          #
#                                                                             #
#                                                                             #
###############################################################################

D:\Texas Instruments\Z-Stack Lighting 1.0.2\Components\stack\nwk\nwk_globals.c
      1          /**************************************************************************************************
      2            Filename:       nwk_globals.c
      3            Revised:        $Date: 2013-10-02 15:57:50 -0700 (Wed, 02 Oct 2013) $
      4            Revision:       $Revision: 35529 $
      5          
      6            Description:    User definable Network Parameters.
      7          
      8          
      9            Copyright 2004-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "AddrMgr.h"
     47          #include "AssocList.h"
     48          #include "BindingTable.h"
     49          #include "nwk_util.h"
     50          #include "nwk_globals.h"
     51          #include "APS.h"
     52          #include "ssp.h"
     53          #include "rtg.h"
     54          #include "ZDConfig.h"
     55          #include "ZGlobals.h"
     56          #include "ZDApp.h"
     57          
     58          #if defined ( LCD_SUPPORTED )
     59            #include "OnBoard.h"
     60          #endif
     61          
     62          /* HAL */
     63          //#include "hal_lcd.h"
     64          #include "hal_oled.h"
     65          
     66          /*********************************************************************
     67           * MACROS
     68           */
     69          
     70          /*********************************************************************
     71           * CONSTANTS
     72           */
     73          // Maximums for the data buffer queue
     74          #define NWK_MAX_DATABUFS_WAITING    8     // Waiting to be sent to MAC
     75          #define NWK_MAX_DATABUFS_SCHEDULED  5     // Timed messages to be sent
     76          #define NWK_MAX_DATABUFS_CONFIRMED  5     // Held after MAC confirms
     77          #define NWK_MAX_DATABUFS_TOTAL      12    // Total number of buffers
     78          
     79          // 1-255 (0 -> 256) X RTG_TIMER_INTERVAL
     80          // A known shortcoming is that when a message is enqueued as "hold" for a
     81          // sleeping device, the timer tick may have counted down to 1, so that msg
     82          // will not be held as long as expected. If NWK_INDIRECT_MSG_TIMEOUT is set to 1
     83          // the hold time will vary randomly from 0 - CNT_RTG_TIMER ticks.
     84          // So the hold time will vary within this interval:
     85          // { (NWK_INDIRECT_MSG_TIMEOUT-1)*CNT_RTG_TIMER,
     86          //                                    NWK_INDIRECT_MSG_TIMEOUT*CNT_RTG_TIMER }
     87          #define NWK_INDIRECT_CNT_RTG_TMR    1
     88          // To hold msg for sleeping end devices for 30 secs:
     89          // #define CNT_RTG_TIMER            1
     90          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     91          // To hold msg for sleeping end devices for 30 mins:
     92          // #define CNT_RTG_TIMER            60
     93          // #define NWK_INDIRECT_MSG_TIMEOUT 30
     94          // To hold msg for sleeping end devices for 30 days:
     95          // #define CNT_RTG_TIMER            60
     96          // #define NWK_INDIRECT_MSG_TIMEOUT (30 * 24 * 60)
     97          // Maximum msgs to hold per associated device.
     98          #define NWK_INDIRECT_MSG_MAX_PER    3
     99          // Maximum total msgs to hold for all associated devices.
    100          #define NWK_INDIRECT_MSG_MAX_ALL    \
    101                                      (NWK_MAX_DATABUFS_TOTAL - NWK_INDIRECT_MSG_MAX_PER)
    102          
    103          /*********************************************************************
    104           * TYPEDEFS
    105           */
    106          
    107          /*********************************************************************
    108           * NWK GLOBAL VARIABLES
    109           */
    110          
    111          // Variables for MAX list size

   \                                 In  segment CODE_C, align 1
    112          CONST deviceTableIndex_t gNWK_MAX_DEVICE_LIST = NWK_MAX_DEVICES;
   \                     gNWK_MAX_DEVICE_LIST:
   \   000000   15           DB 21
    113          
    114          // Variables for MAX Sleeping End Devices

   \                                 In  segment CODE_C, align 1
    115          CONST uint8 gNWK_MAX_SLEEPING_END_DEVICES = NWK_MAX_DEVICES - NWK_MAX_ROUTERS;
   \                     gNWK_MAX_SLEEPING_END_DEVICES:
   \   000000   0F           DB 15
    116          
    117          // Variables for MAX data buffer levels

   \                                 In  segment CODE_C, align 1
    118          CONST uint8 gNWK_MAX_DATABUFS_WAITING = NWK_MAX_DATABUFS_WAITING;
   \                     gNWK_MAX_DATABUFS_WAITING:
   \   000000   08           DB 8

   \                                 In  segment CODE_C, align 1
    119          CONST uint8 gNWK_MAX_DATABUFS_SCHEDULED = NWK_MAX_DATABUFS_SCHEDULED;
   \                     gNWK_MAX_DATABUFS_SCHEDULED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    120          CONST uint8 gNWK_MAX_DATABUFS_CONFIRMED = NWK_MAX_DATABUFS_CONFIRMED;
   \                     gNWK_MAX_DATABUFS_CONFIRMED:
   \   000000   05           DB 5

   \                                 In  segment CODE_C, align 1
    121          CONST uint8 gNWK_MAX_DATABUFS_TOTAL = NWK_MAX_DATABUFS_TOTAL;
   \                     gNWK_MAX_DATABUFS_TOTAL:
   \   000000   0C           DB 12
    122          

   \                                 In  segment CODE_C, align 1
    123          CONST uint8 gNWK_INDIRECT_CNT_RTG_TMR = NWK_INDIRECT_CNT_RTG_TMR;
   \                     gNWK_INDIRECT_CNT_RTG_TMR:
   \   000000   01           DB 1

   \                                 In  segment CODE_C, align 1
    124          CONST uint8 gNWK_INDIRECT_MSG_MAX_PER = NWK_INDIRECT_MSG_MAX_PER;
   \                     gNWK_INDIRECT_MSG_MAX_PER:
   \   000000   03           DB 3

   \                                 In  segment CODE_C, align 1
    125          CONST uint8 gNWK_INDIRECT_MSG_MAX_ALL = NWK_INDIRECT_MSG_MAX_ALL;
   \                     gNWK_INDIRECT_MSG_MAX_ALL:
   \   000000   09           DB 9
    126          
    127          // change this if using a different stack profile...
    128          // Cskip array

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    129          uint16 *Cskip;
   \                     Cskip:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    130          
    131          #if ( STACK_PROFILE_ID == ZIGBEEPRO_PROFILE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    132            uint8 CskipRtrs[1] = {0};
   \                     CskipRtrs:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133            uint8 CskipChldrn[1] = {0};
   \                     CskipChldrn:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134          #elif ( STACK_PROFILE_ID == HOME_CONTROLS )
    135            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {6,6,6,6,6,0};
    136            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {20,20,20,20,20,0};
    137          #elif ( STACK_PROFILE_ID == GENERIC_STAR )
    138            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    139            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    140          #elif ( STACK_PROFILE_ID == NETWORK_SPECIFIC )
    141            uint8 CskipRtrs[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    142            uint8 CskipChldrn[MAX_NODE_DEPTH+1] = {5,5,5,5,5,0};
    143          #endif // STACK_PROFILE_ID
    144          
    145          // Minimum lqi value that is required for association

   \                                 In  segment XDATA_I, align 1, keep-with-next
    146          uint8 gMIN_TREE_LINK_COST = MIN_LQI_COST_3;
   \                     gMIN_TREE_LINK_COST:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for gMIN_TREE_LINK_COST>`
   \   000001                REQUIRE __INIT_XDATA_I
    147          
    148          // Statically defined Associated Device List

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          associated_devices_t AssociatedDevList[NWK_MAX_DEVICES];
   \                     AssociatedDevList:
   \   000000                DS 462
   \   0001CE                REQUIRE __INIT_XDATA_Z
    150          
    151          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )

   \                                 In  segment CODE_C, align 1
    152            CONST uint16 gNWK_MIN_ROUTER_CHILDREN = NWK_MIN_ROUTER_CHILDREN;
   \                     gNWK_MIN_ROUTER_CHILDREN:
   \   000000   0000         DW 0

   \                                 In  segment CODE_C, align 1
    153            CONST uint16 gNWK_MIN_ENDDEVICE_CHILDREN = NWK_MIN_ENDDEVICE_CHILDREN;
   \                     gNWK_MIN_ENDDEVICE_CHILDREN:
   \   000000   0000         DW 0
    154          #else
    155            CONST uint16 gNWK_MIN_ROUTER_CHILDREN = 0;
    156            CONST uint16 gNWK_MIN_ENDDEVICE_CHILDREN = 0;
    157          #endif
    158          

   \                                 In  segment CODE_C, align 1
    159          CONFIG_ITEM rtgTableIndex_t gMAX_RTG_ENTRIES = MAX_RTG_ENTRIES;
   \                     gMAX_RTG_ENTRIES:
   \   000000   28           DB 40

   \                                 In  segment CODE_C, align 1
    160          CONFIG_ITEM srcRtgTableIndex_t gMAX_RTG_SRC_ENTRIES = MAX_RTG_SRC_ENTRIES;
   \                     gMAX_RTG_SRC_ENTRIES:
   \   000000   0C           DB 12

   \                                 In  segment CODE_C, align 1
    161          CONFIG_ITEM rreqTableIndex_t gMAX_RREQ_ENTRIES = MAX_RREQ_ENTRIES;
   \                     gMAX_RREQ_ENTRIES:
   \   000000   08           DB 8
    162          

   \                                 In  segment CODE_C, align 1
    163          CONFIG_ITEM neighborTableIndex_t gMAX_NEIGHBOR_ENTRIES = MAX_NEIGHBOR_ENTRIES;
   \                     gMAX_NEIGHBOR_ENTRIES:
   \   000000   10           DB 16
    164          
    165           // Table of neighboring nodes (not including child nodes)

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    166          neighborEntry_t neighborTable[MAX_NEIGHBOR_ENTRIES];
   \                     neighborTable:
   \   000000                DS 368
   \   000170                REQUIRE __INIT_XDATA_Z
    167          

   \                                 In  segment CODE_C, align 1
    168          CONST uint8 gMAX_SOURCE_ROUTE = MAX_SOURCE_ROUTE;
   \                     gMAX_SOURCE_ROUTE:
   \   000000   0C           DB 12
    169          

   \                                 In  segment CODE_C, align 1
    170          CONST uint8 gMAX_BROADCAST_QUEUED = MAX_BROADCAST_QUEUED;
   \                     gMAX_BROADCAST_QUEUED:
   \   000000   0A           DB 10
    171          

   \                                 In  segment CODE_C, align 1
    172          CONST uint8 gLINK_DOWN_TRIGGER = LINK_DOWN_TRIGGER;
   \                     gLINK_DOWN_TRIGGER:
   \   000000   03           DB 3
    173          

   \                                 In  segment CODE_C, align 1
    174          CONST uint8 gGOOD_LINK_COST = GOOD_LINK_COST;
   \                     gGOOD_LINK_COST:
   \   000000   03           DB 3
    175          

   \                                 In  segment CODE_C, align 1
    176          CONST uint8 gMAX_PASSIVE_ACK_CNT = MAX_PASSIVE_ACK_CNT;
   \                     gMAX_PASSIVE_ACK_CNT:
   \   000000   08           DB 8
    177          
    178          // Routing table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    179          rtgEntry_t rtgTable[MAX_RTG_ENTRIES];
   \                     rtgTable:
   \   000000                DS 280
   \   000118                REQUIRE __INIT_XDATA_Z
    180          
    181          #if defined ( ZIGBEE_SOURCE_ROUTING ) || defined ( ZBIT )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    182            rtgSrcEntry_t rtgSrcTable[MAX_RTG_SRC_ENTRIES];
   \                     rtgSrcTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    183            uint16 rtgSrcRelayList[MAX_SOURCE_ROUTE];
   \                     rtgSrcRelayList:
   \   000000                DS 24
   \   000018                REQUIRE __INIT_XDATA_Z
    184          #endif
    185          
    186          // Table of current RREQ packets in the network

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    187          rtDiscEntry_t rtDiscTable[MAX_RREQ_ENTRIES];
   \                     rtDiscTable:
   \   000000                DS 64
   \   000040                REQUIRE __INIT_XDATA_Z
    188          
    189          // Table of data broadcast packets currently in circulation.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    190          bcastEntry_t bcastTable[MAX_BCAST];
   \                     bcastTable:
   \   000000                DS 72
   \   000048                REQUIRE __INIT_XDATA_Z
    191          
    192          // These 2 arrays are to be used as an array of struct { uint8, uint32 }.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    193          uint8 bcastHoldHandle[MAX_BCAST];
   \                     bcastHoldHandle:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    194          uint32 bcastHoldAckMask[MAX_BCAST];
   \                     bcastHoldAckMask:
   \   000000                DS 36
   \   000024                REQUIRE __INIT_XDATA_Z
    195          

   \                                 In  segment CODE_C, align 1
    196          CONFIG_ITEM bcastTableIndex_t gMAX_BCAST = MAX_BCAST;
   \                     gMAX_BCAST:
   \   000000   09           DB 9
    197          
    198          // For tree addressing, this switch allows the allocation of a
    199          // router address to an end device when end device address are
    200          // all used up.  If this option is enabled, address space
    201          // could be limited.

   \                                 In  segment CODE_C, align 1
    202          CONST uint8 gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE = FALSE;
   \                     gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE:
   \   000000   00           DB 0
    203          
    204          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING ) || defined ( ZBIT )
    205          // number of link status periods after the last received address conflict report
    206          // (network status command)

   \                                 In  segment CODE_C, align 1
    207          CONST uint8 gNWK_CONFLICTED_ADDR_EXPIRY_TIME = NWK_CONFLICTED_ADDR_EXPIRY_TIME;
   \                     gNWK_CONFLICTED_ADDR_EXPIRY_TIME:
   \   000000   04           DB 4
    208          #endif
    209          
    210          #if defined ( ZIGBEE_FREQ_AGILITY ) || defined ( ZBIT )

   \                                 In  segment CODE_C, align 1
    211          CONST uint8 gNWK_FREQ_AGILITY_ALL_MAC_ERRS = NWK_FREQ_AGILITY_ALL_MAC_ERRS;
   \                     gNWK_FREQ_AGILITY_ALL_MAC_ERRS:
   \   000000   00           DB 0
    212          #endif
    213          
    214          // The time limited to one MTO RReq (Concentrator Announce) in milliseconds.

   \                                 In  segment CODE_C, align 1
    215          CONST uint16 gMTO_RREQ_LIMIT_TIME = MTO_RREQ_LIMIT_TIME;
   \                     gMTO_RREQ_LIMIT_TIME:
   \   000000   E803         DW 1000
    216          
    217          // The number of seconds a MTO routing entry will last.

   \                                 In  segment CODE_C, align 1
    218          CONST uint8 gMTO_ROUTE_EXPIRY_TIME = MTO_ROUTE_EXPIRY_TIME;
   \                     gMTO_ROUTE_EXPIRY_TIME:
   \   000000   FF           DB 255
    219          
    220          // Route Discovery Request Default Radius

   \                                 In  segment CODE_C, align 1
    221          CONST uint8 gDEFAULT_ROUTE_REQUEST_RADIUS = DEFAULT_ROUTE_REQUEST_RADIUS;
   \                     gDEFAULT_ROUTE_REQUEST_RADIUS:
   \   000000   1E           DB 30
    222          
    223          // Network message radius

   \                                 In  segment CODE_C, align 1
    224          CONST uint8 gDEF_NWK_RADIUS = DEF_NWK_RADIUS;
   \                     gDEF_NWK_RADIUS:
   \   000000   1E           DB 30
    225          
    226          #if ( ZSTACK_ROUTER_BUILD ) || defined ( ZBIT )

   \                                 In  segment CODE_C, align 1
    227          CONST uint16 gLINK_STATUS_JITTER_MASK = LINK_STATUS_JITTER_MASK;
   \                     gLINK_STATUS_JITTER_MASK:
   \   000000   7F00         DW 127
    228          #endif
    229          
    230          // Maximum number of devices either aged out or not recognized as child

   \                                 In  segment CODE_C, align 1
    231          CONST uint8 gMAX_NOT_MYCHILD_DEVICES = MAX_NOT_MYCHILD_DEVICES;
   \                     gMAX_NOT_MYCHILD_DEVICES:
   \   000000   05           DB 5
    232          
    233          // Child table Management timeout values

   \                                 In  segment CODE_C, align 1
    234          CONST uint16 gKEEPALIVE_TIMEOUT_MAX = KEEPALIVE_TIMEOUT_MAX;
   \                     gKEEPALIVE_TIMEOUT_MAX:
   \   000000   3C00         DW 60

   \                                 In  segment CODE_C, align 1
    235          CONST uint16 gTIMEOUT_COUNTER_MAX = TIMEOUT_COUNTER_MAX;
   \                     gTIMEOUT_COUNTER_MAX:
   \   000000   3C00         DW 60
    236          
    237          // This table stores devices that have been aged out by the Child Aging Table
    238          // mechanism or have never been a child of this device

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    239          nwkNotMyChild_t notMyChildList[MAX_NOT_MYCHILD_DEVICES];
   \                     notMyChildList:
   \   000000                DS 20
   \   000014                REQUIRE __INIT_XDATA_Z
    240          

   \                                 In  segment CODE_C, align 1
    241          CONST uint32 gMAX_NWK_FRAMECOUNTER_CHANGES = MAX_NWK_FRAMECOUNTER_CHANGES;
   \                     gMAX_NWK_FRAMECOUNTER_CHANGES:
   \   000000   E8030000     DD 1000
    242          
    243          /*********************************************************************
    244           * APS GLOBAL VARIABLES
    245           */
    246          
    247          // The Maximum number of binding records
    248          // This number is defined in f8wConfig.cfg - change it there.

   \                                 In  segment CODE_C, align 1
    249          CONFIG_ITEM bindTableIndex_t gNWK_MAX_BINDING_ENTRIES = NWK_MAX_BINDING_ENTRIES;
   \                     gNWK_MAX_BINDING_ENTRIES:
   \   000000   04           DB 4
    250          
    251          #if defined ( REFLECTOR )
    252            // The Maximum number of cluster IDs in a binding record
    253            // This number is defined in f8wConfig.cfg - change it there.

   \                                 In  segment CODE_C, align 1
    254            CONFIG_ITEM uint8 gMAX_BINDING_CLUSTER_IDS = MAX_BINDING_CLUSTER_IDS;
   \                     gMAX_BINDING_CLUSTER_IDS:
   \   000000   04           DB 4
    255          

   \                                 In  segment CODE_C, align 1
    256            CONST uint16 gBIND_REC_SIZE = sizeof( BindingEntry_t );
   \                     gBIND_REC_SIZE:
   \   000000   0E00         DW 14
    257          
    258            // Binding Table

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    259            BindingEntry_t BindingTable[NWK_MAX_BINDING_ENTRIES];
   \                     BindingTable:
   \   000000                DS 56
   \   000038                REQUIRE __INIT_XDATA_Z
    260          #endif
    261          
    262          // Maximum number allowed in the groups table.

   \                                 In  segment CODE_C, align 1
    263          CONFIG_ITEM uint8 gAPS_MAX_GROUPS = APS_MAX_GROUPS;
   \                     gAPS_MAX_GROUPS:
   \   000000   10           DB 16
    264          
    265          // APS End Device Broadcast Table
    266          #if ( ZG_BUILD_ENDDEVICE_TYPE )
    267            apsEndDeviceBroadcast_t apsEndDeviceBroadcastTable[APS_MAX_ENDDEVICE_BROADCAST_ENTRIES];
    268            uint8 gAPS_MAX_ENDDEVICE_BROADCAST_ENTRIES = APS_MAX_ENDDEVICE_BROADCAST_ENTRIES;
    269          #endif
    270          
    271          /*********************************************************************
    272           * SECURITY GLOBAL VARIABLES
    273           */
    274          
    275          // This is the default pre-configured key,
    276          // change this to make a unique key
    277          // SEC_KEY_LEN is defined in ssp.h.
    278          
    279          #if defined ( DEFAULT_KEY )

   \                                 In  segment CODE_C, align 1
    280          CONFIG_ITEM uint8 defaultKey[SEC_KEY_LEN] = DEFAULT_KEY;
   \                     defaultKey:
   \   000000   01           DB 1
   \   000001   03           DB 3
   \   000002   05           DB 5
   \   000003   07           DB 7
   \   000004   09           DB 9
   \   000005   0B           DB 11
   \   000006   0D           DB 13
   \   000007   0F           DB 15
   \   000008   00           DB 0
   \   000009   02           DB 2
   \   00000A   04           DB 4
   \   00000B   06           DB 6
   \   00000C   08           DB 8
   \   00000D   0A           DB 10
   \   00000E   0C           DB 12
   \   00000F   0D           DB 13
    281          #else
    282          CONST uint8 defaultKey[SEC_KEY_LEN] =
    283          {
    284          #if defined ( APP_TP ) || defined ( APP_TP2 )
    285            // Key for ZigBee Conformance Testing
    286            0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb,
    287            0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa
    288          #else
    289            // Key for In-House Testing
    290            0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
    291            0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F
    292          #endif
    293          };
    294          #endif
    295          
    296          // This is the default pre-configured Trust Center Link key,
    297          // change this to make a unique key, SEC_KEY_LEN is defined in ssp.h.

   \                                 In  segment CODE_C, align 1
    298          CONST uint8 defaultTCLinkKey[SEC_KEY_LEN] = DEFAULT_TC_LINK_KEY;
   \                     defaultTCLinkKey:
   \   000000   5A           DB 90
   \   000001   69           DB 105
   \   000002   67           DB 103
   \   000003   42           DB 66
   \   000004   65           DB 101
   \   000005   65           DB 101
   \   000006   41           DB 65
   \   000007   6C           DB 108
   \   000008   6C           DB 108
   \   000009   69           DB 105
   \   00000A   61           DB 97
   \   00000B   6E           DB 110
   \   00000C   63           DB 99
   \   00000D   65           DB 101
   \   00000E   30           DB 48
   \   00000F   39           DB 57
    299          
    300          /*********************************************************************
    301           * GLOBAL VARIABLES - Statistics
    302           */
    303          
    304          #if defined ( FEATURE_PACKET_FILTER_STATS )
    305            uint32 apsInvalidPackets = 0;
    306            uint32 apsSecurityFailures = 0;
    307            uint32 nwkInvalidPackets = 0;
    308            uint32 nwkSecurityFailures = 0;
    309          #endif
    310          
    311          /*********************************************************************
    312           * STATUS STRINGS
    313           */
    314          #if defined ( LCD_SUPPORTED )

   \                                 In  segment XDATA_ROM_C, align 1
    315            const char PingStr[]         = "Ping Rcvd from";
   \                     PingStr:
   \   000000   50696E67     DB "Ping Rcvd from"
   \            20526376
   \            64206672
   \            6F6D00  

   \                                 In  segment XDATA_ROM_C, align 1
    316            const char AssocCnfStr[]     = "Assoc Cnf";
   \                     AssocCnfStr:
   \   000000   4173736F     DB "Assoc Cnf"
   \            6320436E
   \            6600    

   \                                 In  segment XDATA_ROM_C, align 1
    317            const char SuccessStr[]      = "Success";
   \                     SuccessStr:
   \   000000   53756363     DB "Success"
   \            65737300

   \                                 In  segment XDATA_ROM_C, align 1
    318            const char EndDeviceStr[]    = "EndDevice:";
   \                     EndDeviceStr:
   \   000000   456E6444     DB "EndDevice:"
   \            65766963
   \            653A00  

   \                                 In  segment XDATA_ROM_C, align 1
    319            const char ParentStr[]       = "Parent:";
   \                     ParentStr:
   \   000000   50617265     DB "Parent:"
   \            6E743A00

   \                                 In  segment XDATA_ROM_C, align 1
    320            const char ZigbeeCoordStr[]  = "ZigBee Coord";
   \                     ZigbeeCoordStr:
   \   000000   5A696742     DB "ZigBee Coord"
   \            65652043
   \            6F6F7264
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    321            const char NetworkIDStr[]    = "Network ID:";
   \                     NetworkIDStr:
   \   000000   4E657477     DB "Network ID:"
   \            6F726B20
   \            49443A00

   \                                 In  segment XDATA_ROM_C, align 1
    322            const char RouterStr[]       = "Router:";
   \                     RouterStr:
   \   000000   526F7574     DB "Router:"
   \            65723A00

   \                                 In  segment XDATA_ROM_C, align 1
    323            const char OrphanRspStr[]    = "Orphan Response";
   \                     OrphanRspStr:
   \   000000   4F727068     DB "Orphan Response"
   \            616E2052
   \            6573706F
   \            6E736500

   \                                 In  segment XDATA_ROM_C, align 1
    324            const char SentStr[]         = "Sent";
   \                     SentStr:
   \   000000   53656E74     DB "Sent"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    325            const char FailedStr[]       = "Failed";
   \                     FailedStr:
   \   000000   4661696C     DB "Failed"
   \            656400  

   \                                 In  segment XDATA_ROM_C, align 1
    326            const char AssocRspFailStr[] = "Assoc Rsp fail";
   \                     AssocRspFailStr:
   \   000000   4173736F     DB "Assoc Rsp fail"
   \            63205273
   \            70206661
   \            696C00  

   \                                 In  segment XDATA_ROM_C, align 1
    327            const char AssocIndStr[]     = "Assoc Ind";
   \                     AssocIndStr:
   \   000000   4173736F     DB "Assoc Ind"
   \            6320496E
   \            6400    

   \                                 In  segment XDATA_ROM_C, align 1
    328            const char AssocCnfFailStr[] = "Assoc Cnf fail";
   \                     AssocCnfFailStr:
   \   000000   4173736F     DB "Assoc Cnf fail"
   \            6320436E
   \            66206661
   \            696C00  

   \                                 In  segment XDATA_ROM_C, align 1
    329            const char EnergyLevelStr[]  = "Energy Level";
   \                     EnergyLevelStr:
   \   000000   456E6572     DB "Energy Level"
   \            6779204C
   \            6576656C
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
    330            const char ScanFailedStr[]   = "Scan Failed";
   \                     ScanFailedStr:
   \   000000   5363616E     DB "Scan Failed"
   \            20466169
   \            6C656400
    331          #endif
    332          
    333          /*********************************************************************
    334           * @fn       nwk_globals_init()
    335           *
    336           * @brief
    337           *
    338           *   Initialize nwk layer globals.  These are the system defaults and
    339           *   should be changed by the user here.  The default definitions are
    340           *   defined in nwk.h or NLMEDE.h.
    341           *
    342           * @param   none
    343           *
    344           * @return  none
    345           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    346          void nwk_globals_init( void )
   \                     nwk_globals_init:
    347          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    348            AddrMgrInit( NWK_MAX_ADDRESSES );
   \   000004                ; Setup parameters for call to function AddrMgrInit
   \   000004   7A1A         MOV     R2,#0x1a
   \   000006   7B00         MOV     R3,#0x0
   \   000008   12....       LCALL   ??AddrMgrInit?relay
    349          
    350          #if !defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    351            if ( ZSTACK_ROUTER_BUILD )
    352            {
    353              // Initialize the Cskip Table
    354              Cskip = osal_mem_alloc(sizeof(uint16) *(MAX_NODE_DEPTH+1));
    355              RTG_FillCSkipTable(CskipChldrn, CskipRtrs, MAX_NODE_DEPTH, Cskip);
    356            }
    357          #endif
    358          
    359            // To compile out the Link Status Feature, set NWK_LINK_STATUS_PERIOD
    360            // to 0 (compiler flag).
    361            if ( ZSTACK_ROUTER_BUILD && NWK_LINK_STATUS_PERIOD )
    362            {
    363              NLME_InitLinkStatus();
   \   00000B                ; Setup parameters for call to function NLME_InitLinkStatus
   \   00000B   12....       LCALL   ??NLME_InitLinkStatus?relay
    364            }
    365          
    366          #if defined ( ZIGBEE_FREQ_AGILITY )
    367            NwkFreqAgilityInit();
   \   00000E                ; Setup parameters for call to function NwkFreqAgilityInit
   \   00000E   12....       LCALL   ??NwkFreqAgilityInit?relay
    368          #endif
    369          
    370          #if defined ( ZIGBEE_CHILD_AGING )
    371            if ( ( ZSTACK_ROUTER_BUILD ) && ( zgChildAgingEnable == TRUE ) )
   \   000011   90....       MOV     DPTR,#zgChildAgingEnable
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6401         XRL     A,#0x1
   \   000017   7003         JNZ     ??nwk_globals_init_0
    372            {
    373              // Set the function pointers for the Child Aging feature
    374              NwkInitChildAging();
   \   000019                ; Setup parameters for call to function NwkInitChildAging
   \   000019   12....       LCALL   ??NwkInitChildAging?relay
    375            }
    376          #endif  // ZIGBEE_CHILD_AGING
    377          }
   \                     ??nwk_globals_init_0:
   \   00001C   D083         POP     DPH
   \   00001E   D082         POP     DPL
   \   000020   02....       LJMP    ?BRET
    378          
    379          /*********************************************************************
    380           * @fn       NIB_init()
    381           *
    382           * @brief
    383           *
    384           *   Initialize attribute values in NIB
    385           *
    386           * @param   none
    387           *
    388           * @return  none
    389           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    390          void NIB_init()
   \                     NIB_init:
    391          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    392            _NIB.SequenceNum = LO_UINT16(osal_rand());
   \   000005                ; Setup parameters for call to function osal_rand
   \   000005   12....       LCALL   ??osal_rand?relay
   \   000008   EA           MOV     A,R2
   \   000009   90....       MOV     DPTR,#_NIB
   \   00000C   F0           MOVX    @DPTR,A
    393          
    394            _NIB.nwkProtocolVersion = ZB_PROT_VERS;
   \   00000D   90....       MOV     DPTR,#_NIB + 17
   \   000010   7402         MOV     A,#0x2
   \   000012   F0           MOVX    @DPTR,A
    395            _NIB.MaxDepth = MAX_NODE_DEPTH;
   \   000013   90....       MOV     DPTR,#_NIB + 4
   \   000016   7414         MOV     A,#0x14
   \   000018   F0           MOVX    @DPTR,A
    396          
    397          #if ( NWK_MODE == NWK_MODE_MESH )
    398            _NIB.beaconOrder = BEACON_ORDER_NO_BEACONS;
   \   000019   90....       MOV     DPTR,#_NIB + 40
   \   00001C   740F         MOV     A,#0xf
   \   00001E   F0           MOVX    @DPTR,A
    399            _NIB.superFrameOrder = BEACON_ORDER_NO_BEACONS;
   \   00001F   A3           INC     DPTR
   \   000020   F0           MOVX    @DPTR,A
    400          #endif
    401          
    402            // BROADCAST SETTINGS:
    403            // *******************
    404            //   Broadcast Delivery Time
    405            //     - set to multiples of 100ms
    406            //     - should be 500ms more than the retry time
    407            //       -  "retry time" = PassiveAckTimeout * (MaxBroadcastRetries + 1)
    408            //   Passive Ack Timeout
    409            //     - set to multiples of 100ms
    410            _NIB.BroadcastDeliveryTime = zgBcastDeliveryTime;
   \   000021   90....       MOV     DPTR,#zgBcastDeliveryTime
   \   000024   E0           MOVX    A,@DPTR
   \   000025   90....       MOV     DPTR,#_NIB + 7
   \   000028   F0           MOVX    @DPTR,A
    411            _NIB.PassiveAckTimeout     = zgPassiveAckTimeout;
   \   000029   90....       MOV     DPTR,#zgPassiveAckTimeout
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   90....       MOV     DPTR,#_NIB + 1
   \   000030   F0           MOVX    @DPTR,A
    412            _NIB.MaxBroadcastRetries   = zgMaxBcastRetires;
   \   000031   90....       MOV     DPTR,#zgMaxBcastRetires
   \   000034   E0           MOVX    A,@DPTR
   \   000035   90....       MOV     DPTR,#_NIB + 2
   \   000038   F0           MOVX    @DPTR,A
    413          
    414            _NIB.ReportConstantCost = 0;
   \   000039   90....       MOV     DPTR,#_NIB + 8
   \   00003C   E4           CLR     A
   \   00003D   F0           MOVX    @DPTR,A
    415            _NIB.RouteDiscRetries = 0;
   \   00003E   A3           INC     DPTR
   \   00003F   F0           MOVX    @DPTR,A
    416            _NIB.SecureAllFrames = USE_NWK_SECURITY;
   \   000040   90....       MOV     DPTR,#_NIB + 11
   \   000043   04           INC     A
   \   000044   F0           MOVX    @DPTR,A
    417            _NIB.nwkAllFresh = NWK_ALL_FRESH;
   \   000045   90....       MOV     DPTR,#_NIB + 104
   \   000048   F0           MOVX    @DPTR,A
    418          
    419            if ( ZG_SECURE_ENABLED )
    420            {
    421              _NIB.SecurityLevel = SECURITY_LEVEL;
   \   000049   90....       MOV     DPTR,#_NIB + 12
   \   00004C   7405         MOV     A,#0x5
   \   00004E   F0           MOVX    @DPTR,A
    422            }
    423            else
    424            {
    425              _NIB.SecurityLevel = 0;
    426            }
    427          
    428            _NIB.SymLink = TRUE;
   \   00004F   A3           INC     DPTR
   \   000050   7401         MOV     A,#0x1
   \   000052   F0           MOVX    @DPTR,A
    429          
    430            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   000053   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000056   E0           MOVX    A,@DPTR
   \   000057   90....       MOV     DPTR,#_NIB + 14
   \   00005A   F0           MOVX    @DPTR,A
    431          
    432            _NIB.TransactionPersistenceTime = zgIndirectMsgTimeout;
   \   00005B   90....       MOV     DPTR,#zgIndirectMsgTimeout
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   90....       MOV     DPTR,#_NIB + 15
   \   000062   F0           MOVX    @DPTR,A
   \   000063   A3           INC     DPTR
   \   000064   E4           CLR     A
   \   000065   F0           MOVX    @DPTR,A
    433          
    434            _NIB.RouteDiscoveryTime = zgRouteDiscoveryTime;
   \   000066   90....       MOV     DPTR,#zgRouteDiscoveryTime
   \   000069   E0           MOVX    A,@DPTR
   \   00006A   90....       MOV     DPTR,#_NIB + 18
   \   00006D   F0           MOVX    @DPTR,A
    435            _NIB.RouteExpiryTime = zgRouteExpiryTime;
   \   00006E   90....       MOV     DPTR,#zgRouteExpiryTime
   \   000071   E0           MOVX    A,@DPTR
   \   000072   90....       MOV     DPTR,#_NIB + 19
   \   000075   12....       LCALL   ?Subroutine1 & 0xFFFF
    436          
    437            _NIB.nwkDevAddress = INVALID_NODE_ADDR;
    438            _NIB.nwkLogicalChannel = 0;
   \                     ??CrossCallReturnLabel_0:
   \   000078   A3           INC     DPTR
   \   000079   E4           CLR     A
   \   00007A   12....       LCALL   ?Subroutine1 & 0xFFFF
    439            _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
    440            osal_memset( _NIB.nwkCoordExtAddress, 0, Z_EXTADDR_LEN );
   \                     ??CrossCallReturnLabel_1:
   \   00007D                ; Setup parameters for call to function osal_memset
   \   00007D   7C08         MOV     R4,#0x8
   \   00007F   7D00         MOV     R5,#0x0
   \   000081   7900         MOV     R1,#0x0
   \   000083   7A..         MOV     R2,#(_NIB + 25) & 0xff
   \   000085   7B..         MOV     R3,#((_NIB + 25) >> 8) & 0xff
   \   000087   12....       LCALL   ??osal_memset?relay
    441            _NIB.nwkPanId = INVALID_NODE_ADDR;
   \   00008A   90....       MOV     DPTR,#_NIB + 33
   \   00008D   74FE         MOV     A,#-0x2
   \   00008F   F0           MOVX    @DPTR,A
   \   000090   A3           INC     DPTR
   \   000091   04           INC     A
   \   000092   F0           MOVX    @DPTR,A
    442          
    443            osal_cpyExtAddr( _NIB.extendedPANID, zgExtendedPANID );
   \   000093                ; Setup parameters for call to function sAddrExtCpy
   \   000093   7C..         MOV     R4,#zgExtendedPANID & 0xff
   \   000095   7D..         MOV     R5,#(zgExtendedPANID >> 8) & 0xff
   \   000097   7A..         MOV     R2,#(_NIB + 53) & 0xff
   \   000099   7B..         MOV     R3,#((_NIB + 53) >> 8) & 0xff
   \   00009B   12....       LCALL   ??sAddrExtCpy?relay
    444          
    445            _NIB.nwkKeyLoaded = FALSE;
   \   00009E   90....       MOV     DPTR,#_NIB + 61
   \   0000A1   E4           CLR     A
   \   0000A2   F0           MOVX    @DPTR,A
    446          
    447          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    448            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_STOCHASTIC;
   \   0000A3   90....       MOV     DPTR,#_NIB + 96
   \   0000A6   7402         MOV     A,#0x2
   \   0000A8   F0           MOVX    @DPTR,A
    449            _NIB.nwkUniqueAddr = FALSE;
   \   0000A9   A3           INC     DPTR
   \   0000AA   E4           CLR     A
   \   0000AB   F0           MOVX    @DPTR,A
    450          #else
    451            _NIB.nwkAddrAlloc  = NWK_ADDRESSING_DISTRIBUTED;
    452            _NIB.nwkUniqueAddr = TRUE;
    453          #endif
    454          
    455            _NIB.nwkLinkStatusPeriod = NWK_LINK_STATUS_PERIOD;
   \   0000AC   A3           INC     DPTR
   \   0000AD   740F         MOV     A,#0xf
   \   0000AF   F0           MOVX    @DPTR,A
    456            _NIB.nwkRouterAgeLimit = NWK_ROUTE_AGE_LIMIT;
   \   0000B0   A3           INC     DPTR
   \   0000B1   7403         MOV     A,#0x3
   \   0000B3   F0           MOVX    @DPTR,A
    457          
    458            //MTO and source routing
    459            _NIB.nwkConcentratorDiscoveryTime = zgConcentratorDiscoveryTime;
   \   0000B4   90....       MOV     DPTR,#zgConcentratorDiscoveryTime
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   90....       MOV     DPTR,#_NIB + 102
   \   0000BB   F0           MOVX    @DPTR,A
    460            _NIB.nwkIsConcentrator = zgConcentratorEnable;
   \   0000BC   90....       MOV     DPTR,#zgConcentratorEnable
   \   0000BF   E0           MOVX    A,@DPTR
   \   0000C0   90....       MOV     DPTR,#_NIB + 101
   \   0000C3   F0           MOVX    @DPTR,A
    461            _NIB.nwkConcentratorRadius = zgConcentratorRadius;
   \   0000C4   90....       MOV     DPTR,#zgConcentratorRadius
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   90....       MOV     DPTR,#_NIB + 103
   \   0000CB   F0           MOVX    @DPTR,A
    462          
    463          #if defined ( ZIGBEE_MULTICAST )
    464            _NIB.nwkUseMultiCast = TRUE;
   \   0000CC   90....       MOV     DPTR,#_NIB + 100
   \   0000CF   7401         MOV     A,#0x1
   \   0000D1   F0           MOVX    @DPTR,A
    465          #else
    466            _NIB.nwkUseMultiCast = FALSE;
    467          #endif
    468          
    469          #if defined ( NV_RESTORE )
    470            if ( osal_nv_read( ZCD_NV_NWKMGR_ADDR, 0, sizeof( _NIB.nwkManagerAddr ),
    471                               &_NIB.nwkManagerAddr ) != SUCCESS )
   \   0000D2                ; Setup parameters for call to function osal_nv_read
   \   0000D2   75....       MOV     ?V0 + 0,#(_NIB + 105) & 0xff
   \   0000D5   75....       MOV     ?V0 + 1,#((_NIB + 105) >> 8) & 0xff
   \   0000D8   78..         MOV     R0,#?V0 + 0
   \   0000DA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DD   75..02       MOV     ?V0 + 0,#0x2
   \   0000E0   75..00       MOV     ?V0 + 1,#0x0
   \   0000E3   78..         MOV     R0,#?V0 + 0
   \   0000E5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E8   7C00         MOV     R4,#0x0
   \   0000EA   7D00         MOV     R5,#0x0
   \   0000EC   7A89         MOV     R2,#-0x77
   \   0000EE   7B00         MOV     R3,#0x0
   \   0000F0   12....       LCALL   ??osal_nv_read?relay
   \   0000F3   7404         MOV     A,#0x4
   \   0000F5   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F8   E9           MOV     A,R1
   \   0000F9   6007         JZ      ??NIB_init_0
    472          #endif
    473            {
    474              _NIB.nwkManagerAddr = 0x0000;
   \   0000FB   90....       MOV     DPTR,#_NIB + 105
   \   0000FE   E4           CLR     A
   \   0000FF   F0           MOVX    @DPTR,A
   \   000100   A3           INC     DPTR
   \   000101   F0           MOVX    @DPTR,A
    475            }
    476          
    477            _NIB.nwkUpdateId = 0;
   \                     ??NIB_init_0:
   \   000102   90....       MOV     DPTR,#_NIB + 109
   \   000105   E4           CLR     A
   \   000106   F0           MOVX    @DPTR,A
    478            _NIB.nwkTotalTransmissions = 0;
   \   000107   90....       MOV     DPTR,#_NIB + 107
   \   00010A   F0           MOVX    @DPTR,A
   \   00010B   A3           INC     DPTR
   \   00010C   F0           MOVX    @DPTR,A
    479          
    480            if ( ZSTACK_ROUTER_BUILD )
    481            {
    482          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
    483              NLME_InitStochasticAddressing();
   \   00010D                ; Setup parameters for call to function NLME_InitStochasticAddressing
   \   00010D   12....       LCALL   ??NLME_InitStochasticAddressing?relay
    484          #else
    485              NLME_InitTreeAddressing();
    486          #endif
    487            }
    488          }
   \   000110                REQUIRE ?Subroutine0
   \   000110                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   74FE         MOV     A,#-0x2
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   04           INC     A
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    489          
    490          /*********************************************************************
    491           * @fn       nwk_Status()
    492           *
    493           * @brief
    494           *
    495           *   Status report.
    496           *
    497           * @param   statusCode
    498           * @param   statusValue
    499           *
    500           * @return  none
    501           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    502          void nwk_Status( uint16 statusCode, uint16 statusValue )
   \                     nwk_Status:
    503          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
    504          #if defined ( LCD_SUPPORTED )
    505            switch ( statusCode )
   \   000009   8E..         MOV     ?V0 + 4,R6
   \   00000B   8F..         MOV     ?V0 + 5,R7
   \   00000D   E4           CLR     A
   \   00000E   F5..         MOV     ?V0 + 6,A
   \   000010   F5..         MOV     ?V0 + 7,A
   \   000012   8A..         MOV     ?V0 + 0,R2
   \   000014   8B..         MOV     ?V0 + 1,R3
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for nwk_Status>_0`:
   \   00001B   0000         DW        0
   \   00001D   0800         DW        8
   \   00001F   0200         DW        2
   \   000021   ....         DW        ??nwk_Status_0
   \   000023   0400         DW        4
   \   000025   ....         DW        ??nwk_Status_1
   \   000027   0500         DW        5
   \   000029   ....         DW        ??nwk_Status_2
   \   00002B   0600         DW        6
   \   00002D   ....         DW        ??nwk_Status_3
   \   00002F   0700         DW        7
   \   000031   ....         DW        ??nwk_Status_4
   \   000033   0110         DW        4097
   \   000035   ....         DW        ??nwk_Status_5
   \   000037   0310         DW        4099
   \   000039   ....         DW        ??nwk_Status_6
   \   00003B   0410         DW        4100
   \   00003D   ....         DW        ??nwk_Status_7
   \   00003F   ....         DW        ??nwk_Status_8
    506            {
    507              case NWK_STATUS_COORD_ADDR:
    508                if ( ZSTACK_ROUTER_BUILD )
    509                {
    510                  HalLcdWriteString( (char*)ZigbeeCoordStr, HAL_LCD_LINE_1 );
   \                     ??nwk_Status_2:
   \   000041                ; Setup parameters for call to function HalLcdWriteString
   \   000041   7901         MOV     R1,#0x1
   \   000043   7A..         MOV     R2,#ZigbeeCoordStr & 0xff
   \   000045   7B..         MOV     R3,#(ZigbeeCoordStr >> 8) & 0xff
   \   000047   12....       LCALL   ??HalLcdWriteString?relay
    511                  HalLcdWriteStringValue( (char*)NetworkIDStr, statusValue, 16, HAL_LCD_LINE_2 );
   \   00004A                ; Setup parameters for call to function HalLcdWriteStringValue
   \   00004A   75..02       MOV     ?V0 + 0,#0x2
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000052   7910         MOV     R1,#0x10
   \   000054   EE           MOV     A,R6
   \   000055   FC           MOV     R4,A
   \   000056   EF           MOV     A,R7
   \   000057   FD           MOV     R5,A
   \   000058   7A..         MOV     R2,#NetworkIDStr & 0xff
   \   00005A   7B..         MOV     R3,#(NetworkIDStr >> 8) & 0xff
   \   00005C   12....       LCALL   ??HalLcdWriteStringValue?relay
   \   00005F   7401         MOV     A,#0x1
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
    512                  BuzzerControl( BUZZER_BLIP );
   \   000064                ; Setup parameters for call to function BuzzerControl
   \   000064   7902         MOV     R1,#0x2
   \   000066   12....       LCALL   ??BuzzerControl?relay
    513                }
    514                break;
   \   000069   8079         SJMP    ??nwk_Status_8
    515          
    516              case NWK_STATUS_ROUTER_ADDR:
    517                if ( ZSTACK_ROUTER_BUILD )
    518                {
    519                  HalLcdWriteStringValue( (char*)RouterStr, statusValue, 16, HAL_LCD_LINE_1 );
   \                     ??nwk_Status_3:
   \   00006B                ; Setup parameters for call to function HalLcdWriteStringValue
   \   00006B   75..01       MOV     ?V0 + 0,#0x1
   \   00006E   78..         MOV     R0,#?V0 + 0
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000073   7910         MOV     R1,#0x10
   \   000075   7A..         MOV     R2,#RouterStr & 0xff
   \   000077   7B..         MOV     R3,#(RouterStr >> 8) & 0xff
   \   000079   802A         SJMP    ??nwk_Status_9
    520                }
    521                break;
    522          
    523              case NWK_STATUS_ORPHAN_RSP:
    524                if ( ZSTACK_ROUTER_BUILD )
    525                {
    526                  if ( statusValue == ZSuccess )
   \                     ??nwk_Status_4:
   \   00007B   7A..         MOV     R2,#OrphanRspStr & 0xff
   \   00007D   7B..         MOV     R3,#(OrphanRspStr >> 8) & 0xff
   \   00007F   EE           MOV     A,R6
   \   000080   4F           ORL     A,R7
   \   000081   7006         JNZ     ??nwk_Status_10
    527                    HalLcdWriteScreen( (char*)OrphanRspStr, (char*)SentStr );
   \   000083                ; Setup parameters for call to function HalLcdWriteScreen
   \   000083   7C..         MOV     R4,#SentStr & 0xff
   \   000085   7D..         MOV     R5,#(SentStr >> 8) & 0xff
   \   000087   8058         SJMP    ??nwk_Status_11
    528                  else
    529                    HalLcdWriteScreen( (char*)OrphanRspStr, (char*)FailedStr );
   \                     ??nwk_Status_10:
   \   000089                ; Setup parameters for call to function HalLcdWriteScreen
   \   000089   7C..         MOV     R4,#FailedStr & 0xff
   \   00008B   7D..         MOV     R5,#(FailedStr >> 8) & 0xff
   \   00008D   8052         SJMP    ??nwk_Status_11
    530                }
    531                break;
    532          
    533              case NWK_ERROR_ASSOC_RSP:
    534                if ( ZSTACK_ROUTER_BUILD )
    535                {
    536                  HalLcdWriteString( (char*)AssocRspFailStr, HAL_LCD_LINE_1 );
   \                     ??nwk_Status_5:
   \   00008F                ; Setup parameters for call to function HalLcdWriteString
   \   00008F   7901         MOV     R1,#0x1
   \   000091   7A..         MOV     R2,#AssocRspFailStr & 0xff
   \   000093   7B..         MOV     R3,#(AssocRspFailStr >> 8) & 0xff
   \   000095   8023         SJMP    ??nwk_Status_12
    537                  HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
    538                }
    539                break;
    540          
    541              case NWK_STATUS_ED_ADDR:
    542                if ( ZSTACK_END_DEVICE_BUILD )
    543                {
    544                  HalLcdWriteStringValue( (char*)EndDeviceStr, statusValue, 16, HAL_LCD_LINE_1 );
    545                }
    546                break;
    547          
    548              case NWK_STATUS_PARENT_ADDR:
    549                      HalLcdWriteStringValue( (char*)ParentStr, statusValue, 16, HAL_LCD_LINE_2 );
   \                     ??nwk_Status_1:
   \   000097                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000097   75..02       MOV     ?V0 + 0,#0x2
   \   00009A   78..         MOV     R0,#?V0 + 0
   \   00009C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009F   7910         MOV     R1,#0x10
   \   0000A1   7A..         MOV     R2,#ParentStr & 0xff
   \   0000A3   7B..         MOV     R3,#(ParentStr >> 8) & 0xff
   \                     ??nwk_Status_9:
   \   0000A5   12....       LCALL   ??HalLcdWriteStringValue?relay
   \   0000A8   8028         SJMP    ??nwk_Status_13
    550                break;
    551          
    552              case NWK_STATUS_ASSOC_CNF:
    553                HalLcdWriteScreen( (char*)AssocCnfStr, (char*)SuccessStr );
   \                     ??nwk_Status_0:
   \   0000AA                ; Setup parameters for call to function HalLcdWriteScreen
   \   0000AA   7C..         MOV     R4,#SuccessStr & 0xff
   \   0000AC   7D..         MOV     R5,#(SuccessStr >> 8) & 0xff
   \   0000AE   7A..         MOV     R2,#AssocCnfStr & 0xff
   \   0000B0   7B..         MOV     R3,#(AssocCnfStr >> 8) & 0xff
   \   0000B2   802D         SJMP    ??nwk_Status_11
    554                break;
    555          
    556              case NWK_ERROR_ASSOC_CNF_DENIED:
    557                HalLcdWriteString((char*)AssocCnfFailStr, HAL_LCD_LINE_1 );
   \                     ??nwk_Status_6:
   \   0000B4                ; Setup parameters for call to function HalLcdWriteString
   \   0000B4   7901         MOV     R1,#0x1
   \   0000B6   7A..         MOV     R2,#AssocCnfFailStr & 0xff
   \   0000B8   7B..         MOV     R3,#(AssocCnfFailStr >> 8) & 0xff
   \                     ??nwk_Status_12:
   \   0000BA   12....       LCALL   ??HalLcdWriteString?relay
    558                HalLcdWriteValue( (uint32)(statusValue), 16, HAL_LCD_LINE_2 );
   \   0000BD                ; Setup parameters for call to function HalLcdWriteValue
   \   0000BD   75..02       MOV     ?V0 + 0,#0x2
   \   0000C0   78..         MOV     R0,#?V0 + 0
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C5   7910         MOV     R1,#0x10
   \   0000C7   AA..         MOV     R2,?V0 + 4
   \   0000C9   AB..         MOV     R3,?V0 + 5
   \   0000CB   AC..         MOV     R4,?V0 + 6
   \   0000CD   AD..         MOV     R5,?V0 + 7
   \   0000CF   12....       LCALL   ??HalLcdWriteValue?relay
   \                     ??nwk_Status_13:
   \   0000D2   7401         MOV     A,#0x1
   \   0000D4   12....       LCALL   ?DEALLOC_XSTACK8
    559                break;
   \   0000D7   800B         SJMP    ??nwk_Status_8
    560          
    561              case NWK_ERROR_ENERGY_SCAN_FAILED:
    562                HalLcdWriteScreen( (char*)EnergyLevelStr, (char*)ScanFailedStr );
   \                     ??nwk_Status_7:
   \   0000D9                ; Setup parameters for call to function HalLcdWriteScreen
   \   0000D9   7C..         MOV     R4,#ScanFailedStr & 0xff
   \   0000DB   7D..         MOV     R5,#(ScanFailedStr >> 8) & 0xff
   \   0000DD   7A..         MOV     R2,#EnergyLevelStr & 0xff
   \   0000DF   7B..         MOV     R3,#(EnergyLevelStr >> 8) & 0xff
   \                     ??nwk_Status_11:
   \   0000E1   12....       LCALL   ??HalLcdWriteScreen?relay
    563                break;
    564            }
    565          #endif
    566          }
   \                     ??nwk_Status_8:
   \   0000E4   7F08         MOV     R7,#0x8
   \   0000E6   02....       LJMP    ?BANKED_LEAVE_XDATA
    567          
    568          /*********************************************************************
    569           * @fn       nwk_UpdateStatistics()
    570           *
    571           * @brief   Update network layer statistic counters
    572           *
    573           * @param   statisticCode
    574           *
    575           * @return  none
    576           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    577          void nwk_UpdateStatistics( uint8 statisticCode )
   \                     nwk_UpdateStatistics:
    578          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    579          #if defined ( FEATURE_PACKET_FILTER_STATS )
    580            switch ( statisticCode )
    581            {
    582              case STAT_NWK_INVALID_PACKET:
    583                nwkInvalidPackets++;
    584                break;
    585          
    586              case STAT_NWK_SECURITY_FAILURE:
    587                nwkInvalidPackets++;
    588                nwkSecurityFailures++;
    589                break;
    590          
    591              case STAT_APS_INVALID_PACKET:
    592                apsInvalidPackets++;
    593                break;
    594          
    595              case STAT_APS_SECURITY_FAILURE:
    596                apsSecurityFailures++;
    597                break;
    598            }
    599          #endif
    600          }
   \   000000   02....       LJMP    ?BRET
    601          
    602          /*********************************************************************
    603           * @fn      nwk_adjustDelay()
    604           *
    605           * @brief   Adjust the retransmit delay. Modify this function to
    606           *          change the default delay behavior.
    607           *
    608           * @param   existingDelay - default delay
    609           * @param   confirmStatus - data confirm status
    610           * @param   bufOptions - network buffer options
    611           *
    612           * @return  delay value - this number is the number of
    613           *          network event ticks (~2ms).
    614           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    615          uint16 nwk_adjustDelay( uint16 existingDelay, uint8 confirmStatus, uint16 bufOptions )
   \                     nwk_adjustDelay:
    616          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    617            uint16 result = existingDelay;
   \   000007   EA           MOV     A,R2
   \   000008   F8           MOV     R0,A
   \   000009   EB           MOV     A,R3
   \   00000A   F9           MOV     R1,A
    618            uint16 mask = 0;       // Random mask
    619            uint16 startValue = 0; // Start value
    620          
    621            switch ( confirmStatus )
   \   00000B   EE           MOV     A,R6
   \   00000C   241F         ADD     A,#0x1f
   \   00000E   6004         JZ      ??nwk_adjustDelay_0
   \   000010   24F0         ADD     A,#-0x10
   \   000012   7010         JNZ     ??nwk_adjustDelay_1
    622            {
    623              case ZMacTransactionOverFlow:
    624              case ZMacChannelAccessFailure:
    625                if ( bufOptions & (HANDLE_DELAY | HANDLE_HI_DELAY) )
   \                     ??nwk_adjustDelay_0:
   \   000014   EC           MOV     A,R4
   \   000015   5430         ANL     A,#0x30
   \   000017   600B         JZ      ??nwk_adjustDelay_1
    626                {
    627                  // Delay 4 - 18 ms
    628                  mask = 0x0007;
    629                  startValue = 2;
    630                }
    631                break;
    632          
    633              case ZNwkNoRoute:
    634              case ZMAC_NO_RESOURCES:
    635              case ZMacNoACK:
    636              default:
    637                // leave default delay
    638                mask = 0;
    639                startValue = 0;
    640                break;
    641            }
    642          
    643            if ( (mask > 0) && (startValue > 0) )
    644            {
    645              result = (osal_rand() & mask) + startValue;
   \   000019                ; Setup parameters for call to function osal_rand
   \   000019   12....       LCALL   ??osal_rand?relay
   \   00001C   EA           MOV     A,R2
   \   00001D   5407         ANL     A,#0x7
   \   00001F   7900         MOV     R1,#0x0
   \   000021   2402         ADD     A,#0x2
   \   000023   F8           MOV     R0,A
    646            }
    647          
    648            return ( result );
   \                     ??nwk_adjustDelay_1:
   \   000024   E8           MOV     A,R0
   \   000025   FA           MOV     R2,A
   \   000026   E9           MOV     A,R1
   \   000027   FB           MOV     R3,A
   \   000028   02....       LJMP    ?Subroutine0 & 0xFFFF
    649          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for gMIN_TREE_LINK_COST>`:
   \   000000   06           DB 6

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_globals_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_globals_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??NIB_init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NIB_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_Status?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_Status

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_UpdateStatistics?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_UpdateStatistics

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??nwk_adjustDelay?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    nwk_adjustDelay
    650          
    651          /*********************************************************************
    652          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0     14  NIB_init
                          0 0 10 -> NLME_InitStochasticAddressing
                          0 0 10 -> osal_memset
                          0 0 14 -> osal_nv_read
                          0 0 10 -> osal_rand
                          0 0 10 -> sAddrExtCpy
       0      0     17  nwk_Status
                          0 0 16 -> BuzzerControl
                          0 0 16 -> HalLcdWriteScreen
                          0 0 16 -> HalLcdWriteString
                          0 0 17 -> HalLcdWriteStringValue
                          0 0 17 -> HalLcdWriteValue
       0      0      0  nwk_UpdateStatistics
       0      0     10  nwk_adjustDelay
                          0 0 10 -> osal_rand
       2      0      0  nwk_globals_init
                          2 0  0 -> AddrMgrInit
                          2 0  0 -> NLME_InitLinkStatus
                          2 0  0 -> NwkFreqAgilityInit
                          2 0  0 -> NwkInitChildAging


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       1  ?<Initializer for gMIN_TREE_LINK_COST>
       6  ??NIB_init?relay
       6  ??nwk_Status?relay
       6  ??nwk_UpdateStatistics?relay
       6  ??nwk_adjustDelay?relay
       6  ??nwk_globals_init?relay
       5  ?Subroutine0
       9  ?Subroutine1
      15  AssocCnfFailStr
      10  AssocCnfStr
      10  AssocIndStr
      15  AssocRspFailStr
     462  AssociatedDevList
      56  BindingTable
       2  Cskip
       1  CskipChldrn
       1  CskipRtrs
      11  EndDeviceStr
      13  EnergyLevelStr
       7  FailedStr
     272  NIB_init
      12  NetworkIDStr
      16  OrphanRspStr
       8  ParentStr
      15  PingStr
       8  RouterStr
      12  ScanFailedStr
       5  SentStr
       8  SuccessStr
      13  ZigbeeCoordStr
      36  bcastHoldAckMask
       9  bcastHoldHandle
      72  bcastTable
      16  defaultKey
      16  defaultTCLinkKey
       1  gAPS_MAX_GROUPS
       2  gBIND_REC_SIZE
       1  gDEFAULT_ROUTE_REQUEST_RADIUS
       1  gDEF_NWK_RADIUS
       1  gGOOD_LINK_COST
       2  gKEEPALIVE_TIMEOUT_MAX
       1  gLINK_DOWN_TRIGGER
       2  gLINK_STATUS_JITTER_MASK
       1  gMAX_BCAST
       1  gMAX_BINDING_CLUSTER_IDS
       1  gMAX_BROADCAST_QUEUED
       1  gMAX_NEIGHBOR_ENTRIES
       1  gMAX_NOT_MYCHILD_DEVICES
       4  gMAX_NWK_FRAMECOUNTER_CHANGES
       1  gMAX_PASSIVE_ACK_CNT
       1  gMAX_RREQ_ENTRIES
       1  gMAX_RTG_ENTRIES
       1  gMAX_RTG_SRC_ENTRIES
       1  gMAX_SOURCE_ROUTE
       1  gMIN_TREE_LINK_COST
       1  gMTO_ROUTE_EXPIRY_TIME
       2  gMTO_RREQ_LIMIT_TIME
       1  gNWK_CONFLICTED_ADDR_EXPIRY_TIME
       1  gNWK_FREQ_AGILITY_ALL_MAC_ERRS
       1  gNWK_INDIRECT_CNT_RTG_TMR
       1  gNWK_INDIRECT_MSG_MAX_ALL
       1  gNWK_INDIRECT_MSG_MAX_PER
       1  gNWK_MAX_BINDING_ENTRIES
       1  gNWK_MAX_DATABUFS_CONFIRMED
       1  gNWK_MAX_DATABUFS_SCHEDULED
       1  gNWK_MAX_DATABUFS_TOTAL
       1  gNWK_MAX_DATABUFS_WAITING
       1  gNWK_MAX_DEVICE_LIST
       1  gNWK_MAX_SLEEPING_END_DEVICES
       2  gNWK_MIN_ENDDEVICE_CHILDREN
       2  gNWK_MIN_ROUTER_CHILDREN
       1  gNWK_TREE_ALLOCATE_ROUTERADDR_FOR_ENDDEVICE
       2  gTIMEOUT_COUNTER_MAX
     368  neighborTable
      20  notMyChildList
     233  nwk_Status
       3  nwk_UpdateStatistics
      43  nwk_adjustDelay
      35  nwk_globals_init
      64  rtDiscTable
      24  rtgSrcRelayList
      72  rtgSrcTable
     280  rtgTable

 
   600 bytes in segment BANKED_CODE
    30 bytes in segment BANK_RELAYS
    79 bytes in segment CODE_C
     1 byte  in segment XDATA_I
     1 byte  in segment XDATA_ID
   178 bytes in segment XDATA_ROM_C
 1 467 bytes in segment XDATA_Z
 
   710 bytes of CODE  memory
   178 bytes of CONST memory
 1 468 bytes of XDATA memory

Errors: none
Warnings: none
