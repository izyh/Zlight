///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            07/May/2014  20:50:05 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\Texas Instruments\Z-Stack Lighting             /
//                          1.0.2\Components\stack\zcl\zcl.c                  /
//    Command line       =  -f "D:\Texas Instruments\Z-Stack Lighting         /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ      /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f "D:\Texas        /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO     /
//                          -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f "D:\Texas              /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wZCL.cfg" "D:\Texas           /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Components\stack\zcl\zcl.c" -D              /
//                          FEATURE_GREEN_POWER -D SECURE=1 -D                /
//                          TC_LINKKEY_JOIN -D ZDSECMGR_TC_DEVICE_MAX=2 -D    /
//                          NV_RESTORE -D HOLD_AUTO_START -D INTER_PAN -D     /
//                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D             /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D MT_ZDO_CB_FUNC -D   /
//                          MT_UTIL_FUNC -D MT_ZDO_MGMT -D LCD_SUPPORTED -D   /
//                          HAL_LCD=FALSE -D HAL_KEY=FALSE -D ZCL_BASIC -D    /
//                          ZCL_READ -D ZCL_WRITE -D ZCL_IDENTIFY -D          /
//                          ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D         /
//                          ZCL_LIGHT_LINK_ENHANCE -D ZCL_LEVEL_CTRL -D       /
//                          ZCL_COLOR_CTRL -D xMAX_CHANNELS_24GHZ=0x02108800  /
//                          -lC "D:\Texas Instruments\Z-Stack Lighting        /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Bridge /
//                          EB-Pro\List\" -lA "D:\Texas Instruments\Z-Stack   /
//                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC25 /
//                          3x\BridgeEB-Pro\List\" --diag_suppress            /
//                          Pe001,Pa010 -o "D:\Texas Instruments\Z-Stack      /
//                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC25 /
//                          3x\BridgeEB-Pro\Obj\" -e --debug --core=plain     /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "D:\Texas                 /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\" -I   /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\Sou /
//                          rce\" -I "D:\Texas Instruments\Z-Stack Lighting   /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          Source\" -I "D:\Texas Instruments\Z-Stack         /
//                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC25 /
//                          3x\..\..\..\HomeAutomation\Source\" -I "D:\Texas  /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\HomeAutomation\SampleLight\Source\" -I         /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\ZMain\TI2530DB\" -I "D:\Texas                  /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\hal\include\" -I "D:\Texas    /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\hal\target\CC2530EB\" -I      /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\include\" -I "D:\Texas    /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\high_level\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\low_level\srf04\" -I      /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\low_level\srf04\single_ch /
//                          ip\" -I "D:\Texas Instruments\Z-Stack Lighting    /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mt\" -I "D:\Texas             /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\osal\include\" -I "D:\Texas   /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\services\saddr\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\services\sdata\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\af\" -I "D:\Texas       /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\nwk\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sapi\" -I "D:\Texas     /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sec\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sys\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\zcl\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\zdo\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\zmac\" -I "D:\Texas           /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\zmac\f8w\" -Ohz               /
//                          --require_prototypes                              /
//    List file          =  D:\Texas Instruments\Z-Stack Lighting             /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Bridge /
//                          EB-Pro\List\zcl.s51                               /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME zcl

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_MOV_X
        EXTERN ?MOVE_LONG8_XDATA_CODE
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?UC_SWITCH_SPARSE
        EXTERN ?UL_SHR
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??zclAuthorizeWrite?relay,0203H
        FUNCTION ??zclBuildHdr?relay,0203H
        PUBLIC ??zclFindAttrRec?relay
        FUNCTION ??zclFindAttrRec?relay,0203H
        FUNCTION ??zclFindAttrRecsList?relay,0203H
        FUNCTION ??zclFindClusterOption?relay,0203H
        PUBLIC ??zclGetAttrDataLength?relay
        FUNCTION ??zclGetAttrDataLength?relay,0203H
        FUNCTION ??zclGetAttrDataLengthUsingCB?relay,0203H
        FUNCTION ??zclGetAuthorizeCB?relay,0203H
        PUBLIC ??zclGetDataTypeLength?relay
        FUNCTION ??zclGetDataTypeLength?relay,0203H
        FUNCTION ??zclGetReadWriteCB?relay,0203H
        PUBLIC ??zclParseHdr?relay
        FUNCTION ??zclParseHdr?relay,0203H
        FUNCTION ??zclParseInDefaultRspCmd?relay,0203H
        PUBLIC ??zclParseInReadCmd?relay
        FUNCTION ??zclParseInReadCmd?relay,0203H
        FUNCTION ??zclParseInReadRspCmd?relay,0203H
        PUBLIC ??zclParseInWriteCmd?relay
        FUNCTION ??zclParseInWriteCmd?relay,0203H
        FUNCTION ??zclParseInWriteRspCmd?relay,0203H
        FUNCTION ??zclProcessInReadCmd?relay,0203H
        FUNCTION ??zclProcessInWriteCmd?relay,0203H
        FUNCTION ??zclProcessInWriteUndividedCmd?relay,0203H
        PUBLIC ??zclReadAttrData?relay
        FUNCTION ??zclReadAttrData?relay,0203H
        FUNCTION ??zclReadAttrDataUsingCB?relay,0203H
        FUNCTION ??zclRevertWriteUndividedCmd?relay,0203H
        PUBLIC ??zclSerializeData?relay
        FUNCTION ??zclSerializeData?relay,0203H
        FUNCTION ??zclSetSecurityOption?relay,0203H
        FUNCTION ??zclWriteAttrData?relay,0203H
        FUNCTION ??zclWriteAttrDataUsingCB?relay,0203H
        FUNCTION ??zcl_DeviceOperational?relay,0203H
        PUBLIC ??zcl_HandleExternal?relay
        FUNCTION ??zcl_HandleExternal?relay,0203H
        PUBLIC ??zcl_Init?relay
        FUNCTION ??zcl_Init?relay,0203H
        PUBLIC ??zcl_ProcessMessageMSG?relay
        FUNCTION ??zcl_ProcessMessageMSG?relay,0203H
        PUBLIC ??zcl_ReadAttrData?relay
        FUNCTION ??zcl_ReadAttrData?relay,0203H
        PUBLIC ??zcl_SendCommand?relay
        FUNCTION ??zcl_SendCommand?relay,0203H
        PUBLIC ??zcl_SendDefaultRspCmd?relay
        FUNCTION ??zcl_SendDefaultRspCmd?relay,0203H
        PUBLIC ??zcl_SendRead?relay
        FUNCTION ??zcl_SendRead?relay,0203H
        PUBLIC ??zcl_SendReadRsp?relay
        FUNCTION ??zcl_SendReadRsp?relay,0203H
        PUBLIC ??zcl_SendWriteRequest?relay
        FUNCTION ??zcl_SendWriteRequest?relay,0203H
        PUBLIC ??zcl_SendWriteRsp?relay
        FUNCTION ??zcl_SendWriteRsp?relay,0203H
        PUBLIC ??zcl_event_loop?relay
        FUNCTION ??zcl_event_loop?relay,0203H
        PUBLIC ??zcl_getRawAFMsg?relay
        FUNCTION ??zcl_getRawAFMsg?relay,0203H
        PUBLIC ??zcl_registerAttrList?relay
        FUNCTION ??zcl_registerAttrList?relay,0203H
        PUBLIC ??zcl_registerClusterOptionList?relay
        FUNCTION ??zcl_registerClusterOptionList?relay,0203H
        PUBLIC ??zcl_registerForMsg?relay
        FUNCTION ??zcl_registerForMsg?relay,0203H
        PUBLIC ??zcl_registerPlugin?relay
        FUNCTION ??zcl_registerPlugin?relay,0203H
        PUBLIC ??zcl_registerReadWriteCB?relay
        FUNCTION ??zcl_registerReadWriteCB?relay,0203H
        PUBLIC ??zcl_registerValidateAttrData?relay
        FUNCTION ??zcl_registerValidateAttrData?relay,0203H
        FUNCTION zclAuthorizeWrite,021203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 14, STACK
        FUNCTION zclBuildHdr,0203H
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclFindAttrRec
        FUNCTION zclFindAttrRec,021203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 16, STACK
        FUNCTION zclFindAttrRecsList,0203H
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zclFindClusterOption,0203H
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC zclGetAttrDataLength
        FUNCTION zclGetAttrDataLength,021203H
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        FUNCTION zclGetAttrDataLengthUsingCB,021203H
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        FUNCTION zclGetAuthorizeCB,021203H
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zclGetDataTypeLength
        FUNCTION zclGetDataTypeLength,0203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCTION zclGetReadWriteCB,021203H
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zclParseHdr
        FUNCTION zclParseHdr,021203H
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION zclParseInDefaultRspCmd,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zclParseInReadCmd
        FUNCTION zclParseInReadCmd,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION zclParseInReadRspCmd,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        PUBLIC zclParseInWriteCmd
        FUNCTION zclParseInWriteCmd,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 25, STACK
        FUNCTION zclParseInWriteRspCmd,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 16, STACK
        FUNCTION zclProcessInReadCmd,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 37, STACK
        FUNCTION zclProcessInWriteCmd,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 39, STACK
        FUNCTION zclProcessInWriteUndividedCmd,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 41, STACK
        PUBLIC zclReadAttrData
        FUNCTION zclReadAttrData,021203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        FUNCTION zclReadAttrDataUsingCB,021203H
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        FUNCTION zclRevertWriteUndividedCmd,021203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC zclSerializeData
        FUNCTION zclSerializeData,0a1203H
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 18, STACK
        FUNCTION zclSetSecurityOption,021203H
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        FUNCTION zclWriteAttrData,021203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 18, STACK
        FUNCTION zclWriteAttrDataUsingCB,021203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 20, STACK
        FUNCTION zcl_DeviceOperational,021203H
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 22, STACK
        PUBLIC zcl_HandleExternal
        FUNCTION zcl_HandleExternal,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC zcl_Init
        FUNCTION zcl_Init,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zcl_ProcessMessageMSG
        FUNCTION zcl_ProcessMessageMSG,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 44, STACK
        PUBLIC zcl_ReadAttrData
        FUNCTION zcl_ReadAttrData,021203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 28, STACK
        PUBLIC zcl_RegisteredMsgTaskID
        PUBLIC zcl_SendCommand
        FUNCTION zcl_SendCommand,021203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 39, STACK
        PUBLIC zcl_SendDefaultRspCmd
        FUNCTION zcl_SendDefaultRspCmd,021203H
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 27, STACK
        PUBLIC zcl_SendRead
        FUNCTION zcl_SendRead,021203H
        ARGFRAME XSTACK, 5, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC zcl_SendReadRsp
        FUNCTION zcl_SendReadRsp,021203H
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC zcl_SendWriteRequest
        FUNCTION zcl_SendWriteRequest,021203H
        ARGFRAME XSTACK, 6, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 35, STACK
        PUBLIC zcl_SendWriteRsp
        FUNCTION zcl_SendWriteRsp,021203H
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 33, STACK
        PUBLIC zcl_SeqNum
        PUBLIC zcl_TaskID
        PUBLIC zcl_ValidateAttrDataCB
        PUBLIC zcl_event_loop
        FUNCTION zcl_event_loop,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zcl_getRawAFMsg
        FUNCTION zcl_getRawAFMsg,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zcl_registerAttrList
        FUNCTION zcl_registerAttrList,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zcl_registerClusterOptionList
        FUNCTION zcl_registerClusterOptionList,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC zcl_registerForMsg
        FUNCTION zcl_registerForMsg,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC zcl_registerPlugin
        FUNCTION zcl_registerPlugin,021203H
        ARGFRAME XSTACK, 2, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zcl_registerReadWriteCB
        FUNCTION zcl_registerReadWriteCB,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        PUBLIC zcl_registerValidateAttrData
        FUNCTION zcl_registerValidateAttrData,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
AF_DataRequest      SYMBOL "AF_DataRequest"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
StubAPS_InterPan    SYMBOL "StubAPS_InterPan"
??StubAPS_InterPan?relay SYMBOL "?relay", StubAPS_InterPan
afFindEndPointDesc  SYMBOL "afFindEndPointDesc"
??afFindEndPointDesc?relay SYMBOL "?relay", afFindEndPointDesc
osal_buffer_uint32  SYMBOL "osal_buffer_uint32"
??osal_buffer_uint32?relay SYMBOL "?relay", osal_buffer_uint32
osal_mem_alloc      SYMBOL "osal_mem_alloc"
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
??osal_memset?relay SYMBOL "?relay", osal_memset
osal_msg_allocate   SYMBOL "osal_msg_allocate"
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
zclFindAttrRec      SYMBOL "zclFindAttrRec"
??zclFindAttrRec?relay SYMBOL "?relay", zclFindAttrRec
zclGetAttrDataLength SYMBOL "zclGetAttrDataLength"
??zclGetAttrDataLength?relay SYMBOL "?relay", zclGetAttrDataLength
zclGetDataTypeLength SYMBOL "zclGetDataTypeLength"
??zclGetDataTypeLength?relay SYMBOL "?relay", zclGetDataTypeLength
zclParseHdr         SYMBOL "zclParseHdr"
??zclParseHdr?relay SYMBOL "?relay", zclParseHdr
zclParseInReadCmd   SYMBOL "zclParseInReadCmd"
??zclParseInReadCmd?relay SYMBOL "?relay", zclParseInReadCmd
zclParseInWriteCmd  SYMBOL "zclParseInWriteCmd"
??zclParseInWriteCmd?relay SYMBOL "?relay", zclParseInWriteCmd
zclReadAttrData     SYMBOL "zclReadAttrData"
??zclReadAttrData?relay SYMBOL "?relay", zclReadAttrData
zclSerializeData    SYMBOL "zclSerializeData"
??zclSerializeData?relay SYMBOL "?relay", zclSerializeData
zcl_HandleExternal  SYMBOL "zcl_HandleExternal"
??zcl_HandleExternal?relay SYMBOL "?relay", zcl_HandleExternal
zcl_Init            SYMBOL "zcl_Init"
??zcl_Init?relay    SYMBOL "?relay", zcl_Init
zcl_ProcessMessageMSG SYMBOL "zcl_ProcessMessageMSG"
??zcl_ProcessMessageMSG?relay SYMBOL "?relay", zcl_ProcessMessageMSG
zcl_ReadAttrData    SYMBOL "zcl_ReadAttrData"
??zcl_ReadAttrData?relay SYMBOL "?relay", zcl_ReadAttrData
zcl_SendCommand     SYMBOL "zcl_SendCommand"
??zcl_SendCommand?relay SYMBOL "?relay", zcl_SendCommand
zcl_SendDefaultRspCmd SYMBOL "zcl_SendDefaultRspCmd"
??zcl_SendDefaultRspCmd?relay SYMBOL "?relay", zcl_SendDefaultRspCmd
zcl_SendRead        SYMBOL "zcl_SendRead"
??zcl_SendRead?relay SYMBOL "?relay", zcl_SendRead
zcl_SendReadRsp     SYMBOL "zcl_SendReadRsp"
??zcl_SendReadRsp?relay SYMBOL "?relay", zcl_SendReadRsp
zcl_SendWriteRequest SYMBOL "zcl_SendWriteRequest"
??zcl_SendWriteRequest?relay SYMBOL "?relay", zcl_SendWriteRequest
zcl_SendWriteRsp    SYMBOL "zcl_SendWriteRsp"
??zcl_SendWriteRsp?relay SYMBOL "?relay", zcl_SendWriteRsp
zcl_event_loop      SYMBOL "zcl_event_loop"
??zcl_event_loop?relay SYMBOL "?relay", zcl_event_loop
zcl_getRawAFMsg     SYMBOL "zcl_getRawAFMsg"
??zcl_getRawAFMsg?relay SYMBOL "?relay", zcl_getRawAFMsg
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
??zcl_registerAttrList?relay SYMBOL "?relay", zcl_registerAttrList
zcl_registerClusterOptionList SYMBOL "zcl_registerClusterOptionList"
??zcl_registerClusterOptionList?relay SYMBOL "?relay", zcl_registerClusterOptionList
zcl_registerForMsg  SYMBOL "zcl_registerForMsg"
??zcl_registerForMsg?relay SYMBOL "?relay", zcl_registerForMsg
zcl_registerPlugin  SYMBOL "zcl_registerPlugin"
??zcl_registerPlugin?relay SYMBOL "?relay", zcl_registerPlugin
zcl_registerReadWriteCB SYMBOL "zcl_registerReadWriteCB"
??zcl_registerReadWriteCB?relay SYMBOL "?relay", zcl_registerReadWriteCB
zcl_registerValidateAttrData SYMBOL "zcl_registerValidateAttrData"
??zcl_registerValidateAttrData?relay SYMBOL "?relay", zcl_registerValidateAttrData

        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??StubAPS_InterPan?relay
        FUNCTION ??StubAPS_InterPan?relay,00H
        EXTERN ??afFindEndPointDesc?relay
        FUNCTION ??afFindEndPointDesc?relay,00H
        EXTERN ??osal_buffer_uint32?relay
        FUNCTION ??osal_buffer_uint32?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,00H
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN StubAPS_InterPan
        FUNCTION StubAPS_InterPan,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN afFindEndPointDesc
        FUNCTION afFindEndPointDesc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_buffer_uint32
        FUNCTION osal_buffer_uint32,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\Texas Instruments\Z-Stack Lighting 1.0.2\Components\stack\zcl\zcl.c
//    1 /**************************************************************************************************
//    2   Filename:       zcl.c
//    3   Revised:        $Date: 2013-11-22 17:43:52 -0800 (Fri, 22 Nov 2013) $
//    4   Revision:       $Revision: 36225 $
//    5 
//    6   Description:    This file contains the Zigbee Cluster Library Foundation functions.
//    7 
//    8 
//    9   Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41  * INCLUDES
//   42  */
//   43 #include "ZComDef.h"
//   44 #include "AF.h"
//   45 
//   46 #include "zcl.h"
//   47 #include "zcl_general.h"
//   48 
//   49 #if defined ( INTER_PAN )
//   50   #include "stub_aps.h"
//   51 #endif
//   52 
//   53 #include "onboard.h"
//   54 
//   55 /*********************************************************************
//   56  * MACROS
//   57  */
//   58 /*** Frame Control ***/
//   59 #define zcl_FCType( a )               ( (a) & ZCL_FRAME_CONTROL_TYPE )
//   60 #define zcl_FCManuSpecific( a )       ( (a) & ZCL_FRAME_CONTROL_MANU_SPECIFIC )
//   61 #define zcl_FCDirection( a )          ( (a) & ZCL_FRAME_CONTROL_DIRECTION )
//   62 #define zcl_FCDisableDefaultRsp( a )  ( (a) & ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RSP )
//   63 
//   64 /*** Attribute Access Control ***/
//   65 #define zcl_AccessCtrlRead( a )       ( (a) & ACCESS_CONTROL_READ )
//   66 #define zcl_AccessCtrlWrite( a )      ( (a) & ACCESS_CONTROL_WRITE )
//   67 #define zcl_AccessCtrlCmd( a )        ( (a) & ACCESS_CONTROL_CMD )
//   68 #define zcl_AccessCtrlAuthRead( a )   ( (a) & ACCESS_CONTROL_AUTH_READ )
//   69 #define zcl_AccessCtrlAuthWrite( a )  ( (a) & ACCESS_CONTROL_AUTH_WRITE )
//   70 
//   71 #define zclParseCmd( a, b )           zclCmdTable[(a)].pfnParseInProfile( (b) )
//   72 #define zclProcessCmd( a, b )         zclCmdTable[(a)].pfnProcessInProfile( (b) )
//   73 
//   74 #define zcl_DefaultRspCmd( zclHdr )   ( zcl_ProfileCmd( (zclHdr).fc.type )     && \ 
//   75                                         (zclHdr).fc.manuSpecific == 0          && \ 
//   76                                         (zclHdr).commandID == ZCL_CMD_DEFAULT_RSP )
//   77 
//   78 // Commands that have corresponding responses
//   79 #define CMD_HAS_RSP( cmd )            ( (cmd) == ZCL_CMD_READ                   || \ 
//   80                                         (cmd) == ZCL_CMD_WRITE                  || \ 
//   81                                         (cmd) == ZCL_CMD_WRITE_UNDIVIDED        || \ 
//   82                                         (cmd) == ZCL_CMD_CONFIG_REPORT          || \ 
//   83                                         (cmd) == ZCL_CMD_READ_REPORT_CFG        || \ 
//   84                                         (cmd) == ZCL_CMD_DISCOVER_ATTRS         || \ 
//   85                                         (cmd) == ZCL_CMD_DISCOVER_CMDS_RECEIVED || \ 
//   86                                         (cmd) == ZCL_CMD_DISCOVER_CMDS_GEN      || \ 
//   87                                         (cmd) == ZCL_CMD_DISCOVER_ATTRS_EXT     || \ 
//   88                                         (cmd) == ZCL_CMD_DEFAULT_RSP ) // exception
//   89 
//   90 /*********************************************************************
//   91  * CONSTANTS
//   92  */
//   93 
//   94 /*********************************************************************
//   95  * TYPEDEFS
//   96  */
//   97 typedef struct zclLibPlugin
//   98 {
//   99   struct zclLibPlugin *next;
//  100   uint16              startClusterID;    // starting cluster ID
//  101   uint16              endClusterID;      // ending cluster ID
//  102   zclInHdlr_t         pfnIncomingHdlr;    // function to handle incoming message
//  103 } zclLibPlugin_t;
//  104 
//  105 // Command record list
//  106 typedef struct zclCmdRecsList
//  107 {
//  108   struct zclCmdRecsList *pNext;
//  109   uint8                 endpoint;
//  110   uint8                 numCommands;
//  111   CONST zclCommandRec_t *pCmdRecs;
//  112 } zclCmdRecsList_t;
//  113 
//  114 // Attribute record list item
//  115 typedef struct zclAttrRecsList
//  116 {
//  117   struct zclAttrRecsList *next;
//  118   uint8                  endpoint;      // Used to link it into the endpoint descriptor
//  119   zclReadWriteCB_t       pfnReadWriteCB;// Read or Write attribute value callback function
//  120   zclAuthorizeCB_t       pfnAuthorizeCB;// Authorize Read or Write operation
//  121   uint8                  numAttributes; // Number of the following records
//  122   CONST zclAttrRec_t     *attrs;        // attribute records
//  123 } zclAttrRecsList;
//  124 
//  125 // Cluster option list item
//  126 typedef struct zclClusterOptionList
//  127 {
//  128   struct zclClusterOptionList *next;
//  129   uint8                       endpoint;   // Used to link it into the endpoint descriptor
//  130   uint8                       numOptions; // Number of the following records
//  131   zclOptionRec_t              *options;   // option records
//  132 } zclClusterOptionList;
//  133 
//  134 typedef void *(*zclParseInProfileCmd_t)( zclParseCmd_t *pCmd );
//  135 typedef uint8 (*zclProcessInProfileCmd_t)( zclIncoming_t *pInMsg );
//  136 
//  137 typedef struct
//  138 {
//  139   zclParseInProfileCmd_t   pfnParseInProfile;
//  140   zclProcessInProfileCmd_t pfnProcessInProfile;
//  141 } zclCmdItems_t;
//  142 
//  143 
//  144 /*********************************************************************
//  145  * GLOBAL VARIABLES
//  146  */
//  147 
//  148 #if !defined ( ZCL_STANDALONE )

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  149   uint8 zcl_TaskID;
zcl_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  150 
//  151   // The task Id of the Application where the unprocessed Foundation
//  152   // Command/Response messages will be sent to.

        RSEG XDATA_I:XDATA:NOROOT(0)
//  153   uint8 zcl_RegisteredMsgTaskID = TASK_NO_TASK;
zcl_RegisteredMsgTaskID:
        DATA8
        DS 1
        REQUIRE `?<Initializer for zcl_RegisteredMsgTaskID>`
        REQUIRE __INIT_XDATA_I
//  154 #endif
//  155 
//  156 // The Application should register its attribute data validation function

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  157 zclValidateAttrData_t zcl_ValidateAttrDataCB = (zclValidateAttrData_t)NULL;
zcl_ValidateAttrDataCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  158 
//  159 // ZCL Sequence number

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  160 uint8 zcl_SeqNum = 0x00;
zcl_SeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  161 
//  162 /*********************************************************************
//  163  * EXTERNAL VARIABLES
//  164  */
//  165 
//  166 /*********************************************************************
//  167  * EXTERNAL FUNCTIONS
//  168  */
//  169 
//  170 /*********************************************************************
//  171  * LOCAL VARIABLES
//  172  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  173 static zclLibPlugin_t *plugins = (zclLibPlugin_t *)NULL;
plugins:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  174 
//  175 #if defined ( ZCL_DISCOVER )
//  176   static zclCmdRecsList_t *gpCmdList = (zclCmdRecsList_t *)NULL;
//  177 #endif
//  178 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  179 static zclAttrRecsList *attrList = (zclAttrRecsList *)NULL;
attrList:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  180 static zclClusterOptionList *clusterOptionList = (zclClusterOptionList *)NULL;
clusterOptionList:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  181 static uint8 zcl_TransID = 0;  // This is the unique message ID (counter)
zcl_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  182 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  183 static afIncomingMSGPacket_t *rawAFMsg = (afIncomingMSGPacket_t *)NULL;
rawAFMsg:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  184 
//  185 /*********************************************************************
//  186  * LOCAL FUNCTIONS
//  187  */
//  188 void zcl_ProcessMessageMSG( afIncomingMSGPacket_t *pkt );  // Not static for ZNP build.
//  189 static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData );
//  190 static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr );
//  191 static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID );
//  192 
//  193 #if defined ( ZCL_DISCOVER )
//  194   static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint );
//  195 #endif
//  196 
//  197 static zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint );
//  198 static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID );
//  199 static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID );
//  200 static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable );
//  201 
//  202 static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID, uint8 frameType, uint8 cmd, uint16 profileID );
//  203 
//  204 #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
//  205 static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint );
//  206 static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint );
//  207 #endif // ZCL_READ || ZCL_WRITE
//  208 
//  209 #ifdef ZCL_READ
//  210 ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen );
//  211 static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterID, uint16 attrId );
//  212 static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
//  213                                          uint8 *pAttrData, uint16 *pDataLen );
//  214 static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
//  215 static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd );
//  216 static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg );
//  217 #endif // ZCL_READ
//  218 
//  219 #ifdef ZCL_WRITE
//  220 static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
//  221                                    zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec );
//  222 static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
//  223                                           zclAttrRec_t *pAttr, uint8 *pAttrData );
//  224 static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr );
//  225 static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd );
//  226 static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg );
//  227 static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg );
//  228 #endif // ZCL_WRITE
//  229 
//  230 #ifdef ZCL_REPORT
//  231 static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd );
//  232 static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd );
//  233 #endif // ZCL_REPORT
//  234 
//  235 static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd );
//  236 
//  237 #ifdef ZCL_DISCOVER
//  238 static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID, uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd );
//  239 static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction, uint16 *attrId, zclAttrRec_t *pAttr );
//  240 static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd );
//  241 static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd );
//  242 static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd );
//  243 static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg );
//  244 static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg );
//  245 static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
//  246 static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 attrLenBuf );
//  247 #endif // ZCL_DISCOVER
//  248 
//  249 /*********************************************************************
//  250  * Parse Profile Command Function Table
//  251  */
//  252 

        RSEG CODE_C:CODE:REORDER:NOROOT(0)
        DATA8
//  253 static CONST zclCmdItems_t zclCmdTable[] =
zclCmdTable:
        DATA16
        DW ??zclParseInReadCmd?relay
        DW ??zclProcessInReadCmd?relay
        DW ??zclParseInReadRspCmd?relay
        DW ??zcl_HandleExternal?relay
        DW ??zclParseInWriteCmd?relay
        DW ??zclProcessInWriteCmd?relay
        DW ??zclParseInWriteCmd?relay
        DW ??zclProcessInWriteUndividedCmd?relay
        DW ??zclParseInWriteRspCmd?relay
        DW ??zcl_HandleExternal?relay
        DW ??zclParseInWriteCmd?relay
        DW ??zclProcessInWriteCmd?relay
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW ??zclParseInDefaultRspCmd?relay
        DW ??zcl_HandleExternal?relay
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
//  254 {
//  255 #ifdef ZCL_READ
//  256   /* ZCL_CMD_READ */                { zclParseInReadCmd,             zclProcessInReadCmd             },
//  257   /* ZCL_CMD_READ_RSP */            { zclParseInReadRspCmd,          zcl_HandleExternal              },
//  258 #else
//  259   /* ZCL_CMD_READ */                { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  260   /* ZCL_CMD_READ_RSP */            { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  261 #endif // ZCL_READ
//  262 
//  263 #ifdef ZCL_WRITE
//  264   /* ZCL_CMD_WRITE */               { zclParseInWriteCmd,            zclProcessInWriteCmd            },
//  265   /* ZCL_CMD_WRITE_UNDIVIDED */     { zclParseInWriteCmd,            zclProcessInWriteUndividedCmd   },
//  266   /* ZCL_CMD_WRITE_RSP */           { zclParseInWriteRspCmd,         zcl_HandleExternal              },
//  267   /* ZCL_CMD_WRITE_NO_RSP */        { zclParseInWriteCmd,            zclProcessInWriteCmd            },
//  268 #else
//  269   /* ZCL_CMD_WRITE */               { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  270   /* ZCL_CMD_WRITE_UNDIVIDED */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  271   /* ZCL_CMD_WRITE_RSP */           { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  272   /* ZCL_CMD_WRITE_NO_RSP */        { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  273 #endif // ZCL_WRITE
//  274 
//  275 #ifdef ZCL_REPORT
//  276   /* ZCL_CMD_CONFIG_REPORT */       { zclParseInConfigReportCmd,     zcl_HandleExternal              },
//  277   /* ZCL_CMD_CONFIG_REPORT_RSP */   { zclParseInConfigReportRspCmd,  zcl_HandleExternal              },
//  278   /* ZCL_CMD_READ_REPORT_CFG */     { zclParseInReadReportCfgCmd,    zcl_HandleExternal              },
//  279   /* ZCL_CMD_READ_REPORT_CFG_RSP */ { zclParseInReadReportCfgRspCmd, zcl_HandleExternal              },
//  280   /* ZCL_CMD_REPORT */              { zclParseInReportCmd,           zcl_HandleExternal              },
//  281 #else
//  282   /* ZCL_CMD_CONFIG_REPORT */       { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  283   /* ZCL_CMD_CONFIG_REPORT_RSP */   { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  284   /* ZCL_CMD_READ_REPORT_CFG */     { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  285   /* ZCL_CMD_READ_REPORT_CFG_RSP */ { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  286   /* ZCL_CMD_REPORT */              { (zclParseInProfileCmd_t)NULL,  (zclProcessInProfileCmd_t)NULL  },
//  287 #endif // ZCL_REPORT
//  288 
//  289   /* ZCL_CMD_DEFAULT_RSP */         { zclParseInDefaultRspCmd,       zcl_HandleExternal              },
//  290 
//  291 #ifdef ZCL_DISCOVER
//  292   /* ZCL_CMD_DISCOVER_ATTRS */                { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
//  293   /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { zclParseInDiscAttrsRspCmd,      zcl_HandleExternal              },
//  294   /* *not supported* READ_ATTRS_STRCT */      { NULL,                           (zclProcessInProfileCmd_t)NULL  },
//  295   /* *not supported* WRITE_ATTRS_STRCT */     { NULL,                           (zclProcessInProfileCmd_t)NULL  },
//  296   /* *not supported* WRITE_ATTRS_STRCT_RSP */ { NULL,                           (zclProcessInProfileCmd_t)NULL  },
//  297   /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
//  298   /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
//  299   /* ZCL_CMD_DISCOVER_CMDS_GEN */             { zclParseInDiscCmdsCmd,          zclProcessInDiscCmd             },
//  300   /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { zclParseInDiscCmdsRspCmd,       zcl_HandleExternal              },
//  301   /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { zclParseInDiscAttrsCmd,         zclProcessInDiscAttrs           },
//  302   /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { zclParseInDiscAttrsExtRspCmd,   zcl_HandleExternal              },
//  303 #else
//  304   /* ZCL_CMD_DISCOVER_ATTRS */                { (zclParseInProfileCmd_t)NULL,    (zclProcessInProfileCmd_t)NULL  },
//  305   /* ZCL_CMD_DISCOVER_ATTRS_RSP */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  306   /* *not supported* READ_ATTRS_STRCT */      { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  307   /* *not supported* WRITE_ATTRS_STRCT */     { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  308   /* *not supported* WRITE_ATTRS_STRCT_RSP */ { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  309   /* ZCL_CMD_DISCOVER_CMDS_RECEIVED */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  310   /* ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP */    { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  311   /* ZCL_CMD_DISCOVER_CMDS_GEN */             { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  312   /* ZCL_CMD_DISCOVER_CMDS_GEN_RSP */         { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  313   /* ZCL_CMD_DISCOVER_ATTRS_EXT */            { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  314   /* ZCL_CMD_DISCOVER_ATTRS_EXT_RSP */        { (zclParseInProfileCmd_t)NULL,   (zclProcessInProfileCmd_t)NULL  },
//  315 #endif // ZCL_DISCOVER
//  316 };
//  317 
//  318 /*********************************************************************
//  319  * PUBLIC FUNCTIONS
//  320  *********************************************************************/
//  321 
//  322 #if !defined ( ZCL_STANDALONE )
//  323 /*********************************************************************
//  324  * @fn          zcl_Init
//  325  *
//  326  * @brief       Initialization function for the zcl layer.
//  327  *
//  328  * @param       task_id - ZCL task id
//  329  *
//  330  * @return      none
//  331  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  332 void zcl_Init( uint8 task_id )
zcl_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zcl_Init
        CODE
//  333 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  334   zcl_TaskID = task_id;
        MOV     A,R1
        MOV     DPTR,#zcl_TaskID
        MOVX    @DPTR,A
//  335 }
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock0
//  336 #endif
//  337 
//  338 #if !defined ( ZCL_STANDALONE )
//  339 /*********************************************************************
//  340  * @fn          zcl_event_loop
//  341  *
//  342  * @brief       Event Loop Processor for zcl.
//  343  *
//  344  * @param       task_id - task id
//  345  * @param       events - event bitmap
//  346  *
//  347  * @return      unprocessed events
//  348  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  349 uint16 zcl_event_loop( uint8 task_id, uint16 events )
zcl_event_loop:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function zcl_event_loop
        CODE
//  350 {
        FUNCALL zcl_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, zcl_ProcessMessageMSG
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_event_loop, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  351   uint8 *msgPtr;
//  352 
//  353   (void)task_id;  // Intentionally unreferenced parameter
//  354 
//  355   if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JZ      ??zcl_event_loop_0
//  356   {
//  357     msgPtr = osal_msg_receive( zcl_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??zcl_event_loop_1
//  358     while ( msgPtr != NULL )
//  359     {
//  360       uint8 dealloc = TRUE;
//  361 
//  362       if ( *msgPtr == AF_INCOMING_MSG_CMD )
//  363       {
//  364         zcl_ProcessMessageMSG( (afIncomingMSGPacket_t *)msgPtr );
??zcl_event_loop_2:
        ; Setup parameters for call to function zcl_ProcessMessageMSG
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??zcl_ProcessMessageMSG?relay
//  365       }
//  366       else if ( zcl_RegisteredMsgTaskID != TASK_NO_TASK )
//  367       {
//  368         // send it to another task to process.
//  369         osal_msg_send( zcl_RegisteredMsgTaskID, msgPtr );
//  370         dealloc = FALSE;
//  371       }
//  372 
//  373       // Release the memory
//  374       if ( dealloc )
//  375       {
//  376         osal_msg_deallocate( msgPtr );
??zcl_event_loop_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  377       }
//  378 
//  379       // Next
//  380       msgPtr = osal_msg_receive( zcl_TaskID );
??zcl_event_loop_1:
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#zcl_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     A,R6
        ORL     A,R7
        JZ      ??zcl_event_loop_4
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        XRL     A,#0x1a
        JZ      ??zcl_event_loop_2
        MOV     DPTR,#zcl_RegisteredMsgTaskID
        MOVX    A,@DPTR
        CPL     A
        JZ      ??zcl_event_loop_3
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_send?relay
        SJMP    ??zcl_event_loop_1
//  381     }
//  382 
//  383     // return unprocessed events
//  384     return (events ^ SYS_EVENT_MSG);
??zcl_event_loop_4:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??zcl_event_loop_5
//  385   }
//  386 
//  387   // Discard unknown events
//  388   return 0;
??zcl_event_loop_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??zcl_event_loop_5:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock1
//  389 }
//  390 #endif
//  391 
//  392 #if !defined ( ZCL_STANDALONE )
//  393 /*********************************************************************
//  394  * @fn      zcl_registerForMsg
//  395  *
//  396  * @brief   The ZCL is setup to send all incoming Foundation Command/Response
//  397  *          messages that aren't processed to one task (if a task is
//  398  *          registered).
//  399  *
//  400  * @param   taskId - task Id of the Application where commands will be sent to
//  401  *
//  402  * @return  TRUE if task registeration successful, FALSE otherwise
//  403  *********************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  404 uint8 zcl_registerForMsg( uint8 taskId )
zcl_registerForMsg:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function zcl_registerForMsg
        CODE
//  405 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
        MOV     A,R1
        MOV     R0,A
//  406   // Allow only the first task
//  407   if ( zcl_RegisteredMsgTaskID == TASK_NO_TASK )
        MOV     DPTR,#zcl_RegisteredMsgTaskID
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??zcl_registerForMsg_0
//  408   {
//  409     zcl_RegisteredMsgTaskID = taskId;
        MOV     A,R0
        MOVX    @DPTR,A
//  410 
//  411     return ( true );
        MOV     R1,#0x1
        SJMP    ??zcl_registerForMsg_1
//  412   }
//  413 
//  414   return ( false );
??zcl_registerForMsg_0:
        MOV     R1,#0x0
??zcl_registerForMsg_1:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock2
//  415 }
//  416 #endif
//  417 
//  418 #if !defined ( ZCL_STANDALONE )
//  419 /*********************************************************************
//  420  * @fn      zcl_HandleExternal
//  421  *
//  422  * @brief
//  423  *
//  424  * @param   pInMsg - incoming message to process
//  425  *
//  426  * @return  TRUE
//  427  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  428 uint8 zcl_HandleExternal( zclIncoming_t *pInMsg )
zcl_HandleExternal:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function zcl_HandleExternal
        CODE
//  429 {
        FUNCALL zcl_HandleExternal, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_HandleExternal, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  430   zclIncomingMsg_t *pCmd;
//  431 
//  432   if ( zcl_RegisteredMsgTaskID == TASK_NO_TASK )
        MOV     DPTR,#zcl_RegisteredMsgTaskID
        MOVX    A,@DPTR
        CPL     A
        JNZ     $+5
        LJMP    ??zcl_HandleExternal_0 & 0xFFFF
//  433   {
//  434     return ( TRUE );
//  435   }
//  436 
//  437   pCmd = (zclIncomingMsg_t *)osal_msg_allocate( sizeof ( zclIncomingMsg_t ) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x19
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
//  438   if ( pCmd != NULL )
        MOV     A,R2
        ORL     A,R3
        JNZ     $+5
        LJMP    ??zcl_HandleExternal_0 & 0xFFFF
//  439   {
//  440     // fill in the message
//  441     pCmd->hdr.event = ZCL_INCOMING_MSG;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#0x34
        LCALL   ??Subroutine118_0 & 0xFFFF
//  442     pCmd->zclHdr    = pInMsg->hdr;
??CrossCallReturnLabel_176:
        INC     DPTR
        MOV     A,R2
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,#0x6
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  443     pCmd->clusterId = pInMsg->msg->clusterId;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine66 & 0xFFFF
??CrossCallReturnLabel_86:
        LCALL   ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_329:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        LCALL   ?Subroutine21 & 0xFFFF
//  444     pCmd->srcAddr   = pInMsg->msg->srcAddr;
??CrossCallReturnLabel_18:
        INC     DPTR
        MOV     A,R2
        ADD     A,#0xa
        MOV     R4,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R5,A
        MOV     A,#0xc
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  445     pCmd->endPoint  = pInMsg->msg->endPoint;
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R0,A
        LCALL   ?Subroutine111 & 0xFFFF
??CrossCallReturnLabel_344:
        MOV     A,R0
        LCALL   ??Subroutine117_0 & 0xFFFF
??CrossCallReturnLabel_172:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,R2
        ADD     A,#0x16
        LCALL   ?Subroutine103 & 0xFFFF
??CrossCallReturnLabel_190:
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
//  446     pCmd->attrCmd   = pInMsg->attrCmd;
        MOV     A,R6
        ADD     A,#0xc
        MOV     R0,A
        MOV     A,R7
        LCALL   ??Subroutine115_0 & 0xFFFF
??CrossCallReturnLabel_159:
        LCALL   ??Subroutine144_0 & 0xFFFF
??CrossCallReturnLabel_322:
        MOV     A,R2
        ADD     A,#0x17
        LCALL   ?Subroutine103 & 0xFFFF
??CrossCallReturnLabel_191:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
//  447 
//  448     // Application will free the attrCmd buffer
//  449     pInMsg->attrCmd = NULL;
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  450 
//  451     /* send message through task message */
//  452     osal_msg_send( zcl_RegisteredMsgTaskID, (uint8 *)pCmd );
        ; Setup parameters for call to function osal_msg_send
        MOV     DPTR,#zcl_RegisteredMsgTaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_send?relay
//  453   }
//  454 
//  455   return ( TRUE );
??zcl_HandleExternal_0:
        MOV     R1,#0x1
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock3
//  456 }
//  457 #endif
//  458 
//  459 
//  460 /*********************************************************************
//  461  * @fn          zcl_getRawAFMsg
//  462  *
//  463  * @brief       Call to get original unprocessed AF message
//  464  *              (not parsed by ZCL).
//  465  *
//  466  *   NOTE:  This function can only be called during a ZCL callback function
//  467  *          and the calling function must NOT change any data in the message.
//  468  *
//  469  * @param       none
//  470  *
//  471  * @return      pointer to original AF message, NULL if not processing
//  472  *              AF message.
//  473  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  474 afIncomingMSGPacket_t *zcl_getRawAFMsg( void )
zcl_getRawAFMsg:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function zcl_getRawAFMsg
        CODE
//  475 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  476   return ( rawAFMsg );
        MOV     DPTR,#rawAFMsg
        LCALL   ??Subroutine140_0 & 0xFFFF
          CFI EndBlock cfiBlock4
??CrossCallReturnLabel_292:
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0
//  477 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock5
//  478 
//  479 /*********************************************************************
//  480  * @fn          zcl_registerPlugin
//  481  *
//  482  * @brief       Add a Cluster Library handler
//  483  *
//  484  * @param       startClusterID - starting cluster ID
//  485  * @param       endClusterID - ending cluster ID
//  486  * @param       pfnHdlr - function pointer to incoming message handler
//  487  *
//  488  * @return      ZSuccess if OK
//  489  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  490 ZStatus_t zcl_registerPlugin( uint16 startClusterID,
zcl_registerPlugin:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function zcl_registerPlugin
        CODE
//  491           uint16 endClusterID, zclInHdlr_t pfnIncomingHdlr )
//  492 {
        FUNCALL zcl_registerPlugin, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine127_0 & 0xFFFF
//  493   zclLibPlugin_t *pNewItem;
//  494   zclLibPlugin_t *pLoop;
//  495 
//  496   // Fill in the new profile list
//  497   pNewItem = zcl_mem_alloc( sizeof( zclLibPlugin_t ) );
??CrossCallReturnLabel_217:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x8
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R0,?V0 + 4
        MOV     R1,?V0 + 5
//  498   if ( pNewItem == NULL )
        MOV     A,R0
        ORL     A,R1
        JNZ     ??zcl_registerPlugin_0
//  499   {
//  500     return (ZMemError);
        MOV     R1,#0x10
        SJMP    ??CrossCallReturnLabel_22
//  501   }
//  502 
//  503   // Fill in the plugin record.
//  504   pNewItem->next = (zclLibPlugin_t *)NULL;
??zcl_registerPlugin_0:
        LCALL   ?Subroutine85 & 0xFFFF
//  505   pNewItem->startClusterID = startClusterID;
??CrossCallReturnLabel_119:
        INC     DPTR
        LCALL   ?Subroutine27 & 0xFFFF
//  506   pNewItem->endClusterID = endClusterID;
??CrossCallReturnLabel_27:
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
//  507   pNewItem->pfnIncomingHdlr = pfnIncomingHdlr;
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  508 
//  509   // Find spot in list
//  510   if (  plugins == NULL )
        MOV     DPTR,#plugins
        LCALL   ??Subroutine116_0 & 0xFFFF
??CrossCallReturnLabel_166:
        MOV     DPTR,#plugins
        JZ      ??zcl_registerPlugin_1
//  511   {
//  512     plugins = pNewItem;
//  513   }
//  514   else
//  515   {
//  516     // Look for end of list
//  517     pLoop = plugins;
        LCALL   ?Subroutine110 & 0xFFFF
??CrossCallReturnLabel_336:
        SJMP    ??zcl_registerPlugin_2
//  518     while ( pLoop->next != NULL )
//  519     {
//  520       pLoop = pLoop->next;
??zcl_registerPlugin_3:
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
//  521     }
??zcl_registerPlugin_2:
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_162:
        JNZ     ??zcl_registerPlugin_3
//  522 
//  523     // Put new item at end of list
//  524     pLoop->next = pNewItem;
        MOV     DPL,R4
        MOV     DPH,R5
//  525   }
??zcl_registerPlugin_1:
        LCALL   ?Subroutine23 & 0xFFFF
//  526 
//  527   return ( ZSuccess );
??CrossCallReturnLabel_22:
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock6
//  528 }
//  529 
//  530 #ifdef ZCL_DISCOVER
//  531 /*********************************************************************
//  532  * @fn          zcl_registerCmdList
//  533  *
//  534  * @brief       Register a Command List with ZCL Foundation
//  535  *
//  536  * @param       endpoint - endpoint the attribute list belongs to
//  537  * @param       newCmdList - array of command records
//  538  *
//  539  * @return      ZSuccess if OK
//  540  */
//  541 ZStatus_t zcl_registerCmdList( uint8 endpoint, CONST uint8 numAttrs, CONST zclCommandRec_t zclTestApp_Cmds[] );
//  542 ZStatus_t zcl_registerCmdList( uint8 endpoint, uint8 zclCmdsArraySize, CONST zclCommandRec_t newCmdList[] )
//  543 {
//  544   zclCmdRecsList_t *pNewItem;
//  545   zclCmdRecsList_t *pLoop;
//  546 
//  547   // Fill in the new profile list
//  548   pNewItem = zcl_mem_alloc( sizeof( zclCmdRecsList_t ) );
//  549   if ( pNewItem == NULL )
//  550   {
//  551     return (ZMemError);
//  552   }
//  553 
//  554   pNewItem->pNext = (zclCmdRecsList_t *)NULL;
//  555   pNewItem->endpoint = endpoint;
//  556   pNewItem->numCommands = zclCmdsArraySize;
//  557   pNewItem->pCmdRecs = newCmdList;
//  558 
//  559   // Find spot in list
//  560   if ( gpCmdList == NULL )
//  561   {
//  562     gpCmdList = pNewItem;
//  563   }
//  564   else
//  565   {
//  566     // Look for end of list
//  567     pLoop = gpCmdList;
//  568     while ( pLoop->pNext != NULL )
//  569     {
//  570       pLoop = pLoop->pNext;
//  571     }
//  572 
//  573     // Put new item at end of list
//  574     pLoop->pNext = pNewItem;
//  575   }
//  576 
//  577   return ( ZSuccess );
//  578 }
//  579 #endif  // ZCL_DISCOVER
//  580 
//  581 /*********************************************************************
//  582  * @fn          zcl_registerAttrList
//  583  *
//  584  * @brief       Register an Attribute List with ZCL Foundation
//  585  *
//  586  * @param       endpoint - endpoint the attribute list belongs to
//  587  * @param       numAttr - number of attributes in list
//  588  * @param       newAttrList - array of Attribute records.
//  589  *                            NOTE: THE ATTRIBUTE IDs (FOR A CLUSTER) MUST BE IN
//  590  *                            ASCENDING ORDER. OTHERWISE, THE DISCOVERY RESPONSE
//  591  *                            COMMAND WILL NOT HAVE THE RIGHT ATTRIBUTE INFO
//  592  *
//  593  * @return      ZSuccess if OK
//  594  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  595 ZStatus_t zcl_registerAttrList( uint8 endpoint, uint8 numAttr, CONST zclAttrRec_t newAttrList[] )
zcl_registerAttrList:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function zcl_registerAttrList
        CODE
//  596 {
        FUNCALL zcl_registerAttrList, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  597   zclAttrRecsList *pNewItem;
//  598   zclAttrRecsList *pLoop;
//  599 
//  600   // Fill in the new profile list
//  601   pNewItem = zcl_mem_alloc( sizeof( zclAttrRecsList ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0xa
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
//  602   if ( pNewItem == NULL )
        MOV     A,R0
        ORL     A,R1
        JNZ     ??zcl_registerAttrList_0
//  603   {
//  604     return (ZMemError);
        MOV     R1,#0x10
        SJMP    ??CrossCallReturnLabel_23
//  605   }
//  606 
//  607   pNewItem->next = (zclAttrRecsList *)NULL;
??zcl_registerAttrList_0:
        LCALL   ?Subroutine10 & 0xFFFF
//  608   pNewItem->endpoint = endpoint;
//  609   pNewItem->pfnReadWriteCB = NULL;
??CrossCallReturnLabel_0:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine14 & 0xFFFF
//  610   pNewItem->numAttributes = numAttr;
??CrossCallReturnLabel_8:
        MOV     A,?V0 + 1
        LCALL   ?Subroutine14 & 0xFFFF
//  611   pNewItem->attrs = newAttrList;
??CrossCallReturnLabel_9:
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  612 
//  613   // Find spot in list
//  614   if ( attrList == NULL )
        MOV     DPTR,#attrList
        LCALL   ??Subroutine116_0 & 0xFFFF
??CrossCallReturnLabel_167:
        MOV     DPTR,#attrList
        JZ      ??zcl_registerAttrList_1
//  615   {
//  616     attrList = pNewItem;
//  617   }
//  618   else
//  619   {
//  620     // Look for end of list
//  621     pLoop = attrList;
        LCALL   ?Subroutine110 & 0xFFFF
??CrossCallReturnLabel_337:
        SJMP    ??zcl_registerAttrList_2
//  622     while ( pLoop->next != NULL )
//  623     {
//  624       pLoop = pLoop->next;
??zcl_registerAttrList_3:
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
//  625     }
??zcl_registerAttrList_2:
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_163:
        JNZ     ??zcl_registerAttrList_3
//  626 
//  627     // Put new item at end of list
//  628     pLoop->next = pNewItem;
        MOV     DPL,R4
        MOV     DPH,R5
//  629   }
??zcl_registerAttrList_1:
        LCALL   ?Subroutine23 & 0xFFFF
//  630 
//  631   return ( ZSuccess );
??CrossCallReturnLabel_23:
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock7
//  632 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond8 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function zcl_registerAttrList
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+0
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond10 Using cfiCommon0
          CFI (cfiCond10) Function zcl_registerClusterOptionList
          CFI (cfiCond10) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond10) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond10) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond10) CFA_SP SP+0
          CFI (cfiCond10) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker11 Using cfiCommon1
          CFI (cfiPicker11) NoFunction
          CFI (cfiPicker11) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     R1,#0x0
        RET
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiCond10
          CFI EndBlock cfiPicker11

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond12 Using cfiCommon0
          CFI Function zcl_registerAttrList
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function zcl_registerAttrList
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond13) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond13) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond13) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond13) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond13) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond13) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond13) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond13) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond13) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond13) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond13) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond13) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond13) CFA_SP SP+0
          CFI (cfiCond13) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
        LCALL   ?Subroutine87 & 0xFFFF
??CrossCallReturnLabel_123:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14
//  633 
//  634 /*********************************************************************
//  635  * @fn          zcl_registerClusterOptionList
//  636  *
//  637  * @brief       Register a Cluster Option List with ZCL Foundation
//  638  *
//  639  * @param       endpoint - endpoint the option list belongs to
//  640  * @param       numOption - number of options in list
//  641  * @param       optionList - array of cluster option records.
//  642  *
//  643  *              NOTE: This API should be called to enable 'Application
//  644  *                    Link Key' security and/or 'APS ACK' for a specific
//  645  *                    Cluster. The 'Application Link Key' is discarded
//  646  *                    if security isn't enabled on the device.
//  647  *                    The default behavior is 'Network Key' when security
//  648  *                    is enabled and no 'APS ACK' for the ZCL messages.
//  649  *
//  650  * @return      ZSuccess if OK
//  651  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  652 ZStatus_t zcl_registerClusterOptionList( uint8 endpoint, uint8 numOption, zclOptionRec_t optionList[] )
zcl_registerClusterOptionList:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function zcl_registerClusterOptionList
        CODE
//  653 {
        FUNCALL zcl_registerClusterOptionList, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,R2
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  654   zclClusterOptionList *pNewItem;
//  655   zclClusterOptionList *pLoop;
//  656 
//  657   // Fill in the new profile list
//  658   pNewItem = zcl_mem_alloc( sizeof( zclClusterOptionList ) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
//  659   if ( pNewItem == NULL )
        MOV     A,R0
        ORL     A,R1
        JNZ     ??zcl_registerClusterOptionList_0
//  660   {
//  661     return (ZMemError);
        MOV     R1,#0x10
        SJMP    ??CrossCallReturnLabel_24
//  662   }
//  663 
//  664   pNewItem->next = (zclClusterOptionList *)NULL;
??zcl_registerClusterOptionList_0:
        LCALL   ?Subroutine10 & 0xFFFF
//  665   pNewItem->endpoint = endpoint;
//  666   pNewItem->numOptions = numOption;
??CrossCallReturnLabel_1:
        LCALL   ?Subroutine27 & 0xFFFF
//  667   pNewItem->options = optionList;
??CrossCallReturnLabel_28:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  668 
//  669   // Find spot in list
//  670   if ( clusterOptionList == NULL )
        MOV     DPTR,#clusterOptionList
        LCALL   ??Subroutine116_0 & 0xFFFF
??CrossCallReturnLabel_168:
        MOV     DPTR,#clusterOptionList
        JZ      ??zcl_registerClusterOptionList_1
//  671   {
//  672     clusterOptionList = pNewItem;
//  673   }
//  674   else
//  675   {
//  676     // Look for end of list
//  677     pLoop = clusterOptionList;
        LCALL   ?Subroutine110 & 0xFFFF
??CrossCallReturnLabel_338:
        SJMP    ??zcl_registerClusterOptionList_2
//  678     while ( pLoop->next != NULL )
//  679     {
//  680       pLoop = pLoop->next;
??zcl_registerClusterOptionList_3:
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
//  681     }
??zcl_registerClusterOptionList_2:
        LCALL   ?Subroutine33 & 0xFFFF
??CrossCallReturnLabel_164:
        JNZ     ??zcl_registerClusterOptionList_3
//  682 
//  683     // Put new item at end of list
//  684     pLoop->next = pNewItem;
        MOV     DPL,R4
        MOV     DPH,R5
//  685   }
??zcl_registerClusterOptionList_1:
        LCALL   ?Subroutine23 & 0xFFFF
          CFI EndBlock cfiBlock15
//  686 
//  687   return ( ZSuccess );
??CrossCallReturnLabel_24:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  688 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function zcl_registerClusterOptionList
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+0
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        MOV     A,?V0 + 1
        LCALL   ?Subroutine107 & 0xFFFF
??CrossCallReturnLabel_149:
        RET
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine107:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_27
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function zcl_registerClusterOptionList
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_149, ??CrossCallReturnLabel_28
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+0
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function zcl_registerAttrList
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_123, ??CrossCallReturnLabel_8
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+0
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond23 Using cfiCommon0
          CFI (cfiCond23) Function zcl_registerAttrList
          CFI (cfiCond23) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_123, ??CrossCallReturnLabel_9
          CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond23) CFA_SP SP+0
          CFI (cfiCond23) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function zcl_HandleExternal
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_18
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+0
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function zcl_registerReadWriteCB
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_150, ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_19
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+0
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker26 Using cfiCommon1
          CFI (cfiPicker26) NoFunction
          CFI (cfiPicker26) Picker
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiPicker26

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond27 Using cfiCommon0
          CFI Function zcl_registerAttrList
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function zcl_registerClusterOptionList
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+0
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker29 Using cfiCommon1
          CFI (cfiPicker29) NoFunction
          CFI (cfiPicker29) Picker
        LCALL   ?Subroutine85 & 0xFFFF
??CrossCallReturnLabel_120:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiPicker29

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine85:
          CFI Block cfiCond30 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_119
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function zcl_registerAttrList
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_120, ??CrossCallReturnLabel_0
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+0
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function zcl_registerClusterOptionList
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_120, ??CrossCallReturnLabel_1
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+0
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker33 Using cfiCommon1
          CFI (cfiPicker33) NoFunction
          CFI (cfiPicker33) Picker
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiPicker33
//  689 
//  690 /*********************************************************************
//  691  * @fn          zcl_registerValidateAttrData
//  692  *
//  693  * @brief       Add a validation function for attribute data
//  694  *
//  695  * @param       pfnValidateAttrData - function pointer to validate routine
//  696  *
//  697  * @return      ZSuccess if OK
//  698  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  699 ZStatus_t zcl_registerValidateAttrData( zclValidateAttrData_t pfnValidateAttrData )
zcl_registerValidateAttrData:
          CFI Block cfiBlock34 Using cfiCommon0
          CFI Function zcl_registerValidateAttrData
        CODE
//  700 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  701   zcl_ValidateAttrDataCB = pfnValidateAttrData;
        MOV     DPTR,#zcl_ValidateAttrDataCB
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  702 
//  703   return ( ZSuccess );
        MOV     R1,#0x0
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock34
//  704 }
//  705 
//  706 /*********************************************************************
//  707  * @fn          zcl_registerReadWriteCB
//  708  *
//  709  * @brief       Register the application's callback function to read/write
//  710  *              attribute data, and authorize read/write operation.
//  711  *
//  712  *              Note: The pfnReadWriteCB callback function is only required
//  713  *                    when the attribute data format is unknown to ZCL. The
//  714  *                    callback function gets called when the pointer 'dataPtr'
//  715  *                    to the attribute value is NULL in the attribute database
//  716  *                    registered with the ZCL.
//  717  *
//  718  *              Note: The pfnAuthorizeCB callback function is only required
//  719  *                    when the Read/Write operation on an attribute requires
//  720  *                    authorization (i.e., attributes with ACCESS_CONTROL_AUTH_READ
//  721  *                    or ACCESS_CONTROL_AUTH_WRITE access permissions).
//  722  *
//  723  * @param       endpoint - application's endpoint
//  724  * @param       pfnReadWriteCB - function pointer to read/write routine
//  725  * @param       pfnAuthorizeCB - function pointer to authorize read/write operation
//  726  *
//  727  * @return      ZSuccess if successful. ZFailure, otherwise.
//  728  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  729 ZStatus_t zcl_registerReadWriteCB( uint8 endpoint, zclReadWriteCB_t pfnReadWriteCB,
zcl_registerReadWriteCB:
          CFI Block cfiBlock35 Using cfiCommon0
          CFI Function zcl_registerReadWriteCB
        CODE
//  730                                    zclAuthorizeCB_t pfnAuthorizeCB )
//  731 {
        FUNCALL zcl_registerReadWriteCB, zclFindAttrRecsList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  732   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
        ; Setup parameters for call to function zclFindAttrRecsList
        LCALL   ??zclFindAttrRecsList?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R0,?V0 + 4
        MOV     R1,?V0 + 5
//  733 
//  734   if ( pRec != NULL )
        MOV     A,R0
        ORL     A,R1
        JZ      ??zcl_registerReadWriteCB_0
//  735   {
//  736     pRec->pfnReadWriteCB = pfnReadWriteCB;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        LCALL   ?Subroutine21 & 0xFFFF
//  737     pRec->pfnAuthorizeCB = pfnAuthorizeCB;
??CrossCallReturnLabel_19:
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  738 
//  739     return ( ZSuccess );
        MOV     R1,#0x0
        SJMP    ??zcl_registerReadWriteCB_1
//  740   }
//  741 
//  742   return ( ZFailure );
??zcl_registerReadWriteCB_0:
        MOV     R1,#0x1
??zcl_registerReadWriteCB_1:
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock35
//  743 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond36 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond37 Using cfiCommon0
          CFI (cfiCond37) Function zcl_registerReadWriteCB
          CFI (cfiCond37) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond37) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond37) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond37) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond37) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond37) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond37) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond37) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond37) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond37) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond37) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond37) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond37) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond37) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond37) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond37) CFA_SP SP+0
          CFI (cfiCond37) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker38 Using cfiCommon1
          CFI (cfiPicker38) NoFunction
          CFI (cfiPicker38) Picker
        LCALL   ?Subroutine87 & 0xFFFF
??CrossCallReturnLabel_124:
        RET
          CFI EndBlock cfiCond36
          CFI EndBlock cfiCond37
          CFI EndBlock cfiPicker38

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine87:
          CFI Block cfiCond39 Using cfiCommon0
          CFI Function zcl_registerAttrList
          CFI Conditional ??CrossCallReturnLabel_123, ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function zcl_registerAttrList
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_123, ??CrossCallReturnLabel_9
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+0
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond41 Using cfiCommon0
          CFI (cfiCond41) Function zcl_HandleExternal
          CFI (cfiCond41) Conditional ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_18
          CFI (cfiCond41) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond41) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond41) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond41) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond41) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond41) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond41) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond41) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond41) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond41) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond41) CFA_SP SP+0
          CFI (cfiCond41) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function zcl_registerReadWriteCB
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_124, ??CrossCallReturnLabel_19
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+0
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker43 Using cfiCommon1
          CFI (cfiPicker43) NoFunction
          CFI (cfiPicker43) Picker
        LCALL   ?Subroutine107 & 0xFFFF
??CrossCallReturnLabel_150:
        INC     DPTR
        RET
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiPicker43
//  744 
//  745 /*********************************************************************
//  746  * @fn      zcl_DeviceOperational
//  747  *
//  748  * @brief   Used to see whether or not the device can send or respond
//  749  *          to application level commands.
//  750  *
//  751  * @param   srcEP - source endpoint
//  752  * @param   clusterID - cluster ID
//  753  * @param   frameType - command type
//  754  * @param   cmd - command ID
//  755  *
//  756  * @return  TRUE if device is operational, FALSE otherwise
//  757  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  758 static uint8 zcl_DeviceOperational( uint8 srcEP, uint16 clusterID,
zcl_DeviceOperational:
          CFI Block cfiBlock44 Using cfiCommon0
          CFI Function zcl_DeviceOperational
        CODE
//  759                                     uint8 frameType, uint8 cmd, uint16 profileID )
//  760 {
        FUNCALL zcl_DeviceOperational, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_DeviceOperational, zclReadAttrData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R4
        MOV     R7,A
//  761   zclAttrRec_t attrRec;
//  762   uint8 deviceEnabled = DEVICE_ENABLED; // default value
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  763 
//  764   (void)profileID;  // Intentionally unreferenced parameter
//  765 
//  766   // If the device is Disabled (DeviceEnabled attribute is set to Disabled), it
//  767   // cannot send or respond to application level commands, other than commands
//  768   // to read or write attributes. Note that the Identify cluster cannot be
//  769   // disabled, and remains functional regardless of this setting.
//  770   if ( zcl_ProfileCmd( frameType ) && cmd <= ZCL_CMD_WRITE_NO_RSP )
        MOV     A,R7
        JNZ     ??zcl_DeviceOperational_0
        MOV     A,R5
        CLR     C
        SUBB    A,#0x6
        JC      ??zcl_DeviceOperational_1
//  771   {
//  772     return ( TRUE );
//  773   }
//  774 
//  775   if ( clusterID == ZCL_CLUSTER_ID_GEN_IDENTIFY )
??zcl_DeviceOperational_0:
        MOV     A,#0x3
        XRL     A,R2
        JNZ     ??zcl_DeviceOperational_2
        MOV     A,R3
??zcl_DeviceOperational_2:
        JZ      ??zcl_DeviceOperational_1
//  776   {
//  777     return ( TRUE );
//  778   }
//  779 
//  780   // Is device enabled?
//  781   if ( zclFindAttrRec( srcEP, ZCL_CLUSTER_ID_GEN_BASIC,
//  782                        ATTRID_BASIC_DEVICE_ENABLED, &attrRec ) )
        ; Setup parameters for call to function zclFindAttrRec
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R4,#0x12
        MOV     R5,#0x0
        MOV     R2,#0x0
        MOV     R3,#0x0
        LCALL   ??zclFindAttrRec?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R1
        JZ      ??zcl_DeviceOperational_3
//  783   {
//  784 #ifdef ZCL_READ
//  785     zclReadAttrData( &deviceEnabled, &attrRec, NULL );
        ; Setup parameters for call to function zclReadAttrData
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??zclReadAttrData?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  786 #endif
//  787   }
//  788 
//  789   return ( deviceEnabled == DEVICE_ENABLED ? TRUE : FALSE );
??zcl_DeviceOperational_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zcl_DeviceOperational_4
??zcl_DeviceOperational_1:
        MOV     R1,#0x1
        SJMP    ??zcl_DeviceOperational_5
??zcl_DeviceOperational_4:
        MOV     R1,#0x0
??zcl_DeviceOperational_5:
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock44
//  790 }
//  791 
//  792 /*********************************************************************
//  793  * @fn      zcl_SendCommand
//  794  *
//  795  * @brief   Used to send Profile and Cluster Specific Command messages.
//  796  *
//  797  *          NOTE: The calling application is responsible for incrementing
//  798  *                the Sequence Number.
//  799  *
//  800  * @param   srcEp - source endpoint
//  801  * @param   destAddr - destination address
//  802  * @param   clusterID - cluster ID
//  803  * @param   cmd - command ID
//  804  * @param   specific - whether the command is Cluster Specific
//  805  * @param   direction - client/server direction of the command
//  806  * @param   disableDefaultRsp - disable Default Response command
//  807  * @param   manuCode - manufacturer code for proprietary extensions to a profile
//  808  * @param   seqNumber - identification number for the transaction
//  809  * @param   cmdFormatLen - length of the command to be sent
//  810  * @param   cmdFormat - command to be sent
//  811  *
//  812  * @return  ZSuccess if OK
//  813  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  814 ZStatus_t zcl_SendCommand( uint8 srcEP, afAddrType_t *destAddr,
zcl_SendCommand:
          CFI Block cfiBlock45 Using cfiCommon0
          CFI Function zcl_SendCommand
        CODE
//  815                            uint16 clusterID, uint8 cmd, uint8 specific, uint8 direction,
//  816                            uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum,
//  817                            uint16 cmdFormatLen, uint8 *cmdFormat )
//  818 {
        FUNCALL zcl_SendCommand, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, StubAPS_InterPan
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, zclFindClusterOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, zcl_DeviceOperational
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, zclBuildHdr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendCommand, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 6
        MOV     A,#-0x6
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     ?V0 + 5,R1
        MOV     ?V0 + 14,R2
        MOV     ?V0 + 15,R3
        MOV     ?V0 + 2,R4
        MOV     ?V0 + 3,R5
        MOV     A,#0x1f
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     A,#0x20
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     A,#0x21
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,#0x24
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R6,A
        MOV     A,#0x27
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 10,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 11,A
//  819   endPointDesc_t *epDesc;
//  820   zclFrameHdr_t hdr;
//  821   uint8 *msgBuf;
//  822   uint16 msgLen;
//  823   uint8 *pBuf;
//  824   uint8 options;
//  825   ZStatus_t status;
//  826 
//  827   epDesc = afFindEndPointDesc( srcEP );
        ; Setup parameters for call to function afFindEndPointDesc
        LCALL   ??afFindEndPointDesc?relay
        MOV     ?V0 + 12,R2
        MOV     ?V0 + 13,R3
//  828   if ( epDesc == NULL )
        MOV     A,R2
        ORL     A,?V0 + 13
        JNZ     ??zcl_SendCommand_0
//  829   {
//  830     return ( ZInvalidParameter ); // EMBEDDED RETURN
        MOV     R1,#0x2
        LJMP    ??zcl_SendCommand_1 & 0xFFFF
//  831   }
//  832 
//  833 #if defined ( INTER_PAN )
//  834   if ( StubAPS_InterPan( destAddr->panId, destAddr->endPoint ) )
??zcl_SendCommand_0:
        ; Setup parameters for call to function StubAPS_InterPan
        MOV     DPL,?V0 + 14
        MOV     DPH,?V0 + 15
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?V0 + 14
        MOV     DPH,?V0 + 15
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine138_0 & 0xFFFF
??CrossCallReturnLabel_304:
        LCALL   ??StubAPS_InterPan?relay
        MOV     A,R1
        JZ      ??zcl_SendCommand_2
//  835   {
//  836     options = AF_TX_OPTIONS_NONE;
        MOV     ?V0 + 4,#0x0
        SJMP    ??zcl_SendCommand_3
//  837   }
//  838   else
//  839 #endif
//  840   {
//  841     options = zclGetClusterOption( srcEP, clusterID );
??zcl_SendCommand_2:
        ; Setup parameters for call to function zclFindClusterOption
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,?V0 + 5
        LCALL   ??zclFindClusterOption?relay
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??zcl_SendCommand_4
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        SJMP    ??zcl_SendCommand_5
??zcl_SendCommand_4:
        MOV     ?V0 + 4,#0x0
//  842 
//  843     // The cluster might not have been defined to use security but if this message
//  844     // is in response to another message that was using APS security this message
//  845     // will be sent with APS security
//  846     if ( !( options & AF_EN_SECURITY ) )
??zcl_SendCommand_5:
        MOV     A,?V0 + 4
        MOV     C,0xE0 /* A   */.6
        JC      ??zcl_SendCommand_3
//  847     {
//  848       afIncomingMSGPacket_t *origPkt = zcl_getRawAFMsg();
        MOV     DPTR,#rawAFMsg
        LCALL   ??Subroutine124_0 & 0xFFFF
//  849 
//  850       if ( ( origPkt != NULL ) && ( origPkt->SecurityUse == TRUE ) )
??CrossCallReturnLabel_194:
        JZ      ??zcl_SendCommand_3
        MOV     A,R0
        ADD     A,#0x19
        MOV     DPL,A
        MOV     A,R1
        LCALL   ??Subroutine117_0 & 0xFFFF
??CrossCallReturnLabel_173:
        XRL     A,#0x1
        JNZ     ??zcl_SendCommand_3
//  851       {
//  852         options |= AF_EN_SECURITY;
        MOV     A,?V0 + 4
        SETB    0xE0 /* A   */.6
        MOV     ?V0 + 4,A
//  853       }
//  854     }
//  855   }
//  856 
//  857   zcl_memset( &hdr, 0, sizeof( zclFrameHdr_t ) );
??zcl_SendCommand_3:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??osal_memset?relay
//  858 
//  859   // Not Profile wide command (like READ, WRITE)
//  860   if ( specific )
        MOV     A,?V0 + 0
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JZ      ??zcl_SendCommand_6
//  861   {
//  862     hdr.fc.type = ZCL_FRAME_TYPE_SPECIFIC_CMD;
        MOVX    A,@DPTR
        ANL     A,#0xfc
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        SJMP    ??zcl_SendCommand_7
//  863   }
//  864   else
//  865   {
//  866     hdr.fc.type = ZCL_FRAME_TYPE_PROFILE_CMD;
??zcl_SendCommand_6:
        MOVX    A,@DPTR
        ANL     A,#0xfc
//  867   }
??zcl_SendCommand_7:
        LCALL   ?Subroutine22 & 0xFFFF
//  868 
//  869   if ( ( epDesc->simpleDesc == NULL ) ||
//  870        ( zcl_DeviceOperational( srcEP, clusterID, hdr.fc.type,
//  871                                 cmd, epDesc->simpleDesc->AppProfId ) == FALSE ) )
??CrossCallReturnLabel_20:
        LCALL   ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_197:
        JZ      ??zcl_SendCommand_8
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        ; Setup parameters for call to function zcl_DeviceOperational
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     R5,?V0 + 0
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x3
        MOV     R4,A
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,?V0 + 5
        LCALL   ??zcl_DeviceOperational?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R1
        JNZ     ??zcl_SendCommand_9
//  872   {
//  873     return ( ZFailure ); // EMBEDDED RETURN
??zcl_SendCommand_8:
        MOV     R1,#0x1
        LJMP    ??zcl_SendCommand_1 & 0xFFFF
//  874   }
??zcl_SendCommand_9:
        MOV     A,#0x22
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine124_0 & 0xFFFF
//  875 
//  876   // Fill in the Maufacturer Code
//  877   if ( manuCode != 0 )
??CrossCallReturnLabel_195:
        JZ      ??CrossCallReturnLabel_241
//  878   {
//  879     hdr.fc.manuSpecific = 1;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ORL     A,#0x4
        MOVX    @DPTR,A
//  880     hdr.manuCode = manuCode;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine130_0 & 0xFFFF
//  881   }
//  882 
//  883   // Set the Command Direction
//  884   if ( direction )
??CrossCallReturnLabel_241:
        MOV     A,?V0 + 1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JZ      ??zcl_SendCommand_10
//  885   {
//  886     hdr.fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
        MOVX    A,@DPTR
        ORL     A,#0x8
        SJMP    ??zcl_SendCommand_11
//  887   }
//  888   else
//  889   {
//  890     hdr.fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
??zcl_SendCommand_10:
        MOVX    A,@DPTR
        ANL     A,#0xf7
??zcl_SendCommand_11:
        MOVX    @DPTR,A
//  891   }
//  892 
//  893   // Set the Disable Default Response field
//  894   if ( disableDefaultRsp )
        MOV     A,R7
        JZ      ??zcl_SendCommand_12
//  895   {
//  896     hdr.fc.disableDefaultRsp = 1;
        MOVX    A,@DPTR
        ORL     A,#0x10
        SJMP    ??zcl_SendCommand_13
//  897   }
//  898   else
//  899   {
//  900     hdr.fc.disableDefaultRsp = 0;
??zcl_SendCommand_12:
        MOVX    A,@DPTR
        ANL     A,#0xef
??zcl_SendCommand_13:
        MOVX    @DPTR,A
//  901   }
//  902 
//  903   // Fill in the Transaction Sequence Number
//  904   hdr.transSeqNum = seqNum;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
//  905 
//  906   // Fill in the command
//  907   hdr.commandID = cmd;
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
//  908 
//  909   // calculate the needed buffer size
//  910   msgLen = zclCalcHdrSize( &hdr );
        MOV     ?V0 + 0,#0x3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ANL     A,#0x4
        JZ      ??zcl_SendCommand_14
        MOV     ?V0 + 0,#0x5
??zcl_SendCommand_14:
        MOV     A,#0x25
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine127_0 & 0xFFFF
//  911   msgLen += cmdFormatLen;
??CrossCallReturnLabel_218:
        MOV     A,?V0 + 0
        ADD     A,R6
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,R7
        MOV     ?V0 + 1,A
//  912 
//  913   // Allocate the buffer needed
//  914   msgBuf = zcl_mem_alloc( msgLen );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,?V0 + 0
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
//  915   if ( msgBuf != NULL )
        MOV     A,R2
        ORL     A,?V0 + 7
        JZ      ??zcl_SendCommand_15
//  916   {
//  917     // Fill in the ZCL Header
//  918     pBuf = zclBuildHdr( &hdr, msgBuf );
//  919 
//  920     // Fill in the command frame
//  921     zcl_memcpy( pBuf, cmdFormat, cmdFormatLen );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 8,?V0 + 10
        MOV     ?V0 + 9,?V0 + 11
        MOV     ?V0 + 10,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 33)
        ; Setup parameters for call to function zclBuildHdr
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??zclBuildHdr?relay
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
//  922 
//  923     status = AF_DataRequest( destAddr, epDesc, clusterID, msgLen, msgBuf,
//  924                              &zcl_TransID, options, AF_DEFAULT_RADIUS );
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 8,#0x1e
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0 + 8,#zcl_TransID & 0xff
        MOV     ?V0 + 9,#(zcl_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     R1,?V0 + 4
        MOV     R4,?V0 + 12
        MOV     R5,?V0 + 13
        MOV     R2,?V0 + 14
        MOV     R3,?V0 + 15
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,R1
        MOV     R6,A
//  925     zcl_mem_free ( msgBuf );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        LCALL   ??osal_mem_free?relay
        SJMP    ??zcl_SendCommand_16
//  926   }
//  927   else
//  928   {
//  929     status = ZMemError;
??zcl_SendCommand_15:
        MOV     R6,#0x10
//  930   }
//  931 
//  932   return ( status );
??zcl_SendCommand_16:
        MOV     A,R6
        MOV     R1,A
??zcl_SendCommand_1:
        MOV     A,#0x6
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock45
//  933 }
//  934 
//  935 #ifdef ZCL_READ
//  936 /*********************************************************************
//  937  * @fn      zcl_SendRead
//  938  *
//  939  * @brief   Send a Read command
//  940  *
//  941  * @param   srcEP - Application's endpoint
//  942  * @param   dstAddr - destination address
//  943  * @param   clusterID - cluster ID
//  944  * @param   readCmd - read command to be sent
//  945  * @param   direction - direction of the command
//  946  * @param   seqNum - transaction sequence number
//  947  *
//  948  * @return  ZSuccess if OK
//  949  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  950 ZStatus_t zcl_SendRead( uint8 srcEP, afAddrType_t *dstAddr,
zcl_SendRead:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function zcl_SendRead
        CODE
//  951                         uint16 clusterID, zclReadCmd_t *readCmd,
//  952                         uint8 direction, uint8 disableDefaultRsp, uint8 seqNum)
//  953 {
        FUNCALL zcl_SendRead, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendRead, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendRead, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 12,R2
        MOV     ?V0 + 13,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 9,A
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine51 & 0xFFFF
//  954   uint16 dataLen;
//  955   uint8 *buf;
//  956   uint8 *pBuf;
//  957   ZStatus_t status;
//  958 
//  959   dataLen = readCmd->numAttr * 2; // Attribute ID
??CrossCallReturnLabel_59:
        CLR     C
        RLC     A
        MOV     ?V0 + 6,A
        CLR     A
        RLC     A
        MOV     ?V0 + 7,A
//  960 
//  961   buf = zcl_mem_alloc( dataLen );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,?V0 + 6
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  962   if ( buf != NULL )
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??zcl_SendRead_0 & 0xFFFF
//  963   {
//  964     uint8 i;
//  965 
//  966     // Load the buffer - serially
//  967     pBuf = buf;
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
//  968     for (i = 0; i < readCmd->numAttr; i++)
        MOV     ?V0 + 10,#0x0
        SJMP    ??zcl_SendRead_1
//  969     {
//  970       *pBuf++ = LO_UINT16( readCmd->attrID[i] );
??zcl_SendRead_2:
        MOV     A,?V0 + 10
        CLR     C
        RLC     A
        MOV     R2,A
        CLR     A
        RLC     A
        MOV     R3,A
        MOV     A,?V0 + 4
        ADD     A,R2
        MOV     DPL,A
        MOV     A,?V0 + 5
        ADDC    A,R3
        MOV     DPH,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ?Subroutine60 & 0xFFFF
//  971       *pBuf++ = HI_UINT16( readCmd->attrID[i] );
??CrossCallReturnLabel_72:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine43 & 0xFFFF
//  972     }
??CrossCallReturnLabel_154:
        INC     ?V0 + 10
??zcl_SendRead_1:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,?V0 + 10
        CLR     C
        SUBB    A,R2
        JC      ??zcl_SendRead_2
//  973 
//  974     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ, FALSE,
//  975                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
        ; Setup parameters for call to function zcl_SendCommand
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,?V0 + 9
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        CLR     A
        MOV     ?V0 + 4,A
        MOV     ?V0 + 5,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,?V0 + 8
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     R0,#?V0 + 3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     R0,#?V0 + 3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 12
        MOV     R3,?V0 + 13
        MOV     R1,?V0 + 2
        LCALL   ??zcl_SendCommand?relay
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        MOV     R6,A
//  976     zcl_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_mem_free?relay
        SJMP    ??zcl_SendRead_3
//  977   }
//  978   else
//  979   {
//  980     status = ZMemError;
??zcl_SendRead_0:
        MOV     R6,#0x10
          CFI EndBlock cfiBlock46
//  981   }
//  982 
//  983   return ( status );
??zcl_SendRead_3:
        REQUIRE ?Subroutine9
        ; // Fall through to label ?Subroutine9
//  984 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,R6
        MOV     R1,A
        SJMP    ??Subroutine113_0
          CFI EndBlock cfiBlock47

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine43:
          CFI Block cfiCond48 Using cfiCommon0
          CFI Function zcl_SendRead
          CFI Conditional ??CrossCallReturnLabel_154
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function zcl_SendWriteRsp
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_155
          CFI (cfiCond49) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond49) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond49) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond49) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond49) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond49) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond49) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond49) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond49) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond49) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond49) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond49) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond49) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond49) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond49) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond49) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond49) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond49) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond49) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond49) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond49) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond49) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond49) CFA_SP SP+0
          CFI (cfiCond49) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker50 Using cfiCommon1
          CFI (cfiPicker50) NoFunction
          CFI (cfiPicker50) Picker
        INC     DPTR
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiPicker50
        REQUIRE ??Subroutine112_0
        ; // Fall through to label ??Subroutine112_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine112_0:
          CFI Block cfiCond51 Using cfiCommon0
          CFI Function zcl_SendWriteRsp
          CFI Conditional ??CrossCallReturnLabel_153
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function zcl_SendRead
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_154
          CFI (cfiCond52) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond52) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond52) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond52) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond52) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond52) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond52) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond52) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond52) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond52) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond52) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond52) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond52) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond52) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond52) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond52) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond52) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond52) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond52) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond52) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond52) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond52) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond52) CFA_SP SP+0
          CFI (cfiCond52) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function zcl_SendWriteRsp
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_155
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond53) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond53) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond53) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond53) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond53) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+0
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker54 Using cfiCommon1
          CFI (cfiPicker54) NoFunction
          CFI (cfiPicker54) Picker
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        INC     DPTR
        INC     R0
        MOV     R1,DPH
        RET
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiPicker54

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiBlock55 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R2,?V0 + 10
        MOV     R3,?V0 + 11
          CFI EndBlock cfiBlock55
        REQUIRE ??Subroutine113_0
        ; // Fall through to label ??Subroutine113_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine113_0:
          CFI Block cfiBlock56 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0xe
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock56
//  985 
//  986 /*********************************************************************
//  987  * @fn      zcl_SendReadRsp
//  988  *
//  989  * @brief   Send a Read Response command.
//  990  *
//  991  * @param   srcEP - Application's endpoint
//  992  * @param   dstAddr - destination address
//  993  * @param   clusterID - cluster ID
//  994  * @param   readRspCmd - read response command to be sent
//  995  * @param   direction - direction of the command
//  996  * @param   seqNum - transaction sequence number
//  997  *
//  998  * @return  ZSuccess if OK
//  999  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1000 ZStatus_t zcl_SendReadRsp( uint8 srcEP, afAddrType_t *dstAddr,
zcl_SendReadRsp:
          CFI Block cfiBlock57 Using cfiCommon0
          CFI Function zcl_SendReadRsp
        CODE
// 1001                            uint16 clusterID, zclReadRspCmd_t *readRspCmd,
// 1002                            uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1003 {
        FUNCALL zcl_SendReadRsp, zclGetAttrDataLengthUsingCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendReadRsp, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendReadRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendReadRsp, zclReadAttrDataUsingCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendReadRsp, zclSerializeData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendReadRsp, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendReadRsp, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x17
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 23)
        ; Saved register size: 23
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     ?V0 + 3,R1
        MOV     ?V0 + 6,R4
        MOV     ?V0 + 7,R5
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 14,A
        MOV     A,#0x1e
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 13,A
        MOV     A,#0x1f
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 12,A
// 1004   uint8 *buf;
// 1005   uint16 len = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
// 1006   ZStatus_t status;
// 1007   uint8 i;
// 1008 
// 1009   // calculate the size of the command
// 1010   for ( i = 0; i < readRspCmd->numAttr; i++ )
        MOV     ?V0 + 2,R6
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine141_0 & 0xFFFF
??CrossCallReturnLabel_315:
        SJMP    ??zcl_SendReadRsp_0
// 1011   {
// 1012     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 1013 
// 1014     len += 2 + 1; // Attribute ID + Status
// 1015 
// 1016     if ( statusRec->status == ZCL_STATUS_SUCCESS )
// 1017     {
// 1018       len++; // Attribute Data Type length
// 1019 
// 1020       // Attribute Data length
// 1021       if ( statusRec->data != NULL )
// 1022       {
// 1023         len += zclGetAttrDataLength( statusRec->dataType, statusRec->data );
// 1024       }
// 1025       else
// 1026       {
// 1027         len += zclGetAttrDataLengthUsingCB( srcEP, clusterID, statusRec->attrID );
??zcl_SendReadRsp_1:
        ; Setup parameters for call to function zclGetAttrDataLengthUsingCB
        LCALL   ?Subroutine55 & 0xFFFF
// 1028       }
??CrossCallReturnLabel_65:
        LCALL   ??zclGetAttrDataLengthUsingCB?relay
??zcl_SendReadRsp_2:
        LCALL   ?Subroutine105 & 0xFFFF
??CrossCallReturnLabel_158:
        INC     ?V0 + 2
??zcl_SendReadRsp_0:
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_238:
        JNC     ??zcl_SendReadRsp_3
        MOV     A,?V0 + 2
        MOV     B,#0x6
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,?V0 + 8
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V0 + 9
        LCALL   ?Subroutine80 & 0xFFFF
??CrossCallReturnLabel_109:
        MOV     A,R6
        ADD     A,#0x3
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??CrossCallReturnLabel_158
        MOV     A,R6
        ADD     A,#0x1
        INC     R6
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine116_0 & 0xFFFF
??CrossCallReturnLabel_169:
        MOV     DPL,R0
        MOV     DPH,R1
        JZ      ??zcl_SendReadRsp_1
        ; Setup parameters for call to function zclGetAttrDataLength
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??zclGetAttrDataLength?relay
        SJMP    ??zcl_SendReadRsp_2
// 1029     }
// 1030   }
// 1031 
// 1032   buf = zcl_mem_alloc( len );
??zcl_SendReadRsp_3:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
// 1033   if ( buf != NULL )
        MOV     A,R2
        ORL     A,?V0 + 5
        JNZ     $+5
        LJMP    ??zcl_SendReadRsp_4 & 0xFFFF
// 1034   {
// 1035     // Load the buffer - serially
// 1036     uint8 *pBuf = buf;
// 1037 
// 1038     for ( i = 0; i < readRspCmd->numAttr; i++ )
        MOV     ?V0 + 2,#0x0
        SJMP    ??zcl_SendReadRsp_5
// 1039     {
// 1040       zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 1041 
// 1042       *pBuf++ = LO_UINT16( statusRec->attrID );
// 1043       *pBuf++ = HI_UINT16( statusRec->attrID );
// 1044       *pBuf++ = statusRec->status;
// 1045 
// 1046       if ( statusRec->status == ZCL_STATUS_SUCCESS )
// 1047       {
// 1048         *pBuf++ = statusRec->dataType;
// 1049 
// 1050         if ( statusRec->data != NULL )
// 1051         {
// 1052           // Copy attribute data to the buffer to be sent out
// 1053           pBuf = zclSerializeData( statusRec->dataType, statusRec->data, pBuf );
// 1054         }
// 1055         else
// 1056         {
// 1057           uint16 dataLen;
// 1058 
// 1059           // Read attribute data directly into the buffer to be sent out
// 1060           zclReadAttrDataUsingCB( srcEP, clusterID, statusRec->attrID, pBuf, &dataLen );
??zcl_SendReadRsp_6:
        ; Setup parameters for call to function zclReadAttrDataUsingCB
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 10,DPL
        MOV     ?V0 + 11,DPH
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine55 & 0xFFFF
??CrossCallReturnLabel_66:
        LCALL   ??zclReadAttrDataUsingCB?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
// 1061           pBuf += dataLen;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine137_0 & 0xFFFF
// 1062         }
??CrossCallReturnLabel_277:
        MOV     A,?V0 + 0
        ADD     A,R0
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,R1
        MOV     ?V0 + 1,A
??zcl_SendReadRsp_7:
        INC     ?V0 + 2
??zcl_SendReadRsp_5:
        LCALL   ?Subroutine46 & 0xFFFF
??CrossCallReturnLabel_239:
        JNC     ??zcl_SendReadRsp_8
        MOV     A,?V0 + 2
        MOV     B,#0x6
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,?V0 + 8
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V0 + 9
        LCALL   ?Subroutine78 & 0xFFFF
??CrossCallReturnLabel_104:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_4:
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_31:
        MOV     A,R2
        ADD     A,#0x2
        MOV     R0,A
        LCALL   ?Subroutine75 & 0xFFFF
??CrossCallReturnLabel_160:
        LCALL   ?Subroutine30 & 0xFFFF
??CrossCallReturnLabel_32:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        JNZ     ??zcl_SendReadRsp_7
        MOV     A,R2
        ADD     A,#0x3
        INC     R0
        LCALL   ?Subroutine75 & 0xFFFF
??CrossCallReturnLabel_161:
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_5:
        LCALL   ??Subroutine142_0 & 0xFFFF
??CrossCallReturnLabel_328:
        MOV     DPL,R4
        MOV     DPH,R5
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??zcl_SendReadRsp_6
        ; Setup parameters for call to function zclSerializeData
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??zclSerializeData?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        SJMP    ??zcl_SendReadRsp_7
// 1063       }
// 1064     } // for loop
// 1065 
// 1066     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_RSP, FALSE,
// 1067                               direction, disableDefaultRsp, 0, seqNum, len, buf );
??zcl_SendReadRsp_8:
        ; Setup parameters for call to function zcl_SendCommand
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     ?V0 + 0,R6
        MOV     ?V0 + 1,R7
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,?V0 + 12
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 32)
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,?V0 + 13
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     A,?V0 + 14
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine140_0 & 0xFFFF
??CrossCallReturnLabel_293:
        MOV     R1,?V0 + 3
        LCALL   ??zcl_SendCommand?relay
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R1
        MOV     R6,A
// 1068     zcl_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ??osal_mem_free?relay
        SJMP    ??zcl_SendReadRsp_9
// 1069   }
// 1070   else
// 1071   {
// 1072     status = ZMemError;
??zcl_SendReadRsp_4:
        MOV     R6,#0x10
// 1073   }
// 1074 
// 1075   return ( status );
??zcl_SendReadRsp_9:
        MOV     A,R6
        MOV     R1,A
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R7,#0xf
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock57
// 1076 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine105:
          CFI Block cfiCond58 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_158
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function zclParseInReadRspCmd
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_107
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+0
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function zclParseInWriteCmd
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_108
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond60) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond60) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond60) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond60) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond60) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+0
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker61 Using cfiCommon1
          CFI (cfiPicker61) NoFunction
          CFI (cfiPicker61) Picker
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiPicker61
        REQUIRE ??Subroutine114_0
        ; // Fall through to label ??Subroutine114_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine114_0:
          CFI Block cfiCond62 Using cfiCommon0
          CFI Function zclParseInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function zclParseInWriteCmd
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_157, ??CrossCallReturnLabel_7
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond63) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond63) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond63) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+0
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function zcl_SendReadRsp
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_158
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond64) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond64) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond64) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond64) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+0
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function zclParseInReadRspCmd
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_107
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond65) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond65) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond65) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+0
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function zclParseInWriteCmd
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_156, ??CrossCallReturnLabel_108
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond66) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond66) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond66) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond66) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond66) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond66) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+0
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker67 Using cfiCommon1
          CFI (cfiPicker67) NoFunction
          CFI (cfiPicker67) Picker
        MOV     A,R6
        ADD     A,?V0 + 0
        MOV     R6,A
        MOV     A,R7
        ADDC    A,?V0 + 1
        MOV     R7,A
        RET
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiPicker67

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine75:
          CFI Block cfiCond68 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_160
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond69 Using cfiCommon0
          CFI (cfiCond69) Function zcl_SendReadRsp
          CFI (cfiCond69) Conditional ??CrossCallReturnLabel_161
          CFI (cfiCond69) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond69) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond69) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond69) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond69) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond69) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond69) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond69) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond69) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond69) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond69) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond69) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond69) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond69) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond69) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond69) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond69) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond69) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond69) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond69) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond69) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond69) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond69) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond69) CFA_SP SP+0
          CFI (cfiCond69) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiPicker70 Using cfiCommon1
          CFI (cfiPicker70) NoFunction
          CFI (cfiPicker70) Picker
        MOV     A,R3
          CFI EndBlock cfiCond68
          CFI EndBlock cfiCond69
          CFI EndBlock cfiPicker70
        REQUIRE ??Subroutine115_0
        ; // Fall through to label ??Subroutine115_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine115_0:
          CFI Block cfiCond71 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_159
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond72 Using cfiCommon0
          CFI (cfiCond72) Function zcl_SendReadRsp
          CFI (cfiCond72) Conditional ??CrossCallReturnLabel_160
          CFI (cfiCond72) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond72) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond72) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond72) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond72) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond72) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond72) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond72) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond72) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond72) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond72) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond72) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond72) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond72) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond72) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond72) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond72) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond72) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond72) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond72) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond72) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond72) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond72) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond72) CFA_SP SP+0
          CFI (cfiCond72) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function zcl_SendReadRsp
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_161
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond73) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond73) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+0
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiPicker74 Using cfiCommon1
          CFI (cfiPicker74) NoFunction
          CFI (cfiPicker74) Picker
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
          CFI EndBlock cfiCond71
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiPicker74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine55:
          CFI Block cfiCond75 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_65
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function zcl_SendReadRsp
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond76) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond76) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+0
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiPicker77 Using cfiCommon1
          CFI (cfiPicker77) NoFunction
          CFI (cfiPicker77) Picker
        LCALL   ??Subroutine145_0 & 0xFFFF
??CrossCallReturnLabel_331:
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        MOV     R1,?V0 + 3
        RET
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiPicker77

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine33:
          CFI Block cfiCond78 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_162
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond79 Using cfiCommon0
          CFI (cfiCond79) Function zcl_registerAttrList
          CFI (cfiCond79) Conditional ??CrossCallReturnLabel_163
          CFI (cfiCond79) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond79) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond79) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond79) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond79) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond79) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond79) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond79) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond79) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond79) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond79) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond79) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond79) CFA_SP SP+0
          CFI (cfiCond79) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond80 Using cfiCommon0
          CFI (cfiCond80) Function zcl_registerClusterOptionList
          CFI (cfiCond80) Conditional ??CrossCallReturnLabel_164
          CFI (cfiCond80) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond80) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond80) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond80) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond80) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond80) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond80) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond80) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond80) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond80) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond80) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond80) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond80) CFA_SP SP+0
          CFI (cfiCond80) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker81 Using cfiCommon1
          CFI (cfiPicker81) NoFunction
          CFI (cfiPicker81) Picker
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
          CFI EndBlock cfiCond78
          CFI EndBlock cfiCond79
          CFI EndBlock cfiCond80
          CFI EndBlock cfiPicker81
        REQUIRE ??Subroutine116_0
        ; // Fall through to label ??Subroutine116_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine116_0:
          CFI Block cfiCond82 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_166
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function zcl_registerAttrList
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_167
          CFI (cfiCond83) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond83) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond83) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond83) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond83) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond83) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond83) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond83) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond83) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond83) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond83) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond83) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond83) CFA_SP SP+0
          CFI (cfiCond83) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function zcl_registerClusterOptionList
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_168
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+0
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function zcl_SendReadRsp
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_169
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond85) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond85) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond85) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond85) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond85) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond85) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond85) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond85) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond85) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond85) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+0
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function zclFindAttrRecsList
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_165
          CFI (cfiCond86) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond86) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond86) CFA_SP SP+-5
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function zclReadAttrData
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_170
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+0
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_171
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond88) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond88) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond88) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond88) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond88) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond88) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond88) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+0
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function zcl_registerPlugin
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_162
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+0
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function zcl_registerAttrList
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_163
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+0
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function zcl_registerClusterOptionList
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_164
          CFI (cfiCond91) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond91) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond91) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond91) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond91) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond91) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond91) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond91) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond91) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond91) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond91) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond91) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond91) CFA_SP SP+0
          CFI (cfiCond91) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker92 Using cfiCommon1
          CFI (cfiPicker92) NoFunction
          CFI (cfiPicker92) Picker
        LCALL   ?Subroutine93 & 0xFFFF
??CrossCallReturnLabel_312:
        MOV     A,R2
        ORL     A,R3
        RET
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiPicker92

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine30:
          CFI Block cfiCond93 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function zcl_SendReadRsp
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_32
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond94) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond94) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond94) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+0
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiPicker95 Using cfiCommon1
          CFI (cfiPicker95) NoFunction
          CFI (cfiPicker95) Picker
        LCALL   ?Subroutine89 & 0xFFFF
??CrossCallReturnLabel_126:
        RET
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiPicker95

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine89:
          CFI Block cfiCond96 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_31
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond97 Using cfiCommon0
          CFI (cfiCond97) Function zcl_SendReadRsp
          CFI (cfiCond97) Conditional ??CrossCallReturnLabel_126, ??CrossCallReturnLabel_32
          CFI (cfiCond97) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond97) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond97) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond97) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond97) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond97) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond97) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond97) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond97) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond97) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond97) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond97) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond97) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond97) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond97) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond97) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond97) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond97) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond97) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond97) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond97) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond97) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond97) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond97) CFA_SP SP+0
          CFI (cfiCond97) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function zcl_SendReadRsp
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_125, ??CrossCallReturnLabel_4
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond98) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond98) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond98) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+0
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond99 Using cfiCommon0
          CFI (cfiCond99) Function zcl_SendReadRsp
          CFI (cfiCond99) Conditional ??CrossCallReturnLabel_125, ??CrossCallReturnLabel_5
          CFI (cfiCond99) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond99) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond99) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond99) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond99) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond99) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond99) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond99) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond99) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond99) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond99) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond99) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond99) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond99) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond99) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond99) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond99) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond99) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond99) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond99) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond99) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond99) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond99) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond99) CFA_SP SP+0
          CFI (cfiCond99) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiPicker100 Using cfiCommon1
          CFI (cfiPicker100) NoFunction
          CFI (cfiPicker100) Picker
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        RET
          CFI EndBlock cfiCond96
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiCond99
          CFI EndBlock cfiPicker100

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond101 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function zcl_SendReadRsp
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond102) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond102) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond102) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond102) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond102) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond102) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond102) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond102) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond102) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond102) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond102) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond102) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond102) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond102) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond102) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond102) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond102) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond102) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond102) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond102) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond102) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond102) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond102) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond102) CFA_SP SP+0
          CFI (cfiCond102) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiPicker103 Using cfiCommon1
          CFI (cfiPicker103) NoFunction
          CFI (cfiPicker103) Picker
        LCALL   ?Subroutine89 & 0xFFFF
??CrossCallReturnLabel_125:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        RET
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiPicker103
// 1077 #endif // ZCL_READ
// 1078 
// 1079 #ifdef ZCL_WRITE
// 1080 /*********************************************************************
// 1081  * @fn      sendWriteRequest
// 1082  *
// 1083  * @brief   Send a Write command
// 1084  *
// 1085  * @param   dstAddr - destination address
// 1086  * @param   clusterID - cluster ID
// 1087  * @param   writeCmd - write command to be sent
// 1088  * @param   cmd - ZCL_CMD_WRITE, ZCL_CMD_WRITE_UNDIVIDED or ZCL_CMD_WRITE_NO_RSP
// 1089  * @param   direction - direction of the command
// 1090  * @param   seqNum - transaction sequence number
// 1091  *
// 1092  * @return  ZSuccess if OK
// 1093  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1094 ZStatus_t zcl_SendWriteRequest( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
zcl_SendWriteRequest:
          CFI Block cfiBlock104 Using cfiCommon0
          CFI Function zcl_SendWriteRequest
        CODE
// 1095                                 zclWriteCmd_t *writeCmd, uint8 cmd, uint8 direction,
// 1096                                 uint8 disableDefaultRsp, uint8 seqNum )
// 1097 {
        FUNCALL zcl_SendWriteRequest, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendWriteRequest, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendWriteRequest, zclSerializeData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendWriteRequest, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 35, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 35, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendWriteRequest, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 0
        MOV     ?V0 + 11,R1
        MOV     ?V0 + 14,R2
        MOV     ?V0 + 15,R3
        MOV     ?V0 + 12,R4
        MOV     ?V0 + 13,R5
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 10,A
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
// 1098   uint8 *buf;
// 1099   uint16 dataLen = 0;
        MOV     R6,#0x0
        MOV     R7,#0x0
// 1100   ZStatus_t status;
// 1101   uint8 i;
// 1102 
// 1103   for ( i = 0; i < writeCmd->numAttr; i++ )
        MOV     ?V0 + 2,R6
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine59 & 0xFFFF
??CrossCallReturnLabel_69:
        SJMP    ??zcl_SendWriteRequest_0
// 1104   {
// 1105     zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
??zcl_SendWriteRequest_1:
        MOV     A,?V0 + 2
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,?V0 + 4
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V0 + 5
        LCALL   ?Subroutine80 & 0xFFFF
// 1106 
// 1107     dataLen += 2 + 1; // Attribute ID + Attribute Type
// 1108 
// 1109     // Attribute Data
// 1110     dataLen += zclGetAttrDataLength( statusRec->dataType, statusRec->attrData );
??CrossCallReturnLabel_110:
        ; Setup parameters for call to function zclGetAttrDataLength
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine57 & 0xFFFF
// 1111   }
??CrossCallReturnLabel_67:
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??zclGetAttrDataLength?relay
        MOV     A,R2
        ADD     A,#0x3
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R6
        ADD     A,R0
        MOV     R6,A
        MOV     A,R7
        ADDC    A,R1
        MOV     R7,A
        INC     ?V0 + 2
??zcl_SendWriteRequest_0:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ??Subroutine129_0 & 0xFFFF
??CrossCallReturnLabel_235:
        JC      ??zcl_SendWriteRequest_1
// 1112 
// 1113   buf = zcl_mem_alloc( dataLen );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
// 1114   if ( buf != NULL )
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??zcl_SendWriteRequest_2 & 0xFFFF
// 1115   {
// 1116     // Load the buffer - serially
// 1117     uint8 *pBuf = buf;
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
// 1118     for ( i = 0; i < writeCmd->numAttr; i++ )
        MOV     ?V0 + 2,#0x0
        SJMP    ??zcl_SendWriteRequest_3
// 1119     {
// 1120       zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
??zcl_SendWriteRequest_4:
        MOV     A,?V0 + 2
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,?V0 + 4
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V0 + 5
        LCALL   ?Subroutine78 & 0xFFFF
// 1121 
// 1122       *pBuf++ = LO_UINT16( statusRec->attrID );
??CrossCallReturnLabel_105:
        LCALL   ?Subroutine19 & 0xFFFF
// 1123       *pBuf++ = HI_UINT16( statusRec->attrID );
??CrossCallReturnLabel_14:
        LCALL   ??Subroutine120_0 & 0xFFFF
// 1124       *pBuf++ = statusRec->dataType;
??CrossCallReturnLabel_183:
        LCALL   ?Subroutine26 & 0xFFFF
// 1125 
// 1126       pBuf = zclSerializeData( statusRec->dataType, statusRec->attrData, pBuf );
??CrossCallReturnLabel_185:
        ; Setup parameters for call to function zclSerializeData
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine139_0 & 0xFFFF
// 1127     }
??CrossCallReturnLabel_302:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??zclSerializeData?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     R4,?V0 + 8
        MOV     R5,?V0 + 9
        INC     ?V0 + 2
??zcl_SendWriteRequest_3:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ??Subroutine129_0 & 0xFFFF
??CrossCallReturnLabel_236:
        JC      ??zcl_SendWriteRequest_4
// 1128 
// 1129     status = zcl_SendCommand( srcEP, dstAddr, clusterID, cmd, FALSE,
// 1130                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
        ; Setup parameters for call to function zcl_SendCommand
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,?V0 + 3
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 29)
        CLR     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,?V0 + 6
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,?V0 + 7
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,?V0 + 10
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     R4,?V0 + 12
        MOV     R5,?V0 + 13
        MOV     R2,?V0 + 14
        MOV     R3,?V0 + 15
        MOV     R1,?V0 + 11
        LCALL   ??zcl_SendCommand?relay
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R1
        MOV     R6,A
// 1131     zcl_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_mem_free?relay
        SJMP    ??zcl_SendWriteRequest_5
// 1132   }
// 1133   else
// 1134   {
// 1135     status = ZMemError;
??zcl_SendWriteRequest_2:
        MOV     R6,#0x10
// 1136   }
// 1137 
// 1138   return ( status);
??zcl_SendWriteRequest_5:
        MOV     A,R6
        MOV     R1,A
        LJMP    ??Subroutine132_0 & 0xFFFF
          CFI EndBlock cfiBlock104
// 1139 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine80:
          CFI Block cfiCond105 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_109
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function zcl_SendWriteRequest
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond106) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond106) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond106) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond106) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+0
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker107 Using cfiCommon1
          CFI (cfiPicker107) NoFunction
          CFI (cfiPicker107) Picker
        ADDC    A,R1
        MOV     DPH,A
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        RET
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiPicker107

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine78:
          CFI Block cfiCond108 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_104
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function zcl_SendWriteRequest
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_105
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond109) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond109) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond109) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond109) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond109) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+0
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function zclProcessInReadCmd
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond110) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond110) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond110) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond110) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond110) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond110) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond110) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond110) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond110) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond110) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond110) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond110) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond110) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond110) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond110) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond110) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond110) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond110) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond110) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond110) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond110) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond110) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond110) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond110) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond110) CFA_SP SP+0
          CFI (cfiCond110) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker111 Using cfiCommon1
          CFI (cfiPicker111) NoFunction
          CFI (cfiPicker111) Picker
        ADDC    A,R1
        MOV     DPH,A
        INC     DPTR
        MOV     R2,DPL
        MOV     R3,DPH
        RET
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiPicker111
// 1140 
// 1141 /*********************************************************************
// 1142  * @fn      zcl_SendWriteRsp
// 1143  *
// 1144  * @brief   Send a Write Response command
// 1145  *
// 1146  * @param   dstAddr - destination address
// 1147  * @param   clusterID - cluster ID
// 1148  * @param   wrtieRspCmd - write response command to be sent
// 1149  * @param   direction - direction of the command
// 1150  * @param   seqNum - transaction sequence number
// 1151  *
// 1152  * @return  ZSuccess if OK
// 1153  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1154 ZStatus_t zcl_SendWriteRsp( uint8 srcEP, afAddrType_t *dstAddr,
zcl_SendWriteRsp:
          CFI Block cfiBlock112 Using cfiCommon0
          CFI Function zcl_SendWriteRsp
        CODE
// 1155                             uint16 clusterID, zclWriteRspCmd_t *writeRspCmd,
// 1156                             uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1157 {
        FUNCALL zcl_SendWriteRsp, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendWriteRsp, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_SendWriteRsp, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 12,R2
        MOV     ?V0 + 13,R3
        MOV     ?V0 + 10,R4
        MOV     ?V0 + 11,R5
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine51 & 0xFFFF
// 1158   uint16 dataLen;
// 1159   uint8 *buf;
// 1160   ZStatus_t status;
// 1161 
// 1162   dataLen = writeRspCmd->numAttr * ( 1 + 2 ); // status + attribute id
??CrossCallReturnLabel_60:
        MOV     B,#0x3
        MUL     AB
        MOV     R6,A
        MOV     R7,B
// 1163 
// 1164   buf = zcl_mem_alloc( dataLen );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
// 1165   if ( buf != NULL )
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??zcl_SendWriteRsp_0 & 0xFFFF
// 1166   {
// 1167     // Load the buffer - serially
// 1168     uint8 i;
// 1169     uint8 *pBuf = buf;
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
// 1170     for ( i = 0; i < writeRspCmd->numAttr; i++ )
        MOV     ?V0 + 8,#0x0
        SJMP    ??zcl_SendWriteRsp_1
// 1171     {
// 1172       *pBuf++ = writeRspCmd->attrList[i].status;
??zcl_SendWriteRsp_2:
        MOV     A,?V0 + 8
        MOV     B,#0x3
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        MOV     A,?V0 + 4
        ADD     A,R2
        MOV     R2,A
        MOV     A,?V0 + 5
        ADDC    A,R3
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        LCALL   ?Subroutine60 & 0xFFFF
// 1173       *pBuf++ = LO_UINT16( writeRspCmd->attrList[i].attrID );
??CrossCallReturnLabel_73:
        MOV     A,R2
        ADD     A,#0x2
        MOV     R4,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine112_0 & 0xFFFF
// 1174       *pBuf++ = HI_UINT16( writeRspCmd->attrList[i].attrID );
??CrossCallReturnLabel_153:
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine43 & 0xFFFF
// 1175     }
??CrossCallReturnLabel_155:
        INC     ?V0 + 8
??zcl_SendWriteRsp_1:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,?V0 + 8
        CLR     C
        SUBB    A,R2
        JC      ??zcl_SendWriteRsp_2
// 1176 
// 1177     // If there's only a single status record and its status field is set to
// 1178     // SUCCESS then omit the attribute ID field.
// 1179     if ( writeRspCmd->numAttr == 1 && writeRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
        MOV     A,#0x1
        XRL     A,R2
        JNZ     ??zcl_SendWriteRsp_3
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??zcl_SendWriteRsp_3
// 1180     {
// 1181       dataLen = 1;
        MOV     R6,#0x1
        MOV     R7,#0x0
// 1182     }
// 1183 
// 1184     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_WRITE_RSP, FALSE,
// 1185                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
??zcl_SendWriteRsp_3:
        ; Setup parameters for call to function zcl_SendCommand
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,?V0 + 7
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        CLR     A
        MOV     ?V0 + 4,A
        MOV     ?V0 + 5,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     A,?V0 + 6
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     R0,#?V0 + 3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     ?V0 + 3,#0x4
        MOV     R0,#?V0 + 3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     R4,?V0 + 10
        MOV     R5,?V0 + 11
        MOV     R2,?V0 + 12
        MOV     R3,?V0 + 13
        MOV     R1,?V0 + 2
        LCALL   ??zcl_SendCommand?relay
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,R1
        MOV     R6,A
// 1186     zcl_mem_free( buf );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_mem_free?relay
        SJMP    ??zcl_SendWriteRsp_4
// 1187   }
// 1188   else
// 1189   {
// 1190     status = ZMemError;
??zcl_SendWriteRsp_0:
        MOV     R6,#0x10
// 1191   }
// 1192 
// 1193   return ( status );
??zcl_SendWriteRsp_4:
        LJMP    ?Subroutine9 & 0xFFFF
          CFI EndBlock cfiBlock112
// 1194 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine60:
          CFI Block cfiCond113 Using cfiCommon0
          CFI Function zcl_SendRead
          CFI Conditional ??CrossCallReturnLabel_72
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond114 Using cfiCommon0
          CFI (cfiCond114) Function zcl_SendWriteRsp
          CFI (cfiCond114) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond114) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond114) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond114) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond114) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond114) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond114) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond114) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond114) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond114) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond114) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond114) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond114) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond114) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond114) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond114) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond114) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond114) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond114) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond114) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond114) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond114) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond114) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond114) CFA_SP SP+0
          CFI (cfiCond114) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker115 Using cfiCommon1
          CFI (cfiPicker115) NoFunction
          CFI (cfiPicker115) Picker
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        RET
          CFI EndBlock cfiCond113
          CFI EndBlock cfiCond114
          CFI EndBlock cfiPicker115

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine51:
          CFI Block cfiCond116 Using cfiCommon0
          CFI Function zcl_SendRead
          CFI Conditional ??CrossCallReturnLabel_59
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function zcl_SendWriteRsp
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond117) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond117) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond117) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond117) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond117) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond117) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond117) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond117) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond117) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond117) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond117) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond117) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond117) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond117) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond117) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond117) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond117) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond117) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond117) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond117) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond117) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond117) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond117) CFA_SP SP+0
          CFI (cfiCond117) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker118 Using cfiCommon1
          CFI (cfiPicker118) NoFunction
          CFI (cfiPicker118) Picker
        LCALL   ?Subroutine92 & 0xFFFF
??CrossCallReturnLabel_129:
        MOV     DPL,?V0 + 4
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond116
          CFI EndBlock cfiCond117
          CFI EndBlock cfiPicker118
// 1195 #endif // ZCL_WRITE
// 1196 
// 1197 #ifdef ZCL_REPORT
// 1198 /*********************************************************************
// 1199  * @fn      zcl_SendConfigReportCmd
// 1200  *
// 1201  * @brief   Send a Configure Reporting command
// 1202  *
// 1203  * @param   dstAddr - destination address
// 1204  * @param   clusterID - cluster ID
// 1205  * @param   cfgReportCmd - configure reporting command to be sent
// 1206  * @param   direction - direction of the command
// 1207  * @param   seqNum - transaction sequence number
// 1208  *
// 1209  * @return  ZSuccess if OK
// 1210  */
// 1211 ZStatus_t zcl_SendConfigReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1212                           uint16 clusterID, zclCfgReportCmd_t *cfgReportCmd,
// 1213                           uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1214 {
// 1215   uint8 *buf;
// 1216   uint16 dataLen = 0;
// 1217   ZStatus_t status;
// 1218   uint8 i;
// 1219 
// 1220   // Find out the data length
// 1221   for ( i = 0; i < cfgReportCmd->numAttr; i++ )
// 1222   {
// 1223     zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
// 1224 
// 1225     dataLen += 1 + 2; // Direction + Attribute ID
// 1226 
// 1227     if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
// 1228     {
// 1229       dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
// 1230 
// 1231       // Find out the size of the Reportable Change field (for Analog data types)
// 1232       if ( zclAnalogDataType( reportRec->dataType ) )
// 1233       {
// 1234         dataLen += zclGetDataTypeLength( reportRec->dataType );
// 1235       }
// 1236     }
// 1237     else
// 1238     {
// 1239       dataLen += 2; // Timeout Period
// 1240     }
// 1241   }
// 1242 
// 1243   buf = zcl_mem_alloc( dataLen );
// 1244   if ( buf != NULL )
// 1245   {
// 1246     // Load the buffer - serially
// 1247     uint8 *pBuf = buf;
// 1248 
// 1249     for ( i = 0; i < cfgReportCmd->numAttr; i++ )
// 1250     {
// 1251       zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
// 1252 
// 1253       *pBuf++ = reportRec->direction;
// 1254       *pBuf++ = LO_UINT16( reportRec->attrID );
// 1255       *pBuf++ = HI_UINT16( reportRec->attrID );
// 1256 
// 1257       if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
// 1258       {
// 1259         *pBuf++ = reportRec->dataType;
// 1260         *pBuf++ = LO_UINT16( reportRec->minReportInt );
// 1261         *pBuf++ = HI_UINT16( reportRec->minReportInt );
// 1262         *pBuf++ = LO_UINT16( reportRec->maxReportInt );
// 1263         *pBuf++ = HI_UINT16( reportRec->maxReportInt );
// 1264 
// 1265         if ( zclAnalogDataType( reportRec->dataType ) )
// 1266         {
// 1267           pBuf = zclSerializeData( reportRec->dataType, reportRec->reportableChange, pBuf );
// 1268         }
// 1269       }
// 1270       else
// 1271       {
// 1272         *pBuf++ = LO_UINT16( reportRec->timeoutPeriod );
// 1273         *pBuf++ = HI_UINT16( reportRec->timeoutPeriod );
// 1274       }
// 1275     } // for loop
// 1276 
// 1277     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_CONFIG_REPORT, FALSE,
// 1278                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1279     zcl_mem_free( buf );
// 1280   }
// 1281   else
// 1282   {
// 1283     status = ZMemError;
// 1284   }
// 1285 
// 1286   return ( status );
// 1287 }
// 1288 
// 1289 /*********************************************************************
// 1290  * @fn      zcl_SendConfigReportRspCmd
// 1291  *
// 1292  * @brief   Send a Configure Reporting Response command
// 1293  *
// 1294  * @param   dstAddr - destination address
// 1295  * @param   clusterID - cluster ID
// 1296  * @param   cfgReportRspCmd - configure reporting response command to be sent
// 1297  * @param   direction - direction of the command
// 1298  * @param   seqNum - transaction sequence number
// 1299  *
// 1300  * @return  ZSuccess if OK
// 1301  */
// 1302 ZStatus_t zcl_SendConfigReportRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1303                     uint16 clusterID, zclCfgReportRspCmd_t *cfgReportRspCmd,
// 1304                     uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1305 {
// 1306   uint16 dataLen;
// 1307   uint8 *buf;
// 1308   ZStatus_t status;
// 1309 
// 1310   // Atrribute list (Status, Direction and Attribute ID)
// 1311   dataLen = cfgReportRspCmd->numAttr * ( 1 + 1 + 2 );
// 1312 
// 1313   buf = zcl_mem_alloc( dataLen );
// 1314   if ( buf != NULL )
// 1315   {
// 1316     // Load the buffer - serially
// 1317     uint8 *pBuf = buf;
// 1318     uint8 i;
// 1319 
// 1320     for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
// 1321     {
// 1322       *pBuf++ = cfgReportRspCmd->attrList[i].status;
// 1323       *pBuf++ = cfgReportRspCmd->attrList[i].direction;
// 1324       *pBuf++ = LO_UINT16( cfgReportRspCmd->attrList[i].attrID );
// 1325       *pBuf++ = HI_UINT16( cfgReportRspCmd->attrList[i].attrID );
// 1326     }
// 1327 
// 1328     // If there's only a single status record and its status field is set to
// 1329     // SUCCESS then omit the attribute ID field.
// 1330     if ( cfgReportRspCmd->numAttr == 1 && cfgReportRspCmd->attrList[0].status == ZCL_STATUS_SUCCESS )
// 1331     {
// 1332       dataLen = 1;
// 1333     }
// 1334 
// 1335     status = zcl_SendCommand( srcEP, dstAddr, clusterID,
// 1336                               ZCL_CMD_CONFIG_REPORT_RSP, FALSE, direction,
// 1337                               disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1338     zcl_mem_free( buf );
// 1339   }
// 1340   else
// 1341   {
// 1342     status = ZMemError;
// 1343   }
// 1344 
// 1345   return ( status );
// 1346 }
// 1347 
// 1348 /*********************************************************************
// 1349  * @fn      zcl_SendReadReportCfgCmd
// 1350  *
// 1351  * @brief   Send a Read Reporting Configuration command
// 1352  *
// 1353  * @param   dstAddr - destination address
// 1354  * @param   clusterID - cluster ID
// 1355  * @param   readReportCfgCmd - read reporting configuration command to be sent
// 1356  * @param   direction - direction of the command
// 1357  * @param   seqNum - transaction sequence number
// 1358  *
// 1359  * @return  ZSuccess if OK
// 1360  */
// 1361 ZStatus_t zcl_SendReadReportCfgCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1362                   uint16 clusterID, zclReadReportCfgCmd_t *readReportCfgCmd,
// 1363                   uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1364 {
// 1365   uint16 dataLen;
// 1366   uint8 *buf;
// 1367   ZStatus_t status;
// 1368 
// 1369   dataLen = readReportCfgCmd->numAttr * ( 1 + 2 ); // Direction + Atrribute ID
// 1370 
// 1371   buf = zcl_mem_alloc( dataLen );
// 1372   if ( buf != NULL )
// 1373   {
// 1374     // Load the buffer - serially
// 1375     uint8 *pBuf = buf;
// 1376     uint8 i;
// 1377 
// 1378     for ( i = 0; i < readReportCfgCmd->numAttr; i++ )
// 1379     {
// 1380       *pBuf++ = readReportCfgCmd->attrList[i].direction;
// 1381       *pBuf++ = LO_UINT16( readReportCfgCmd->attrList[i].attrID );
// 1382       *pBuf++ = HI_UINT16( readReportCfgCmd->attrList[i].attrID );
// 1383     }
// 1384 
// 1385     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_READ_REPORT_CFG, FALSE,
// 1386                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1387     zcl_mem_free( buf );
// 1388   }
// 1389   else
// 1390   {
// 1391     status = ZMemError;
// 1392   }
// 1393 
// 1394   return ( status );
// 1395 }
// 1396 
// 1397 /*********************************************************************
// 1398  * @fn      zcl_SendReadReportCfgRspCmd
// 1399  *
// 1400  * @brief   Send a Read Reporting Configuration Response command
// 1401  *
// 1402  * @param   dstAddr - destination address
// 1403  * @param   clusterID - cluster ID
// 1404  * @param   readReportCfgRspCmd - read reporting configuration response command to be sent
// 1405  * @param   direction - direction of the command
// 1406  * @param   seqNum - transaction sequence number
// 1407  *
// 1408  * @return  ZSuccess if OK
// 1409  */
// 1410 ZStatus_t zcl_SendReadReportCfgRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1411              uint16 clusterID, zclReadReportCfgRspCmd_t *readReportCfgRspCmd,
// 1412              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1413 {
// 1414   uint8 *buf;
// 1415   uint16 dataLen = 0;
// 1416   ZStatus_t status;
// 1417   uint8 i;
// 1418 
// 1419   // Find out the data length
// 1420   for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
// 1421   {
// 1422     zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
// 1423 
// 1424     dataLen += 1 + 1 + 2 ; // Status, Direction and Atrribute ID
// 1425 
// 1426     if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
// 1427     {
// 1428       if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
// 1429       {
// 1430         dataLen += 1 + 2 + 2; // Data Type + Min + Max Reporting Intervals
// 1431 
// 1432         // Find out the size of the Reportable Change field (for Analog data types)
// 1433         if ( zclAnalogDataType( reportRspRec->dataType ) )
// 1434         {
// 1435           dataLen += zclGetDataTypeLength( reportRspRec->dataType );
// 1436         }
// 1437       }
// 1438       else
// 1439       {
// 1440         dataLen += 2; // Timeout Period
// 1441       }
// 1442     }
// 1443   }
// 1444 
// 1445   buf = zcl_mem_alloc( dataLen );
// 1446   if ( buf != NULL )
// 1447   {
// 1448     // Load the buffer - serially
// 1449     uint8 *pBuf = buf;
// 1450 
// 1451     for ( i = 0; i < readReportCfgRspCmd->numAttr; i++ )
// 1452     {
// 1453       zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
// 1454 
// 1455       *pBuf++ = reportRspRec->status;
// 1456       *pBuf++ = reportRspRec->direction;
// 1457       *pBuf++ = LO_UINT16( reportRspRec->attrID );
// 1458       *pBuf++ = HI_UINT16( reportRspRec->attrID );
// 1459 
// 1460       if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
// 1461       {
// 1462         if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
// 1463         {
// 1464           *pBuf++ = reportRspRec->dataType;
// 1465           *pBuf++ = LO_UINT16( reportRspRec->minReportInt );
// 1466           *pBuf++ = HI_UINT16( reportRspRec->minReportInt );
// 1467           *pBuf++ = LO_UINT16( reportRspRec->maxReportInt );
// 1468           *pBuf++ = HI_UINT16( reportRspRec->maxReportInt );
// 1469 
// 1470           if ( zclAnalogDataType( reportRspRec->dataType ) )
// 1471           {
// 1472             pBuf = zclSerializeData( reportRspRec->dataType,
// 1473                                      reportRspRec->reportableChange, pBuf );
// 1474           }
// 1475         }
// 1476         else
// 1477         {
// 1478           *pBuf++ = LO_UINT16( reportRspRec->timeoutPeriod );
// 1479           *pBuf++ = HI_UINT16( reportRspRec->timeoutPeriod );
// 1480         }
// 1481       }
// 1482     }
// 1483 
// 1484     status = zcl_SendCommand( srcEP, dstAddr, clusterID,
// 1485                               ZCL_CMD_READ_REPORT_CFG_RSP, FALSE,
// 1486                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1487     zcl_mem_free( buf );
// 1488   }
// 1489   else
// 1490   {
// 1491     status = ZMemError;
// 1492   }
// 1493 
// 1494   return ( status );
// 1495 }
// 1496 
// 1497 /*********************************************************************
// 1498  * @fn      zcl_SendReportCmd
// 1499  *
// 1500  * @brief   Send a Report command
// 1501  *
// 1502  * @param   dstAddr - destination address
// 1503  * @param   clusterID - cluster ID
// 1504  * @param   reportCmd - report command to be sent
// 1505  * @param   direction - direction of the command
// 1506  * @param   seqNum - transaction sequence number
// 1507  *
// 1508  * @return  ZSuccess if OK
// 1509  */
// 1510 ZStatus_t zcl_SendReportCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1511                              uint16 clusterID, zclReportCmd_t *reportCmd,
// 1512                              uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1513 {
// 1514   uint16 dataLen = 0;
// 1515   uint8 *buf;
// 1516   ZStatus_t status;
// 1517   uint8 i;
// 1518 
// 1519   // calculate the size of the command
// 1520   for ( i = 0; i < reportCmd->numAttr; i++ )
// 1521   {
// 1522     zclReport_t *reportRec = &(reportCmd->attrList[i]);
// 1523 
// 1524     dataLen += 2 + 1; // Attribute ID + data type
// 1525 
// 1526     // Attribute Data
// 1527     dataLen += zclGetAttrDataLength( reportRec->dataType, reportRec->attrData );
// 1528   }
// 1529 
// 1530   buf = zcl_mem_alloc( dataLen );
// 1531   if ( buf != NULL )
// 1532   {
// 1533     // Load the buffer - serially
// 1534     uint8 *pBuf = buf;
// 1535 
// 1536     for ( i = 0; i < reportCmd->numAttr; i++ )
// 1537     {
// 1538       zclReport_t *reportRec = &(reportCmd->attrList[i]);
// 1539 
// 1540       *pBuf++ = LO_UINT16( reportRec->attrID );
// 1541       *pBuf++ = HI_UINT16( reportRec->attrID );
// 1542       *pBuf++ = reportRec->dataType;
// 1543 
// 1544       pBuf = zclSerializeData( reportRec->dataType, reportRec->attrData, pBuf );
// 1545     }
// 1546 
// 1547     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_REPORT, FALSE,
// 1548                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1549     zcl_mem_free( buf );
// 1550   }
// 1551   else
// 1552   {
// 1553     status = ZMemError;
// 1554   }
// 1555 
// 1556   return ( status );
// 1557 }
// 1558 #endif // ZCL_REPORT
// 1559 
// 1560 /*********************************************************************
// 1561  * @fn      zcl_SendDefaultRspCmd
// 1562  *
// 1563  * @brief   Send a Default Response command
// 1564  *
// 1565  *          Note: The manufacturer code field should be set if this
// 1566  *          command is being sent in response to a manufacturer specific
// 1567  *          command.
// 1568  *
// 1569  * @param   dstAddr - destination address
// 1570  * @param   clusterID - cluster ID
// 1571  * @param   defaultRspCmd - default response command to be sent
// 1572  * @param   direction - direction of the command
// 1573  * @param   manuCode - manufacturer code for proprietary extensions to a profile
// 1574  * @param   seqNum - transaction sequence number
// 1575  *
// 1576  * @return  ZSuccess if OK
// 1577  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1578 ZStatus_t zcl_SendDefaultRspCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
zcl_SendDefaultRspCmd:
          CFI Block cfiBlock119 Using cfiCommon0
          CFI Function zcl_SendDefaultRspCmd
        CODE
// 1579                                  zclDefaultRspCmd_t *defaultRspCmd, uint8 direction,
// 1580                                  uint8 disableDefaultRsp, uint16 manuCode, uint8 seqNum )
// 1581 {
        FUNCALL zcl_SendDefaultRspCmd, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 27, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 27, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R1
        MOV     R6,A
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine66 & 0xFFFF
// 1582   uint8 buf[2]; // Command ID and Status;
// 1583 
// 1584   // Load the buffer - serially
// 1585   buf[0] = defaultRspCmd->commandID;
??CrossCallReturnLabel_85:
        LCALL   ?Subroutine100 & 0xFFFF
// 1586   buf[1] = defaultRspCmd->statusCode;
??CrossCallReturnLabel_141:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1587 
// 1588   return ( zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DEFAULT_RSP, FALSE,
// 1589                             direction, disableDefaultRsp, manuCode, seqNum, 2, buf ) );
        ; Setup parameters for call to function zcl_SendCommand
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 0,#0x2
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,?V0 + 5
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     A,?V0 + 4
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R7
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     ?V0 + 0,#0xb
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     A,R6
        MOV     R1,A
        LCALL   ??zcl_SendCommand?relay
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock119
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
// 1590 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock120 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock120

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine66:
          CFI Block cfiCond121 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_86
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function zcl_SendDefaultRspCmd
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+0
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker123 Using cfiCommon1
          CFI (cfiPicker123) NoFunction
          CFI (cfiPicker123) Picker
        LCALL   ?Subroutine98 & 0xFFFF
??CrossCallReturnLabel_139:
        RET
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiPicker123

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine98:
          CFI Block cfiCond124 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_86
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function zcl_SendDefaultRspCmd
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_139, ??CrossCallReturnLabel_85
          CFI (cfiCond125) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond125) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond125) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond125) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond125) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond125) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond125) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond125) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond125) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond125) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond125) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond125) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond125) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond125) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond125) CFA_SP SP+0
          CFI (cfiCond125) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function zcl_ProcessMessageMSG
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_140, ??CrossCallReturnLabel_54
          CFI (cfiCond126) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond126) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond126) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond126) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond126) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond126) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond126) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond126) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond126) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond126) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond126) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond126) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond126) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond126) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond126) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond126) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond126) CFA_SP SP+0
          CFI (cfiCond126) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function zclReadAttrData
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_140, ??CrossCallReturnLabel_53
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond127) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond127) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond127) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+0
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker128 Using cfiCommon1
          CFI (cfiPicker128) NoFunction
          CFI (cfiPicker128) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiPicker128
// 1591 
// 1592 #ifdef ZCL_DISCOVER
// 1593 /*********************************************************************
// 1594  * @fn      zcl_SendDiscoverCmdsCmd
// 1595  *
// 1596  * @brief   Send a Discover Commands command
// 1597  *
// 1598  * @param   dstAddr - destination address
// 1599  * @param   clusterID - cluster ID
// 1600  * @param   cmdType - requesting command ID
// 1601  * @param   pDiscoverCmd - discover command to be sent
// 1602  * @param   direction - direction of the command
// 1603  * @param   seqNum - transaction sequence number
// 1604  *
// 1605  * @return  ZSuccess if OK
// 1606  */
// 1607 ZStatus_t zcl_SendDiscoverCmdsCmd( uint8 srcEP, afAddrType_t *dstAddr, uint16 clusterID,
// 1608                                   uint8 cmdType, zclDiscoverCmdsCmd_t *pDiscoverCmd,
// 1609                                   uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1610 {
// 1611   uint8 payload[2]; // size of startCmdID and maxCmdID
// 1612   ZStatus_t status;
// 1613 
// 1614   payload[0] = pDiscoverCmd->startCmdID;
// 1615   payload[1] = pDiscoverCmd->maxCmdID;
// 1616 
// 1617   // Send message for either commands received or generated
// 1618   if ( cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
// 1619   {
// 1620     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED, FALSE,
// 1621                                 direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
// 1622   }
// 1623   else  // generated
// 1624   {
// 1625     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN, FALSE,
// 1626                                 direction, disableDefaultRsp, 0, seqNum, sizeof(payload), payload );
// 1627   }
// 1628 
// 1629   return ( status );
// 1630 }
// 1631 
// 1632 /*********************************************************************
// 1633  * @fn      zcl_SendDiscoverCmdsRspCmd
// 1634  *
// 1635  * @brief   Send a Discover Commands Response command
// 1636  *
// 1637  * @param   dstAddr - destination address
// 1638  * @param   clusterID - cluster ID
// 1639  * @param   pDiscoverRspCmd - response command to be sent
// 1640  * @param   direction - direction of the command
// 1641  * @param   seqNum - transaction sequence number
// 1642  *
// 1643  * @return  ZSuccess if OK
// 1644  */
// 1645 ZStatus_t zcl_SendDiscoverCmdsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1646                                       uint16 clusterID, zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd,
// 1647                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1648 {
// 1649   uint8 payloadSize = ( 1 + pDiscoverRspCmd->numCmd );  // size of discovery complete field plus cmds
// 1650   uint8 *pCmdBuf;
// 1651   uint8 i;
// 1652   ZStatus_t status = ZSuccess;
// 1653 
// 1654   // allocate memory
// 1655   pCmdBuf = zcl_mem_alloc( payloadSize );
// 1656   if ( pCmdBuf != NULL )
// 1657   {
// 1658     uint8 *pBuf = pCmdBuf;
// 1659 
// 1660     // Load the buffer - serially
// 1661     *pBuf++ = pDiscoverRspCmd->discComplete;
// 1662     for ( i = 0; i < pDiscoverRspCmd->numCmd; i++ )
// 1663     {
// 1664       *pBuf++ = pDiscoverRspCmd->pCmdID[i];
// 1665     }
// 1666 
// 1667     // Send response message for either commands received or generated
// 1668     if( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
// 1669     {
// 1670       status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_RECEIVED_RSP, FALSE,
// 1671                                 direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
// 1672     }
// 1673     else if ( pDiscoverRspCmd->cmdType == ZCL_CMD_DISCOVER_CMDS_GEN )
// 1674     {
// 1675       status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_CMDS_GEN_RSP, FALSE,
// 1676                                 direction, disableDefaultRsp, 0, seqNum, payloadSize, pCmdBuf );
// 1677     }
// 1678 
// 1679     zcl_mem_free( pCmdBuf );
// 1680   }
// 1681   else
// 1682   {
// 1683     status = ZMemError;
// 1684   }
// 1685 
// 1686   return ( status );
// 1687 }
// 1688 
// 1689 /*********************************************************************
// 1690  * @fn      zcl_SendDiscoverAttrsCmd
// 1691  *
// 1692  * @brief   Send a Discover Attributes command
// 1693  *
// 1694  * @param   dstAddr - destination address
// 1695  * @param   clusterID - cluster ID
// 1696  * @param   pDiscoverCmd - discover command to be sent
// 1697  * @param   direction - direction of the command
// 1698  * @param   seqNum - transaction sequence number
// 1699  *
// 1700  * @return  ZSuccess if OK
// 1701  */
// 1702 ZStatus_t zcl_SendDiscoverAttrsCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1703                             uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverCmd,
// 1704                             uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1705 {
// 1706   uint8 dataLen = 2 + 1; // Start Attribute ID and Max Attribute IDs
// 1707   uint8 *buf;
// 1708   ZStatus_t status;
// 1709 
// 1710   buf = zcl_mem_alloc( dataLen );
// 1711   if ( buf != NULL )
// 1712   {
// 1713     // Load the buffer - serially
// 1714     uint8 *pBuf = buf;
// 1715     *pBuf++ = LO_UINT16(pDiscoverCmd->startAttr);
// 1716     *pBuf++ = HI_UINT16(pDiscoverCmd->startAttr);
// 1717     *pBuf++ = pDiscoverCmd->maxAttrIDs;
// 1718 
// 1719     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS, FALSE,
// 1720                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1721     zcl_mem_free( buf );
// 1722   }
// 1723   else
// 1724   {
// 1725     status = ZMemError;
// 1726   }
// 1727 
// 1728   return ( status );
// 1729 }
// 1730 
// 1731 /*********************************************************************
// 1732  * @fn      zcl_SendDiscoverAttrsRspCmd
// 1733  *
// 1734  * @brief   Send a Discover Attributes Response command
// 1735  *
// 1736  * @param   dstAddr - destination address
// 1737  * @param   clusterID - cluster ID
// 1738  * @param   reportRspCmd - report response command to be sent
// 1739  * @param   direction - direction of the command
// 1740  * @param   seqNum - transaction sequence number
// 1741  *
// 1742  * @return  ZSuccess if OK
// 1743  */
// 1744 ZStatus_t zcl_SendDiscoverAttrsRspCmd( uint8 srcEP, afAddrType_t *dstAddr,
// 1745                           uint16 clusterID, zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd,
// 1746                           uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1747 {
// 1748   uint16 dataLen = 1; // Discovery complete
// 1749   uint8 *buf;
// 1750   ZStatus_t status;
// 1751 
// 1752   // calculate the size of the command
// 1753   dataLen += pDiscoverRspCmd->numAttr * (2 + 1); // Attribute ID and Data Type
// 1754 
// 1755   buf = zcl_mem_alloc( dataLen );
// 1756   if ( buf != NULL )
// 1757   {
// 1758     // Load the buffer - serially
// 1759     uint8 i;
// 1760     uint8 *pBuf = buf;
// 1761 
// 1762     *pBuf++ = pDiscoverRspCmd->discComplete;
// 1763 
// 1764     for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
// 1765     {
// 1766       *pBuf++ = LO_UINT16(pDiscoverRspCmd->attrList[i].attrID);
// 1767       *pBuf++ = HI_UINT16(pDiscoverRspCmd->attrList[i].attrID);
// 1768       *pBuf++ = pDiscoverRspCmd->attrList[i].dataType;
// 1769     }
// 1770 
// 1771     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_RSP, FALSE,
// 1772                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1773     zcl_mem_free( buf );
// 1774   }
// 1775   else
// 1776   {
// 1777     status = ZMemError;
// 1778   }
// 1779 
// 1780   return ( status );
// 1781 }
// 1782 
// 1783 /*********************************************************************
// 1784  * @fn      zcl_SendDiscoverAttrsExt
// 1785  *
// 1786  * @brief   Send a Discover Attributes Extended command
// 1787  *
// 1788  * @param   dstAddr - destination address
// 1789  * @param   clusterID - cluster ID
// 1790  * @param   pDiscoverAttrsExt:
// 1791  *            - startAttrID: the first attribute to be selected
// 1792  *            - maxAttrIDs: maximum number of returned attributes
// 1793  * @param   direction - direction of the command
// 1794  * @param   seqNum - transaction sequence number
// 1795  *
// 1796  * @return  ZSuccess if OK
// 1797  */
// 1798 ZStatus_t zcl_SendDiscoverAttrsExt( uint8 srcEP, afAddrType_t *dstAddr,
// 1799                             uint16 clusterID, zclDiscoverAttrsCmd_t *pDiscoverAttrsExt,
// 1800                             uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1801 {
// 1802   uint8 buf[3];  // Buffer size equal to Start Attribute ID and Max Attribute IDs
// 1803   ZStatus_t status;
// 1804 
// 1805   // Load the buffer - serially
// 1806   buf[0] = LO_UINT16(pDiscoverAttrsExt->startAttr);
// 1807   buf[1] = HI_UINT16(pDiscoverAttrsExt->startAttr);
// 1808   buf[2] = pDiscoverAttrsExt->maxAttrIDs;
// 1809 
// 1810   status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT, FALSE,
// 1811                             direction, disableDefaultRsp, 0, seqNum, sizeof( buf ), buf );
// 1812 
// 1813   return ( status );
// 1814 }
// 1815 
// 1816 /*********************************************************************
// 1817  * @fn      zcl_SendDiscoverAttrsExtRsp
// 1818  *
// 1819  * @brief   Send a Discover Attributes Extended Response command
// 1820  *
// 1821  * @param   dstAddr - destination address
// 1822  * @param   clusterID - cluster ID
// 1823  * @param   pDiscoverRspCmd:
// 1824  *            - discComplete: indicates whether all requested attributes returned
// 1825  *            - attrID: attribute ID
// 1826  *            - attrDataType: data type of the given attribute
// 1827  *            - attrAccessControl: access control of the given attribute
// 1828  * @param   direction - direction of the command
// 1829  * @param   seqNum - transaction sequence number
// 1830  *
// 1831  * @return  ZSuccess if OK
// 1832  */
// 1833 ZStatus_t zcl_SendDiscoverAttrsExtRsp( uint8 srcEP, afAddrType_t *dstAddr,
// 1834                                       uint16 clusterID, zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd,
// 1835                                       uint8 direction, uint8 disableDefaultRsp, uint8 seqNum )
// 1836 {
// 1837   uint8 *buf;
// 1838   uint8 i;
// 1839   uint16 dataLen = 1; // Discovery complete
// 1840   ZStatus_t status;
// 1841 
// 1842   // calculate the size of the command
// 1843   dataLen += pDiscoverRspCmd->numAttr * (2 + 1 + 1); // Attribute ID, Data Type, and Access Control
// 1844 
// 1845   buf = zcl_mem_alloc( dataLen );
// 1846   if ( buf != NULL )
// 1847   {
// 1848     // Load the buffer - serially
// 1849     uint8 *pBuf = buf;
// 1850     *pBuf++ = pDiscoverRspCmd->discComplete;
// 1851     for ( i = 0; i < pDiscoverRspCmd->numAttr; i++ )
// 1852     {
// 1853       *pBuf++ = LO_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
// 1854       *pBuf++ = HI_UINT16(pDiscoverRspCmd->aExtAttrInfo[i].attrID);
// 1855       *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrDataType;
// 1856       *pBuf++ = pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl;
// 1857     }
// 1858 
// 1859     status = zcl_SendCommand( srcEP, dstAddr, clusterID, ZCL_CMD_DISCOVER_ATTRS_EXT_RSP, FALSE,
// 1860                               direction, disableDefaultRsp, 0, seqNum, dataLen, buf );
// 1861     zcl_mem_free( buf );
// 1862   }
// 1863   else
// 1864   {
// 1865     status = ZMemError;
// 1866   }
// 1867 
// 1868   return ( status );
// 1869 }
// 1870 #endif // ZCL_DISCOVER
// 1871 
// 1872 /*********************************************************************
// 1873  * @fn      zcl_ProcessMessageMSG
// 1874  *
// 1875  * @brief   Data message processor callback.  This function processes
// 1876  *          any incoming data - probably from other devices.  So, based
// 1877  *          on cluster ID, perform the intended action.
// 1878  *
// 1879  * @param   pkt - incoming message
// 1880  *
// 1881  * @return  none
// 1882  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1883 void zcl_ProcessMessageMSG( afIncomingMSGPacket_t *pkt )
zcl_ProcessMessageMSG:
          CFI Block cfiBlock129 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
        CODE
// 1884 {
        FUNCALL zcl_ProcessMessageMSG, zclParseHdr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, afFindEndPointDesc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zcl_DeviceOperational
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, StubAPS_InterPan
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zclFindClusterOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zclSetSecurityOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zcl_SendDefaultRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zclSetSecurityOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ProcessMessageMSG, zcl_SendDefaultRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 44, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 44, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 21
        MOV     A,#-0x15
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 1885   endPointDesc_t *epDesc;
// 1886   zclIncoming_t inMsg;
// 1887   zclLibPlugin_t *pInPlugin;
// 1888   zclDefaultRspCmd_t defautlRspCmd;
// 1889   uint8 options;
// 1890   uint8 securityEnable;
// 1891   uint8 interPanMsg;
// 1892   ZStatus_t status = ZFailure;
// 1893 
// 1894   if ( pkt->cmd.DataLength == 0 )
        MOV     A,R6
        ADD     A,#0x20
        MOV     R0,A
        MOV     A,R7
        LCALL   ?Subroutine74 & 0xFFFF
??CrossCallReturnLabel_99:
        LCALL   ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_198:
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_0 & 0xFFFF
// 1895   {
// 1896     return;   // Error, ignore the message
// 1897   }
// 1898 
// 1899   // Initialize
// 1900   rawAFMsg = (afIncomingMSGPacket_t *)pkt;
        MOV     DPTR,#rawAFMsg
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 1901   inMsg.msg = pkt;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 1902   inMsg.attrCmd = NULL;
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1903   inMsg.pData = NULL;
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1904   inMsg.pDataLen = 0;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 1905 
// 1906   inMsg.pData = zclParseHdr( &(inMsg.hdr), pkt->cmd.Data );
        MOV     A,R6
        ADD     A,#0x22
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
        ; Setup parameters for call to function zclParseHdr
        MOV     DPL,R0
        MOV     DPH,A
        LCALL   ??Subroutine144_0 & 0xFFFF
??CrossCallReturnLabel_323:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??zclParseHdr?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R0,?V0 + 4
        MOV     R1,?V0 + 5
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine130_0 & 0xFFFF
// 1907   inMsg.pDataLen = pkt->cmd.DataLength;
// 1908   inMsg.pDataLen -= (uint16)(inMsg.pData - pkt->cmd.Data);
??CrossCallReturnLabel_242:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ??Subroutine140_0 & 0xFFFF
??CrossCallReturnLabel_294:
        MOV     A,R2
        CLR     C
        SUBB    A,R0
        MOV     R0,A
        MOV     A,R3
        SUBB    A,R1
        MOV     R1,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine130_0 & 0xFFFF
// 1909 
// 1910   // Find the wanted endpoint
// 1911   epDesc = afFindEndPointDesc( pkt->endPoint );
??CrossCallReturnLabel_243:
        MOV     A,R6
        ADD     A,#0x14
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        ; Setup parameters for call to function afFindEndPointDesc
        MOV     DPL,?V0 + 0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??afFindEndPointDesc?relay
        MOV     DPL,R2
        MOV     DPH,R3
// 1912   if ( epDesc == NULL )
        MOV     A,DPL
        ORL     A,DPH
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 1913   {
// 1914     rawAFMsg = NULL;
// 1915     return;   // Error, ignore the message
// 1916   }
// 1917 
// 1918   if ( ( epDesc->simpleDesc == NULL ) ||
// 1919        ( zcl_DeviceOperational( pkt->endPoint, pkt->clusterId, inMsg.hdr.fc.type,
// 1920                                 inMsg.hdr.commandID, epDesc->simpleDesc->AppProfId ) == FALSE ) )
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine48 & 0xFFFF
??CrossCallReturnLabel_54:
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
        MOV     A,R6
        ADD     A,#0x4
        MOV     ?V0 + 2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        ; Setup parameters for call to function zcl_DeviceOperational
        INC     DPTR
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     A,#0xb
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x3
        MOV     R4,A
        LCALL   ?Subroutine37 & 0xFFFF
??CrossCallReturnLabel_37:
        LCALL   ??zcl_DeviceOperational?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     A,R1
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 1921   {
// 1922     rawAFMsg = NULL;
// 1923     return; // Error, ignore the message
// 1924   }
// 1925 
// 1926 #if defined ( INTER_PAN )
// 1927   if ( StubAPS_InterPan( pkt->srcAddr.panId, pkt->srcAddr.endPoint ) )
        ; Setup parameters for call to function StubAPS_InterPan
        MOV     A,R6
        ADD     A,#0xf
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine136_0 & 0xFFFF
??CrossCallReturnLabel_262:
        MOV     A,R6
        ADD     A,#0x10
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine122_0 & 0xFFFF
??CrossCallReturnLabel_187:
        LCALL   ??Subroutine140_0 & 0xFFFF
??CrossCallReturnLabel_295:
        LCALL   ??StubAPS_InterPan?relay
        MOV     A,R1
        JZ      ??zcl_ProcessMessageMSG_2
// 1928   {
// 1929     // No foundation command is supported thru Inter-PAN communication.
// 1930     // But the Light Link cluster uses a different Frame Control format
// 1931     // for it's Inter-PAN messages, where the messages could be confused
// 1932     // with the foundation commands.
// 1933     if ( zcl_ProfileCmd( inMsg.hdr.fc.type ) )
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x3
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 1934     {
// 1935       rawAFMsg = NULL;
// 1936       return;
// 1937     }
// 1938 
// 1939     interPanMsg = TRUE;
        MOV     ?V0 + 4,#0x1
// 1940     options = AF_TX_OPTIONS_NONE;
        SJMP    ??zcl_ProcessMessageMSG_3
// 1941   }
// 1942   else
// 1943 #endif
// 1944   {
// 1945     interPanMsg = FALSE;
??zcl_ProcessMessageMSG_2:
        MOV     ?V0 + 4,#0x0
// 1946     options = zclGetClusterOption( pkt->endPoint, pkt->clusterId );
        ; Setup parameters for call to function zclFindClusterOption
        LCALL   ?Subroutine37 & 0xFFFF
// 1947   }
??CrossCallReturnLabel_38:
        LCALL   ??zclFindClusterOption?relay
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??zcl_ProcessMessageMSG_3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        SJMP    ??zcl_ProcessMessageMSG_4
??zcl_ProcessMessageMSG_3:
        MOV     ?V0 + 5,#0x0
// 1948 
// 1949   // Find the appropriate plugin
// 1950   pInPlugin = zclFindPlugin( pkt->clusterId, epDesc->simpleDesc->AppProfId );
??zcl_ProcessMessageMSG_4:
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ??Subroutine140_0 & 0xFFFF
??CrossCallReturnLabel_296:
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     DPTR,#plugins
        SJMP    ??zcl_ProcessMessageMSG_5
??zcl_ProcessMessageMSG_6:
        MOV     DPL,R0
        MOV     DPH,R1
??zcl_ProcessMessageMSG_5:
        LCALL   ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_199:
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_7 & 0xFFFF
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_74:
        CLR     C
        MOV     A,R4
        SUBB    A,?V0 + 6
        MOV     A,R5
        SUBB    A,?V0 + 7
        JC      ??zcl_ProcessMessageMSG_6
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     C
        MOVX    A,@DPTR
        SUBB    A,R4
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,R5
        JC      ??zcl_ProcessMessageMSG_6
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x7
        JNZ     ??zcl_ProcessMessageMSG_8
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,#0xb
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_9 & 0xFFFF
// 1951   // Local and remote Security options must match except for Default Response command
// 1952   if ( ( pInPlugin != NULL ) && !zcl_DefaultRspCmd( inMsg.hdr ) )
// 1953   {
// 1954     securityEnable = ( options & AF_EN_SECURITY ) ? TRUE : FALSE;
// 1955 
// 1956     // Make sure that Clusters specifically defined to use security are received secure,
// 1957     // any other cluster that wants to use APS security will be allowed
// 1958     if ( ( securityEnable == TRUE ) && ( pkt->SecurityUse == FALSE ) )
??zcl_ProcessMessageMSG_8:
        MOV     A,?V0 + 5
        MOV     C,0xE0 /* A   */.6
        JC      $+5
        LJMP    ??zcl_ProcessMessageMSG_9 & 0xFFFF
        MOV     A,R6
        ADD     A,#0x19
        LCALL   ?Subroutine77 & 0xFFFF
??CrossCallReturnLabel_174:
        JZ      $+5
        LJMP    ??zcl_ProcessMessageMSG_9 & 0xFFFF
// 1959     {
// 1960       if ( UNICAST_MSG( inMsg.msg ) )
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_51:
        JZ      $+5
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_206:
        JZ      $+5
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 1961       {
// 1962         // Send a Default Response command back with no Application Link Key security
// 1963         zclSetSecurityOption( pkt->endPoint, pkt->clusterId, FALSE );
        ; Setup parameters for call to function zclSetSecurityOption
        MOV     R4,#0x0
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??zclSetSecurityOption?relay
// 1964 
// 1965         defautlRspCmd.statusCode = status;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
// 1966         defautlRspCmd.commandID = inMsg.hdr.commandID;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine64 & 0xFFFF
// 1967         zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
// 1968                                inMsg.msg->clusterId, &defautlRspCmd,
// 1969                                !inMsg.hdr.fc.direction, true,
// 1970                                inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
??CrossCallReturnLabel_81:
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV     ?V0 + 4,#0x1
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_83:
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_47:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_77:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_57:
        LCALL   ??zcl_SendDefaultRspCmd?relay
        MOV     A,#0x7
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 37)
// 1971 
// 1972         zclSetSecurityOption( pkt->endPoint, pkt->clusterId, TRUE );
        ; Setup parameters for call to function zclSetSecurityOption
        MOV     R4,#0x1
        LCALL   ?Subroutine37 & 0xFFFF
// 1973       }
// 1974 
// 1975       rawAFMsg = NULL;
// 1976       return;   // Error, ignore the message
// 1977     }
// 1978   }
??CrossCallReturnLabel_39:
        LCALL   ??zclSetSecurityOption?relay
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
??zcl_ProcessMessageMSG_7:
        MOV     R4,#0x0
        MOV     R5,#0x0
// 1979 
// 1980   // Is this a foundation type message
// 1981   if ( !interPanMsg && zcl_ProfileCmd( inMsg.hdr.fc.type ) )
??zcl_ProcessMessageMSG_9:
        MOV     A,?V0 + 4
        MOV     C,0xE0 /* A   */.0
        JNC     $+5
        LJMP    ??zcl_ProcessMessageMSG_10 & 0xFFFF
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        ANL     A,#0x3
        JZ      $+5
        LJMP    ??zcl_ProcessMessageMSG_10 & 0xFFFF
// 1982   {
// 1983     if ( inMsg.hdr.fc.manuSpecific )
        MOV     A,R0
        ANL     A,#0x4
        JZ      ??zcl_ProcessMessageMSG_11
// 1984     {
// 1985       // We don't support any manufacturer specific command
// 1986       status = ZCL_STATUS_UNSUP_MANU_GENERAL_COMMAND;
        MOV     R2,#-0x7c
        LJMP    ??zcl_ProcessMessageMSG_12 & 0xFFFF
// 1987     }
// 1988     else if ( ( inMsg.hdr.commandID <= ZCL_CMD_MAX ) &&
// 1989               ( zclCmdTable[inMsg.hdr.commandID].pfnParseInProfile != NULL ) )
??zcl_ProcessMessageMSG_11:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        CLR     C
        SUBB    A,#0x17
        JC      $+5
        LJMP    ??zcl_ProcessMessageMSG_13 & 0xFFFF
        MOV     ?V0 + 3,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     A,#zclCmdTable & 0xff
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,#(zclCmdTable >> 8) & 0xff
        ADDC    A,?V0 + 3
        LCALL   ?Subroutine84 & 0xFFFF
??CrossCallReturnLabel_117:
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_13 & 0xFFFF
// 1990     {
// 1991       zclParseCmd_t parseCmd;
// 1992 
// 1993       parseCmd.endpoint = pkt->endPoint;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1994       parseCmd.dataLen = inMsg.pDataLen;
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine137_0 & 0xFFFF
??CrossCallReturnLabel_278:
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine130_0 & 0xFFFF
// 1995       parseCmd.pData = inMsg.pData;
??CrossCallReturnLabel_244:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine137_0 & 0xFFFF
??CrossCallReturnLabel_279:
        MOV     A,#0x13
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine130_0 & 0xFFFF
// 1996 
// 1997       // Parse the command, remember that the return value is a pointer to allocated memory
// 1998       inMsg.attrCmd = zclParseCmd( inMsg.hdr.commandID, &parseCmd );
??CrossCallReturnLabel_245:
        ; Setup parameters for indirect call
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine63 & 0xFFFF
??CrossCallReturnLabel_79:
        LCALL   ?S_SHL
        MOV     A,#zclCmdTable & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#(zclCmdTable >> 8) & 0xff
        ADDC    A,?V0 + 1
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        PUSH    A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     DPH,A
        POP     DPL
        LCALL   ?CALL_IND
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine130_0 & 0xFFFF
// 1999       if ( (inMsg.attrCmd != NULL) && (zclCmdTable[inMsg.hdr.commandID].pfnProcessInProfile != NULL) )
??CrossCallReturnLabel_246:
        MOV     A,R0
        ORL     A,R1
        JZ      ??zcl_ProcessMessageMSG_14
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine63 & 0xFFFF
??CrossCallReturnLabel_80:
        LCALL   ?S_SHL
        MOV     A,#(zclCmdTable + 2) & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#((zclCmdTable + 2) >> 8) & 0xff
        ADDC    A,?V0 + 1
        LCALL   ?Subroutine84 & 0xFFFF
??CrossCallReturnLabel_118:
        JZ      ??zcl_ProcessMessageMSG_15
// 2000       {
// 2001         // Process the command
// 2002         if ( zclProcessCmd( inMsg.hdr.commandID, &inMsg ) == FALSE )
        ; Setup parameters for indirect call
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?CALL_IND
// 2003         {
// 2004           // Couldn't find attribute in the table.
// 2005         }
// 2006       }
// 2007 
// 2008       // Free the buffer
// 2009       if ( inMsg.attrCmd )
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_200:
        JZ      ??zcl_ProcessMessageMSG_14
// 2010       {
// 2011         zcl_mem_free( inMsg.attrCmd );
??zcl_ProcessMessageMSG_15:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine140_0 & 0xFFFF
// 2012       }
??CrossCallReturnLabel_297:
        LCALL   ??osal_mem_free?relay
// 2013 
// 2014       if ( CMD_HAS_RSP( inMsg.hdr.commandID ) )
??zcl_ProcessMessageMSG_14:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
        MOV     A,#0x2
        XRL     A,R0
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
        MOV     A,#0x3
        XRL     A,R0
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
        MOV     A,#0x6
        XRL     A,R0
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
        MOV     A,#0x8
        XRL     A,R0
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
        MOV     A,#0xc
        XRL     A,R0
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
        MOV     A,#0x11
        XRL     A,R0
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
        MOV     A,#0x13
        XRL     A,R0
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
        MOV     A,#0x15
        XRL     A,R0
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
        MOV     A,#0xb
        XRL     A,R0
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 2015       {
// 2016         rawAFMsg = NULL;
// 2017         return; // We're done
// 2018       }
// 2019 
// 2020       status = ZSuccess;
        MOV     R2,#0x0
        SJMP    ??zcl_ProcessMessageMSG_12
// 2021     }
// 2022     else
// 2023     {
// 2024       // Unsupported message
// 2025       status = ZCL_STATUS_UNSUP_GENERAL_COMMAND;
??zcl_ProcessMessageMSG_13:
        MOV     R2,#-0x7e
        SJMP    ??zcl_ProcessMessageMSG_12
// 2026     }
// 2027   }
// 2028   else  // Not a foundation type message, so it must be specific to the cluster ID.
// 2029   {
// 2030     if ( pInPlugin && pInPlugin->pfnIncomingHdlr )
??zcl_ProcessMessageMSG_10:
        MOV     A,R4
        ORL     A,R5
        JZ      ??zcl_ProcessMessageMSG_16
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine123_0 & 0xFFFF
??CrossCallReturnLabel_205:
        JZ      ??zcl_ProcessMessageMSG_16
// 2031     {
// 2032       // The return value of the plugin function will be
// 2033       //  ZSuccess - Supported and need default response
// 2034       //  ZFailure - Unsupported
// 2035       //  ZCL_STATUS_CMD_HAS_RSP - Supported and do not need default rsp
// 2036       //  ZCL_STATUS_INVALID_FIELD - Supported, but the incoming msg is wrong formatted
// 2037       //  ZCL_STATUS_INVALID_VALUE - Supported, but the request not achievable by the h/w
// 2038       //  ZCL_STATUS_SOFTWARE_FAILURE - Supported but ZStack memory allocation fails
// 2039       status = pInPlugin->pfnIncomingHdlr( &inMsg );
        ; Setup parameters for indirect call
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?CALL_IND
        MOV     A,R1
        MOV     R2,A
// 2040       if ( status == ZCL_STATUS_CMD_HAS_RSP || ( interPanMsg && status == ZSuccess ) )
        MOV     A,#-0x1
        XRL     A,R2
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
        MOV     A,?V0 + 4
        MOV     C,0xE0 /* A   */.0
        JNC     ??zcl_ProcessMessageMSG_17
        MOV     A,R2
        JNZ     $+5
        LJMP    ??zcl_ProcessMessageMSG_1 & 0xFFFF
// 2041       {
// 2042         rawAFMsg = NULL;
// 2043         return; // We're done
// 2044       }
// 2045     }
// 2046 
// 2047     if ( status == ZFailure )
??zcl_ProcessMessageMSG_17:
        MOV     A,#0x1
        XRL     A,R2
        JNZ     ??zcl_ProcessMessageMSG_12
// 2048     {
// 2049       // Unsupported message
// 2050       if ( inMsg.hdr.fc.manuSpecific )
??zcl_ProcessMessageMSG_16:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x4
        JZ      ??zcl_ProcessMessageMSG_18
// 2051       {
// 2052         status = ZCL_STATUS_UNSUP_MANU_CLUSTER_COMMAND;
        MOV     R2,#-0x7d
        SJMP    ??zcl_ProcessMessageMSG_12
// 2053       }
// 2054       else
// 2055       {
// 2056         status = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
??zcl_ProcessMessageMSG_18:
        MOV     R2,#-0x7f
// 2057       }
// 2058     }
// 2059   }
// 2060 
// 2061   if ( UNICAST_MSG( inMsg.msg ) && inMsg.hdr.fc.disableDefaultRsp == 0 )
??zcl_ProcessMessageMSG_12:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine45 & 0xFFFF
??CrossCallReturnLabel_52:
        JNZ     ??zcl_ProcessMessageMSG_1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine32 & 0xFFFF
??CrossCallReturnLabel_207:
        JNZ     ??zcl_ProcessMessageMSG_1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x10
        JNZ     ??zcl_ProcessMessageMSG_1
// 2062   {
// 2063     // Send a Default Response command back
// 2064     defautlRspCmd.statusCode = status;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
// 2065     defautlRspCmd.commandID = inMsg.hdr.commandID;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine64 & 0xFFFF
// 2066     zcl_SendDefaultRspCmd( inMsg.msg->endPoint, &(inMsg.msg->srcAddr),
// 2067                            inMsg.msg->clusterId, &defautlRspCmd,
// 2068                            !inMsg.hdr.fc.direction, true,
// 2069                            inMsg.hdr.manuCode, inMsg.hdr.transSeqNum );
// 2070   }
??CrossCallReturnLabel_82:
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine65 & 0xFFFF
??CrossCallReturnLabel_84:
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 42)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine42 & 0xFFFF
??CrossCallReturnLabel_48:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine62 & 0xFFFF
??CrossCallReturnLabel_78:
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine50 & 0xFFFF
??CrossCallReturnLabel_58:
        LCALL   ??zcl_SendDefaultRspCmd?relay
        MOV     A,#0x7
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 37)
// 2071 
// 2072   rawAFMsg = NULL;
??zcl_ProcessMessageMSG_1:
        MOV     DPTR,#rawAFMsg
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 2073 }
??zcl_ProcessMessageMSG_0:
        MOV     A,#0x15
        LJMP    ?Subroutine6 & 0xFFFF
          CFI EndBlock cfiBlock129

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine84:
          CFI Block cfiCond130 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_117
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function zcl_ProcessMessageMSG
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+0
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiPicker132 Using cfiCommon1
          CFI (cfiPicker132) NoFunction
          CFI (cfiPicker132) Picker
        MOV     DPH,A
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R0,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiPicker132

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine77:
          CFI Block cfiCond133 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_174
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function zclProcessInReadCmd
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_175
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond134) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond134) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond134) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond134) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond134) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond134) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond134) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+0
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker135 Using cfiCommon1
          CFI (cfiPicker135) NoFunction
          CFI (cfiPicker135) Picker
        MOV     DPL,A
        MOV     A,R7
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiPicker135
        REQUIRE ??Subroutine117_0
        ; // Fall through to label ??Subroutine117_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine117_0:
          CFI Block cfiCond136 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_172
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function zcl_SendCommand
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_173
          CFI (cfiCond137) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond137) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond137) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond137) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond137) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond137) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond137) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond137) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond137) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond137) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond137) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond137) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond137) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond137) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond137) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond137) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond137) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond137) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond137) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond137) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond137) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond137) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond137) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond137) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond137) CFA_SP SP+0
          CFI (cfiCond137) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function zcl_ProcessMessageMSG
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_174
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+0
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function zclProcessInReadCmd
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_175
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond139) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond139) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond139) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond139) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond139) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond139) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+0
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker140 Using cfiCommon1
          CFI (cfiPicker140) NoFunction
          CFI (cfiPicker140) Picker
        LCALL   ??Subroutine122_0 & 0xFFFF
??CrossCallReturnLabel_193:
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiPicker140

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine65:
          CFI Block cfiCond141 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_83
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function zcl_ProcessMessageMSG
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond142) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond142) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond142) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+0
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiPicker143 Using cfiCommon1
          CFI (cfiPicker143) NoFunction
          CFI (cfiPicker143) Picker
        LCALL   ?Subroutine97 & 0xFFFF
??CrossCallReturnLabel_256:
        RET
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiPicker143

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine97:
          CFI Block cfiCond144 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_256, ??CrossCallReturnLabel_83
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function zcl_ProcessMessageMSG
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_256, ??CrossCallReturnLabel_84
          CFI (cfiCond145) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond145) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond145) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond145) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond145) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond145) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond145) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond145) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond145) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond145) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond145) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond145) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond145) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond145) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond145) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond145) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond145) CFA_SP SP+0
          CFI (cfiCond145) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function zclProcessInWriteCmd
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_257, ??CrossCallReturnLabel_254
          CFI (cfiCond146) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond146) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond146) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond146) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond146) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond146) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond146) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond146) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond146) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond146) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond146) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond146) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond146) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond146) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond146) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond146) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond146) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond146) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond146) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond146) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond146) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond146) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond146) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond146) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond146) CFA_SP SP+0
          CFI (cfiCond146) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_257, ??CrossCallReturnLabel_255
          CFI (cfiCond147) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond147) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond147) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond147) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond147) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond147) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond147) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond147) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond147) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond147) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond147) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond147) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond147) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond147) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond147) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond147) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond147) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond147) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond147) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond147) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond147) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond147) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond147) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond147) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond147) CFA_SP SP+0
          CFI (cfiCond147) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function zclProcessInReadCmd
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_257, ??CrossCallReturnLabel_253
          CFI (cfiCond148) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond148) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond148) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond148) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond148) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond148) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond148) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond148) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond148) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond148) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond148) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond148) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond148) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond148) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond148) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond148) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond148) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond148) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond148) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond148) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond148) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond148) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond148) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond148) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond148) CFA_SP SP+0
          CFI (cfiCond148) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiPicker149 Using cfiCommon1
          CFI (cfiPicker149) NoFunction
          CFI (cfiPicker149) Picker
        MOVX    A,@DPTR
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        XRL     A,#0x1
        ANL     A,#0x1
        RET
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiPicker149

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine64:
          CFI Block cfiCond150 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_81
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function zcl_ProcessMessageMSG
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond151) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond151) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond151) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond151) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond151) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond151) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond151) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond151) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond151) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond151) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond151) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond151) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond151) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond151) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond151) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond151) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond151) CFA_SP SP+0
          CFI (cfiCond151) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiPicker152 Using cfiCommon1
          CFI (cfiPicker152) NoFunction
          CFI (cfiPicker152) Picker
        LCALL   ?Subroutine100 & 0xFFFF
??CrossCallReturnLabel_142:
        ; Setup parameters for call to function zcl_SendDefaultRspCmd
        ; Setup parameters for call to function zcl_SendDefaultRspCmd
        MOV     A,#0x8
        RET
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiPicker152

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine100:
          CFI Block cfiCond153 Using cfiCommon0
          CFI Function zcl_SendDefaultRspCmd
          CFI Conditional ??CrossCallReturnLabel_141
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function zcl_ProcessMessageMSG
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_142, ??CrossCallReturnLabel_81
          CFI (cfiCond154) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond154) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond154) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond154) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond154) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond154) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond154) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond154) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond154) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond154) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond154) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond154) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond154) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond154) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond154) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond154) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond154) CFA_SP SP+0
          CFI (cfiCond154) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function zcl_ProcessMessageMSG
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_142, ??CrossCallReturnLabel_82
          CFI (cfiCond155) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond155) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond155) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond155) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond155) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond155) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond155) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond155) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond155) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond155) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond155) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond155) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond155) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond155) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond155) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond155) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond155) CFA_SP SP+0
          CFI (cfiCond155) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiPicker156 Using cfiCommon1
          CFI (cfiPicker156) NoFunction
          CFI (cfiPicker156) Picker
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiPicker156

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine63:
          CFI Block cfiCond157 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_79
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function zcl_ProcessMessageMSG
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond158) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond158) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond158) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond158) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond158) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond158) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond158) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond158) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond158) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond158) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond158) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond158) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond158) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond158) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond158) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond158) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond158) CFA_SP SP+0
          CFI (cfiCond158) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiPicker159 Using cfiCommon1
          CFI (cfiPicker159) NoFunction
          CFI (cfiPicker159) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 0
        RET
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiPicker159

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine62:
          CFI Block cfiCond160 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_77
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function zcl_ProcessMessageMSG
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond161) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond161) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond161) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond161) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond161) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond161) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond161) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond161) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond161) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond161) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond161) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond161) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond161) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond161) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond161) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond161) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond161) CFA_SP SP+0
          CFI (cfiCond161) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker162 Using cfiCommon1
          CFI (cfiPicker162) NoFunction
          CFI (cfiPicker162) Picker
        MOVX    A,@DPTR
        ADD     A,#0x6
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,#0x9
        RET
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiPicker162

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine50:
          CFI Block cfiCond163 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_57
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function zcl_ProcessMessageMSG
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond164) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond164) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond164) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond164) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond164) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond164) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond164) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond164) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond164) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond164) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond164) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond164) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond164) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond164) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond164) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond164) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond164) CFA_SP SP+0
          CFI (cfiCond164) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker165 Using cfiCommon1
          CFI (cfiPicker165) NoFunction
          CFI (cfiPicker165) Picker
        LCALL   ?Subroutine111 & 0xFFFF
??CrossCallReturnLabel_345:
        MOV     A,R0
        LCALL   ?Subroutine102 & 0xFFFF
??CrossCallReturnLabel_272:
        RET
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiPicker165

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine45:
          CFI Block cfiCond166 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function zcl_ProcessMessageMSG
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond167) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond167) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond167) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond167) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond167) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond167) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond167) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond167) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond167) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond167) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond167) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond167) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond167) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond167) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond167) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond167) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond167) CFA_SP SP+0
          CFI (cfiCond167) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiPicker168 Using cfiCommon1
          CFI (cfiPicker168) NoFunction
          CFI (cfiPicker168) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,R0
        LCALL   ??Subroutine122_0 & 0xFFFF
??CrossCallReturnLabel_189:
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiPicker168

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine42:
          CFI Block cfiCond169 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function zcl_ProcessMessageMSG
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond170) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond170) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond170) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond170) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond170) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond170) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond170) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond170) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond170) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond170) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond170) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond170) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond170) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond170) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond170) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond170) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond170) CFA_SP SP+0
          CFI (cfiCond170) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker171 Using cfiCommon1
          CFI (cfiPicker171) NoFunction
          CFI (cfiPicker171) Picker
        LCALL   ?Subroutine96 & 0xFFFF
??CrossCallReturnLabel_138:
        LCALL   ?Subroutine91 & 0xFFFF
??CrossCallReturnLabel_333:
        MOV     A,#0x9
        RET
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiPicker171

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine37:
          CFI Block cfiCond172 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function zcl_ProcessMessageMSG
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond173) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond173) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond173) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond173) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond173) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond173) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond173) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond173) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond173) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond173) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond173) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond173) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond173) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond173) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond173) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond173) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond173) CFA_SP SP+0
          CFI (cfiCond173) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond174 Using cfiCommon0
          CFI (cfiCond174) Function zcl_ProcessMessageMSG
          CFI (cfiCond174) Conditional ??CrossCallReturnLabel_39
          CFI (cfiCond174) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond174) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond174) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond174) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond174) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond174) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond174) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond174) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond174) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond174) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond174) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond174) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond174) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond174) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond174) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond174) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond174) CFA_SP SP+0
          CFI (cfiCond174) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiPicker175 Using cfiCommon1
          CFI (cfiPicker175) NoFunction
          CFI (cfiPicker175) Picker
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ?Subroutine93 & 0xFFFF
??CrossCallReturnLabel_310:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiCond174
          CFI EndBlock cfiPicker175
// 2074 
// 2075 /*********************************************************************
// 2076  * PRIVATE FUNCTIONS
// 2077  *********************************************************************/
// 2078 
// 2079 /*********************************************************************
// 2080  * @fn      zclParseHdr
// 2081  *
// 2082  * @brief   Parse header of the ZCL format
// 2083  *
// 2084  * @param   hdr - place to put the frame control information
// 2085  * @param   pData - incoming buffer to parse
// 2086  *
// 2087  * @return  pointer past the header
// 2088  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2089 uint8 *zclParseHdr( zclFrameHdr_t *hdr, uint8 *pData )
zclParseHdr:
          CFI Block cfiBlock176 Using cfiCommon0
          CFI Function zclParseHdr
        CODE
// 2090 {
        FUNCALL zclParseHdr, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 2091   // Clear the header
// 2092   zcl_memset( (uint8 *)hdr, 0, sizeof ( zclFrameHdr_t ) );
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   ??osal_memset?relay
// 2093 
// 2094   // Parse the Frame Control
// 2095   hdr->fc.type = zcl_FCType( *pData );
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ANL     A,#0xfc
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ANL     A,#0x3
        MOV     R2,A
        MOV     A,R0
        ORL     A,R2
        MOV     R0,A
        LCALL   ?Subroutine24 & 0xFFFF
// 2096   hdr->fc.manuSpecific = zcl_FCManuSpecific( *pData ) ? 1 : 0;
??CrossCallReturnLabel_25:
        MOV     C,0xE0 /* A   */.2
        JNC     ??zclParseHdr_0
        SETB    B.0
        SJMP    ??zclParseHdr_1
??zclParseHdr_0:
        CLR     B.0
??zclParseHdr_1:
        MOV     A,R0
        ANL     A,#0xfb
        MOV     R2,A
        MOV     C,B.0
        CLR     A
        RLC     A
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     A,R2
        ORL     A,?V0 + 2
        LCALL   ?Subroutine24 & 0xFFFF
// 2097   if ( zcl_FCDirection( *pData ) )
??CrossCallReturnLabel_26:
        MOV     C,0xE0 /* A   */.3
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        JNC     ??zclParseHdr_2
// 2098   {
// 2099     hdr->fc.direction = ZCL_FRAME_SERVER_CLIENT_DIR;
        ORL     A,#0x8
        SJMP    ??zclParseHdr_3
// 2100   }
// 2101   else
// 2102   {
// 2103     hdr->fc.direction = ZCL_FRAME_CLIENT_SERVER_DIR;
??zclParseHdr_2:
        ANL     A,#0xf7
// 2104   }
??zclParseHdr_3:
        LCALL   ?Subroutine108 & 0xFFFF
// 2105 
// 2106   hdr->fc.disableDefaultRsp = zcl_FCDisableDefaultRsp( *pData ) ? 1 : 0;
??CrossCallReturnLabel_213:
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.4
        JNC     ??zclParseHdr_4
        SETB    B.0
        SJMP    ??zclParseHdr_5
??zclParseHdr_4:
        CLR     B.0
??zclParseHdr_5:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ANL     A,#0xef
        MOV     R2,A
        MOV     C,B.0
        CLR     A
        RLC     A
        MOV     ?V0 + 2,A
        MOV     A,#0x4
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     A,R2
        ORL     A,?V0 + 2
        MOV     R0,A
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ??Subroutine125_0 & 0xFFFF
// 2107   pData++;  // move past the frame control field
// 2108 
// 2109   // parse the manfacturer code
// 2110   if ( hdr->fc.manuSpecific )
??CrossCallReturnLabel_208:
        MOV     A,R0
        ANL     A,#0x4
        JZ      ??CrossCallReturnLabel_96
// 2111   {
// 2112     hdr->manuCode = BUILD_UINT16( pData[0], pData[1] );
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine131_0 & 0xFFFF
// 2113     pData += 2;
??CrossCallReturnLabel_240:
        LCALL   ?Subroutine72 & 0xFFFF
// 2114   }
// 2115 
// 2116   // parse the Transaction Sequence Number
// 2117   hdr->transSeqNum = *pData++;
??CrossCallReturnLabel_96:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine16 & 0xFFFF
// 2118 
// 2119   // parse the Cluster's command ID
// 2120   hdr->commandID = *pData++;
??CrossCallReturnLabel_12:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine18 & 0xFFFF
// 2121 
// 2122   // Should point to the frame payload
// 2123   return ( pData );
??CrossCallReturnLabel_178:
        MOV     R2,DPL
        MOV     R3,DPH
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock176
// 2124 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond177 Using cfiCommon0
          CFI Function zclParseHdr
          CFI Conditional ??CrossCallReturnLabel_25
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function zclParseHdr
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_26
          CFI (cfiCond178) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond178) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond178) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond178) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond178) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond178) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond178) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond178) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond178) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond178) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond178) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond178) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond178) CFA_SP SP+0
          CFI (cfiCond178) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker179 Using cfiCommon1
          CFI (cfiPicker179) NoFunction
          CFI (cfiPicker179) Picker
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine108 & 0xFFFF
??CrossCallReturnLabel_214:
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiPicker179

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond180 Using cfiCommon0
          CFI Function zclParseHdr
          CFI Conditional ??CrossCallReturnLabel_178
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond181 Using cfiCommon0
          CFI (cfiCond181) Function zclParseInReadRspCmd
          CFI (cfiCond181) Conditional ??CrossCallReturnLabel_179
          CFI (cfiCond181) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond181) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond181) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond181) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond181) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond181) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond181) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond181) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond181) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond181) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond181) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond181) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond181) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond181) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond181) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond181) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond181) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond181) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond181) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond181) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond181) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond181) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond181) CFA_SP SP+0
          CFI (cfiCond181) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker182 Using cfiCommon1
          CFI (cfiPicker182) NoFunction
          CFI (cfiPicker182) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond180
          CFI EndBlock cfiCond181
          CFI EndBlock cfiPicker182
        REQUIRE ??Subroutine118_0
        ; // Fall through to label ??Subroutine118_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine118_0:
          CFI Block cfiCond183 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_176
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond184 Using cfiCommon0
          CFI (cfiCond184) Function zclParseInDefaultRspCmd
          CFI (cfiCond184) Conditional ??CrossCallReturnLabel_177
          CFI (cfiCond184) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond184) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond184) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond184) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond184) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond184) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond184) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond184) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond184) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond184) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond184) CFA_SP SP+0
          CFI (cfiCond184) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond185 Using cfiCommon0
          CFI (cfiCond185) Function zclParseHdr
          CFI (cfiCond185) Conditional ??CrossCallReturnLabel_178
          CFI (cfiCond185) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond185) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond185) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond185) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond185) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond185) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond185) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond185) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond185) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond185) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond185) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond185) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond185) CFA_SP SP+0
          CFI (cfiCond185) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond186 Using cfiCommon0
          CFI (cfiCond186) Function zclParseInReadRspCmd
          CFI (cfiCond186) Conditional ??CrossCallReturnLabel_179
          CFI (cfiCond186) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond186) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond186) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond186) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond186) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond186) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond186) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond186) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond186) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond186) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond186) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond186) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond186) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond186) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond186) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond186) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond186) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond186) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond186) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond186) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond186) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond186) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond186) CFA_SP SP+0
          CFI (cfiCond186) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker187 Using cfiCommon1
          CFI (cfiPicker187) NoFunction
          CFI (cfiPicker187) Picker
        LCALL   ?Subroutine108 & 0xFFFF
??CrossCallReturnLabel_215:
        INC     DPTR
        RET
          CFI EndBlock cfiCond183
          CFI EndBlock cfiCond184
          CFI EndBlock cfiCond185
          CFI EndBlock cfiCond186
          CFI EndBlock cfiPicker187

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine108:
          CFI Block cfiCond188 Using cfiCommon0
          CFI Function zclParseHdr
          CFI Conditional ??CrossCallReturnLabel_213
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function zclParseHdr
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_214, ??CrossCallReturnLabel_25
          CFI (cfiCond189) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond189) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond189) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond189) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond189) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond189) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond189) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond189) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond189) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond189) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond189) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond189) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond189) CFA_SP SP+0
          CFI (cfiCond189) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function zclParseHdr
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_214, ??CrossCallReturnLabel_26
          CFI (cfiCond190) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond190) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond190) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond190) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond190) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond190) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond190) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond190) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond190) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond190) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond190) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond190) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond190) CFA_SP SP+0
          CFI (cfiCond190) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function zclParseHdr
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_215, ??CrossCallReturnLabel_178
          CFI (cfiCond191) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond191) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond191) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond191) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond191) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond191) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond191) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond191) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond191) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond191) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond191) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond191) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond191) CFA_SP SP+0
          CFI (cfiCond191) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function zclParseInReadRspCmd
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_215, ??CrossCallReturnLabel_179
          CFI (cfiCond192) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond192) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond192) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond192) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond192) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond192) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond192) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond192) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond192) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond192) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond192) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond192) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond192) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond192) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond192) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond192) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond192) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond192) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond192) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond192) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond192) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond192) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond192) CFA_SP SP+0
          CFI (cfiCond192) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function zcl_HandleExternal
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_215, ??CrossCallReturnLabel_176
          CFI (cfiCond193) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond193) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond193) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond193) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond193) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond193) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond193) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond193) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond193) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond193) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond193) CFA_SP SP+0
          CFI (cfiCond193) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function zclParseInDefaultRspCmd
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_215, ??CrossCallReturnLabel_177
          CFI (cfiCond194) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond194) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond194) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond194) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond194) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond194) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond194) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond194) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond194) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond194) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond194) CFA_SP SP+0
          CFI (cfiCond194) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond195 Using cfiCommon0
          CFI (cfiCond195) Function zclParseInReadRspCmd
          CFI (cfiCond195) Conditional ??CrossCallReturnLabel_216, ??CrossCallReturnLabel_211, ??CrossCallReturnLabel_209
          CFI (cfiCond195) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond195) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond195) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond195) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond195) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond195) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond195) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond195) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond195) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond195) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond195) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond195) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond195) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond195) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond195) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond195) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond195) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond195) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond195) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond195) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond195) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond195) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond195) CFA_SP SP+0
          CFI (cfiCond195) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function zclParseInWriteCmd
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_216, ??CrossCallReturnLabel_211, ??CrossCallReturnLabel_210
          CFI (cfiCond196) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond196) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond196) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond196) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond196) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond196) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond196) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond196) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond196) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond196) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond196) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond196) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond196) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond196) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond196) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond196) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond196) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond196) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond196) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond196) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond196) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond196) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond196) CFA_SP SP+0
          CFI (cfiCond196) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond197 Using cfiCommon0
          CFI (cfiCond197) Function zclParseHdr
          CFI (cfiCond197) Conditional ??CrossCallReturnLabel_216, ??CrossCallReturnLabel_211, ??CrossCallReturnLabel_208
          CFI (cfiCond197) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond197) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond197) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond197) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond197) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond197) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond197) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond197) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond197) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond197) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond197) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond197) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond197) CFA_SP SP+0
          CFI (cfiCond197) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond198 Using cfiCommon0
          CFI (cfiCond198) Function zclParseHdr
          CFI (cfiCond198) Conditional ??CrossCallReturnLabel_216, ??CrossCallReturnLabel_212, ??CrossCallReturnLabel_12
          CFI (cfiCond198) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond198) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond198) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond198) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond198) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond198) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond198) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond198) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond198) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond198) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond198) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond198) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond198) CFA_SP SP+0
          CFI (cfiCond198) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond199 Using cfiCommon0
          CFI (cfiCond199) Function zclParseInWriteRspCmd
          CFI (cfiCond199) Conditional ??CrossCallReturnLabel_216, ??CrossCallReturnLabel_212, ??CrossCallReturnLabel_13
          CFI (cfiCond199) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond199) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond199) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond199) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond199) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond199) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond199) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond199) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond199) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond199) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond199) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond199) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond199) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond199) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond199) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond199) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond199) CFA_SP SP+0
          CFI (cfiCond199) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker200 Using cfiCommon1
          CFI (cfiPicker200) NoFunction
          CFI (cfiPicker200) Picker
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        RET
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiCond195
          CFI EndBlock cfiCond196
          CFI EndBlock cfiCond197
          CFI EndBlock cfiCond198
          CFI EndBlock cfiCond199
          CFI EndBlock cfiPicker200
// 2125 
// 2126 /*********************************************************************
// 2127  * @fn      zclBuildHdr
// 2128  *
// 2129  * @brief   Build header of the ZCL format
// 2130  *
// 2131  * @param   hdr - outgoing header information
// 2132  * @param   pData - outgoing header space
// 2133  *
// 2134  * @return  pointer past the header
// 2135  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2136 static uint8 *zclBuildHdr( zclFrameHdr_t *hdr, uint8 *pData )
zclBuildHdr:
          CFI Block cfiBlock201 Using cfiCommon0
          CFI Function zclBuildHdr
        CODE
// 2137 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
// 2138   // Build the Frame Control byte
// 2139   *pData = hdr->fc.type;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ANL     A,#0x3
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ??Subroutine119_0 & 0xFFFF
// 2140   *pData |= hdr->fc.manuSpecific << 2;
??CrossCallReturnLabel_182:
        ANL     A,#0x4
        LCALL   ?Subroutine28 & 0xFFFF
// 2141   *pData |= hdr->fc.direction << 3;
??CrossCallReturnLabel_180:
        ANL     A,#0x8
        LCALL   ?Subroutine28 & 0xFFFF
// 2142   *pData |= hdr->fc.disableDefaultRsp << 4;
??CrossCallReturnLabel_181:
        ANL     A,#0x10
        MOV     R0,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        ORL     A,R0
        LCALL   ?Subroutine86 & 0xFFFF
// 2143   pData++;  // move past the frame control field
// 2144 
// 2145   // Add the manfacturer code
// 2146   if ( hdr->fc.manuSpecific )
??CrossCallReturnLabel_121:
        MOVX    A,@DPTR
        ANL     A,#0x4
        JZ      ??CrossCallReturnLabel_184
// 2147   {
// 2148     *pData++ = LO_UINT16( hdr->manuCode );
        LCALL   ?Subroutine26 & 0xFFFF
// 2149     *pData++ = HI_UINT16( hdr->manuCode );
??CrossCallReturnLabel_186:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        LCALL   ??Subroutine120_0 & 0xFFFF
// 2150   }
// 2151 
// 2152   // Add the Transaction Sequence Number
// 2153   *pData++ = hdr->transSeqNum;
??CrossCallReturnLabel_184:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine19 & 0xFFFF
// 2154 
// 2155   // Add the Cluster's command ID
// 2156   *pData++ = hdr->commandID;
??CrossCallReturnLabel_15:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    @DPTR,A
        INC     DPTR
// 2157 
// 2158   // Should point to the frame payload
// 2159   return ( pData );
        MOV     R2,DPL
        MOV     R3,DPH
          CFI EndBlock cfiBlock201
        REQUIRE ?Subroutine7
        ; // Fall through to label ?Subroutine7
// 2160 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiBlock202 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock202

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond203 Using cfiCommon0
          CFI Function zclBuildHdr
          CFI Conditional ??CrossCallReturnLabel_180
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function zclBuildHdr
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_181
          CFI (cfiCond204) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond204) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond204) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond204) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond204) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond204) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond204) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond204) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond204) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond204) CFA_SP SP+0
          CFI (cfiCond204) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker205 Using cfiCommon1
          CFI (cfiPicker205) NoFunction
          CFI (cfiPicker205) Picker
        MOV     R0,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        ORL     A,R0
          CFI EndBlock cfiCond203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiPicker205
        REQUIRE ??Subroutine119_0
        ; // Fall through to label ??Subroutine119_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine119_0:
          CFI Block cfiCond206 Using cfiCommon0
          CFI Function zclBuildHdr
          CFI Conditional ??CrossCallReturnLabel_182
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function zclBuildHdr
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_180
          CFI (cfiCond207) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond207) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond207) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond207) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond207) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond207) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond207) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond207) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond207) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond207) CFA_SP SP+0
          CFI (cfiCond207) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond208 Using cfiCommon0
          CFI (cfiCond208) Function zclBuildHdr
          CFI (cfiCond208) Conditional ??CrossCallReturnLabel_181
          CFI (cfiCond208) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond208) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond208) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond208) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond208) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond208) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond208) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond208) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond208) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond208) CFA_SP SP+0
          CFI (cfiCond208) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker209 Using cfiCommon1
          CFI (cfiPicker209) NoFunction
          CFI (cfiPicker209) Picker
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiCond208
          CFI EndBlock cfiPicker209

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond210 Using cfiCommon0
          CFI Function zcl_SendWriteRequest
          CFI Conditional ??CrossCallReturnLabel_185
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond211 Using cfiCommon0
          CFI (cfiCond211) Function zclBuildHdr
          CFI (cfiCond211) Conditional ??CrossCallReturnLabel_186
          CFI (cfiCond211) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond211) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond211) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond211) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond211) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond211) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond211) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond211) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond211) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond211) CFA_SP SP+0
          CFI (cfiCond211) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker212 Using cfiCommon1
          CFI (cfiPicker212) NoFunction
          CFI (cfiPicker212) Picker
        MOV     A,R2
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
          CFI EndBlock cfiCond210
          CFI EndBlock cfiCond211
          CFI EndBlock cfiPicker212
        REQUIRE ??Subroutine120_0
        ; // Fall through to label ??Subroutine120_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine120_0:
          CFI Block cfiCond213 Using cfiCommon0
          CFI Function zcl_SendWriteRequest
          CFI Conditional ??CrossCallReturnLabel_183
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond214 Using cfiCommon0
          CFI (cfiCond214) Function zclBuildHdr
          CFI (cfiCond214) Conditional ??CrossCallReturnLabel_184
          CFI (cfiCond214) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond214) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond214) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond214) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond214) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond214) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond214) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond214) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond214) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond214) CFA_SP SP+0
          CFI (cfiCond214) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond215 Using cfiCommon0
          CFI (cfiCond215) Function zcl_SendWriteRequest
          CFI (cfiCond215) Conditional ??CrossCallReturnLabel_185
          CFI (cfiCond215) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond215) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond215) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond215) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond215) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond215) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond215) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond215) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond215) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond215) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond215) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond215) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond215) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond215) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond215) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond215) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond215) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond215) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond215) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond215) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond215) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond215) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond215) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond215) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond215) CFA_SP SP+0
          CFI (cfiCond215) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond216 Using cfiCommon0
          CFI (cfiCond216) Function zclBuildHdr
          CFI (cfiCond216) Conditional ??CrossCallReturnLabel_186
          CFI (cfiCond216) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond216) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond216) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond216) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond216) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond216) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond216) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond216) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond216) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond216) CFA_SP SP+0
          CFI (cfiCond216) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker217 Using cfiCommon1
          CFI (cfiPicker217) NoFunction
          CFI (cfiPicker217) Picker
        MOVX    A,@DPTR
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    @DPTR,A
        INC     DPTR
        INC     R4
        MOV     R5,DPH
        RET
          CFI EndBlock cfiCond213
          CFI EndBlock cfiCond214
          CFI EndBlock cfiCond215
          CFI EndBlock cfiCond216
          CFI EndBlock cfiPicker217

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond218 Using cfiCommon0
          CFI Function zcl_SendWriteRequest
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond219 Using cfiCommon0
          CFI (cfiCond219) Function zclBuildHdr
          CFI (cfiCond219) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond219) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond219) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond219) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond219) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond219) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond219) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond219) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond219) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond219) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond219) CFA_SP SP+0
          CFI (cfiCond219) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker220 Using cfiCommon1
          CFI (cfiPicker220) NoFunction
          CFI (cfiPicker220) Picker
        MOVX    A,@DPTR
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine86 & 0xFFFF
??CrossCallReturnLabel_122:
        INC     DPTR
        RET
          CFI EndBlock cfiCond218
          CFI EndBlock cfiCond219
          CFI EndBlock cfiPicker220

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine86:
          CFI Block cfiCond221 Using cfiCommon0
          CFI Function zclBuildHdr
          CFI Conditional ??CrossCallReturnLabel_121
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond222 Using cfiCommon0
          CFI (cfiCond222) Function zcl_SendWriteRequest
          CFI (cfiCond222) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_14
          CFI (cfiCond222) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond222) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond222) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond222) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond222) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond222) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond222) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond222) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond222) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond222) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond222) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond222) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond222) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond222) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond222) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond222) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond222) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond222) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond222) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond222) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond222) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond222) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond222) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond222) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond222) CFA_SP SP+0
          CFI (cfiCond222) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond223 Using cfiCommon0
          CFI (cfiCond223) Function zclBuildHdr
          CFI (cfiCond223) Conditional ??CrossCallReturnLabel_122, ??CrossCallReturnLabel_15
          CFI (cfiCond223) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond223) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond223) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond223) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond223) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond223) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond223) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond223) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond223) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond223) CFA_SP SP+0
          CFI (cfiCond223) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker224 Using cfiCommon1
          CFI (cfiPicker224) NoFunction
          CFI (cfiPicker224) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,R2
        MOV     DPH,R3
        RET
          CFI EndBlock cfiCond221
          CFI EndBlock cfiCond222
          CFI EndBlock cfiCond223
          CFI EndBlock cfiPicker224
// 2161 
// 2162 /*********************************************************************
// 2163  * @fn      zclCalcHdrSize
// 2164  *
// 2165  * @brief   Calculate the number of bytes needed for an outgoing
// 2166  *          ZCL header.
// 2167  *
// 2168  * @param   hdr - outgoing header information
// 2169  *
// 2170  * @return  returns the number of bytes needed
// 2171  */
// 2172 static uint8 zclCalcHdrSize( zclFrameHdr_t *hdr )
// 2173 {
// 2174   uint8 needed = (1 + 1 + 1); // frame control + transaction seq num + cmd ID
// 2175 
// 2176   // Add the manfacturer code
// 2177   if ( hdr->fc.manuSpecific )
// 2178   {
// 2179     needed += 2;
// 2180   }
// 2181 
// 2182   return ( needed );
// 2183 }
// 2184 
// 2185 /*********************************************************************
// 2186  * @fn      zclFindPlugin
// 2187  *
// 2188  * @brief   Find the right plugin for a cluster ID
// 2189  *
// 2190  * @param   clusterID - cluster ID to look for
// 2191  * @param   profileID - profile ID
// 2192  *
// 2193  * @return  pointer to plugin, NULL if not found
// 2194  */
// 2195 static zclLibPlugin_t *zclFindPlugin( uint16 clusterID, uint16 profileID )
// 2196 {
// 2197   zclLibPlugin_t *pLoop = plugins;
// 2198 
// 2199   (void)profileID;  // Intentionally unreferenced parameter
// 2200 
// 2201   while ( pLoop != NULL )
// 2202   {
// 2203     if ( ( clusterID >= pLoop->startClusterID ) && ( clusterID <= pLoop->endClusterID ) )
// 2204     {
// 2205       return ( pLoop );
// 2206     }
// 2207 
// 2208     pLoop = pLoop->next;
// 2209   }
// 2210 
// 2211   return ( (zclLibPlugin_t *)NULL );
// 2212 }
// 2213 
// 2214 #ifdef ZCL_DISCOVER
// 2215 /*********************************************************************
// 2216  * @fn      zclFindCmdRecsList
// 2217  *
// 2218  * @brief   Find the right command record list for an endpoint
// 2219  *
// 2220  * @param   endpoint - endpoint to look for
// 2221  *
// 2222  * @return  pointer to record list, NULL if not found
// 2223  */
// 2224 static zclCmdRecsList_t *zclFindCmdRecsList( uint8 endpoint )
// 2225 {
// 2226   zclCmdRecsList_t *pLoop = gpCmdList;
// 2227 
// 2228   while ( pLoop != NULL )
// 2229   {
// 2230     if ( pLoop->endpoint == endpoint )
// 2231     {
// 2232       return ( pLoop );
// 2233     }
// 2234 
// 2235     pLoop = pLoop->pNext;
// 2236   }
// 2237 
// 2238   return ( NULL );
// 2239 }
// 2240 
// 2241 /*********************************************************************
// 2242  * @fn      zclFindCmdRec
// 2243  *
// 2244  * @brief   Find the command record that matchs the parameters
// 2245  *
// 2246  * @param   endpoint - Application's endpoint
// 2247  * @param   clusterID - cluster ID
// 2248  * @param   attrId - attribute looking for
// 2249  * @param   pAttr - attribute record to be returned
// 2250  *
// 2251  * @return  TRUE if record found. FALSE, otherwise.
// 2252  */
// 2253 uint8 zclFindCmdRec( uint8 endpoint, uint16 clusterID, uint8 cmdID, zclCommandRec_t *pCmd )
// 2254 {
// 2255   uint8 i;
// 2256   zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
// 2257 
// 2258   if ( pRec != NULL )
// 2259   {
// 2260     for ( i = 0; i < pRec->numCommands; i++ )
// 2261     {
// 2262       if ( pRec->pCmdRecs[i].clusterID == clusterID && pRec->pCmdRecs[i].cmdID == cmdID )
// 2263       {
// 2264         *pCmd = pRec->pCmdRecs[i];
// 2265 
// 2266         return ( TRUE ); // EMBEDDED RETURN
// 2267       }
// 2268     }
// 2269   }
// 2270 
// 2271   return ( FALSE );
// 2272 }
// 2273 #endif // ZCL_DISCOVER
// 2274 
// 2275 /*********************************************************************
// 2276  * @fn      zclFindAttrRecsList
// 2277  *
// 2278  * @brief   Find the right attribute record list for an endpoint
// 2279  *
// 2280  * @param   clusterID - endpointto look for
// 2281  *
// 2282  * @return  pointer to record list, NULL if not found
// 2283  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2284 static zclAttrRecsList *zclFindAttrRecsList( uint8 endpoint )
zclFindAttrRecsList:
          CFI Block cfiBlock225 Using cfiCommon0
          CFI Function zclFindAttrRecsList
        CODE
// 2285 {
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
// 2286   zclAttrRecsList *pLoop = attrList;
        MOV     DPTR,#attrList
        SJMP    ??zclFindAttrRecsList_0
// 2287 
// 2288   while ( pLoop != NULL )
// 2289   {
// 2290     if ( pLoop->endpoint == endpoint )
// 2291     {
// 2292       return ( pLoop );
// 2293     }
// 2294 
// 2295     pLoop = pLoop->next;
??zclFindAttrRecsList_1:
        MOV     DPL,R2
        MOV     DPH,R3
??zclFindAttrRecsList_0:
        LCALL   ??Subroutine116_0 & 0xFFFF
??CrossCallReturnLabel_165:
        JZ      ??zclFindAttrRecsList_2
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
        JNZ     ??zclFindAttrRecsList_1
        SJMP    ??zclFindAttrRecsList_3
// 2296   }
// 2297 
// 2298   return ( NULL );
??zclFindAttrRecsList_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??zclFindAttrRecsList_3:
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock225
// 2299 }
// 2300 
// 2301 /*********************************************************************
// 2302  * @fn      zclFindAttrRec
// 2303  *
// 2304  * @brief   Find the attribute record that matchs the parameters
// 2305  *
// 2306  * @param   endpoint - Application's endpoint
// 2307  * @param   clusterID - cluster ID
// 2308  * @param   attrId - attribute looking for
// 2309  * @param   pAttr - attribute record to be returned
// 2310  *
// 2311  * @return  TRUE if record found. FALSE, otherwise.
// 2312  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2313 uint8 zclFindAttrRec( uint8 endpoint, uint16 clusterID, uint16 attrId, zclAttrRec_t *pAttr )
zclFindAttrRec:
          CFI Block cfiBlock226 Using cfiCommon0
          CFI Function zclFindAttrRec
        CODE
// 2314 {
        FUNCALL zclFindAttrRec, zclFindAttrRecsList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine127_0 & 0xFFFF
// 2315   uint8 x;
// 2316   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
??CrossCallReturnLabel_219:
        ; Setup parameters for call to function zclFindAttrRecsList
        LCALL   ??zclFindAttrRecsList?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
// 2317 
// 2318   if ( pRec != NULL )
        MOV     A,R4
        ORL     A,R5
        JZ      ??zclFindAttrRec_0
// 2319   {
// 2320     for ( x = 0; x < pRec->numAttributes; x++ )
        MOV     ?V0 + 5,#0x0
        SJMP    ??zclFindAttrRec_1
??zclFindAttrRec_2:
        INC     ?V0 + 5
??zclFindAttrRec_1:
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0 + 5
        CLR     C
        SUBB    A,R0
        JNC     ??zclFindAttrRec_0
// 2321     {
// 2322       if ( pRec->attrs[x].clusterID == clusterID && pRec->attrs[x].attr.attrId == attrId )
        MOV     ?V0 + 6,?V0 + 5
        MOV     ?V0 + 7,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 6
        LCALL   ?S_SHL
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,?V0 + 6
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 7
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R3,A
        MOV     A,?V0 + 2
        XRL     A,R2
        JNZ     ??zclFindAttrRec_3
        MOV     A,?V0 + 3
        XRL     A,R3
??zclFindAttrRec_3:
        JNZ     ??zclFindAttrRec_2
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVC    A,@A+DPTR
        MOV     R2,A
        MOV     A,#0x1
        MOVC    A,@A+DPTR
        MOV     R3,A
        MOV     A,?V0 + 0
        XRL     A,R2
        JNZ     ??zclFindAttrRec_4
        MOV     A,?V0 + 1
        XRL     A,R3
??zclFindAttrRec_4:
        JNZ     ??zclFindAttrRec_2
// 2323       {
// 2324         *pAttr = pRec->attrs[x];
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     A,#0x8
        LCALL   ?MOVE_LONG8_XDATA_CODE
// 2325 
// 2326         return ( TRUE ); // EMBEDDED RETURN
        MOV     R1,#0x1
        SJMP    ??zclFindAttrRec_5
// 2327       }
// 2328     }
// 2329   }
// 2330 
// 2331   return ( FALSE );
??zclFindAttrRec_0:
        MOV     R1,#0x0
??zclFindAttrRec_5:
        SJMP    ??Subroutine121_0
          CFI EndBlock cfiBlock226
// 2332 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiBlock227 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 37)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock227
        REQUIRE ??Subroutine121_0
        ; // Fall through to label ??Subroutine121_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine121_0:
          CFI Block cfiBlock228 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock228
// 2333 
// 2334 #if defined ( ZCL_READ ) || defined ( ZCL_WRITE )
// 2335 /*********************************************************************
// 2336  * @fn      zclGetReadWriteCB
// 2337  *
// 2338  * @brief   Get the Read/Write callback function pointer for a given endpoint.
// 2339  *
// 2340  * @param   endpoint - Application's endpoint
// 2341  *
// 2342  * @return  Read/Write CB, NULL if not found
// 2343  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2344 static zclReadWriteCB_t zclGetReadWriteCB( uint8 endpoint )
zclGetReadWriteCB:
          CFI Block cfiBlock229 Using cfiCommon0
          CFI Function zclGetReadWriteCB
        CODE
// 2345 {
        FUNCALL zclGetReadWriteCB, zclFindAttrRecsList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2346   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
        ; Setup parameters for call to function zclFindAttrRecsList
        LCALL   ??zclFindAttrRecsList?relay
        MOV     DPL,R2
        MOV     DPH,R3
// 2347 
// 2348   if ( pRec != NULL )
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??zclGetReadWriteCB_0
// 2349   {
// 2350     return ( pRec->pfnReadWriteCB );
        LCALL   ??Subroutine139_0 & 0xFFFF
// 2351   }
??CrossCallReturnLabel_303:
        SJMP    ??zclGetReadWriteCB_1
// 2352 
// 2353   return ( NULL );
??zclGetReadWriteCB_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
??zclGetReadWriteCB_1:
        SJMP    ?Subroutine2
          CFI EndBlock cfiBlock229
// 2354 }
// 2355 
// 2356 /*********************************************************************
// 2357  * @fn      zclGetAuthorizeCB
// 2358  *
// 2359  * @brief   Get the Read/Write Authorization callback function pointer
// 2360  *          for a given endpoint.
// 2361  *
// 2362  * @param   endpoint - Application's endpoint
// 2363  *
// 2364  * @return  Authorization CB, NULL if not found
// 2365  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2366 static zclAuthorizeCB_t zclGetAuthorizeCB( uint8 endpoint )
zclGetAuthorizeCB:
          CFI Block cfiBlock230 Using cfiCommon0
          CFI Function zclGetAuthorizeCB
        CODE
// 2367 {
        FUNCALL zclGetAuthorizeCB, zclFindAttrRecsList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 2368   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
        ; Setup parameters for call to function zclFindAttrRecsList
        LCALL   ??zclFindAttrRecsList?relay
        MOV     DPL,R2
        MOV     DPH,R3
// 2369 
// 2370   if ( pRec != NULL )
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??zclGetAuthorizeCB_0
// 2371   {
// 2372     return ( pRec->pfnAuthorizeCB );
        INC     DPTR
        LCALL   ??Subroutine138_0 & 0xFFFF
// 2373   }
??CrossCallReturnLabel_305:
        SJMP    ??zclGetAuthorizeCB_1
// 2374 
// 2375   return ( NULL );
??zclGetAuthorizeCB_0:
        MOV     R2,#0x0
        MOV     R3,#0x0
          CFI EndBlock cfiBlock230
??zclGetAuthorizeCB_1:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
// 2376 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock231 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock231
// 2377 #endif // ZCL_READ || ZCL_WRITE
// 2378 
// 2379 /*********************************************************************
// 2380  * @fn      zclFindClusterOption
// 2381  *
// 2382  * @brief   Find the option record that matchs the cluster id
// 2383  *
// 2384  * @param   endpoint - Application's endpoint
// 2385  * @param   clusterID - cluster ID looking for
// 2386  *
// 2387  * @return  pointer to clutser option, NULL if not found
// 2388  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2389 static zclOptionRec_t *zclFindClusterOption( uint8 endpoint, uint16 clusterID )
zclFindClusterOption:
          CFI Block cfiBlock232 Using cfiCommon0
          CFI Function zclFindClusterOption
        CODE
// 2390 {
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
// 2391   zclClusterOptionList *pLoop;
// 2392 
// 2393   pLoop = clusterOptionList;
        MOV     DPTR,#clusterOptionList
        SJMP    ??zclFindClusterOption_0
// 2394   while ( pLoop != NULL )
// 2395   {
// 2396     if ( pLoop->endpoint == endpoint )
// 2397     {
// 2398       uint8 x;
// 2399       for ( x = 0; x < pLoop->numOptions; x++ )
// 2400       {
// 2401         if ( pLoop->options[x].clusterID == clusterID )
// 2402         {
// 2403           return ( &(pLoop->options[x]) ); // EMBEDDED RETURN
// 2404         }
// 2405       }
// 2406     }
// 2407 
// 2408     pLoop = pLoop->next;
??zclFindClusterOption_1:
        MOV     DPL,R0
        MOV     DPH,R1
??zclFindClusterOption_0:
        LCALL   ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_196:
        JZ      ??zclFindClusterOption_2
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??zclFindClusterOption_1
        MOV     ?V0 + 0,#0x0
        SJMP    ??zclFindClusterOption_3
??zclFindClusterOption_4:
        INC     ?V0 + 0
??zclFindClusterOption_3:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,R2
        JNC     ??zclFindClusterOption_1
        MOV     A,?V0 + 0
        MOV     B,#0x3
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,R4
        JNZ     ??zclFindClusterOption_5
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R5
??zclFindClusterOption_5:
        JNZ     ??zclFindClusterOption_4
        SJMP    ??zclFindClusterOption_6
// 2409   }
// 2410 
// 2411   return ( NULL );
??zclFindClusterOption_2:
        MOV     R2,#0x0
        MOV     R3,#0x0
??zclFindClusterOption_6:
        LJMP    ?Subroutine7 & 0xFFFF
          CFI EndBlock cfiBlock232
// 2412 }
// 2413 
// 2414 /*********************************************************************
// 2415  * @fn      zclGetClusterOption
// 2416  *
// 2417  * @brief   Get the option record that matchs the cluster id
// 2418  *
// 2419  * @param   endpoint - Application's endpoint
// 2420  * @param   clusterID - cluster ID looking for
// 2421  *
// 2422  * @return  clutser option, AF_TX_OPTIONS_NONE if not found
// 2423  */
// 2424 static uint8 zclGetClusterOption( uint8 endpoint, uint16 clusterID )
// 2425 {
// 2426   uint8 option;
// 2427   zclOptionRec_t *pOption;
// 2428 
// 2429   pOption = zclFindClusterOption( endpoint, clusterID );
// 2430   if ( pOption != NULL )
// 2431   {
// 2432     option = pOption->option;
// 2433     if ( !ZG_SECURE_ENABLED )
// 2434     {
// 2435       option &= (AF_EN_SECURITY ^ 0xFF); // make sure Application Link Key security is off
// 2436     }
// 2437 
// 2438     return ( option ); // EMBEDDED RETURN
// 2439   }
// 2440 
// 2441   return ( AF_TX_OPTIONS_NONE );
// 2442 }
// 2443 
// 2444 /*********************************************************************
// 2445  * @fn      zclSetSecurityOption
// 2446  *
// 2447  * @brief   Set the security option for the cluster id
// 2448  *
// 2449  * @param   endpoint - Application's endpoint
// 2450  * @param   clusterID - cluster ID looking for
// 2451  * @param   enable - whether to enable (TRUE) or disable (FALSE) security option
// 2452  *
// 2453  * @return  none
// 2454  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2455 static void zclSetSecurityOption( uint8 endpoint, uint16 clusterID, uint8 enable )
zclSetSecurityOption:
          CFI Block cfiBlock233 Using cfiCommon0
          CFI Function zclSetSecurityOption
        CODE
// 2456 {
        FUNCALL zclSetSecurityOption, zclFindClusterOption
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R4
        MOV     R7,A
// 2457   zclOptionRec_t *pOption;
// 2458 
// 2459   pOption = zclFindClusterOption( endpoint, clusterID );
        ; Setup parameters for call to function zclFindClusterOption
        LCALL   ??zclFindClusterOption?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R0,?V0 + 0
        MOV     R1,?V0 + 1
// 2460   if ( pOption != NULL )
        MOV     A,R0
        ORL     A,R1
        JZ      ??zclSetSecurityOption_0
// 2461   {
// 2462     if ( enable )
        MOV     A,R0
        ADD     A,#0x2
        MOV     DPL,A
        MOV     A,R1
        LCALL   ??Subroutine122_0 & 0xFFFF
??CrossCallReturnLabel_188:
        MOV     A,R7
        JZ      ??zclSetSecurityOption_1
// 2463     {
// 2464       pOption->option |= AF_EN_SECURITY;
        MOVX    A,@DPTR
        SETB    0xE0 /* A   */.6
        SJMP    ??zclSetSecurityOption_2
// 2465     }
// 2466     else
// 2467     {
// 2468       pOption->option &= (AF_EN_SECURITY ^ 0xFF);
??zclSetSecurityOption_1:
        MOVX    A,@DPTR
        CLR     0xE0 /* A   */.6
??zclSetSecurityOption_2:
        MOVX    @DPTR,A
// 2469     }
// 2470   }
// 2471 }
??zclSetSecurityOption_0:
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock233

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine103:
          CFI Block cfiCond234 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_190
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-1
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond235 Using cfiCommon0
          CFI (cfiCond235) Function zcl_HandleExternal
          CFI (cfiCond235) Conditional ??CrossCallReturnLabel_191
          CFI (cfiCond235) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond235) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond235) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond235) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond235) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond235) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond235) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond235) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond235) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond235) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond235) CFA_SP SP+0
          CFI (cfiCond235) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond236 Using cfiCommon0
          CFI (cfiCond236) Function zclProcessInWriteCmd
          CFI (cfiCond236) Conditional ??CrossCallReturnLabel_192, ??CrossCallReturnLabel_275
          CFI (cfiCond236) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond236) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond236) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond236) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond236) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond236) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond236) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond236) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond236) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond236) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond236) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond236) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond236) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond236) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond236) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond236) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond236) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond236) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond236) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond236) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond236) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond236) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond236) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond236) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond236) CFA_SP SP+0
          CFI (cfiCond236) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_192, ??CrossCallReturnLabel_276
          CFI (cfiCond237) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond237) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond237) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond237) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond237) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond237) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond237) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond237) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond237) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond237) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond237) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond237) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond237) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond237) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond237) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond237) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond237) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond237) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond237) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond237) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond237) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond237) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond237) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond237) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond237) CFA_SP SP+0
          CFI (cfiCond237) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker238 Using cfiCommon1
          CFI (cfiPicker238) NoFunction
          CFI (cfiPicker238) Picker
        MOV     DPL,A
        MOV     A,R3
          CFI EndBlock cfiCond234
          CFI EndBlock cfiCond235
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiPicker238
        REQUIRE ??Subroutine122_0
        ; // Fall through to label ??Subroutine122_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine122_0:
          CFI Block cfiCond239 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_187
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond240 Using cfiCommon0
          CFI (cfiCond240) Function zcl_ProcessMessageMSG
          CFI (cfiCond240) Conditional ??CrossCallReturnLabel_193, ??CrossCallReturnLabel_174
          CFI (cfiCond240) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond240) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond240) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond240) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond240) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond240) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond240) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond240) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond240) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond240) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond240) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond240) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond240) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond240) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond240) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond240) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond240) CFA_SP SP+0
          CFI (cfiCond240) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond241 Using cfiCommon0
          CFI (cfiCond241) Function zclProcessInReadCmd
          CFI (cfiCond241) Conditional ??CrossCallReturnLabel_193, ??CrossCallReturnLabel_175
          CFI (cfiCond241) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond241) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond241) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond241) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond241) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond241) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond241) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond241) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond241) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond241) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond241) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond241) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond241) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond241) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond241) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond241) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond241) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond241) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond241) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond241) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond241) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond241) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond241) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond241) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond241) CFA_SP SP+0
          CFI (cfiCond241) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond242 Using cfiCommon0
          CFI (cfiCond242) Function zcl_HandleExternal
          CFI (cfiCond242) Conditional ??CrossCallReturnLabel_193, ??CrossCallReturnLabel_172
          CFI (cfiCond242) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond242) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond242) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond242) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond242) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond242) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond242) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond242) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond242) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond242) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond242) CFA_SP SP+0
          CFI (cfiCond242) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond243 Using cfiCommon0
          CFI (cfiCond243) Function zcl_SendCommand
          CFI (cfiCond243) Conditional ??CrossCallReturnLabel_193, ??CrossCallReturnLabel_173
          CFI (cfiCond243) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond243) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond243) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond243) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond243) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond243) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond243) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond243) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond243) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond243) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond243) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond243) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond243) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond243) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond243) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond243) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond243) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond243) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond243) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond243) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond243) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond243) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond243) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond243) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond243) CFA_SP SP+0
          CFI (cfiCond243) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond244 Using cfiCommon0
          CFI (cfiCond244) Function zcl_ProcessMessageMSG
          CFI (cfiCond244) Conditional ??CrossCallReturnLabel_189, ??CrossCallReturnLabel_51
          CFI (cfiCond244) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond244) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond244) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond244) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond244) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond244) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond244) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond244) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond244) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond244) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond244) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond244) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond244) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond244) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond244) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond244) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond244) CFA_SP SP+0
          CFI (cfiCond244) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond245 Using cfiCommon0
          CFI (cfiCond245) Function zcl_ProcessMessageMSG
          CFI (cfiCond245) Conditional ??CrossCallReturnLabel_189, ??CrossCallReturnLabel_52
          CFI (cfiCond245) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond245) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond245) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond245) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond245) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond245) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond245) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond245) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond245) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond245) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond245) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond245) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond245) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond245) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond245) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond245) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond245) CFA_SP SP+0
          CFI (cfiCond245) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond246 Using cfiCommon0
          CFI (cfiCond246) Function zclSetSecurityOption
          CFI (cfiCond246) Conditional ??CrossCallReturnLabel_188
          CFI (cfiCond246) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond246) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond246) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond246) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond246) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond246) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond246) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond246) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond246) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond246) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond246) CFA_SP SP+0
          CFI (cfiCond246) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond247 Using cfiCommon0
          CFI (cfiCond247) Function zcl_HandleExternal
          CFI (cfiCond247) Conditional ??CrossCallReturnLabel_190
          CFI (cfiCond247) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond247) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond247) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond247) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond247) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond247) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond247) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond247) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond247) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond247) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond247) CFA_SP SP+-1
          CFI (cfiCond247) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond248 Using cfiCommon0
          CFI (cfiCond248) Function zcl_HandleExternal
          CFI (cfiCond248) Conditional ??CrossCallReturnLabel_191
          CFI (cfiCond248) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond248) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond248) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond248) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond248) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond248) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond248) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond248) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond248) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond248) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond248) CFA_SP SP+0
          CFI (cfiCond248) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond249 Using cfiCommon0
          CFI (cfiCond249) Function zclProcessInWriteCmd
          CFI (cfiCond249) Conditional ??CrossCallReturnLabel_192, ??CrossCallReturnLabel_275
          CFI (cfiCond249) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond249) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond249) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond249) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond249) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond249) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond249) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond249) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond249) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond249) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond249) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond249) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond249) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond249) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond249) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond249) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond249) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond249) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond249) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond249) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond249) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond249) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond249) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond249) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond249) CFA_SP SP+0
          CFI (cfiCond249) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond250 Using cfiCommon0
          CFI (cfiCond250) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond250) Conditional ??CrossCallReturnLabel_192, ??CrossCallReturnLabel_276
          CFI (cfiCond250) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond250) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond250) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond250) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond250) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond250) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond250) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond250) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond250) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond250) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond250) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond250) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond250) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond250) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond250) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond250) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond250) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond250) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond250) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond250) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond250) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond250) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond250) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond250) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond250) CFA_SP SP+0
          CFI (cfiCond250) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker251 Using cfiCommon1
          CFI (cfiPicker251) NoFunction
          CFI (cfiPicker251) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond239
          CFI EndBlock cfiCond240
          CFI EndBlock cfiCond241
          CFI EndBlock cfiCond242
          CFI EndBlock cfiCond243
          CFI EndBlock cfiCond244
          CFI EndBlock cfiCond245
          CFI EndBlock cfiCond246
          CFI EndBlock cfiCond247
          CFI EndBlock cfiCond248
          CFI EndBlock cfiCond249
          CFI EndBlock cfiCond250
          CFI EndBlock cfiPicker251
// 2472 
// 2473 #ifdef ZCL_DISCOVER
// 2474 /*********************************************************************
// 2475  * @fn      zclFindNextCmdRec
// 2476  *
// 2477  * @brief   Find the command (or next) record that matchs the parameters
// 2478  *
// 2479  * @param   endpoint - Application's endpoint
// 2480  * @param   clusterID - cluster ID
// 2481  * @param   commandID - command ID from requesting command
// 2482  * @param   direction- direction of received command
// 2483  * @param   pCmdID - command looking for
// 2484  * @param   pCmd - command information within command record list
// 2485  *
// 2486  * @return  pointer to command record, NULL no more records of this cluster
// 2487  */
// 2488 static uint8 zclFindNextCmdRec( uint8 endpoint, uint16 clusterID, uint8 commandID,
// 2489                                 uint8 direction, uint8 *pCmdID, zclCommandRec_t *pCmd )
// 2490 {
// 2491   zclCmdRecsList_t *pRec = zclFindCmdRecsList( endpoint );
// 2492   uint8 i;
// 2493 
// 2494   if ( pRec != NULL )
// 2495   {
// 2496     for ( i = 0; i < pRec->numCommands; i++ )
// 2497     {
// 2498       if ( ( pRec->pCmdRecs[i].clusterID == clusterID ) &&
// 2499           ( pRec->pCmdRecs[i].cmdID >= *pCmdID ) )
// 2500       {
// 2501         if ( commandID == ZCL_CMD_DISCOVER_CMDS_RECEIVED )
// 2502         {
// 2503           if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_RECEIVED ) )
// 2504           {
// 2505             *pCmd = pRec->pCmdRecs[i];
// 2506 
// 2507             // Update command ID
// 2508             *pCmdID = pCmd->cmdID;
// 2509 
// 2510             return ( TRUE ); // EMBEDDED RETURN
// 2511           }
// 2512           else if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_RECEIVED ) )
// 2513           {
// 2514             *pCmd = pRec->pCmdRecs[i];
// 2515 
// 2516             // Update command ID
// 2517             *pCmdID = pCmd->cmdID;
// 2518 
// 2519             return ( TRUE ); // EMBEDDED RETURN
// 2520           }
// 2521         }
// 2522         else if ( commandID == ZCL_CMD_DISCOVER_CMDS_GEN )
// 2523         {
// 2524           if ( ( direction == ZCL_FRAME_CLIENT_SERVER_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_SERVER_GENERATED ) )
// 2525           {
// 2526             *pCmd = pRec->pCmdRecs[i];
// 2527 
// 2528             // Update command ID
// 2529             *pCmdID = pCmd->cmdID;
// 2530 
// 2531             return ( TRUE ); // EMBEDDED RETURN
// 2532           }
// 2533           else if ( ( direction == ZCL_FRAME_SERVER_CLIENT_DIR ) && ( pRec->pCmdRecs[i].flag & CMD_DIR_CLIENT_GENERATED ) )
// 2534           {
// 2535             *pCmd = pRec->pCmdRecs[i];
// 2536 
// 2537             // Update command ID
// 2538             *pCmdID = pCmd->cmdID;
// 2539 
// 2540             return ( TRUE ); // EMBEDDED RETURN
// 2541           }
// 2542         }
// 2543         else
// 2544         {
// 2545           return ( FALSE ); // Incorrect Command ID
// 2546         }
// 2547       }
// 2548     }
// 2549   }
// 2550 
// 2551   return ( FALSE );
// 2552 }
// 2553 
// 2554 /*********************************************************************
// 2555  * @fn      zclFindNextAttrRec
// 2556  *
// 2557  * @brief   Find the attribute (or next) record that matchs the parameters
// 2558  *
// 2559  * @param   endpoint - Application's endpoint
// 2560  * @param   clusterID - cluster ID
// 2561  * @param   attr - attribute looking for
// 2562  *
// 2563  * @return  pointer to attribute record, NULL if not found
// 2564  */
// 2565 static uint8 zclFindNextAttrRec( uint8 endpoint, uint16 clusterID, uint8 direction,
// 2566                                  uint16 *attrId, zclAttrRec_t *pAttr )
// 2567 {
// 2568   zclAttrRecsList *pRec = zclFindAttrRecsList( endpoint );
// 2569   uint8 attrDir;
// 2570 
// 2571   if ( pRec != NULL )
// 2572   {
// 2573     for ( uint16 x = 0; x < pRec->numAttributes; x++ )
// 2574     {
// 2575       if ( ( pRec->attrs[x].clusterID == clusterID ) &&
// 2576            ( pRec->attrs[x].attr.attrId >= *attrId ) )
// 2577       {
// 2578         // also make sure direction is right
// 2579         attrDir = (pRec->attrs[x].attr.accessControl & ACCESS_CLIENT) ? 1 : 0;
// 2580         if ( attrDir == direction )
// 2581         {
// 2582           // return attribute and found attribute ID
// 2583           *pAttr = pRec->attrs[x];
// 2584           *attrId = pAttr->attr.attrId;
// 2585 
// 2586           return ( TRUE ); // EMBEDDED RETURN
// 2587         }
// 2588       }
// 2589     }
// 2590   }
// 2591 
// 2592   return ( FALSE );
// 2593 }
// 2594 #endif // ZCL_DISCOVER
// 2595 
// 2596 /*********************************************************************
// 2597  * @fn      zclSerializeData
// 2598  *
// 2599  * @brief   Builds a buffer from the attribute data to sent out over
// 2600  *          the air.
// 2601  *          NOTE - Not compatible with application's attributes callbacks.
// 2602  *
// 2603  * @param   dataType - data types defined in zcl.h
// 2604  * @param   attrData - pointer to the attribute data
// 2605  * @param   buf - where to put the serialized data
// 2606  *
// 2607  * @return  pointer to end of destination buffer
// 2608  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2609 uint8 *zclSerializeData( uint8 dataType, void *attrData, uint8 *buf )
zclSerializeData:
          CFI Block cfiBlock252 Using cfiCommon0
          CFI Function zclSerializeData
        CODE
// 2610 {
        FUNCALL zclSerializeData, osal_buffer_uint32
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclSerializeData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 17, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 17, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
// 2611   uint8 *pStr;
// 2612   uint16 len;
// 2613 
// 2614   if ( attrData == NULL )
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        JNZ     $+5
        LJMP    ??zclSerializeData_0 & 0xFFFF
// 2615   {
// 2616     return ( buf );
// 2617   }
// 2618 
// 2619   switch ( dataType )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     ?V0 + 0,?V0 + 4
        MOV     ?V0 + 1,?V0 + 5
        MOV     ?V0 + 2,#0x0
        MOV     A,R6
        LCALL   ?UC_SWITCH_SPARSE
`?<Jumptable for zclSerializeData>_0`:
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        65
        DATA
        DATA8
        DATA
        DATA8
        DB        66
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_1
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        67
        DATA
        DATA8
        DATA
        DATA8
        DB        68
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_2
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        224
        DATA
        DATA8
        DATA
        DATA8
        DB        226
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        232
        DATA
        DATA8
        DATA
        DATA8
        DB        233
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        26
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        8
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        9
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        10
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        11
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        16
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        24
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        25
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        26
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        27
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        32
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        33
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        34
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        35
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        36
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_7
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        37
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_8
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        40
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        41
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        42
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_6
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        43
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        48
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_5
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        49
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        56
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_4
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        57
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        234
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_3
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        240
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_9
        DATA
        DATA8
        DATA
        DATA8
        DATA
        DATA8
        DB        241
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_10
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zclSerializeData_0
        CODE
// 2620   {
// 2621     case ZCL_DATATYPE_DATA8:
// 2622     case ZCL_DATATYPE_BOOLEAN:
// 2623     case ZCL_DATATYPE_BITMAP8:
// 2624     case ZCL_DATATYPE_INT8:
// 2625     case ZCL_DATATYPE_UINT8:
// 2626     case ZCL_DATATYPE_ENUM8:
// 2627       *buf++ = *((uint8 *)attrData);
??zclSerializeData_5:
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_233:
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
// 2628        break;
        LJMP    ??zclSerializeData_0 & 0xFFFF
// 2629 
// 2630     case ZCL_DATATYPE_DATA16:
// 2631     case ZCL_DATATYPE_BITMAP16:
// 2632     case ZCL_DATATYPE_UINT16:
// 2633     case ZCL_DATATYPE_INT16:
// 2634     case ZCL_DATATYPE_ENUM16:
// 2635     case ZCL_DATATYPE_SEMI_PREC:
// 2636     case ZCL_DATATYPE_CLUSTER_ID:
// 2637     case ZCL_DATATYPE_ATTR_ID:
// 2638       *buf++ = LO_UINT16( *((uint16*)attrData) );
??zclSerializeData_4:
        LCALL   ?Subroutine47 & 0xFFFF
??CrossCallReturnLabel_234:
        LCALL   ?Subroutine20 & 0xFFFF
// 2639       *buf++ = HI_UINT16( *((uint16*)attrData) );
??CrossCallReturnLabel_16:
        INC     DPTR
        LCALL   ??Subroutine128_0 & 0xFFFF
??CrossCallReturnLabel_228:
        SJMP    ??zclSerializeData_11
// 2640       break;
// 2641 
// 2642     case ZCL_DATATYPE_DATA24:
// 2643     case ZCL_DATATYPE_BITMAP24:
// 2644     case ZCL_DATATYPE_UINT24:
// 2645     case ZCL_DATATYPE_INT24:
// 2646       *buf++ = BREAK_UINT32( *((uint32*)attrData), 0 );
??zclSerializeData_6:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,?V0 + 0
        LCALL   ?Subroutine20 & 0xFFFF
// 2647       *buf++ = BREAK_UINT32( *((uint32*)attrData), 1 );
??CrossCallReturnLabel_17:
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 1
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
        INC     DPTR
        INC     R2
        MOV     R3,DPH
// 2648       *buf++ = BREAK_UINT32( *((uint32*)attrData), 2 );
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?UL_SHR
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,?V0 + 0
??zclSerializeData_11:
        MOVX    @DPTR,A
        INC     DPTR
        INC     R2
        MOV     R3,DPH
// 2649       break;
        SJMP    ??zclSerializeData_0
// 2650 
// 2651     case ZCL_DATATYPE_DATA32:
// 2652     case ZCL_DATATYPE_BITMAP32:
// 2653     case ZCL_DATATYPE_UINT32:
// 2654     case ZCL_DATATYPE_INT32:
// 2655     case ZCL_DATATYPE_SINGLE_PREC:
// 2656     case ZCL_DATATYPE_TOD:
// 2657     case ZCL_DATATYPE_DATE:
// 2658     case ZCL_DATATYPE_UTC:
// 2659     case ZCL_DATATYPE_BAC_OID:
// 2660       buf = zcl_buffer_uint32( buf, *((uint32*)attrData) );
??zclSerializeData_3:
        ; Setup parameters for call to function osal_buffer_uint32
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        LCALL   ??osal_buffer_uint32?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 2661       break;
        SJMP    ??zclSerializeData_0
// 2662 
// 2663     case ZCL_DATATYPE_UINT40:
// 2664       pStr = (uint8*)attrData;
// 2665       buf = zcl_memcpy( buf, pStr, 5 );
??zclSerializeData_7:
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     R4,#0x5
        SJMP    ??zclSerializeData_12
          CFI CFA_XSP16 add(XSP16, 14)
// 2666       break;
// 2667 
// 2668     case ZCL_DATATYPE_UINT48:
// 2669       pStr = (uint8*)attrData;
// 2670       buf = zcl_memcpy( buf, pStr, 6 );
??zclSerializeData_8:
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     R4,#0x6
        SJMP    ??zclSerializeData_12
          CFI CFA_XSP16 add(XSP16, 14)
// 2671       break;
// 2672 
// 2673     case ZCL_DATATYPE_IEEE_ADDR:
// 2674       pStr = (uint8*)attrData;
// 2675       buf = zcl_memcpy( buf, pStr, 8 );
??zclSerializeData_9:
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     R4,#0x8
        SJMP    ??zclSerializeData_12
          CFI CFA_XSP16 add(XSP16, 14)
// 2676       break;
// 2677 
// 2678     case ZCL_DATATYPE_CHAR_STR:
// 2679     case ZCL_DATATYPE_OCTET_STR:
// 2680       pStr = (uint8*)attrData;
// 2681       len = *pStr;
// 2682       buf = zcl_memcpy( buf, pStr, len+1 ); // Including length field
??zclSerializeData_1:
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R4,A
        CLR     A
        SJMP    ??zclSerializeData_13
          CFI CFA_XSP16 add(XSP16, 14)
// 2683       break;
// 2684 
// 2685     case ZCL_DATATYPE_LONG_CHAR_STR:
// 2686     case ZCL_DATATYPE_LONG_OCTET_STR:
// 2687       pStr = (uint8*)attrData;
// 2688       len = BUILD_UINT16( pStr[0], pStr[1] );
// 2689       buf = zcl_memcpy( buf, pStr, len+2 ); // Including length field
??zclSerializeData_2:
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ?Subroutine70 & 0xFFFF
??CrossCallReturnLabel_92:
        MOV     R4,A
        MOV     A,R1
??zclSerializeData_13:
        ADDC    A,#0x0
        MOV     R5,A
        SJMP    ??zclSerializeData_14
          CFI CFA_XSP16 add(XSP16, 14)
// 2690       break;
// 2691 
// 2692     case ZCL_DATATYPE_128_BIT_SEC_KEY:
// 2693       pStr = (uint8*)attrData;
// 2694       buf = zcl_memcpy( buf, pStr, SEC_KEY_LEN );
??zclSerializeData_10:
        ; Setup parameters for call to function osal_memcpy
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     R4,#0x10
??zclSerializeData_12:
        MOV     R5,#0x0
??zclSerializeData_14:
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
// 2695       break;
// 2696 
// 2697     case ZCL_DATATYPE_NO_DATA:
// 2698     case ZCL_DATATYPE_UNKNOWN:
// 2699       // Fall through
// 2700 
// 2701     default:
// 2702       break;
// 2703   }
// 2704 
// 2705   return ( buf );
??zclSerializeData_0:
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock252
// 2706 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond253 Using cfiCommon0
          CFI Function zclSerializeData
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond254 Using cfiCommon0
          CFI (cfiCond254) Function zclSerializeData
          CFI (cfiCond254) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond254) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond254) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond254) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond254) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond254) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond254) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond254) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond254) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond254) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond254) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond254) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond254) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond254) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond254) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond254) CFA_SP SP+0
          CFI (cfiCond254) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker255 Using cfiCommon1
          CFI (cfiPicker255) NoFunction
          CFI (cfiPicker255) Picker
        MOVX    @DPTR,A
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        RET
          CFI EndBlock cfiCond253
          CFI EndBlock cfiCond254
          CFI EndBlock cfiPicker255
// 2707 
// 2708 #ifdef ZCL_REPORT
// 2709 /*********************************************************************
// 2710  * @fn      zclAnalogDataType
// 2711  *
// 2712  * @brief   Checks to see if Data Type is Analog
// 2713  *
// 2714  * @param   dataType - data type
// 2715  *
// 2716  * @return  TRUE if data type is analog
// 2717  */
// 2718 uint8 zclAnalogDataType( uint8 dataType )
// 2719 {
// 2720   uint8 analog;
// 2721 
// 2722   switch ( dataType )
// 2723   {
// 2724     case ZCL_DATATYPE_UINT8:
// 2725     case ZCL_DATATYPE_UINT16:
// 2726     case ZCL_DATATYPE_UINT24:
// 2727     case ZCL_DATATYPE_UINT32:
// 2728     case ZCL_DATATYPE_UINT40:
// 2729     case ZCL_DATATYPE_UINT48:
// 2730     case ZCL_DATATYPE_UINT56:
// 2731     case ZCL_DATATYPE_UINT64:
// 2732     case ZCL_DATATYPE_INT8:
// 2733     case ZCL_DATATYPE_INT16:
// 2734     case ZCL_DATATYPE_INT24:
// 2735     case ZCL_DATATYPE_INT32:
// 2736     case ZCL_DATATYPE_INT40:
// 2737     case ZCL_DATATYPE_INT48:
// 2738     case ZCL_DATATYPE_INT56:
// 2739     case ZCL_DATATYPE_INT64:
// 2740     case ZCL_DATATYPE_SEMI_PREC:
// 2741     case ZCL_DATATYPE_SINGLE_PREC:
// 2742     case ZCL_DATATYPE_DOUBLE_PREC:
// 2743     case ZCL_DATATYPE_TOD:
// 2744     case ZCL_DATATYPE_DATE:
// 2745     case ZCL_DATATYPE_UTC:
// 2746       analog = TRUE;
// 2747       break;
// 2748 
// 2749     default:
// 2750       analog = FALSE;
// 2751       break;
// 2752   }
// 2753 
// 2754   return ( analog );
// 2755 }
// 2756 
// 2757 /*********************************************************************
// 2758  * @fn      zclIsLittleEndianMachine
// 2759  *
// 2760  * @brief   Verifies endianness in system.
// 2761  *
// 2762  * @param   none
// 2763  *
// 2764  * @return  MSB-00 or LSB-01 depending on endianness in the system
// 2765  */
// 2766 static int zclIsLittleEndianMachine(void)
// 2767 {
// 2768   uint16 test = 0x0001;
// 2769 
// 2770   return (*((uint8 *)(&test)));
// 2771 }
// 2772 
// 2773 /*********************************************************************
// 2774  * @fn      zcl_BuildAnalogData
// 2775  *
// 2776  * @brief   Build an analog arribute out of sequential bytes.
// 2777  *
// 2778  * @param   dataType - type of data
// 2779  * @param   pData - pointer to data
// 2780  * @param   pBuf - where to put the data
// 2781  *
// 2782  * @return  none
// 2783  */
// 2784 static void zcl_BuildAnalogData( uint8 dataType, uint8 *pData, uint8 *pBuf )
// 2785 {
// 2786   int current_byte_index;
// 2787   int remaining_bytes;
// 2788   int step;
// 2789 
// 2790   remaining_bytes = zclGetAttrDataLength(dataType, pData);
// 2791 
// 2792   // decide if move forward or backwards to copy data
// 2793   if ( zclIsLittleEndianMachine() )
// 2794   {
// 2795     step = 1;
// 2796     current_byte_index = 0;
// 2797   }
// 2798   else
// 2799   {
// 2800     step = -1;
// 2801     current_byte_index = remaining_bytes - 1;
// 2802   }
// 2803 
// 2804   while ( remaining_bytes-- )
// 2805   {
// 2806     pData[current_byte_index] = *(pBuf++);
// 2807     current_byte_index += step;
// 2808   }
// 2809 }
// 2810 #endif // ZCL_REPORT
// 2811 
// 2812 /*********************************************************************
// 2813  * @fn      zclGetDataTypeLength
// 2814  *
// 2815  * @brief   Return the length of the datatype in octet.
// 2816  *
// 2817  *          NOTE: Should not be called for ZCL_DATATYPE_OCTECT_STR or
// 2818  *                ZCL_DATATYPE_CHAR_STR data types.
// 2819  *
// 2820  * @param   dataType - data type
// 2821  *
// 2822  * @return  length of data
// 2823  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2824 uint8 zclGetDataTypeLength( uint8 dataType )
zclGetDataTypeLength:
          CFI Block cfiBlock256 Using cfiCommon0
          CFI Function zclGetDataTypeLength
        CODE
// 2825 {
        ; Saved register size: 0
        ; Auto size: 0
        MOV     A,R1
// 2826   uint8 len;
// 2827 
// 2828   switch ( dataType )
        ADD     A,#-0x8
        JZ      ??zclGetDataTypeLength_0
        DEC     A
        JZ      ??zclGetDataTypeLength_1
        DEC     A
        JZ      ??zclGetDataTypeLength_2
        DEC     A
        JZ      ??zclGetDataTypeLength_3
        ADD     A,#-0x5
        JZ      ??zclGetDataTypeLength_0
        ADD     A,#-0x8
        JZ      ??zclGetDataTypeLength_0
        DEC     A
        JZ      ??zclGetDataTypeLength_1
        DEC     A
        JZ      ??zclGetDataTypeLength_2
        DEC     A
        JZ      ??zclGetDataTypeLength_3
        ADD     A,#-0x5
        JZ      ??zclGetDataTypeLength_0
        DEC     A
        JZ      ??zclGetDataTypeLength_1
        DEC     A
        JZ      ??zclGetDataTypeLength_2
        DEC     A
        JZ      ??zclGetDataTypeLength_3
        DEC     A
        JZ      ??zclGetDataTypeLength_4
        DEC     A
        JZ      ??zclGetDataTypeLength_5
        DEC     A
        JZ      ??zclGetDataTypeLength_6
        DEC     A
        JZ      ??zclGetDataTypeLength_7
        DEC     A
        JZ      ??zclGetDataTypeLength_0
        DEC     A
        JZ      ??zclGetDataTypeLength_1
        DEC     A
        JZ      ??zclGetDataTypeLength_2
        DEC     A
        JZ      ??zclGetDataTypeLength_3
        DEC     A
        JZ      ??zclGetDataTypeLength_4
        DEC     A
        JZ      ??zclGetDataTypeLength_5
        DEC     A
        JZ      ??zclGetDataTypeLength_6
        DEC     A
        JZ      ??zclGetDataTypeLength_7
        DEC     A
        JZ      ??zclGetDataTypeLength_0
        DEC     A
        JZ      ??zclGetDataTypeLength_1
        ADD     A,#-0x7
        JZ      ??zclGetDataTypeLength_1
        DEC     A
        JZ      ??zclGetDataTypeLength_3
        DEC     A
        JZ      ??zclGetDataTypeLength_7
        ADD     A,#0x5a
        JZ      ??zclGetDataTypeLength_3
        DEC     A
        JZ      ??zclGetDataTypeLength_3
        DEC     A
        JZ      ??zclGetDataTypeLength_3
        ADD     A,#-0x6
        JZ      ??zclGetDataTypeLength_1
        DEC     A
        JZ      ??zclGetDataTypeLength_1
        DEC     A
        JZ      ??zclGetDataTypeLength_3
        ADD     A,#-0x6
        JZ      ??zclGetDataTypeLength_7
        DEC     A
        JZ      ??zclGetDataTypeLength_8
        SJMP    ??zclGetDataTypeLength_9
// 2829   {
// 2830     case ZCL_DATATYPE_DATA8:
// 2831     case ZCL_DATATYPE_BOOLEAN:
// 2832     case ZCL_DATATYPE_BITMAP8:
// 2833     case ZCL_DATATYPE_INT8:
// 2834     case ZCL_DATATYPE_UINT8:
// 2835     case ZCL_DATATYPE_ENUM8:
// 2836       len = 1;
??zclGetDataTypeLength_0:
        MOV     R1,#0x1
// 2837       break;
        SJMP    ??zclGetDataTypeLength_10
// 2838 
// 2839     case ZCL_DATATYPE_DATA16:
// 2840     case ZCL_DATATYPE_BITMAP16:
// 2841     case ZCL_DATATYPE_UINT16:
// 2842     case ZCL_DATATYPE_INT16:
// 2843     case ZCL_DATATYPE_ENUM16:
// 2844     case ZCL_DATATYPE_SEMI_PREC:
// 2845     case ZCL_DATATYPE_CLUSTER_ID:
// 2846     case ZCL_DATATYPE_ATTR_ID:
// 2847       len = 2;
??zclGetDataTypeLength_1:
        MOV     R1,#0x2
// 2848       break;
        SJMP    ??zclGetDataTypeLength_10
// 2849 
// 2850     case ZCL_DATATYPE_DATA24:
// 2851     case ZCL_DATATYPE_BITMAP24:
// 2852     case ZCL_DATATYPE_UINT24:
// 2853     case ZCL_DATATYPE_INT24:
// 2854       len = 3;
??zclGetDataTypeLength_2:
        MOV     R1,#0x3
// 2855       break;
        SJMP    ??zclGetDataTypeLength_10
// 2856 
// 2857     case ZCL_DATATYPE_DATA32:
// 2858     case ZCL_DATATYPE_BITMAP32:
// 2859     case ZCL_DATATYPE_UINT32:
// 2860     case ZCL_DATATYPE_INT32:
// 2861     case ZCL_DATATYPE_SINGLE_PREC:
// 2862     case ZCL_DATATYPE_TOD:
// 2863     case ZCL_DATATYPE_DATE:
// 2864     case ZCL_DATATYPE_UTC:
// 2865     case ZCL_DATATYPE_BAC_OID:
// 2866       len = 4;
??zclGetDataTypeLength_3:
        MOV     R1,#0x4
// 2867       break;
        SJMP    ??zclGetDataTypeLength_10
// 2868 
// 2869    case ZCL_DATATYPE_UINT40:
// 2870    case ZCL_DATATYPE_INT40:
// 2871        len = 5;
??zclGetDataTypeLength_4:
        MOV     R1,#0x5
// 2872        break;
        SJMP    ??zclGetDataTypeLength_10
// 2873 
// 2874    case ZCL_DATATYPE_UINT48:
// 2875    case ZCL_DATATYPE_INT48:
// 2876        len = 6;
??zclGetDataTypeLength_5:
        MOV     R1,#0x6
// 2877        break;
        SJMP    ??zclGetDataTypeLength_10
// 2878 
// 2879    case ZCL_DATATYPE_UINT56:
// 2880    case ZCL_DATATYPE_INT56:
// 2881        len = 7;
??zclGetDataTypeLength_6:
        MOV     R1,#0x7
// 2882        break;
        SJMP    ??zclGetDataTypeLength_10
// 2883 
// 2884    case ZCL_DATATYPE_DOUBLE_PREC:
// 2885    case ZCL_DATATYPE_IEEE_ADDR:
// 2886    case ZCL_DATATYPE_UINT64:
// 2887    case ZCL_DATATYPE_INT64:
// 2888      len = 8;
??zclGetDataTypeLength_7:
        MOV     R1,#0x8
// 2889      break;
        SJMP    ??zclGetDataTypeLength_10
// 2890 
// 2891     case ZCL_DATATYPE_128_BIT_SEC_KEY:
// 2892      len = SEC_KEY_LEN;
??zclGetDataTypeLength_8:
        MOV     R1,#0x10
// 2893      break;
        SJMP    ??zclGetDataTypeLength_10
// 2894 
// 2895     case ZCL_DATATYPE_NO_DATA:
// 2896     case ZCL_DATATYPE_UNKNOWN:
// 2897       // Fall through
// 2898 
// 2899     default:
// 2900       len = 0;
??zclGetDataTypeLength_9:
        MOV     R1,#0x0
// 2901       break;
// 2902   }
// 2903 
// 2904   return ( len );
??zclGetDataTypeLength_10:
        LJMP    ?BRET
          CFI EndBlock cfiBlock256
// 2905 }
// 2906 
// 2907 /*********************************************************************
// 2908  * @fn      zclGetAttrDataLength
// 2909  *
// 2910  * @brief   Return the length of the attribute.
// 2911  *
// 2912  * @param   dataType - data type
// 2913  * @param   pData - pointer to data
// 2914  *
// 2915  * @return  returns atrribute length
// 2916  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2917 uint16 zclGetAttrDataLength( uint8 dataType, uint8 *pData )
zclGetAttrDataLength:
          CFI Block cfiBlock257 Using cfiCommon0
          CFI Function zclGetAttrDataLength
        CODE
// 2918 {
        FUNCALL zclGetAttrDataLength, zclGetDataTypeLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
// 2919   uint16 dataLen = 0;
// 2920 
// 2921   if ( dataType == ZCL_DATATYPE_LONG_CHAR_STR || dataType == ZCL_DATATYPE_LONG_OCTET_STR )
        MOV     A,#0x44
        XRL     A,R6
        JZ      ??zclGetAttrDataLength_0
        MOV     A,#0x43
        XRL     A,R6
        JNZ     ??zclGetAttrDataLength_1
// 2922   {
// 2923     dataLen = BUILD_UINT16( pData[0], pData[1] ) + 2; // long string length + 2 for length field
??zclGetAttrDataLength_0:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine70 & 0xFFFF
// 2924   }
??CrossCallReturnLabel_93:
        MOV     R2,A
        MOV     A,R1
        SJMP    ??zclGetAttrDataLength_2
// 2925   else if ( dataType == ZCL_DATATYPE_CHAR_STR || dataType == ZCL_DATATYPE_OCTET_STR )
??zclGetAttrDataLength_1:
        MOV     A,#0x42
        XRL     A,R6
        JZ      ??zclGetAttrDataLength_3
        MOV     A,#0x41
        XRL     A,R6
        JNZ     ??zclGetAttrDataLength_4
// 2926   {
// 2927     dataLen = *pData + 1; // string length + 1 for length field
??zclGetAttrDataLength_3:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R2,A
        CLR     A
??zclGetAttrDataLength_2:
        ADDC    A,#0x0
        MOV     R3,A
        SJMP    ??zclGetAttrDataLength_5
// 2928   }
// 2929   else
// 2930   {
// 2931     dataLen = zclGetDataTypeLength( dataType );
??zclGetAttrDataLength_4:
        ; Setup parameters for call to function zclGetDataTypeLength
        LCALL   ??zclGetDataTypeLength?relay
        MOV     A,R1
        MOV     R2,A
        MOV     R3,#0x0
// 2932   }
// 2933 
// 2934   return ( dataLen );
??zclGetAttrDataLength_5:
        LJMP    ?Subroutine7 & 0xFFFF
          CFI EndBlock cfiBlock257
// 2935 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine70:
          CFI Block cfiCond258 Using cfiCommon0
          CFI Function zclSerializeData
          CFI Conditional ??CrossCallReturnLabel_92
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond259 Using cfiCommon0
          CFI (cfiCond259) Function zclGetAttrDataLength
          CFI (cfiCond259) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond259) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond259) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond259) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond259) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond259) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond259) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond259) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond259) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond259) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond259) CFA_SP SP+0
          CFI (cfiCond259) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker260 Using cfiCommon1
          CFI (cfiPicker260) NoFunction
          CFI (cfiPicker260) Picker
        LCALL   ?Subroutine110 & 0xFFFF
??CrossCallReturnLabel_340:
        MOV     R1,A
        MOV     A,R4
        ADD     A,#0x2
        RET
          CFI EndBlock cfiCond258
          CFI EndBlock cfiCond259
          CFI EndBlock cfiPicker260

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine110:
          CFI Block cfiCond261 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_336
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond262 Using cfiCommon0
          CFI (cfiCond262) Function zcl_registerAttrList
          CFI (cfiCond262) Conditional ??CrossCallReturnLabel_337
          CFI (cfiCond262) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond262) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond262) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond262) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond262) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond262) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond262) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond262) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond262) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond262) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond262) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond262) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond262) CFA_SP SP+0
          CFI (cfiCond262) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond263 Using cfiCommon0
          CFI (cfiCond263) Function zcl_registerClusterOptionList
          CFI (cfiCond263) Conditional ??CrossCallReturnLabel_338
          CFI (cfiCond263) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond263) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond263) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond263) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond263) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond263) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond263) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond263) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond263) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond263) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond263) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond263) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond263) CFA_SP SP+0
          CFI (cfiCond263) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond264 Using cfiCommon0
          CFI (cfiCond264) Function zclSerializeData
          CFI (cfiCond264) Conditional ??CrossCallReturnLabel_340, ??CrossCallReturnLabel_92
          CFI (cfiCond264) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond264) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond264) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond264) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond264) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond264) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond264) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond264) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond264) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond264) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond264) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond264) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond264) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond264) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond264) CFA_SP SP+0
          CFI (cfiCond264) CFA_XSP16 add(XSP16, 17)
          CFI Block cfiCond265 Using cfiCommon0
          CFI (cfiCond265) Function zclGetAttrDataLength
          CFI (cfiCond265) Conditional ??CrossCallReturnLabel_340, ??CrossCallReturnLabel_93
          CFI (cfiCond265) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond265) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond265) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond265) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond265) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond265) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond265) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond265) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond265) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond265) CFA_SP SP+0
          CFI (cfiCond265) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond266 Using cfiCommon0
          CFI (cfiCond266) Function zclParseInReadCmd
          CFI (cfiCond266) Conditional ??CrossCallReturnLabel_339
          CFI (cfiCond266) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond266) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond266) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond266) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond266) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond266) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond266) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond266) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond266) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond266) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond266) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond266) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond266) CFA_SP SP+0
          CFI (cfiCond266) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond267 Using cfiCommon0
          CFI (cfiCond267) Function zcl_ProcessMessageMSG
          CFI (cfiCond267) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_47
          CFI (cfiCond267) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond267) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond267) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond267) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond267) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond267) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond267) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond267) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond267) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond267) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond267) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond267) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond267) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond267) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond267) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond267) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond267) CFA_SP SP+0
          CFI (cfiCond267) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond268 Using cfiCommon0
          CFI (cfiCond268) Function zcl_ProcessMessageMSG
          CFI (cfiCond268) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_48
          CFI (cfiCond268) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond268) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond268) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond268) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond268) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond268) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond268) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond268) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond268) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond268) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond268) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond268) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond268) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond268) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond268) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond268) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond268) CFA_SP SP+0
          CFI (cfiCond268) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond269 Using cfiCommon0
          CFI (cfiCond269) Function zclProcessInWriteCmd
          CFI (cfiCond269) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_33
          CFI (cfiCond269) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond269) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond269) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond269) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond269) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond269) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond269) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond269) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond269) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond269) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond269) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond269) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond269) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond269) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond269) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond269) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond269) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond269) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond269) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond269) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond269) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond269) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond269) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond269) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond269) CFA_SP SP+0
          CFI (cfiCond269) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond270 Using cfiCommon0
          CFI (cfiCond270) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond270) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_34
          CFI (cfiCond270) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond270) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond270) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond270) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond270) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond270) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond270) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond270) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond270) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond270) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond270) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond270) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond270) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond270) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond270) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond270) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond270) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond270) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond270) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond270) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond270) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond270) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond270) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond270) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond270) CFA_SP SP+0
          CFI (cfiCond270) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond271 Using cfiCommon0
          CFI (cfiCond271) Function zcl_SendReadRsp
          CFI (cfiCond271) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_331, ??CrossCallReturnLabel_65
          CFI (cfiCond271) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond271) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond271) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond271) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond271) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond271) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond271) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond271) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond271) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond271) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond271) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond271) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond271) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond271) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond271) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond271) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond271) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond271) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond271) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond271) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond271) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond271) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond271) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond271) CFA_SP SP+0
          CFI (cfiCond271) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond272 Using cfiCommon0
          CFI (cfiCond272) Function zcl_SendReadRsp
          CFI (cfiCond272) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_331, ??CrossCallReturnLabel_66
          CFI (cfiCond272) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond272) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond272) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond272) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond272) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond272) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond272) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond272) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond272) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond272) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond272) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond272) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond272) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond272) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond272) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond272) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond272) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond272) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond272) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond272) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond272) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond272) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond272) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond272) CFA_SP SP+0
          CFI (cfiCond272) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond273 Using cfiCommon0
          CFI (cfiCond273) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond273) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_334, ??CrossCallReturnLabel_260
          CFI (cfiCond273) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond273) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond273) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond273) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond273) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond273) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond273) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond273) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond273) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond273) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond273) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond273) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond273) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond273) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond273) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond273) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond273) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond273) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond273) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond273) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond273) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond273) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond273) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond273) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond273) CFA_SP SP+0
          CFI (cfiCond273) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond274 Using cfiCommon0
          CFI (cfiCond274) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond274) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_334, ??CrossCallReturnLabel_261
          CFI (cfiCond274) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond274) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond274) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond274) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond274) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond274) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond274) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond274) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond274) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond274) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond274) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond274) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond274) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond274) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond274) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond274) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond274) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond274) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond274) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond274) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond274) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond274) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond274) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond274) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond274) CFA_SP SP+0
          CFI (cfiCond274) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond275 Using cfiCommon0
          CFI (cfiCond275) Function zclProcessInReadCmd
          CFI (cfiCond275) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_334, ??CrossCallReturnLabel_258
          CFI (cfiCond275) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond275) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond275) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond275) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond275) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond275) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond275) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond275) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond275) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond275) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond275) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond275) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond275) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond275) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond275) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond275) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond275) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond275) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond275) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond275) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond275) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond275) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond275) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond275) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond275) CFA_SP SP+0
          CFI (cfiCond275) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond276 Using cfiCommon0
          CFI (cfiCond276) Function zclProcessInWriteCmd
          CFI (cfiCond276) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_334, ??CrossCallReturnLabel_259
          CFI (cfiCond276) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond276) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond276) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond276) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond276) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond276) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond276) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond276) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond276) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond276) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond276) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond276) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond276) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond276) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond276) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond276) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond276) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond276) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond276) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond276) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond276) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond276) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond276) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond276) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond276) CFA_SP SP+0
          CFI (cfiCond276) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond277 Using cfiCommon0
          CFI (cfiCond277) Function zcl_HandleExternal
          CFI (cfiCond277) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_329
          CFI (cfiCond277) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond277) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond277) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond277) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond277) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond277) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond277) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond277) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond277) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond277) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond277) CFA_SP SP+0
          CFI (cfiCond277) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond278 Using cfiCommon0
          CFI (cfiCond278) Function zclProcessInReadCmd
          CFI (cfiCond278) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_330
          CFI (cfiCond278) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond278) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond278) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond278) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond278) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond278) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond278) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond278) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond278) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond278) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond278) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond278) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond278) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond278) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond278) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond278) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond278) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond278) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond278) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond278) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond278) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond278) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond278) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond278) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond278) CFA_SP SP+0
          CFI (cfiCond278) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond279 Using cfiCommon0
          CFI (cfiCond279) Function zcl_SendReadRsp
          CFI (cfiCond279) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_328
          CFI (cfiCond279) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond279) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond279) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond279) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond279) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond279) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond279) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond279) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond279) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond279) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond279) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond279) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond279) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond279) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond279) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond279) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond279) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond279) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond279) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond279) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond279) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond279) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond279) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond279) CFA_SP SP+0
          CFI (cfiCond279) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond280 Using cfiCommon0
          CFI (cfiCond280) Function zclWriteAttrDataUsingCB
          CFI (cfiCond280) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_327
          CFI (cfiCond280) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond280) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond280) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond280) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond280) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond280) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond280) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond280) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond280) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond280) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond280) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond280) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond280) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond280) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond280) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond280) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond280) CFA_SP SP+0
          CFI (cfiCond280) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond281 Using cfiCommon0
          CFI (cfiCond281) Function zcl_HandleExternal
          CFI (cfiCond281) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_322
          CFI (cfiCond281) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond281) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond281) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond281) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond281) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond281) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond281) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond281) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond281) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond281) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond281) CFA_SP SP+0
          CFI (cfiCond281) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond282 Using cfiCommon0
          CFI (cfiCond282) Function zcl_ProcessMessageMSG
          CFI (cfiCond282) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_323
          CFI (cfiCond282) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond282) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond282) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond282) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond282) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond282) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond282) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond282) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond282) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond282) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond282) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond282) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond282) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond282) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond282) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond282) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond282) CFA_SP SP+0
          CFI (cfiCond282) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond283 Using cfiCommon0
          CFI (cfiCond283) Function zclRevertWriteUndividedCmd
          CFI (cfiCond283) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_324
          CFI (cfiCond283) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond283) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond283) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond283) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond283) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond283) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond283) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond283) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond283) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond283) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond283) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond283) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond283) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond283) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond283) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond283) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond283) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond283) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond283) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond283) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond283) CFA_SP SP+0
          CFI (cfiCond283) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond284 Using cfiCommon0
          CFI (cfiCond284) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond284) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_325
          CFI (cfiCond284) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond284) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond284) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond284) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond284) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond284) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond284) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond284) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond284) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond284) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond284) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond284) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond284) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond284) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond284) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond284) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond284) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond284) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond284) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond284) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond284) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond284) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond284) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond284) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond284) CFA_SP SP+0
          CFI (cfiCond284) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond285 Using cfiCommon0
          CFI (cfiCond285) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond285) Conditional ??CrossCallReturnLabel_341, ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_326
          CFI (cfiCond285) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond285) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond285) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond285) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond285) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond285) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond285) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond285) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond285) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond285) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond285) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond285) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond285) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond285) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond285) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond285) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond285) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond285) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond285) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond285) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond285) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond285) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond285) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond285) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond285) CFA_SP SP+0
          CFI (cfiCond285) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker286 Using cfiCommon1
          CFI (cfiPicker286) NoFunction
          CFI (cfiPicker286) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond261
          CFI EndBlock cfiCond262
          CFI EndBlock cfiCond263
          CFI EndBlock cfiCond264
          CFI EndBlock cfiCond265
          CFI EndBlock cfiCond266
          CFI EndBlock cfiCond267
          CFI EndBlock cfiCond268
          CFI EndBlock cfiCond269
          CFI EndBlock cfiCond270
          CFI EndBlock cfiCond271
          CFI EndBlock cfiCond272
          CFI EndBlock cfiCond273
          CFI EndBlock cfiCond274
          CFI EndBlock cfiCond275
          CFI EndBlock cfiCond276
          CFI EndBlock cfiCond277
          CFI EndBlock cfiCond278
          CFI EndBlock cfiCond279
          CFI EndBlock cfiCond280
          CFI EndBlock cfiCond281
          CFI EndBlock cfiCond282
          CFI EndBlock cfiCond283
          CFI EndBlock cfiCond284
          CFI EndBlock cfiCond285
          CFI EndBlock cfiPicker286
// 2936 
// 2937 #ifdef ZCL_READ
// 2938 /*********************************************************************
// 2939  * @fn      zclReadAttrData
// 2940  *
// 2941  * @brief   Read the attribute's current value into pAttrData.
// 2942  *          NOTE - Not compatible with application's attributes callbacks.
// 2943  *
// 2944  * @param   pAttrData - where to put attribute data
// 2945  * @param   pAttr - pointer to attribute
// 2946  * @param   pDataLen - where to put attribute data length
// 2947  *
// 2948  * @return Success
// 2949  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2950 ZStatus_t zclReadAttrData( uint8 *pAttrData, zclAttrRec_t *pAttr, uint16 *pDataLen )
zclReadAttrData:
          CFI Block cfiBlock287 Using cfiCommon0
          CFI Function zclReadAttrData
        CODE
// 2951 {
        FUNCALL zclReadAttrData, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclReadAttrData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 2952   uint16 dataLen;
// 2953 
// 2954   if ( pAttr->attr.dataPtr == NULL )
        MOV     A,R4
        ADD     A,#0x6
        MOV     R0,A
        MOV     A,R5
        LCALL   ?Subroutine74 & 0xFFFF
??CrossCallReturnLabel_100:
        LCALL   ??Subroutine116_0 & 0xFFFF
??CrossCallReturnLabel_170:
        JNZ     ??zclReadAttrData_0
// 2955   {
// 2956     return ( ZCL_STATUS_FAILURE );
        MOV     R1,#0x1
        SJMP    ??zclReadAttrData_1
// 2957   }
// 2958 
// 2959   dataLen = zclGetAttrDataLength( pAttr->attr.dataType, (uint8*)(pAttr->attr.dataPtr) );
??zclReadAttrData_0:
        ; Setup parameters for call to function zclGetAttrDataLength
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??zclGetAttrDataLength?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
// 2960   zcl_memcpy( pAttrData, pAttr->attr.dataPtr, dataLen );
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine48 & 0xFFFF
// 2961 
// 2962   if ( pDataLen != NULL )
??CrossCallReturnLabel_53:
        JZ      ??zclReadAttrData_2
// 2963   {
// 2964     *pDataLen = dataLen;
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
// 2965   }
// 2966 
// 2967   return ( ZCL_STATUS_SUCCESS );
??zclReadAttrData_2:
        MOV     R1,#0x0
          CFI EndBlock cfiBlock287
??zclReadAttrData_1:
        REQUIRE ?Subroutine8
        ; // Fall through to label ?Subroutine8
// 2968 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiBlock288 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock288

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine74:
          CFI Block cfiCond289 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_99
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond290 Using cfiCommon0
          CFI (cfiCond290) Function zclReadAttrData
          CFI (cfiCond290) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond290) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond290) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond290) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond290) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond290) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond290) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond290) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond290) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond290) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond290) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond290) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond290) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond290) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond290) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond290) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond290) CFA_SP SP+0
          CFI (cfiCond290) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond291 Using cfiCommon0
          CFI (cfiCond291) Function zclWriteAttrData
          CFI (cfiCond291) Conditional ??CrossCallReturnLabel_101
          CFI (cfiCond291) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond291) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond291) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond291) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond291) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond291) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond291) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond291) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond291) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond291) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond291) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond291) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond291) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond291) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond291) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond291) CFA_SP SP+0
          CFI (cfiCond291) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker292 Using cfiCommon1
          CFI (cfiPicker292) NoFunction
          CFI (cfiPicker292) Picker
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 0,R0
        MOV     ?V0 + 1,R1
        ; Setup parameters for call to function zclGetAttrDataLength
        MOV     DPL,R0
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond289
          CFI EndBlock cfiCond290
          CFI EndBlock cfiCond291
          CFI EndBlock cfiPicker292

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine48:
          CFI Block cfiCond293 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_54
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond294 Using cfiCommon0
          CFI (cfiCond294) Function zclReadAttrData
          CFI (cfiCond294) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond294) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond294) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond294) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond294) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond294) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond294) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond294) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond294) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond294) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond294) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond294) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond294) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond294) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond294) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond294) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond294) CFA_SP SP+0
          CFI (cfiCond294) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiPicker295 Using cfiCommon1
          CFI (cfiPicker295) NoFunction
          CFI (cfiPicker295) Picker
        LCALL   ?Subroutine98 & 0xFFFF
??CrossCallReturnLabel_140:
        MOV     A,DPL
        ORL     A,DPH
        RET
          CFI EndBlock cfiCond293
          CFI EndBlock cfiCond294
          CFI EndBlock cfiPicker295
// 2969 
// 2970 /*********************************************************************
// 2971  * @fn      zcl_ReadAttrData
// 2972  *
// 2973  * @brief   Read the attribute's current value into pAttrData.
// 2974  *          Use application's callback function if assigned to this attribute.
// 2975  *
// 2976  * @param   endpoint - application's endpoint
// 2977  * @param   clusterId - cluster that attribute belongs to
// 2978  * @param   attrId - attribute id
// 2979  * @param   pAttrData - where to put attribute data
// 2980  * @param   pDataLen - where to put attribute data length
// 2981  *
// 2982  * @return  Successful if data was read
// 2983  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 2984 ZStatus_t zcl_ReadAttrData( uint8 endpoint, uint16 clusterId, uint16 attrId,
zcl_ReadAttrData:
          CFI Block cfiBlock296 Using cfiCommon0
          CFI Function zcl_ReadAttrData
        CODE
// 2985                                          uint8 *pAttrData, uint16 *pDataLen )
// 2986 {
        FUNCALL zcl_ReadAttrData, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ReadAttrData, zclReadAttrData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zcl_ReadAttrData, zclReadAttrDataUsingCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 2,R1
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 2987   zclAttrRec_t attrRec;
// 2988 
// 2989   if ( zclFindAttrRec( endpoint, clusterId, attrId, &attrRec ) == FALSE )
        ; Setup parameters for call to function zclFindAttrRec
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        LCALL   ??zclFindAttrRec?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,R1
        JNZ     ??zcl_ReadAttrData_0
// 2990   {
// 2991     return ( ZCL_STATUS_FAILURE );
        MOV     R1,#0x1
        SJMP    ??zcl_ReadAttrData_1
// 2992   }
??zcl_ReadAttrData_0:
        MOV     A,#0x18
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine61 & 0xFFFF
??CrossCallReturnLabel_75:
        MOV     A,#0x1a
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine59 & 0xFFFF
// 2993 
// 2994   if ( attrRec.attr.dataPtr != NULL )
??CrossCallReturnLabel_70:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_201:
        MOV     R0,#?V0 + 4
        JZ      ??zcl_ReadAttrData_2
// 2995   {
// 2996     return zclReadAttrData( pAttrData, &attrRec, pDataLen );
        ; Setup parameters for call to function zclReadAttrData
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 6
        MOV     R3,?V0 + 7
        LCALL   ??zclReadAttrData?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        SJMP    ??zcl_ReadAttrData_1
// 2997   }
// 2998   else
// 2999   {
// 3000     return zclReadAttrDataUsingCB( endpoint, clusterId, attrId, pAttrData, pDataLen );
??zcl_ReadAttrData_2:
        ; Setup parameters for call to function zclReadAttrDataUsingCB
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     R1,?V0 + 2
        LCALL   ??zclReadAttrDataUsingCB?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
??zcl_ReadAttrData_1:
        MOV     A,#0x8
// 3001   }
        LJMP    ?Subroutine6 & 0xFFFF
          CFI EndBlock cfiBlock296
// 3002 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine61:
          CFI Block cfiCond297 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_74
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond298 Using cfiCommon0
          CFI (cfiCond298) Function zcl_ReadAttrData
          CFI (cfiCond298) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond298) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond298) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond298) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond298) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond298) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond298) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond298) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond298) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond298) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond298) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond298) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond298) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond298) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond298) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond298) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond298) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond298) CFA_SP SP+0
          CFI (cfiCond298) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond299 Using cfiCommon0
          CFI (cfiCond299) Function zclReadAttrDataUsingCB
          CFI (cfiCond299) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond299) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond299) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond299) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond299) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond299) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond299) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond299) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond299) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond299) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond299) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond299) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond299) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond299) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond299) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond299) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond299) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond299) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond299) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond299) CFA_SP SP+0
          CFI (cfiCond299) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker300 Using cfiCommon1
          CFI (cfiPicker300) NoFunction
          CFI (cfiPicker300) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 7,A
        RET
          CFI EndBlock cfiCond297
          CFI EndBlock cfiCond298
          CFI EndBlock cfiCond299
          CFI EndBlock cfiPicker300

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine59:
          CFI Block cfiCond301 Using cfiCommon0
          CFI Function zcl_SendWriteRequest
          CFI Conditional ??CrossCallReturnLabel_69
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond302 Using cfiCommon0
          CFI (cfiCond302) Function zcl_ReadAttrData
          CFI (cfiCond302) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond302) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond302) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond302) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond302) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond302) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond302) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond302) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond302) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond302) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond302) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond302) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond302) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond302) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond302) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond302) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond302) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond302) CFA_SP SP+0
          CFI (cfiCond302) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond303 Using cfiCommon0
          CFI (cfiCond303) Function zclWriteAttrDataUsingCB
          CFI (cfiCond303) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond303) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond303) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond303) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond303) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond303) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond303) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond303) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond303) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond303) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond303) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond303) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond303) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond303) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond303) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond303) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond303) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond303) CFA_SP SP+0
          CFI (cfiCond303) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker304 Using cfiCommon1
          CFI (cfiPicker304) NoFunction
          CFI (cfiPicker304) Picker
        LCALL   ?Subroutine92 & 0xFFFF
??CrossCallReturnLabel_131:
        RET
          CFI EndBlock cfiCond301
          CFI EndBlock cfiCond302
          CFI EndBlock cfiCond303
          CFI EndBlock cfiPicker304

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine92:
          CFI Block cfiCond305 Using cfiCommon0
          CFI Function zcl_SendRead
          CFI Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_59
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond306 Using cfiCommon0
          CFI (cfiCond306) Function zcl_SendWriteRsp
          CFI (cfiCond306) Conditional ??CrossCallReturnLabel_129, ??CrossCallReturnLabel_60
          CFI (cfiCond306) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond306) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond306) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond306) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond306) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond306) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond306) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond306) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond306) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond306) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond306) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond306) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond306) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond306) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond306) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond306) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond306) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond306) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond306) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond306) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond306) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond306) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond306) CFA_SP SP+0
          CFI (cfiCond306) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond307 Using cfiCommon0
          CFI (cfiCond307) Function zcl_SendWriteRequest
          CFI (cfiCond307) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_69
          CFI (cfiCond307) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond307) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond307) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond307) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond307) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond307) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond307) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond307) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond307) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond307) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond307) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond307) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond307) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond307) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond307) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond307) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond307) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond307) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond307) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond307) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond307) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond307) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond307) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond307) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond307) CFA_SP SP+0
          CFI (cfiCond307) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond308 Using cfiCommon0
          CFI (cfiCond308) Function zcl_ReadAttrData
          CFI (cfiCond308) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_70
          CFI (cfiCond308) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond308) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond308) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond308) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond308) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond308) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond308) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond308) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond308) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond308) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond308) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond308) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond308) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond308) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond308) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond308) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond308) CFA_SP SP+0
          CFI (cfiCond308) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond309 Using cfiCommon0
          CFI (cfiCond309) Function zclWriteAttrDataUsingCB
          CFI (cfiCond309) Conditional ??CrossCallReturnLabel_131, ??CrossCallReturnLabel_71
          CFI (cfiCond309) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond309) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond309) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond309) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond309) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond309) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond309) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond309) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond309) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond309) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond309) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond309) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond309) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond309) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond309) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond309) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond309) CFA_SP SP+0
          CFI (cfiCond309) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond310 Using cfiCommon0
          CFI (cfiCond310) Function zclWriteAttrData
          CFI (cfiCond310) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_63
          CFI (cfiCond310) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond310) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond310) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond310) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond310) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond310) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond310) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond310) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond310) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond310) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond310) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond310) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond310) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond310) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond310) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond310) CFA_SP SP+0
          CFI (cfiCond310) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond311 Using cfiCommon0
          CFI (cfiCond311) Function zclRevertWriteUndividedCmd
          CFI (cfiCond311) Conditional ??CrossCallReturnLabel_130, ??CrossCallReturnLabel_64
          CFI (cfiCond311) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond311) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond311) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond311) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond311) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond311) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond311) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond311) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond311) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond311) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond311) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond311) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond311) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond311) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond311) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond311) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond311) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond311) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond311) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond311) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond311) CFA_SP SP+0
          CFI (cfiCond311) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker312 Using cfiCommon1
          CFI (cfiPicker312) NoFunction
          CFI (cfiPicker312) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        RET
          CFI EndBlock cfiCond305
          CFI EndBlock cfiCond306
          CFI EndBlock cfiCond307
          CFI EndBlock cfiCond308
          CFI EndBlock cfiCond309
          CFI EndBlock cfiCond310
          CFI EndBlock cfiCond311
          CFI EndBlock cfiPicker312

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine32:
          CFI Block cfiCond313 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_206
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond314 Using cfiCommon0
          CFI (cfiCond314) Function zcl_ProcessMessageMSG
          CFI (cfiCond314) Conditional ??CrossCallReturnLabel_207
          CFI (cfiCond314) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond314) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond314) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond314) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond314) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond314) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond314) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond314) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond314) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond314) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond314) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond314) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond314) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond314) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond314) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond314) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond314) CFA_SP SP+0
          CFI (cfiCond314) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiPicker315 Using cfiCommon1
          CFI (cfiPicker315) NoFunction
          CFI (cfiPicker315) Picker
        LCALL   ?Subroutine96 & 0xFFFF
          CFI EndBlock cfiCond313
          CFI EndBlock cfiCond314
          CFI EndBlock cfiPicker315
??CrossCallReturnLabel_136:
        REQUIRE ??Subroutine123_0
        ; // Fall through to label ??Subroutine123_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine123_0:
          CFI Block cfiCond316 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_205
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond317 Using cfiCommon0
          CFI (cfiCond317) Function zcl_ProcessMessageMSG
          CFI (cfiCond317) Conditional ??CrossCallReturnLabel_206
          CFI (cfiCond317) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond317) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond317) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond317) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond317) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond317) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond317) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond317) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond317) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond317) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond317) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond317) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond317) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond317) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond317) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond317) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond317) CFA_SP SP+0
          CFI (cfiCond317) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond318 Using cfiCommon0
          CFI (cfiCond318) Function zcl_ProcessMessageMSG
          CFI (cfiCond318) Conditional ??CrossCallReturnLabel_207
          CFI (cfiCond318) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond318) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond318) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond318) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond318) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond318) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond318) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond318) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond318) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond318) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond318) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond318) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond318) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond318) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond318) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond318) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond318) CFA_SP SP+0
          CFI (cfiCond318) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiPicker319 Using cfiCommon1
          CFI (cfiPicker319) NoFunction
          CFI (cfiPicker319) Picker
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond316
          CFI EndBlock cfiCond317
          CFI EndBlock cfiCond318
          CFI EndBlock cfiPicker319
        REQUIRE ??Subroutine124_0
        ; // Fall through to label ??Subroutine124_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine124_0:
          CFI Block cfiCond320 Using cfiCommon0
          CFI Function zcl_SendCommand
          CFI Conditional ??CrossCallReturnLabel_194
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond321 Using cfiCommon0
          CFI (cfiCond321) Function zcl_SendCommand
          CFI (cfiCond321) Conditional ??CrossCallReturnLabel_197
          CFI (cfiCond321) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond321) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond321) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond321) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond321) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond321) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond321) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond321) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond321) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond321) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond321) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond321) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond321) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond321) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond321) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond321) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond321) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond321) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond321) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond321) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond321) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond321) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond321) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond321) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond321) CFA_SP SP+0
          CFI (cfiCond321) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond322 Using cfiCommon0
          CFI (cfiCond322) Function zcl_SendCommand
          CFI (cfiCond322) Conditional ??CrossCallReturnLabel_195
          CFI (cfiCond322) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond322) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond322) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond322) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond322) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond322) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond322) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond322) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond322) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond322) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond322) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond322) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond322) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond322) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond322) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond322) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond322) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond322) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond322) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond322) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond322) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond322) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond322) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond322) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond322) CFA_SP SP+0
          CFI (cfiCond322) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond323 Using cfiCommon0
          CFI (cfiCond323) Function zcl_ProcessMessageMSG
          CFI (cfiCond323) Conditional ??CrossCallReturnLabel_198
          CFI (cfiCond323) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond323) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond323) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond323) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond323) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond323) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond323) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond323) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond323) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond323) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond323) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond323) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond323) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond323) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond323) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond323) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond323) CFA_SP SP+0
          CFI (cfiCond323) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond324 Using cfiCommon0
          CFI (cfiCond324) Function zcl_ProcessMessageMSG
          CFI (cfiCond324) Conditional ??CrossCallReturnLabel_199
          CFI (cfiCond324) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond324) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond324) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond324) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond324) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond324) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond324) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond324) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond324) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond324) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond324) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond324) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond324) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond324) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond324) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond324) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond324) CFA_SP SP+0
          CFI (cfiCond324) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond325 Using cfiCommon0
          CFI (cfiCond325) Function zcl_ProcessMessageMSG
          CFI (cfiCond325) Conditional ??CrossCallReturnLabel_200
          CFI (cfiCond325) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond325) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond325) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond325) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond325) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond325) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond325) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond325) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond325) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond325) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond325) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond325) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond325) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond325) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond325) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond325) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond325) CFA_SP SP+0
          CFI (cfiCond325) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond326 Using cfiCommon0
          CFI (cfiCond326) Function zclFindClusterOption
          CFI (cfiCond326) Conditional ??CrossCallReturnLabel_196
          CFI (cfiCond326) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond326) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond326) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond326) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond326) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond326) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond326) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond326) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond326) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond326) CFA_SP SP+0
          CFI (cfiCond326) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond327 Using cfiCommon0
          CFI (cfiCond327) Function zcl_ReadAttrData
          CFI (cfiCond327) Conditional ??CrossCallReturnLabel_201
          CFI (cfiCond327) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond327) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond327) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond327) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond327) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond327) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond327) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond327) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond327) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond327) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond327) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond327) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond327) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond327) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond327) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond327) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond327) CFA_SP SP+0
          CFI (cfiCond327) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond328 Using cfiCommon0
          CFI (cfiCond328) Function zclWriteAttrData
          CFI (cfiCond328) Conditional ??CrossCallReturnLabel_202
          CFI (cfiCond328) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond328) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond328) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond328) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond328) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond328) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond328) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond328) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond328) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond328) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond328) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond328) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond328) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond328) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond328) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond328) CFA_SP SP+0
          CFI (cfiCond328) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond329 Using cfiCommon0
          CFI (cfiCond329) Function zclProcessInWriteCmd
          CFI (cfiCond329) Conditional ??CrossCallReturnLabel_203
          CFI (cfiCond329) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond329) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond329) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond329) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond329) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond329) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond329) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond329) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond329) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond329) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond329) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond329) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond329) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond329) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond329) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond329) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond329) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond329) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond329) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond329) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond329) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond329) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond329) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond329) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond329) CFA_SP SP+0
          CFI (cfiCond329) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond330 Using cfiCommon0
          CFI (cfiCond330) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond330) Conditional ??CrossCallReturnLabel_204
          CFI (cfiCond330) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond330) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond330) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond330) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond330) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond330) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond330) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond330) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond330) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond330) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond330) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond330) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond330) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond330) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond330) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond330) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond330) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond330) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond330) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond330) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond330) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond330) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond330) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond330) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond330) CFA_SP SP+0
          CFI (cfiCond330) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond331 Using cfiCommon0
          CFI (cfiCond331) Function zcl_ProcessMessageMSG
          CFI (cfiCond331) Conditional ??CrossCallReturnLabel_205
          CFI (cfiCond331) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond331) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond331) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond331) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond331) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond331) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond331) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond331) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond331) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond331) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond331) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond331) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond331) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond331) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond331) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond331) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond331) CFA_SP SP+0
          CFI (cfiCond331) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond332 Using cfiCommon0
          CFI (cfiCond332) Function zcl_ProcessMessageMSG
          CFI (cfiCond332) Conditional ??CrossCallReturnLabel_206
          CFI (cfiCond332) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond332) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond332) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond332) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond332) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond332) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond332) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond332) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond332) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond332) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond332) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond332) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond332) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond332) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond332) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond332) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond332) CFA_SP SP+0
          CFI (cfiCond332) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond333 Using cfiCommon0
          CFI (cfiCond333) Function zcl_ProcessMessageMSG
          CFI (cfiCond333) Conditional ??CrossCallReturnLabel_207
          CFI (cfiCond333) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond333) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond333) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond333) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond333) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond333) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond333) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond333) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond333) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond333) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond333) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond333) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond333) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond333) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond333) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond333) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond333) CFA_SP SP+0
          CFI (cfiCond333) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiPicker334 Using cfiCommon1
          CFI (cfiPicker334) NoFunction
          CFI (cfiPicker334) Picker
        LCALL   ?Subroutine99 & 0xFFFF
??CrossCallReturnLabel_290:
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond320
          CFI EndBlock cfiCond321
          CFI EndBlock cfiCond322
          CFI EndBlock cfiCond323
          CFI EndBlock cfiCond324
          CFI EndBlock cfiCond325
          CFI EndBlock cfiCond326
          CFI EndBlock cfiCond327
          CFI EndBlock cfiCond328
          CFI EndBlock cfiCond329
          CFI EndBlock cfiCond330
          CFI EndBlock cfiCond331
          CFI EndBlock cfiCond332
          CFI EndBlock cfiCond333
          CFI EndBlock cfiPicker334

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine96:
          CFI Block cfiCond335 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_138, ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond336 Using cfiCommon0
          CFI (cfiCond336) Function zcl_ProcessMessageMSG
          CFI (cfiCond336) Conditional ??CrossCallReturnLabel_138, ??CrossCallReturnLabel_48
          CFI (cfiCond336) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond336) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond336) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond336) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond336) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond336) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond336) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond336) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond336) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond336) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond336) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond336) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond336) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond336) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond336) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond336) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond336) CFA_SP SP+0
          CFI (cfiCond336) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond337 Using cfiCommon0
          CFI (cfiCond337) Function zcl_ProcessMessageMSG
          CFI (cfiCond337) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_206
          CFI (cfiCond337) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond337) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond337) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond337) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond337) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond337) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond337) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond337) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond337) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond337) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond337) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond337) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond337) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond337) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond337) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond337) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond337) CFA_SP SP+0
          CFI (cfiCond337) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond338 Using cfiCommon0
          CFI (cfiCond338) Function zcl_ProcessMessageMSG
          CFI (cfiCond338) Conditional ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_207
          CFI (cfiCond338) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond338) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond338) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond338) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond338) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond338) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond338) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond338) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond338) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond338) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond338) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond338) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond338) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond338) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond338) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond338) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond338) CFA_SP SP+0
          CFI (cfiCond338) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond339 Using cfiCommon0
          CFI (cfiCond339) Function zclProcessInWriteCmd
          CFI (cfiCond339) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_42
          CFI (cfiCond339) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond339) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond339) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond339) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond339) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond339) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond339) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond339) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond339) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond339) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond339) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond339) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond339) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond339) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond339) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond339) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond339) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond339) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond339) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond339) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond339) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond339) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond339) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond339) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond339) CFA_SP SP+0
          CFI (cfiCond339) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond340 Using cfiCommon0
          CFI (cfiCond340) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond340) Conditional ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_43
          CFI (cfiCond340) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond340) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond340) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond340) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond340) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond340) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond340) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond340) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond340) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond340) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond340) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond340) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond340) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond340) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond340) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond340) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond340) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond340) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond340) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond340) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond340) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond340) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond340) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond340) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond340) CFA_SP SP+0
          CFI (cfiCond340) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker341 Using cfiCommon1
          CFI (cfiPicker341) NoFunction
          CFI (cfiPicker341) Picker
        LCALL   ?Subroutine109 & 0xFFFF
??CrossCallReturnLabel_152:
        RET
          CFI EndBlock cfiCond335
          CFI EndBlock cfiCond336
          CFI EndBlock cfiCond337
          CFI EndBlock cfiCond338
          CFI EndBlock cfiCond339
          CFI EndBlock cfiCond340
          CFI EndBlock cfiPicker341

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine109:
          CFI Block cfiCond342 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_138, ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond343 Using cfiCommon0
          CFI (cfiCond343) Function zcl_ProcessMessageMSG
          CFI (cfiCond343) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_138, ??CrossCallReturnLabel_48
          CFI (cfiCond343) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond343) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond343) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond343) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond343) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond343) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond343) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond343) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond343) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond343) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond343) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond343) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond343) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond343) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond343) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond343) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond343) CFA_SP SP+0
          CFI (cfiCond343) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond344 Using cfiCommon0
          CFI (cfiCond344) Function zcl_ProcessMessageMSG
          CFI (cfiCond344) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_206
          CFI (cfiCond344) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond344) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond344) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond344) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond344) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond344) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond344) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond344) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond344) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond344) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond344) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond344) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond344) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond344) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond344) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond344) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond344) CFA_SP SP+0
          CFI (cfiCond344) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond345 Using cfiCommon0
          CFI (cfiCond345) Function zcl_ProcessMessageMSG
          CFI (cfiCond345) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_136, ??CrossCallReturnLabel_207
          CFI (cfiCond345) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond345) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond345) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond345) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond345) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond345) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond345) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond345) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond345) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond345) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond345) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond345) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond345) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond345) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond345) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond345) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond345) CFA_SP SP+0
          CFI (cfiCond345) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond346 Using cfiCommon0
          CFI (cfiCond346) Function zclProcessInWriteCmd
          CFI (cfiCond346) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_42
          CFI (cfiCond346) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond346) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond346) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond346) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond346) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond346) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond346) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond346) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond346) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond346) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond346) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond346) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond346) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond346) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond346) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond346) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond346) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond346) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond346) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond346) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond346) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond346) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond346) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond346) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond346) CFA_SP SP+0
          CFI (cfiCond346) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond347 Using cfiCommon0
          CFI (cfiCond347) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond347) Conditional ??CrossCallReturnLabel_152, ??CrossCallReturnLabel_137, ??CrossCallReturnLabel_43
          CFI (cfiCond347) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond347) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond347) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond347) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond347) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond347) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond347) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond347) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond347) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond347) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond347) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond347) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond347) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond347) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond347) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond347) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond347) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond347) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond347) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond347) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond347) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond347) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond347) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond347) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond347) CFA_SP SP+0
          CFI (cfiCond347) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond348 Using cfiCommon0
          CFI (cfiCond348) Function zclProcessInWriteCmd
          CFI (cfiCond348) Conditional ??CrossCallReturnLabel_151, ??CrossCallReturnLabel_134
          CFI (cfiCond348) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond348) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond348) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond348) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond348) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond348) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond348) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond348) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond348) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond348) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond348) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond348) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond348) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond348) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond348) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond348) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond348) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond348) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond348) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond348) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond348) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond348) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond348) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond348) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond348) CFA_SP SP+0
          CFI (cfiCond348) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond349 Using cfiCommon0
          CFI (cfiCond349) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond349) Conditional ??CrossCallReturnLabel_151, ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_55
          CFI (cfiCond349) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond349) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond349) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond349) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond349) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond349) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond349) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond349) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond349) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond349) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond349) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond349) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond349) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond349) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond349) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond349) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond349) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond349) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond349) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond349) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond349) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond349) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond349) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond349) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond349) CFA_SP SP+0
          CFI (cfiCond349) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond350 Using cfiCommon0
          CFI (cfiCond350) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond350) Conditional ??CrossCallReturnLabel_151, ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_56
          CFI (cfiCond350) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond350) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond350) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond350) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond350) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond350) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond350) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond350) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond350) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond350) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond350) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond350) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond350) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond350) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond350) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond350) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond350) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond350) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond350) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond350) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond350) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond350) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond350) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond350) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond350) CFA_SP SP+0
          CFI (cfiCond350) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker351 Using cfiCommon1
          CFI (cfiPicker351) NoFunction
          CFI (cfiPicker351) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        RET
          CFI EndBlock cfiCond342
          CFI EndBlock cfiCond343
          CFI EndBlock cfiCond344
          CFI EndBlock cfiCond345
          CFI EndBlock cfiCond346
          CFI EndBlock cfiCond347
          CFI EndBlock cfiCond348
          CFI EndBlock cfiCond349
          CFI EndBlock cfiCond350
          CFI EndBlock cfiPicker351
// 3003 
// 3004 /*********************************************************************
// 3005  * @fn      zclGetAttrDataLengthUsingCB
// 3006  *
// 3007  * @brief   Use application's callback to get the length of the attribute's
// 3008  *          current value stored in the database.
// 3009  *
// 3010  * @param   endpoint - application's endpoint
// 3011  * @param   clusterId - cluster that attribute belongs to
// 3012  * @param   attrId - attribute id
// 3013  *
// 3014  * @return  returns attribute length
// 3015  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3016 static uint16 zclGetAttrDataLengthUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId )
zclGetAttrDataLengthUsingCB:
          CFI Block cfiBlock352 Using cfiCommon0
          CFI Function zclGetAttrDataLengthUsingCB
        CODE
// 3017 {
        FUNCALL zclGetAttrDataLengthUsingCB, zclGetReadWriteCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 3018   uint16 dataLen = 0;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 3019   zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
        ; Setup parameters for call to function zclGetReadWriteCB
        LCALL   ??zclGetReadWriteCB?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
// 3020 
// 3021   if ( pfnReadWriteCB != NULL )
        MOV     A,R2
        ORL     A,?V0 + 5
        JZ      ??zclGetAttrDataLengthUsingCB_0
// 3022   {
// 3023     // Only get the attribute length
// 3024     (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_LEN, NULL, &dataLen );
        ; Setup parameters for indirect call
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 6,DPL
        MOV     ?V0 + 7,DPH
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        CLR     A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R1,#0x0
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ?CALL_IND
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
// 3025   }
// 3026 
// 3027   return ( dataLen );
??zclGetAttrDataLengthUsingCB_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine140_0 & 0xFFFF
??CrossCallReturnLabel_298:
        MOV     A,#0x2
        LJMP    ?Subroutine6 & 0xFFFF
          CFI EndBlock cfiBlock352
// 3028 }
// 3029 
// 3030 /*********************************************************************
// 3031  * @fn      zclReadAttrDataUsingCB
// 3032  *
// 3033  * @brief   Use application's callback to read the attribute's current
// 3034  *          value stored in the database.
// 3035  *
// 3036  * @param   endpoint - application's endpoint
// 3037  * @param   clusterId - cluster that attribute belongs to
// 3038  * @param   attrId - attribute id
// 3039  * @param   pAttrData - where to put attribute data
// 3040  * @param   pDataLen - where to put attribute data length
// 3041  *
// 3042  * @return  Successful if data was read
// 3043  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3044 static ZStatus_t zclReadAttrDataUsingCB( uint8 endpoint, uint16 clusterId, uint16 attrId,
zclReadAttrDataUsingCB:
          CFI Block cfiBlock353 Using cfiCommon0
          CFI Function zclReadAttrDataUsingCB
        CODE
// 3045                                          uint8 *pAttrData, uint16 *pDataLen )
// 3046 {
        FUNCALL zclReadAttrDataUsingCB, zclGetReadWriteCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine61 & 0xFFFF
// 3047   zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
??CrossCallReturnLabel_76:
        ; Setup parameters for call to function zclGetReadWriteCB
        LCALL   ??zclGetReadWriteCB?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine141_0 & 0xFFFF
// 3048 
// 3049   if ( pDataLen != NULL )
??CrossCallReturnLabel_316:
        MOV     A,?V0 + 8
        ORL     A,?V0 + 9
        JZ      ??zclReadAttrDataUsingCB_0
// 3050   {
// 3051     *pDataLen = 0; // Always initialize it to 0
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
// 3052   }
// 3053 
// 3054   if ( pfnReadWriteCB != NULL )
??zclReadAttrDataUsingCB_0:
        MOV     A,R2
        ORL     A,?V0 + 3
        JZ      ??zclReadAttrDataUsingCB_1
// 3055   {
// 3056     // Read the attribute value and its length
// 3057     return ( (*pfnReadWriteCB)( clusterId, attrId, ZCL_OPER_READ, pAttrData, pDataLen ) );
        ; Setup parameters for indirect call
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R1,#0x1
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ?CALL_IND
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        SJMP    ??zclReadAttrDataUsingCB_2
// 3058   }
// 3059 
// 3060   return ( ZCL_STATUS_SOFTWARE_FAILURE );
??zclReadAttrDataUsingCB_1:
        MOV     R1,#-0x3f
??zclReadAttrDataUsingCB_2:
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock353
// 3061 }
// 3062 
// 3063 /*********************************************************************
// 3064  * @fn      zclAuthorizeRead
// 3065  *
// 3066  * @brief   Use application's callback to authorize a Read operation
// 3067  *          on a given attribute.
// 3068  *
// 3069  * @param   endpoint - application's endpoint
// 3070  * @param   srcAddr - source Address
// 3071  * @param   pAttr - pointer to attribute
// 3072  *
// 3073  * @return  ZCL_STATUS_SUCCESS: Operation authorized
// 3074  *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
// 3075  */
// 3076 static ZStatus_t zclAuthorizeRead( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
// 3077 {
// 3078   if ( zcl_AccessCtrlAuthRead( pAttr->attr.accessControl ) )
// 3079   {
// 3080     zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
// 3081 
// 3082     if ( pfnAuthorizeCB != NULL )
// 3083     {
// 3084       return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_READ ) );
// 3085     }
// 3086   }
// 3087 
// 3088   return ( ZCL_STATUS_SUCCESS );
// 3089 }
// 3090 #endif // ZCL_READ
// 3091 
// 3092 #ifdef ZCL_WRITE
// 3093 /*********************************************************************
// 3094  * @fn      zclWriteAttrData
// 3095  *
// 3096  * @brief   Write the received data.
// 3097  *
// 3098  * @param   endpoint - application's endpoint
// 3099  * @param   pAttr - where to write data to
// 3100  * @param   pWriteRec - data to be written
// 3101  *
// 3102  * @return  Successful if data was written
// 3103  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3104 static ZStatus_t zclWriteAttrData( uint8 endpoint, afAddrType_t *srcAddr,
zclWriteAttrData:
          CFI Block cfiBlock354 Using cfiCommon0
          CFI Function zclWriteAttrData
        CODE
// 3105                                    zclAttrRec_t *pAttr, zclWriteRec_t *pWriteRec )
// 3106 {
        FUNCALL zclWriteAttrData, zclAuthorizeWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclWriteAttrData, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclWriteAttrData, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 0
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
// 3107   uint8 status;
// 3108 
// 3109   if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??zclWriteAttrData_0
// 3110   {
// 3111     status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
        ; Setup parameters for call to function zclAuthorizeWrite
        LCALL   ??zclAuthorizeWrite?relay
        MOV     A,R1
        MOV     ?V0 + 3,A
// 3112     if ( status == ZCL_STATUS_SUCCESS )
        JNZ     ??zclWriteAttrData_1
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
// 3113     {
// 3114       if ( ( zcl_ValidateAttrDataCB == NULL ) || zcl_ValidateAttrDataCB( pAttr, pWriteRec ) )
        MOV     DPTR,#zcl_ValidateAttrDataCB
        LCALL   ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_202:
        JZ      ??zclWriteAttrData_2
        ; Setup parameters for indirect call
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?CALL_IND
        MOV     A,R1
        JZ      ??zclWriteAttrData_3
// 3115       {
// 3116         // Write the attribute value
// 3117         uint16 len = zclGetAttrDataLength( pAttr->attr.dataType, pWriteRec->attrData );
??zclWriteAttrData_2:
        MOV     A,?V0 + 0
        ADD     A,#0x3
        MOV     R0,A
        MOV     A,?V0 + 1
        LCALL   ?Subroutine74 & 0xFFFF
??CrossCallReturnLabel_101:
        LCALL   ??Subroutine140_0 & 0xFFFF
??CrossCallReturnLabel_299:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??zclGetAttrDataLength?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R4,?V0 + 4
        MOV     R5,?V0 + 5
// 3118         zcl_memcpy( pAttr->attr.dataPtr, pWriteRec->attrData, len );
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine54 & 0xFFFF
??CrossCallReturnLabel_63:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine138_0 & 0xFFFF
??CrossCallReturnLabel_306:
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
// 3119 
// 3120         status = ZCL_STATUS_SUCCESS;
        SJMP    ??zclWriteAttrData_1
// 3121       }
// 3122       else
// 3123       {
// 3124         status = ZCL_STATUS_INVALID_VALUE;
??zclWriteAttrData_3:
        MOV     ?V0 + 3,#-0x79
        SJMP    ??zclWriteAttrData_1
// 3125       }
// 3126     }
// 3127   }
// 3128   else
// 3129   {
// 3130     status = ZCL_STATUS_READ_ONLY;
??zclWriteAttrData_0:
        MOV     ?V0 + 3,#-0x78
// 3131   }
// 3132 
// 3133   return ( status );
??zclWriteAttrData_1:
        MOV     R1,?V0 + 3
        LJMP    ?Subroutine8 & 0xFFFF
          CFI EndBlock cfiBlock354
// 3134 }
// 3135 
// 3136 /*********************************************************************
// 3137  * @fn      zclWriteAttrDataUsingCB
// 3138  *
// 3139  * @brief   Use application's callback to write the attribute's current
// 3140  *          value stored in the database.
// 3141  *
// 3142  * @param   endpoint - application's endpoint
// 3143  * @param   pAttr - where to write data to
// 3144  * @param   pAttrData - data to be written
// 3145  *
// 3146  * @return  Successful if data was written
// 3147  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3148 static ZStatus_t zclWriteAttrDataUsingCB( uint8 endpoint, afAddrType_t *srcAddr,
zclWriteAttrDataUsingCB:
          CFI Block cfiBlock355 Using cfiCommon0
          CFI Function zclWriteAttrDataUsingCB
        CODE
// 3149                                           zclAttrRec_t *pAttr, uint8 *pAttrData )
// 3150 {
        FUNCALL zclWriteAttrDataUsingCB, zclAuthorizeWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclWriteAttrDataUsingCB, zclGetReadWriteCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine59 & 0xFFFF
// 3151   uint8 status;
// 3152 
// 3153   if ( zcl_AccessCtrlWrite( pAttr->attr.accessControl ) )
??CrossCallReturnLabel_71:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JNC     ??zclWriteAttrDataUsingCB_0
// 3154   {
// 3155     status = zclAuthorizeWrite( endpoint, srcAddr, pAttr );
        ; Setup parameters for call to function zclAuthorizeWrite
        LCALL   ??zclAuthorizeWrite?relay
        MOV     A,R1
// 3156     if ( status == ZCL_STATUS_SUCCESS )
        JNZ     ??zclWriteAttrDataUsingCB_1
// 3157     {
// 3158       zclReadWriteCB_t pfnReadWriteCB = zclGetReadWriteCB( endpoint );
        ; Setup parameters for call to function zclGetReadWriteCB
        MOV     R1,?V0 + 0
        LCALL   ??zclGetReadWriteCB?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
// 3159       if ( pfnReadWriteCB != NULL )
        MOV     A,R2
        ORL     A,?V0 + 3
        JZ      ??zclWriteAttrDataUsingCB_2
// 3160       {
// 3161         // Write the attribute value
// 3162         status = (*pfnReadWriteCB)( pAttr->clusterID, pAttr->attr.attrId,
// 3163                                     ZCL_OPER_WRITE, pAttrData, NULL );
        ; Setup parameters for indirect call
        CLR     A
        MOV     ?V0 + 6,A
        MOV     ?V0 + 7,A
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R1,#0x2
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine143_0 & 0xFFFF
// 3164       }
??CrossCallReturnLabel_327:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine140_0 & 0xFFFF
??CrossCallReturnLabel_300:
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ?CALL_IND
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
        SJMP    ??zclWriteAttrDataUsingCB_1
// 3165       else
// 3166       {
// 3167         status = ZCL_STATUS_SOFTWARE_FAILURE;
??zclWriteAttrDataUsingCB_2:
        MOV     R1,#-0x3f
        SJMP    ??zclWriteAttrDataUsingCB_1
// 3168       }
// 3169     }
// 3170   }
// 3171   else
// 3172   {
// 3173     status = ZCL_STATUS_READ_ONLY;
??zclWriteAttrDataUsingCB_0:
        MOV     R1,#-0x78
// 3174   }
// 3175 
// 3176   return ( status );
??zclWriteAttrDataUsingCB_1:
        LJMP    ??Subroutine121_0 & 0xFFFF
          CFI EndBlock cfiBlock355
// 3177 }
// 3178 
// 3179 /*********************************************************************
// 3180  * @fn      zclAuthorizeWrite
// 3181  *
// 3182  * @brief   Use application's callback to authorize a Write operation
// 3183  *          on a given attribute.
// 3184  *
// 3185  * @param   endpoint - application's endpoint
// 3186  * @param   srcAddr - source Address
// 3187  * @param   pAttr - pointer to attribute
// 3188  *
// 3189  * @return  ZCL_STATUS_SUCCESS: Operation authorized
// 3190  *          ZCL_STATUS_NOT_AUTHORIZED: Operation not authorized
// 3191  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3192 static ZStatus_t zclAuthorizeWrite( uint8 endpoint, afAddrType_t *srcAddr, zclAttrRec_t *pAttr )
zclAuthorizeWrite:
          CFI Block cfiBlock356 Using cfiCommon0
          CFI Function zclAuthorizeWrite
        CODE
// 3193 {
        FUNCALL zclAuthorizeWrite, zclGetAuthorizeCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
// 3194   if ( zcl_AccessCtrlAuthWrite( pAttr->attr.accessControl ) )
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.5
        JNC     ??zclAuthorizeWrite_0
// 3195   {
// 3196     zclAuthorizeCB_t pfnAuthorizeCB = zclGetAuthorizeCB( endpoint );
        ; Setup parameters for call to function zclGetAuthorizeCB
        LCALL   ??zclGetAuthorizeCB?relay
        MOV     DPL,R2
        MOV     DPH,R3
// 3197 
// 3198     if ( pfnAuthorizeCB != NULL )
        MOV     A,DPL
        ORL     A,DPH
        JZ      ??zclAuthorizeWrite_0
// 3199     {
// 3200       return ( (*pfnAuthorizeCB)( srcAddr, pAttr, ZCL_OPER_WRITE ) );
        ; Setup parameters for indirect call
        MOV     R1,#0x2
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ?CALL_IND
        SJMP    ??zclAuthorizeWrite_1
// 3201     }
// 3202   }
// 3203 
// 3204   return ( ZCL_STATUS_SUCCESS );
??zclAuthorizeWrite_0:
        MOV     R1,#0x0
??zclAuthorizeWrite_1:
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock356
// 3205 }
// 3206 #endif // ZCL_WRITE
// 3207 
// 3208 #ifdef ZCL_READ
// 3209 /*********************************************************************
// 3210  * @fn      zclParseInReadCmd
// 3211  *
// 3212  * @brief   Parse the "Profile" Read Commands
// 3213  *
// 3214  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3215  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3216  *
// 3217  * @param   pCmd - pointer to incoming data to parse
// 3218  *
// 3219  * @return  pointer to the parsed command structure
// 3220  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3221 void *zclParseInReadCmd( zclParseCmd_t *pCmd )
zclParseInReadCmd:
          CFI Block cfiBlock357 Using cfiCommon0
          CFI Function zclParseInReadCmd
        CODE
// 3222 {
        FUNCALL zclParseInReadCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
// 3223   zclReadCmd_t *readCmd;
// 3224   uint8 *pBuf = pCmd->pData;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine67 & 0xFFFF
??CrossCallReturnLabel_87:
        MOV     R6,A
        MOV     A,R1
        MOV     R7,A
// 3225 
// 3226   readCmd = (zclReadCmd_t *)zcl_mem_alloc( sizeof ( zclReadCmd_t ) + pCmd->dataLen );
        LCALL   ?Subroutine69 & 0xFFFF
??CrossCallReturnLabel_90:
        LCALL   ??osal_mem_alloc?relay
// 3227   if ( readCmd != NULL )
        MOV     A,R2
        ORL     A,R3
        JZ      ??zclParseInReadCmd_0
// 3228   {
// 3229     uint8 i;
// 3230     readCmd->numAttr = pCmd->dataLen / 2; // Atrribute ID
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        CLR     C
        RRC     A
        MOV     A,R0
        RRC     A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    @DPTR,A
// 3231     for ( i = 0; i < readCmd->numAttr; i++ )
        MOV     ?V0 + 0,#0x0
        SJMP    ??zclParseInReadCmd_1
// 3232     {
// 3233       readCmd->attrID[i] = BUILD_UINT16( pBuf[0], pBuf[1] );
??zclParseInReadCmd_2:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine110 & 0xFFFF
??CrossCallReturnLabel_339:
        MOV     R1,A
        MOV     A,R4
        ADD     A,#0x0
        CLR     A
        ADDC    A,R1
        MOV     R5,A
        MOV     A,?V0 + 0
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,R2
        ADD     A,R0
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,R1
        MOV     DPH,A
        INC     DPTR
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 3234       pBuf += 2;
        LCALL   ?Subroutine72 & 0xFFFF
// 3235     }
??CrossCallReturnLabel_97:
        INC     ?V0 + 0
??zclParseInReadCmd_1:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,R0
        JC      ??zclParseInReadCmd_2
// 3236   }
// 3237 
// 3238   return ( (void *)readCmd );
??zclParseInReadCmd_0:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock357
// 3239 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine72:
          CFI Block cfiCond358 Using cfiCommon0
          CFI Function zclParseHdr
          CFI Conditional ??CrossCallReturnLabel_96
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond359 Using cfiCommon0
          CFI (cfiCond359) Function zclParseInReadCmd
          CFI (cfiCond359) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond359) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond359) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond359) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond359) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond359) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond359) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond359) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond359) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond359) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond359) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond359) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond359) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond359) CFA_SP SP+0
          CFI (cfiCond359) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond360 Using cfiCommon0
          CFI (cfiCond360) Function zclParseInWriteRspCmd
          CFI (cfiCond360) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond360) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond360) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond360) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond360) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond360) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond360) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond360) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond360) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond360) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond360) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond360) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond360) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond360) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond360) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond360) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond360) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond360) CFA_SP SP+0
          CFI (cfiCond360) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker361 Using cfiCommon1
          CFI (cfiPicker361) NoFunction
          CFI (cfiPicker361) Picker
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        RET
          CFI EndBlock cfiCond358
          CFI EndBlock cfiCond359
          CFI EndBlock cfiCond360
          CFI EndBlock cfiPicker361
// 3240 
// 3241 /*********************************************************************
// 3242  * @fn      zclParseInReadRspCmd
// 3243  *
// 3244  * @brief   Parse the "Profile" Read Response Commands
// 3245  *
// 3246  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3247  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3248  *
// 3249  * @param   pCmd - pointer to incoming data to parse
// 3250  *
// 3251  * @return  pointer to the parsed command structure
// 3252  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3253 static void *zclParseInReadRspCmd( zclParseCmd_t *pCmd )
zclParseInReadRspCmd:
          CFI Block cfiBlock362 Using cfiCommon0
          CFI Function zclParseInReadRspCmd
        CODE
// 3254 {
        FUNCALL zclParseInReadRspCmd, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclParseInReadRspCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclParseInReadRspCmd, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclParseInReadRspCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
// 3255   zclReadRspCmd_t *readRspCmd;
// 3256   uint8 *pBuf = pCmd->pData;
        MOV     A,R2
        ADD     A,#0x3
        MOV     ?V0 + 4,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     DPL,?V0 + 4
        LCALL   ??Subroutine126_0 & 0xFFFF
// 3257   uint8 *dataPtr;
// 3258   uint8 numAttr = 0;
??CrossCallReturnLabel_225:
        MOV     ?V0 + 2,#0x0
// 3259   uint8 hdrLen;
// 3260   uint16 dataLen = 0;
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x0
        SJMP    ??zclParseInReadRspCmd_0
// 3261   uint16 attrDataLen;
// 3262 
// 3263   // find out the number of attributes and the length of attribute data
// 3264   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3265   {
// 3266     uint8 status;
// 3267 
// 3268     numAttr++;
??zclParseInReadRspCmd_1:
        INC     ?V0 + 2
// 3269     pBuf += 2; // move pass attribute id
        LCALL   ?Subroutine71 & 0xFFFF
// 3270 
// 3271     status = *pBuf++;
??CrossCallReturnLabel_94:
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 3272     if ( status == ZCL_STATUS_SUCCESS )
        JNZ     ??zclParseInReadRspCmd_0
// 3273     {
// 3274       uint8 dataType = *pBuf++;
        MOVX    A,@DPTR
        MOV     R1,A
        INC     DPTR
        INC     R6
        MOV     R7,DPH
// 3275 
// 3276       attrDataLen = zclGetAttrDataLength( dataType, pBuf );
        ; Setup parameters for call to function zclGetAttrDataLength
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??zclGetAttrDataLength?relay
        LCALL   ?Subroutine79 & 0xFFFF
// 3277       pBuf += attrDataLen; // move pass attribute data
// 3278 
// 3279       // add padding if needed
// 3280       if ( PADDING_NEEDED( attrDataLen ) )
??CrossCallReturnLabel_107:
        JNC     ??CrossCallReturnLabel_113
// 3281       {
// 3282         attrDataLen++;
        LCALL   ?Subroutine82 & 0xFFFF
// 3283       }
// 3284 
// 3285       dataLen += attrDataLen;
??CrossCallReturnLabel_113:
        MOV     A,?V0 + 6
        ADD     A,?V0 + 0
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 7
        ADDC    A,?V0 + 1
        MOV     ?V0 + 7,A
// 3286     }
// 3287   }
??zclParseInReadRspCmd_0:
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        INC     DPTR
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_44:
        LCALL   ?Subroutine90 & 0xFFFF
??CrossCallReturnLabel_127:
        JC      ??zclParseInReadRspCmd_1
// 3288 
// 3289   // calculate the length of the response header
// 3290   hdrLen = sizeof( zclReadRspCmd_t ) + ( numAttr * sizeof( zclReadRspStatus_t ) );
        MOV     B,#0x6
        MOV     A,?V0 + 2
        MUL     AB
        INC     A
        MOV     ?V0 + 8,A
// 3291 
// 3292   readRspCmd = (zclReadRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
        ; Setup parameters for call to function osal_mem_alloc
        ADD     A,?V0 + 6
        MOV     R2,A
        CLR     A
        ADDC    A,?V0 + 7
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
// 3293   if ( readRspCmd != NULL )
        MOV     A,R2
        ORL     A,?V0 + 11
        JNZ     $+5
        LJMP    ??zclParseInReadRspCmd_2 & 0xFFFF
// 3294   {
// 3295     uint8 i;
// 3296     pBuf = pCmd->pData;
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ??Subroutine127_0 & 0xFFFF
// 3297     dataPtr = (uint8 *)( (uint8 *)readRspCmd + hdrLen );
??CrossCallReturnLabel_220:
        MOV     A,R2
        ADD     A,?V0 + 8
        MOV     ?V0 + 8,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 9,A
// 3298 
// 3299     readRspCmd->numAttr = numAttr;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
// 3300     for ( i = 0; i < numAttr; i++ )
        MOV     ?V0 + 3,#0x0
        SJMP    ??zclParseInReadRspCmd_3
// 3301     {
// 3302       zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
??zclParseInReadRspCmd_4:
        MOV     A,?V0 + 3
        MOV     B,#0x6
        LCALL   ?Subroutine11 & 0xFFFF
// 3303 
// 3304       statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3305       pBuf += 2;
// 3306 
// 3307       statusRec->status = *pBuf++;
??CrossCallReturnLabel_2:
        LCALL   ?Subroutine17 & 0xFFFF
// 3308       if ( statusRec->status == ZCL_STATUS_SUCCESS )
??CrossCallReturnLabel_209:
        JNZ     ??zclParseInReadRspCmd_5
// 3309       {
// 3310         statusRec->dataType = *pBuf++;
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?V0 + 12
        MOV     DPH,?V0 + 13
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_179:
        INC     R6
        MOV     R7,DPH
// 3311 
// 3312         attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
        ; Setup parameters for call to function zclGetAttrDataLength
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??zclGetAttrDataLength?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
// 3313         zcl_memcpy( dataPtr, pBuf, attrDataLen);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
// 3314         statusRec->data = dataPtr;
        MOV     DPL,?V0 + 12
        MOV     DPH,?V0 + 13
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 8
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 9
        LCALL   ?Subroutine13 & 0xFFFF
// 3315 
// 3316         pBuf += attrDataLen; // move pass attribute data
// 3317 
// 3318         // advance attribute data pointer
// 3319         if ( PADDING_NEEDED( attrDataLen ) )
??CrossCallReturnLabel_6:
        JNC     ??CrossCallReturnLabel_111
// 3320         {
// 3321           attrDataLen++;
        LCALL   ?Subroutine81 & 0xFFFF
// 3322         }
// 3323 
// 3324         dataPtr += attrDataLen;
??CrossCallReturnLabel_111:
        MOV     A,?V0 + 8
        ADD     A,?V0 + 0
        MOV     ?V0 + 8,A
        MOV     A,?V0 + 9
        ADDC    A,?V0 + 1
        MOV     ?V0 + 9,A
// 3325       }
// 3326     }
??zclParseInReadRspCmd_5:
        INC     ?V0 + 3
??zclParseInReadRspCmd_3:
        MOV     A,?V0 + 3
        CLR     C
        SUBB    A,?V0 + 2
        JC      ??zclParseInReadRspCmd_4
// 3327   }
// 3328 
// 3329   return ( (void *)readRspCmd );
??zclParseInReadRspCmd_2:
        LJMP    ?Subroutine5 & 0xFFFF
          CFI EndBlock cfiBlock362
// 3330 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond363 Using cfiCommon0
          CFI Function zclParseInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_209
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond364 Using cfiCommon0
          CFI (cfiCond364) Function zclParseInWriteCmd
          CFI (cfiCond364) Conditional ??CrossCallReturnLabel_210
          CFI (cfiCond364) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond364) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond364) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond364) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond364) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond364) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond364) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond364) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond364) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond364) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond364) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond364) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond364) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond364) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond364) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond364) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond364) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond364) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond364) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond364) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond364) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond364) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond364) CFA_SP SP+0
          CFI (cfiCond364) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker365 Using cfiCommon1
          CFI (cfiPicker365) NoFunction
          CFI (cfiPicker365) Picker
        MOV     DPL,?V0 + 12
        MOV     DPH,?V0 + 13
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond363
          CFI EndBlock cfiCond364
          CFI EndBlock cfiPicker365
        REQUIRE ??Subroutine125_0
        ; // Fall through to label ??Subroutine125_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine125_0:
          CFI Block cfiCond366 Using cfiCommon0
          CFI Function zclParseHdr
          CFI Conditional ??CrossCallReturnLabel_208
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond367 Using cfiCommon0
          CFI (cfiCond367) Function zclParseInReadRspCmd
          CFI (cfiCond367) Conditional ??CrossCallReturnLabel_209
          CFI (cfiCond367) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond367) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond367) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond367) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond367) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond367) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond367) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond367) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond367) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond367) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond367) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond367) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond367) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond367) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond367) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond367) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond367) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond367) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond367) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond367) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond367) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond367) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond367) CFA_SP SP+0
          CFI (cfiCond367) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond368 Using cfiCommon0
          CFI (cfiCond368) Function zclParseInWriteCmd
          CFI (cfiCond368) Conditional ??CrossCallReturnLabel_210
          CFI (cfiCond368) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond368) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond368) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond368) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond368) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond368) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond368) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond368) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond368) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond368) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond368) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond368) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond368) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond368) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond368) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond368) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond368) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond368) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond368) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond368) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond368) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond368) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond368) CFA_SP SP+0
          CFI (cfiCond368) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker369 Using cfiCommon1
          CFI (cfiPicker369) NoFunction
          CFI (cfiPicker369) Picker
        LCALL   ?Subroutine88 & 0xFFFF
??CrossCallReturnLabel_211:
        RET
          CFI EndBlock cfiCond366
          CFI EndBlock cfiCond367
          CFI EndBlock cfiCond368
          CFI EndBlock cfiPicker369

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine88:
          CFI Block cfiCond370 Using cfiCommon0
          CFI Function zclParseInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_211, ??CrossCallReturnLabel_209
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond371 Using cfiCommon0
          CFI (cfiCond371) Function zclParseInWriteCmd
          CFI (cfiCond371) Conditional ??CrossCallReturnLabel_211, ??CrossCallReturnLabel_210
          CFI (cfiCond371) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond371) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond371) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond371) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond371) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond371) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond371) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond371) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond371) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond371) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond371) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond371) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond371) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond371) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond371) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond371) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond371) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond371) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond371) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond371) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond371) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond371) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond371) CFA_SP SP+0
          CFI (cfiCond371) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond372 Using cfiCommon0
          CFI (cfiCond372) Function zclParseHdr
          CFI (cfiCond372) Conditional ??CrossCallReturnLabel_211, ??CrossCallReturnLabel_208
          CFI (cfiCond372) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond372) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond372) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond372) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond372) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond372) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond372) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond372) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond372) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond372) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond372) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond372) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond372) CFA_SP SP+0
          CFI (cfiCond372) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond373 Using cfiCommon0
          CFI (cfiCond373) Function zclParseHdr
          CFI (cfiCond373) Conditional ??CrossCallReturnLabel_212, ??CrossCallReturnLabel_12
          CFI (cfiCond373) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond373) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond373) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond373) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond373) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond373) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond373) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond373) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond373) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond373) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond373) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond373) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond373) CFA_SP SP+0
          CFI (cfiCond373) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond374 Using cfiCommon0
          CFI (cfiCond374) Function zclParseInWriteRspCmd
          CFI (cfiCond374) Conditional ??CrossCallReturnLabel_212, ??CrossCallReturnLabel_13
          CFI (cfiCond374) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond374) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond374) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond374) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond374) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond374) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond374) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond374) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond374) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond374) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond374) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond374) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond374) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond374) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond374) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond374) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond374) CFA_SP SP+0
          CFI (cfiCond374) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker375 Using cfiCommon1
          CFI (cfiPicker375) NoFunction
          CFI (cfiPicker375) Picker
        LCALL   ?Subroutine108 & 0xFFFF
??CrossCallReturnLabel_216:
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
        RET
          CFI EndBlock cfiCond370
          CFI EndBlock cfiCond371
          CFI EndBlock cfiCond372
          CFI EndBlock cfiCond373
          CFI EndBlock cfiCond374
          CFI EndBlock cfiPicker375
// 3331 #endif // ZCL_READ
// 3332 
// 3333 #ifdef ZCL_WRITE
// 3334 /*********************************************************************
// 3335  * @fn      zclParseInWriteCmd
// 3336  *
// 3337  * @brief   Parse the "Profile" Write, Write Undivided and Write No
// 3338  *          Response Commands
// 3339  *
// 3340  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3341  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3342  *
// 3343  * @param   pCmd - pointer to incoming data to parse
// 3344  *
// 3345  * @return  pointer to the parsed command structure
// 3346  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3347 void *zclParseInWriteCmd( zclParseCmd_t *pCmd )
zclParseInWriteCmd:
          CFI Block cfiBlock376 Using cfiCommon0
          CFI Function zclParseInWriteCmd
        CODE
// 3348 {
        FUNCALL zclParseInWriteCmd, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclParseInWriteCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclParseInWriteCmd, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclParseInWriteCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x16
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
        ; Saved register size: 22
        ; Auto size: 0
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
// 3349   zclWriteCmd_t *writeCmd;
// 3350   uint8 *pBuf = pCmd->pData;
        LCALL   ?Subroutine39 & 0xFFFF
// 3351   uint16 attrDataLen;
// 3352   uint8 *dataPtr;
// 3353   uint8 numAttr = 0;
??CrossCallReturnLabel_226:
        MOV     ?V0 + 7,#0x0
// 3354   uint8 hdrLen;
// 3355   uint16 dataLen = 0;
        MOV     ?V0 + 4,#0x0
        MOV     ?V0 + 5,#0x0
        SJMP    ??zclParseInWriteCmd_0
// 3356 
// 3357   // find out the number of attributes and the length of attribute data
// 3358   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3359   {
// 3360     uint8 dataType;
// 3361 
// 3362     numAttr++;
??zclParseInWriteCmd_1:
        INC     ?V0 + 7
// 3363     pBuf += 2; // move pass attribute id
        LCALL   ?Subroutine71 & 0xFFFF
// 3364 
// 3365     dataType = *pBuf++;
??CrossCallReturnLabel_95:
        MOV     R1,A
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
// 3366 
// 3367     attrDataLen = zclGetAttrDataLength( dataType, pBuf );
        ; Setup parameters for call to function zclGetAttrDataLength
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??zclGetAttrDataLength?relay
        LCALL   ?Subroutine79 & 0xFFFF
// 3368     pBuf += attrDataLen; // move pass attribute data
// 3369 
// 3370     // add padding if needed
// 3371     if ( PADDING_NEEDED( attrDataLen ) )
??CrossCallReturnLabel_108:
        JNC     ??CrossCallReturnLabel_114
// 3372     {
// 3373       attrDataLen++;
        LCALL   ?Subroutine82 & 0xFFFF
// 3374     }
// 3375 
// 3376     dataLen += attrDataLen;
??CrossCallReturnLabel_114:
        MOV     A,?V0 + 4
        ADD     A,?V0 + 0
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 5
        ADDC    A,?V0 + 1
        MOV     ?V0 + 5,A
// 3377   }
??zclParseInWriteCmd_0:
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        INC     DPTR
        LCALL   ?Subroutine36 & 0xFFFF
??CrossCallReturnLabel_35:
        JC      ??zclParseInWriteCmd_1
// 3378 
// 3379   // calculate the length of the response header
// 3380   hdrLen = sizeof( zclWriteCmd_t ) + ( numAttr * sizeof( zclWriteRec_t ) );
        MOV     B,#0x5
        MOV     A,?V0 + 7
        MUL     AB
        INC     A
        MOV     ?V0 + 6,A
// 3381 
// 3382   writeCmd = (zclWriteCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
        ; Setup parameters for call to function osal_mem_alloc
        ADD     A,?V0 + 4
        MOV     R2,A
        CLR     A
        ADDC    A,?V0 + 5
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 10,R2
        MOV     ?V0 + 11,R3
// 3383   if ( writeCmd != NULL )
        MOV     A,R2
        ORL     A,?V0 + 11
        JNZ     $+5
        LJMP    ??zclParseInWriteCmd_2 & 0xFFFF
// 3384   {
// 3385     uint8 i;
// 3386     pBuf = pCmd->pData;
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ??Subroutine127_0 & 0xFFFF
// 3387     dataPtr = (uint8 *)( (uint8 *)writeCmd + hdrLen );
??CrossCallReturnLabel_221:
        MOV     ?V0 + 0,?V0 + 6
        MOV     A,R2
        ADD     A,?V0 + 0
        MOV     ?V0 + 2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
// 3388 
// 3389     writeCmd->numAttr = numAttr;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,?V0 + 7
        MOVX    @DPTR,A
// 3390     for ( i = 0; i < numAttr; i++ )
        MOV     ?V0 + 8,#0x0
        SJMP    ??zclParseInWriteCmd_3
// 3391     {
// 3392       zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
??zclParseInWriteCmd_4:
        MOV     A,?V0 + 8
        MOV     B,#0x5
        LCALL   ?Subroutine11 & 0xFFFF
// 3393 
// 3394       statusRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3395       pBuf += 2;
// 3396       statusRec->dataType = *pBuf++;
??CrossCallReturnLabel_3:
        MOV     R1,A
        LCALL   ?Subroutine17 & 0xFFFF
// 3397 
// 3398       attrDataLen = zclGetAttrDataLength( statusRec->dataType, pBuf );
??CrossCallReturnLabel_210:
        ; Setup parameters for call to function zclGetAttrDataLength
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??zclGetAttrDataLength?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
// 3399       zcl_memcpy( dataPtr, pBuf, attrDataLen);
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,R6
        MOV     ?V0 + 5,R7
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 22)
// 3400       statusRec->attrData = dataPtr;
        MOV     DPL,?V0 + 12
        MOV     DPH,?V0 + 13
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        LCALL   ?Subroutine13 & 0xFFFF
// 3401 
// 3402       pBuf += attrDataLen; // move pass attribute data
// 3403 
// 3404       // advance attribute data pointer
// 3405       if ( PADDING_NEEDED( attrDataLen ) )
??CrossCallReturnLabel_7:
        JNC     ??CrossCallReturnLabel_112
// 3406       {
// 3407         attrDataLen++;
        LCALL   ?Subroutine81 & 0xFFFF
// 3408       }
// 3409 
// 3410       dataPtr += attrDataLen;
??CrossCallReturnLabel_112:
        MOV     A,?V0 + 2
        ADD     A,?V0 + 0
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,?V0 + 1
        MOV     ?V0 + 3,A
// 3411     }
        INC     ?V0 + 8
??zclParseInWriteCmd_3:
        MOV     A,?V0 + 8
        CLR     C
        SUBB    A,?V0 + 7
        JC      ??zclParseInWriteCmd_4
// 3412   }
// 3413 
// 3414   return ( (void *)writeCmd );
??zclParseInWriteCmd_2:
        LJMP    ?Subroutine5 & 0xFFFF
          CFI EndBlock cfiBlock376
// 3415 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine82:
          CFI Block cfiCond377 Using cfiCommon0
          CFI Function zclParseInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_113
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond378 Using cfiCommon0
          CFI (cfiCond378) Function zclParseInWriteCmd
          CFI (cfiCond378) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond378) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond378) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond378) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond378) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond378) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond378) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond378) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond378) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond378) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond378) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond378) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond378) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond378) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond378) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond378) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond378) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond378) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond378) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond378) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond378) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond378) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond378) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond378) CFA_SP SP+0
          CFI (cfiCond378) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker379 Using cfiCommon1
          CFI (cfiPicker379) NoFunction
          CFI (cfiPicker379) Picker
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        RET
          CFI EndBlock cfiCond377
          CFI EndBlock cfiCond378
          CFI EndBlock cfiPicker379

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine81:
          CFI Block cfiCond380 Using cfiCommon0
          CFI Function zclParseInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_111
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond381 Using cfiCommon0
          CFI (cfiCond381) Function zclParseInWriteCmd
          CFI (cfiCond381) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond381) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond381) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond381) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond381) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond381) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond381) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond381) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond381) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond381) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond381) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond381) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond381) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond381) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond381) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond381) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond381) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond381) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond381) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond381) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond381) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond381) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond381) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond381) CFA_SP SP+0
          CFI (cfiCond381) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker382 Using cfiCommon1
          CFI (cfiPicker382) NoFunction
          CFI (cfiPicker382) Picker
        ADD     A,#0x1
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        RET
          CFI EndBlock cfiCond380
          CFI EndBlock cfiCond381
          CFI EndBlock cfiPicker382

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine79:
          CFI Block cfiCond383 Using cfiCommon0
          CFI Function zclParseInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_107
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond384 Using cfiCommon0
          CFI (cfiCond384) Function zclParseInWriteCmd
          CFI (cfiCond384) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond384) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond384) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond384) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond384) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond384) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond384) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond384) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond384) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond384) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond384) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond384) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond384) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond384) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond384) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond384) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond384) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond384) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond384) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond384) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond384) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond384) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond384) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond384) CFA_SP SP+0
          CFI (cfiCond384) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker385 Using cfiCommon1
          CFI (cfiPicker385) NoFunction
          CFI (cfiPicker385) Picker
        LCALL   ?Subroutine105 & 0xFFFF
??CrossCallReturnLabel_156:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        RET
          CFI EndBlock cfiCond383
          CFI EndBlock cfiCond384
          CFI EndBlock cfiPicker385

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine71:
          CFI Block cfiCond386 Using cfiCommon0
          CFI Function zclParseInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_94
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond387 Using cfiCommon0
          CFI (cfiCond387) Function zclParseInWriteCmd
          CFI (cfiCond387) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond387) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond387) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond387) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond387) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond387) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond387) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond387) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond387) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond387) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond387) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond387) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond387) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond387) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond387) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond387) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond387) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond387) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond387) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond387) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond387) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond387) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond387) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond387) CFA_SP SP+0
          CFI (cfiCond387) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker388 Using cfiCommon1
          CFI (cfiPicker388) NoFunction
          CFI (cfiPicker388) Picker
        LCALL   ?Subroutine101 & 0xFFFF
??CrossCallReturnLabel_143:
        RET
          CFI EndBlock cfiCond386
          CFI EndBlock cfiCond387
          CFI EndBlock cfiPicker388

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine39:
          CFI Block cfiCond389 Using cfiCommon0
          CFI Function zclParseInWriteCmd
          CFI Conditional ??CrossCallReturnLabel_226
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond390 Using cfiCommon0
          CFI (cfiCond390) Function zclParseInWriteRspCmd
          CFI (cfiCond390) Conditional ??CrossCallReturnLabel_227
          CFI (cfiCond390) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond390) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond390) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond390) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond390) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond390) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond390) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond390) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond390) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond390) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond390) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond390) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond390) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond390) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond390) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond390) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond390) CFA_SP SP+0
          CFI (cfiCond390) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker391 Using cfiCommon1
          CFI (cfiPicker391) NoFunction
          CFI (cfiPicker391) Picker
        MOV     A,R2
        ADD     A,#0x3
        MOV     ?V0 + 2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        MOV     DPL,?V0 + 2
          CFI EndBlock cfiCond389
          CFI EndBlock cfiCond390
          CFI EndBlock cfiPicker391
        REQUIRE ??Subroutine126_0
        ; // Fall through to label ??Subroutine126_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine126_0:
          CFI Block cfiCond392 Using cfiCommon0
          CFI Function zclParseInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_225
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond393 Using cfiCommon0
          CFI (cfiCond393) Function zclParseInWriteCmd
          CFI (cfiCond393) Conditional ??CrossCallReturnLabel_226
          CFI (cfiCond393) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond393) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond393) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond393) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond393) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond393) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond393) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond393) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond393) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond393) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond393) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond393) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond393) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond393) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond393) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond393) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond393) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond393) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond393) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond393) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond393) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond393) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond393) CFA_SP SP+0
          CFI (cfiCond393) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond394 Using cfiCommon0
          CFI (cfiCond394) Function zclParseInWriteRspCmd
          CFI (cfiCond394) Conditional ??CrossCallReturnLabel_227
          CFI (cfiCond394) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond394) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond394) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond394) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond394) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond394) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond394) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond394) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond394) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond394) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond394) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond394) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond394) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond394) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond394) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond394) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond394) CFA_SP SP+0
          CFI (cfiCond394) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker395 Using cfiCommon1
          CFI (cfiPicker395) NoFunction
          CFI (cfiPicker395) Picker
        MOV     DPH,A
          CFI EndBlock cfiCond392
          CFI EndBlock cfiCond393
          CFI EndBlock cfiCond394
          CFI EndBlock cfiPicker395
        REQUIRE ??Subroutine127_0
        ; // Fall through to label ??Subroutine127_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine127_0:
          CFI Block cfiCond396 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_217
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond397 Using cfiCommon0
          CFI (cfiCond397) Function zcl_SendCommand
          CFI (cfiCond397) Conditional ??CrossCallReturnLabel_218
          CFI (cfiCond397) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond397) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond397) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond397) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond397) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond397) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond397) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond397) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond397) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond397) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond397) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond397) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond397) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond397) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond397) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond397) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond397) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond397) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond397) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond397) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond397) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond397) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond397) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond397) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond397) CFA_SP SP+0
          CFI (cfiCond397) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond398 Using cfiCommon0
          CFI (cfiCond398) Function zclFindAttrRec
          CFI (cfiCond398) Conditional ??CrossCallReturnLabel_219
          CFI (cfiCond398) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond398) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond398) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond398) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond398) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond398) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond398) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond398) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond398) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond398) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond398) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond398) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond398) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond398) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond398) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond398) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond398) CFA_SP SP+0
          CFI (cfiCond398) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond399 Using cfiCommon0
          CFI (cfiCond399) Function zclParseInReadRspCmd
          CFI (cfiCond399) Conditional ??CrossCallReturnLabel_220
          CFI (cfiCond399) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond399) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond399) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond399) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond399) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond399) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond399) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond399) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond399) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond399) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond399) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond399) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond399) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond399) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond399) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond399) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond399) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond399) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond399) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond399) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond399) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond399) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond399) CFA_SP SP+0
          CFI (cfiCond399) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond400 Using cfiCommon0
          CFI (cfiCond400) Function zclParseInWriteCmd
          CFI (cfiCond400) Conditional ??CrossCallReturnLabel_221
          CFI (cfiCond400) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond400) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond400) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond400) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond400) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond400) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond400) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond400) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond400) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond400) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond400) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond400) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond400) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond400) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond400) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond400) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond400) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond400) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond400) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond400) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond400) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond400) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond400) CFA_SP SP+0
          CFI (cfiCond400) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond401 Using cfiCommon0
          CFI (cfiCond401) Function zclParseInDefaultRspCmd
          CFI (cfiCond401) Conditional ??CrossCallReturnLabel_222
          CFI (cfiCond401) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond401) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond401) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond401) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond401) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond401) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond401) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond401) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond401) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond401) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond401) CFA_SP SP+0
          CFI (cfiCond401) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond402 Using cfiCommon0
          CFI (cfiCond402) Function zclRevertWriteUndividedCmd
          CFI (cfiCond402) Conditional ??CrossCallReturnLabel_223
          CFI (cfiCond402) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond402) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond402) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond402) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond402) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond402) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond402) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond402) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond402) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond402) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond402) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond402) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond402) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond402) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond402) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond402) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond402) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond402) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond402) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond402) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond402) CFA_SP SP+0
          CFI (cfiCond402) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond403 Using cfiCommon0
          CFI (cfiCond403) Function zclRevertWriteUndividedCmd
          CFI (cfiCond403) Conditional ??CrossCallReturnLabel_224
          CFI (cfiCond403) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond403) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond403) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond403) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond403) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond403) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond403) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond403) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond403) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond403) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond403) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond403) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond403) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond403) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond403) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond403) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond403) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond403) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond403) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond403) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond403) CFA_SP SP+0
          CFI (cfiCond403) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond404 Using cfiCommon0
          CFI (cfiCond404) Function zclParseInReadRspCmd
          CFI (cfiCond404) Conditional ??CrossCallReturnLabel_225
          CFI (cfiCond404) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond404) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond404) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond404) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond404) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond404) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond404) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond404) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond404) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond404) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond404) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond404) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond404) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond404) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond404) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond404) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond404) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond404) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond404) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond404) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond404) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond404) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond404) CFA_SP SP+0
          CFI (cfiCond404) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond405 Using cfiCommon0
          CFI (cfiCond405) Function zclParseInWriteCmd
          CFI (cfiCond405) Conditional ??CrossCallReturnLabel_226
          CFI (cfiCond405) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond405) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond405) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond405) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond405) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond405) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond405) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond405) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond405) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond405) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond405) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond405) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond405) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond405) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond405) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond405) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond405) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond405) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond405) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond405) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond405) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond405) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond405) CFA_SP SP+0
          CFI (cfiCond405) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond406 Using cfiCommon0
          CFI (cfiCond406) Function zclParseInWriteRspCmd
          CFI (cfiCond406) Conditional ??CrossCallReturnLabel_227
          CFI (cfiCond406) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond406) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond406) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond406) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond406) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond406) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond406) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond406) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond406) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond406) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond406) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond406) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond406) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond406) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond406) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond406) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond406) CFA_SP SP+0
          CFI (cfiCond406) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker407 Using cfiCommon1
          CFI (cfiPicker407) NoFunction
          CFI (cfiPicker407) Picker
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        RET
          CFI EndBlock cfiCond396
          CFI EndBlock cfiCond397
          CFI EndBlock cfiCond398
          CFI EndBlock cfiCond399
          CFI EndBlock cfiCond400
          CFI EndBlock cfiCond401
          CFI EndBlock cfiCond402
          CFI EndBlock cfiCond403
          CFI EndBlock cfiCond404
          CFI EndBlock cfiCond405
          CFI EndBlock cfiCond406
          CFI EndBlock cfiPicker407

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond408 Using cfiCommon0
          CFI Function zclParseInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond409 Using cfiCommon0
          CFI (cfiCond409) Function zclParseInWriteCmd
          CFI (cfiCond409) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond409) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond409) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond409) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond409) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond409) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond409) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond409) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond409) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond409) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond409) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond409) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond409) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond409) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond409) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond409) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond409) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond409) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond409) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond409) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond409) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond409) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond409) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond409) CFA_SP SP+0
          CFI (cfiCond409) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker410 Using cfiCommon1
          CFI (cfiPicker410) NoFunction
          CFI (cfiPicker410) Picker
        MOVX    @DPTR,A
        LCALL   ??Subroutine114_0 & 0xFFFF
??CrossCallReturnLabel_157:
        MOV     A,?V0 + 0
        MOV     C,0xE0 /* A   */.0
        RET
          CFI EndBlock cfiCond408
          CFI EndBlock cfiCond409
          CFI EndBlock cfiPicker410

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond411 Using cfiCommon0
          CFI Function zclParseInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond412 Using cfiCommon0
          CFI (cfiCond412) Function zclParseInWriteCmd
          CFI (cfiCond412) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond412) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond412) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond412) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond412) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond412) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond412) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond412) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond412) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond412) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond412) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond412) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond412) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond412) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond412) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond412) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond412) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond412) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond412) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond412) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond412) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond412) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond412) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond412) CFA_SP SP+0
          CFI (cfiCond412) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker413 Using cfiCommon1
          CFI (cfiPicker413) NoFunction
          CFI (cfiPicker413) Picker
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,?V0 + 10
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V0 + 11
        ADDC    A,R1
        MOV     DPH,A
        INC     DPTR
        MOV     ?V0 + 12,DPL
        MOV     ?V0 + 13,DPH
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     DPL,?V0 + 12
        MOV     DPH,?V0 + 13
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        LCALL   ?Subroutine101 & 0xFFFF
??CrossCallReturnLabel_144:
        RET
          CFI EndBlock cfiCond411
          CFI EndBlock cfiCond412
          CFI EndBlock cfiPicker413

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine101:
          CFI Block cfiCond414 Using cfiCommon0
          CFI Function zclParseInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_143, ??CrossCallReturnLabel_94
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond415 Using cfiCommon0
          CFI (cfiCond415) Function zclParseInWriteCmd
          CFI (cfiCond415) Conditional ??CrossCallReturnLabel_143, ??CrossCallReturnLabel_95
          CFI (cfiCond415) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond415) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond415) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond415) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond415) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond415) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond415) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond415) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond415) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond415) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond415) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond415) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond415) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond415) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond415) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond415) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond415) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond415) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond415) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond415) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond415) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond415) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond415) CFA_SP SP+0
          CFI (cfiCond415) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond416 Using cfiCommon0
          CFI (cfiCond416) Function zclParseInReadRspCmd
          CFI (cfiCond416) Conditional ??CrossCallReturnLabel_144, ??CrossCallReturnLabel_2
          CFI (cfiCond416) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond416) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond416) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond416) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond416) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond416) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond416) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond416) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond416) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond416) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond416) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond416) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond416) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond416) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond416) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond416) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond416) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond416) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond416) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond416) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond416) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond416) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond416) CFA_SP SP+0
          CFI (cfiCond416) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond417 Using cfiCommon0
          CFI (cfiCond417) Function zclParseInWriteCmd
          CFI (cfiCond417) Conditional ??CrossCallReturnLabel_144, ??CrossCallReturnLabel_3
          CFI (cfiCond417) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond417) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond417) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond417) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond417) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond417) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond417) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond417) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond417) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond417) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond417) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond417) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond417) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond417) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond417) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond417) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond417) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond417) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond417) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond417) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond417) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond417) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond417) CFA_SP SP+0
          CFI (cfiCond417) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiPicker418 Using cfiCommon1
          CFI (cfiPicker418) NoFunction
          CFI (cfiPicker418) Picker
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond414
          CFI EndBlock cfiCond415
          CFI EndBlock cfiCond416
          CFI EndBlock cfiCond417
          CFI EndBlock cfiPicker418
// 3416 
// 3417 /*********************************************************************
// 3418  * @fn      zclParseInWriteRspCmd
// 3419  *
// 3420  * @brief   Parse the "Profile" Write Response Commands
// 3421  *
// 3422  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3423  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3424  *
// 3425  * @param   pCmd - pointer to incoming data to parse
// 3426  *
// 3427  * @return  pointer to the parsed command structure
// 3428  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3429 static void *zclParseInWriteRspCmd( zclParseCmd_t *pCmd )
zclParseInWriteRspCmd:
          CFI Block cfiBlock419 Using cfiCommon0
          CFI Function zclParseInWriteRspCmd
        CODE
// 3430 {
        FUNCALL zclParseInWriteRspCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 16, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 16, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 0
// 3431   zclWriteRspCmd_t *writeRspCmd;
// 3432   uint8 *pBuf = pCmd->pData;
        LCALL   ?Subroutine39 & 0xFFFF
// 3433   uint8 i = 0;
??CrossCallReturnLabel_227:
        MOV     ?V0 + 4,#0x0
// 3434 
// 3435   writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof ( zclWriteRspCmd_t ) + pCmd->dataLen );
        LCALL   ?Subroutine69 & 0xFFFF
??CrossCallReturnLabel_91:
        LCALL   ??osal_mem_alloc?relay
// 3436   if ( writeRspCmd != NULL )
        MOV     A,R2
        ORL     A,R3
        JZ      ??zclParseInWriteRspCmd_0
// 3437   {
// 3438     if ( pCmd->dataLen == 1 )
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??zclParseInWriteRspCmd_1
        INC     DPTR
        MOVX    A,@DPTR
??zclParseInWriteRspCmd_1:
        JNZ     ??CrossCallReturnLabel_98
// 3439     {
// 3440       // special case when all writes were successfull
// 3441       writeRspCmd->attrList[i++].status = *pBuf;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine128_0 & 0xFFFF
// 3442     }
??CrossCallReturnLabel_229:
        INC     DPTR
        MOVX    @DPTR,A
        MOV     ?V0 + 4,#0x1
        SJMP    ??zclParseInWriteRspCmd_2
// 3443     else
// 3444     {
// 3445       while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3446       {
// 3447         writeRspCmd->attrList[i].status = *pBuf++;
??zclParseInWriteRspCmd_3:
        MOV     A,?V0 + 4
        MOV     B,#0x3
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,R2
        ADD     A,R0
        MOV     R0,A
        MOV     A,R3
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine16 & 0xFFFF
// 3448         writeRspCmd->attrList[i++].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
??CrossCallReturnLabel_13:
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     A,?V0 + 6
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        INC     ?V0 + 4
// 3449         pBuf += 2;
        LCALL   ?Subroutine72 & 0xFFFF
// 3450       }
??CrossCallReturnLabel_98:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine36 & 0xFFFF
// 3451     }
??CrossCallReturnLabel_36:
        JC      ??zclParseInWriteRspCmd_3
// 3452 
// 3453     writeRspCmd->numAttr = i;
??zclParseInWriteRspCmd_2:
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
// 3454   }
// 3455 
// 3456   return ( (void *)writeRspCmd );
??zclParseInWriteRspCmd_0:
        LJMP    ??Subroutine121_0 & 0xFFFF
          CFI EndBlock cfiBlock419
// 3457 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine69:
          CFI Block cfiCond420 Using cfiCommon0
          CFI Function zclParseInReadCmd
          CFI Conditional ??CrossCallReturnLabel_90
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond421 Using cfiCommon0
          CFI (cfiCond421) Function zclParseInWriteRspCmd
          CFI (cfiCond421) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond421) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond421) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond421) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond421) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond421) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond421) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond421) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond421) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond421) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond421) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond421) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond421) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond421) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond421) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond421) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond421) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond421) CFA_SP SP+0
          CFI (cfiCond421) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker422 Using cfiCommon1
          CFI (cfiPicker422) NoFunction
          CFI (cfiPicker422) Picker
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        ; Setup parameters for call to function osal_mem_alloc
        ; Setup parameters for call to function osal_mem_alloc
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R3,A
        RET
          CFI EndBlock cfiCond420
          CFI EndBlock cfiCond421
          CFI EndBlock cfiPicker422

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine36:
          CFI Block cfiCond423 Using cfiCommon0
          CFI Function zclParseInWriteCmd
          CFI Conditional ??CrossCallReturnLabel_35
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond424 Using cfiCommon0
          CFI (cfiCond424) Function zclParseInWriteRspCmd
          CFI (cfiCond424) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond424) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond424) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond424) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond424) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond424) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond424) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond424) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond424) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond424) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond424) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond424) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond424) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond424) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond424) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond424) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond424) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond424) CFA_SP SP+0
          CFI (cfiCond424) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker425 Using cfiCommon1
          CFI (cfiPicker425) NoFunction
          CFI (cfiPicker425) Picker
        LCALL   ?Subroutine99 & 0xFFFF
??CrossCallReturnLabel_287:
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ?Subroutine90 & 0xFFFF
??CrossCallReturnLabel_128:
        RET
          CFI EndBlock cfiCond423
          CFI EndBlock cfiCond424
          CFI EndBlock cfiPicker425

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine90:
          CFI Block cfiCond426 Using cfiCommon0
          CFI Function zclParseInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_127
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond427 Using cfiCommon0
          CFI (cfiCond427) Function zclParseInWriteCmd
          CFI (cfiCond427) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_35
          CFI (cfiCond427) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond427) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond427) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond427) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond427) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond427) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond427) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond427) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond427) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond427) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond427) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond427) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond427) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond427) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond427) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond427) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond427) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond427) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond427) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond427) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond427) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond427) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond427) CFA_SP SP+0
          CFI (cfiCond427) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond428 Using cfiCommon0
          CFI (cfiCond428) Function zclParseInWriteRspCmd
          CFI (cfiCond428) Conditional ??CrossCallReturnLabel_128, ??CrossCallReturnLabel_36
          CFI (cfiCond428) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond428) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond428) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond428) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond428) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond428) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond428) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond428) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond428) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond428) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond428) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond428) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond428) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond428) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond428) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond428) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond428) CFA_SP SP+0
          CFI (cfiCond428) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker429 Using cfiCommon1
          CFI (cfiPicker429) NoFunction
          CFI (cfiPicker429) Picker
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     R1,A
        CLR     C
        MOV     A,R6
        SUBB    A,R0
        MOV     A,R7
        SUBB    A,R1
        RET
          CFI EndBlock cfiCond426
          CFI EndBlock cfiCond427
          CFI EndBlock cfiCond428
          CFI EndBlock cfiPicker429

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond430 Using cfiCommon0
          CFI Function zclParseHdr
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond431 Using cfiCommon0
          CFI (cfiCond431) Function zclParseInWriteRspCmd
          CFI (cfiCond431) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond431) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond431) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond431) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond431) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond431) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond431) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond431) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond431) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond431) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond431) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond431) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond431) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond431) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond431) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond431) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond431) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond431) CFA_SP SP+0
          CFI (cfiCond431) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiPicker432 Using cfiCommon1
          CFI (cfiPicker432) NoFunction
          CFI (cfiPicker432) Picker
        INC     DPTR
        LCALL   ?Subroutine88 & 0xFFFF
??CrossCallReturnLabel_212:
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond430
          CFI EndBlock cfiCond431
          CFI EndBlock cfiPicker432
// 3458 #endif // ZCL_WRITE
// 3459 
// 3460 #ifdef ZCL_REPORT
// 3461 /*********************************************************************
// 3462  * @fn      zclParseInConfigReportCmd
// 3463  *
// 3464  * @brief   Parse the "Profile" Configure Reporting Command
// 3465  *
// 3466  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3467  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3468  *
// 3469  * @param   pCmd - pointer to incoming data to parse
// 3470  *
// 3471  * @return  pointer to the parsed command structure
// 3472  */
// 3473 void *zclParseInConfigReportCmd( zclParseCmd_t *pCmd )
// 3474 {
// 3475   zclCfgReportCmd_t *cfgReportCmd;
// 3476   uint8 *pBuf = pCmd->pData;
// 3477   uint8 *dataPtr;
// 3478   uint8 numAttr = 0;
// 3479   uint8 dataType;
// 3480   uint8 hdrLen;
// 3481   uint16 dataLen = 0;
// 3482   uint8 reportChangeLen; // length of Reportable Change field
// 3483 
// 3484   // Calculate the length of the Request command
// 3485   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3486   {
// 3487     uint8 direction;
// 3488 
// 3489     numAttr++;
// 3490     direction = *pBuf++;
// 3491     pBuf += 2; // move pass the attribute ID
// 3492 
// 3493     // Is there a Reportable Change field?
// 3494     if ( direction == ZCL_SEND_ATTR_REPORTS )
// 3495     {
// 3496       dataType = *pBuf++;
// 3497       pBuf += 4; // move pass the Min and Max Reporting Intervals
// 3498 
// 3499       // For attributes of 'discrete' data types this field is omitted
// 3500       if ( zclAnalogDataType( dataType ) )
// 3501       {
// 3502         reportChangeLen = zclGetDataTypeLength( dataType );
// 3503         pBuf += reportChangeLen;
// 3504 
// 3505         // add padding if needed
// 3506         if ( PADDING_NEEDED( reportChangeLen ) )
// 3507         {
// 3508           reportChangeLen++;
// 3509         }
// 3510 
// 3511         dataLen += reportChangeLen;
// 3512       }
// 3513       else
// 3514       {
// 3515         pBuf++; // move past reportable change field
// 3516       }
// 3517     }
// 3518     else
// 3519     {
// 3520       pBuf += 2; // move pass the Timeout Period
// 3521     }
// 3522   } // while loop
// 3523 
// 3524   hdrLen = sizeof( zclCfgReportCmd_t ) + ( numAttr * sizeof( zclCfgReportRec_t ) );
// 3525 
// 3526   cfgReportCmd = (zclCfgReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
// 3527   if ( cfgReportCmd != NULL )
// 3528   {
// 3529     uint8 i;
// 3530     pBuf = pCmd->pData;
// 3531     dataPtr = (uint8 *)( (uint8 *)cfgReportCmd + hdrLen );
// 3532 
// 3533     cfgReportCmd->numAttr = numAttr;
// 3534     for ( i = 0; i < numAttr; i++ )
// 3535     {
// 3536       zclCfgReportRec_t *reportRec = &(cfgReportCmd->attrList[i]);
// 3537 
// 3538       zcl_memset( reportRec, 0, sizeof( zclCfgReportRec_t ) );
// 3539 
// 3540       reportRec->direction = *pBuf++;
// 3541       reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3542       pBuf += 2;
// 3543       if ( reportRec->direction == ZCL_SEND_ATTR_REPORTS )
// 3544       {
// 3545         // Attribute to be reported
// 3546         reportRec->dataType = *pBuf++;
// 3547         reportRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3548         pBuf += 2;
// 3549         reportRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3550         pBuf += 2;
// 3551 
// 3552         // For attributes of 'discrete' data types this field is omitted
// 3553         if ( zclAnalogDataType( reportRec->dataType ) )
// 3554         {
// 3555           zcl_BuildAnalogData( reportRec->dataType, dataPtr, pBuf);
// 3556           reportRec->reportableChange = dataPtr;
// 3557 
// 3558           reportChangeLen = zclGetDataTypeLength( reportRec->dataType );
// 3559           pBuf += reportChangeLen;
// 3560 
// 3561           // advance attribute data pointer
// 3562           if ( PADDING_NEEDED( reportChangeLen ) )
// 3563           {
// 3564             reportChangeLen++;
// 3565           }
// 3566 
// 3567           dataPtr += reportChangeLen;
// 3568         }
// 3569       }
// 3570       else
// 3571       {
// 3572         // Attribute reports to be received
// 3573         reportRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3574         pBuf += 2;
// 3575       }
// 3576     } // while loop
// 3577   }
// 3578 
// 3579   return ( (void *)cfgReportCmd );
// 3580 }
// 3581 
// 3582 /*********************************************************************
// 3583  * @fn      zclParseInConfigReportRspCmd
// 3584  *
// 3585  * @brief   Parse the "Profile" Configure Reporting Response Command
// 3586  *
// 3587  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3588  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3589  *
// 3590  * @param   pCmd - pointer to incoming data to parse
// 3591  *
// 3592  * @return  pointer to the parsed command structure
// 3593  */
// 3594 static void *zclParseInConfigReportRspCmd( zclParseCmd_t *pCmd )
// 3595 {
// 3596   zclCfgReportRspCmd_t *cfgReportRspCmd;
// 3597   uint8 *pBuf = pCmd->pData;
// 3598   uint8 numAttr;
// 3599 
// 3600   numAttr = pCmd->dataLen / ( 1 + 1 + 2 ); // Status + Direction + Attribute ID
// 3601 
// 3602   cfgReportRspCmd = (zclCfgReportRspCmd_t *)zcl_mem_alloc( sizeof( zclCfgReportRspCmd_t )
// 3603                                             + ( numAttr * sizeof( zclCfgReportStatus_t ) ) );
// 3604   if ( cfgReportRspCmd != NULL )
// 3605   {
// 3606     uint8 i;
// 3607     cfgReportRspCmd->numAttr = numAttr;
// 3608     for ( i = 0; i < cfgReportRspCmd->numAttr; i++ )
// 3609     {
// 3610       cfgReportRspCmd->attrList[i].status = *pBuf++;
// 3611       cfgReportRspCmd->attrList[i].direction = *pBuf++;
// 3612       cfgReportRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3613       pBuf += 2;
// 3614     }
// 3615   }
// 3616 
// 3617   return ( (void *)cfgReportRspCmd );
// 3618 }
// 3619 
// 3620 /*********************************************************************
// 3621  * @fn      zclParseInReadReportCfgCmd
// 3622  *
// 3623  * @brief   Parse the "Profile" Read Reporting Configuration Command
// 3624  *
// 3625  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3626  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3627  *
// 3628  * @param   pCmd - pointer to incoming data to parse
// 3629  *
// 3630  * @return  pointer to the parsed command structure
// 3631  */
// 3632 void *zclParseInReadReportCfgCmd( zclParseCmd_t *pCmd )
// 3633 {
// 3634   zclReadReportCfgCmd_t *readReportCfgCmd;
// 3635   uint8 *pBuf = pCmd->pData;
// 3636   uint8 numAttr;
// 3637 
// 3638   numAttr = pCmd->dataLen / ( 1 + 2 ); // Direction + Attribute ID
// 3639 
// 3640   readReportCfgCmd = (zclReadReportCfgCmd_t *)zcl_mem_alloc( sizeof( zclReadReportCfgCmd_t )
// 3641                                                   + ( numAttr * sizeof( zclReadReportCfgRec_t ) ) );
// 3642   if ( readReportCfgCmd != NULL )
// 3643   {
// 3644     uint8 i;
// 3645     readReportCfgCmd->numAttr = numAttr;
// 3646     for ( i = 0; i < readReportCfgCmd->numAttr; i++)
// 3647     {
// 3648       readReportCfgCmd->attrList[i].direction = *pBuf++;;
// 3649       readReportCfgCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3650       pBuf += 2;
// 3651     }
// 3652   }
// 3653 
// 3654   return ( (void *)readReportCfgCmd );
// 3655 }
// 3656 
// 3657 /*********************************************************************
// 3658  * @fn      zclParseInReadReportCfgRspCmd
// 3659  *
// 3660  * @brief   Parse the "Profile" Read Reporting Configuration Response Command
// 3661  *
// 3662  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3663  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3664  *
// 3665  * @param   pCmd - pointer to incoming data to parse
// 3666  *
// 3667  * @return  pointer to the parsed command structure
// 3668  */
// 3669 static void *zclParseInReadReportCfgRspCmd( zclParseCmd_t *pCmd )
// 3670 {
// 3671   zclReadReportCfgRspCmd_t *readReportCfgRspCmd;
// 3672   uint8 reportChangeLen;
// 3673   uint8 *pBuf = pCmd->pData;
// 3674   uint8 *dataPtr;
// 3675   uint8 numAttr = 0;
// 3676   uint8 hdrLen;
// 3677   uint16 dataLen = 0;
// 3678 
// 3679   // Calculate the length of the response command
// 3680   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3681   {
// 3682     uint8 status;
// 3683     uint8 direction;
// 3684 
// 3685     numAttr++;
// 3686     status = *pBuf++;
// 3687     direction = *pBuf++;
// 3688     pBuf += 2; // move pass the attribute ID
// 3689 
// 3690     if ( status == ZCL_STATUS_SUCCESS )
// 3691     {
// 3692       if ( direction == ZCL_SEND_ATTR_REPORTS )
// 3693       {
// 3694         uint8 dataType = *pBuf++;
// 3695         pBuf += 4; // move pass the Min and Max Reporting Intervals
// 3696 
// 3697         // For attributes of 'discrete' data types this field is omitted
// 3698         if ( zclAnalogDataType( dataType ) )
// 3699         {
// 3700           reportChangeLen = zclGetDataTypeLength( dataType );
// 3701           pBuf += reportChangeLen;
// 3702 
// 3703           // add padding if needed
// 3704           if ( PADDING_NEEDED( reportChangeLen ) )
// 3705           {
// 3706             reportChangeLen++;
// 3707           }
// 3708 
// 3709           dataLen += reportChangeLen;
// 3710         }
// 3711       }
// 3712       else
// 3713       {
// 3714         pBuf += 2; // move pass the Timeout field
// 3715       }
// 3716     }
// 3717   } // while loop
// 3718 
// 3719   hdrLen = sizeof( zclReadReportCfgRspCmd_t ) + ( numAttr * sizeof( zclReportCfgRspRec_t ) );
// 3720 
// 3721   readReportCfgRspCmd = (zclReadReportCfgRspCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
// 3722   if ( readReportCfgRspCmd != NULL )
// 3723   {
// 3724     uint8 i;
// 3725     pBuf = pCmd->pData;
// 3726     dataPtr = (uint8 *)( (uint8 *)readReportCfgRspCmd + hdrLen );
// 3727 
// 3728     readReportCfgRspCmd->numAttr = numAttr;
// 3729     for ( i = 0; i < numAttr; i++ )
// 3730     {
// 3731       zclReportCfgRspRec_t *reportRspRec = &(readReportCfgRspCmd->attrList[i]);
// 3732 
// 3733       reportRspRec->status = *pBuf++;
// 3734       reportRspRec->direction = *pBuf++;
// 3735       reportRspRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3736       pBuf += 2;
// 3737 
// 3738       if ( reportRspRec->status == ZCL_STATUS_SUCCESS )
// 3739       {
// 3740         if ( reportRspRec->direction == ZCL_SEND_ATTR_REPORTS )
// 3741         {
// 3742           reportRspRec->dataType = *pBuf++;
// 3743           reportRspRec->minReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3744           pBuf += 2;
// 3745           reportRspRec->maxReportInt = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3746           pBuf += 2;
// 3747 
// 3748           if ( zclAnalogDataType( reportRspRec->dataType ) )
// 3749           {
// 3750             zcl_BuildAnalogData( reportRspRec->dataType, dataPtr, pBuf);
// 3751             reportRspRec->reportableChange = dataPtr;
// 3752 
// 3753             reportChangeLen = zclGetDataTypeLength( reportRspRec->dataType );
// 3754             pBuf += reportChangeLen;
// 3755 
// 3756             // advance attribute data pointer
// 3757             if ( PADDING_NEEDED( reportChangeLen ) )
// 3758             {
// 3759               reportChangeLen++;
// 3760             }
// 3761 
// 3762             dataPtr += reportChangeLen;
// 3763           }
// 3764         }
// 3765         else
// 3766         {
// 3767           reportRspRec->timeoutPeriod = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3768           pBuf += 2;
// 3769         }
// 3770       }
// 3771     }
// 3772   }
// 3773 
// 3774   return ( (void *)readReportCfgRspCmd );
// 3775 }
// 3776 
// 3777 /*********************************************************************
// 3778  * @fn      zclParseInReportCmd
// 3779  *
// 3780  * @brief   Parse the "Profile" Report Command
// 3781  *
// 3782  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3783  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3784  *
// 3785  * @param   pCmd - pointer to incoming data to parse
// 3786  *
// 3787  * @return  pointer to the parsed command structure
// 3788  */
// 3789 void *zclParseInReportCmd( zclParseCmd_t *pCmd )
// 3790 {
// 3791   zclReportCmd_t *reportCmd;
// 3792   uint8 *pBuf = pCmd->pData;
// 3793   uint16 attrDataLen;
// 3794   uint8 *dataPtr;
// 3795   uint8 numAttr = 0;
// 3796   uint8 hdrLen;
// 3797   uint16 dataLen = 0;
// 3798 
// 3799   // find out the number of attributes and the length of attribute data
// 3800   while ( pBuf < ( pCmd->pData + pCmd->dataLen ) )
// 3801   {
// 3802     uint8 dataType;
// 3803 
// 3804     numAttr++;
// 3805     pBuf += 2; // move pass attribute id
// 3806 
// 3807     dataType = *pBuf++;
// 3808 
// 3809     attrDataLen = zclGetAttrDataLength( dataType, pBuf );
// 3810     pBuf += attrDataLen; // move pass attribute data
// 3811 
// 3812     // add padding if needed
// 3813     if ( PADDING_NEEDED( attrDataLen ) )
// 3814     {
// 3815       attrDataLen++;
// 3816     }
// 3817 
// 3818     dataLen += attrDataLen;
// 3819   }
// 3820 
// 3821   hdrLen = sizeof( zclReportCmd_t ) + ( numAttr * sizeof( zclReport_t ) );
// 3822 
// 3823   reportCmd = (zclReportCmd_t *)zcl_mem_alloc( hdrLen + dataLen );
// 3824   if (reportCmd != NULL )
// 3825   {
// 3826     uint8 i;
// 3827     pBuf = pCmd->pData;
// 3828     dataPtr = (uint8 *)( (uint8 *)reportCmd + hdrLen );
// 3829 
// 3830     reportCmd->numAttr = numAttr;
// 3831     for ( i = 0; i < numAttr; i++ )
// 3832     {
// 3833       zclReport_t *reportRec = &(reportCmd->attrList[i]);
// 3834 
// 3835       reportRec->attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3836       pBuf += 2;
// 3837       reportRec->dataType = *pBuf++;
// 3838 
// 3839       attrDataLen = zclGetAttrDataLength( reportRec->dataType, pBuf );
// 3840       zcl_memcpy( dataPtr, pBuf, attrDataLen );
// 3841       reportRec->attrData = dataPtr;
// 3842 
// 3843       pBuf += attrDataLen; // move pass attribute data
// 3844 
// 3845       // advance attribute data pointer
// 3846       if ( PADDING_NEEDED( attrDataLen ) )
// 3847       {
// 3848         attrDataLen++;
// 3849       }
// 3850 
// 3851       dataPtr += attrDataLen;
// 3852     }
// 3853   }
// 3854 
// 3855   return ( (void *)reportCmd );
// 3856 }
// 3857 #endif // ZCL_REPORT
// 3858 
// 3859 /*********************************************************************
// 3860  * @fn      zclParseInDefaultRspCmd
// 3861  *
// 3862  * @brief   Parse the "Profile" Default Response Command
// 3863  *
// 3864  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3865  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3866  *
// 3867  * @param   pCmd - pointer to incoming data to parse
// 3868  *
// 3869  * @return  pointer to the parsed command structure
// 3870  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 3871 static void *zclParseInDefaultRspCmd( zclParseCmd_t *pCmd )
zclParseInDefaultRspCmd:
          CFI Block cfiBlock433 Using cfiCommon0
          CFI Function zclParseInDefaultRspCmd
        CODE
// 3872 {
        FUNCALL zclParseInDefaultRspCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 3873   zclDefaultRspCmd_t *defaultRspCmd;
// 3874   uint8 *pBuf = pCmd->pData;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine127_0 & 0xFFFF
// 3875 
// 3876   defaultRspCmd = (zclDefaultRspCmd_t *)zcl_mem_alloc( sizeof ( zclDefaultRspCmd_t ) );
??CrossCallReturnLabel_222:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
// 3877   if ( defaultRspCmd != NULL )
        MOV     A,R2
        ORL     A,R3
        JZ      ??zclParseInDefaultRspCmd_0
// 3878   {
// 3879     defaultRspCmd->commandID = *pBuf++;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine128_0 & 0xFFFF
??CrossCallReturnLabel_230:
        LCALL   ??Subroutine118_0 & 0xFFFF
// 3880     defaultRspCmd->statusCode = *pBuf;
??CrossCallReturnLabel_177:
        LCALL   ??Subroutine128_0 & 0xFFFF
// 3881   }
??CrossCallReturnLabel_231:
        INC     DPTR
        MOVX    @DPTR,A
// 3882 
// 3883   return ( (void *)defaultRspCmd );
??zclParseInDefaultRspCmd_0:
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock433
// 3884 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine47:
          CFI Block cfiCond434 Using cfiCommon0
          CFI Function zclSerializeData
          CFI Conditional ??CrossCallReturnLabel_233
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond435 Using cfiCommon0
          CFI (cfiCond435) Function zclSerializeData
          CFI (cfiCond435) Conditional ??CrossCallReturnLabel_234
          CFI (cfiCond435) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond435) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond435) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond435) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond435) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond435) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond435) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond435) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond435) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond435) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond435) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond435) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond435) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond435) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond435) CFA_SP SP+0
          CFI (cfiCond435) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker436 Using cfiCommon1
          CFI (cfiPicker436) NoFunction
          CFI (cfiPicker436) Picker
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
          CFI EndBlock cfiCond434
          CFI EndBlock cfiCond435
          CFI EndBlock cfiPicker436
        REQUIRE ??Subroutine128_0
        ; // Fall through to label ??Subroutine128_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine128_0:
          CFI Block cfiCond437 Using cfiCommon0
          CFI Function zclSerializeData
          CFI Conditional ??CrossCallReturnLabel_228
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond438 Using cfiCommon0
          CFI (cfiCond438) Function zclParseInWriteRspCmd
          CFI (cfiCond438) Conditional ??CrossCallReturnLabel_229
          CFI (cfiCond438) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond438) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond438) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond438) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond438) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond438) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond438) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond438) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond438) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond438) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond438) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond438) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond438) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond438) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond438) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond438) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond438) CFA_SP SP+0
          CFI (cfiCond438) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond439 Using cfiCommon0
          CFI (cfiCond439) Function zclParseInDefaultRspCmd
          CFI (cfiCond439) Conditional ??CrossCallReturnLabel_230
          CFI (cfiCond439) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond439) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond439) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond439) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond439) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond439) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond439) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond439) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond439) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond439) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond439) CFA_SP SP+0
          CFI (cfiCond439) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond440 Using cfiCommon0
          CFI (cfiCond440) Function zclParseInDefaultRspCmd
          CFI (cfiCond440) Conditional ??CrossCallReturnLabel_231
          CFI (cfiCond440) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond440) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond440) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond440) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond440) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond440) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond440) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond440) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond440) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond440) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond440) CFA_SP SP+0
          CFI (cfiCond440) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond441 Using cfiCommon0
          CFI (cfiCond441) Function zclProcessInReadCmd
          CFI (cfiCond441) Conditional ??CrossCallReturnLabel_232
          CFI (cfiCond441) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond441) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond441) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond441) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond441) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond441) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond441) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond441) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond441) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond441) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond441) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond441) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond441) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond441) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond441) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond441) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond441) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond441) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond441) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond441) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond441) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond441) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond441) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond441) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond441) CFA_SP SP+0
          CFI (cfiCond441) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond442 Using cfiCommon0
          CFI (cfiCond442) Function zclSerializeData
          CFI (cfiCond442) Conditional ??CrossCallReturnLabel_233
          CFI (cfiCond442) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond442) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond442) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond442) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond442) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond442) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond442) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond442) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond442) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond442) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond442) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond442) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond442) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond442) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond442) CFA_SP SP+0
          CFI (cfiCond442) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond443 Using cfiCommon0
          CFI (cfiCond443) Function zclSerializeData
          CFI (cfiCond443) Conditional ??CrossCallReturnLabel_234
          CFI (cfiCond443) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond443) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond443) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond443) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond443) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond443) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond443) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond443) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond443) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond443) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond443) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond443) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond443) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond443) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond443) CFA_SP SP+0
          CFI (cfiCond443) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker444 Using cfiCommon1
          CFI (cfiPicker444) NoFunction
          CFI (cfiPicker444) Picker
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        RET
          CFI EndBlock cfiCond437
          CFI EndBlock cfiCond438
          CFI EndBlock cfiCond439
          CFI EndBlock cfiCond440
          CFI EndBlock cfiCond441
          CFI EndBlock cfiCond442
          CFI EndBlock cfiCond443
          CFI EndBlock cfiPicker444
// 3885 
// 3886 #ifdef ZCL_DISCOVER
// 3887 /*********************************************************************
// 3888  * @fn      zclParseInDiscAttrsCmd
// 3889  *
// 3890  * @brief   Parse the "Profile" Discovery Attributes and Attributes Extended Commands
// 3891  *
// 3892  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3893  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3894  *
// 3895  * @param   pCmd - pointer to incoming data to parse
// 3896  *
// 3897  * @return  pointer to the parsed command structure
// 3898  */
// 3899 void *zclParseInDiscAttrsCmd( zclParseCmd_t *pCmd )
// 3900 {
// 3901   zclDiscoverAttrsCmd_t *pDiscoverCmd;
// 3902   uint8 *pBuf = pCmd->pData;
// 3903 
// 3904   pDiscoverCmd = (zclDiscoverAttrsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsCmd_t ) );
// 3905   if ( pDiscoverCmd != NULL )
// 3906   {
// 3907     pDiscoverCmd->startAttr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3908     pBuf += 2;
// 3909     pDiscoverCmd->maxAttrIDs = *pBuf;
// 3910   }
// 3911 
// 3912   return ( (void *)pDiscoverCmd );
// 3913 }
// 3914 
// 3915 /*********************************************************************
// 3916  * @fn      zclParseInDiscAttrsRspCmd
// 3917  *
// 3918  * @brief   Parse the "Profile" Discovery Response Commands
// 3919  *
// 3920  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3921  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3922  *
// 3923  * @param   pCmd - pointer to incoming data to parse
// 3924  *
// 3925  * @return  pointer to the parsed command structure
// 3926  */
// 3927 #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
// 3928 static void *zclParseInDiscAttrsRspCmd( zclParseCmd_t *pCmd )
// 3929 {
// 3930   zclDiscoverAttrsRspCmd_t *pDiscoverRspCmd;
// 3931   uint8 *pBuf = pCmd->pData;
// 3932   uint8 numAttr = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 ); // Attr ID + Data Type
// 3933 
// 3934   pDiscoverRspCmd = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsRspCmd_t ) +
// 3935                     ( numAttr * sizeof(zclDiscoverAttrInfo_t) ) );
// 3936 
// 3937   if ( pDiscoverRspCmd != NULL )
// 3938   {
// 3939     pDiscoverRspCmd->discComplete = *pBuf++;
// 3940     pDiscoverRspCmd->numAttr = numAttr;
// 3941 
// 3942     for ( uint8 i = 0; i < numAttr; i++ )
// 3943     {
// 3944       pDiscoverRspCmd->attrList[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 3945       pBuf += 2;
// 3946       pDiscoverRspCmd->attrList[i].dataType = *pBuf++;
// 3947     }
// 3948   }
// 3949 
// 3950   return ( (void *)pDiscoverRspCmd );
// 3951 }
// 3952 
// 3953 /*********************************************************************
// 3954  * @fn      zclParseInDiscCmdsCmd
// 3955  *
// 3956  * @brief   Parse the "Profile" Discovery Commands
// 3957  *
// 3958  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3959  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3960  *
// 3961  * @param   pCmd - pointer to incoming data to parse
// 3962  *
// 3963  * @return  pointer to the parsed command structure
// 3964  */
// 3965 void *zclParseInDiscCmdsCmd( zclParseCmd_t *pCmd )
// 3966 {
// 3967   zclDiscoverCmdsCmd_t *pDiscoverCmd;
// 3968   uint8 *pBuf = pCmd->pData;
// 3969 
// 3970   pDiscoverCmd = (zclDiscoverCmdsCmd_t *)zcl_mem_alloc( sizeof ( zclDiscoverCmdsCmd_t ) );
// 3971   if ( pDiscoverCmd != NULL )
// 3972   {
// 3973     pDiscoverCmd->startCmdID = *pBuf++;
// 3974     pDiscoverCmd->maxCmdID = *pBuf++;
// 3975   }
// 3976 
// 3977   return ( (void *)pDiscoverCmd );
// 3978 }
// 3979 
// 3980 /*********************************************************************
// 3981  * @fn      zclParseInDiscCmdsRspCmd
// 3982  *
// 3983  * @brief   Parse the Discover Commands Response Command
// 3984  *
// 3985  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 3986  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 3987  *
// 3988  * @param   pCmd - pointer to incoming data to parse
// 3989  *
// 3990  * @return  pointer to the parsed command structure
// 3991  */
// 3992 #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
// 3993 static void *zclParseInDiscCmdsRspCmd( zclParseCmd_t *pCmd )
// 3994 {
// 3995   zclDiscoverCmdsCmdRsp_t *pDiscoverRspCmd;
// 3996   uint8 *pBuf = pCmd->pData;
// 3997   uint8 i;
// 3998   uint8 numCmds = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen);  // determine length of command ID variable array
// 3999 
// 4000   // allocate memory for size of structure plus variable array
// 4001   pDiscoverRspCmd = (zclDiscoverCmdsCmdRsp_t *)zcl_mem_alloc( 1 + numCmds );
// 4002   if ( pDiscoverRspCmd != NULL )
// 4003   {
// 4004     pDiscoverRspCmd->discComplete = *pBuf++;
// 4005     pDiscoverRspCmd->numCmd = numCmds;
// 4006 
// 4007     for ( i = 0; i < numCmds; i++ )
// 4008     {
// 4009       pDiscoverRspCmd->pCmdID[i] = *pBuf++;
// 4010     }
// 4011   }
// 4012 
// 4013   return ( (void *)pDiscoverRspCmd );
// 4014 }
// 4015 
// 4016 /*********************************************************************
// 4017  * @fn      zclParseInDiscAttrsExtRspCmd
// 4018  *
// 4019  * @brief   Parse the "Profile" Discovery Extended Attributes Response Commands
// 4020  *
// 4021  *      NOTE: THIS FUNCTION ALLOCATES THE RETURN BUFFER, SO THE CALLING
// 4022  *            FUNCTION IS RESPONSIBLE TO FREE THE MEMORY.
// 4023  *
// 4024  * @param   pCmd - pointer to incoming data to parse
// 4025  *
// 4026  * @return  pointer to the parsed command structure
// 4027  */
// 4028 #define ZCLDISCRSPCMD_DATALEN(a)  ((a)-1) // data len - Discovery Complete
// 4029 static void *zclParseInDiscAttrsExtRspCmd( zclParseCmd_t *pCmd )
// 4030 {
// 4031   zclDiscoverAttrsExtRsp_t *pDiscoverRspCmd;
// 4032   uint8 i;
// 4033   uint8 *pBuf = pCmd->pData;
// 4034   uint8 numAttrs = ZCLDISCRSPCMD_DATALEN(pCmd->dataLen) / ( 2 + 1 + 1 ); // Attr ID + Data Type + Access Control
// 4035 
// 4036   pDiscoverRspCmd = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof ( zclDiscoverAttrsExtRsp_t ) +
// 4037                     ( numAttrs * sizeof(zclDiscoverAttrsExtRsp_t) ) );
// 4038 
// 4039   if ( pDiscoverRspCmd != NULL )
// 4040   {
// 4041     pDiscoverRspCmd->discComplete = *pBuf++;
// 4042     pDiscoverRspCmd->numAttr = numAttrs;
// 4043 
// 4044     for ( i = 0; i < numAttrs; i++ )
// 4045     {
// 4046       pDiscoverRspCmd->aExtAttrInfo[i].attrID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 4047       pBuf += 2;
// 4048       pDiscoverRspCmd->aExtAttrInfo[i].attrDataType = *pBuf++;
// 4049       pDiscoverRspCmd->aExtAttrInfo[i].attrAccessControl = *pBuf++;
// 4050     }
// 4051   }
// 4052 
// 4053   return ( (void *)pDiscoverRspCmd );
// 4054 }
// 4055 #endif // ZCL_DISCOVER
// 4056 
// 4057 #ifdef ZCL_READ
// 4058 /*********************************************************************
// 4059  * @fn      zclProcessInReadCmd
// 4060  *
// 4061  * @brief   Process the "Profile" Read Command
// 4062  *
// 4063  * @param   pInMsg - incoming message to process
// 4064  *
// 4065  * @return  TRUE if command processed. FALSE, otherwise.
// 4066  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 4067 static uint8 zclProcessInReadCmd( zclIncoming_t *pInMsg )
zclProcessInReadCmd:
          CFI Block cfiBlock445 Using cfiCommon0
          CFI Function zclProcessInReadCmd
        CODE
// 4068 {
        FUNCALL zclProcessInReadCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInReadCmd, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInReadCmd, zclGetAuthorizeCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInReadCmd, zcl_SendReadRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInReadCmd, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 32, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 32, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
// 4069   zclReadCmd_t *readCmd;
// 4070   zclReadRspCmd_t *readRspCmd;
// 4071   zclAttrRec_t attrRec;
// 4072   uint16 len;
// 4073   uint8 i;
// 4074 
// 4075   readCmd = (zclReadCmd_t *)pInMsg->attrCmd;
        MOV     A,R6
        ADD     A,#0xc
        LCALL   ?Subroutine77 & 0xFFFF
??CrossCallReturnLabel_175:
        MOV     ?V0 + 10,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 11,A
// 4076 
// 4077   // calculate the length of the response status record
// 4078   len = sizeof( zclReadRspCmd_t ) + (readCmd->numAttr * sizeof( zclReadRspStatus_t ));
// 4079 
// 4080   readRspCmd = zcl_mem_alloc( len );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     DPL,?V0 + 10
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     B,#0x6
        LCALL   ?Subroutine106 & 0xFFFF
??CrossCallReturnLabel_147:
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
// 4081   if ( readRspCmd == NULL )
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??zclProcessInReadCmd_0
// 4082   {
// 4083     return FALSE; // EMBEDDED RETURN
        MOV     R1,#0x0
        LJMP    ??zclProcessInReadCmd_1 & 0xFFFF
// 4084   }
// 4085 
// 4086   readRspCmd->numAttr = readCmd->numAttr;
??zclProcessInReadCmd_0:
        MOV     DPL,?V0 + 10
        MOV     DPH,?V0 + 11
        LCALL   ??Subroutine128_0 & 0xFFFF
??CrossCallReturnLabel_232:
        MOVX    @DPTR,A
// 4087   for ( i = 0; i < readCmd->numAttr; i++ )
        MOV     ?V0 + 2,#0x0
        SJMP    ??zclProcessInReadCmd_2
// 4088   {
// 4089     zclReadRspStatus_t *statusRec = &(readRspCmd->attrList[i]);
// 4090 
// 4091     statusRec->attrID = readCmd->attrID[i];
// 4092 
// 4093     if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4094                          readCmd->attrID[i], &attrRec ) )
// 4095     {
// 4096       if ( zcl_AccessCtrlRead( attrRec.attr.accessControl ) )
// 4097       {
// 4098         statusRec->status = zclAuthorizeRead( pInMsg->msg->endPoint,
// 4099                                               &(pInMsg->msg->srcAddr), &attrRec );
// 4100         if ( statusRec->status == ZCL_STATUS_SUCCESS )
// 4101         {
// 4102           statusRec->data = attrRec.attr.dataPtr;
// 4103           statusRec->dataType = attrRec.attr.dataType;
// 4104         }
// 4105       }
// 4106       else
// 4107       {
// 4108         statusRec->status = ZCL_STATUS_WRITE_ONLY;
// 4109       }
// 4110     }
// 4111     else
// 4112     {
// 4113       statusRec->status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
??zclProcessInReadCmd_3:
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOV     A,#-0x7a
??zclProcessInReadCmd_4:
        MOVX    @DPTR,A
// 4114     }
??zclProcessInReadCmd_5:
        INC     ?V0 + 2
??zclProcessInReadCmd_2:
        MOV     DPL,?V0 + 10
        MOV     DPH,?V0 + 11
        LCALL   ??Subroutine129_0 & 0xFFFF
??CrossCallReturnLabel_237:
        JC      $+5
        LJMP    ??zclProcessInReadCmd_6 & 0xFFFF
        MOV     DPL,?V0 + 2
        MOV     R0,DPL
        MOV     A,R0
        MOV     B,#0x6
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        MOV     A,?V0 + 0
        ADD     A,R2
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,R3
        MOV     DPH,A
        INC     DPTR
        MOV     ?V0 + 4,DPL
        MOV     ?V0 + 5,DPH
        MOV     A,R0
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,?V0 + 10
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V0 + 11
        LCALL   ?Subroutine78 & 0xFFFF
??CrossCallReturnLabel_106:
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_45:
        LCALL   ??Subroutine130_0 & 0xFFFF
??CrossCallReturnLabel_247:
        MOV     A,?V0 + 4
        ADD     A,#0x2
        MOV     ?V0 + 6,A
        MOV     A,?V0 + 5
        ADDC    A,#0x0
        MOV     ?V0 + 7,A
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_61:
        MOV     ?V0 + 12,DPL
        MOV     ?V0 + 13,DPH
        MOV     R0,#?V0 + 12
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine134_0 & 0xFFFF
??CrossCallReturnLabel_258:
        LCALL   ??zclFindAttrRec?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
        MOV     A,R1
        JZ      ??zclProcessInReadCmd_3
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??zclProcessInReadCmd_7
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine67 & 0xFFFF
??CrossCallReturnLabel_88:
        ADD     A,#0x6
        MOV     ?V0 + 14,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     ?V0 + 15,A
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.4
        JNC     ??zclProcessInReadCmd_8
        ; Setup parameters for call to function zclGetAuthorizeCB
        LCALL   ?Subroutine73 & 0xFFFF
??CrossCallReturnLabel_268:
        LCALL   ??zclGetAuthorizeCB?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
        MOV     A,R2
        ORL     A,?V0 + 9
        JZ      ??zclProcessInReadCmd_8
        ; Setup parameters for indirect call
        MOV     R1,#0x1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 14
        MOV     R3,?V0 + 15
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        LCALL   ?CALL_IND
        MOV     A,R1
        SJMP    ??zclProcessInReadCmd_9
??zclProcessInReadCmd_8:
        CLR     A
??zclProcessInReadCmd_9:
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOVX    @DPTR,A
        JZ      $+5
        LJMP    ??zclProcessInReadCmd_5 & 0xFFFF
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine41 & 0xFFFF
??CrossCallReturnLabel_46:
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_251:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LJMP    ??zclProcessInReadCmd_4 & 0xFFFF
??zclProcessInReadCmd_7:
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        MOV     A,#-0x71
        LJMP    ??zclProcessInReadCmd_4 & 0xFFFF
// 4115   }
// 4116 
// 4117   // Build and send Read Response command
// 4118   zcl_SendReadRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr), pInMsg->msg->clusterId,
// 4119                    readRspCmd, !pInMsg->hdr.fc.direction,
// 4120                    true, pInMsg->hdr.transSeqNum );
??zclProcessInReadCmd_6:
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine141_0 & 0xFFFF
??CrossCallReturnLabel_317:
        ; Setup parameters for call to function zcl_SendReadRsp
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     ?V0 + 2,#0x1
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine133_0 & 0xFFFF
??CrossCallReturnLabel_253:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        LCALL   ?Subroutine56 & 0xFFFF
??CrossCallReturnLabel_330:
        LCALL   ?Subroutine76 & 0xFFFF
??CrossCallReturnLabel_102:
        LCALL   ??Subroutine136_0 & 0xFFFF
??CrossCallReturnLabel_263:
        LCALL   ??zcl_SendReadRsp?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 32)
// 4121   zcl_mem_free( readRspCmd );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_mem_free?relay
// 4122 
// 4123   return TRUE;
        MOV     R1,#0x1
??zclProcessInReadCmd_1:
        MOV     A,#0x8
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock445
// 4124 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine67:
          CFI Block cfiCond446 Using cfiCommon0
          CFI Function zclParseInReadCmd
          CFI Conditional ??CrossCallReturnLabel_87
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond447 Using cfiCommon0
          CFI (cfiCond447) Function zclProcessInReadCmd
          CFI (cfiCond447) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond447) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond447) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond447) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond447) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond447) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond447) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond447) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond447) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond447) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond447) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond447) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond447) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond447) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond447) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond447) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond447) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond447) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond447) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond447) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond447) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond447) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond447) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond447) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond447) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond447) CFA_SP SP+0
          CFI (cfiCond447) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond448 Using cfiCommon0
          CFI (cfiCond448) Function zclProcessInWriteCmd
          CFI (cfiCond448) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond448) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond448) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond448) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond448) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond448) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond448) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond448) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond448) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond448) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond448) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond448) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond448) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond448) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond448) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond448) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond448) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond448) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond448) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond448) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond448) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond448) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond448) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond448) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond448) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond448) CFA_SP SP+0
          CFI (cfiCond448) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiPicker449 Using cfiCommon1
          CFI (cfiPicker449) NoFunction
          CFI (cfiPicker449) Picker
        LCALL   ?Subroutine99 & 0xFFFF
??CrossCallReturnLabel_289:
        MOV     A,R0
        RET
          CFI EndBlock cfiCond446
          CFI EndBlock cfiCond447
          CFI EndBlock cfiCond448
          CFI EndBlock cfiPicker449

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine46:
          CFI Block cfiCond450 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_238
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond451 Using cfiCommon0
          CFI (cfiCond451) Function zcl_SendReadRsp
          CFI (cfiCond451) Conditional ??CrossCallReturnLabel_239
          CFI (cfiCond451) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond451) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond451) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond451) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond451) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond451) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond451) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond451) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond451) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond451) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond451) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond451) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond451) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond451) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond451) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond451) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond451) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond451) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond451) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond451) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond451) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond451) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond451) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond451) CFA_SP SP+0
          CFI (cfiCond451) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiPicker452 Using cfiCommon1
          CFI (cfiPicker452) NoFunction
          CFI (cfiPicker452) Picker
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
          CFI EndBlock cfiCond450
          CFI EndBlock cfiCond451
          CFI EndBlock cfiPicker452
        REQUIRE ??Subroutine129_0
        ; // Fall through to label ??Subroutine129_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine129_0:
          CFI Block cfiCond453 Using cfiCommon0
          CFI Function zcl_SendWriteRequest
          CFI Conditional ??CrossCallReturnLabel_235
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond454 Using cfiCommon0
          CFI (cfiCond454) Function zcl_SendWriteRequest
          CFI (cfiCond454) Conditional ??CrossCallReturnLabel_236
          CFI (cfiCond454) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond454) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond454) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond454) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond454) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond454) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond454) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond454) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond454) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond454) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond454) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond454) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond454) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond454) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond454) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond454) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond454) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond454) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond454) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond454) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond454) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond454) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond454) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond454) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond454) CFA_SP SP+0
          CFI (cfiCond454) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond455 Using cfiCommon0
          CFI (cfiCond455) Function zclProcessInReadCmd
          CFI (cfiCond455) Conditional ??CrossCallReturnLabel_237
          CFI (cfiCond455) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond455) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond455) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond455) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond455) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond455) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond455) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond455) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond455) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond455) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond455) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond455) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond455) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond455) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond455) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond455) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond455) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond455) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond455) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond455) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond455) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond455) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond455) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond455) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond455) CFA_SP SP+0
          CFI (cfiCond455) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond456 Using cfiCommon0
          CFI (cfiCond456) Function zcl_SendReadRsp
          CFI (cfiCond456) Conditional ??CrossCallReturnLabel_238
          CFI (cfiCond456) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond456) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond456) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond456) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond456) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond456) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond456) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond456) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond456) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond456) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond456) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond456) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond456) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond456) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond456) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond456) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond456) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond456) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond456) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond456) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond456) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond456) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond456) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond456) CFA_SP SP+0
          CFI (cfiCond456) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond457 Using cfiCommon0
          CFI (cfiCond457) Function zcl_SendReadRsp
          CFI (cfiCond457) Conditional ??CrossCallReturnLabel_239
          CFI (cfiCond457) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond457) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond457) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond457) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond457) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond457) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond457) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond457) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond457) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond457) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond457) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond457) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond457) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond457) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond457) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond457) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond457) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond457) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond457) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond457) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond457) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond457) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond457) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond457) CFA_SP SP+0
          CFI (cfiCond457) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiPicker458 Using cfiCommon1
          CFI (cfiPicker458) NoFunction
          CFI (cfiPicker458) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,R0
        RET
          CFI EndBlock cfiCond453
          CFI EndBlock cfiCond454
          CFI EndBlock cfiCond455
          CFI EndBlock cfiCond456
          CFI EndBlock cfiCond457
          CFI EndBlock cfiPicker458

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine41:
          CFI Block cfiCond459 Using cfiCommon0
          CFI Function zclParseInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_44
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond460 Using cfiCommon0
          CFI (cfiCond460) Function zclProcessInReadCmd
          CFI (cfiCond460) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond460) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond460) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond460) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond460) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond460) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond460) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond460) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond460) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond460) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond460) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond460) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond460) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond460) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond460) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond460) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond460) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond460) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond460) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond460) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond460) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond460) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond460) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond460) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond460) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond460) CFA_SP SP+0
          CFI (cfiCond460) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond461 Using cfiCommon0
          CFI (cfiCond461) Function zclProcessInReadCmd
          CFI (cfiCond461) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond461) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond461) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond461) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond461) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond461) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond461) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond461) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond461) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond461) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond461) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond461) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond461) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond461) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond461) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond461) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond461) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond461) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond461) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond461) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond461) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond461) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond461) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond461) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond461) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond461) CFA_SP SP+0
          CFI (cfiCond461) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiPicker462 Using cfiCommon1
          CFI (cfiPicker462) NoFunction
          CFI (cfiPicker462) Picker
        LCALL   ?Subroutine99 & 0xFFFF
??CrossCallReturnLabel_288:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        RET
          CFI EndBlock cfiCond459
          CFI EndBlock cfiCond460
          CFI EndBlock cfiCond461
          CFI EndBlock cfiPicker462

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond463 Using cfiCommon0
          CFI Function zclProcessInReadCmd
          CFI Conditional ??CrossCallReturnLabel_251
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond464 Using cfiCommon0
          CFI (cfiCond464) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond464) Conditional ??CrossCallReturnLabel_252
          CFI (cfiCond464) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond464) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond464) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond464) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond464) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond464) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond464) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond464) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond464) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond464) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond464) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond464) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond464) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond464) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond464) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond464) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond464) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond464) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond464) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond464) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond464) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond464) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond464) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond464) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond464) CFA_SP SP+0
          CFI (cfiCond464) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker465 Using cfiCommon1
          CFI (cfiPicker465) NoFunction
          CFI (cfiPicker465) Picker
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond463
          CFI EndBlock cfiCond464
          CFI EndBlock cfiPicker465
        REQUIRE ??Subroutine130_0
        ; // Fall through to label ??Subroutine130_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine130_0:
          CFI Block cfiCond466 Using cfiCommon0
          CFI Function zcl_SendCommand
          CFI Conditional ??CrossCallReturnLabel_241
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond467 Using cfiCommon0
          CFI (cfiCond467) Function zcl_ProcessMessageMSG
          CFI (cfiCond467) Conditional ??CrossCallReturnLabel_242
          CFI (cfiCond467) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond467) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond467) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond467) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond467) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond467) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond467) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond467) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond467) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond467) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond467) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond467) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond467) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond467) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond467) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond467) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond467) CFA_SP SP+0
          CFI (cfiCond467) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond468 Using cfiCommon0
          CFI (cfiCond468) Function zcl_ProcessMessageMSG
          CFI (cfiCond468) Conditional ??CrossCallReturnLabel_243
          CFI (cfiCond468) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond468) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond468) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond468) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond468) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond468) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond468) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond468) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond468) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond468) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond468) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond468) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond468) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond468) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond468) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond468) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond468) CFA_SP SP+0
          CFI (cfiCond468) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond469 Using cfiCommon0
          CFI (cfiCond469) Function zcl_ProcessMessageMSG
          CFI (cfiCond469) Conditional ??CrossCallReturnLabel_244
          CFI (cfiCond469) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond469) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond469) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond469) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond469) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond469) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond469) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond469) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond469) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond469) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond469) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond469) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond469) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond469) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond469) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond469) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond469) CFA_SP SP+0
          CFI (cfiCond469) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond470 Using cfiCommon0
          CFI (cfiCond470) Function zcl_ProcessMessageMSG
          CFI (cfiCond470) Conditional ??CrossCallReturnLabel_245
          CFI (cfiCond470) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond470) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond470) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond470) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond470) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond470) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond470) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond470) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond470) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond470) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond470) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond470) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond470) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond470) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond470) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond470) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond470) CFA_SP SP+0
          CFI (cfiCond470) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond471 Using cfiCommon0
          CFI (cfiCond471) Function zcl_ProcessMessageMSG
          CFI (cfiCond471) Conditional ??CrossCallReturnLabel_246
          CFI (cfiCond471) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond471) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond471) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond471) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond471) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond471) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond471) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond471) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond471) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond471) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond471) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond471) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond471) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond471) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond471) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond471) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond471) CFA_SP SP+0
          CFI (cfiCond471) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond472 Using cfiCommon0
          CFI (cfiCond472) Function zclProcessInReadCmd
          CFI (cfiCond472) Conditional ??CrossCallReturnLabel_247
          CFI (cfiCond472) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond472) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond472) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond472) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond472) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond472) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond472) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond472) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond472) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond472) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond472) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond472) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond472) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond472) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond472) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond472) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond472) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond472) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond472) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond472) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond472) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond472) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond472) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond472) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond472) CFA_SP SP+0
          CFI (cfiCond472) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond473 Using cfiCommon0
          CFI (cfiCond473) Function zclProcessInWriteCmd
          CFI (cfiCond473) Conditional ??CrossCallReturnLabel_248
          CFI (cfiCond473) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond473) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond473) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond473) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond473) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond473) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond473) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond473) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond473) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond473) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond473) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond473) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond473) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond473) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond473) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond473) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond473) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond473) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond473) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond473) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond473) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond473) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond473) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond473) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond473) CFA_SP SP+0
          CFI (cfiCond473) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond474 Using cfiCommon0
          CFI (cfiCond474) Function zclProcessInWriteCmd
          CFI (cfiCond474) Conditional ??CrossCallReturnLabel_249
          CFI (cfiCond474) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond474) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond474) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond474) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond474) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond474) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond474) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond474) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond474) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond474) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond474) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond474) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond474) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond474) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond474) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond474) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond474) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond474) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond474) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond474) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond474) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond474) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond474) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond474) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond474) CFA_SP SP+0
          CFI (cfiCond474) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond475 Using cfiCommon0
          CFI (cfiCond475) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond475) Conditional ??CrossCallReturnLabel_250
          CFI (cfiCond475) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond475) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond475) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond475) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond475) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond475) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond475) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond475) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond475) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond475) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond475) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond475) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond475) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond475) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond475) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond475) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond475) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond475) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond475) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond475) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond475) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond475) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond475) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond475) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond475) CFA_SP SP+0
          CFI (cfiCond475) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond476 Using cfiCommon0
          CFI (cfiCond476) Function zclProcessInReadCmd
          CFI (cfiCond476) Conditional ??CrossCallReturnLabel_251
          CFI (cfiCond476) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond476) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond476) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond476) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond476) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond476) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond476) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond476) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond476) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond476) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond476) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond476) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond476) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond476) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond476) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond476) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond476) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond476) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond476) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond476) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond476) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond476) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond476) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond476) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond476) CFA_SP SP+0
          CFI (cfiCond476) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond477 Using cfiCommon0
          CFI (cfiCond477) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond477) Conditional ??CrossCallReturnLabel_252
          CFI (cfiCond477) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond477) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond477) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond477) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond477) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond477) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond477) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond477) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond477) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond477) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond477) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond477) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond477) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond477) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond477) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond477) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond477) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond477) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond477) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond477) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond477) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond477) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond477) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond477) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond477) CFA_SP SP+0
          CFI (cfiCond477) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker478 Using cfiCommon1
          CFI (cfiPicker478) NoFunction
          CFI (cfiPicker478) Picker
        MOV     A,R0
          CFI EndBlock cfiCond466
          CFI EndBlock cfiCond467
          CFI EndBlock cfiCond468
          CFI EndBlock cfiCond469
          CFI EndBlock cfiCond470
          CFI EndBlock cfiCond471
          CFI EndBlock cfiCond472
          CFI EndBlock cfiCond473
          CFI EndBlock cfiCond474
          CFI EndBlock cfiCond475
          CFI EndBlock cfiCond476
          CFI EndBlock cfiCond477
          CFI EndBlock cfiPicker478
        REQUIRE ??Subroutine131_0
        ; // Fall through to label ??Subroutine131_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine131_0:
          CFI Block cfiCond479 Using cfiCommon0
          CFI Function zclParseHdr
          CFI Conditional ??CrossCallReturnLabel_240
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond480 Using cfiCommon0
          CFI (cfiCond480) Function zcl_SendCommand
          CFI (cfiCond480) Conditional ??CrossCallReturnLabel_241
          CFI (cfiCond480) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond480) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond480) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond480) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond480) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond480) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond480) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond480) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond480) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond480) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond480) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond480) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond480) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond480) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond480) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond480) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond480) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond480) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond480) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond480) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond480) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond480) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond480) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond480) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond480) CFA_SP SP+0
          CFI (cfiCond480) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond481 Using cfiCommon0
          CFI (cfiCond481) Function zcl_ProcessMessageMSG
          CFI (cfiCond481) Conditional ??CrossCallReturnLabel_242
          CFI (cfiCond481) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond481) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond481) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond481) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond481) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond481) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond481) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond481) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond481) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond481) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond481) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond481) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond481) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond481) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond481) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond481) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond481) CFA_SP SP+0
          CFI (cfiCond481) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond482 Using cfiCommon0
          CFI (cfiCond482) Function zcl_ProcessMessageMSG
          CFI (cfiCond482) Conditional ??CrossCallReturnLabel_243
          CFI (cfiCond482) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond482) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond482) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond482) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond482) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond482) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond482) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond482) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond482) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond482) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond482) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond482) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond482) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond482) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond482) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond482) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond482) CFA_SP SP+0
          CFI (cfiCond482) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond483 Using cfiCommon0
          CFI (cfiCond483) Function zcl_ProcessMessageMSG
          CFI (cfiCond483) Conditional ??CrossCallReturnLabel_244
          CFI (cfiCond483) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond483) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond483) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond483) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond483) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond483) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond483) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond483) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond483) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond483) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond483) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond483) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond483) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond483) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond483) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond483) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond483) CFA_SP SP+0
          CFI (cfiCond483) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond484 Using cfiCommon0
          CFI (cfiCond484) Function zcl_ProcessMessageMSG
          CFI (cfiCond484) Conditional ??CrossCallReturnLabel_245
          CFI (cfiCond484) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond484) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond484) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond484) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond484) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond484) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond484) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond484) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond484) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond484) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond484) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond484) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond484) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond484) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond484) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond484) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond484) CFA_SP SP+0
          CFI (cfiCond484) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond485 Using cfiCommon0
          CFI (cfiCond485) Function zcl_ProcessMessageMSG
          CFI (cfiCond485) Conditional ??CrossCallReturnLabel_246
          CFI (cfiCond485) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond485) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond485) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond485) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond485) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond485) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond485) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond485) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond485) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond485) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond485) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond485) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond485) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond485) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond485) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond485) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond485) CFA_SP SP+0
          CFI (cfiCond485) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond486 Using cfiCommon0
          CFI (cfiCond486) Function zclProcessInReadCmd
          CFI (cfiCond486) Conditional ??CrossCallReturnLabel_247
          CFI (cfiCond486) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond486) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond486) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond486) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond486) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond486) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond486) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond486) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond486) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond486) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond486) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond486) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond486) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond486) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond486) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond486) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond486) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond486) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond486) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond486) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond486) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond486) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond486) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond486) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond486) CFA_SP SP+0
          CFI (cfiCond486) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond487 Using cfiCommon0
          CFI (cfiCond487) Function zclProcessInWriteCmd
          CFI (cfiCond487) Conditional ??CrossCallReturnLabel_248
          CFI (cfiCond487) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond487) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond487) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond487) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond487) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond487) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond487) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond487) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond487) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond487) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond487) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond487) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond487) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond487) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond487) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond487) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond487) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond487) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond487) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond487) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond487) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond487) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond487) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond487) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond487) CFA_SP SP+0
          CFI (cfiCond487) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond488 Using cfiCommon0
          CFI (cfiCond488) Function zclProcessInWriteCmd
          CFI (cfiCond488) Conditional ??CrossCallReturnLabel_249
          CFI (cfiCond488) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond488) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond488) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond488) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond488) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond488) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond488) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond488) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond488) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond488) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond488) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond488) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond488) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond488) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond488) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond488) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond488) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond488) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond488) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond488) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond488) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond488) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond488) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond488) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond488) CFA_SP SP+0
          CFI (cfiCond488) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond489 Using cfiCommon0
          CFI (cfiCond489) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond489) Conditional ??CrossCallReturnLabel_250
          CFI (cfiCond489) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond489) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond489) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond489) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond489) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond489) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond489) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond489) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond489) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond489) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond489) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond489) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond489) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond489) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond489) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond489) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond489) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond489) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond489) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond489) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond489) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond489) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond489) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond489) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond489) CFA_SP SP+0
          CFI (cfiCond489) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond490 Using cfiCommon0
          CFI (cfiCond490) Function zclProcessInReadCmd
          CFI (cfiCond490) Conditional ??CrossCallReturnLabel_251
          CFI (cfiCond490) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond490) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond490) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond490) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond490) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond490) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond490) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond490) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond490) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond490) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond490) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond490) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond490) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond490) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond490) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond490) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond490) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond490) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond490) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond490) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond490) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond490) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond490) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond490) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond490) CFA_SP SP+0
          CFI (cfiCond490) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond491 Using cfiCommon0
          CFI (cfiCond491) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond491) Conditional ??CrossCallReturnLabel_252
          CFI (cfiCond491) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond491) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond491) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond491) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond491) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond491) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond491) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond491) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond491) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond491) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond491) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond491) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond491) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond491) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond491) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond491) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond491) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond491) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond491) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond491) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond491) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond491) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond491) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond491) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond491) CFA_SP SP+0
          CFI (cfiCond491) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker492 Using cfiCommon1
          CFI (cfiPicker492) NoFunction
          CFI (cfiPicker492) Picker
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond479
          CFI EndBlock cfiCond480
          CFI EndBlock cfiCond481
          CFI EndBlock cfiCond482
          CFI EndBlock cfiCond483
          CFI EndBlock cfiCond484
          CFI EndBlock cfiCond485
          CFI EndBlock cfiCond486
          CFI EndBlock cfiCond487
          CFI EndBlock cfiCond488
          CFI EndBlock cfiCond489
          CFI EndBlock cfiCond490
          CFI EndBlock cfiCond491
          CFI EndBlock cfiPicker492
// 4125 #endif // ZCL_READ
// 4126 
// 4127 #ifdef ZCL_WRITE
// 4128 /*********************************************************************
// 4129  * @fn      processInWriteCmd
// 4130  *
// 4131  * @brief   Process the "Profile" Write and Write No Response Commands
// 4132  *
// 4133  * @param   pInMsg - incoming message to process
// 4134  *
// 4135  * @return  TRUE if command processed. FALSE, otherwise.
// 4136  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 4137 static uint8 zclProcessInWriteCmd( zclIncoming_t *pInMsg )
zclProcessInWriteCmd:
          CFI Block cfiBlock493 Using cfiCommon0
          CFI Function zclProcessInWriteCmd
        CODE
// 4138 {
        FUNCALL zclProcessInWriteCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteCmd, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteCmd, zclWriteAttrData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteCmd, zclWriteAttrDataUsingCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteCmd, zcl_SendWriteRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 39, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 39, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteCmd, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 34, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 34, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 10
        MOV     A,#-0xa
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
// 4139   zclWriteCmd_t *writeCmd;
// 4140   zclWriteRspCmd_t *writeRspCmd;
// 4141   uint8 sendRsp = FALSE;
        MOV     R7,#0x0
// 4142   uint8 j = 0;
        LCALL   ?Subroutine68 & 0xFFFF
// 4143   uint8 i;
// 4144 
// 4145   writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
??CrossCallReturnLabel_275:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine130_0 & 0xFFFF
// 4146   if ( pInMsg->hdr.commandID == ZCL_CMD_WRITE )
??CrossCallReturnLabel_248:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x2
        JNZ     ??zclProcessInWriteCmd_0
// 4147   {
// 4148     // We need to send a response back - allocate space for it
// 4149     writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
// 4150             + sizeof( zclWriteRspStatus_t ) * writeCmd->numAttr );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_42:
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
// 4151     if ( writeRspCmd == NULL )
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     ??zclProcessInWriteCmd_1
// 4152     {
// 4153       return FALSE; // EMBEDDED RETURN
        MOV     R1,#0x0
        LJMP    ??zclProcessInWriteCmd_2 & 0xFFFF
// 4154     }
// 4155 
// 4156     sendRsp = TRUE;
??zclProcessInWriteCmd_1:
        INC     R7
// 4157   }
// 4158 
// 4159   for ( i = 0; i < writeCmd->numAttr; i++ )
??zclProcessInWriteCmd_0:
        MOV     ?V0 + 6,R6
        SJMP    ??zclProcessInWriteCmd_3
// 4160   {
// 4161     zclAttrRec_t attrRec;
// 4162     zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 4163 
// 4164     if ( zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4165                          statusRec->attrID, &attrRec ) )
// 4166     {
// 4167       if ( statusRec->dataType == attrRec.attr.dataType )
// 4168       {
// 4169         uint8 status;
// 4170 
// 4171         // Write the new attribute value
// 4172         if ( attrRec.attr.dataPtr != NULL )
// 4173         {
// 4174           status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4175                                      &attrRec, statusRec );
// 4176         }
// 4177         else // Use CB
// 4178         {
// 4179           status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4180                                             &attrRec, statusRec->attrData );
// 4181         }
// 4182 
// 4183         // If successful, a write attribute status record shall NOT be generated
// 4184         if ( sendRsp && status != ZCL_STATUS_SUCCESS )
// 4185         {
// 4186           // Attribute is read only - move on to the next write attribute record
// 4187           writeRspCmd->attrList[j].status = status;
// 4188           writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4189         }
// 4190       }
// 4191       else
// 4192       {
// 4193         // Attribute data type is incorrect - move on to the next write attribute record
// 4194         if ( sendRsp )
// 4195         {
// 4196           writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
// 4197           writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4198         }
// 4199       }
// 4200     }
// 4201     else
// 4202     {
// 4203       // Attribute is not supported - move on to the next write attribute record
// 4204       if ( sendRsp )
??zclProcessInWriteCmd_4:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.0
        JNC     ??zclProcessInWriteCmd_5
// 4205       {
// 4206         writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
        MOV     DPL,?V0 + 14
        MOV     DPH,?V0 + 15
        MOV     A,#-0x7a
// 4207         writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4208       }
// 4209     }
??zclProcessInWriteCmd_6:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_10:
        MOV     DPL,?V0 + 12
        MOV     DPH,?V0 + 13
        LCALL   ??Subroutine130_0 & 0xFFFF
??CrossCallReturnLabel_249:
        INC     R6
??zclProcessInWriteCmd_5:
        INC     ?V0 + 6
??zclProcessInWriteCmd_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine95 & 0xFFFF
??CrossCallReturnLabel_134:
        MOV     A,?V0 + 6
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??zclProcessInWriteCmd_7 & 0xFFFF
        MOV     A,?V0 + 6
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_49:
        MOV     A,R6
        MOV     B,#0x3
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,?V0 + 0
        ADD     A,R0
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,DPL
        ADD     A,#0x2
        MOV     ?V0 + 12,A
        MOV     A,DPH
        ADDC    A,#0x0
        MOV     ?V0 + 13,A
        INC     DPTR
        MOV     ?V0 + 14,DPL
        MOV     ?V0 + 15,DPH
        LCALL   ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_319:
        ; Setup parameters for call to function zclFindAttrRec
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 10,DPL
        MOV     ?V0 + 11,DPH
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ??Subroutine134_0 & 0xFFFF
??CrossCallReturnLabel_259:
        LCALL   ??zclFindAttrRec?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,R1
        JNZ     $+5
        LJMP    ??zclProcessInWriteCmd_4 & 0xFFFF
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??zclProcessInWriteCmd_8
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ?Subroutine67 & 0xFFFF
??CrossCallReturnLabel_89:
        ADD     A,#0x14
        MOV     ?V0 + 8,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     ?V0 + 9,A
        MOV     A,R0
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_203:
        JZ      ??zclProcessInWriteCmd_9
        ; Setup parameters for call to function zclWriteAttrData
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??zclWriteAttrData?relay
        SJMP    ??zclProcessInWriteCmd_10
          CFI CFA_XSP16 add(XSP16, 34)
??zclProcessInWriteCmd_9:
        ; Setup parameters for call to function zclWriteAttrDataUsingCB
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??zclWriteAttrDataUsingCB?relay
??zclProcessInWriteCmd_10:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
        MOV     A,R1
        MOV     R0,A
        MOV     A,R7
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??zclProcessInWriteCmd_5 & 0xFFFF
        MOV     A,R0
        JNZ     $+5
        LJMP    ??zclProcessInWriteCmd_5 & 0xFFFF
        MOV     DPL,?V0 + 14
        MOV     DPH,?V0 + 15
        LJMP    ??zclProcessInWriteCmd_6 & 0xFFFF
??zclProcessInWriteCmd_8:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.0
        JC      $+5
        LJMP    ??zclProcessInWriteCmd_5 & 0xFFFF
        MOV     DPL,?V0 + 14
        MOV     DPH,?V0 + 15
        MOV     A,#-0x73
        LJMP    ??zclProcessInWriteCmd_6 & 0xFFFF
// 4210   } // for loop
// 4211 
// 4212   if ( sendRsp )
??zclProcessInWriteCmd_7:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.0
        JNC     ??zclProcessInWriteCmd_11
// 4213   {
// 4214     writeRspCmd->numAttr = j;
        MOV     A,R6
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    @DPTR,A
// 4215     if ( writeRspCmd->numAttr == 0 )
        JNZ     ??CrossCallReturnLabel_29
// 4216     {
// 4217       // Since all records were written successful, include a single status record
// 4218       // in the resonse command with the status field set to SUCCESS and the
// 4219       // attribute ID field omitted.
// 4220       writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
        LCALL   ?Subroutine29 & 0xFFFF
// 4221       writeRspCmd->numAttr = 1;
// 4222     }
// 4223 
// 4224     zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4225                       pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
// 4226                       true, pInMsg->hdr.transSeqNum );
??CrossCallReturnLabel_29:
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_40:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 35)
        MOV     ?V0 + 2,#0x1
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 36)
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_254:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 39)
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_33:
        LCALL   ??zcl_SendWriteRsp?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 34)
// 4227     zcl_mem_free( writeRspCmd );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_mem_free?relay
// 4228   }
// 4229 
// 4230   return TRUE;
??zclProcessInWriteCmd_11:
        MOV     R1,#0x1
??zclProcessInWriteCmd_2:
        MOV     A,#0xa
          CFI EndBlock cfiBlock493
        REQUIRE ?Subroutine4
        ; // Fall through to label ?Subroutine4
// 4231 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiBlock494 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 30)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock494
        REQUIRE ??Subroutine132_0
        ; // Fall through to label ??Subroutine132_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine132_0:
          CFI Block cfiBlock495 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x10
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock495

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine35:
          CFI Block cfiCond496 Using cfiCommon0
          CFI Function zclProcessInWriteCmd
          CFI Conditional ??CrossCallReturnLabel_254
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond497 Using cfiCommon0
          CFI (cfiCond497) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond497) Conditional ??CrossCallReturnLabel_255
          CFI (cfiCond497) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond497) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond497) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond497) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond497) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond497) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond497) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond497) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond497) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond497) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond497) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond497) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond497) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond497) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond497) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond497) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond497) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond497) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond497) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond497) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond497) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond497) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond497) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond497) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond497) CFA_SP SP+0
          CFI (cfiCond497) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker498 Using cfiCommon1
          CFI (cfiPicker498) NoFunction
          CFI (cfiPicker498) Picker
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
          CFI EndBlock cfiCond496
          CFI EndBlock cfiCond497
          CFI EndBlock cfiPicker498
        REQUIRE ??Subroutine133_0
        ; // Fall through to label ??Subroutine133_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine133_0:
          CFI Block cfiCond499 Using cfiCommon0
          CFI Function zclProcessInReadCmd
          CFI Conditional ??CrossCallReturnLabel_253
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond500 Using cfiCommon0
          CFI (cfiCond500) Function zclProcessInWriteCmd
          CFI (cfiCond500) Conditional ??CrossCallReturnLabel_254
          CFI (cfiCond500) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond500) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond500) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond500) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond500) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond500) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond500) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond500) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond500) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond500) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond500) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond500) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond500) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond500) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond500) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond500) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond500) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond500) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond500) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond500) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond500) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond500) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond500) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond500) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond500) CFA_SP SP+0
          CFI (cfiCond500) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond501 Using cfiCommon0
          CFI (cfiCond501) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond501) Conditional ??CrossCallReturnLabel_255
          CFI (cfiCond501) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond501) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond501) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond501) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond501) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond501) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond501) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond501) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond501) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond501) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond501) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond501) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond501) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond501) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond501) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond501) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond501) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond501) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond501) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond501) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond501) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond501) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond501) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond501) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond501) CFA_SP SP+0
          CFI (cfiCond501) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker502 Using cfiCommon1
          CFI (cfiPicker502) NoFunction
          CFI (cfiPicker502) Picker
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine97 & 0xFFFF
??CrossCallReturnLabel_257:
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        RET
          CFI EndBlock cfiCond499
          CFI EndBlock cfiCond500
          CFI EndBlock cfiCond501
          CFI EndBlock cfiPicker502

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine31:
          CFI Block cfiCond503 Using cfiCommon0
          CFI Function zclProcessInWriteUndividedCmd
          CFI Conditional ??CrossCallReturnLabel_260
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond504 Using cfiCommon0
          CFI (cfiCond504) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond504) Conditional ??CrossCallReturnLabel_261
          CFI (cfiCond504) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond504) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond504) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond504) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond504) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond504) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond504) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond504) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond504) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond504) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond504) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond504) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond504) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond504) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond504) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond504) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond504) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond504) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond504) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond504) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond504) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond504) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond504) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond504) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond504) CFA_SP SP+0
          CFI (cfiCond504) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiPicker505 Using cfiCommon1
          CFI (cfiPicker505) NoFunction
          CFI (cfiPicker505) Picker
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
          CFI EndBlock cfiCond503
          CFI EndBlock cfiCond504
          CFI EndBlock cfiPicker505
        REQUIRE ??Subroutine134_0
        ; // Fall through to label ??Subroutine134_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine134_0:
          CFI Block cfiCond506 Using cfiCommon0
          CFI Function zclProcessInReadCmd
          CFI Conditional ??CrossCallReturnLabel_258
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond507 Using cfiCommon0
          CFI (cfiCond507) Function zclProcessInWriteCmd
          CFI (cfiCond507) Conditional ??CrossCallReturnLabel_259
          CFI (cfiCond507) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond507) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond507) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond507) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond507) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond507) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond507) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond507) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond507) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond507) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond507) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond507) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond507) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond507) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond507) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond507) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond507) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond507) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond507) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond507) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond507) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond507) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond507) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond507) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond507) CFA_SP SP+0
          CFI (cfiCond507) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond508 Using cfiCommon0
          CFI (cfiCond508) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond508) Conditional ??CrossCallReturnLabel_260
          CFI (cfiCond508) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond508) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond508) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond508) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond508) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond508) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond508) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond508) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond508) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond508) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond508) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond508) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond508) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond508) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond508) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond508) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond508) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond508) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond508) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond508) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond508) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond508) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond508) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond508) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond508) CFA_SP SP+0
          CFI (cfiCond508) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond509 Using cfiCommon0
          CFI (cfiCond509) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond509) Conditional ??CrossCallReturnLabel_261
          CFI (cfiCond509) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond509) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond509) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond509) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond509) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond509) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond509) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond509) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond509) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond509) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond509) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond509) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond509) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond509) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond509) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond509) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond509) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond509) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond509) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond509) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond509) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond509) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond509) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond509) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond509) CFA_SP SP+0
          CFI (cfiCond509) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiPicker510 Using cfiCommon1
          CFI (cfiPicker510) NoFunction
          CFI (cfiPicker510) Picker
        LCALL   ??Subroutine145_0 & 0xFFFF
??CrossCallReturnLabel_334:
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine93 & 0xFFFF
??CrossCallReturnLabel_313:
        MOV     A,?V0 + 8
        LCALL   ??Subroutine146_0 & 0xFFFF
??CrossCallReturnLabel_346:
        MOV     A,?V0 + 9
        LCALL   ?Subroutine102 & 0xFFFF
??CrossCallReturnLabel_273:
        RET
          CFI EndBlock cfiCond506
          CFI EndBlock cfiCond507
          CFI EndBlock cfiCond508
          CFI EndBlock cfiCond509
          CFI EndBlock cfiPicker510
// 4232 
// 4233 /*********************************************************************
// 4234  * @fn      zclRevertWriteUndividedCmd
// 4235  *
// 4236  * @brief   Revert the "Profile" Write Undevided Command
// 4237  *
// 4238  * @param   pInMsg - incoming message to process
// 4239  * @param   curWriteRec - old data
// 4240  * @param   numAttr - number of attributes to be reverted
// 4241  *
// 4242  * @return  none
// 4243  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 4244 static void zclRevertWriteUndividedCmd( zclIncoming_t *pInMsg,
zclRevertWriteUndividedCmd:
          CFI Block cfiBlock511 Using cfiCommon0
          CFI Function zclRevertWriteUndividedCmd
        CODE
// 4245                                     zclWriteRec_t *curWriteRec, uint16 numAttr )
// 4246 {
        FUNCALL zclRevertWriteUndividedCmd, zclWriteAttrDataUsingCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclRevertWriteUndividedCmd, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclRevertWriteUndividedCmd, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 28, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 28, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclRevertWriteUndividedCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     ?V0 + 10,R4
        MOV     ?V0 + 11,R5
// 4247   uint8 i;
// 4248 
// 4249   for ( i = 0; i < numAttr; i++ )
        MOV     ?V0 + 0,#0x0
        MOV     A,#0x1c
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine141_0 & 0xFFFF
??CrossCallReturnLabel_318:
        SJMP    ??zclRevertWriteUndividedCmd_0
// 4250   {
// 4251     zclAttrRec_t attrRec;
// 4252     zclWriteRec_t *statusRec = &(curWriteRec[i]);
// 4253 
// 4254     if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4255                           statusRec->attrID, &attrRec ) )
// 4256     {
// 4257       break; // should never happen
// 4258     }
// 4259 
// 4260     if ( attrRec.attr.dataPtr != NULL )
// 4261     {
// 4262       // Just copy the old data back - no need to validate the data
// 4263       uint16 dataLen = zclGetAttrDataLength( attrRec.attr.dataType, statusRec->attrData );
// 4264       zcl_memcpy( attrRec.attr.dataPtr, statusRec->attrData, dataLen );
// 4265     }
// 4266     else // Use CB
// 4267     {
// 4268       // Write the old data back
// 4269       zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4270                                &attrRec, statusRec->attrData );
??zclRevertWriteUndividedCmd_1:
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ??Subroutine127_0 & 0xFFFF
// 4271     }
??CrossCallReturnLabel_223:
        ; Setup parameters for call to function zclWriteAttrDataUsingCB
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ?Subroutine104 & 0xFFFF
??CrossCallReturnLabel_145:
        LCALL   ??Subroutine136_0 & 0xFFFF
??CrossCallReturnLabel_264:
        LCALL   ??zclWriteAttrDataUsingCB?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
??zclRevertWriteUndividedCmd_2:
        INC     ?V0 + 0
??zclRevertWriteUndividedCmd_0:
        MOV     ?V0 + 4,?V0 + 0
        CLR     C
        MOV     A,?V0 + 4
        SUBB    A,?V0 + 8
        CLR     A
        SUBB    A,?V0 + 9
        JC      $+5
        LJMP    ??zclRevertWriteUndividedCmd_3 & 0xFFFF
        MOV     A,?V0 + 0
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,?V0 + 10
        ADD     A,R0
        MOV     R6,A
        MOV     A,?V0 + 11
        ADDC    A,R1
        MOV     R7,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ??Subroutine137_0 & 0xFFFF
??CrossCallReturnLabel_280:
        MOV     ?V0 + 4,R0
        ; Setup parameters for call to function zclFindAttrRec
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 6,DPL
        MOV     ?V0 + 7,DPH
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 30)
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine144_0 & 0xFFFF
??CrossCallReturnLabel_324:
        MOV     DPL,?V0 + 4
        LCALL   ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_307:
        MOV     A,?V0 + 4
        LCALL   ??Subroutine135_0 & 0xFFFF
??CrossCallReturnLabel_266:
        LCALL   ??zclFindAttrRec?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        MOV     A,R1
        JZ      ??zclRevertWriteUndividedCmd_3
        MOV     A,R6
        ADD     A,#0x3
        MOV     ?V0 + 4,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     DPL,?V0 + 4
        MOV     DPH,A
        LCALL   ??Subroutine140_0 & 0xFFFF
??CrossCallReturnLabel_301:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine127_0 & 0xFFFF
??CrossCallReturnLabel_224:
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??zclRevertWriteUndividedCmd_1 & 0xFFFF
        ; Setup parameters for call to function zclGetAttrDataLength
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??zclGetAttrDataLength?relay
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
        MOV     R4,?V0 + 6
        MOV     R5,?V0 + 7
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ?Subroutine54 & 0xFFFF
// 4272   } // for loop
??CrossCallReturnLabel_64:
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 28)
        LJMP    ??zclRevertWriteUndividedCmd_2 & 0xFFFF
// 4273 }
??zclRevertWriteUndividedCmd_3:
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock511
// 4274 
// 4275 /*********************************************************************
// 4276  * @fn      zclProcessInWriteUndividedCmd
// 4277  *
// 4278  * @brief   Process the "Profile" Write Undivided Command
// 4279  *
// 4280  * @param   pInMsg - incoming message to process
// 4281  *
// 4282  * @return  TRUE if command processed. FALSE, otherwise.
// 4283  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine73:
          CFI Block cfiCond512 Using cfiCommon0
          CFI Function zclProcessInReadCmd
          CFI Conditional ??CrossCallReturnLabel_268
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond513 Using cfiCommon0
          CFI (cfiCond513) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond513) Conditional ??CrossCallReturnLabel_269
          CFI (cfiCond513) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond513) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond513) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond513) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond513) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond513) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond513) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond513) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond513) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond513) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond513) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond513) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond513) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond513) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond513) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond513) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond513) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond513) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond513) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond513) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond513) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond513) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond513) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond513) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond513) CFA_SP SP+0
          CFI (cfiCond513) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond514 Using cfiCommon0
          CFI (cfiCond514) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond514) Conditional ??CrossCallReturnLabel_270
          CFI (cfiCond514) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond514) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond514) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond514) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond514) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond514) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond514) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond514) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond514) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond514) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond514) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond514) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond514) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond514) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond514) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond514) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond514) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond514) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond514) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond514) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond514) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond514) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond514) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond514) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond514) CFA_SP SP+0
          CFI (cfiCond514) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker515 Using cfiCommon1
          CFI (cfiPicker515) NoFunction
          CFI (cfiPicker515) Picker
        MOV     A,R0
          CFI EndBlock cfiCond512
          CFI EndBlock cfiCond513
          CFI EndBlock cfiCond514
          CFI EndBlock cfiPicker515
        REQUIRE ??Subroutine135_0
        ; // Fall through to label ??Subroutine135_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine135_0:
          CFI Block cfiCond516 Using cfiCommon0
          CFI Function zclRevertWriteUndividedCmd
          CFI Conditional ??CrossCallReturnLabel_266
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond517 Using cfiCommon0
          CFI (cfiCond517) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond517) Conditional ??CrossCallReturnLabel_267
          CFI (cfiCond517) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond517) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond517) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond517) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond517) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond517) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond517) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond517) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond517) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond517) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond517) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond517) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond517) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond517) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond517) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond517) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond517) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond517) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond517) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond517) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond517) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond517) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond517) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond517) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond517) CFA_SP SP+0
          CFI (cfiCond517) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond518 Using cfiCommon0
          CFI (cfiCond518) Function zclProcessInReadCmd
          CFI (cfiCond518) Conditional ??CrossCallReturnLabel_268
          CFI (cfiCond518) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond518) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond518) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond518) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond518) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond518) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond518) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond518) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond518) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond518) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond518) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond518) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond518) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond518) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond518) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond518) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond518) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond518) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond518) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond518) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond518) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond518) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond518) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond518) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond518) CFA_SP SP+0
          CFI (cfiCond518) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond519 Using cfiCommon0
          CFI (cfiCond519) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond519) Conditional ??CrossCallReturnLabel_269
          CFI (cfiCond519) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond519) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond519) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond519) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond519) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond519) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond519) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond519) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond519) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond519) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond519) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond519) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond519) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond519) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond519) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond519) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond519) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond519) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond519) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond519) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond519) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond519) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond519) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond519) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond519) CFA_SP SP+0
          CFI (cfiCond519) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond520 Using cfiCommon0
          CFI (cfiCond520) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond520) Conditional ??CrossCallReturnLabel_270
          CFI (cfiCond520) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond520) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond520) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond520) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond520) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond520) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond520) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond520) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond520) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond520) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond520) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond520) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond520) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond520) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond520) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond520) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond520) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond520) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond520) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond520) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond520) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond520) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond520) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond520) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond520) CFA_SP SP+0
          CFI (cfiCond520) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker521 Using cfiCommon1
          CFI (cfiPicker521) NoFunction
          CFI (cfiPicker521) Picker
        LCALL   ??Subroutine146_0 & 0xFFFF
??CrossCallReturnLabel_347:
        MOV     A,R1
          CFI EndBlock cfiCond516
          CFI EndBlock cfiCond517
          CFI EndBlock cfiCond518
          CFI EndBlock cfiCond519
          CFI EndBlock cfiCond520
          CFI EndBlock cfiPicker521
        REQUIRE ??Subroutine136_0
        ; // Fall through to label ??Subroutine136_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine136_0:
          CFI Block cfiCond522 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_262
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond523 Using cfiCommon0
          CFI (cfiCond523) Function zclProcessInReadCmd
          CFI (cfiCond523) Conditional ??CrossCallReturnLabel_263
          CFI (cfiCond523) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond523) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond523) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond523) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond523) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond523) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond523) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond523) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond523) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond523) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond523) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond523) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond523) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond523) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond523) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond523) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond523) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond523) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond523) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond523) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond523) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond523) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond523) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond523) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond523) CFA_SP SP+0
          CFI (cfiCond523) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond524 Using cfiCommon0
          CFI (cfiCond524) Function zclRevertWriteUndividedCmd
          CFI (cfiCond524) Conditional ??CrossCallReturnLabel_264
          CFI (cfiCond524) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond524) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond524) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond524) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond524) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond524) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond524) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond524) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond524) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond524) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond524) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond524) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond524) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond524) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond524) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond524) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond524) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond524) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond524) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond524) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond524) CFA_SP SP+0
          CFI (cfiCond524) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond525 Using cfiCommon0
          CFI (cfiCond525) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond525) Conditional ??CrossCallReturnLabel_265
          CFI (cfiCond525) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond525) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond525) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond525) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond525) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond525) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond525) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond525) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond525) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond525) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond525) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond525) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond525) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond525) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond525) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond525) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond525) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond525) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond525) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond525) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond525) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond525) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond525) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond525) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond525) CFA_SP SP+0
          CFI (cfiCond525) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond526 Using cfiCommon0
          CFI (cfiCond526) Function zclRevertWriteUndividedCmd
          CFI (cfiCond526) Conditional ??CrossCallReturnLabel_266
          CFI (cfiCond526) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond526) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond526) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond526) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond526) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond526) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond526) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond526) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond526) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond526) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond526) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond526) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond526) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond526) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond526) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond526) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond526) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond526) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond526) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond526) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond526) CFA_SP SP+0
          CFI (cfiCond526) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond527 Using cfiCommon0
          CFI (cfiCond527) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond527) Conditional ??CrossCallReturnLabel_267
          CFI (cfiCond527) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond527) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond527) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond527) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond527) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond527) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond527) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond527) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond527) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond527) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond527) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond527) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond527) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond527) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond527) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond527) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond527) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond527) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond527) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond527) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond527) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond527) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond527) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond527) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond527) CFA_SP SP+0
          CFI (cfiCond527) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond528 Using cfiCommon0
          CFI (cfiCond528) Function zclProcessInReadCmd
          CFI (cfiCond528) Conditional ??CrossCallReturnLabel_268
          CFI (cfiCond528) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond528) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond528) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond528) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond528) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond528) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond528) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond528) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond528) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond528) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond528) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond528) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond528) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond528) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond528) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond528) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond528) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond528) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond528) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond528) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond528) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond528) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond528) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond528) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond528) CFA_SP SP+0
          CFI (cfiCond528) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond529 Using cfiCommon0
          CFI (cfiCond529) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond529) Conditional ??CrossCallReturnLabel_269
          CFI (cfiCond529) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond529) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond529) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond529) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond529) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond529) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond529) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond529) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond529) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond529) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond529) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond529) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond529) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond529) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond529) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond529) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond529) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond529) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond529) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond529) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond529) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond529) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond529) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond529) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond529) CFA_SP SP+0
          CFI (cfiCond529) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond530 Using cfiCommon0
          CFI (cfiCond530) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond530) Conditional ??CrossCallReturnLabel_270
          CFI (cfiCond530) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond530) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond530) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond530) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond530) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond530) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond530) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond530) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond530) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond530) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond530) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond530) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond530) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond530) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond530) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond530) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond530) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond530) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond530) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond530) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond530) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond530) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond530) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond530) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond530) CFA_SP SP+0
          CFI (cfiCond530) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker531 Using cfiCommon1
          CFI (cfiPicker531) NoFunction
          CFI (cfiPicker531) Picker
        LCALL   ?Subroutine102 & 0xFFFF
??CrossCallReturnLabel_274:
        RET
          CFI EndBlock cfiCond522
          CFI EndBlock cfiCond523
          CFI EndBlock cfiCond524
          CFI EndBlock cfiCond525
          CFI EndBlock cfiCond526
          CFI EndBlock cfiCond527
          CFI EndBlock cfiCond528
          CFI EndBlock cfiCond529
          CFI EndBlock cfiCond530
          CFI EndBlock cfiPicker531

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine102:
          CFI Block cfiCond532 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_272, ??CrossCallReturnLabel_57
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond533 Using cfiCommon0
          CFI (cfiCond533) Function zcl_ProcessMessageMSG
          CFI (cfiCond533) Conditional ??CrossCallReturnLabel_272, ??CrossCallReturnLabel_58
          CFI (cfiCond533) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond533) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond533) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond533) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond533) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond533) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond533) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond533) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond533) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond533) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond533) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond533) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond533) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond533) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond533) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond533) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond533) CFA_SP SP+0
          CFI (cfiCond533) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond534 Using cfiCommon0
          CFI (cfiCond534) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond534) Conditional ??CrossCallReturnLabel_273, ??CrossCallReturnLabel_260
          CFI (cfiCond534) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond534) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond534) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond534) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond534) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond534) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond534) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond534) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond534) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond534) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond534) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond534) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond534) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond534) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond534) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond534) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond534) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond534) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond534) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond534) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond534) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond534) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond534) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond534) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond534) CFA_SP SP+0
          CFI (cfiCond534) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond535 Using cfiCommon0
          CFI (cfiCond535) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond535) Conditional ??CrossCallReturnLabel_273, ??CrossCallReturnLabel_261
          CFI (cfiCond535) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond535) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond535) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond535) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond535) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond535) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond535) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond535) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond535) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond535) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond535) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond535) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond535) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond535) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond535) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond535) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond535) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond535) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond535) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond535) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond535) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond535) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond535) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond535) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond535) CFA_SP SP+0
          CFI (cfiCond535) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond536 Using cfiCommon0
          CFI (cfiCond536) Function zclProcessInReadCmd
          CFI (cfiCond536) Conditional ??CrossCallReturnLabel_273, ??CrossCallReturnLabel_258
          CFI (cfiCond536) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond536) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond536) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond536) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond536) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond536) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond536) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond536) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond536) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond536) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond536) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond536) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond536) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond536) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond536) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond536) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond536) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond536) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond536) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond536) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond536) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond536) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond536) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond536) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond536) CFA_SP SP+0
          CFI (cfiCond536) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond537 Using cfiCommon0
          CFI (cfiCond537) Function zclProcessInWriteCmd
          CFI (cfiCond537) Conditional ??CrossCallReturnLabel_273, ??CrossCallReturnLabel_259
          CFI (cfiCond537) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond537) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond537) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond537) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond537) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond537) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond537) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond537) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond537) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond537) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond537) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond537) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond537) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond537) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond537) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond537) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond537) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond537) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond537) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond537) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond537) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond537) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond537) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond537) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond537) CFA_SP SP+0
          CFI (cfiCond537) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond538 Using cfiCommon0
          CFI (cfiCond538) Function zclProcessInReadCmd
          CFI (cfiCond538) Conditional ??CrossCallReturnLabel_274, ??CrossCallReturnLabel_268
          CFI (cfiCond538) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond538) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond538) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond538) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond538) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond538) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond538) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond538) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond538) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond538) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond538) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond538) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond538) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond538) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond538) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond538) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond538) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond538) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond538) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond538) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond538) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond538) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond538) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond538) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond538) CFA_SP SP+0
          CFI (cfiCond538) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond539 Using cfiCommon0
          CFI (cfiCond539) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond539) Conditional ??CrossCallReturnLabel_274, ??CrossCallReturnLabel_269
          CFI (cfiCond539) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond539) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond539) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond539) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond539) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond539) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond539) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond539) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond539) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond539) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond539) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond539) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond539) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond539) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond539) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond539) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond539) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond539) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond539) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond539) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond539) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond539) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond539) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond539) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond539) CFA_SP SP+0
          CFI (cfiCond539) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond540 Using cfiCommon0
          CFI (cfiCond540) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond540) Conditional ??CrossCallReturnLabel_274, ??CrossCallReturnLabel_270
          CFI (cfiCond540) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond540) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond540) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond540) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond540) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond540) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond540) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond540) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond540) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond540) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond540) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond540) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond540) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond540) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond540) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond540) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond540) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond540) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond540) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond540) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond540) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond540) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond540) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond540) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond540) CFA_SP SP+0
          CFI (cfiCond540) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond541 Using cfiCommon0
          CFI (cfiCond541) Function zclRevertWriteUndividedCmd
          CFI (cfiCond541) Conditional ??CrossCallReturnLabel_274, ??CrossCallReturnLabel_266
          CFI (cfiCond541) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond541) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond541) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond541) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond541) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond541) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond541) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond541) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond541) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond541) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond541) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond541) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond541) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond541) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond541) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond541) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond541) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond541) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond541) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond541) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond541) CFA_SP SP+0
          CFI (cfiCond541) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond542 Using cfiCommon0
          CFI (cfiCond542) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond542) Conditional ??CrossCallReturnLabel_274, ??CrossCallReturnLabel_267
          CFI (cfiCond542) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond542) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond542) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond542) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond542) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond542) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond542) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond542) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond542) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond542) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond542) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond542) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond542) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond542) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond542) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond542) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond542) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond542) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond542) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond542) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond542) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond542) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond542) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond542) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond542) CFA_SP SP+0
          CFI (cfiCond542) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond543 Using cfiCommon0
          CFI (cfiCond543) Function zcl_ProcessMessageMSG
          CFI (cfiCond543) Conditional ??CrossCallReturnLabel_274, ??CrossCallReturnLabel_262
          CFI (cfiCond543) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond543) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond543) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond543) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond543) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond543) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond543) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond543) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond543) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond543) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond543) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond543) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond543) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond543) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond543) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond543) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond543) CFA_SP SP+0
          CFI (cfiCond543) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond544 Using cfiCommon0
          CFI (cfiCond544) Function zclProcessInReadCmd
          CFI (cfiCond544) Conditional ??CrossCallReturnLabel_274, ??CrossCallReturnLabel_263
          CFI (cfiCond544) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond544) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond544) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond544) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond544) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond544) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond544) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond544) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond544) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond544) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond544) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond544) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond544) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond544) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond544) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond544) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond544) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond544) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond544) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond544) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond544) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond544) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond544) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond544) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond544) CFA_SP SP+0
          CFI (cfiCond544) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond545 Using cfiCommon0
          CFI (cfiCond545) Function zclRevertWriteUndividedCmd
          CFI (cfiCond545) Conditional ??CrossCallReturnLabel_274, ??CrossCallReturnLabel_264
          CFI (cfiCond545) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond545) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond545) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond545) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond545) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond545) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond545) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond545) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond545) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond545) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond545) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond545) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond545) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond545) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond545) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond545) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond545) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond545) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond545) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond545) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond545) CFA_SP SP+0
          CFI (cfiCond545) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond546 Using cfiCommon0
          CFI (cfiCond546) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond546) Conditional ??CrossCallReturnLabel_274, ??CrossCallReturnLabel_265
          CFI (cfiCond546) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond546) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond546) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond546) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond546) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond546) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond546) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond546) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond546) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond546) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond546) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond546) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond546) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond546) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond546) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond546) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond546) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond546) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond546) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond546) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond546) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond546) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond546) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond546) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond546) CFA_SP SP+0
          CFI (cfiCond546) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond547 Using cfiCommon0
          CFI (cfiCond547) Function zclProcessInWriteCmd
          CFI (cfiCond547) Conditional ??CrossCallReturnLabel_271, ??CrossCallReturnLabel_33
          CFI (cfiCond547) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond547) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond547) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond547) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond547) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond547) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond547) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond547) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond547) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond547) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond547) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond547) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond547) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond547) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond547) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond547) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond547) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond547) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond547) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond547) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond547) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond547) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond547) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond547) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond547) CFA_SP SP+0
          CFI (cfiCond547) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond548 Using cfiCommon0
          CFI (cfiCond548) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond548) Conditional ??CrossCallReturnLabel_271, ??CrossCallReturnLabel_34
          CFI (cfiCond548) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond548) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond548) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond548) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond548) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond548) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond548) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond548) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond548) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond548) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond548) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond548) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond548) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond548) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond548) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond548) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond548) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond548) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond548) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond548) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond548) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond548) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond548) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond548) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond548) CFA_SP SP+0
          CFI (cfiCond548) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiPicker549 Using cfiCommon1
          CFI (cfiPicker549) NoFunction
          CFI (cfiPicker549) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond532
          CFI EndBlock cfiCond533
          CFI EndBlock cfiCond534
          CFI EndBlock cfiCond535
          CFI EndBlock cfiCond536
          CFI EndBlock cfiCond537
          CFI EndBlock cfiCond538
          CFI EndBlock cfiCond539
          CFI EndBlock cfiCond540
          CFI EndBlock cfiCond541
          CFI EndBlock cfiCond542
          CFI EndBlock cfiCond543
          CFI EndBlock cfiCond544
          CFI EndBlock cfiCond545
          CFI EndBlock cfiCond546
          CFI EndBlock cfiCond547
          CFI EndBlock cfiCond548
          CFI EndBlock cfiPicker549

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine68:
          CFI Block cfiCond550 Using cfiCommon0
          CFI Function zclProcessInWriteCmd
          CFI Conditional ??CrossCallReturnLabel_275
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond551 Using cfiCommon0
          CFI (cfiCond551) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond551) Conditional ??CrossCallReturnLabel_276
          CFI (cfiCond551) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond551) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond551) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond551) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond551) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond551) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond551) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond551) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond551) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond551) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond551) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond551) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond551) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond551) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond551) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond551) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond551) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond551) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond551) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond551) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond551) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond551) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond551) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond551) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond551) CFA_SP SP+0
          CFI (cfiCond551) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker552 Using cfiCommon1
          CFI (cfiPicker552) NoFunction
          CFI (cfiPicker552) Picker
        MOV     R6,#0x0
        MOV     A,R2
        ADD     A,#0xc
        LCALL   ?Subroutine103 & 0xFFFF
          CFI EndBlock cfiCond550
          CFI EndBlock cfiCond551
          CFI EndBlock cfiPicker552
??CrossCallReturnLabel_192:
        REQUIRE ??Subroutine137_0
        ; // Fall through to label ??Subroutine137_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine137_0:
          CFI Block cfiCond553 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_277
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond554 Using cfiCommon0
          CFI (cfiCond554) Function zcl_ProcessMessageMSG
          CFI (cfiCond554) Conditional ??CrossCallReturnLabel_278
          CFI (cfiCond554) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond554) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond554) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond554) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond554) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond554) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond554) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond554) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond554) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond554) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond554) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond554) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond554) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond554) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond554) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond554) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond554) CFA_SP SP+0
          CFI (cfiCond554) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond555 Using cfiCommon0
          CFI (cfiCond555) Function zcl_ProcessMessageMSG
          CFI (cfiCond555) Conditional ??CrossCallReturnLabel_279
          CFI (cfiCond555) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond555) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond555) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond555) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond555) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond555) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond555) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond555) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond555) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond555) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond555) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond555) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond555) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond555) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond555) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond555) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond555) CFA_SP SP+0
          CFI (cfiCond555) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond556 Using cfiCommon0
          CFI (cfiCond556) Function zclRevertWriteUndividedCmd
          CFI (cfiCond556) Conditional ??CrossCallReturnLabel_280
          CFI (cfiCond556) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond556) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond556) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond556) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond556) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond556) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond556) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond556) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond556) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond556) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond556) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond556) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond556) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond556) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond556) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond556) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond556) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond556) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond556) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond556) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond556) CFA_SP SP+0
          CFI (cfiCond556) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond557 Using cfiCommon0
          CFI (cfiCond557) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond557) Conditional ??CrossCallReturnLabel_281
          CFI (cfiCond557) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond557) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond557) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond557) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond557) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond557) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond557) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond557) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond557) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond557) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond557) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond557) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond557) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond557) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond557) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond557) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond557) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond557) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond557) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond557) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond557) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond557) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond557) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond557) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond557) CFA_SP SP+0
          CFI (cfiCond557) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond558 Using cfiCommon0
          CFI (cfiCond558) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond558) Conditional ??CrossCallReturnLabel_282
          CFI (cfiCond558) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond558) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond558) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond558) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond558) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond558) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond558) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond558) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond558) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond558) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond558) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond558) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond558) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond558) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond558) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond558) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond558) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond558) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond558) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond558) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond558) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond558) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond558) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond558) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond558) CFA_SP SP+0
          CFI (cfiCond558) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond559 Using cfiCommon0
          CFI (cfiCond559) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond559) Conditional ??CrossCallReturnLabel_283
          CFI (cfiCond559) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond559) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond559) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond559) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond559) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond559) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond559) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond559) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond559) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond559) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond559) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond559) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond559) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond559) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond559) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond559) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond559) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond559) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond559) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond559) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond559) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond559) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond559) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond559) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond559) CFA_SP SP+0
          CFI (cfiCond559) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond560 Using cfiCommon0
          CFI (cfiCond560) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond560) Conditional ??CrossCallReturnLabel_284
          CFI (cfiCond560) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond560) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond560) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond560) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond560) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond560) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond560) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond560) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond560) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond560) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond560) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond560) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond560) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond560) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond560) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond560) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond560) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond560) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond560) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond560) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond560) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond560) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond560) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond560) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond560) CFA_SP SP+0
          CFI (cfiCond560) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond561 Using cfiCommon0
          CFI (cfiCond561) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond561) Conditional ??CrossCallReturnLabel_285
          CFI (cfiCond561) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond561) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond561) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond561) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond561) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond561) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond561) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond561) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond561) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond561) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond561) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond561) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond561) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond561) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond561) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond561) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond561) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond561) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond561) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond561) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond561) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond561) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond561) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond561) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond561) CFA_SP SP+0
          CFI (cfiCond561) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond562 Using cfiCommon0
          CFI (cfiCond562) Function zclProcessInWriteCmd
          CFI (cfiCond562) Conditional ??CrossCallReturnLabel_275
          CFI (cfiCond562) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond562) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond562) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond562) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond562) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond562) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond562) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond562) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond562) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond562) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond562) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond562) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond562) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond562) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond562) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond562) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond562) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond562) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond562) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond562) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond562) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond562) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond562) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond562) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond562) CFA_SP SP+0
          CFI (cfiCond562) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond563 Using cfiCommon0
          CFI (cfiCond563) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond563) Conditional ??CrossCallReturnLabel_276
          CFI (cfiCond563) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond563) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond563) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond563) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond563) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond563) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond563) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond563) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond563) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond563) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond563) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond563) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond563) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond563) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond563) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond563) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond563) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond563) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond563) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond563) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond563) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond563) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond563) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond563) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond563) CFA_SP SP+0
          CFI (cfiCond563) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker564 Using cfiCommon1
          CFI (cfiPicker564) NoFunction
          CFI (cfiPicker564) Picker
        LCALL   ?Subroutine99 & 0xFFFF
??CrossCallReturnLabel_291:
        RET
          CFI EndBlock cfiCond553
          CFI EndBlock cfiCond554
          CFI EndBlock cfiCond555
          CFI EndBlock cfiCond556
          CFI EndBlock cfiCond557
          CFI EndBlock cfiCond558
          CFI EndBlock cfiCond559
          CFI EndBlock cfiCond560
          CFI EndBlock cfiCond561
          CFI EndBlock cfiCond562
          CFI EndBlock cfiCond563
          CFI EndBlock cfiPicker564

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine58:
          CFI Block cfiCond565 Using cfiCommon0
          CFI Function zclRevertWriteUndividedCmd
          CFI Conditional ??CrossCallReturnLabel_307
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond566 Using cfiCommon0
          CFI (cfiCond566) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond566) Conditional ??CrossCallReturnLabel_308
          CFI (cfiCond566) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond566) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond566) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond566) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond566) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond566) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond566) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond566) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond566) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond566) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond566) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond566) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond566) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond566) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond566) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond566) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond566) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond566) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond566) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond566) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond566) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond566) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond566) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond566) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond566) CFA_SP SP+0
          CFI (cfiCond566) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond567 Using cfiCommon0
          CFI (cfiCond567) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond567) Conditional ??CrossCallReturnLabel_309
          CFI (cfiCond567) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond567) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond567) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond567) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond567) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond567) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond567) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond567) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond567) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond567) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond567) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond567) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond567) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond567) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond567) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond567) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond567) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond567) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond567) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond567) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond567) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond567) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond567) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond567) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond567) CFA_SP SP+0
          CFI (cfiCond567) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker568 Using cfiCommon1
          CFI (cfiPicker568) NoFunction
          CFI (cfiPicker568) Picker
        MOV     DPH,R1
          CFI EndBlock cfiCond565
          CFI EndBlock cfiCond566
          CFI EndBlock cfiCond567
          CFI EndBlock cfiPicker568
        REQUIRE ??Subroutine138_0
        ; // Fall through to label ??Subroutine138_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine138_0:
          CFI Block cfiCond569 Using cfiCommon0
          CFI Function zcl_SendCommand
          CFI Conditional ??CrossCallReturnLabel_304
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond570 Using cfiCommon0
          CFI (cfiCond570) Function zclGetAuthorizeCB
          CFI (cfiCond570) Conditional ??CrossCallReturnLabel_305
          CFI (cfiCond570) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond570) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond570) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond570) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond570) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond570) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond570) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond570) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond570) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond570) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond570) CFA_SP SP+0
          CFI (cfiCond570) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond571 Using cfiCommon0
          CFI (cfiCond571) Function zclWriteAttrData
          CFI (cfiCond571) Conditional ??CrossCallReturnLabel_306
          CFI (cfiCond571) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond571) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond571) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond571) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond571) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond571) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond571) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond571) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond571) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond571) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond571) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond571) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond571) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond571) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond571) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond571) CFA_SP SP+0
          CFI (cfiCond571) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond572 Using cfiCommon0
          CFI (cfiCond572) Function zclRevertWriteUndividedCmd
          CFI (cfiCond572) Conditional ??CrossCallReturnLabel_307
          CFI (cfiCond572) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond572) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond572) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond572) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond572) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond572) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond572) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond572) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond572) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond572) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond572) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond572) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond572) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond572) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond572) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond572) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond572) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond572) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond572) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond572) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond572) CFA_SP SP+0
          CFI (cfiCond572) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond573 Using cfiCommon0
          CFI (cfiCond573) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond573) Conditional ??CrossCallReturnLabel_308
          CFI (cfiCond573) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond573) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond573) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond573) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond573) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond573) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond573) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond573) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond573) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond573) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond573) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond573) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond573) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond573) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond573) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond573) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond573) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond573) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond573) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond573) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond573) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond573) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond573) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond573) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond573) CFA_SP SP+0
          CFI (cfiCond573) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond574 Using cfiCommon0
          CFI (cfiCond574) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond574) Conditional ??CrossCallReturnLabel_309
          CFI (cfiCond574) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond574) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond574) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond574) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond574) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond574) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond574) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond574) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond574) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond574) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond574) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond574) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond574) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond574) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond574) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond574) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond574) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond574) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond574) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond574) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond574) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond574) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond574) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond574) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond574) CFA_SP SP+0
          CFI (cfiCond574) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker575 Using cfiCommon1
          CFI (cfiPicker575) NoFunction
          CFI (cfiPicker575) Picker
        INC     DPTR
          CFI EndBlock cfiCond569
          CFI EndBlock cfiCond570
          CFI EndBlock cfiCond571
          CFI EndBlock cfiCond572
          CFI EndBlock cfiCond573
          CFI EndBlock cfiCond574
          CFI EndBlock cfiPicker575
        REQUIRE ??Subroutine139_0
        ; // Fall through to label ??Subroutine139_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine139_0:
          CFI Block cfiCond576 Using cfiCommon0
          CFI Function zcl_SendWriteRequest
          CFI Conditional ??CrossCallReturnLabel_302
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond577 Using cfiCommon0
          CFI (cfiCond577) Function zclGetReadWriteCB
          CFI (cfiCond577) Conditional ??CrossCallReturnLabel_303
          CFI (cfiCond577) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond577) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond577) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond577) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond577) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond577) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond577) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond577) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond577) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond577) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond577) CFA_SP SP+0
          CFI (cfiCond577) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond578 Using cfiCommon0
          CFI (cfiCond578) Function zcl_SendCommand
          CFI (cfiCond578) Conditional ??CrossCallReturnLabel_304
          CFI (cfiCond578) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond578) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond578) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond578) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond578) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond578) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond578) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond578) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond578) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond578) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond578) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond578) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond578) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond578) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond578) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond578) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond578) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond578) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond578) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond578) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond578) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond578) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond578) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond578) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond578) CFA_SP SP+0
          CFI (cfiCond578) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond579 Using cfiCommon0
          CFI (cfiCond579) Function zclGetAuthorizeCB
          CFI (cfiCond579) Conditional ??CrossCallReturnLabel_305
          CFI (cfiCond579) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond579) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond579) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond579) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond579) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond579) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond579) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond579) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond579) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond579) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond579) CFA_SP SP+0
          CFI (cfiCond579) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond580 Using cfiCommon0
          CFI (cfiCond580) Function zclWriteAttrData
          CFI (cfiCond580) Conditional ??CrossCallReturnLabel_306
          CFI (cfiCond580) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond580) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond580) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond580) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond580) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond580) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond580) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond580) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond580) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond580) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond580) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond580) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond580) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond580) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond580) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond580) CFA_SP SP+0
          CFI (cfiCond580) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond581 Using cfiCommon0
          CFI (cfiCond581) Function zclRevertWriteUndividedCmd
          CFI (cfiCond581) Conditional ??CrossCallReturnLabel_307
          CFI (cfiCond581) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond581) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond581) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond581) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond581) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond581) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond581) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond581) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond581) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond581) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond581) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond581) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond581) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond581) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond581) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond581) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond581) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond581) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond581) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond581) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond581) CFA_SP SP+0
          CFI (cfiCond581) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond582 Using cfiCommon0
          CFI (cfiCond582) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond582) Conditional ??CrossCallReturnLabel_308
          CFI (cfiCond582) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond582) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond582) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond582) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond582) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond582) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond582) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond582) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond582) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond582) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond582) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond582) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond582) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond582) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond582) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond582) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond582) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond582) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond582) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond582) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond582) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond582) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond582) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond582) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond582) CFA_SP SP+0
          CFI (cfiCond582) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond583 Using cfiCommon0
          CFI (cfiCond583) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond583) Conditional ??CrossCallReturnLabel_309
          CFI (cfiCond583) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond583) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond583) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond583) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond583) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond583) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond583) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond583) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond583) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond583) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond583) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond583) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond583) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond583) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond583) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond583) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond583) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond583) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond583) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond583) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond583) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond583) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond583) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond583) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond583) CFA_SP SP+0
          CFI (cfiCond583) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker584 Using cfiCommon1
          CFI (cfiPicker584) NoFunction
          CFI (cfiPicker584) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond576
          CFI EndBlock cfiCond577
          CFI EndBlock cfiCond578
          CFI EndBlock cfiCond579
          CFI EndBlock cfiCond580
          CFI EndBlock cfiCond581
          CFI EndBlock cfiCond582
          CFI EndBlock cfiCond583
          CFI EndBlock cfiPicker584
        REQUIRE ??Subroutine140_0
        ; // Fall through to label ??Subroutine140_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine140_0:
          CFI Block cfiCond585 Using cfiCommon0
          CFI Function zcl_getRawAFMsg
          CFI Conditional ??CrossCallReturnLabel_292
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI Block cfiCond586 Using cfiCommon0
          CFI (cfiCond586) Function zcl_SendReadRsp
          CFI (cfiCond586) Conditional ??CrossCallReturnLabel_293
          CFI (cfiCond586) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond586) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond586) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond586) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond586) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond586) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond586) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond586) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond586) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond586) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond586) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond586) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond586) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond586) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond586) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond586) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond586) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond586) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond586) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond586) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond586) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond586) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond586) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond586) CFA_SP SP+0
          CFI (cfiCond586) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond587 Using cfiCommon0
          CFI (cfiCond587) Function zcl_ProcessMessageMSG
          CFI (cfiCond587) Conditional ??CrossCallReturnLabel_294
          CFI (cfiCond587) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond587) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond587) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond587) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond587) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond587) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond587) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond587) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond587) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond587) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond587) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond587) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond587) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond587) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond587) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond587) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond587) CFA_SP SP+0
          CFI (cfiCond587) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond588 Using cfiCommon0
          CFI (cfiCond588) Function zcl_ProcessMessageMSG
          CFI (cfiCond588) Conditional ??CrossCallReturnLabel_295
          CFI (cfiCond588) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond588) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond588) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond588) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond588) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond588) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond588) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond588) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond588) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond588) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond588) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond588) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond588) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond588) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond588) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond588) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond588) CFA_SP SP+0
          CFI (cfiCond588) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond589 Using cfiCommon0
          CFI (cfiCond589) Function zcl_ProcessMessageMSG
          CFI (cfiCond589) Conditional ??CrossCallReturnLabel_296
          CFI (cfiCond589) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond589) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond589) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond589) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond589) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond589) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond589) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond589) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond589) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond589) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond589) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond589) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond589) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond589) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond589) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond589) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond589) CFA_SP SP+0
          CFI (cfiCond589) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond590 Using cfiCommon0
          CFI (cfiCond590) Function zcl_ProcessMessageMSG
          CFI (cfiCond590) Conditional ??CrossCallReturnLabel_297
          CFI (cfiCond590) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond590) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond590) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond590) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond590) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond590) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond590) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond590) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond590) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond590) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond590) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond590) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond590) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond590) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond590) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond590) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond590) CFA_SP SP+0
          CFI (cfiCond590) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond591 Using cfiCommon0
          CFI (cfiCond591) Function zclGetAttrDataLengthUsingCB
          CFI (cfiCond591) Conditional ??CrossCallReturnLabel_298
          CFI (cfiCond591) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond591) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond591) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond591) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond591) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond591) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond591) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond591) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond591) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond591) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond591) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond591) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond591) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond591) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond591) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond591) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond591) CFA_SP SP+0
          CFI (cfiCond591) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond592 Using cfiCommon0
          CFI (cfiCond592) Function zclWriteAttrData
          CFI (cfiCond592) Conditional ??CrossCallReturnLabel_299
          CFI (cfiCond592) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond592) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond592) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond592) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond592) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond592) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond592) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond592) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond592) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond592) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond592) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond592) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond592) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond592) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond592) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond592) CFA_SP SP+0
          CFI (cfiCond592) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond593 Using cfiCommon0
          CFI (cfiCond593) Function zclWriteAttrDataUsingCB
          CFI (cfiCond593) Conditional ??CrossCallReturnLabel_300
          CFI (cfiCond593) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond593) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond593) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond593) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond593) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond593) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond593) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond593) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond593) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond593) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond593) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond593) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond593) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond593) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond593) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond593) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond593) CFA_SP SP+0
          CFI (cfiCond593) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond594 Using cfiCommon0
          CFI (cfiCond594) Function zclRevertWriteUndividedCmd
          CFI (cfiCond594) Conditional ??CrossCallReturnLabel_301
          CFI (cfiCond594) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond594) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond594) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond594) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond594) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond594) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond594) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond594) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond594) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond594) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond594) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond594) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond594) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond594) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond594) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond594) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond594) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond594) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond594) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond594) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond594) CFA_SP SP+0
          CFI (cfiCond594) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond595 Using cfiCommon0
          CFI (cfiCond595) Function zcl_SendWriteRequest
          CFI (cfiCond595) Conditional ??CrossCallReturnLabel_302
          CFI (cfiCond595) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond595) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond595) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond595) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond595) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond595) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond595) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond595) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond595) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond595) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond595) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond595) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond595) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond595) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond595) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond595) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond595) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond595) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond595) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond595) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond595) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond595) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond595) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond595) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond595) CFA_SP SP+0
          CFI (cfiCond595) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond596 Using cfiCommon0
          CFI (cfiCond596) Function zclGetReadWriteCB
          CFI (cfiCond596) Conditional ??CrossCallReturnLabel_303
          CFI (cfiCond596) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond596) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond596) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond596) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond596) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond596) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond596) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond596) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond596) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond596) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond596) CFA_SP SP+0
          CFI (cfiCond596) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond597 Using cfiCommon0
          CFI (cfiCond597) Function zcl_SendCommand
          CFI (cfiCond597) Conditional ??CrossCallReturnLabel_304
          CFI (cfiCond597) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond597) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond597) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond597) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond597) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond597) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond597) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond597) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond597) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond597) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond597) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond597) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond597) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond597) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond597) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond597) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond597) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond597) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond597) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond597) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond597) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond597) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond597) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond597) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond597) CFA_SP SP+0
          CFI (cfiCond597) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond598 Using cfiCommon0
          CFI (cfiCond598) Function zclGetAuthorizeCB
          CFI (cfiCond598) Conditional ??CrossCallReturnLabel_305
          CFI (cfiCond598) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond598) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond598) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond598) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond598) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond598) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond598) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond598) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond598) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond598) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond598) CFA_SP SP+0
          CFI (cfiCond598) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond599 Using cfiCommon0
          CFI (cfiCond599) Function zclWriteAttrData
          CFI (cfiCond599) Conditional ??CrossCallReturnLabel_306
          CFI (cfiCond599) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond599) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond599) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond599) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond599) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond599) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond599) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond599) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond599) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond599) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond599) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond599) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond599) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond599) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond599) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond599) CFA_SP SP+0
          CFI (cfiCond599) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond600 Using cfiCommon0
          CFI (cfiCond600) Function zclRevertWriteUndividedCmd
          CFI (cfiCond600) Conditional ??CrossCallReturnLabel_307
          CFI (cfiCond600) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond600) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond600) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond600) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond600) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond600) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond600) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond600) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond600) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond600) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond600) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond600) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond600) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond600) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond600) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond600) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond600) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond600) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond600) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond600) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond600) CFA_SP SP+0
          CFI (cfiCond600) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond601 Using cfiCommon0
          CFI (cfiCond601) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond601) Conditional ??CrossCallReturnLabel_308
          CFI (cfiCond601) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond601) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond601) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond601) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond601) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond601) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond601) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond601) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond601) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond601) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond601) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond601) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond601) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond601) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond601) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond601) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond601) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond601) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond601) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond601) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond601) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond601) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond601) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond601) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond601) CFA_SP SP+0
          CFI (cfiCond601) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond602 Using cfiCommon0
          CFI (cfiCond602) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond602) Conditional ??CrossCallReturnLabel_309
          CFI (cfiCond602) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond602) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond602) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond602) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond602) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond602) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond602) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond602) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond602) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond602) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond602) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond602) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond602) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond602) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond602) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond602) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond602) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond602) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond602) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond602) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond602) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond602) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond602) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond602) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond602) CFA_SP SP+0
          CFI (cfiCond602) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker603 Using cfiCommon1
          CFI (cfiPicker603) NoFunction
          CFI (cfiPicker603) Picker
        LCALL   ?Subroutine93 & 0xFFFF
??CrossCallReturnLabel_314:
        RET
          CFI EndBlock cfiCond585
          CFI EndBlock cfiCond586
          CFI EndBlock cfiCond587
          CFI EndBlock cfiCond588
          CFI EndBlock cfiCond589
          CFI EndBlock cfiCond590
          CFI EndBlock cfiCond591
          CFI EndBlock cfiCond592
          CFI EndBlock cfiCond593
          CFI EndBlock cfiCond594
          CFI EndBlock cfiCond595
          CFI EndBlock cfiCond596
          CFI EndBlock cfiCond597
          CFI EndBlock cfiCond598
          CFI EndBlock cfiCond599
          CFI EndBlock cfiCond600
          CFI EndBlock cfiCond601
          CFI EndBlock cfiCond602
          CFI EndBlock cfiPicker603

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine93:
          CFI Block cfiCond604 Using cfiCommon0
          CFI Function zcl_registerPlugin
          CFI Conditional ??CrossCallReturnLabel_312, ??CrossCallReturnLabel_162
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond605 Using cfiCommon0
          CFI (cfiCond605) Function zcl_registerAttrList
          CFI (cfiCond605) Conditional ??CrossCallReturnLabel_312, ??CrossCallReturnLabel_163
          CFI (cfiCond605) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond605) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond605) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond605) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond605) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond605) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond605) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond605) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond605) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond605) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond605) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond605) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond605) CFA_SP SP+0
          CFI (cfiCond605) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond606 Using cfiCommon0
          CFI (cfiCond606) Function zcl_registerClusterOptionList
          CFI (cfiCond606) Conditional ??CrossCallReturnLabel_312, ??CrossCallReturnLabel_164
          CFI (cfiCond606) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond606) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond606) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond606) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond606) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond606) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond606) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond606) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond606) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond606) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond606) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond606) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond606) CFA_SP SP+0
          CFI (cfiCond606) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond607 Using cfiCommon0
          CFI (cfiCond607) Function zcl_registerPlugin
          CFI (cfiCond607) Conditional ??CrossCallReturnLabel_312, ??CrossCallReturnLabel_166
          CFI (cfiCond607) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond607) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond607) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond607) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond607) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond607) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond607) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond607) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond607) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond607) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond607) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond607) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond607) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond607) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond607) CFA_SP SP+0
          CFI (cfiCond607) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond608 Using cfiCommon0
          CFI (cfiCond608) Function zcl_registerAttrList
          CFI (cfiCond608) Conditional ??CrossCallReturnLabel_312, ??CrossCallReturnLabel_167
          CFI (cfiCond608) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond608) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond608) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond608) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond608) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond608) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond608) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond608) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond608) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond608) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond608) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond608) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond608) CFA_SP SP+0
          CFI (cfiCond608) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond609 Using cfiCommon0
          CFI (cfiCond609) Function zcl_registerClusterOptionList
          CFI (cfiCond609) Conditional ??CrossCallReturnLabel_312, ??CrossCallReturnLabel_168
          CFI (cfiCond609) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond609) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond609) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond609) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond609) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond609) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond609) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond609) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond609) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond609) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond609) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond609) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond609) CFA_SP SP+0
          CFI (cfiCond609) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond610 Using cfiCommon0
          CFI (cfiCond610) Function zcl_SendReadRsp
          CFI (cfiCond610) Conditional ??CrossCallReturnLabel_312, ??CrossCallReturnLabel_169
          CFI (cfiCond610) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond610) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond610) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond610) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond610) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond610) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond610) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond610) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond610) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond610) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond610) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond610) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond610) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond610) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond610) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond610) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond610) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond610) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond610) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond610) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond610) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond610) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond610) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond610) CFA_SP SP+0
          CFI (cfiCond610) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond611 Using cfiCommon0
          CFI (cfiCond611) Function zclFindAttrRecsList
          CFI (cfiCond611) Conditional ??CrossCallReturnLabel_312, ??CrossCallReturnLabel_165
          CFI (cfiCond611) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond611) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond611) CFA_SP SP+-5
          CFI Block cfiCond612 Using cfiCommon0
          CFI (cfiCond612) Function zclReadAttrData
          CFI (cfiCond612) Conditional ??CrossCallReturnLabel_312, ??CrossCallReturnLabel_170
          CFI (cfiCond612) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond612) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond612) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond612) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond612) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond612) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond612) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond612) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond612) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond612) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond612) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond612) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond612) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond612) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond612) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond612) CFA_SP SP+0
          CFI (cfiCond612) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond613 Using cfiCommon0
          CFI (cfiCond613) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond613) Conditional ??CrossCallReturnLabel_312, ??CrossCallReturnLabel_171
          CFI (cfiCond613) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond613) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond613) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond613) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond613) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond613) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond613) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond613) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond613) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond613) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond613) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond613) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond613) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond613) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond613) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond613) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond613) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond613) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond613) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond613) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond613) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond613) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond613) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond613) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond613) CFA_SP SP+0
          CFI (cfiCond613) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond614 Using cfiCommon0
          CFI (cfiCond614) Function zcl_ProcessMessageMSG
          CFI (cfiCond614) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_37
          CFI (cfiCond614) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond614) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond614) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond614) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond614) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond614) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond614) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond614) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond614) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond614) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond614) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond614) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond614) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond614) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond614) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond614) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond614) CFA_SP SP+0
          CFI (cfiCond614) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond615 Using cfiCommon0
          CFI (cfiCond615) Function zcl_ProcessMessageMSG
          CFI (cfiCond615) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_38
          CFI (cfiCond615) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond615) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond615) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond615) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond615) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond615) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond615) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond615) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond615) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond615) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond615) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond615) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond615) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond615) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond615) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond615) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond615) CFA_SP SP+0
          CFI (cfiCond615) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond616 Using cfiCommon0
          CFI (cfiCond616) Function zcl_ProcessMessageMSG
          CFI (cfiCond616) Conditional ??CrossCallReturnLabel_310, ??CrossCallReturnLabel_39
          CFI (cfiCond616) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond616) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond616) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond616) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond616) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond616) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond616) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond616) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond616) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond616) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond616) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond616) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond616) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond616) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond616) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond616) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond616) CFA_SP SP+0
          CFI (cfiCond616) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond617 Using cfiCommon0
          CFI (cfiCond617) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond617) Conditional ??CrossCallReturnLabel_313, ??CrossCallReturnLabel_260
          CFI (cfiCond617) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond617) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond617) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond617) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond617) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond617) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond617) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond617) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond617) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond617) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond617) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond617) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond617) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond617) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond617) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond617) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond617) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond617) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond617) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond617) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond617) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond617) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond617) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond617) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond617) CFA_SP SP+0
          CFI (cfiCond617) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond618 Using cfiCommon0
          CFI (cfiCond618) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond618) Conditional ??CrossCallReturnLabel_313, ??CrossCallReturnLabel_261
          CFI (cfiCond618) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond618) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond618) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond618) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond618) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond618) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond618) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond618) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond618) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond618) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond618) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond618) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond618) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond618) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond618) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond618) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond618) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond618) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond618) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond618) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond618) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond618) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond618) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond618) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond618) CFA_SP SP+0
          CFI (cfiCond618) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond619 Using cfiCommon0
          CFI (cfiCond619) Function zclProcessInReadCmd
          CFI (cfiCond619) Conditional ??CrossCallReturnLabel_313, ??CrossCallReturnLabel_258
          CFI (cfiCond619) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond619) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond619) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond619) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond619) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond619) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond619) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond619) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond619) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond619) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond619) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond619) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond619) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond619) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond619) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond619) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond619) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond619) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond619) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond619) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond619) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond619) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond619) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond619) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond619) CFA_SP SP+0
          CFI (cfiCond619) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond620 Using cfiCommon0
          CFI (cfiCond620) Function zclProcessInWriteCmd
          CFI (cfiCond620) Conditional ??CrossCallReturnLabel_313, ??CrossCallReturnLabel_259
          CFI (cfiCond620) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond620) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond620) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond620) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond620) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond620) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond620) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond620) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond620) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond620) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond620) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond620) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond620) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond620) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond620) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond620) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond620) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond620) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond620) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond620) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond620) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond620) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond620) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond620) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond620) CFA_SP SP+0
          CFI (cfiCond620) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond621 Using cfiCommon0
          CFI (cfiCond621) Function zclRevertWriteUndividedCmd
          CFI (cfiCond621) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_307
          CFI (cfiCond621) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond621) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond621) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond621) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond621) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond621) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond621) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond621) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond621) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond621) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond621) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond621) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond621) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond621) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond621) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond621) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond621) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond621) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond621) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond621) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond621) CFA_SP SP+0
          CFI (cfiCond621) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond622 Using cfiCommon0
          CFI (cfiCond622) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond622) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_308
          CFI (cfiCond622) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond622) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond622) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond622) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond622) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond622) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond622) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond622) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond622) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond622) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond622) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond622) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond622) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond622) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond622) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond622) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond622) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond622) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond622) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond622) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond622) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond622) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond622) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond622) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond622) CFA_SP SP+0
          CFI (cfiCond622) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond623 Using cfiCommon0
          CFI (cfiCond623) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond623) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_309
          CFI (cfiCond623) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond623) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond623) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond623) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond623) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond623) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond623) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond623) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond623) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond623) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond623) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond623) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond623) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond623) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond623) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond623) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond623) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond623) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond623) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond623) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond623) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond623) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond623) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond623) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond623) CFA_SP SP+0
          CFI (cfiCond623) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond624 Using cfiCommon0
          CFI (cfiCond624) Function zcl_SendCommand
          CFI (cfiCond624) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_304
          CFI (cfiCond624) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond624) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond624) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond624) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond624) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond624) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond624) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond624) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond624) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond624) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond624) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond624) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond624) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond624) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond624) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond624) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond624) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond624) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond624) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond624) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond624) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond624) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond624) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond624) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond624) CFA_SP SP+0
          CFI (cfiCond624) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond625 Using cfiCommon0
          CFI (cfiCond625) Function zclGetAuthorizeCB
          CFI (cfiCond625) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_305
          CFI (cfiCond625) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond625) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond625) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond625) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond625) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond625) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond625) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond625) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond625) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond625) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond625) CFA_SP SP+0
          CFI (cfiCond625) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond626 Using cfiCommon0
          CFI (cfiCond626) Function zclWriteAttrData
          CFI (cfiCond626) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_306
          CFI (cfiCond626) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond626) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond626) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond626) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond626) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond626) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond626) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond626) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond626) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond626) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond626) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond626) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond626) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond626) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond626) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond626) CFA_SP SP+0
          CFI (cfiCond626) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond627 Using cfiCommon0
          CFI (cfiCond627) Function zcl_SendWriteRequest
          CFI (cfiCond627) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_302
          CFI (cfiCond627) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond627) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond627) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond627) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond627) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond627) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond627) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond627) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond627) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond627) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond627) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond627) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond627) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond627) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond627) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond627) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond627) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond627) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond627) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond627) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond627) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond627) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond627) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond627) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond627) CFA_SP SP+0
          CFI (cfiCond627) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond628 Using cfiCommon0
          CFI (cfiCond628) Function zclGetReadWriteCB
          CFI (cfiCond628) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_303
          CFI (cfiCond628) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond628) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond628) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond628) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond628) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond628) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond628) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond628) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond628) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond628) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond628) CFA_SP SP+0
          CFI (cfiCond628) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond629 Using cfiCommon0
          CFI (cfiCond629) Function zcl_getRawAFMsg
          CFI (cfiCond629) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_292
          CFI (cfiCond629) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond629) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond629) CFA_SP SP+-5
          CFI Block cfiCond630 Using cfiCommon0
          CFI (cfiCond630) Function zcl_SendReadRsp
          CFI (cfiCond630) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_293
          CFI (cfiCond630) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond630) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond630) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond630) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond630) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond630) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond630) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond630) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond630) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond630) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond630) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond630) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond630) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond630) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond630) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond630) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond630) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond630) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond630) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond630) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond630) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond630) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond630) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond630) CFA_SP SP+0
          CFI (cfiCond630) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond631 Using cfiCommon0
          CFI (cfiCond631) Function zcl_ProcessMessageMSG
          CFI (cfiCond631) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_294
          CFI (cfiCond631) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond631) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond631) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond631) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond631) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond631) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond631) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond631) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond631) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond631) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond631) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond631) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond631) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond631) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond631) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond631) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond631) CFA_SP SP+0
          CFI (cfiCond631) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond632 Using cfiCommon0
          CFI (cfiCond632) Function zcl_ProcessMessageMSG
          CFI (cfiCond632) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_295
          CFI (cfiCond632) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond632) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond632) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond632) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond632) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond632) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond632) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond632) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond632) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond632) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond632) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond632) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond632) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond632) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond632) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond632) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond632) CFA_SP SP+0
          CFI (cfiCond632) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond633 Using cfiCommon0
          CFI (cfiCond633) Function zcl_ProcessMessageMSG
          CFI (cfiCond633) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_296
          CFI (cfiCond633) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond633) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond633) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond633) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond633) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond633) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond633) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond633) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond633) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond633) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond633) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond633) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond633) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond633) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond633) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond633) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond633) CFA_SP SP+0
          CFI (cfiCond633) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond634 Using cfiCommon0
          CFI (cfiCond634) Function zcl_ProcessMessageMSG
          CFI (cfiCond634) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_297
          CFI (cfiCond634) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond634) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond634) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond634) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond634) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond634) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond634) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond634) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond634) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond634) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond634) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond634) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond634) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond634) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond634) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond634) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond634) CFA_SP SP+0
          CFI (cfiCond634) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond635 Using cfiCommon0
          CFI (cfiCond635) Function zclGetAttrDataLengthUsingCB
          CFI (cfiCond635) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_298
          CFI (cfiCond635) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond635) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond635) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond635) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond635) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond635) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond635) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond635) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond635) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond635) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond635) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond635) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond635) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond635) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond635) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond635) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond635) CFA_SP SP+0
          CFI (cfiCond635) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond636 Using cfiCommon0
          CFI (cfiCond636) Function zclWriteAttrData
          CFI (cfiCond636) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_299
          CFI (cfiCond636) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond636) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond636) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond636) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond636) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond636) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond636) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond636) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond636) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond636) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond636) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond636) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond636) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond636) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond636) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond636) CFA_SP SP+0
          CFI (cfiCond636) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond637 Using cfiCommon0
          CFI (cfiCond637) Function zclWriteAttrDataUsingCB
          CFI (cfiCond637) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_300
          CFI (cfiCond637) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond637) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond637) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond637) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond637) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond637) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond637) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond637) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond637) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond637) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond637) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond637) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond637) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond637) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond637) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond637) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond637) CFA_SP SP+0
          CFI (cfiCond637) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond638 Using cfiCommon0
          CFI (cfiCond638) Function zclRevertWriteUndividedCmd
          CFI (cfiCond638) Conditional ??CrossCallReturnLabel_314, ??CrossCallReturnLabel_301
          CFI (cfiCond638) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond638) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond638) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond638) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond638) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond638) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond638) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond638) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond638) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond638) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond638) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond638) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond638) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond638) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond638) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond638) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond638) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond638) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond638) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond638) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond638) CFA_SP SP+0
          CFI (cfiCond638) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond639 Using cfiCommon0
          CFI (cfiCond639) Function zcl_SendWriteRequest
          CFI (cfiCond639) Conditional ??CrossCallReturnLabel_311, ??CrossCallReturnLabel_67
          CFI (cfiCond639) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond639) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond639) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond639) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond639) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond639) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond639) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond639) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond639) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond639) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond639) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond639) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond639) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond639) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond639) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond639) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond639) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond639) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond639) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond639) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond639) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond639) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond639) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond639) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond639) CFA_SP SP+0
          CFI (cfiCond639) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond640 Using cfiCommon0
          CFI (cfiCond640) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond640) Conditional ??CrossCallReturnLabel_311, ??CrossCallReturnLabel_68
          CFI (cfiCond640) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond640) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond640) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond640) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond640) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond640) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond640) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond640) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond640) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond640) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond640) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond640) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond640) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond640) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond640) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond640) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond640) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond640) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond640) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond640) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond640) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond640) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond640) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond640) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond640) CFA_SP SP+0
          CFI (cfiCond640) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker641 Using cfiCommon1
          CFI (cfiPicker641) NoFunction
          CFI (cfiPicker641) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond604
          CFI EndBlock cfiCond605
          CFI EndBlock cfiCond606
          CFI EndBlock cfiCond607
          CFI EndBlock cfiCond608
          CFI EndBlock cfiCond609
          CFI EndBlock cfiCond610
          CFI EndBlock cfiCond611
          CFI EndBlock cfiCond612
          CFI EndBlock cfiCond613
          CFI EndBlock cfiCond614
          CFI EndBlock cfiCond615
          CFI EndBlock cfiCond616
          CFI EndBlock cfiCond617
          CFI EndBlock cfiCond618
          CFI EndBlock cfiCond619
          CFI EndBlock cfiCond620
          CFI EndBlock cfiCond621
          CFI EndBlock cfiCond622
          CFI EndBlock cfiCond623
          CFI EndBlock cfiCond624
          CFI EndBlock cfiCond625
          CFI EndBlock cfiCond626
          CFI EndBlock cfiCond627
          CFI EndBlock cfiCond628
          CFI EndBlock cfiCond629
          CFI EndBlock cfiCond630
          CFI EndBlock cfiCond631
          CFI EndBlock cfiCond632
          CFI EndBlock cfiCond633
          CFI EndBlock cfiCond634
          CFI EndBlock cfiCond635
          CFI EndBlock cfiCond636
          CFI EndBlock cfiCond637
          CFI EndBlock cfiCond638
          CFI EndBlock cfiCond639
          CFI EndBlock cfiCond640
          CFI EndBlock cfiPicker641

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine54:
          CFI Block cfiCond642 Using cfiCommon0
          CFI Function zclWriteAttrData
          CFI Conditional ??CrossCallReturnLabel_63
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond643 Using cfiCommon0
          CFI (cfiCond643) Function zclRevertWriteUndividedCmd
          CFI (cfiCond643) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond643) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond643) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond643) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond643) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond643) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond643) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond643) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond643) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond643) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond643) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond643) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond643) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond643) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond643) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond643) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond643) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond643) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond643) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond643) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond643) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond643) CFA_SP SP+0
          CFI (cfiCond643) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiPicker644 Using cfiCommon1
          CFI (cfiPicker644) NoFunction
          CFI (cfiPicker644) Picker
        LCALL   ?Subroutine92 & 0xFFFF
??CrossCallReturnLabel_130:
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        RET
          CFI EndBlock cfiCond642
          CFI EndBlock cfiCond643
          CFI EndBlock cfiPicker644

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine53:
          CFI Block cfiCond645 Using cfiCommon0
          CFI Function zclProcessInWriteCmd
          CFI Conditional ??CrossCallReturnLabel_319
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond646 Using cfiCommon0
          CFI (cfiCond646) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond646) Conditional ??CrossCallReturnLabel_320
          CFI (cfiCond646) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond646) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond646) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond646) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond646) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond646) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond646) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond646) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond646) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond646) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond646) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond646) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond646) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond646) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond646) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond646) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond646) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond646) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond646) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond646) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond646) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond646) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond646) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond646) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond646) CFA_SP SP+0
          CFI (cfiCond646) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond647 Using cfiCommon0
          CFI (cfiCond647) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond647) Conditional ??CrossCallReturnLabel_321
          CFI (cfiCond647) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond647) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond647) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond647) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond647) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond647) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond647) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond647) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond647) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond647) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond647) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond647) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond647) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond647) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond647) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond647) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond647) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond647) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond647) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond647) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond647) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond647) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond647) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond647) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond647) CFA_SP SP+0
          CFI (cfiCond647) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker648 Using cfiCommon1
          CFI (cfiPicker648) NoFunction
          CFI (cfiPicker648) Picker
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
          CFI EndBlock cfiCond645
          CFI EndBlock cfiCond646
          CFI EndBlock cfiCond647
          CFI EndBlock cfiPicker648
        REQUIRE ??Subroutine141_0
        ; // Fall through to label ??Subroutine141_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine141_0:
          CFI Block cfiCond649 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_315
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond650 Using cfiCommon0
          CFI (cfiCond650) Function zclReadAttrDataUsingCB
          CFI (cfiCond650) Conditional ??CrossCallReturnLabel_316
          CFI (cfiCond650) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond650) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond650) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond650) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond650) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond650) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond650) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond650) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond650) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond650) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond650) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond650) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond650) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond650) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond650) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond650) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond650) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond650) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond650) CFA_SP SP+0
          CFI (cfiCond650) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiCond651 Using cfiCommon0
          CFI (cfiCond651) Function zclProcessInReadCmd
          CFI (cfiCond651) Conditional ??CrossCallReturnLabel_317
          CFI (cfiCond651) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond651) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond651) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond651) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond651) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond651) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond651) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond651) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond651) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond651) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond651) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond651) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond651) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond651) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond651) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond651) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond651) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond651) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond651) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond651) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond651) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond651) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond651) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond651) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond651) CFA_SP SP+0
          CFI (cfiCond651) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond652 Using cfiCommon0
          CFI (cfiCond652) Function zclRevertWriteUndividedCmd
          CFI (cfiCond652) Conditional ??CrossCallReturnLabel_318
          CFI (cfiCond652) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond652) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond652) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond652) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond652) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond652) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond652) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond652) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond652) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond652) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond652) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond652) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond652) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond652) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond652) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond652) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond652) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond652) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond652) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond652) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond652) CFA_SP SP+0
          CFI (cfiCond652) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond653 Using cfiCommon0
          CFI (cfiCond653) Function zclProcessInWriteCmd
          CFI (cfiCond653) Conditional ??CrossCallReturnLabel_319
          CFI (cfiCond653) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond653) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond653) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond653) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond653) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond653) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond653) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond653) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond653) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond653) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond653) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond653) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond653) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond653) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond653) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond653) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond653) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond653) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond653) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond653) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond653) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond653) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond653) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond653) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond653) CFA_SP SP+0
          CFI (cfiCond653) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond654 Using cfiCommon0
          CFI (cfiCond654) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond654) Conditional ??CrossCallReturnLabel_320
          CFI (cfiCond654) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond654) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond654) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond654) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond654) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond654) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond654) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond654) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond654) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond654) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond654) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond654) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond654) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond654) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond654) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond654) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond654) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond654) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond654) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond654) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond654) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond654) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond654) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond654) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond654) CFA_SP SP+0
          CFI (cfiCond654) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond655 Using cfiCommon0
          CFI (cfiCond655) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond655) Conditional ??CrossCallReturnLabel_321
          CFI (cfiCond655) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond655) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond655) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond655) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond655) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond655) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond655) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond655) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond655) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond655) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond655) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond655) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond655) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond655) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond655) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond655) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond655) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond655) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond655) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond655) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond655) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond655) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond655) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond655) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond655) CFA_SP SP+0
          CFI (cfiCond655) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker656 Using cfiCommon1
          CFI (cfiPicker656) NoFunction
          CFI (cfiPicker656) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 9,A
        RET
          CFI EndBlock cfiCond649
          CFI EndBlock cfiCond650
          CFI EndBlock cfiCond651
          CFI EndBlock cfiCond652
          CFI EndBlock cfiCond653
          CFI EndBlock cfiCond654
          CFI EndBlock cfiCond655
          CFI EndBlock cfiPicker656

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 4284 static uint8 zclProcessInWriteUndividedCmd( zclIncoming_t *pInMsg )
zclProcessInWriteUndividedCmd:
          CFI Block cfiBlock657 Using cfiCommon0
          CFI Function zclProcessInWriteUndividedCmd
        CODE
// 4285 {
        FUNCALL zclProcessInWriteUndividedCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, zclGetAttrDataLengthUsingCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, zclFindAttrRec
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, zclReadAttrData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, zclWriteAttrData
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, zclReadAttrDataUsingCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 40, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 40, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, zclWriteAttrDataUsingCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, zclRevertWriteUndividedCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, zcl_SendWriteRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 41, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 41, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zclProcessInWriteUndividedCmd, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x18
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
        ; Saved register size: 24
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
// 4286   zclWriteCmd_t *writeCmd;
// 4287   zclWriteRspCmd_t *writeRspCmd;
// 4288   zclAttrRec_t attrRec;
// 4289   uint16 dataLen;
// 4290   uint16 curLen = 0;
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x0
// 4291   uint8 j = 0;
        LCALL   ?Subroutine68 & 0xFFFF
// 4292   uint8 i;
// 4293 
// 4294   writeCmd = (zclWriteCmd_t *)pInMsg->attrCmd;
??CrossCallReturnLabel_276:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine130_0 & 0xFFFF
// 4295 
// 4296   // Allocate space for Write Response Command
// 4297   writeRspCmd = (zclWriteRspCmd_t *)zcl_mem_alloc( sizeof( zclWriteRspCmd_t )
// 4298                    + sizeof( zclWriteRspStatus_t )* writeCmd->numAttr );
??CrossCallReturnLabel_250:
        ; Setup parameters for call to function osal_mem_alloc
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine40 & 0xFFFF
??CrossCallReturnLabel_43:
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
// 4299   if ( writeRspCmd == NULL )
        MOV     A,R2
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??zclProcessInWriteUndividedCmd_0 & 0xFFFF
// 4300   {
// 4301     return FALSE; // EMBEDDED RETURN
// 4302   }
// 4303 
// 4304   // If any attribute cannot be written, no attribute values are changed. Hence,
// 4305   // make sure all the attributes are supported and writable
// 4306   for ( i = 0; i < writeCmd->numAttr; i++ )
        MOV     R7,#0x0
        SJMP    ??zclProcessInWriteUndividedCmd_1
// 4307   {
// 4308     zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 4309 
// 4310     if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4311                           statusRec->attrID, &attrRec ) )
// 4312     {
// 4313       // Attribute is not supported - stop here
// 4314       writeRspCmd->attrList[j].status = ZCL_STATUS_UNSUPPORTED_ATTRIBUTE;
// 4315       writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4316       break;
// 4317     }
// 4318 
// 4319     if ( statusRec->dataType != attrRec.attr.dataType )
// 4320     {
// 4321       // Attribute data type is incorrect - stope here
// 4322       writeRspCmd->attrList[j].status = ZCL_STATUS_INVALID_DATA_TYPE;
// 4323       writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4324       break;
// 4325     }
// 4326 
// 4327     if ( !zcl_AccessCtrlWrite( attrRec.attr.accessControl ) )
// 4328     {
// 4329       // Attribute is not writable - stop here
// 4330       writeRspCmd->attrList[j].status = ZCL_STATUS_READ_ONLY;
// 4331       writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4332       break;
// 4333     }
// 4334 
// 4335     if ( zcl_AccessCtrlAuthWrite( attrRec.attr.accessControl ) )
// 4336     {
// 4337       // Not authorized to write - stop here
// 4338       writeRspCmd->attrList[j].status = ZCL_STATUS_NOT_AUTHORIZED;
// 4339       writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4340       break;
// 4341     }
// 4342 
// 4343     // Attribute Data length
// 4344     if ( attrRec.attr.dataPtr != NULL )
// 4345     {
// 4346       dataLen = zclGetAttrDataLength( attrRec.attr.dataType, attrRec.attr.dataPtr );
// 4347     }
// 4348     else // Use CB
// 4349     {
// 4350       dataLen = zclGetAttrDataLengthUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4351                                              statusRec->attrID );
??zclProcessInWriteUndividedCmd_2:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ??Subroutine137_0 & 0xFFFF
// 4352     }
??CrossCallReturnLabel_281:
        ; Setup parameters for call to function zclGetAttrDataLengthUsingCB
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ??Subroutine144_0 & 0xFFFF
??CrossCallReturnLabel_325:
        MOV     DPL,R0
        LCALL   ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_308:
        LCALL   ?Subroutine73 & 0xFFFF
??CrossCallReturnLabel_269:
        LCALL   ??zclGetAttrDataLengthUsingCB?relay
??zclProcessInWriteUndividedCmd_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 4353 
// 4354     // add padding if needed
// 4355     if ( PADDING_NEEDED( dataLen ) )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??CrossCallReturnLabel_115
// 4356     {
// 4357       dataLen++;
        LCALL   ?Subroutine83 & 0xFFFF
// 4358     }
// 4359 
// 4360     curLen += dataLen;
??CrossCallReturnLabel_115:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        ADD     A,?V0 + 6
        MOV     ?V0 + 6,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,?V0 + 7
        MOV     ?V0 + 7,A
        INC     R7
??zclProcessInWriteUndividedCmd_1:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_55:
        JNC     ??zclProcessInWriteUndividedCmd_4
        MOV     A,R7
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine44 & 0xFFFF
??CrossCallReturnLabel_50:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ??Subroutine137_0 & 0xFFFF
??CrossCallReturnLabel_282:
        MOV     ?V0 + 8,R0
        ; Setup parameters for call to function zclFindAttrRec
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 10,DPL
        MOV     ?V0 + 11,DPH
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ??Subroutine144_0 & 0xFFFF
??CrossCallReturnLabel_326:
        MOV     DPL,?V0 + 8
        LCALL   ?Subroutine58 & 0xFFFF
??CrossCallReturnLabel_309:
        MOV     A,?V0 + 8
        LCALL   ??Subroutine135_0 & 0xFFFF
??CrossCallReturnLabel_267:
        LCALL   ??zclFindAttrRec?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,R1
        JNZ     ??zclProcessInWriteUndividedCmd_5
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        MOV     A,#-0x7a
??zclProcessInWriteUndividedCmd_6:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_252:
        INC     R6
// 4361   } // for loop
// 4362 
// 4363   writeRspCmd->numAttr = j;
??zclProcessInWriteUndividedCmd_4:
        MOV     A,R6
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    @DPTR,A
// 4364   if ( writeRspCmd->numAttr == 0 ) // All attributes can be written
        JZ      $+5
        LJMP    ??zclProcessInWriteUndividedCmd_7 & 0xFFFF
// 4365   {
// 4366     uint8 *curDataPtr;
// 4367     zclWriteRec_t *curWriteRec;
// 4368 
// 4369     // calculate the length of the current data header
// 4370     uint8 hdrLen = j * sizeof( zclWriteRec_t );
        MOV     B,#0x5
        MUL     AB
        MOV     R7,A
// 4371 
// 4372     // Allocate space to keep a copy of the current data
// 4373     curWriteRec = (zclWriteRec_t *) zcl_mem_alloc( hdrLen + curLen );
        ; Setup parameters for call to function osal_mem_alloc
        ADD     A,?V0 + 6
        MOV     R2,A
        CLR     A
        ADDC    A,?V0 + 7
        MOV     R3,A
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 14,R2
        MOV     ?V0 + 15,R3
// 4374     if ( curWriteRec == NULL )
        MOV     A,R2
        ORL     A,?V0 + 15
        JNZ     ??zclProcessInWriteUndividedCmd_8
// 4375     {
// 4376       zcl_mem_free(writeRspCmd );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_mem_free?relay
// 4377       return FALSE; // EMBEDDED RETURN
??zclProcessInWriteUndividedCmd_0:
        MOV     R1,#0x0
        LJMP    ??zclProcessInWriteUndividedCmd_9 & 0xFFFF
// 4378     }
??zclProcessInWriteUndividedCmd_5:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
        JZ      ??zclProcessInWriteUndividedCmd_10
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        MOV     A,#-0x73
        SJMP    ??zclProcessInWriteUndividedCmd_6
??zclProcessInWriteUndividedCmd_10:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.1
        JC      ??zclProcessInWriteUndividedCmd_11
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        MOV     A,#-0x78
        SJMP    ??zclProcessInWriteUndividedCmd_6
??zclProcessInWriteUndividedCmd_11:
        MOV     C,0xE0 /* A   */.5
        JNC     ??zclProcessInWriteUndividedCmd_12
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        MOV     A,#0x7e
        SJMP    ??zclProcessInWriteUndividedCmd_6
??zclProcessInWriteUndividedCmd_12:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine116_0 & 0xFFFF
??CrossCallReturnLabel_171:
        JNZ     $+5
        LJMP    ??zclProcessInWriteUndividedCmd_2 & 0xFFFF
        ; Setup parameters for call to function zclGetAttrDataLength
        LCALL   ??zclGetAttrDataLength?relay
        LJMP    ??zclProcessInWriteUndividedCmd_3 & 0xFFFF
// 4379 
// 4380     curDataPtr = (uint8 *)((uint8 *)curWriteRec + hdrLen);
??zclProcessInWriteUndividedCmd_8:
        MOV     ?V0 + 2,R7
        MOV     A,R2
        ADD     A,?V0 + 2
        MOV     ?V0 + 2,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
// 4381 
// 4382     // Write the new data over
// 4383     for ( i = 0; i < writeCmd->numAttr; i++ )
        MOV     R7,#0x0
        SJMP    ??zclProcessInWriteUndividedCmd_13
// 4384     {
// 4385       uint8 status;
// 4386       zclWriteRec_t *statusRec = &(writeCmd->attrList[i]);
// 4387       zclWriteRec_t *curStatusRec = &(curWriteRec[i]);
// 4388 
// 4389       if ( !zclFindAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4390                             statusRec->attrID, &attrRec ) )
// 4391       {
// 4392         break; // should never happen
// 4393       }
// 4394 
// 4395       // Keep a copy of the current data before before writing the new data over
// 4396       curStatusRec->attrID = statusRec->attrID;
// 4397       curStatusRec->attrData = curDataPtr;
// 4398 
// 4399       if ( attrRec.attr.dataPtr != NULL )
// 4400       {
// 4401         // Read the current value
// 4402         zclReadAttrData( curDataPtr, &attrRec, &dataLen );
// 4403 
// 4404         // Write the new attribute value
// 4405         status = zclWriteAttrData( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4406                                    &attrRec, statusRec );
// 4407       }
// 4408       else // Use CBs
// 4409       {
// 4410         // Read the current value
// 4411         zclReadAttrDataUsingCB( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
// 4412                                 statusRec->attrID, curDataPtr, &dataLen );
// 4413         // Write the new attribute value
// 4414         status = zclWriteAttrDataUsingCB( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4415                                           &attrRec, statusRec->attrData );
// 4416       }
// 4417 
// 4418       // If successful, a write attribute status record shall NOT be generated
// 4419       if ( status != ZCL_STATUS_SUCCESS )
// 4420       {
// 4421         writeRspCmd->attrList[j].status = status;
// 4422         writeRspCmd->attrList[j++].attrID = statusRec->attrID;
// 4423 
// 4424         // Since this write failed, we need to revert all the pervious writes
// 4425         zclRevertWriteUndividedCmd( pInMsg, curWriteRec, i);
// 4426         break;
// 4427       }
// 4428 
// 4429       // add padding if needed
// 4430       if ( PADDING_NEEDED( dataLen ) )
??zclProcessInWriteUndividedCmd_14:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        MOV     C,0xE0 /* A   */.0
        JNC     ??CrossCallReturnLabel_116
// 4431       {
// 4432         dataLen++;
        LCALL   ?Subroutine83 & 0xFFFF
// 4433       }
// 4434 
// 4435       curDataPtr += dataLen;
??CrossCallReturnLabel_116:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ??Subroutine137_0 & 0xFFFF
??CrossCallReturnLabel_283:
        MOV     A,?V0 + 2
        ADD     A,R0
        MOV     ?V0 + 2,A
        MOV     A,?V0 + 3
        ADDC    A,R1
        MOV     ?V0 + 3,A
        INC     R7
??zclProcessInWriteUndividedCmd_13:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine49 & 0xFFFF
??CrossCallReturnLabel_56:
        JC      $+5
        LJMP    ??zclProcessInWriteUndividedCmd_15 & 0xFFFF
        MOV     A,R7
        MOV     B,#0x5
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine94 & 0xFFFF
??CrossCallReturnLabel_132:
        MOV     ?V0 + 6,DPL
        MOV     ?V0 + 7,DPH
        MOV     A,?V0 + 14
        ADD     A,R0
        MOV     ?V0 + 12,A
        MOV     A,?V0 + 15
        ADDC    A,R1
        MOV     ?V0 + 13,A
        LCALL   ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_320:
        ; Setup parameters for call to function zclFindAttrRec
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 10,DPL
        MOV     ?V0 + 11,DPH
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_260:
        LCALL   ??zclFindAttrRec?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,R1
        JNZ     $+5
        LJMP    ??zclProcessInWriteUndividedCmd_15 & 0xFFFF
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        LCALL   ??Subroutine137_0 & 0xFFFF
??CrossCallReturnLabel_284:
        MOV     DPL,?V0 + 12
        MOV     DPH,?V0 + 13
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     A,?V0 + 2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 3
        MOVX    @DPTR,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine124_0 & 0xFFFF
??CrossCallReturnLabel_204:
        JZ      ??zclProcessInWriteUndividedCmd_16
        ; Setup parameters for call to function zclReadAttrData
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     ?V0 + 8,DPL
        MOV     ?V0 + 9,DPH
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        LCALL   ??zclReadAttrData?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        LCALL   ?Subroutine53 & 0xFFFF
??CrossCallReturnLabel_321:
        ; Setup parameters for call to function zclWriteAttrData
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ?Subroutine76 & 0xFFFF
??CrossCallReturnLabel_103:
        LCALL   ??Subroutine136_0 & 0xFFFF
??CrossCallReturnLabel_265:
        LCALL   ??zclWriteAttrData?relay
        SJMP    ??zclProcessInWriteUndividedCmd_17
          CFI CFA_XSP16 add(XSP16, 36)
??zclProcessInWriteUndividedCmd_16:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ?Subroutine52 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV     ?V0 + 10,DPL
        MOV     ?V0 + 11,DPH
        MOV     R0,#?V0 + 10
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        LCALL   ?Subroutine31 & 0xFFFF
??CrossCallReturnLabel_261:
        LCALL   ??zclReadAttrDataUsingCB?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        LCALL   ??Subroutine137_0 & 0xFFFF
??CrossCallReturnLabel_285:
        ; Setup parameters for call to function zclWriteAttrDataUsingCB
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R0
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,R1
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ?Subroutine73 & 0xFFFF
??CrossCallReturnLabel_270:
        LCALL   ??zclWriteAttrDataUsingCB?relay
??zclProcessInWriteUndividedCmd_17:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     A,R1
        MOV     R3,A
        MOV     A,R3
        JNZ     $+5
        LJMP    ??zclProcessInWriteUndividedCmd_14 & 0xFFFF
        MOV     A,R6
        MOV     B,#0x3
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,?V0 + 0
        ADD     A,R0
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,R1
        MOV     R1,A
        MOV     A,R3
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 6
        MOV     DPH,?V0 + 7
        LCALL   ?Subroutine57 & 0xFFFF
??CrossCallReturnLabel_68:
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        INC     R6
        ; Setup parameters for call to function zclRevertWriteUndividedCmd
        MOV     ?V0 + 2,R7
        MOV     ?V0 + 3,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     R4,?V0 + 14
        MOV     R5,?V0 + 15
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ??zclRevertWriteUndividedCmd?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
// 4436     } // for loop
// 4437 
// 4438     writeRspCmd->numAttr = j;
??zclProcessInWriteUndividedCmd_15:
        MOV     A,R6
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    @DPTR,A
// 4439     if ( writeRspCmd->numAttr  == 0 )
        JNZ     ??CrossCallReturnLabel_30
// 4440     {
// 4441       // Since all records were written successful, include a single status record
// 4442       // in the resonse command with the status field set to SUCCESS and the
// 4443       // attribute ID field omitted.
// 4444       writeRspCmd->attrList[0].status = ZCL_STATUS_SUCCESS;
        LCALL   ?Subroutine29 & 0xFFFF
// 4445       writeRspCmd->numAttr = 1;
// 4446     }
// 4447 
// 4448     zcl_mem_free( curWriteRec );
??CrossCallReturnLabel_30:
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 14
        MOV     R3,?V0 + 15
        LCALL   ??osal_mem_free?relay
// 4449   }
// 4450 
// 4451   zcl_SendWriteRsp( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
// 4452                     pInMsg->msg->clusterId, writeRspCmd, !pInMsg->hdr.fc.direction,
// 4453                     true, pInMsg->hdr.transSeqNum );
??zclProcessInWriteUndividedCmd_7:
        LCALL   ?Subroutine38 & 0xFFFF
??CrossCallReturnLabel_41:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     ?V0 + 2,#0x1
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 38)
        LCALL   ?Subroutine35 & 0xFFFF
??CrossCallReturnLabel_255:
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 39)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 41)
        LCALL   ?Subroutine34 & 0xFFFF
??CrossCallReturnLabel_34:
        LCALL   ??zcl_SendWriteRsp?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
// 4454   zcl_mem_free( writeRspCmd );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_mem_free?relay
// 4455 
// 4456   return TRUE;
        MOV     R1,#0x1
??zclProcessInWriteUndividedCmd_9:
        MOV     A,#0xc
        LJMP    ?Subroutine4 & 0xFFFF
          CFI EndBlock cfiBlock657
// 4457 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine83:
          CFI Block cfiCond658 Using cfiCommon0
          CFI Function zclProcessInWriteUndividedCmd
          CFI Conditional ??CrossCallReturnLabel_115
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond659 Using cfiCommon0
          CFI (cfiCond659) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond659) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond659) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond659) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond659) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond659) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond659) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond659) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond659) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond659) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond659) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond659) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond659) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond659) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond659) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond659) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond659) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond659) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond659) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond659) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond659) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond659) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond659) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond659) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond659) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond659) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond659) CFA_SP SP+0
          CFI (cfiCond659) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker660 Using cfiCommon1
          CFI (cfiPicker660) NoFunction
          CFI (cfiPicker660) Picker
        ADD     A,#0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond658
          CFI EndBlock cfiCond659
          CFI EndBlock cfiPicker660

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine76:
          CFI Block cfiCond661 Using cfiCommon0
          CFI Function zclProcessInReadCmd
          CFI Conditional ??CrossCallReturnLabel_102
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond662 Using cfiCommon0
          CFI (cfiCond662) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond662) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond662) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond662) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond662) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond662) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond662) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond662) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond662) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond662) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond662) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond662) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond662) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond662) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond662) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond662) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond662) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond662) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond662) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond662) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond662) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond662) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond662) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond662) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond662) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond662) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond662) CFA_SP SP+0
          CFI (cfiCond662) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiPicker663 Using cfiCommon1
          CFI (cfiPicker663) NoFunction
          CFI (cfiPicker663) Picker
        MOV     A,?V0 + 8
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,?V0 + 9
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,?V0 + 8
        LCALL   ??Subroutine146_0 & 0xFFFF
??CrossCallReturnLabel_342:
        MOV     A,?V0 + 9
        RET
          CFI EndBlock cfiCond661
          CFI EndBlock cfiCond662
          CFI EndBlock cfiPicker663

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine57:
          CFI Block cfiCond664 Using cfiCommon0
          CFI Function zcl_SendWriteRequest
          CFI Conditional ??CrossCallReturnLabel_67
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond665 Using cfiCommon0
          CFI (cfiCond665) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond665) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond665) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond665) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond665) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond665) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond665) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond665) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond665) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond665) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond665) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond665) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond665) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond665) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond665) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond665) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond665) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond665) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond665) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond665) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond665) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond665) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond665) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond665) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond665) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond665) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond665) CFA_SP SP+0
          CFI (cfiCond665) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker666 Using cfiCommon1
          CFI (cfiPicker666) NoFunction
          CFI (cfiPicker666) Picker
        LCALL   ?Subroutine93 & 0xFFFF
??CrossCallReturnLabel_311:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond664
          CFI EndBlock cfiCond665
          CFI EndBlock cfiPicker666

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine56:
          CFI Block cfiCond667 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_329
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond668 Using cfiCommon0
          CFI (cfiCond668) Function zclProcessInReadCmd
          CFI (cfiCond668) Conditional ??CrossCallReturnLabel_330
          CFI (cfiCond668) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond668) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond668) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond668) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond668) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond668) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond668) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond668) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond668) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond668) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond668) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond668) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond668) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond668) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond668) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond668) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond668) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond668) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond668) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond668) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond668) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond668) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond668) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond668) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond668) CFA_SP SP+0
          CFI (cfiCond668) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiPicker669 Using cfiCommon1
          CFI (cfiPicker669) NoFunction
          CFI (cfiPicker669) Picker
        INC     DPTR
          CFI EndBlock cfiCond667
          CFI EndBlock cfiCond668
          CFI EndBlock cfiPicker669
        REQUIRE ??Subroutine142_0
        ; // Fall through to label ??Subroutine142_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine142_0:
          CFI Block cfiCond670 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_328
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond671 Using cfiCommon0
          CFI (cfiCond671) Function zcl_HandleExternal
          CFI (cfiCond671) Conditional ??CrossCallReturnLabel_329
          CFI (cfiCond671) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond671) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond671) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond671) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond671) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond671) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond671) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond671) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond671) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond671) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond671) CFA_SP SP+0
          CFI (cfiCond671) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond672 Using cfiCommon0
          CFI (cfiCond672) Function zclProcessInReadCmd
          CFI (cfiCond672) Conditional ??CrossCallReturnLabel_330
          CFI (cfiCond672) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond672) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond672) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond672) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond672) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond672) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond672) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond672) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond672) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond672) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond672) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond672) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond672) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond672) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond672) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond672) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond672) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond672) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond672) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond672) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond672) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond672) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond672) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond672) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond672) CFA_SP SP+0
          CFI (cfiCond672) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiPicker673 Using cfiCommon1
          CFI (cfiPicker673) NoFunction
          CFI (cfiPicker673) Picker
        INC     DPTR
          CFI EndBlock cfiCond670
          CFI EndBlock cfiCond671
          CFI EndBlock cfiCond672
          CFI EndBlock cfiPicker673
        REQUIRE ??Subroutine143_0
        ; // Fall through to label ??Subroutine143_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine143_0:
          CFI Block cfiCond674 Using cfiCommon0
          CFI Function zclWriteAttrDataUsingCB
          CFI Conditional ??CrossCallReturnLabel_327
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond675 Using cfiCommon0
          CFI (cfiCond675) Function zcl_SendReadRsp
          CFI (cfiCond675) Conditional ??CrossCallReturnLabel_328
          CFI (cfiCond675) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond675) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond675) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond675) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond675) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond675) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond675) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond675) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond675) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond675) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond675) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond675) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond675) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond675) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond675) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond675) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond675) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond675) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond675) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond675) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond675) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond675) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond675) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond675) CFA_SP SP+0
          CFI (cfiCond675) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond676 Using cfiCommon0
          CFI (cfiCond676) Function zcl_HandleExternal
          CFI (cfiCond676) Conditional ??CrossCallReturnLabel_329
          CFI (cfiCond676) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond676) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond676) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond676) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond676) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond676) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond676) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond676) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond676) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond676) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond676) CFA_SP SP+0
          CFI (cfiCond676) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond677 Using cfiCommon0
          CFI (cfiCond677) Function zclProcessInReadCmd
          CFI (cfiCond677) Conditional ??CrossCallReturnLabel_330
          CFI (cfiCond677) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond677) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond677) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond677) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond677) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond677) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond677) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond677) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond677) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond677) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond677) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond677) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond677) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond677) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond677) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond677) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond677) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond677) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond677) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond677) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond677) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond677) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond677) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond677) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond677) CFA_SP SP+0
          CFI (cfiCond677) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiPicker678 Using cfiCommon1
          CFI (cfiPicker678) NoFunction
          CFI (cfiPicker678) Picker
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond674
          CFI EndBlock cfiCond675
          CFI EndBlock cfiCond676
          CFI EndBlock cfiCond677
          CFI EndBlock cfiPicker678
        REQUIRE ??Subroutine144_0
        ; // Fall through to label ??Subroutine144_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine144_0:
          CFI Block cfiCond679 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_322
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond680 Using cfiCommon0
          CFI (cfiCond680) Function zcl_ProcessMessageMSG
          CFI (cfiCond680) Conditional ??CrossCallReturnLabel_323
          CFI (cfiCond680) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond680) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond680) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond680) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond680) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond680) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond680) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond680) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond680) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond680) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond680) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond680) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond680) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond680) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond680) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond680) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond680) CFA_SP SP+0
          CFI (cfiCond680) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond681 Using cfiCommon0
          CFI (cfiCond681) Function zclRevertWriteUndividedCmd
          CFI (cfiCond681) Conditional ??CrossCallReturnLabel_324
          CFI (cfiCond681) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond681) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond681) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond681) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond681) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond681) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond681) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond681) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond681) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond681) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond681) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond681) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond681) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond681) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond681) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond681) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond681) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond681) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond681) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond681) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond681) CFA_SP SP+0
          CFI (cfiCond681) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond682 Using cfiCommon0
          CFI (cfiCond682) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond682) Conditional ??CrossCallReturnLabel_325
          CFI (cfiCond682) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond682) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond682) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond682) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond682) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond682) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond682) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond682) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond682) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond682) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond682) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond682) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond682) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond682) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond682) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond682) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond682) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond682) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond682) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond682) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond682) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond682) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond682) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond682) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond682) CFA_SP SP+0
          CFI (cfiCond682) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond683 Using cfiCommon0
          CFI (cfiCond683) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond683) Conditional ??CrossCallReturnLabel_326
          CFI (cfiCond683) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond683) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond683) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond683) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond683) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond683) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond683) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond683) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond683) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond683) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond683) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond683) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond683) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond683) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond683) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond683) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond683) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond683) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond683) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond683) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond683) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond683) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond683) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond683) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond683) CFA_SP SP+0
          CFI (cfiCond683) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond684 Using cfiCommon0
          CFI (cfiCond684) Function zclWriteAttrDataUsingCB
          CFI (cfiCond684) Conditional ??CrossCallReturnLabel_327
          CFI (cfiCond684) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond684) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond684) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond684) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond684) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond684) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond684) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond684) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond684) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond684) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond684) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond684) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond684) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond684) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond684) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond684) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond684) CFA_SP SP+0
          CFI (cfiCond684) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond685 Using cfiCommon0
          CFI (cfiCond685) Function zcl_SendReadRsp
          CFI (cfiCond685) Conditional ??CrossCallReturnLabel_328
          CFI (cfiCond685) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond685) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond685) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond685) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond685) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond685) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond685) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond685) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond685) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond685) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond685) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond685) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond685) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond685) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond685) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond685) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond685) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond685) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond685) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond685) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond685) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond685) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond685) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond685) CFA_SP SP+0
          CFI (cfiCond685) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond686 Using cfiCommon0
          CFI (cfiCond686) Function zcl_HandleExternal
          CFI (cfiCond686) Conditional ??CrossCallReturnLabel_329
          CFI (cfiCond686) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond686) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond686) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond686) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond686) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond686) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond686) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond686) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond686) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond686) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond686) CFA_SP SP+0
          CFI (cfiCond686) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond687 Using cfiCommon0
          CFI (cfiCond687) Function zclProcessInReadCmd
          CFI (cfiCond687) Conditional ??CrossCallReturnLabel_330
          CFI (cfiCond687) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond687) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond687) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond687) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond687) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond687) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond687) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond687) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond687) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond687) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond687) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond687) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond687) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond687) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond687) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond687) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond687) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond687) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond687) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond687) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond687) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond687) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond687) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond687) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond687) CFA_SP SP+0
          CFI (cfiCond687) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiPicker688 Using cfiCommon1
          CFI (cfiPicker688) NoFunction
          CFI (cfiPicker688) Picker
        LCALL   ??Subroutine145_0 & 0xFFFF
??CrossCallReturnLabel_335:
        RET
          CFI EndBlock cfiCond679
          CFI EndBlock cfiCond680
          CFI EndBlock cfiCond681
          CFI EndBlock cfiCond682
          CFI EndBlock cfiCond683
          CFI EndBlock cfiCond684
          CFI EndBlock cfiCond685
          CFI EndBlock cfiCond686
          CFI EndBlock cfiCond687
          CFI EndBlock cfiPicker688

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine91:
          CFI Block cfiCond689 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_47
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond690 Using cfiCommon0
          CFI (cfiCond690) Function zcl_ProcessMessageMSG
          CFI (cfiCond690) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_48
          CFI (cfiCond690) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond690) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond690) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond690) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond690) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond690) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond690) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond690) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond690) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond690) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond690) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond690) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond690) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond690) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond690) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond690) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond690) CFA_SP SP+0
          CFI (cfiCond690) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond691 Using cfiCommon0
          CFI (cfiCond691) Function zclProcessInWriteCmd
          CFI (cfiCond691) Conditional ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_33
          CFI (cfiCond691) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond691) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond691) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond691) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond691) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond691) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond691) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond691) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond691) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond691) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond691) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond691) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond691) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond691) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond691) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond691) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond691) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond691) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond691) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond691) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond691) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond691) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond691) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond691) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond691) CFA_SP SP+0
          CFI (cfiCond691) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond692 Using cfiCommon0
          CFI (cfiCond692) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond692) Conditional ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_34
          CFI (cfiCond692) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond692) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond692) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond692) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond692) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond692) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond692) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond692) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond692) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond692) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond692) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond692) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond692) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond692) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond692) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond692) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond692) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond692) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond692) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond692) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond692) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond692) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond692) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond692) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond692) CFA_SP SP+0
          CFI (cfiCond692) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiPicker693 Using cfiCommon1
          CFI (cfiPicker693) NoFunction
          CFI (cfiPicker693) Picker
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond689
          CFI EndBlock cfiCond690
          CFI EndBlock cfiCond691
          CFI EndBlock cfiCond692
          CFI EndBlock cfiPicker693
        REQUIRE ??Subroutine145_0
        ; // Fall through to label ??Subroutine145_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine145_0:
          CFI Block cfiCond694 Using cfiCommon0
          CFI Function zcl_SendReadRsp
          CFI Conditional ??CrossCallReturnLabel_331, ??CrossCallReturnLabel_65
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond695 Using cfiCommon0
          CFI (cfiCond695) Function zcl_SendReadRsp
          CFI (cfiCond695) Conditional ??CrossCallReturnLabel_331, ??CrossCallReturnLabel_66
          CFI (cfiCond695) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond695) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond695) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond695) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond695) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond695) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond695) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond695) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond695) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond695) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond695) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond695) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond695) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond695) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond695) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond695) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond695) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond695) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond695) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond695) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond695) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond695) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond695) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond695) CFA_SP SP+0
          CFI (cfiCond695) CFA_XSP16 add(XSP16, 31)
          CFI Block cfiCond696 Using cfiCommon0
          CFI (cfiCond696) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond696) Conditional ??CrossCallReturnLabel_334, ??CrossCallReturnLabel_260
          CFI (cfiCond696) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond696) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond696) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond696) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond696) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond696) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond696) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond696) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond696) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond696) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond696) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond696) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond696) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond696) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond696) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond696) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond696) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond696) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond696) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond696) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond696) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond696) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond696) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond696) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond696) CFA_SP SP+0
          CFI (cfiCond696) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond697 Using cfiCommon0
          CFI (cfiCond697) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond697) Conditional ??CrossCallReturnLabel_334, ??CrossCallReturnLabel_261
          CFI (cfiCond697) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond697) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond697) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond697) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond697) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond697) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond697) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond697) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond697) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond697) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond697) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond697) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond697) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond697) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond697) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond697) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond697) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond697) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond697) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond697) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond697) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond697) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond697) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond697) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond697) CFA_SP SP+0
          CFI (cfiCond697) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond698 Using cfiCommon0
          CFI (cfiCond698) Function zclProcessInReadCmd
          CFI (cfiCond698) Conditional ??CrossCallReturnLabel_334, ??CrossCallReturnLabel_258
          CFI (cfiCond698) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond698) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond698) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond698) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond698) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond698) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond698) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond698) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond698) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond698) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond698) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond698) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond698) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond698) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond698) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond698) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond698) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond698) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond698) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond698) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond698) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond698) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond698) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond698) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond698) CFA_SP SP+0
          CFI (cfiCond698) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond699 Using cfiCommon0
          CFI (cfiCond699) Function zclProcessInWriteCmd
          CFI (cfiCond699) Conditional ??CrossCallReturnLabel_334, ??CrossCallReturnLabel_259
          CFI (cfiCond699) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond699) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond699) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond699) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond699) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond699) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond699) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond699) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond699) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond699) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond699) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond699) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond699) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond699) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond699) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond699) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond699) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond699) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond699) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond699) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond699) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond699) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond699) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond699) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond699) CFA_SP SP+0
          CFI (cfiCond699) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond700 Using cfiCommon0
          CFI (cfiCond700) Function zcl_HandleExternal
          CFI (cfiCond700) Conditional ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_329
          CFI (cfiCond700) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond700) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond700) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond700) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond700) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond700) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond700) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond700) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond700) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond700) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond700) CFA_SP SP+0
          CFI (cfiCond700) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond701 Using cfiCommon0
          CFI (cfiCond701) Function zclProcessInReadCmd
          CFI (cfiCond701) Conditional ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_330
          CFI (cfiCond701) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond701) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond701) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond701) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond701) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond701) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond701) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond701) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond701) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond701) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond701) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond701) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond701) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond701) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond701) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond701) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond701) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond701) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond701) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond701) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond701) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond701) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond701) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond701) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond701) CFA_SP SP+0
          CFI (cfiCond701) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond702 Using cfiCommon0
          CFI (cfiCond702) Function zcl_SendReadRsp
          CFI (cfiCond702) Conditional ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_328
          CFI (cfiCond702) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond702) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond702) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond702) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond702) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond702) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond702) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond702) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond702) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond702) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond702) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond702) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond702) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond702) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond702) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond702) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond702) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond702) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond702) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond702) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond702) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond702) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond702) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond702) CFA_SP SP+0
          CFI (cfiCond702) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond703 Using cfiCommon0
          CFI (cfiCond703) Function zclWriteAttrDataUsingCB
          CFI (cfiCond703) Conditional ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_327
          CFI (cfiCond703) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond703) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond703) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond703) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond703) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond703) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond703) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond703) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond703) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond703) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond703) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond703) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond703) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond703) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond703) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond703) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond703) CFA_SP SP+0
          CFI (cfiCond703) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond704 Using cfiCommon0
          CFI (cfiCond704) Function zcl_HandleExternal
          CFI (cfiCond704) Conditional ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_322
          CFI (cfiCond704) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond704) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond704) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond704) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond704) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond704) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond704) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond704) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond704) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond704) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond704) CFA_SP SP+0
          CFI (cfiCond704) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond705 Using cfiCommon0
          CFI (cfiCond705) Function zcl_ProcessMessageMSG
          CFI (cfiCond705) Conditional ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_323
          CFI (cfiCond705) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond705) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond705) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond705) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond705) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond705) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond705) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond705) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond705) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond705) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond705) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond705) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond705) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond705) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond705) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond705) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond705) CFA_SP SP+0
          CFI (cfiCond705) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond706 Using cfiCommon0
          CFI (cfiCond706) Function zclRevertWriteUndividedCmd
          CFI (cfiCond706) Conditional ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_324
          CFI (cfiCond706) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond706) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond706) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond706) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond706) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond706) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond706) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond706) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond706) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond706) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond706) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond706) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond706) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond706) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond706) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond706) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond706) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond706) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond706) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond706) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond706) CFA_SP SP+0
          CFI (cfiCond706) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond707 Using cfiCommon0
          CFI (cfiCond707) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond707) Conditional ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_325
          CFI (cfiCond707) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond707) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond707) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond707) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond707) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond707) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond707) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond707) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond707) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond707) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond707) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond707) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond707) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond707) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond707) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond707) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond707) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond707) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond707) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond707) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond707) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond707) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond707) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond707) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond707) CFA_SP SP+0
          CFI (cfiCond707) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond708 Using cfiCommon0
          CFI (cfiCond708) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond708) Conditional ??CrossCallReturnLabel_335, ??CrossCallReturnLabel_326
          CFI (cfiCond708) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond708) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond708) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond708) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond708) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond708) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond708) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond708) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond708) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond708) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond708) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond708) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond708) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond708) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond708) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond708) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond708) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond708) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond708) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond708) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond708) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond708) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond708) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond708) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond708) CFA_SP SP+0
          CFI (cfiCond708) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond709 Using cfiCommon0
          CFI (cfiCond709) Function zcl_ProcessMessageMSG
          CFI (cfiCond709) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_47
          CFI (cfiCond709) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond709) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond709) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond709) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond709) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond709) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond709) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond709) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond709) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond709) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond709) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond709) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond709) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond709) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond709) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond709) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond709) CFA_SP SP+0
          CFI (cfiCond709) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond710 Using cfiCommon0
          CFI (cfiCond710) Function zcl_ProcessMessageMSG
          CFI (cfiCond710) Conditional ??CrossCallReturnLabel_333, ??CrossCallReturnLabel_48
          CFI (cfiCond710) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond710) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond710) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond710) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond710) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond710) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond710) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond710) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond710) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond710) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond710) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond710) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond710) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond710) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond710) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond710) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond710) CFA_SP SP+0
          CFI (cfiCond710) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond711 Using cfiCommon0
          CFI (cfiCond711) Function zclProcessInWriteCmd
          CFI (cfiCond711) Conditional ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_33
          CFI (cfiCond711) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond711) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond711) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond711) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond711) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond711) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond711) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond711) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond711) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond711) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond711) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond711) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond711) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond711) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond711) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond711) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond711) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond711) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond711) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond711) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond711) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond711) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond711) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond711) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond711) CFA_SP SP+0
          CFI (cfiCond711) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond712 Using cfiCommon0
          CFI (cfiCond712) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond712) Conditional ??CrossCallReturnLabel_332, ??CrossCallReturnLabel_34
          CFI (cfiCond712) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond712) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond712) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond712) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond712) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond712) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond712) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond712) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond712) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond712) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond712) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond712) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond712) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond712) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond712) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond712) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond712) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond712) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond712) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond712) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond712) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond712) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond712) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond712) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond712) CFA_SP SP+0
          CFI (cfiCond712) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiPicker713 Using cfiCommon1
          CFI (cfiPicker713) NoFunction
          CFI (cfiPicker713) Picker
        LCALL   ?Subroutine110 & 0xFFFF
??CrossCallReturnLabel_341:
        MOV     R5,A
        RET
          CFI EndBlock cfiCond694
          CFI EndBlock cfiCond695
          CFI EndBlock cfiCond696
          CFI EndBlock cfiCond697
          CFI EndBlock cfiCond698
          CFI EndBlock cfiCond699
          CFI EndBlock cfiCond700
          CFI EndBlock cfiCond701
          CFI EndBlock cfiCond702
          CFI EndBlock cfiCond703
          CFI EndBlock cfiCond704
          CFI EndBlock cfiCond705
          CFI EndBlock cfiCond706
          CFI EndBlock cfiCond707
          CFI EndBlock cfiCond708
          CFI EndBlock cfiCond709
          CFI EndBlock cfiCond710
          CFI EndBlock cfiCond711
          CFI EndBlock cfiCond712
          CFI EndBlock cfiPicker713

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine52:
          CFI Block cfiCond714 Using cfiCommon0
          CFI Function zclProcessInReadCmd
          CFI Conditional ??CrossCallReturnLabel_61
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond715 Using cfiCommon0
          CFI (cfiCond715) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond715) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond715) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond715) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond715) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond715) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond715) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond715) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond715) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond715) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond715) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond715) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond715) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond715) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond715) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond715) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond715) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond715) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond715) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond715) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond715) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond715) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond715) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond715) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond715) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond715) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond715) CFA_SP SP+0
          CFI (cfiCond715) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker716 Using cfiCommon1
          CFI (cfiPicker716) NoFunction
          CFI (cfiPicker716) Picker
        MOVX    A,@DPTR
        MOV     ?V0 + 8,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 9,A
        ; Setup parameters for call to function zclFindAttrRec
        ; Setup parameters for call to function zclReadAttrDataUsingCB
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
          CFI EndBlock cfiCond714
          CFI EndBlock cfiCond715
          CFI EndBlock cfiPicker716

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine49:
          CFI Block cfiCond717 Using cfiCommon0
          CFI Function zclProcessInWriteUndividedCmd
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond718 Using cfiCommon0
          CFI (cfiCond718) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond718) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond718) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond718) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond718) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond718) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond718) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond718) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond718) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond718) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond718) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond718) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond718) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond718) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond718) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond718) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond718) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond718) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond718) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond718) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond718) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond718) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond718) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond718) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond718) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond718) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond718) CFA_SP SP+0
          CFI (cfiCond718) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker719 Using cfiCommon1
          CFI (cfiPicker719) NoFunction
          CFI (cfiPicker719) Picker
        LCALL   ?Subroutine95 & 0xFFFF
??CrossCallReturnLabel_135:
        MOV     A,R7
        CLR     C
        SUBB    A,R0
        RET
          CFI EndBlock cfiCond717
          CFI EndBlock cfiCond718
          CFI EndBlock cfiPicker719

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine95:
          CFI Block cfiCond720 Using cfiCommon0
          CFI Function zclProcessInWriteCmd
          CFI Conditional ??CrossCallReturnLabel_134
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond721 Using cfiCommon0
          CFI (cfiCond721) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond721) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_55
          CFI (cfiCond721) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond721) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond721) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond721) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond721) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond721) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond721) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond721) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond721) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond721) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond721) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond721) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond721) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond721) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond721) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond721) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond721) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond721) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond721) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond721) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond721) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond721) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond721) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond721) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond721) CFA_SP SP+0
          CFI (cfiCond721) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond722 Using cfiCommon0
          CFI (cfiCond722) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond722) Conditional ??CrossCallReturnLabel_135, ??CrossCallReturnLabel_56
          CFI (cfiCond722) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond722) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond722) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond722) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond722) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond722) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond722) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond722) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond722) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond722) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond722) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond722) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond722) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond722) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond722) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond722) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond722) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond722) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond722) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond722) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond722) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond722) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond722) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond722) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond722) CFA_SP SP+0
          CFI (cfiCond722) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker723 Using cfiCommon1
          CFI (cfiPicker723) NoFunction
          CFI (cfiPicker723) Picker
        LCALL   ?Subroutine109 & 0xFFFF
??CrossCallReturnLabel_151:
        MOVX    A,@DPTR
        MOV     R0,A
        RET
          CFI EndBlock cfiCond720
          CFI EndBlock cfiCond721
          CFI EndBlock cfiCond722
          CFI EndBlock cfiPicker723

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine44:
          CFI Block cfiCond724 Using cfiCommon0
          CFI Function zclProcessInWriteCmd
          CFI Conditional ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond725 Using cfiCommon0
          CFI (cfiCond725) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond725) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond725) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond725) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond725) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond725) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond725) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond725) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond725) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond725) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond725) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond725) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond725) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond725) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond725) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond725) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond725) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond725) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond725) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond725) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond725) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond725) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond725) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond725) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond725) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond725) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond725) CFA_SP SP+0
          CFI (cfiCond725) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker726 Using cfiCommon1
          CFI (cfiPicker726) NoFunction
          CFI (cfiPicker726) Picker
        LCALL   ?Subroutine94 & 0xFFFF
??CrossCallReturnLabel_133:
        MOV     ?V0 + 2,DPL
        MOV     ?V0 + 3,DPH
        RET
          CFI EndBlock cfiCond724
          CFI EndBlock cfiCond725
          CFI EndBlock cfiPicker726

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine94:
          CFI Block cfiCond727 Using cfiCommon0
          CFI Function zclProcessInWriteUndividedCmd
          CFI Conditional ??CrossCallReturnLabel_132
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond728 Using cfiCommon0
          CFI (cfiCond728) Function zclProcessInWriteCmd
          CFI (cfiCond728) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_49
          CFI (cfiCond728) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond728) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond728) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond728) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond728) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond728) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond728) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond728) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond728) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond728) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond728) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond728) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond728) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond728) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond728) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond728) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond728) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond728) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond728) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond728) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond728) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond728) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond728) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond728) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond728) CFA_SP SP+0
          CFI (cfiCond728) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond729 Using cfiCommon0
          CFI (cfiCond729) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond729) Conditional ??CrossCallReturnLabel_133, ??CrossCallReturnLabel_50
          CFI (cfiCond729) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond729) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond729) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond729) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond729) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond729) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond729) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond729) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond729) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond729) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond729) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond729) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond729) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond729) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond729) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond729) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond729) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond729) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond729) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond729) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond729) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond729) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond729) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond729) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond729) CFA_SP SP+0
          CFI (cfiCond729) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker730 Using cfiCommon1
          CFI (cfiPicker730) NoFunction
          CFI (cfiPicker730) Picker
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        MOV     DPH,A
        INC     DPTR
        RET
          CFI EndBlock cfiCond727
          CFI EndBlock cfiCond728
          CFI EndBlock cfiCond729
          CFI EndBlock cfiPicker730

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine40:
          CFI Block cfiCond731 Using cfiCommon0
          CFI Function zclProcessInWriteCmd
          CFI Conditional ??CrossCallReturnLabel_42
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond732 Using cfiCommon0
          CFI (cfiCond732) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond732) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond732) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond732) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond732) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond732) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond732) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond732) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond732) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond732) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond732) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond732) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond732) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond732) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond732) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond732) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond732) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond732) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond732) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond732) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond732) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond732) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond732) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond732) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond732) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond732) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond732) CFA_SP SP+0
          CFI (cfiCond732) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker733 Using cfiCommon1
          CFI (cfiPicker733) NoFunction
          CFI (cfiPicker733) Picker
        LCALL   ?Subroutine96 & 0xFFFF
??CrossCallReturnLabel_137:
        MOVX    A,@DPTR
        MOV     B,#0x3
        LCALL   ?Subroutine106 & 0xFFFF
??CrossCallReturnLabel_148:
        RET
          CFI EndBlock cfiCond731
          CFI EndBlock cfiCond732
          CFI EndBlock cfiPicker733

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine106:
          CFI Block cfiCond734 Using cfiCommon0
          CFI Function zclProcessInReadCmd
          CFI Conditional ??CrossCallReturnLabel_147
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond735 Using cfiCommon0
          CFI (cfiCond735) Function zclProcessInWriteCmd
          CFI (cfiCond735) Conditional ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_42
          CFI (cfiCond735) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond735) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond735) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond735) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond735) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond735) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond735) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond735) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond735) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond735) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond735) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond735) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond735) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond735) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond735) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond735) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond735) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond735) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond735) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond735) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond735) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond735) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond735) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond735) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond735) CFA_SP SP+0
          CFI (cfiCond735) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond736 Using cfiCommon0
          CFI (cfiCond736) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond736) Conditional ??CrossCallReturnLabel_148, ??CrossCallReturnLabel_43
          CFI (cfiCond736) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond736) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond736) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond736) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond736) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond736) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond736) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond736) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond736) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond736) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond736) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond736) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond736) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond736) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond736) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond736) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond736) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond736) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond736) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond736) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond736) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond736) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond736) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond736) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond736) CFA_SP SP+0
          CFI (cfiCond736) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker737 Using cfiCommon1
          CFI (cfiPicker737) NoFunction
          CFI (cfiPicker737) Picker
        MUL     AB
        ADD     A,#0x1
        MOV     R2,A
        MOV     A,B
        ADDC    A,#0x0
        MOV     R3,A
        RET
          CFI EndBlock cfiCond734
          CFI EndBlock cfiCond735
          CFI EndBlock cfiCond736
          CFI EndBlock cfiPicker737

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine38:
          CFI Block cfiCond738 Using cfiCommon0
          CFI Function zclProcessInWriteCmd
          CFI Conditional ??CrossCallReturnLabel_40
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond739 Using cfiCommon0
          CFI (cfiCond739) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond739) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond739) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond739) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond739) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond739) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond739) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond739) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond739) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond739) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond739) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond739) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond739) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond739) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond739) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond739) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond739) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond739) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond739) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond739) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond739) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond739) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond739) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond739) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond739) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond739) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond739) CFA_SP SP+0
          CFI (cfiCond739) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker740 Using cfiCommon1
          CFI (cfiPicker740) NoFunction
          CFI (cfiPicker740) Picker
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        ; Setup parameters for call to function zcl_SendWriteRsp
        ; Setup parameters for call to function zcl_SendWriteRsp
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        RET
          CFI EndBlock cfiCond738
          CFI EndBlock cfiCond739
          CFI EndBlock cfiPicker740

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine34:
          CFI Block cfiCond741 Using cfiCommon0
          CFI Function zclProcessInWriteCmd
          CFI Conditional ??CrossCallReturnLabel_33
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond742 Using cfiCommon0
          CFI (cfiCond742) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond742) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond742) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond742) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond742) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond742) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond742) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond742) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond742) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond742) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond742) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond742) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond742) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond742) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond742) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond742) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond742) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond742) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond742) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond742) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond742) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond742) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond742) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond742) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond742) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond742) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond742) CFA_SP SP+0
          CFI (cfiCond742) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiPicker743 Using cfiCommon1
          CFI (cfiPicker743) NoFunction
          CFI (cfiPicker743) Picker
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine91 & 0xFFFF
??CrossCallReturnLabel_332:
        LCALL   ?Subroutine104 & 0xFFFF
??CrossCallReturnLabel_146:
        LCALL   ?Subroutine102 & 0xFFFF
??CrossCallReturnLabel_271:
        RET
          CFI EndBlock cfiCond741
          CFI EndBlock cfiCond742
          CFI EndBlock cfiPicker743

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine104:
          CFI Block cfiCond744 Using cfiCommon0
          CFI Function zclRevertWriteUndividedCmd
          CFI Conditional ??CrossCallReturnLabel_145
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond745 Using cfiCommon0
          CFI (cfiCond745) Function zclProcessInWriteCmd
          CFI (cfiCond745) Conditional ??CrossCallReturnLabel_146, ??CrossCallReturnLabel_33
          CFI (cfiCond745) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond745) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond745) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond745) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond745) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond745) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond745) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond745) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond745) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond745) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond745) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond745) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond745) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond745) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond745) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond745) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond745) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond745) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond745) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond745) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond745) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond745) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond745) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond745) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond745) CFA_SP SP+0
          CFI (cfiCond745) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond746 Using cfiCommon0
          CFI (cfiCond746) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond746) Conditional ??CrossCallReturnLabel_146, ??CrossCallReturnLabel_34
          CFI (cfiCond746) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond746) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond746) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond746) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond746) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond746) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond746) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond746) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond746) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond746) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond746) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond746) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond746) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond746) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond746) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond746) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond746) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond746) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond746) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond746) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond746) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond746) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond746) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond746) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond746) CFA_SP SP+0
          CFI (cfiCond746) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiPicker747 Using cfiCommon1
          CFI (cfiPicker747) NoFunction
          CFI (cfiPicker747) Picker
        MOV     A,R6
        ADD     A,#0x6
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,R6
        LCALL   ??Subroutine146_0 & 0xFFFF
??CrossCallReturnLabel_343:
        MOV     A,R7
        RET
          CFI EndBlock cfiCond744
          CFI EndBlock cfiCond745
          CFI EndBlock cfiCond746
          CFI EndBlock cfiPicker747

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine111:
          CFI Block cfiCond748 Using cfiCommon0
          CFI Function zcl_HandleExternal
          CFI Conditional ??CrossCallReturnLabel_344
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond749 Using cfiCommon0
          CFI (cfiCond749) Function zcl_ProcessMessageMSG
          CFI (cfiCond749) Conditional ??CrossCallReturnLabel_345, ??CrossCallReturnLabel_57
          CFI (cfiCond749) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond749) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond749) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond749) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond749) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond749) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond749) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond749) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond749) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond749) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond749) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond749) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond749) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond749) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond749) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond749) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond749) CFA_SP SP+0
          CFI (cfiCond749) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond750 Using cfiCommon0
          CFI (cfiCond750) Function zcl_ProcessMessageMSG
          CFI (cfiCond750) Conditional ??CrossCallReturnLabel_345, ??CrossCallReturnLabel_58
          CFI (cfiCond750) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond750) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond750) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond750) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond750) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond750) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond750) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond750) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond750) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond750) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond750) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond750) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond750) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond750) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond750) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond750) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond750) CFA_SP SP+0
          CFI (cfiCond750) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker751 Using cfiCommon1
          CFI (cfiPicker751) NoFunction
          CFI (cfiPicker751) Picker
        INC     DPTR
        MOVX    A,@DPTR
        XCH     A,R0
          CFI EndBlock cfiCond748
          CFI EndBlock cfiCond749
          CFI EndBlock cfiCond750
          CFI EndBlock cfiPicker751
        REQUIRE ??Subroutine146_0
        ; // Fall through to label ??Subroutine146_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine146_0:
          CFI Block cfiCond752 Using cfiCommon0
          CFI Function zclProcessInWriteUndividedCmd
          CFI Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_260
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond753 Using cfiCommon0
          CFI (cfiCond753) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond753) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_261
          CFI (cfiCond753) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond753) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond753) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond753) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond753) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond753) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond753) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond753) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond753) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond753) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond753) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond753) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond753) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond753) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond753) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond753) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond753) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond753) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond753) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond753) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond753) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond753) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond753) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond753) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond753) CFA_SP SP+0
          CFI (cfiCond753) CFA_XSP16 add(XSP16, 40)
          CFI Block cfiCond754 Using cfiCommon0
          CFI (cfiCond754) Function zclProcessInReadCmd
          CFI (cfiCond754) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_258
          CFI (cfiCond754) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond754) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond754) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond754) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond754) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond754) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond754) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond754) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond754) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond754) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond754) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond754) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond754) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond754) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond754) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond754) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond754) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond754) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond754) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond754) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond754) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond754) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond754) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond754) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond754) CFA_SP SP+0
          CFI (cfiCond754) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond755 Using cfiCommon0
          CFI (cfiCond755) Function zclProcessInWriteCmd
          CFI (cfiCond755) Conditional ??CrossCallReturnLabel_346, ??CrossCallReturnLabel_259
          CFI (cfiCond755) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond755) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond755) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond755) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond755) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond755) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond755) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond755) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond755) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond755) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond755) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond755) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond755) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond755) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond755) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond755) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond755) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond755) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond755) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond755) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond755) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond755) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond755) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond755) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond755) CFA_SP SP+0
          CFI (cfiCond755) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond756 Using cfiCommon0
          CFI (cfiCond756) Function zclProcessInReadCmd
          CFI (cfiCond756) Conditional ??CrossCallReturnLabel_347, ??CrossCallReturnLabel_268
          CFI (cfiCond756) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond756) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond756) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond756) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond756) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond756) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond756) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond756) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond756) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond756) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond756) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond756) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond756) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond756) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond756) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond756) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond756) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond756) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond756) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond756) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond756) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond756) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond756) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond756) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond756) CFA_SP SP+0
          CFI (cfiCond756) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond757 Using cfiCommon0
          CFI (cfiCond757) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond757) Conditional ??CrossCallReturnLabel_347, ??CrossCallReturnLabel_269
          CFI (cfiCond757) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond757) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond757) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond757) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond757) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond757) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond757) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond757) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond757) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond757) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond757) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond757) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond757) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond757) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond757) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond757) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond757) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond757) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond757) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond757) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond757) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond757) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond757) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond757) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond757) CFA_SP SP+0
          CFI (cfiCond757) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond758 Using cfiCommon0
          CFI (cfiCond758) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond758) Conditional ??CrossCallReturnLabel_347, ??CrossCallReturnLabel_270
          CFI (cfiCond758) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond758) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond758) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond758) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond758) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond758) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond758) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond758) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond758) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond758) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond758) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond758) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond758) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond758) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond758) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond758) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond758) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond758) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond758) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond758) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond758) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond758) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond758) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond758) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond758) CFA_SP SP+0
          CFI (cfiCond758) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond759 Using cfiCommon0
          CFI (cfiCond759) Function zclRevertWriteUndividedCmd
          CFI (cfiCond759) Conditional ??CrossCallReturnLabel_347, ??CrossCallReturnLabel_266
          CFI (cfiCond759) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond759) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond759) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond759) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond759) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond759) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond759) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond759) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond759) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond759) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond759) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond759) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond759) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond759) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond759) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond759) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond759) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond759) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond759) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond759) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond759) CFA_SP SP+0
          CFI (cfiCond759) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond760 Using cfiCommon0
          CFI (cfiCond760) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond760) Conditional ??CrossCallReturnLabel_347, ??CrossCallReturnLabel_267
          CFI (cfiCond760) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond760) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond760) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond760) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond760) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond760) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond760) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond760) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond760) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond760) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond760) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond760) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond760) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond760) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond760) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond760) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond760) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond760) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond760) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond760) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond760) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond760) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond760) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond760) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond760) CFA_SP SP+0
          CFI (cfiCond760) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond761 Using cfiCommon0
          CFI (cfiCond761) Function zclProcessInReadCmd
          CFI (cfiCond761) Conditional ??CrossCallReturnLabel_342, ??CrossCallReturnLabel_102
          CFI (cfiCond761) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond761) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond761) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond761) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond761) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond761) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond761) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond761) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond761) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond761) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond761) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond761) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond761) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond761) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond761) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond761) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond761) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond761) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond761) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond761) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond761) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond761) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond761) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond761) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond761) CFA_SP SP+0
          CFI (cfiCond761) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond762 Using cfiCommon0
          CFI (cfiCond762) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond762) Conditional ??CrossCallReturnLabel_342, ??CrossCallReturnLabel_103
          CFI (cfiCond762) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond762) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond762) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond762) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond762) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond762) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond762) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond762) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond762) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond762) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond762) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond762) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond762) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond762) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond762) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond762) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond762) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond762) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond762) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond762) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond762) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond762) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond762) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond762) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond762) CFA_SP SP+0
          CFI (cfiCond762) CFA_XSP16 add(XSP16, 38)
          CFI Block cfiCond763 Using cfiCommon0
          CFI (cfiCond763) Function zclRevertWriteUndividedCmd
          CFI (cfiCond763) Conditional ??CrossCallReturnLabel_343, ??CrossCallReturnLabel_145
          CFI (cfiCond763) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond763) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond763) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond763) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond763) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond763) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond763) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond763) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond763) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond763) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond763) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond763) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond763) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond763) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond763) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond763) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond763) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond763) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond763) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond763) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond763) CFA_SP SP+0
          CFI (cfiCond763) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond764 Using cfiCommon0
          CFI (cfiCond764) Function zclProcessInWriteCmd
          CFI (cfiCond764) Conditional ??CrossCallReturnLabel_343, ??CrossCallReturnLabel_146, ??CrossCallReturnLabel_33
          CFI (cfiCond764) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond764) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond764) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond764) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond764) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond764) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond764) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond764) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond764) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond764) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond764) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond764) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond764) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond764) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond764) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond764) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond764) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond764) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond764) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond764) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond764) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond764) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond764) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond764) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond764) CFA_SP SP+0
          CFI (cfiCond764) CFA_XSP16 add(XSP16, 39)
          CFI Block cfiCond765 Using cfiCommon0
          CFI (cfiCond765) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond765) Conditional ??CrossCallReturnLabel_343, ??CrossCallReturnLabel_146, ??CrossCallReturnLabel_34
          CFI (cfiCond765) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond765) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond765) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond765) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond765) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond765) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond765) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond765) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond765) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond765) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond765) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond765) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond765) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond765) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond765) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond765) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond765) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond765) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond765) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond765) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond765) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond765) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond765) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond765) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond765) CFA_SP SP+0
          CFI (cfiCond765) CFA_XSP16 add(XSP16, 41)
          CFI Block cfiCond766 Using cfiCommon0
          CFI (cfiCond766) Function zcl_HandleExternal
          CFI (cfiCond766) Conditional ??CrossCallReturnLabel_344
          CFI (cfiCond766) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond766) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond766) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond766) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond766) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond766) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond766) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond766) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond766) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond766) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond766) CFA_SP SP+0
          CFI (cfiCond766) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond767 Using cfiCommon0
          CFI (cfiCond767) Function zcl_ProcessMessageMSG
          CFI (cfiCond767) Conditional ??CrossCallReturnLabel_345, ??CrossCallReturnLabel_57
          CFI (cfiCond767) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond767) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond767) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond767) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond767) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond767) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond767) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond767) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond767) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond767) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond767) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond767) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond767) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond767) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond767) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond767) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond767) CFA_SP SP+0
          CFI (cfiCond767) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiCond768 Using cfiCommon0
          CFI (cfiCond768) Function zcl_ProcessMessageMSG
          CFI (cfiCond768) Conditional ??CrossCallReturnLabel_345, ??CrossCallReturnLabel_58
          CFI (cfiCond768) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond768) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond768) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond768) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond768) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond768) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond768) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond768) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond768) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond768) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond768) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond768) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond768) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond768) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond768) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond768) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond768) CFA_SP SP+0
          CFI (cfiCond768) CFA_XSP16 add(XSP16, 44)
          CFI Block cfiPicker769 Using cfiCommon1
          CFI (cfiPicker769) NoFunction
          CFI (cfiPicker769) Picker
        ADD     A,#0x14
        MOV     DPL,A
        RET
          CFI EndBlock cfiCond752
          CFI EndBlock cfiCond753
          CFI EndBlock cfiCond754
          CFI EndBlock cfiCond755
          CFI EndBlock cfiCond756
          CFI EndBlock cfiCond757
          CFI EndBlock cfiCond758
          CFI EndBlock cfiCond759
          CFI EndBlock cfiCond760
          CFI EndBlock cfiCond761
          CFI EndBlock cfiCond762
          CFI EndBlock cfiCond763
          CFI EndBlock cfiCond764
          CFI EndBlock cfiCond765
          CFI EndBlock cfiCond766
          CFI EndBlock cfiCond767
          CFI EndBlock cfiCond768
          CFI EndBlock cfiPicker769

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond770 Using cfiCommon0
          CFI Function zclProcessInWriteCmd
          CFI Conditional ??CrossCallReturnLabel_29
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond771 Using cfiCommon0
          CFI (cfiCond771) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond771) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond771) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond771) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond771) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond771) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond771) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond771) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond771) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond771) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond771) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond771) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond771) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond771) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond771) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond771) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond771) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond771) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond771) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond771) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond771) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond771) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond771) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond771) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond771) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond771) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond771) CFA_SP SP+0
          CFI (cfiCond771) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker772 Using cfiCommon1
          CFI (cfiPicker772) NoFunction
          CFI (cfiPicker772) Picker
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     A
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond770
          CFI EndBlock cfiCond771
          CFI EndBlock cfiPicker772

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond773 Using cfiCommon0
          CFI Function zcl_SendCommand
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond774 Using cfiCommon0
          CFI (cfiCond774) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond774) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond774) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond774) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond774) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond774) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond774) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond774) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond774) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond774) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond774) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond774) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond774) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond774) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond774) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond774) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond774) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond774) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond774) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond774) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond774) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond774) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond774) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond774) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond774) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond774) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond774) CFA_SP SP+0
          CFI (cfiCond774) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker775 Using cfiCommon1
          CFI (cfiPicker775) NoFunction
          CFI (cfiPicker775) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 12
        MOV     DPH,?V0 + 13
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond773
          CFI EndBlock cfiCond774
          CFI EndBlock cfiPicker775

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond776 Using cfiCommon0
          CFI Function zclProcessInWriteCmd
          CFI Conditional ??CrossCallReturnLabel_10
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond777 Using cfiCommon0
          CFI (cfiCond777) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond777) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond777) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond777) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond777) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond777) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond777) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond777) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond777) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond777) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond777) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond777) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond777) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond777) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond777) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond777) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond777) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond777) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond777) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond777) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond777) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond777) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond777) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond777) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond777) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond777) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond777) CFA_SP SP+0
          CFI (cfiCond777) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker778 Using cfiCommon1
          CFI (cfiPicker778) NoFunction
          CFI (cfiPicker778) Picker
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ?Subroutine99 & 0xFFFF
??CrossCallReturnLabel_286:
        RET
          CFI EndBlock cfiCond776
          CFI EndBlock cfiCond777
          CFI EndBlock cfiPicker778

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine99:
          CFI Block cfiCond779 Using cfiCommon0
          CFI Function zcl_ProcessMessageMSG
          CFI Conditional ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_206
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond780 Using cfiCommon0
          CFI (cfiCond780) Function zcl_ProcessMessageMSG
          CFI (cfiCond780) Conditional ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_207
          CFI (cfiCond780) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond780) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond780) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond780) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond780) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond780) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond780) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond780) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond780) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond780) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond780) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond780) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond780) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond780) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond780) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond780) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond780) CFA_SP SP+0
          CFI (cfiCond780) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond781 Using cfiCommon0
          CFI (cfiCond781) Function zcl_ProcessMessageMSG
          CFI (cfiCond781) Conditional ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_205
          CFI (cfiCond781) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond781) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond781) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond781) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond781) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond781) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond781) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond781) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond781) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond781) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond781) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond781) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond781) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond781) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond781) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond781) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond781) CFA_SP SP+0
          CFI (cfiCond781) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond782 Using cfiCommon0
          CFI (cfiCond782) Function zcl_SendCommand
          CFI (cfiCond782) Conditional ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_194
          CFI (cfiCond782) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond782) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond782) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond782) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond782) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond782) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond782) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond782) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond782) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond782) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond782) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond782) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond782) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond782) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond782) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond782) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond782) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond782) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond782) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond782) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond782) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond782) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond782) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond782) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond782) CFA_SP SP+0
          CFI (cfiCond782) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond783 Using cfiCommon0
          CFI (cfiCond783) Function zcl_SendCommand
          CFI (cfiCond783) Conditional ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_197
          CFI (cfiCond783) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond783) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond783) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond783) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond783) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond783) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond783) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond783) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond783) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond783) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond783) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond783) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond783) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond783) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond783) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond783) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond783) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond783) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond783) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond783) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond783) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond783) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond783) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond783) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond783) CFA_SP SP+0
          CFI (cfiCond783) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond784 Using cfiCommon0
          CFI (cfiCond784) Function zcl_SendCommand
          CFI (cfiCond784) Conditional ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_195
          CFI (cfiCond784) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond784) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond784) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond784) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond784) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond784) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond784) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond784) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond784) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond784) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond784) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond784) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond784) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond784) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond784) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond784) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond784) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond784) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond784) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond784) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond784) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond784) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond784) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond784) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond784) CFA_SP SP+0
          CFI (cfiCond784) CFA_XSP16 add(XSP16, 30)
          CFI Block cfiCond785 Using cfiCommon0
          CFI (cfiCond785) Function zcl_ProcessMessageMSG
          CFI (cfiCond785) Conditional ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_198
          CFI (cfiCond785) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond785) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond785) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond785) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond785) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond785) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond785) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond785) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond785) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond785) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond785) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond785) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond785) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond785) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond785) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond785) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond785) CFA_SP SP+0
          CFI (cfiCond785) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond786 Using cfiCommon0
          CFI (cfiCond786) Function zcl_ProcessMessageMSG
          CFI (cfiCond786) Conditional ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_199
          CFI (cfiCond786) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond786) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond786) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond786) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond786) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond786) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond786) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond786) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond786) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond786) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond786) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond786) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond786) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond786) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond786) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond786) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond786) CFA_SP SP+0
          CFI (cfiCond786) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond787 Using cfiCommon0
          CFI (cfiCond787) Function zcl_ProcessMessageMSG
          CFI (cfiCond787) Conditional ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_200
          CFI (cfiCond787) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond787) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond787) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond787) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond787) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond787) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond787) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond787) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond787) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond787) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond787) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond787) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond787) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond787) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond787) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond787) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond787) CFA_SP SP+0
          CFI (cfiCond787) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond788 Using cfiCommon0
          CFI (cfiCond788) Function zclFindClusterOption
          CFI (cfiCond788) Conditional ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_196
          CFI (cfiCond788) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond788) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond788) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond788) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond788) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond788) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond788) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond788) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond788) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond788) CFA_SP SP+0
          CFI (cfiCond788) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond789 Using cfiCommon0
          CFI (cfiCond789) Function zcl_ReadAttrData
          CFI (cfiCond789) Conditional ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_201
          CFI (cfiCond789) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond789) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond789) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond789) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond789) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond789) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond789) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond789) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond789) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond789) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond789) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond789) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond789) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond789) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond789) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond789) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond789) CFA_SP SP+0
          CFI (cfiCond789) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond790 Using cfiCommon0
          CFI (cfiCond790) Function zclWriteAttrData
          CFI (cfiCond790) Conditional ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_202
          CFI (cfiCond790) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond790) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond790) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond790) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond790) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond790) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond790) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond790) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond790) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond790) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond790) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond790) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond790) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond790) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond790) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond790) CFA_SP SP+0
          CFI (cfiCond790) CFA_XSP16 add(XSP16, 15)
          CFI Block cfiCond791 Using cfiCommon0
          CFI (cfiCond791) Function zclProcessInWriteCmd
          CFI (cfiCond791) Conditional ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_203
          CFI (cfiCond791) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond791) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond791) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond791) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond791) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond791) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond791) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond791) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond791) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond791) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond791) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond791) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond791) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond791) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond791) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond791) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond791) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond791) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond791) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond791) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond791) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond791) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond791) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond791) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond791) CFA_SP SP+0
          CFI (cfiCond791) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond792 Using cfiCommon0
          CFI (cfiCond792) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond792) Conditional ??CrossCallReturnLabel_290, ??CrossCallReturnLabel_204
          CFI (cfiCond792) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond792) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond792) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond792) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond792) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond792) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond792) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond792) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond792) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond792) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond792) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond792) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond792) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond792) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond792) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond792) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond792) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond792) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond792) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond792) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond792) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond792) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond792) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond792) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond792) CFA_SP SP+0
          CFI (cfiCond792) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond793 Using cfiCommon0
          CFI (cfiCond793) Function zclParseInWriteCmd
          CFI (cfiCond793) Conditional ??CrossCallReturnLabel_287, ??CrossCallReturnLabel_35
          CFI (cfiCond793) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond793) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond793) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond793) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond793) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond793) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond793) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond793) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond793) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond793) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond793) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond793) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond793) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond793) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond793) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond793) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond793) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond793) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond793) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond793) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond793) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond793) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond793) CFA_SP SP+0
          CFI (cfiCond793) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond794 Using cfiCommon0
          CFI (cfiCond794) Function zclParseInWriteRspCmd
          CFI (cfiCond794) Conditional ??CrossCallReturnLabel_287, ??CrossCallReturnLabel_36
          CFI (cfiCond794) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond794) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond794) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond794) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond794) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond794) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond794) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond794) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond794) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond794) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond794) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond794) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond794) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond794) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond794) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond794) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond794) CFA_SP SP+0
          CFI (cfiCond794) CFA_XSP16 add(XSP16, 16)
          CFI Block cfiCond795 Using cfiCommon0
          CFI (cfiCond795) Function zclParseInReadCmd
          CFI (cfiCond795) Conditional ??CrossCallReturnLabel_289, ??CrossCallReturnLabel_87
          CFI (cfiCond795) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond795) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond795) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond795) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond795) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond795) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond795) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond795) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond795) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond795) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond795) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond795) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond795) CFA_SP SP+0
          CFI (cfiCond795) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond796 Using cfiCommon0
          CFI (cfiCond796) Function zclProcessInReadCmd
          CFI (cfiCond796) Conditional ??CrossCallReturnLabel_289, ??CrossCallReturnLabel_88
          CFI (cfiCond796) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond796) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond796) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond796) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond796) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond796) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond796) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond796) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond796) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond796) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond796) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond796) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond796) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond796) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond796) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond796) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond796) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond796) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond796) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond796) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond796) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond796) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond796) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond796) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond796) CFA_SP SP+0
          CFI (cfiCond796) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond797 Using cfiCommon0
          CFI (cfiCond797) Function zclProcessInWriteCmd
          CFI (cfiCond797) Conditional ??CrossCallReturnLabel_289, ??CrossCallReturnLabel_89
          CFI (cfiCond797) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond797) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond797) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond797) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond797) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond797) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond797) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond797) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond797) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond797) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond797) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond797) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond797) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond797) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond797) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond797) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond797) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond797) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond797) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond797) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond797) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond797) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond797) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond797) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond797) CFA_SP SP+0
          CFI (cfiCond797) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond798 Using cfiCommon0
          CFI (cfiCond798) Function zclParseInReadRspCmd
          CFI (cfiCond798) Conditional ??CrossCallReturnLabel_288, ??CrossCallReturnLabel_44
          CFI (cfiCond798) R6 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond798) VB load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond798) V0 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond798) V1 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond798) V2 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond798) V3 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond798) V4 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond798) V5 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond798) V6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond798) V7 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond798) V8 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond798) V9 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond798) V10 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond798) V11 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond798) V12 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond798) V13 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond798) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond798) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond798) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond798) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond798) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond798) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond798) CFA_SP SP+0
          CFI (cfiCond798) CFA_XSP16 add(XSP16, 22)
          CFI Block cfiCond799 Using cfiCommon0
          CFI (cfiCond799) Function zclProcessInReadCmd
          CFI (cfiCond799) Conditional ??CrossCallReturnLabel_288, ??CrossCallReturnLabel_45
          CFI (cfiCond799) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond799) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond799) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond799) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond799) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond799) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond799) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond799) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond799) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond799) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond799) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond799) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond799) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond799) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond799) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond799) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond799) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond799) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond799) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond799) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond799) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond799) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond799) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond799) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond799) CFA_SP SP+0
          CFI (cfiCond799) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond800 Using cfiCommon0
          CFI (cfiCond800) Function zclProcessInReadCmd
          CFI (cfiCond800) Conditional ??CrossCallReturnLabel_288, ??CrossCallReturnLabel_46
          CFI (cfiCond800) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond800) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond800) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond800) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond800) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond800) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond800) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond800) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond800) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond800) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond800) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond800) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond800) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond800) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond800) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond800) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond800) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond800) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond800) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond800) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond800) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond800) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond800) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond800) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond800) CFA_SP SP+0
          CFI (cfiCond800) CFA_XSP16 add(XSP16, 32)
          CFI Block cfiCond801 Using cfiCommon0
          CFI (cfiCond801) Function zclProcessInWriteCmd
          CFI (cfiCond801) Conditional ??CrossCallReturnLabel_291, ??CrossCallReturnLabel_275
          CFI (cfiCond801) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond801) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond801) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond801) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond801) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond801) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond801) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond801) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond801) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond801) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond801) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond801) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond801) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond801) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond801) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond801) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond801) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond801) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond801) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond801) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond801) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond801) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond801) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond801) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond801) CFA_SP SP+0
          CFI (cfiCond801) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond802 Using cfiCommon0
          CFI (cfiCond802) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond802) Conditional ??CrossCallReturnLabel_291, ??CrossCallReturnLabel_276
          CFI (cfiCond802) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond802) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond802) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond802) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond802) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond802) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond802) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond802) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond802) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond802) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond802) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond802) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond802) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond802) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond802) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond802) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond802) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond802) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond802) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond802) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond802) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond802) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond802) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond802) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond802) CFA_SP SP+0
          CFI (cfiCond802) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond803 Using cfiCommon0
          CFI (cfiCond803) Function zcl_SendReadRsp
          CFI (cfiCond803) Conditional ??CrossCallReturnLabel_291, ??CrossCallReturnLabel_277
          CFI (cfiCond803) R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond803) VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond803) V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond803) V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond803) V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond803) V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond803) V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond803) V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond803) V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond803) V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond803) V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond803) V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond803) V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond803) V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond803) V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond803) V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond803) V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond803) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond803) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond803) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond803) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond803) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond803) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond803) CFA_SP SP+0
          CFI (cfiCond803) CFA_XSP16 add(XSP16, 27)
          CFI Block cfiCond804 Using cfiCommon0
          CFI (cfiCond804) Function zcl_ProcessMessageMSG
          CFI (cfiCond804) Conditional ??CrossCallReturnLabel_291, ??CrossCallReturnLabel_278
          CFI (cfiCond804) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond804) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond804) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond804) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond804) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond804) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond804) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond804) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond804) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond804) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond804) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond804) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond804) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond804) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond804) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond804) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond804) CFA_SP SP+0
          CFI (cfiCond804) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond805 Using cfiCommon0
          CFI (cfiCond805) Function zcl_ProcessMessageMSG
          CFI (cfiCond805) Conditional ??CrossCallReturnLabel_291, ??CrossCallReturnLabel_279
          CFI (cfiCond805) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond805) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond805) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond805) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond805) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond805) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond805) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond805) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond805) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond805) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond805) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond805) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond805) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond805) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond805) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond805) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond805) CFA_SP SP+0
          CFI (cfiCond805) CFA_XSP16 add(XSP16, 37)
          CFI Block cfiCond806 Using cfiCommon0
          CFI (cfiCond806) Function zclRevertWriteUndividedCmd
          CFI (cfiCond806) Conditional ??CrossCallReturnLabel_291, ??CrossCallReturnLabel_280
          CFI (cfiCond806) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond806) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond806) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond806) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond806) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond806) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond806) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond806) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond806) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond806) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond806) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond806) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond806) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond806) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond806) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond806) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond806) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond806) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond806) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond806) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond806) CFA_SP SP+0
          CFI (cfiCond806) CFA_XSP16 add(XSP16, 28)
          CFI Block cfiCond807 Using cfiCommon0
          CFI (cfiCond807) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond807) Conditional ??CrossCallReturnLabel_291, ??CrossCallReturnLabel_281
          CFI (cfiCond807) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond807) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond807) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond807) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond807) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond807) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond807) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond807) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond807) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond807) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond807) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond807) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond807) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond807) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond807) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond807) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond807) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond807) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond807) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond807) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond807) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond807) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond807) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond807) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond807) CFA_SP SP+0
          CFI (cfiCond807) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond808 Using cfiCommon0
          CFI (cfiCond808) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond808) Conditional ??CrossCallReturnLabel_291, ??CrossCallReturnLabel_282
          CFI (cfiCond808) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond808) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond808) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond808) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond808) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond808) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond808) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond808) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond808) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond808) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond808) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond808) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond808) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond808) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond808) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond808) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond808) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond808) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond808) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond808) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond808) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond808) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond808) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond808) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond808) CFA_SP SP+0
          CFI (cfiCond808) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond809 Using cfiCommon0
          CFI (cfiCond809) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond809) Conditional ??CrossCallReturnLabel_291, ??CrossCallReturnLabel_283
          CFI (cfiCond809) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond809) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond809) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond809) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond809) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond809) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond809) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond809) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond809) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond809) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond809) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond809) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond809) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond809) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond809) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond809) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond809) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond809) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond809) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond809) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond809) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond809) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond809) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond809) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond809) CFA_SP SP+0
          CFI (cfiCond809) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond810 Using cfiCommon0
          CFI (cfiCond810) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond810) Conditional ??CrossCallReturnLabel_291, ??CrossCallReturnLabel_284
          CFI (cfiCond810) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond810) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond810) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond810) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond810) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond810) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond810) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond810) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond810) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond810) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond810) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond810) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond810) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond810) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond810) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond810) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond810) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond810) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond810) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond810) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond810) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond810) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond810) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond810) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond810) CFA_SP SP+0
          CFI (cfiCond810) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond811 Using cfiCommon0
          CFI (cfiCond811) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond811) Conditional ??CrossCallReturnLabel_291, ??CrossCallReturnLabel_285
          CFI (cfiCond811) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond811) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond811) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond811) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond811) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond811) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond811) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond811) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond811) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond811) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond811) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond811) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond811) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond811) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond811) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond811) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond811) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond811) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond811) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond811) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond811) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond811) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond811) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond811) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond811) CFA_SP SP+0
          CFI (cfiCond811) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond812 Using cfiCommon0
          CFI (cfiCond812) Function zclProcessInWriteCmd
          CFI (cfiCond812) Conditional ??CrossCallReturnLabel_286, ??CrossCallReturnLabel_10
          CFI (cfiCond812) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond812) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond812) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond812) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond812) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond812) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond812) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond812) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond812) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond812) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond812) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond812) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond812) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond812) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond812) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond812) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond812) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond812) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond812) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond812) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond812) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond812) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond812) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond812) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond812) CFA_SP SP+0
          CFI (cfiCond812) CFA_XSP16 add(XSP16, 34)
          CFI Block cfiCond813 Using cfiCommon0
          CFI (cfiCond813) Function zclProcessInWriteUndividedCmd
          CFI (cfiCond813) Conditional ??CrossCallReturnLabel_286, ??CrossCallReturnLabel_11
          CFI (cfiCond813) R6 load(1, XDATA, add(CFA_XSP16, literal(-24)))
          CFI (cfiCond813) VB load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI (cfiCond813) V0 load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI (cfiCond813) V1 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI (cfiCond813) V2 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond813) V3 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond813) V4 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond813) V5 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond813) V6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond813) V7 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond813) V8 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond813) V9 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond813) V10 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond813) V11 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond813) V12 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond813) V13 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond813) V14 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond813) V15 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond813) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond813) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond813) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond813) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond813) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond813) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond813) CFA_SP SP+0
          CFI (cfiCond813) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker814 Using cfiCommon1
          CFI (cfiPicker814) NoFunction
          CFI (cfiPicker814) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond779
          CFI EndBlock cfiCond780
          CFI EndBlock cfiCond781
          CFI EndBlock cfiCond782
          CFI EndBlock cfiCond783
          CFI EndBlock cfiCond784
          CFI EndBlock cfiCond785
          CFI EndBlock cfiCond786
          CFI EndBlock cfiCond787
          CFI EndBlock cfiCond788
          CFI EndBlock cfiCond789
          CFI EndBlock cfiCond790
          CFI EndBlock cfiCond791
          CFI EndBlock cfiCond792
          CFI EndBlock cfiCond793
          CFI EndBlock cfiCond794
          CFI EndBlock cfiCond795
          CFI EndBlock cfiCond796
          CFI EndBlock cfiCond797
          CFI EndBlock cfiCond798
          CFI EndBlock cfiCond799
          CFI EndBlock cfiCond800
          CFI EndBlock cfiCond801
          CFI EndBlock cfiCond802
          CFI EndBlock cfiCond803
          CFI EndBlock cfiCond804
          CFI EndBlock cfiCond805
          CFI EndBlock cfiCond806
          CFI EndBlock cfiCond807
          CFI EndBlock cfiCond808
          CFI EndBlock cfiCond809
          CFI EndBlock cfiCond810
          CFI EndBlock cfiCond811
          CFI EndBlock cfiCond812
          CFI EndBlock cfiCond813
          CFI EndBlock cfiPicker814

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zcl_RegisteredMsgTaskID>`:
        DATA8
        DB 255

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zcl_Init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zcl_event_loop?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zcl_registerForMsg?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerForMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zcl_HandleExternal?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_HandleExternal

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zcl_getRawAFMsg?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_getRawAFMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zcl_registerPlugin?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerPlugin

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zcl_registerAttrList?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerAttrList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zcl_registerClusterOptionList?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerClusterOptionList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zcl_registerValidateAttrData?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerValidateAttrData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zcl_registerReadWriteCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_registerReadWriteCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zcl_DeviceOperational?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_DeviceOperational

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zcl_SendCommand?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_SendCommand

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zcl_SendRead?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_SendRead

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zcl_SendReadRsp?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_SendReadRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zcl_SendWriteRequest?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_SendWriteRequest

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zcl_SendWriteRsp?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_SendWriteRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zcl_SendDefaultRspCmd?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_SendDefaultRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zcl_ProcessMessageMSG?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_ProcessMessageMSG

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclParseHdr?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclParseHdr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclBuildHdr?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclBuildHdr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclFindAttrRecsList?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclFindAttrRecsList

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclFindAttrRec?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclFindAttrRec

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclGetReadWriteCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGetReadWriteCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclGetAuthorizeCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGetAuthorizeCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclFindClusterOption?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclFindClusterOption

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSetSecurityOption?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSetSecurityOption

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclSerializeData?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclSerializeData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclGetDataTypeLength?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGetDataTypeLength

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclGetAttrDataLength?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGetAttrDataLength

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclReadAttrData?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclReadAttrData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zcl_ReadAttrData?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zcl_ReadAttrData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclGetAttrDataLengthUsingCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclGetAttrDataLengthUsingCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclReadAttrDataUsingCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclReadAttrDataUsingCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclWriteAttrData?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclWriteAttrData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclWriteAttrDataUsingCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclWriteAttrDataUsingCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclAuthorizeWrite?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclAuthorizeWrite

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclParseInReadCmd?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclParseInReadCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclParseInReadRspCmd?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclParseInReadRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclParseInWriteCmd?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclParseInWriteCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclParseInWriteRspCmd?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclParseInWriteRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclParseInDefaultRspCmd?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclParseInDefaultRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclProcessInReadCmd?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclProcessInReadCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclProcessInWriteCmd?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclProcessInWriteCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclRevertWriteUndividedCmd?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclRevertWriteUndividedCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zclProcessInWriteUndividedCmd?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zclProcessInWriteUndividedCmd

        END
// 4458 #endif // ZCL_WRITE
// 4459 
// 4460 #ifdef ZCL_DISCOVER
// 4461 /*********************************************************************
// 4462  * @fn      zclProcessInDiscAttrs
// 4463  *
// 4464  * @brief   Process the "Profile" Discover Attributes Commands
// 4465  *
// 4466  * @param   pInMsg - incoming message to process
// 4467  *
// 4468  * @return  TRUE if command processed. FALSE, otherwise.
// 4469  */
// 4470 static uint8 zclProcessInDiscAttrs( zclIncoming_t *pInMsg )
// 4471 {
// 4472   zclDiscoverAttrsCmd_t *pDiscoverCmd;
// 4473   zclAttrRec_t attrRec;
// 4474   uint16 attrID;
// 4475   uint8 numAttrs;
// 4476   uint8 i;
// 4477 
// 4478   pDiscoverCmd = (zclDiscoverAttrsCmd_t *)pInMsg->attrCmd;
// 4479 
// 4480   // Find out the number of attributes supported within the specified range
// 4481   for ( i = 0, attrID = pDiscoverCmd->startAttr; i < pDiscoverCmd->maxAttrIDs; i++, attrID++ )
// 4482   {
// 4483     // finds the next attribute on this endpoint/cluster after the range.
// 4484     // attributes must be in numerical order in the list.
// 4485     if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4486     {
// 4487       break;
// 4488     }
// 4489   }
// 4490 
// 4491   numAttrs = i;  // store range of attributes in buffer
// 4492 
// 4493     // Process message for either attributes or extended attributes
// 4494   if( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS )
// 4495   {
// 4496     zclProcessInDiscAttrsCmd( pInMsg, pDiscoverCmd, numAttrs );
// 4497   }
// 4498   else if ( pInMsg->hdr.commandID == ZCL_CMD_DISCOVER_ATTRS_EXT )
// 4499   {
// 4500     zclProcessInDiscAttrsExtCmd( pInMsg, pDiscoverCmd, numAttrs );
// 4501   }
// 4502 
// 4503   return TRUE;
// 4504 }
// 4505 
// 4506 /*********************************************************************
// 4507  * @fn      zclProcessInDiscAttrsCmd
// 4508  *
// 4509  * @brief   Process the Discover Attributes Command
// 4510  *
// 4511  * @param   pInMsg - incoming message to process
// 4512  *
// 4513  * @param   pDiscoverCmd - structure from requesting command
// 4514  *
// 4515  * @param   attrLenBuf - describes the amount of attributes to be processed
// 4516  *
// 4517  * @return  none
// 4518  */
// 4519 static void zclProcessInDiscAttrsCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
// 4520 {
// 4521   zclDiscoverAttrsRspCmd_t *pDiscoverRsp;
// 4522   uint8 discComplete = TRUE;
// 4523   zclAttrRec_t attrRec;
// 4524   uint16 attrID;
// 4525   uint8 i;
// 4526 
// 4527   // Allocate space for the response command
// 4528   pDiscoverRsp = (zclDiscoverAttrsRspCmd_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsRspCmd_t)
// 4529                                                           + sizeof ( zclDiscoverAttrInfo_t ) * numAttrs );
// 4530   if ( pDiscoverRsp == NULL )
// 4531   {
// 4532     return; // EMEDDED RETURN
// 4533   }
// 4534 
// 4535   if ( numAttrs != 0 )
// 4536   {
// 4537     for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
// 4538     {
// 4539       if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4540       {
// 4541         break; // should not happen, as numAttrs already calculated
// 4542       }
// 4543 
// 4544       pDiscoverRsp->attrList[i].attrID = attrRec.attr.attrId;
// 4545       pDiscoverRsp->attrList[i].dataType = attrRec.attr.dataType;
// 4546     }
// 4547 
// 4548     // Are there more attributes to be discovered?
// 4549     if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4550     {
// 4551       discComplete = FALSE;
// 4552     }
// 4553   }
// 4554 
// 4555   pDiscoverRsp->discComplete = discComplete;
// 4556   pDiscoverRsp->numAttr = numAttrs;
// 4557 
// 4558   zcl_SendDiscoverAttrsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 4559                                pInMsg->msg->clusterId, pDiscoverRsp, !(pInMsg->hdr.fc.direction),
// 4560                                true, pInMsg->hdr.transSeqNum );
// 4561   zcl_mem_free( pDiscoverRsp );
// 4562 
// 4563   return;
// 4564 }
// 4565 
// 4566 /*********************************************************************
// 4567  * @fn      zclProcessInDiscAttrsExtCmd
// 4568  *
// 4569  * @brief   Process the Discover Attributes Extended Command
// 4570  *
// 4571  * @param   pInMsg - incoming message to process
// 4572  *
// 4573  * @param   pDiscoverCmd - structure from requesting command
// 4574  *
// 4575  * @param   attrLenBuf - describes the amount of attributes to be processed
// 4576  *
// 4577  * @return  none
// 4578  */
// 4579 static void zclProcessInDiscAttrsExtCmd( zclIncoming_t *pInMsg, zclDiscoverAttrsCmd_t *pDiscoverCmd, uint8 numAttrs )
// 4580 {
// 4581   zclDiscoverAttrsExtRsp_t *pDiscoverExtRsp;
// 4582   uint8 discComplete = TRUE;
// 4583   zclAttrRec_t attrRec;
// 4584   uint16 attrID;
// 4585   uint8 i;
// 4586 
// 4587     // Allocate space for the response command
// 4588   pDiscoverExtRsp = (zclDiscoverAttrsExtRsp_t *)zcl_mem_alloc( sizeof (zclDiscoverAttrsExtRsp_t)
// 4589                                                          + sizeof ( zclExtAttrInfo_t ) * numAttrs );
// 4590   if ( pDiscoverExtRsp == NULL )
// 4591   {
// 4592     return; // EMEDDED RETURN
// 4593   }
// 4594 
// 4595 
// 4596   if ( numAttrs != 0 )
// 4597   {
// 4598     for ( i = 0, attrID = pDiscoverCmd->startAttr; i < numAttrs; i++, attrID++ )
// 4599     {
// 4600       if ( !zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4601       {
// 4602         break; // Should not happen, as numAttrs already calculated
// 4603       }
// 4604 
// 4605       pDiscoverExtRsp->aExtAttrInfo[i].attrID = attrRec.attr.attrId;
// 4606       pDiscoverExtRsp->aExtAttrInfo[i].attrDataType = attrRec.attr.dataType;
// 4607       pDiscoverExtRsp->aExtAttrInfo[i].attrAccessControl = attrRec.attr.accessControl & ACCESS_CONTROLEXT_MASK;
// 4608     }
// 4609 
// 4610     // Are there more attributes to be discovered?
// 4611     if ( zclFindNextAttrRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.fc.direction, &attrID, &attrRec ) )
// 4612     {
// 4613       discComplete = FALSE;
// 4614     }
// 4615   }
// 4616 
// 4617   pDiscoverExtRsp->discComplete = discComplete;
// 4618   pDiscoverExtRsp->numAttr = numAttrs;
// 4619 
// 4620   zcl_SendDiscoverAttrsExtRsp( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 4621                                pInMsg->msg->clusterId, pDiscoverExtRsp, !(pInMsg->hdr.fc.direction),
// 4622                                true, pInMsg->hdr.transSeqNum );
// 4623 
// 4624   zcl_mem_free( pDiscoverExtRsp );
// 4625 
// 4626   return;
// 4627 }
// 4628 
// 4629 /*********************************************************************
// 4630  * @fn      zclProcessInDiscCmd
// 4631  *
// 4632  * @brief   Process the "Profile" Discover Command
// 4633  *
// 4634  * @param   pInMsg - incoming message to process
// 4635  *
// 4636  * @return  TRUE if command processed. FALSE, otherwise.
// 4637  */
// 4638 static uint8 zclProcessInDiscCmd( zclIncoming_t *pInMsg )
// 4639 {
// 4640   zclDiscoverCmdsCmd_t *pDiscoverCmd;
// 4641   zclDiscoverCmdsCmdRsp_t cmdRsp;
// 4642   ZStatus_t status;
// 4643   zclCommandRec_t cmdRec;
// 4644   uint8 cmdID;
// 4645   uint8 i;
// 4646   uint8 j;
// 4647 
// 4648   pDiscoverCmd = (zclDiscoverCmdsCmd_t *)pInMsg->attrCmd;
// 4649 
// 4650   // Find out the number of commands supported within the specified range
// 4651   for ( i = 0, cmdID = pDiscoverCmd->startCmdID; i < pDiscoverCmd->maxCmdID; i++, cmdID++ )
// 4652   {
// 4653     if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
// 4654     {
// 4655       break;  // Command not supported
// 4656     }
// 4657   }
// 4658 
// 4659   // Allocate space for the response command
// 4660   cmdRsp.pCmdID = zcl_mem_alloc( i ); // size of number of commands returned
// 4661 
// 4662   if ( cmdRsp.pCmdID == NULL )
// 4663   {
// 4664     return FALSE; // EMEDDED RETURN
// 4665   }
// 4666 
// 4667   if ( i != 0 )
// 4668   {
// 4669     for ( j = 0, cmdID = pDiscoverCmd->startCmdID; j < i; j++, cmdID++ )
// 4670     {
// 4671       if ( !zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
// 4672       {
// 4673         break; // Attribute not supported
// 4674       }
// 4675 
// 4676       cmdRsp.pCmdID[j] = cmdRec.cmdID;
// 4677     }
// 4678   }
// 4679 
// 4680   // Are there more commands to be discovered?
// 4681   if ( zclFindNextCmdRec( pInMsg->msg->endPoint, pInMsg->msg->clusterId, pInMsg->hdr.commandID, pInMsg->hdr.fc.direction, &cmdID, &cmdRec ) )
// 4682   {
// 4683     cmdRsp.discComplete = FALSE;
// 4684   }
// 4685   else
// 4686   {
// 4687     cmdRsp.discComplete = TRUE;
// 4688   }
// 4689 
// 4690   // pass the command requested
// 4691   cmdRsp.cmdType = pInMsg->hdr.commandID;
// 4692 
// 4693   // store number of commands returned
// 4694   cmdRsp.numCmd = j;
// 4695 
// 4696   status = zcl_SendDiscoverCmdsRspCmd( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
// 4697                                       pInMsg->msg->clusterId, &cmdRsp, !(pInMsg->hdr.fc.direction),
// 4698                                       true, pInMsg->hdr.transSeqNum );
// 4699 
// 4700   zcl_mem_free( cmdRsp.pCmdID );
// 4701 
// 4702   if ( status == ZSuccess )
// 4703   {
// 4704     return TRUE;
// 4705   }
// 4706   else
// 4707   {
// 4708     return FALSE;
// 4709   }
// 4710 }
// 4711 
// 4712 #endif // ZCL_DISCOVER
// 4713 
// 4714 /*********************************************************************
// 4715 *********************************************************************/
// 
// 9 792 bytes in segment BANKED_CODE
//   270 bytes in segment BANK_RELAYS
//    92 bytes in segment CODE_C
//     1 byte  in segment XDATA_I
//     1 byte  in segment XDATA_ID
//    13 bytes in segment XDATA_Z
// 
// 10 155 bytes of CODE  memory
//     14 bytes of XDATA memory
//
//Errors: none
//Warnings: none
