###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             29/May/2014  14:59:41 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Components\stack\zcl\zcl_general.c           #
#    Command line       =  -f "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f "D:\Texas         #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO       #
#                          -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f "D:\Texas               #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wZCL.cfg" "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Components\stack\zcl\zcl_general.c" -D       #
#                          FEATURE_GREEN_POWER -D SECURE=1 -D                 #
#                          TC_LINKKEY_JOIN -D ZDSECMGR_TC_DEVICE_MAX=2 -D     #
#                          NV_RESTORE -D HOLD_AUTO_START -D INTER_PAN -D      #
#                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC  #
#                          -D MT_ZDO_FUNC -D MT_ZDO_CB_FUNC -D MT_UTIL_FUNC   #
#                          -D MT_ZDO_MGMT -D LCD_SUPPORTED -D HAL_LCD=FALSE   #
#                          -D HAL_KEY=FALSE -D ZCL_BASIC -D ZCL_READ -D       #
#                          ZCL_WRITE -D ZCL_IDENTIFY -D ZCL_ON_OFF -D         #
#                          ZCL_SCENES -D ZCL_GROUPS -D                        #
#                          ZCL_LIGHT_LINK_ENHANCE -D ZCL_LEVEL_CTRL -D        #
#                          ZCL_COLOR_CTRL -D xMAX_CHANNELS_24GHZ=0x02108800   #
#                          -lC "D:\Texas Instruments\Z-Stack Lighting         #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\List\" -lA "D:\Texas Instruments\Z-Stack     #
#                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC253 #
#                          x\BridgeEB-Pro\List\" --diag_suppress Pe001,Pa010  #
#                          -o "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\Obj\" -e --debug --core=plain --dptr=16,1    #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\" -I    #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\Sour #
#                          ce\" -I "D:\Texas Instruments\Z-Stack Lighting     #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\S #
#                          ource\" -I "D:\Texas Instruments\Z-Stack Lighting  #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\HomeAutomation\Source\" -I "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\HomeAutomation\SampleLight\Source\" -I           #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\ZMain\TI2530DB\" -I "D:\Texas                    #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\hal\include\" -I "D:\Texas      #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\hal\target\CC2530EB\" -I        #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\include\" -I "D:\Texas      #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\high_level\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\" -I        #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\single_chip #
#                          \" -I "D:\Texas Instruments\Z-Stack Lighting       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mt\" -I "D:\Texas               #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\osal\include\" -I "D:\Texas     #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\services\saddr\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\services\sdata\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\af\" -I "D:\Texas         #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\nwk\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sapi\" -I "D:\Texas       #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sec\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sys\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\zcl\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\zdo\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\zmac\" -I "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\zmac\f8w\" -Ohz                 #
#                          --require_prototypes                               #
#    List file          =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\List\zcl_general.lst                         #
#    Object file        =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\Obj\zcl_general.r51                          #
#                                                                             #
#                                                                             #
###############################################################################

D:\Texas Instruments\Z-Stack Lighting 1.0.2\Components\stack\zcl\zcl_general.c
      1          /**************************************************************************************************
      2            Filename:       zcl_general.c
      3            Revised:        $Date: 2013-10-16 16:08:27 -0700 (Wed, 16 Oct 2013) $
      4            Revision:       $Revision: 35699 $
      5          
      6            Description:    Zigbee Cluster Library - General.  This application receives all
      7                            ZCL messages and initially parses them before passing to application.
      8          
      9          
     10            Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          #include "ZComDef.h"
     45          #include "zcl.h"
     46          #include "zcl_general.h"
     47          //#include "ZDApp.h"
     48          #include "zcl_ezmode.h"
     49          
     50          #if defined ( INTER_PAN )
     51            #include "stub_aps.h"
     52          #endif
     53          
     54          #include "dali_thread.h"
     55          
     56          /*********************************************************************
     57           * MACROS
     58           */
     59          #define locationTypeAbsolute( a )          ( (a) & LOCATION_TYPE_ABSOLUTE )
     60          #define locationType2D( a )                ( (a) & LOCATION_TYPE_2_D )
     61          #define locationTypeCoordinateSystem( a )  ( (a) & LOCATION_TYPE_COORDINATE_SYSTEM )
     62          
     63          #ifdef ZCL_SCENES
     64          #define zclGeneral_ScenesRemaingCapacity() ( ZCL_GEN_MAX_SCENES - zclGeneral_CountAllScenes() )
     65          #endif // ZCL_SCENES
     66          
     67          /*********************************************************************
     68           * CONSTANTS
     69           */
     70          
     71          /*********************************************************************
     72           * TYPEDEFS
     73           */
     74          typedef struct zclGenCBRec
     75          {
     76            struct zclGenCBRec        *next;
     77            uint8                     endpoint; // Used to link it into the endpoint descriptor
     78            zclGeneral_AppCallbacks_t *CBs;     // Pointer to Callback function
     79          } zclGenCBRec_t;
     80          
     81          typedef struct zclGenSceneItem
     82          {
     83            struct zclGenSceneItem    *next;
     84            uint8                     endpoint; // Used to link it into the endpoint descriptor
     85            zclGeneral_Scene_t        scene;    // Scene info
     86          } zclGenSceneItem_t;
     87          
     88          typedef struct zclGenAlarmItem
     89          {
     90            struct zclGenAlarmItem    *next;
     91            uint8                     endpoint; // Used to link it into the endpoint descriptor
     92            zclGeneral_Alarm_t        alarm;    // Alarm info
     93          } zclGenAlarmItem_t;
     94          
     95          // Scene NV types
     96          typedef struct
     97          {
     98            uint16                    numRecs;
     99          } nvGenScenesHdr_t;
    100          
    101          typedef struct zclGenSceneNVItem
    102          {
    103            uint8                     endpoint;
    104            zclGeneral_Scene_t        scene;
    105          } zclGenSceneNVItem_t;
    106          
    107          /*********************************************************************
    108           * GLOBAL VARIABLES
    109           */
    110          
    111          /*********************************************************************
    112           * GLOBAL FUNCTIONS
    113           */
    114          
    115          /*********************************************************************
    116           * LOCAL VARIABLES
    117           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    118          static zclGenCBRec_t *zclGenCBs = (zclGenCBRec_t *)NULL;
   \                     zclGenCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    119          static uint8 zclGenPluginRegisted = FALSE;
   \                     zclGenPluginRegisted:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    120          
    121          #if defined( ZCL_SCENES )
    122            #if !defined ( ZCL_STANDALONE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    123              static zclGenSceneItem_t *zclGenSceneTable = (zclGenSceneItem_t *)NULL;
   \                     zclGenSceneTable:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    124            #endif
    125          #endif // ZCL_SCENES
    126          
    127          #ifdef ZCL_ALARMS
    128          static zclGenAlarmItem_t *zclGenAlarmTable = (zclGenAlarmItem_t *)NULL;
    129          #endif // ZCL_ALARMS
    130          
    131          /*********************************************************************
    132           * LOCAL FUNCTIONS
    133           */
    134          static ZStatus_t zclGeneral_HdlIncoming( zclIncoming_t *pInMsg );
    135          static ZStatus_t zclGeneral_HdlInSpecificCommands( zclIncoming_t *pInMsg );
    136          static ZStatus_t zclGeneral_HdlInManuSpecificCommands( zclIncoming_t *pInMsg );//add my own function
    137          static zclGeneral_AppCallbacks_t *zclGeneral_FindCallbacks( uint8 endpoint );
    138          
    139          // Device Configuration and Installation clusters
    140          #ifdef ZCL_BASIC
    141          static ZStatus_t zclGeneral_ProcessInBasic( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    142          #endif // ZCL_BASIC
    143          
    144          #ifdef ZCL_IDENTIFY
    145          static ZStatus_t zclGeneral_ProcessInIdentity( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    146          #endif // ZCL_IDENTIFY
    147          
    148          // Groups and Scenes clusters
    149          #ifdef ZCL_GROUPS
    150          static ZStatus_t zclGeneral_ProcessInGroupsServer( zclIncoming_t *pInMsg );
    151          static ZStatus_t zclGeneral_ProcessInGroupsClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    152          static ZStatus_t zclGeneral_AddGroup( uint8 endPoint, aps_Group_t *group, uint8 *pData );
    153          #endif // ZCL_GROUPS
    154          
    155          #ifdef ZCL_SCENES
    156          static ZStatus_t zclGeneral_ProcessInScenesServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    157          static ZStatus_t zclGeneral_ProcessInScenesClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    158          #endif // ZCL_SCENES
    159          
    160          // On/Off and Level Control Configuration clusters
    161          #ifdef ZCL_ON_OFF
    162          static ZStatus_t zclGeneral_ProcessInOnOff( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    163          static ZStatus_t zclGeneral_ProcessInManuOnOff( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    164          #endif // ZCL_ONOFF
    165          
    166          #ifdef ZCL_LEVEL_CTRL
    167          static ZStatus_t zclGeneral_ProcessInLevelControl( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    168          static ZStatus_t zclGeneral_ProcessInManuLevelControl( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    169          #endif // ZCL_LEVEL_CTRL
    170          
    171          // Alarms cluster
    172          #ifdef ZCL_ALARMS
    173          static ZStatus_t zclGeneral_ProcessInAlarmsServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    174          static ZStatus_t zclGeneral_ProcessInAlarmsClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    175          #endif // ZCL_ALARMS
    176          
    177          // Location cluster
    178          #ifdef ZCL_LOCATION
    179          static ZStatus_t zclGeneral_ProcessInLocationServer( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    180          static ZStatus_t zclGeneral_ProcessInLocationClient( zclIncoming_t *pInMsg, zclGeneral_AppCallbacks_t *pCBs );
    181          #endif // ZCL_LOCATION
    182          
    183          #ifdef ZCL_SCENES
    184            #if !defined ( ZCL_STANDALONE )
    185              static uint8 zclGeneral_ScenesInitNV( void );
    186              static void zclGeneral_ScenesSetDefaultNV( void );
    187              static void zclGeneral_ScenesWriteNV( void );
    188              static uint16 zclGeneral_ScenesRestoreFromNV( void );
    189            #endif
    190          #endif // ZCL_SCENES
    191          
    192          /*********************************************************************
    193           * @fn      zclGeneral_RegisterCmdCallbacks
    194           *
    195           * @brief   Register an applications command callbacks
    196           *
    197           * @param   endpoint - application's endpoint
    198           * @param   callbacks - pointer to the callback record.
    199           *
    200           * @return  ZMemError if not able to allocate
    201           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    202          ZStatus_t zclGeneral_RegisterCmdCallbacks( uint8 endpoint, zclGeneral_AppCallbacks_t *callbacks )
   \                     zclGeneral_RegisterCmdCallbacks:
    203          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    204            zclGenCBRec_t *pNewItem;
    205            zclGenCBRec_t *pLoop;
    206          
    207            // Register as a ZCL Plugin
    208            if ( zclGenPluginRegisted == FALSE )
   \   00000B   90....       MOV     DPTR,#zclGenPluginRegisted
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   7024         JNZ     ??zclGeneral_RegisterCmdCallbacks_0
    209            {
    210              zcl_registerPlugin( ZCL_CLUSTER_ID_GEN_BASIC,
    211                                  ZCL_CLUSTER_ID_GEN_MULTISTATE_VALUE_BASIC,
    212                                  zclGeneral_HdlIncoming );
   \   000011                ; Setup parameters for call to function zcl_registerPlugin
   \   000011   75....       MOV     ?V0 + 2,#??zclGeneral_HdlIncoming?relay & 0xff
   \   000014   75....       MOV     ?V0 + 3,#(??zclGeneral_HdlIncoming?relay >> 8) & 0xff
   \   000017   78..         MOV     R0,#?V0 + 2
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   7C14         MOV     R4,#0x14
   \   00001E   7D00         MOV     R5,#0x0
   \   000020   7A00         MOV     R2,#0x0
   \   000022   7B00         MOV     R3,#0x0
   \   000024   12....       LCALL   ??zcl_registerPlugin?relay
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?DEALLOC_XSTACK8
    213          
    214          #ifdef ZCL_SCENES
    215              // Initialize the Scenes Table
    216              zclGeneral_ScenesInit();
   \   00002C                ; Setup parameters for call to function zclGeneral_ScenesInit
   \   00002C   12....       LCALL   ??zclGeneral_ScenesInit?relay
    217          #endif // ZCL_SCENES
    218          
    219              zclGenPluginRegisted = TRUE;
   \   00002F   90....       MOV     DPTR,#zclGenPluginRegisted
   \   000032   7401         MOV     A,#0x1
   \   000034   F0           MOVX    @DPTR,A
    220            }
    221          
    222            // Fill in the new profile list
    223            pNewItem = zcl_mem_alloc( sizeof( zclGenCBRec_t ) );
   \                     ??zclGeneral_RegisterCmdCallbacks_0:
   \   000035                ; Setup parameters for call to function osal_mem_alloc
   \   000035   7A05         MOV     R2,#0x5
   \   000037   7B00         MOV     R3,#0x0
   \   000039   12....       LCALL   ??osal_mem_alloc?relay
   \   00003C   8A..         MOV     ?V0 + 2,R2
   \   00003E   8B..         MOV     ?V0 + 3,R3
   \   000040   A8..         MOV     R0,?V0 + 2
   \   000042   A9..         MOV     R1,?V0 + 3
    224            if ( pNewItem == NULL )
   \   000044   E8           MOV     A,R0
   \   000045   49           ORL     A,R1
   \   000046   7004         JNZ     ??zclGeneral_RegisterCmdCallbacks_1
    225              return (ZMemError);
   \   000048   7910         MOV     R1,#0x10
   \   00004A   803B         SJMP    ??zclGeneral_RegisterCmdCallbacks_2
    226          
    227            pNewItem->next = (zclGenCBRec_t *)NULL;
   \                     ??zclGeneral_RegisterCmdCallbacks_1:
   \   00004C   8882         MOV     DPL,R0
   \   00004E   8983         MOV     DPH,R1
   \   000050   E4           CLR     A
   \   000051   F0           MOVX    @DPTR,A
   \   000052   A3           INC     DPTR
   \   000053   12....       LCALL   ?Subroutine58 & 0xFFFF
    228            pNewItem->endpoint = endpoint;
   \                     ??CrossCallReturnLabel_90:
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   E5..         MOV     A,?V0 + 0
   \   00005A   12....       LCALL   ?Subroutine58 & 0xFFFF
    229            pNewItem->CBs = callbacks;
   \                     ??CrossCallReturnLabel_91:
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   EE           MOV     A,R6
   \   000061   F0           MOVX    @DPTR,A
   \   000062   A3           INC     DPTR
   \   000063   EF           MOV     A,R7
   \   000064   F0           MOVX    @DPTR,A
    230          
    231            // Find spot in list
    232            if (  zclGenCBs == NULL )
   \   000065   90....       MOV     DPTR,#zclGenCBs
   \   000068   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   00006B   90....       MOV     DPTR,#zclGenCBs
   \   00006E   6012         JZ      ??zclGeneral_RegisterCmdCallbacks_3
    233            {
    234              zclGenCBs = pNewItem;
    235            }
    236            else
    237            {
    238              // Look for end of list
    239              pLoop = zclGenCBs;
   \   000070   E0           MOVX    A,@DPTR
   \   000071   FC           MOV     R4,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   8003         SJMP    ??zclGeneral_RegisterCmdCallbacks_4
    240              while ( pLoop->next != NULL )
    241                pLoop = pLoop->next;
   \                     ??zclGeneral_RegisterCmdCallbacks_5:
   \   000076   EA           MOV     A,R2
   \   000077   FC           MOV     R4,A
   \   000078   EB           MOV     A,R3
   \                     ??zclGeneral_RegisterCmdCallbacks_4:
   \   000079   12....       LCALL   ??Subroutine125_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_306:
   \   00007C   70F8         JNZ     ??zclGeneral_RegisterCmdCallbacks_5
    242          
    243              // Put new item at end of list
    244              pLoop->next = pNewItem;
   \   00007E   8C82         MOV     DPL,R4
   \   000080   8D83         MOV     DPH,R5
    245            }
   \                     ??zclGeneral_RegisterCmdCallbacks_3:
   \   000082   12....       LCALL   ?Subroutine64 & 0xFFFF
    246          
    247            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_255:
   \   000085   7900         MOV     R1,#0x0
   \                     ??zclGeneral_RegisterCmdCallbacks_2:
   \   000087   02....       LJMP    ??Subroutine109_0 & 0xFFFF
    248          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine109_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine120_0
   \   000001                ; // Fall through to label ??Subroutine120_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine120_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine125_0:
   \   000000   FD           MOV     R5,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005                REQUIRE ??Subroutine126_0
   \   000005                ; // Fall through to label ??Subroutine126_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine126_0:
   \   000000   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   000003   FB           MOV     R3,A
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   22           RET
    249          
    250          #ifdef ZCL_IDENTIFY
    251          /*********************************************************************
    252           * @fn      zclGeneral_SendIdentify
    253           *
    254           * @brief   Call to send out an Identify Command
    255           *
    256           * @param   srcEP - Sending application's endpoint
    257           * @param   dstAddr - where you want the message to go
    258           * @param   identifyTime - how long the device will continue to identify itself (in seconds)
    259           * @param   seqNum - identification number for the transaction
    260           *
    261           * @return  ZStatus_t
    262           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    263          ZStatus_t zclGeneral_SendIdentify( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentify:
    264                                             uint16 identifyTime, uint8 disableDefaultRsp, uint8 seqNum )
    265          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   740C         MOV     A,#0xc
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   740D         MOV     A,#0xd
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   12....       LCALL   ?Subroutine37 & 0xFFFF
    266            uint8 buf[2];
    267          
    268            buf[0] = LO_UINT16( identifyTime );
    269            buf[1] = HI_UINT16( identifyTime );
   \                     ??CrossCallReturnLabel_45:
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ?Subroutine52 & 0xFFFF
    270          
    271            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    272                                    COMMAND_IDENTIFY, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    273                                    disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_155:
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..02       MOV     ?V0 + 0,#0x2
   \   000027   75..00       MOV     ?V0 + 1,#0x0
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   EF           MOV     A,R7
   \   000030   F5..         MOV     ?V0 + 0,A
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000037   E4           CLR     A
   \   000038   F5..         MOV     ?V0 + 0,A
   \   00003A   78..         MOV     R0,#?V0 + 0
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   E9           MOV     A,R1
   \   000040   F5..         MOV     ?V0 + 0,A
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000047   75..00       MOV     ?V0 + 0,#0x0
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004F   75..01       MOV     ?V0 + 0,#0x1
   \   000052   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   ED           MOV     A,R5
   \   000001                REQUIRE ??Subroutine102_0
   \   000001                ; // Fall through to label ??Subroutine102_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine102_0:
   \   000000   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000003   8582..       MOV     ?V0 + 0,DPL
   \   000006   8583..       MOV     ?V0 + 1,DPH
   \   000009   78..         MOV     R0,#?V0 + 0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FF           MOV     R7,A
   \   000002   EC           MOV     A,R4
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   7401         MOV     A,#0x1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function osal_nv_write
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for indirect call
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   78..         MOV     R0,#?V0 + 0
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000005   75..00       MOV     ?V0 + 0,#0x0
   \   000008   78..         MOV     R0,#?V0 + 0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   7C03         MOV     R4,#0x3
   \   00000F   7D00         MOV     R5,#0x0
   \   000011   EE           MOV     A,R6
   \   000012   F9           MOV     R1,A
   \   000013   12....       LCALL   ??zcl_SendCommand?relay
   \   000016   740B         MOV     A,#0xb
   \   000018   12....       LCALL   ?DEALLOC_XSTACK8
   \   00001B                REQUIRE ??Subroutine135_0
   \   00001B                ; // Fall through to label ??Subroutine135_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine135_0:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine136_0
   \   000002                ; // Fall through to label ??Subroutine136_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine136_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine137_0
   \   000003                ; // Fall through to label ??Subroutine137_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine137_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    274          }
    275          
    276          /*********************************************************************
    277           * @fn      zclGeneral_SendIdentifyEZModeInvoke
    278           *
    279           * @brief   Call to send out an Identify EZ-Mode Invoke Command
    280           *
    281           * @param   srcEP - Sending application's endpoint
    282           * @param   dstAddr - where you want the message to go
    283           * @param   action - describes the EZ-Mode action to be performed
    284           * @param   seqNum - identification number for the transaction
    285           *
    286           * @return  ZStatus_t
    287           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    288          ZStatus_t zclGeneral_SendIdentifyEZModeInvoke( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentifyEZModeInvoke:
    289                                                         uint8 action, uint8 disableDefaultRsp, uint8 seqNum )
    290          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   ED           MOV     A,R5
   \   00000D   FF           MOV     R7,A
   \   00000E   740C         MOV     A,#0xc
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
    291            uint8 buf[1];
    292          
    293            buf[0] = action;
   \   000015   85..82       MOV     DPL,?XSP + 0
   \   000018   85..83       MOV     DPH,?XSP + 1
   \   00001B   EC           MOV     A,R4
   \   00001C   F0           MOVX    @DPTR,A
    294          
    295            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    296                                    COMMAND_IDENTIFY_EZMODE_INVOKE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    297                                    disableDefaultRsp, 0, seqNum, 1, buf );
   \   00001D                ; Setup parameters for call to function zcl_SendCommand
   \   00001D   8582..       MOV     ?V0 + 0,DPL
   \   000020   8583..       MOV     ?V0 + 1,DPH
   \   000023   78..         MOV     R0,#?V0 + 0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   75..01       MOV     ?V0 + 0,#0x1
   \   00002B   75..00       MOV     ?V0 + 1,#0x0
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   E9           MOV     A,R1
   \   000034   F5..         MOV     ?V0 + 0,A
   \   000036   78..         MOV     R0,#?V0 + 0
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003B   E4           CLR     A
   \   00003C   F5..         MOV     ?V0 + 0,A
   \   00003E   78..         MOV     R0,#?V0 + 0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   EF           MOV     A,R7
   \   000044   F5..         MOV     ?V0 + 0,A
   \   000046   78..         MOV     R0,#?V0 + 0
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004B   75..00       MOV     ?V0 + 0,#0x0
   \   00004E   78..         MOV     R0,#?V0 + 0
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000053   75..01       MOV     ?V0 + 0,#0x1
   \   000056   78..         MOV     R0,#?V0 + 0
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005B   75..02       MOV     ?V0 + 0,#0x2
   \   00005E   78..         MOV     R0,#?V0 + 0
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000063   7C03         MOV     R4,#0x3
   \   000065   7D00         MOV     R5,#0x0
   \   000067   EE           MOV     A,R6
   \   000068   F9           MOV     R1,A
   \   000069   12....       LCALL   ??zcl_SendCommand?relay
   \   00006C   740B         MOV     A,#0xb
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000071   7401         MOV     A,#0x1
   \   000073   02....       LJMP    ??Subroutine107_0 & 0xFFFF
    298          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine107_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F03         MOV     R7,#0x3
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA
    299          
    300          /*********************************************************************
    301           * @fn      zclGeneral_SendIdentifyUpdateCommState
    302           *
    303           * @brief   Call to send out an Identify Update Commission State Command
    304           *
    305           * @param   srcEP - Sending application's endpoint
    306           * @param   dstAddr - where you want the message to go
    307           * @param   action - describes the EZ-Mode action to be performed
    308           * @param   commissionStateMask - updates the device's commission state
    309           * @param   seqNum - identification number for the transaction
    310           *
    311           * @return  ZStatus_t
    312           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    313          ZStatus_t zclGeneral_SendIdentifyUpdateCommState( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentifyUpdateCommState:
    314                                                            uint8 action, uint8 commissionStateMask,
    315                                                            uint8 disableDefaultRsp, uint8 seqNum )
    316          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
   \   00000E   740D         MOV     A,#0xd
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   740E         MOV     A,#0xe
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine23 & 0xFFFF
    317            uint8 buf[2];
    318          
    319            buf[0] = action;
    320            buf[1] = commissionStateMask;
   \                     ??CrossCallReturnLabel_19:
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ?Subroutine52 & 0xFFFF
    321          
    322            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    323                                    COMMAND_IDENTIFY_UPDATE_COMMISSION_STATE, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    324                                    disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_156:
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   75..02       MOV     ?V0 + 0,#0x2
   \   000029   75..00       MOV     ?V0 + 1,#0x0
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   EC           MOV     A,R4
   \   000032   F5..         MOV     ?V0 + 0,A
   \   000034   78..         MOV     R0,#?V0 + 0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000039   E4           CLR     A
   \   00003A   F5..         MOV     ?V0 + 0,A
   \   00003C   78..         MOV     R0,#?V0 + 0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   E9           MOV     A,R1
   \   000042   F5..         MOV     ?V0 + 0,A
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000049   75..00       MOV     ?V0 + 0,#0x0
   \   00004C   78..         MOV     R0,#?V0 + 0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000051   75..01       MOV     ?V0 + 0,#0x1
   \   000054   78..         MOV     R0,#?V0 + 0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000059   75..03       MOV     ?V0 + 0,#0x3
   \   00005C   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   EF           MOV     A,R7
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   7401         MOV     A,#0x1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   78..         MOV     R0,#?V0 + 0
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000005   7C03         MOV     R4,#0x3
   \   000007                REQUIRE ??Subroutine106_0
   \   000007                ; // Fall through to label ??Subroutine106_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine106_0:
   \   000000   7D00         MOV     R5,#0x0
   \   000002   EE           MOV     A,R6
   \   000003   F9           MOV     R1,A
   \   000004   12....       LCALL   ??zcl_SendCommand?relay
   \   000007   740B         MOV     A,#0xb
   \   000009   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000C   7402         MOV     A,#0x2
   \   00000E                REQUIRE ??Subroutine107_0
   \   00000E                ; // Fall through to label ??Subroutine107_0
    325          }
    326          
    327          #ifdef ZCL_LIGHT_LINK_ENHANCE
    328          /*********************************************************************
    329           * @fn      zclGeneral_SendIdentifyTriggerEffect
    330           *
    331           * @brief   Call to send out a Trigger Effect Command
    332           *
    333           * @param   srcEP - Sending application's endpoint
    334           * @param   dstAddr - where you want the message to go
    335           * @param   effectId - identify effect to use
    336           * @param   effectVariant - which variant of effect to be triggered
    337           * @param   disableDefaultRsp - whether to disable the Default Response command
    338           * @param   seqNum - identification number for the transaction
    339           *
    340           * @return  ZStatus_t
    341           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    342          ZStatus_t zclGeneral_SendIdentifyTriggerEffect( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentifyTriggerEffect:
    343                                                          uint8 effectId, uint8 effectVariant,
    344                                                          uint8 disableDefaultRsp, uint8 seqNum )
    345          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
   \   00000E   740D         MOV     A,#0xd
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   740E         MOV     A,#0xe
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine23 & 0xFFFF
    346            uint8 buf[2];
    347          
    348            buf[0] = effectId;
    349            buf[1] = effectVariant;
   \                     ??CrossCallReturnLabel_20:
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ?Subroutine52 & 0xFFFF
    350          
    351            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    352                                    COMMAND_IDENTIFY_TRIGGER_EFFECT, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    353                                    disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_157:
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   75..02       MOV     ?V0 + 0,#0x2
   \   000029   75..00       MOV     ?V0 + 1,#0x0
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   EC           MOV     A,R4
   \   000032   F5..         MOV     ?V0 + 0,A
   \   000034   78..         MOV     R0,#?V0 + 0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000039   E4           CLR     A
   \   00003A   F5..         MOV     ?V0 + 0,A
   \   00003C   78..         MOV     R0,#?V0 + 0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   E9           MOV     A,R1
   \   000042   F5..         MOV     ?V0 + 0,A
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000049   75..00       MOV     ?V0 + 0,#0x0
   \   00004C   78..         MOV     R0,#?V0 + 0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000051   75..01       MOV     ?V0 + 0,#0x1
   \   000054   78..         MOV     R0,#?V0 + 0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000059   75..40       MOV     ?V0 + 0,#0x40
   \   00005C   02....       LJMP    ?Subroutine2 & 0xFFFF
    354          }
    355          #endif // ZCL_LIGHT_LINK_ENHANCE
    356          
    357          /*********************************************************************
    358           * @fn      zclGeneral_SendIdentifyQueryResponse
    359           *
    360           * @brief   Call to send out an Identify Query Response Command
    361           *
    362           * @param   srcEP - Sending application's endpoint
    363           * @param   dstAddr - where you want the message to go
    364           * @param   timeout - how long the device will continue to identify itself (in seconds)
    365           * @param   seqNum - identification number for the transaction
    366           *
    367           * @return  ZStatus_t
    368           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    369          ZStatus_t zclGeneral_SendIdentifyQueryResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendIdentifyQueryResponse:
    370                                                          uint16 timeout, uint8 disableDefaultRsp, uint8 seqNum )
    371          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   740C         MOV     A,#0xc
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   740D         MOV     A,#0xd
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   12....       LCALL   ?Subroutine37 & 0xFFFF
    372            uint8 buf[2];
    373          
    374            buf[0] = LO_UINT16( timeout );
    375            buf[1] = HI_UINT16( timeout );
   \                     ??CrossCallReturnLabel_46:
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   12....       LCALL   ?Subroutine52 & 0xFFFF
    376          
    377            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_IDENTIFY,
    378                                    COMMAND_IDENTIFY_QUERY_RSP, TRUE,
    379                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_158:
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000024   75..02       MOV     ?V0 + 0,#0x2
   \   000027   75..00       MOV     ?V0 + 1,#0x0
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   EF           MOV     A,R7
   \   000030   F5..         MOV     ?V0 + 0,A
   \   000032   78..         MOV     R0,#?V0 + 0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000037   E4           CLR     A
   \   000038   F5..         MOV     ?V0 + 0,A
   \   00003A   78..         MOV     R0,#?V0 + 0
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003F   E9           MOV     A,R1
   \   000040   F5..         MOV     ?V0 + 0,A
   \   000042   78..         MOV     R0,#?V0 + 0
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000047   75..01       MOV     ?V0 + 0,#0x1
   \   00004A   78..         MOV     R0,#?V0 + 0
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004F   02....       LJMP    ?Subroutine1 & 0xFFFF
    380          }
    381          #endif // ZCL_IDENTIFY
    382          
    383          #ifdef ZCL_GROUPS
    384          /*********************************************************************
    385           * @fn      zclGeneral_SendGroupRequest
    386           *
    387           * @brief   Send a Group Request to a device.  You can also use the
    388           *          appropriate macro.
    389           *
    390           * @param   srcEP - Sending Apps endpoint
    391           * @param   dstAddr - where to send the request
    392           * @param   cmd - one of the following:
    393           *              COMMAND_GROUP_VIEW
    394           *              COMMAND_GROUP_REMOVE
    395           * @param   groupID -
    396           *
    397           * @return  ZStatus_t
    398           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    399          ZStatus_t zclGeneral_SendGroupRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupRequest:
    400                                                 uint8 cmd, uint16 groupID, uint8 disableDefaultRsp, uint8 seqNum )
    401          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 0,R1
   \   00000C   EC           MOV     A,R4
   \   00000D   FE           MOV     R6,A
   \   00000E   ED           MOV     A,R5
   \   00000F   FF           MOV     R7,A
   \   000010   7410         MOV     A,#0x10
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FC           MOV     R4,A
   \   000017   740E         MOV     A,#0xe
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ?Subroutine31 & 0xFFFF
    402            uint8 buf[2];
    403          
    404            buf[0] = LO_UINT16( groupID );
    405            buf[1] = HI_UINT16( groupID );
   \                     ??CrossCallReturnLabel_37:
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   12....       LCALL   ?Subroutine53 & 0xFFFF
    406          
    407            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    408                                      cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    409                                      disableDefaultRsp, 0, seqNum, 2, buf ) );
   \                     ??CrossCallReturnLabel_163:
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   75..02       MOV     ?V0 + 2,#0x2
   \   00002B   75..00       MOV     ?V0 + 3,#0x0
   \   00002E   78..         MOV     R0,#?V0 + 2
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   EC           MOV     A,R4
   \   000034   F5..         MOV     ?V0 + 1,A
   \   000036   78..         MOV     R0,#?V0 + 1
   \   000038   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003B   E4           CLR     A
   \   00003C   F5..         MOV     ?V0 + 2,A
   \   00003E   78..         MOV     R0,#?V0 + 2
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   EF           MOV     A,R7
   \   000044   F5..         MOV     ?V0 + 1,A
   \   000046   78..         MOV     R0,#?V0 + 1
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004B   75..00       MOV     ?V0 + 1,#0x0
   \   00004E   78..         MOV     R0,#?V0 + 1
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000053   75..01       MOV     ?V0 + 1,#0x1
   \   000056   78..         MOV     R0,#?V0 + 1
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005B   EE           MOV     A,R6
   \   00005C   F5..         MOV     ?V0 + 1,A
   \   00005E   78..         MOV     R0,#?V0 + 1
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000063   7C04         MOV     R4,#0x4
   \   000065   7D00         MOV     R5,#0x0
   \   000067   A9..         MOV     R1,?V0 + 0
   \   000069   12....       LCALL   ??zcl_SendCommand?relay
   \   00006C   740B         MOV     A,#0xb
   \   00006E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000071   7402         MOV     A,#0x2
   \   000073   02....       LJMP    ??Subroutine108_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   E9           MOV     A,R1
   \   000001                REQUIRE ??Subroutine103_0
   \   000001                ; // Fall through to label ??Subroutine103_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine103_0:
   \   000000   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000003   8582..       MOV     ?V0 + 2,DPL
   \   000006   8583..       MOV     ?V0 + 3,DPH
   \   000009   78..         MOV     R0,#?V0 + 2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   7401         MOV     A,#0x1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine108_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine109_0
   \   000003                ; // Fall through to label ??Subroutine109_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000003   E8           MOV     A,R0
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET
    410          }
    411          
    412          /*********************************************************************
    413           * @fn      zclGeneral_SendAddGroupRequest
    414           *
    415           * @brief   Send the Add Group Request to a device
    416           *
    417           * @param   srcEP - Sending Apps endpoint
    418           * @param   dstAddr - where to send the request
    419           * @param   cmd - one of the following:
    420           *                COMMAND_GROUP_ADD
    421           *                COMMAND_GROUP_ADD_IF_IDENTIFYING
    422           * @param   groupID - pointer to the group structure
    423           * @param   groupName - pointer to Group Name.  This is a Zigbee
    424           *          string data type, so the first byte is the length of the
    425           *          name (in bytes), then the name.
    426           *
    427           * @return  ZStatus_t
    428           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    429          ZStatus_t zclGeneral_SendAddGroupRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendAddGroupRequest:
    430                                                    uint8 cmd, uint16 groupID, uint8 *groupName,
    431                                                    uint8 disableDefaultRsp, uint8 seqNum )
    432          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 10,R1
   \   000007   8A..         MOV     ?V0 + 14,R2
   \   000009   8B..         MOV     ?V0 + 15,R3
   \   00000B   8C..         MOV     ?V0 + 12,R4
   \   00000D   8D..         MOV     ?V0 + 11,R5
   \   00000F   741C         MOV     A,#0x1c
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 7,A
   \   000017   741A         MOV     A,#0x1a
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ?Subroutine32 & 0xFFFF
    433            uint8 *buf;
    434            uint8 *pBuf;
    435            uint8 len;
    436            ZStatus_t status;
    437          
    438            len = 2;    // Group ID
    439            len += groupName[0] + 1;  // String + 1 for length
   \                     ??CrossCallReturnLabel_39:
   \   00001F   85..82       MOV     DPL,?V0 + 0
   \   000022   F583         MOV     DPH,A
   \   000024   E0           MOVX    A,@DPTR
   \   000025   2403         ADD     A,#0x3
   \   000027   F8           MOV     R0,A
    440          
    441            buf = zcl_mem_alloc( len );
   \   000028   8882         MOV     DPL,R0
   \   00002A   AE82         MOV     R6,DPL
   \   00002C                ; Setup parameters for call to function osal_mem_alloc
   \   00002C   FA           MOV     R2,A
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   12....       LCALL   ??osal_mem_alloc?relay
   \   000032   8A..         MOV     ?V0 + 2,R2
   \   000034   8B..         MOV     ?V0 + 3,R3
    442            if ( buf )
   \   000036   EA           MOV     A,R2
   \   000037   45..         ORL     A,?V0 + 3
   \   000039   7003         JNZ     $+5
   \   00003B   02....       LJMP    ??zclGeneral_SendAddGroupRequest_0 & 0xFFFF
    443            {
    444              pBuf = buf;
   \   00003E   7418         MOV     A,#0x18
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   12....       LCALL   ?Subroutine46 & 0xFFFF
    445              *pBuf++ = LO_UINT16( groupID );
   \                     ??CrossCallReturnLabel_61:
   \   000046   8A82         MOV     DPL,R2
   \   000048   8B83         MOV     DPH,R3
   \   00004A   F0           MOVX    @DPTR,A
   \   00004B   A3           INC     DPTR
    446              *pBuf++ = HI_UINT16( groupID );
   \   00004C   E9           MOV     A,R1
   \   00004D   12....       LCALL   ?Subroutine56 & 0xFFFF
    447              *pBuf++ = groupName[0]; // string length
   \                     ??CrossCallReturnLabel_88:
   \   000050   E0           MOVX    A,@DPTR
   \   000051   85..82       MOV     DPL,?V0 + 8
   \   000054   85..83       MOV     DPH,?V0 + 9
   \   000057   12....       LCALL   ?Subroutine56 & 0xFFFF
    448              zcl_memcpy( pBuf, &(groupName[1]), groupName[0] );
   \                     ??CrossCallReturnLabel_89:
   \   00005A   A3           INC     DPTR
   \   00005B   A982         MOV     R1,DPL
   \   00005D   AA83         MOV     R2,DPH
   \   00005F   89..         MOV     ?V0 + 4,R1
   \   000061   8A..         MOV     ?V0 + 5,R2
   \   000063   75..00       MOV     ?V0 + 6,#0x0
   \   000066   78..         MOV     R0,#?V0 + 4
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006B   85..82       MOV     DPL,?V0 + 0
   \   00006E   85..83       MOV     DPH,?V0 + 1
   \   000071   E0           MOVX    A,@DPTR
   \   000072   FC           MOV     R4,A
   \   000073   7D00         MOV     R5,#0x0
   \   000075   AA..         MOV     R2,?V0 + 8
   \   000077   AB..         MOV     R3,?V0 + 9
   \   000079   12....       LCALL   ??osal_memcpy?relay
   \   00007C   7403         MOV     A,#0x3
   \   00007E   12....       LCALL   ?DEALLOC_XSTACK8
    449          
    450              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    451                                        cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    452                                        disableDefaultRsp, 0, seqNum, len, buf );
   \   000081                ; Setup parameters for call to function zcl_SendCommand
   \   000081   78..         MOV     R0,#?V0 + 2
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   8E..         MOV     ?V0 + 0,R6
   \   000088   75..00       MOV     ?V0 + 1,#0x0
   \   00008B   78..         MOV     R0,#?V0 + 0
   \   00008D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000090   E5..         MOV     A,?V0 + 7
   \   000092   F5..         MOV     ?V0 + 0,A
   \   000094   78..         MOV     R0,#?V0 + 0
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000099   E4           CLR     A
   \   00009A   F5..         MOV     ?V0 + 0,A
   \   00009C   78..         MOV     R0,#?V0 + 0
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A1   E5..         MOV     A,?V0 + 11
   \   0000A3   F5..         MOV     ?V0 + 0,A
   \   0000A5   78..         MOV     R0,#?V0 + 0
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AA   75..00       MOV     ?V0 + 0,#0x0
   \   0000AD   78..         MOV     R0,#?V0 + 0
   \   0000AF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B2   75..01       MOV     ?V0 + 0,#0x1
   \   0000B5   78..         MOV     R0,#?V0 + 0
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BA   E5..         MOV     A,?V0 + 12
   \   0000BC   F5..         MOV     ?V0 + 0,A
   \   0000BE   78..         MOV     R0,#?V0 + 0
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C3   7C04         MOV     R4,#0x4
   \   0000C5   7D00         MOV     R5,#0x0
   \   0000C7   AA..         MOV     R2,?V0 + 14
   \   0000C9   AB..         MOV     R3,?V0 + 15
   \   0000CB   A9..         MOV     R1,?V0 + 10
   \   0000CD   12....       LCALL   ??zcl_SendCommand?relay
   \   0000D0   740B         MOV     A,#0xb
   \   0000D2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D5   E9           MOV     A,R1
   \   0000D6   FE           MOV     R6,A
    453              zcl_mem_free( buf );
   \   0000D7                ; Setup parameters for call to function osal_mem_free
   \   0000D7   AA..         MOV     R2,?V0 + 2
   \   0000D9   AB..         MOV     R3,?V0 + 3
   \   0000DB   12....       LCALL   ??osal_mem_free?relay
   \   0000DE   8002         SJMP    ??zclGeneral_SendAddGroupRequest_1
    454            }
    455            else
    456              status = ZMemError;
   \                     ??zclGeneral_SendAddGroupRequest_0:
   \   0000E0   7E10         MOV     R6,#0x10
    457          
    458            return ( status );
   \                     ??zclGeneral_SendAddGroupRequest_1:
   \   0000E2                REQUIRE ?Subroutine10
   \   0000E2                ; // Fall through to label ?Subroutine10
    459          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002   02....       LJMP    ??Subroutine133_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   8582..       MOV     ?V0 + 8,DPL
   \   000005   8583..       MOV     ?V0 + 9,DPH
   \   000008                ; Setup parameters for call to function osal_memcpy
   \   000008   85..82       MOV     DPL,?V0 + 0
   \   00000B   85..83       MOV     DPH,?V0 + 1
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine133_0:
   \   000000   7F10         MOV     R7,#0x10
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    460          
    461          /*********************************************************************
    462           * @fn      zclGeneral_SendGroupGetMembershipRequest
    463           *
    464           * @brief   Send a Get Group Membership (Resposne) Command to a device
    465           *
    466           * @param   srcEP - Sending Apps endpoint
    467           * @param   dstAddr - where to send the request
    468           * @param   cmd - one of the following:
    469           *                COMMAND_GROUP_GET_MEMBERSHIP
    470           *                COMMAND_GROUP_GET_MEMBERSHIP_RSP
    471           * @param   groupID - pointer to the group structure
    472           * @param   groupName - pointer to Group Name.  This is a Zigbee
    473           *          string data type, so the first byte is the length of the
    474           *          name (in bytes), then the name.
    475           *
    476           * @return  ZStatus_t
    477           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    478          ZStatus_t zclGeneral_SendGroupGetMembershipRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupGetMembershipRequest:
    479                                                              uint8 cmd, uint8 rspCmd, uint8 direction, uint8 capacity,
    480                                                              uint8 grpCnt, uint16 *grpList, uint8 disableDefaultRsp, uint8 seqNum )
    481          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   8A..         MOV     ?V0 + 12,R2
   \   000009   8B..         MOV     ?V0 + 13,R3
   \   00000B   8C..         MOV     ?V0 + 10,R4
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   \   00000F   7416         MOV     A,#0x16
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 4,A
   \   000017   7417         MOV     A,#0x17
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 11,A
   \   00001F   741B         MOV     A,#0x1b
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 5,A
   \   000027   741C         MOV     A,#0x1c
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F5..         MOV     ?V0 + 8,A
    482            uint8 *buf;
    483            uint8 *pBuf;
    484            uint8 len = 0;
   \   00002F   7800         MOV     R0,#0x0
    485            uint8 i;
    486            ZStatus_t status;
    487          
    488            if ( rspCmd )
   \   000031   EF           MOV     A,R7
   \   000032   6001         JZ      ??zclGeneral_SendGroupGetMembershipRequest_0
    489              len++;  // Capacity
   \   000034   08           INC     R0
   \                     ??zclGeneral_SendGroupGetMembershipRequest_0:
   \   000035   7418         MOV     A,#0x18
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F5..         MOV     ?V0 + 9,A
    490          
    491            len++;  // Group Count
    492            len += sizeof ( uint16 ) * grpCnt;  // Group List
   \   00003D   C3           CLR     C
   \   00003E   33           RLC     A
   \   00003F   04           INC     A
   \   000040   28           ADD     A,R0
   \   000041   F8           MOV     R0,A
    493          
    494            buf = zcl_mem_alloc( len );
   \   000042   8882         MOV     DPL,R0
   \   000044   8582..       MOV     ?V0 + 2,DPL
   \   000047   75..00       MOV     ?V0 + 3,#0x0
   \   00004A                ; Setup parameters for call to function osal_mem_alloc
   \   00004A   FA           MOV     R2,A
   \   00004B   AB..         MOV     R3,?V0 + 3
   \   00004D   12....       LCALL   ??osal_mem_alloc?relay
   \   000050   8A..         MOV     ?V0 + 0,R2
   \   000052   8B..         MOV     ?V0 + 1,R3
    495            if ( buf )
   \   000054   EA           MOV     A,R2
   \   000055   45..         ORL     A,?V0 + 1
   \   000057   7003         JNZ     $+5
   \   000059   02....       LJMP    ??zclGeneral_SendGroupGetMembershipRequest_1 & 0xFFFF
    496            {
    497              pBuf = buf;
   \   00005C   A8..         MOV     R0,?V0 + 0
   \   00005E   A9..         MOV     R1,?V0 + 1
    498              if ( rspCmd )
   \   000060   EF           MOV     A,R7
   \   000061   6009         JZ      ??CrossCallReturnLabel_102
    499                *pBuf++ = capacity;
   \   000063   8882         MOV     DPL,R0
   \   000065   8983         MOV     DPH,R1
   \   000067   E5..         MOV     A,?V0 + 11
   \   000069   12....       LCALL   ?Subroutine62 & 0xFFFF
    500          
    501              *pBuf++ = grpCnt;
   \                     ??CrossCallReturnLabel_102:
   \   00006C   8882         MOV     DPL,R0
   \   00006E   8983         MOV     DPH,R1
   \   000070   E5..         MOV     A,?V0 + 9
   \   000072   12....       LCALL   ?Subroutine62 & 0xFFFF
    502              for ( i = 0; i < grpCnt; i++ )
   \                     ??CrossCallReturnLabel_103:
   \   000075   75..00       MOV     ?V0 + 11,#0x0
   \   000078   7419         MOV     A,#0x19
   \   00007A   12....       LCALL   ?XSTACK_DISP0_8
   \   00007D   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000080   8029         SJMP    ??zclGeneral_SendGroupGetMembershipRequest_2
    503              {
    504                *pBuf++ = LO_UINT16( grpList[i] );
   \                     ??zclGeneral_SendGroupGetMembershipRequest_3:
   \   000082   E5..         MOV     A,?V0 + 11
   \   000084   C3           CLR     C
   \   000085   33           RLC     A
   \   000086   FC           MOV     R4,A
   \   000087   E4           CLR     A
   \   000088   33           RLC     A
   \   000089   FD           MOV     R5,A
   \   00008A   EA           MOV     A,R2
   \   00008B   2C           ADD     A,R4
   \   00008C   F5..         MOV     ?V0 + 6,A
   \   00008E   EB           MOV     A,R3
   \   00008F   3D           ADDC    A,R5
   \   000090   F5..         MOV     ?V0 + 7,A
   \   000092   85..82       MOV     DPL,?V0 + 6
   \   000095   12....       LCALL   ?Subroutine39 & 0xFFFF
    505                *pBuf++ = HI_UINT16( grpList[i] );
   \                     ??CrossCallReturnLabel_49:
   \   000098   85..82       MOV     DPL,?V0 + 6
   \   00009B   85..83       MOV     DPH,?V0 + 7
   \   00009E   A3           INC     DPTR
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   8882         MOV     DPL,R0
   \   0000A2   8983         MOV     DPH,R1
   \   0000A4   F0           MOVX    @DPTR,A
   \   0000A5   A3           INC     DPTR
   \   0000A6   08           INC     R0
   \   0000A7   A983         MOV     R1,DPH
    506              }
   \   0000A9   05..         INC     ?V0 + 11
   \                     ??zclGeneral_SendGroupGetMembershipRequest_2:
   \   0000AB   E5..         MOV     A,?V0 + 11
   \   0000AD   C3           CLR     C
   \   0000AE   95..         SUBB    A,?V0 + 9
   \   0000B0   40D0         JC      ??zclGeneral_SendGroupGetMembershipRequest_3
    507          
    508              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    509                                        cmd, TRUE, direction,
    510                                        disableDefaultRsp, 0, seqNum, len, buf );
   \   0000B2                ; Setup parameters for call to function zcl_SendCommand
   \   0000B2   78..         MOV     R0,#?V0 + 0
   \   0000B4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B7   78..         MOV     R0,#?V0 + 2
   \   0000B9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BC   E5..         MOV     A,?V0 + 8
   \   0000BE   F5..         MOV     ?V0 + 2,A
   \   0000C0   78..         MOV     R0,#?V0 + 2
   \   0000C2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C5   E4           CLR     A
   \   0000C6   F5..         MOV     ?V0 + 2,A
   \   0000C8   78..         MOV     R0,#?V0 + 2
   \   0000CA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CD   E5..         MOV     A,?V0 + 5
   \   0000CF   F5..         MOV     ?V0 + 2,A
   \   0000D1   78..         MOV     R0,#?V0 + 2
   \   0000D3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D6   E5..         MOV     A,?V0 + 4
   \   0000D8   F5..         MOV     ?V0 + 2,A
   \   0000DA   78..         MOV     R0,#?V0 + 2
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DF   75..01       MOV     ?V0 + 2,#0x1
   \   0000E2   78..         MOV     R0,#?V0 + 2
   \   0000E4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E7   E5..         MOV     A,?V0 + 10
   \   0000E9   F5..         MOV     ?V0 + 2,A
   \   0000EB   78..         MOV     R0,#?V0 + 2
   \   0000ED   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F0   7C04         MOV     R4,#0x4
   \   0000F2   7D00         MOV     R5,#0x0
   \   0000F4   AA..         MOV     R2,?V0 + 12
   \   0000F6   AB..         MOV     R3,?V0 + 13
   \   0000F8   EE           MOV     A,R6
   \   0000F9   F9           MOV     R1,A
   \   0000FA   12....       LCALL   ??zcl_SendCommand?relay
   \   0000FD   740B         MOV     A,#0xb
   \   0000FF   12....       LCALL   ?DEALLOC_XSTACK8
   \   000102   E9           MOV     A,R1
   \   000103   F5..         MOV     ?V0 + 2,A
    511              zcl_mem_free( buf );
   \   000105                ; Setup parameters for call to function osal_mem_free
   \   000105   AA..         MOV     R2,?V0 + 0
   \   000107   AB..         MOV     R3,?V0 + 1
   \   000109   12....       LCALL   ??osal_mem_free?relay
   \   00010C   8003         SJMP    ??zclGeneral_SendGroupGetMembershipRequest_4
    512            }
    513            else
    514              status = ZMemError;
   \                     ??zclGeneral_SendGroupGetMembershipRequest_1:
   \   00010E   75..10       MOV     ?V0 + 2,#0x10
    515          
    516            return ( status );
   \                     ??zclGeneral_SendGroupGetMembershipRequest_4:
   \   000111   A9..         MOV     R1,?V0 + 2
   \   000113   02....       LJMP    ??Subroutine119_0 & 0xFFFF
    517          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   A882         MOV     R0,DPL
   \   000004   A983         MOV     R1,DPH
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   F583         MOV     DPH,A
   \   000002   E0           MOVX    A,@DPTR
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   A882         MOV     R0,DPL
   \   00000B   A983         MOV     R1,DPH
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine115_0:
   \   000000   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   000003   FB           MOV     R3,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine119_0:
   \   000000   7F0E         MOV     R7,#0xe
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    518          
    519          /*********************************************************************
    520           * @fn      zclGeneral_SendGroupResponse
    521           *
    522           * @brief   Send Group Response (not Group View Response)
    523           *
    524           * @param   srcEP - Sending application's endpoint
    525           * @param   dstAddr - where you want the message to go
    526           * @param   cmd - either COMMAND_GROUP_ADD_RSP or COMMAND_GROUP_REMOVE_RSP
    527           * @param   status - group command status
    528           * @param   groupID - what group
    529           *
    530           * @return  ZStatus_t
    531           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    532          ZStatus_t zclGeneral_SendGroupResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupResponse:
    533                                                  uint8 cmd, uint8 status, uint16 groupID,
    534                                                  uint8 disableDefaultRsp, uint8 seqNum )
    535          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
   \   00000E   8D..         MOV     ?V0 + 0,R5
   \   000010   7411         MOV     A,#0x11
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FC           MOV     R4,A
   \   000017   7412         MOV     A,#0x12
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ?Subroutine34 & 0xFFFF
    536            uint8 buf[3];
    537          
    538            buf[0] = status;
   \                     ??CrossCallReturnLabel_43:
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   12....       LCALL   ?Subroutine27 & 0xFFFF
    539            buf[1] = LO_UINT16( groupID );
   \                     ??CrossCallReturnLabel_26:
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E8           MOV     A,R0
   \   000029   F0           MOVX    @DPTR,A
    540            buf[2] = HI_UINT16( groupID );
   \   00002A   7402         MOV     A,#0x2
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ?Subroutine53 & 0xFFFF
    541          
    542            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    543                                    cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    544                                    disableDefaultRsp, 0, seqNum, 3, buf );
   \                     ??CrossCallReturnLabel_164:
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   75..03       MOV     ?V0 + 2,#0x3
   \   000038   75..00       MOV     ?V0 + 3,#0x0
   \   00003B   78..         MOV     R0,#?V0 + 2
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   ED           MOV     A,R5
   \   000041   F5..         MOV     ?V0 + 1,A
   \   000043   78..         MOV     R0,#?V0 + 1
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000048   E4           CLR     A
   \   000049   F5..         MOV     ?V0 + 2,A
   \   00004B   78..         MOV     R0,#?V0 + 2
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   EC           MOV     A,R4
   \   000051   F5..         MOV     ?V0 + 1,A
   \   000053   78..         MOV     R0,#?V0 + 1
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000058   75..01       MOV     ?V0 + 1,#0x1
   \   00005B   78..         MOV     R0,#?V0 + 1
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000060   78..         MOV     R0,#?V0 + 1
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000065   EF           MOV     A,R7
   \   000066   F5..         MOV     ?V0 + 1,A
   \   000068   78..         MOV     R0,#?V0 + 1
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006D   7C04         MOV     R4,#0x4
   \   00006F   02....       LJMP    ?Subroutine0 & 0xFFFF
    545          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_128:
   \   000003   740F         MOV     A,#0xf
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FD           MOV     R5,A
   \   000002   85..82       MOV     DPL,?XSP + 0
   \   000005   85..83       MOV     DPH,?XSP + 1
   \   000008   E5..         MOV     A,?V0 + 0
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7D00         MOV     R5,#0x0
   \   000002   EE           MOV     A,R6
   \   000003   F9           MOV     R1,A
   \   000004   12....       LCALL   ??zcl_SendCommand?relay
   \   000007   740B         MOV     A,#0xb
   \   000009   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000C   7403         MOV     A,#0x3
   \   00000E                REQUIRE ??Subroutine108_0
   \   00000E                ; // Fall through to label ??Subroutine108_0
    546          
    547          /*********************************************************************
    548           * @fn      zclGeneral_SendGroupViewResponse
    549           *
    550           * @brief   Call to send Group Response Command
    551           *
    552           * @param   srcEP - Sending application's endpoint
    553           * @param   dstAddr - where you want the message to go
    554           * @param   cmd - either COMMAND_GROUP_ADD_RSP or COMMAND_GROUP_REMOVE_RSP
    555           * @param   status - group command status
    556           * @param   grp - group info
    557           *
    558           * @return  ZStatus_t
    559           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    560          ZStatus_t zclGeneral_SendGroupViewResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendGroupViewResponse:
    561                                                      uint8 status, aps_Group_t *grp, uint8 disableDefaultRsp, uint8 seqNum )
    562          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 9,R1
   \   000007   8A..         MOV     ?V0 + 14,R2
   \   000009   8B..         MOV     ?V0 + 15,R3
   \   00000B   8C..         MOV     ?V0 + 7,R4
   \   00000D   8D..         MOV     ?V0 + 12,R5
   \   00000F   741A         MOV     A,#0x1a
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 8,A
    563            uint8 *buf;
    564            uint8 len;
    565            ZStatus_t stat;
    566          
    567            len = 1 + 2 + 1; // Status + Group ID + name length
   \   000017   7804         MOV     R0,#0x4
   \   000019   7418         MOV     A,#0x18
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 4,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 5,A
    568          
    569            if ( status == ZCL_STATUS_SUCCESS )
   \   000025   E5..         MOV     A,?V0 + 4
   \   000027   2402         ADD     A,#0x2
   \   000029   F5..         MOV     ?V0 + 2,A
   \   00002B   E5..         MOV     A,?V0 + 5
   \   00002D   3400         ADDC    A,#0x0
   \   00002F   F5..         MOV     ?V0 + 3,A
   \   000031   EC           MOV     A,R4
   \   000032   700A         JNZ     ??zclGeneral_SendGroupViewResponse_0
    570            {
    571              len += grp->name[0];  // String length
   \   000034   85..82       MOV     DPL,?V0 + 2
   \   000037   85..83       MOV     DPH,?V0 + 3
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   2404         ADD     A,#0x4
   \   00003D   F8           MOV     R0,A
    572            }
    573          
    574            buf = zcl_mem_alloc( len );
   \                     ??zclGeneral_SendGroupViewResponse_0:
   \   00003E   8882         MOV     DPL,R0
   \   000040   AE82         MOV     R6,DPL
   \   000042                ; Setup parameters for call to function osal_mem_alloc
   \   000042   EE           MOV     A,R6
   \   000043   FA           MOV     R2,A
   \   000044   7B00         MOV     R3,#0x0
   \   000046   12....       LCALL   ??osal_mem_alloc?relay
   \   000049   8A..         MOV     ?V0 + 0,R2
   \   00004B   8B..         MOV     ?V0 + 1,R3
    575            if ( buf )
   \   00004D   EA           MOV     A,R2
   \   00004E   45..         ORL     A,?V0 + 1
   \   000050   7003         JNZ     $+5
   \   000052   02....       LJMP    ??zclGeneral_SendGroupViewResponse_1 & 0xFFFF
    576            {
    577              buf[0] = status;
   \   000055   8A82         MOV     DPL,R2
   \   000057   8B83         MOV     DPH,R3
   \   000059   E5..         MOV     A,?V0 + 7
   \   00005B   F0           MOVX    @DPTR,A
    578              buf[1] = LO_UINT16( grp->ID );
   \   00005C   85..82       MOV     DPL,?V0 + 4
   \   00005F   85..83       MOV     DPH,?V0 + 5
   \   000062   E0           MOVX    A,@DPTR
   \   000063   8A82         MOV     DPL,R2
   \   000065   8B83         MOV     DPH,R3
   \   000067   A3           INC     DPTR
   \   000068   12....       LCALL   ?Subroutine66 & 0xFFFF
    579              buf[2] = HI_UINT16( grp->ID );
   \                     ??CrossCallReturnLabel_108:
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   8A82         MOV     DPL,R2
   \   00006E   8B83         MOV     DPH,R3
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   F0           MOVX    @DPTR,A
    580          
    581              if ( status == ZCL_STATUS_SUCCESS )
   \   000073   EA           MOV     A,R2
   \   000074   2403         ADD     A,#0x3
   \   000076   F8           MOV     R0,A
   \   000077   EB           MOV     A,R3
   \   000078   3400         ADDC    A,#0x0
   \   00007A   F9           MOV     R1,A
   \   00007B   E5..         MOV     A,?V0 + 7
   \   00007D   703D         JNZ     ??zclGeneral_SendGroupViewResponse_2
    582              {
    583                buf[3] = grp->name[0]; // string length
   \   00007F   85..82       MOV     DPL,?V0 + 2
   \   000082   85..83       MOV     DPH,?V0 + 3
   \   000085   E0           MOVX    A,@DPTR
   \   000086   8882         MOV     DPL,R0
   \   000088   8983         MOV     DPH,R1
   \   00008A   12....       LCALL   ?Subroutine66 & 0xFFFF
    584                zcl_memcpy( &buf[4], (&grp->name[1]), grp->name[0] );
    585              }
   \                     ??CrossCallReturnLabel_109:
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A982         MOV     R1,DPL
   \   000091   AA83         MOV     R2,DPH
   \   000093   89..         MOV     ?V0 + 4,R1
   \   000095   8A..         MOV     ?V0 + 5,R2
   \   000097   75..00       MOV     ?V0 + 6,#0x0
   \   00009A   78..         MOV     R0,#?V0 + 4
   \   00009C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00009F   85..82       MOV     DPL,?V0 + 2
   \   0000A2   85..83       MOV     DPH,?V0 + 3
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   FC           MOV     R4,A
   \   0000A7   7D00         MOV     R5,#0x0
   \   0000A9   E5..         MOV     A,?V0 + 0
   \   0000AB   2404         ADD     A,#0x4
   \   0000AD   FA           MOV     R2,A
   \   0000AE   EB           MOV     A,R3
   \   0000AF   3400         ADDC    A,#0x0
   \   0000B1   FB           MOV     R3,A
   \   0000B2   12....       LCALL   ??osal_memcpy?relay
   \   0000B5   7403         MOV     A,#0x3
   \   0000B7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000BA   8006         SJMP    ??zclGeneral_SendGroupViewResponse_3
    586              else //ZCL_STATUS_NOT_FOUND
    587              {
    588                buf[3] = 0;
   \                     ??zclGeneral_SendGroupViewResponse_2:
   \   0000BC   8882         MOV     DPL,R0
   \   0000BE   8983         MOV     DPH,R1
   \   0000C0   E4           CLR     A
   \   0000C1   F0           MOVX    @DPTR,A
    589              }
    590          
    591              stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_GROUPS,
    592                                      COMMAND_GROUP_VIEW_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    593                                      disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendGroupViewResponse_3:
   \   0000C2                ; Setup parameters for call to function zcl_SendCommand
   \   0000C2   78..         MOV     R0,#?V0 + 0
   \   0000C4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C7   8E..         MOV     ?V0 + 2,R6
   \   0000C9   75..00       MOV     ?V0 + 3,#0x0
   \   0000CC   78..         MOV     R0,#?V0 + 2
   \   0000CE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D1   E5..         MOV     A,?V0 + 8
   \   0000D3   F5..         MOV     ?V0 + 2,A
   \   0000D5   78..         MOV     R0,#?V0 + 2
   \   0000D7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DA   E4           CLR     A
   \   0000DB   F5..         MOV     ?V0 + 2,A
   \   0000DD   78..         MOV     R0,#?V0 + 2
   \   0000DF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E2   E5..         MOV     A,?V0 + 12
   \   0000E4   F5..         MOV     ?V0 + 2,A
   \   0000E6   78..         MOV     R0,#?V0 + 2
   \   0000E8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EB   75..01       MOV     ?V0 + 2,#0x1
   \   0000EE   78..         MOV     R0,#?V0 + 2
   \   0000F0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F3   78..         MOV     R0,#?V0 + 2
   \   0000F5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F8   78..         MOV     R0,#?V0 + 2
   \   0000FA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000FD   7C04         MOV     R4,#0x4
   \   0000FF   7D00         MOV     R5,#0x0
   \   000101   AA..         MOV     R2,?V0 + 14
   \   000103   AB..         MOV     R3,?V0 + 15
   \   000105   A9..         MOV     R1,?V0 + 9
   \   000107   12....       LCALL   ??zcl_SendCommand?relay
   \   00010A   740B         MOV     A,#0xb
   \   00010C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00010F   E9           MOV     A,R1
   \   000110   FE           MOV     R6,A
    594              zcl_mem_free( buf );
   \   000111                ; Setup parameters for call to function osal_mem_free
   \   000111   AA..         MOV     R2,?V0 + 0
   \   000113   AB..         MOV     R3,?V0 + 1
   \   000115   12....       LCALL   ??osal_mem_free?relay
   \   000118   8002         SJMP    ??zclGeneral_SendGroupViewResponse_4
    595            }
    596            else
    597            {
    598              stat = ZMemError;
   \                     ??zclGeneral_SendGroupViewResponse_1:
   \   00011A   7E10         MOV     R6,#0x10
    599            }
    600          
    601            return ( stat );
   \                     ??zclGeneral_SendGroupViewResponse_4:
   \   00011C   02....       LJMP    ?Subroutine10 & 0xFFFF
    602          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   85..82       MOV     DPL,?V0 + 4
   \   000004   85..83       MOV     DPH,?V0 + 5
   \   000007   A3           INC     DPTR
   \   000008   22           RET
    603          #endif // ZCL_GROUPS
    604          
    605          #ifdef ZCL_SCENES
    606          /*********************************************************************
    607           * @fn      zclGeneral_SendAddSceneRequest
    608           *
    609           * @brief   Send the (Enhanced) Add Scene Request to a device. You can
    610           *           also use the appropriate macro.
    611           *
    612           * @param   srcEP - Sending Apps endpoint
    613           * @param   dstAddr - where to send the request
    614           * @param   scene - pointer to the scene structure
    615           * @param  cmd - COMMAND_SCENE_ADD or COMMAND_SCENE_ENHANCED_ADD
    616           * @param   disableDefaultRsp - whether to disable the Default Response command
    617           * @param   seqNum - sequence number
    618           *
    619           * @return  ZStatus_t
    620           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    621          ZStatus_t zclGeneral_SendAddSceneRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendAddSceneRequest:
    622                                                    uint8 cmd, zclGeneral_Scene_t *scene,
    623                                                    uint8 disableDefaultRsp, uint8 seqNum )
    624          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   7401         MOV     A,#0x1
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000012   EC           MOV     A,R4
   \   000013   85..82       MOV     DPL,?XSP + 0
   \   000016   85..83       MOV     DPH,?XSP + 1
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   89..         MOV     ?V0 + 14,R1
   \   00001C   8D..         MOV     ?V0 + 15,R5
   \   00001E   741D         MOV     A,#0x1d
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 7,A
   \   000026   741B         MOV     A,#0x1b
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   12....       LCALL   ?Subroutine18 & 0xFFFF
    625            uint8 *buf;
    626            uint8 *pBuf;
    627            uint8 len;
    628            ZStatus_t status;
    629          
    630            len = 2 + 1 + 2;    // Group ID + Scene ID + transition time
    631            len += scene->name[0] + 1; // String + 1 for length
    632          
    633            // Add something for the extension field length
    634            len += scene->extLen;
   \                     ??CrossCallReturnLabel_8:
   \   00002E   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000031   2406         ADD     A,#0x6
   \   000033   F8           MOV     R0,A
    635          
    636            buf = zcl_mem_alloc( len );
   \   000034   8882         MOV     DPL,R0
   \   000036   8582..       MOV     ?V0 + 2,DPL
   \   000039   75..00       MOV     ?V0 + 3,#0x0
   \   00003C                ; Setup parameters for call to function osal_mem_alloc
   \   00003C   FA           MOV     R2,A
   \   00003D   AB..         MOV     R3,?V0 + 3
   \   00003F   12....       LCALL   ??osal_mem_alloc?relay
   \   000042   8A..         MOV     ?V0 + 8,R2
   \   000044   8B..         MOV     ?V0 + 9,R3
    637            if ( buf )
   \   000046   EA           MOV     A,R2
   \   000047   45..         ORL     A,?V0 + 9
   \   000049   7003         JNZ     $+5
   \   00004B   02....       LJMP    ??zclGeneral_SendAddSceneRequest_0 & 0xFFFF
    638            {
    639              pBuf = buf;
   \   00004E   AE..         MOV     R6,?V0 + 8
   \   000050   AF..         MOV     R7,?V0 + 9
    640              *pBuf++ = LO_UINT16( scene->groupID );
   \   000052   85..82       MOV     DPL,?V0 + 0
   \   000055   85..83       MOV     DPH,?V0 + 1
   \   000058   E0           MOVX    A,@DPTR
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   A3           INC     DPTR
   \   00005F   AE82         MOV     R6,DPL
   \   000061   12....       LCALL   ?Subroutine20 & 0xFFFF
    641              *pBuf++ = HI_UINT16( scene->groupID );
    642              *pBuf++ = scene->ID;
    643              *pBuf++ = LO_UINT16( scene->transTime );
   \                     ??CrossCallReturnLabel_10:
   \   000064   E5..         MOV     A,?V0 + 0
   \   000066   2403         ADD     A,#0x3
   \   000068   F8           MOV     R0,A
   \   000069   E5..         MOV     A,?V0 + 1
   \   00006B   3400         ADDC    A,#0x0
   \   00006D   F9           MOV     R1,A
   \   00006E   8882         MOV     DPL,R0
   \   000070   8983         MOV     DPH,R1
   \   000072   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000075   AF83         MOV     R7,DPH
    644              *pBuf++ = HI_UINT16( scene->transTime );
   \   000077   8882         MOV     DPL,R0
   \   000079   8983         MOV     DPH,R1
   \   00007B   A3           INC     DPTR
   \   00007C   12....       LCALL   ?Subroutine28 & 0xFFFF
    645              *pBuf++ = scene->name[0]; // string length
   \                     ??CrossCallReturnLabel_31:
   \   00007F   8E82         MOV     DPL,R6
   \   000081   8F83         MOV     DPH,R7
   \   000083   F0           MOVX    @DPTR,A
   \   000084   A3           INC     DPTR
   \   000085   0E           INC     R6
   \   000086   AF83         MOV     R7,DPH
    646              zcl_memcpy( pBuf, &(scene->name[1]), scene->name[0] );
   \   000088                ; Setup parameters for call to function osal_memcpy
   \   000088   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008E   85..82       MOV     DPL,?V0 + 10
   \   000091   85..83       MOV     DPH,?V0 + 11
   \   000094   E0           MOVX    A,@DPTR
   \   000095   FC           MOV     R4,A
   \   000096   7D00         MOV     R5,#0x0
   \   000098   EE           MOV     A,R6
   \   000099   FA           MOV     R2,A
   \   00009A   EF           MOV     A,R7
   \   00009B   FB           MOV     R3,A
   \   00009C   12....       LCALL   ??osal_memcpy?relay
   \   00009F   7403         MOV     A,#0x3
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
    647              pBuf += scene->name[0]; // move pass name
    648          
    649              // Add the extension fields
    650              if ( scene->extLen > 0 )
   \   0000A4   85..82       MOV     DPL,?V0 + 12
   \   0000A7   85..83       MOV     DPH,?V0 + 13
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F9           MOV     R1,A
   \   0000AC   602E         JZ      ??zclGeneral_SendAddSceneRequest_1
    651                zcl_memcpy( pBuf, scene->extField, scene->extLen );
   \   0000AE                ; Setup parameters for call to function osal_memcpy
   \   0000AE   E5..         MOV     A,?V0 + 0
   \   0000B0   2418         ADD     A,#0x18
   \   0000B2   F5..         MOV     ?V0 + 4,A
   \   0000B4   E5..         MOV     A,?V0 + 1
   \   0000B6   3400         ADDC    A,#0x0
   \   0000B8   F5..         MOV     ?V0 + 5,A
   \   0000BA   78..         MOV     R0,#?V0 + 4
   \   0000BC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000BF   89..         MOV     ?V0 + 0,R1
   \   0000C1   AC..         MOV     R4,?V0 + 0
   \   0000C3   7D00         MOV     R5,#0x0
   \   0000C5   85..82       MOV     DPL,?V0 + 10
   \   0000C8   85..83       MOV     DPH,?V0 + 11
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   F8           MOV     R0,A
   \   0000CD   EE           MOV     A,R6
   \   0000CE   28           ADD     A,R0
   \   0000CF   FA           MOV     R2,A
   \   0000D0   EF           MOV     A,R7
   \   0000D1   3400         ADDC    A,#0x0
   \   0000D3   FB           MOV     R3,A
   \   0000D4   12....       LCALL   ??osal_memcpy?relay
   \   0000D7   7403         MOV     A,#0x3
   \   0000D9   12....       LCALL   ?DEALLOC_XSTACK8
    652          
    653              status = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    654                                        cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    655                                        disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendAddSceneRequest_1:
   \   0000DC                ; Setup parameters for call to function zcl_SendCommand
   \   0000DC   78..         MOV     R0,#?V0 + 8
   \   0000DE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E1   78..         MOV     R0,#?V0 + 2
   \   0000E3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E6   E5..         MOV     A,?V0 + 7
   \   0000E8   F5..         MOV     ?V0 + 0,A
   \   0000EA   78..         MOV     R0,#?V0 + 0
   \   0000EC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EF   E4           CLR     A
   \   0000F0   F5..         MOV     ?V0 + 0,A
   \   0000F2   F5..         MOV     ?V0 + 1,A
   \   0000F4   78..         MOV     R0,#?V0 + 0
   \   0000F6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F9   E5..         MOV     A,?V0 + 15
   \   0000FB   F5..         MOV     ?V0 + 0,A
   \   0000FD   78..         MOV     R0,#?V0 + 0
   \   0000FF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000102   75..00       MOV     ?V0 + 0,#0x0
   \   000105   78..         MOV     R0,#?V0 + 0
   \   000107   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00010A   75..01       MOV     ?V0 + 0,#0x1
   \   00010D   78..         MOV     R0,#?V0 + 0
   \   00010F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000112   740A         MOV     A,#0xa
   \   000114   12....       LCALL   ?XSTACK_DISP0_8
   \   000117   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_130:
   \   00011A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00011D   7C05         MOV     R4,#0x5
   \   00011F   7D00         MOV     R5,#0x0
   \   000121   740C         MOV     A,#0xc
   \   000123   12....       LCALL   ?XSTACK_DISP0_8
   \   000126   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000129   A9..         MOV     R1,?V0 + 14
   \   00012B   12....       LCALL   ??zcl_SendCommand?relay
   \   00012E   740B         MOV     A,#0xb
   \   000130   12....       LCALL   ?DEALLOC_XSTACK8
   \   000133   E9           MOV     A,R1
   \   000134   FE           MOV     R6,A
    656              zcl_mem_free( buf );
   \   000135                ; Setup parameters for call to function osal_mem_free
   \   000135   AA..         MOV     R2,?V0 + 8
   \   000137   AB..         MOV     R3,?V0 + 9
   \   000139   12....       LCALL   ??osal_mem_free?relay
   \   00013C   8002         SJMP    ??zclGeneral_SendAddSceneRequest_2
    657            }
    658            else
    659              status = ZMemError;
   \                     ??zclGeneral_SendAddSceneRequest_0:
   \   00013E   7E10         MOV     R6,#0x10
    660          
    661            return ( status );
   \                     ??zclGeneral_SendAddSceneRequest_2:
   \   000140   02....       LJMP    ?Subroutine3 & 0xFFFF
    662          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2408         ADD     A,#0x8
   \   000004                REQUIRE ??Subroutine104_0
   \   000004                ; // Fall through to label ??Subroutine104_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine104_0:
   \   000000   F5..         MOV     ?V0 + 4,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004   3400         ADDC    A,#0x0
   \   000006   F5..         MOV     ?V0 + 5,A
   \   000008   75..00       MOV     ?V0 + 6,#0x0
   \   00000B   78..         MOV     R0,#?V0 + 4
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0E           INC     R6
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   85..82       MOV     DPL,?V0 + 12
   \   000003   85..83       MOV     DPH,?V0 + 13
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   85..82       MOV     DPL,?V0 + 10
   \   00000B   85..83       MOV     DPH,?V0 + 11
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   28           ADD     A,R0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ??Subroutine105_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000003   85..82       MOV     DPL,?V0 + 10
   \   000006   85..83       MOV     DPH,?V0 + 11
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   AF83         MOV     R7,DPH
   \   000002   85..82       MOV     DPL,?V0 + 0
   \   000005   85..83       MOV     DPH,?V0 + 1
   \   000008   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   00000B   85..82       MOV     DPL,?V0 + 0
   \   00000E   85..83       MOV     DPH,?V0 + 1
   \   000011   A3           INC     DPTR
   \   000012   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine105_0
   \   000001                ; // Fall through to label ??Subroutine105_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine105_0:
   \   000000   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000003   AF83         MOV     R7,DPH
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000003   2417         ADD     A,#0x17
   \   000005   F5..         MOV     ?V0 + 12,A
   \   000007   E5..         MOV     A,?V0 + 1
   \   000009   3400         ADDC    A,#0x0
   \   00000B   F5..         MOV     ?V0 + 13,A
   \   00000D   E5..         MOV     A,?V0 + 0
   \   00000F   2407         ADD     A,#0x7
   \   000011   F5..         MOV     ?V0 + 10,A
   \   000013   E5..         MOV     A,?V0 + 1
   \   000015   3400         ADDC    A,#0x0
   \   000017   F5..         MOV     ?V0 + 11,A
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine110_0:
   \   000000   EA           MOV     A,R2
   \   000001                REQUIRE ??Subroutine111_0
   \   000001                ; // Fall through to label ??Subroutine111_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine111_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   EE           MOV     A,R6
   \   000001   F9           MOV     R1,A
   \   000002   7403         MOV     A,#0x3
   \   000004                REQUIRE ??Subroutine132_0
   \   000004                ; // Fall through to label ??Subroutine132_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine132_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine133_0
   \   000003                ; // Fall through to label ??Subroutine133_0
    663          
    664          /*********************************************************************
    665           * @fn      zclGeneral_SendSceneRequest
    666           *
    667           * @brief   Send a Scene Request to a device.  You can also use the
    668           *          appropriate macro.
    669           *
    670           * @param   srcEP - Sending Apps endpoint
    671           * @param   dstAddr - where to send the request
    672           * @param   cmd - one of the following:
    673           *              COMMAND_SCENE_VIEW
    674           *              COMMAND_SCENE_REMOVE
    675           *              COMMAND_SCENE_REMOVE_ALL
    676           *              COMMAND_SCENE_STORE
    677           *              COMMAND_SCENE_RECALL
    678           *              COMMAND_SCENE_GET_MEMBERSHIP
    679           *              COMMAND_SCENE_ENHANCED_VIEW
    680           * @param   groupID - group ID
    681           * @param   sceneID - scene ID (not applicable to COMMAND_SCENE_REMOVE_ALL and
    682           *                    COMMAND_SCENE_GET_MEMBERSHIP)
    683           * @param   disableDefaultRsp - whether to disable the Default Response command
    684           * @param   seqNum - sequence number
    685           * @return  ZStatus_t
    686           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    687          ZStatus_t zclGeneral_SendSceneRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendSceneRequest:
    688                                                 uint8 cmd, uint16 groupID, uint8 sceneID,
    689                                                 uint8 disableDefaultRsp, uint8 seqNum )
    690          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
   \   00000E   8D..         MOV     ?V0 + 0,R5
   \   000010   7411         MOV     A,#0x11
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FD           MOV     R5,A
   \   000017   7412         MOV     A,#0x12
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 1,A
    691            uint8 buf[3];
    692            uint8 len = 2;
   \   00001F   7C02         MOV     R4,#0x2
   \   000021   740F         MOV     A,#0xf
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ?Subroutine31 & 0xFFFF
    693          
    694            buf[0] = LO_UINT16( groupID );
    695            buf[1] = HI_UINT16( groupID );
   \                     ??CrossCallReturnLabel_38:
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E9           MOV     A,R1
   \   00002D   F0           MOVX    @DPTR,A
    696          
    697            if ( cmd != COMMAND_SCENE_REMOVE_ALL && cmd != COMMAND_SCENE_GET_MEMBERSHIP )
   \   00002E   7403         MOV     A,#0x3
   \   000030   6F           XRL     A,R7
   \   000031   600D         JZ      ??zclGeneral_SendSceneRequest_0
   \   000033   7406         MOV     A,#0x6
   \   000035   6F           XRL     A,R7
   \   000036   6008         JZ      ??zclGeneral_SendSceneRequest_0
    698            {
    699              buf[2] = sceneID;
   \   000038   EC           MOV     A,R4
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   E5..         MOV     A,?V0 + 0
   \   00003E   F0           MOVX    @DPTR,A
    700              len++;
   \   00003F   0C           INC     R4
    701            }
    702          
    703            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    704                                      cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    705                                      disableDefaultRsp, 0, seqNum, len, buf ) );
   \                     ??zclGeneral_SendSceneRequest_0:
   \   000040                ; Setup parameters for call to function zcl_SendCommand
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   8582..       MOV     ?V0 + 2,DPL
   \   000049   8583..       MOV     ?V0 + 3,DPH
   \   00004C   78..         MOV     R0,#?V0 + 2
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   8C..         MOV     ?V0 + 2,R4
   \   000053   75..00       MOV     ?V0 + 3,#0x0
   \   000056   78..         MOV     R0,#?V0 + 2
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005B   78..         MOV     R0,#?V0 + 1
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000060   E4           CLR     A
   \   000061   F5..         MOV     ?V0 + 2,A
   \   000063   78..         MOV     R0,#?V0 + 2
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   ED           MOV     A,R5
   \   000069   F5..         MOV     ?V0 + 1,A
   \   00006B   78..         MOV     R0,#?V0 + 1
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000070   75..00       MOV     ?V0 + 1,#0x0
   \   000073   78..         MOV     R0,#?V0 + 1
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000078   75..01       MOV     ?V0 + 1,#0x1
   \   00007B   78..         MOV     R0,#?V0 + 1
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000080   EF           MOV     A,R7
   \   000081   F5..         MOV     ?V0 + 1,A
   \   000083   78..         MOV     R0,#?V0 + 1
   \   000085   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000088   7C05         MOV     R4,#0x5
   \   00008A   02....       LJMP    ?Subroutine0 & 0xFFFF
    706          }
    707          
    708          /*********************************************************************
    709           * @fn      zclGeneral_SendSceneResponse
    710           *
    711           * @brief   Send Group Response (not Group View Response)
    712           *
    713           * @param   srcEP - Sending application's endpoint
    714           * @param   dstAddr - where you want the message to go
    715           * @param   cmd - either COMMAND_SCENE_ADD_RSP, COMMAND_SCENE_REMOVE_RSP
    716           *                COMMAND_SCENE_STORE_RSP, or COMMAND_SCENE_REMOVE_ALL_RSP
    717           * @param   status - scene command status
    718           * @param   groupID - what group
    719           * @param   sceneID - what scene (not applicable to COMMAND_SCENE_REMOVE_ALL_RSP)
    720           *
    721           * @return  ZStatus_t
    722           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    723          ZStatus_t zclGeneral_SendSceneResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendSceneResponse:
    724                                                  uint8 cmd, uint8 status, uint16 groupID,
    725                                                  uint8 sceneID, uint8 disableDefaultRsp, uint8 seqNum )
    726          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
   \   00000E   8D..         MOV     ?V0 + 0,R5
   \   000010   7413         MOV     A,#0x13
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FD           MOV     R5,A
   \   000017   7414         MOV     A,#0x14
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 1,A
   \   00001F   7415         MOV     A,#0x15
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F5..         MOV     ?V0 + 4,A
    727            uint8 buf[4];
    728            uint8 len = 1 + 2; // Status + Group ID
   \   000027   7C03         MOV     R4,#0x3
    729          
    730            buf[0] = status;
   \   000029   85..82       MOV     DPL,?XSP + 0
   \   00002C   85..83       MOV     DPH,?XSP + 1
   \   00002F   E5..         MOV     A,?V0 + 0
   \   000031   F0           MOVX    @DPTR,A
   \   000032   7411         MOV     A,#0x11
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   12....       LCALL   ?Subroutine27 & 0xFFFF
    731            buf[1] = LO_UINT16( groupID );
   \                     ??CrossCallReturnLabel_27:
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   E8           MOV     A,R0
   \   00003E   F0           MOVX    @DPTR,A
    732            buf[2] = HI_UINT16( groupID );
   \   00003F   7402         MOV     A,#0x2
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   E9           MOV     A,R1
   \   000045   F0           MOVX    @DPTR,A
    733          
    734            if ( cmd != COMMAND_SCENE_REMOVE_ALL_RSP )
   \   000046   EC           MOV     A,R4
   \   000047   6F           XRL     A,R7
   \   000048   6007         JZ      ??zclGeneral_SendSceneResponse_0
    735            {
    736              buf[3] = sceneID;
   \   00004A   EC           MOV     A,R4
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   ED           MOV     A,R5
   \   00004F   F0           MOVX    @DPTR,A
    737              len++;
   \   000050   0C           INC     R4
    738            }
    739          
    740            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    741                                    cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    742                                    disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendSceneResponse_0:
   \   000051                ; Setup parameters for call to function zcl_SendCommand
   \   000051   85..82       MOV     DPL,?XSP + 0
   \   000054   85..83       MOV     DPH,?XSP + 1
   \   000057   8582..       MOV     ?V0 + 2,DPL
   \   00005A   8583..       MOV     ?V0 + 3,DPH
   \   00005D   78..         MOV     R0,#?V0 + 2
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   8C..         MOV     ?V0 + 2,R4
   \   000064   75..00       MOV     ?V0 + 3,#0x0
   \   000067   78..         MOV     R0,#?V0 + 2
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006C   E5..         MOV     A,?V0 + 4
   \   00006E   F5..         MOV     ?V0 + 2,A
   \   000070   78..         MOV     R0,#?V0 + 2
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000075   E4           CLR     A
   \   000076   F5..         MOV     ?V0 + 2,A
   \   000078   78..         MOV     R0,#?V0 + 2
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007D   78..         MOV     R0,#?V0 + 1
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000082   75..01       MOV     ?V0 + 1,#0x1
   \   000085   78..         MOV     R0,#?V0 + 1
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008A   78..         MOV     R0,#?V0 + 1
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008F   EF           MOV     A,R7
   \   000090   F5..         MOV     ?V0 + 1,A
   \   000092   78..         MOV     R0,#?V0 + 1
   \   000094   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000097   7C05         MOV     R4,#0x5
   \   000099   7D00         MOV     R5,#0x0
   \   00009B   EE           MOV     A,R6
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??zcl_SendCommand?relay
   \   0000A0   740B         MOV     A,#0xb
   \   0000A2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A5   7404         MOV     A,#0x4
   \   0000A7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AA                REQUIRE ?Subroutine5
   \   0000AA                ; // Fall through to label ?Subroutine5
    743          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   7F05         MOV     R7,#0x5
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    744          
    745          /*********************************************************************
    746           * @fn      zclGeneral_SendSceneViewResponse
    747           *
    748           * @brief   Call to send Scene (Enahced) View Response Command. You can
    749           *           also use the appropriate macro.
    750           *
    751           * @param   srcEP - Sending application's endpoint
    752           * @param   dstAddr - where you want the message to go
    753           * @param   cmd - either COMMAND_SCENE_VIEW_RSP or COMMAND_SCENE_ENHANCED_VIEW_RSP
    754           * @param   status - scene command status
    755           * @param   scene - scene info
    756           *
    757           * @return  ZStatus_t
    758           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    759          ZStatus_t zclGeneral_SendSceneViewRsp( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendSceneViewRsp:
    760                                                 uint8 cmd, uint8 status, zclGeneral_Scene_t *scene,
    761                                                 uint8 disableDefaultRsp, uint8 seqNum )
    762          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   85..82       MOV     DPL,?XSP + 0
   \   00000E   85..83       MOV     DPH,?XSP + 1
   \   000011   F0           MOVX    @DPTR,A
   \   000012   7401         MOV     A,#0x1
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00001A   8C..         MOV     ?V0 + 14,R4
   \   00001C   8D..         MOV     ?V0 + 7,R5
   \   00001E   741E         MOV     A,#0x1e
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 15,A
    763            uint8 *buf;
    764            uint8 *pBuf;
    765            uint8 len = 1 + 2 + 1; // Status + Group ID + Scene ID
   \   000026   7804         MOV     R0,#0x4
   \   000028   741B         MOV     A,#0x1b
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   12....       LCALL   ?Subroutine18 & 0xFFFF
    766            ZStatus_t stat;
    767          
    768            if ( status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_9:
   \   000030   ED           MOV     A,R5
   \   000031   7006         JNZ     ??zclGeneral_SendSceneViewRsp_0
    769            {
    770              len += 2; // Transition Time
    771              len += scene->name[0] + 1; // string + 1 for length
    772          
    773              // Add something for the extension field length
    774              len += scene->extLen;
   \   000033   12....       LCALL   ?Subroutine42 & 0xFFFF
    775            }
   \                     ??CrossCallReturnLabel_54:
   \   000036   2407         ADD     A,#0x7
   \   000038   F8           MOV     R0,A
    776          
    777            buf = zcl_mem_alloc( len );
   \                     ??zclGeneral_SendSceneViewRsp_0:
   \   000039   8882         MOV     DPL,R0
   \   00003B   8582..       MOV     ?V0 + 2,DPL
   \   00003E   75..00       MOV     ?V0 + 3,#0x0
   \   000041                ; Setup parameters for call to function osal_mem_alloc
   \   000041   AA..         MOV     R2,?V0 + 2
   \   000043   AB..         MOV     R3,?V0 + 3
   \   000045   12....       LCALL   ??osal_mem_alloc?relay
   \   000048   8A..         MOV     ?V0 + 8,R2
   \   00004A   8B..         MOV     ?V0 + 9,R3
    778            if ( buf )
   \   00004C   EA           MOV     A,R2
   \   00004D   45..         ORL     A,?V0 + 9
   \   00004F   7003         JNZ     $+5
   \   000051   02....       LJMP    ??zclGeneral_SendSceneViewRsp_1 & 0xFFFF
    779            {
    780              pBuf = buf;
   \   000054   AE..         MOV     R6,?V0 + 8
   \   000056   AF..         MOV     R7,?V0 + 9
    781              *pBuf++ = status;
   \   000058   8E82         MOV     DPL,R6
   \   00005A   8F83         MOV     DPH,R7
   \   00005C   E5..         MOV     A,?V0 + 7
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   AE82         MOV     R6,DPL
   \   000062   AF83         MOV     R7,DPH
    782              *pBuf++ = LO_UINT16( scene->groupID );
   \   000064   85..82       MOV     DPL,?V0 + 0
   \   000067   85..83       MOV     DPH,?V0 + 1
   \   00006A   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   00006D   12....       LCALL   ?Subroutine20 & 0xFFFF
    783              *pBuf++ = HI_UINT16( scene->groupID );
    784              *pBuf++ = scene->ID;
    785              if ( status == ZCL_STATUS_SUCCESS )
   \                     ??CrossCallReturnLabel_11:
   \   000070   E5..         MOV     A,?V0 + 7
   \   000072   6003         JZ      $+5
   \   000074   02....       LJMP    ??zclGeneral_SendSceneViewRsp_2 & 0xFFFF
    786              {
    787                uint16 transTime = scene->transTime;
   \   000077   85..82       MOV     DPL,?V0 + 0
   \   00007A   85..83       MOV     DPH,?V0 + 1
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   12....       LCALL   ?Subroutine48 & 0xFFFF
    788                if ( cmd == COMMAND_SCENE_ENHANCED_VIEW_RSP )
   \                     ??CrossCallReturnLabel_67:
   \   000083   7441         MOV     A,#0x41
   \   000085   65..         XRL     A,?V0 + 14
   \   000087   7021         JNZ     ??zclGeneral_SendSceneViewRsp_3
    789                {
    790                  // Transition time is in 1/10s
    791                  transTime *= 10;
    792                  transTime += scene->transTime100ms;
   \   000089   E8           MOV     A,R0
   \   00008A   75F00A       MOV     B,#0xa
   \   00008D   A4           MUL     AB
   \   00008E   F8           MOV     R0,A
   \   00008F   AAF0         MOV     R2,B
   \   000091   75F00A       MOV     B,#0xa
   \   000094   E9           MOV     A,R1
   \   000095   A4           MUL     AB
   \   000096   2A           ADD     A,R2
   \   000097   F9           MOV     R1,A
   \   000098   85..82       MOV     DPL,?V0 + 0
   \   00009B   85..83       MOV     DPH,?V0 + 1
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   28           ADD     A,R0
   \   0000A5   F8           MOV     R0,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   39           ADDC    A,R1
   \   0000A9   F9           MOV     R1,A
    793                }
    794          
    795                *pBuf++ = LO_UINT16( transTime );
   \                     ??zclGeneral_SendSceneViewRsp_3:
   \   0000AA   E8           MOV     A,R0
   \   0000AB   8E82         MOV     DPL,R6
   \   0000AD   8F83         MOV     DPH,R7
   \   0000AF   12....       LCALL   ??Subroutine120_0 & 0xFFFF
    796                *pBuf++ = HI_UINT16( transTime );
   \                     ??CrossCallReturnLabel_254:
   \   0000B2   A3           INC     DPTR
   \   0000B3   0E           INC     R6
   \   0000B4   0E           INC     R6
   \   0000B5   AF83         MOV     R7,DPH
    797                *pBuf++ = scene->name[0]; // string length
   \   0000B7   85..82       MOV     DPL,?V0 + 10
   \   0000BA   85..83       MOV     DPH,?V0 + 11
   \   0000BD   12....       LCALL   ?Subroutine28 & 0xFFFF
    798                if ( scene->name[0] != 0 )
   \                     ??CrossCallReturnLabel_32:
   \   0000C0   F9           MOV     R1,A
   \   0000C1   6027         JZ      ??zclGeneral_SendSceneViewRsp_4
    799                {
    800                  zcl_memcpy( pBuf, &(scene->name[1]), scene->name[0] );
   \   0000C3                ; Setup parameters for call to function osal_memcpy
   \   0000C3   12....       LCALL   ?Subroutine71 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C9   89..         MOV     ?V0 + 4,R1
   \   0000CB   AC..         MOV     R4,?V0 + 4
   \   0000CD   7D00         MOV     R5,#0x0
   \   0000CF   EE           MOV     A,R6
   \   0000D0   FA           MOV     R2,A
   \   0000D1   EF           MOV     A,R7
   \   0000D2   FB           MOV     R3,A
   \   0000D3   12....       LCALL   ??osal_memcpy?relay
   \   0000D6   7403         MOV     A,#0x3
   \   0000D8   12....       LCALL   ?DEALLOC_XSTACK8
    801                  pBuf += scene->name[0]; // move pass name
   \   0000DB   85..82       MOV     DPL,?V0 + 10
   \   0000DE   85..83       MOV     DPH,?V0 + 11
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F8           MOV     R0,A
   \   0000E3   EE           MOV     A,R6
   \   0000E4   28           ADD     A,R0
   \   0000E5   FE           MOV     R6,A
   \   0000E6   EF           MOV     A,R7
   \   0000E7   3400         ADDC    A,#0x0
   \   0000E9   FF           MOV     R7,A
    802                }
    803          
    804                // Add the extension fields
    805                if ( scene->extLen > 0 )
   \                     ??zclGeneral_SendSceneViewRsp_4:
   \   0000EA   85..82       MOV     DPL,?V0 + 12
   \   0000ED   85..83       MOV     DPH,?V0 + 13
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   F9           MOV     R1,A
   \   0000F2   601C         JZ      ??zclGeneral_SendSceneViewRsp_2
    806                  zcl_memcpy( pBuf, scene->extField, scene->extLen );
   \   0000F4                ; Setup parameters for call to function osal_memcpy
   \   0000F4   E5..         MOV     A,?V0 + 0
   \   0000F6   2418         ADD     A,#0x18
   \   0000F8   12....       LCALL   ??Subroutine104_0 & 0xFFFF
    807              }
   \                     ??CrossCallReturnLabel_173:
   \   0000FB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000FE   89..         MOV     ?V0 + 0,R1
   \   000100   AC..         MOV     R4,?V0 + 0
   \   000102   7D00         MOV     R5,#0x0
   \   000104   EE           MOV     A,R6
   \   000105   FA           MOV     R2,A
   \   000106   EF           MOV     A,R7
   \   000107   FB           MOV     R3,A
   \   000108   12....       LCALL   ??osal_memcpy?relay
   \   00010B   7403         MOV     A,#0x3
   \   00010D   12....       LCALL   ?DEALLOC_XSTACK8
    808          
    809              stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    810                                      cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    811                                      disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendSceneViewRsp_2:
   \   000110                ; Setup parameters for call to function zcl_SendCommand
   \   000110   78..         MOV     R0,#?V0 + 8
   \   000112   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000115   78..         MOV     R0,#?V0 + 2
   \   000117   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011A   E5..         MOV     A,?V0 + 15
   \   00011C   F5..         MOV     ?V0 + 0,A
   \   00011E   78..         MOV     R0,#?V0 + 0
   \   000120   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000123   E4           CLR     A
   \   000124   F5..         MOV     ?V0 + 0,A
   \   000126   F5..         MOV     ?V0 + 1,A
   \   000128   78..         MOV     R0,#?V0 + 0
   \   00012A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012D   7424         MOV     A,#0x24
   \   00012F   12....       LCALL   ?XSTACK_DISP0_8
   \   000132   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000135   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000138   75..01       MOV     ?V0 + 0,#0x1
   \   00013B   78..         MOV     R0,#?V0 + 0
   \   00013D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000140   78..         MOV     R0,#?V0 + 0
   \   000142   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000145   E5..         MOV     A,?V0 + 14
   \   000147   F5..         MOV     ?V0 + 0,A
   \   000149   78..         MOV     R0,#?V0 + 0
   \   00014B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00014E   7C05         MOV     R4,#0x5
   \   000150   7D00         MOV     R5,#0x0
   \   000152   740C         MOV     A,#0xc
   \   000154   12....       LCALL   ?XSTACK_DISP0_8
   \   000157   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   00015A   740B         MOV     A,#0xb
   \   00015C   12....       LCALL   ?XSTACK_DISP0_8
   \   00015F   E0           MOVX    A,@DPTR
   \   000160   F9           MOV     R1,A
   \   000161   12....       LCALL   ??zcl_SendCommand?relay
   \   000164   740B         MOV     A,#0xb
   \   000166   12....       LCALL   ?DEALLOC_XSTACK8
   \   000169   E9           MOV     A,R1
   \   00016A   FE           MOV     R6,A
    812              zcl_mem_free( buf );
   \   00016B                ; Setup parameters for call to function osal_mem_free
   \   00016B   AA..         MOV     R2,?V0 + 8
   \   00016D   AB..         MOV     R3,?V0 + 9
   \   00016F   12....       LCALL   ??osal_mem_free?relay
   \   000172   8002         SJMP    ??zclGeneral_SendSceneViewRsp_5
    813            }
    814            else
    815              stat = ZMemError;
   \                     ??zclGeneral_SendSceneViewRsp_1:
   \   000174   7E10         MOV     R6,#0x10
    816          
    817            return ( stat );
   \                     ??zclGeneral_SendSceneViewRsp_5:
   \   000176   02....       LJMP    ?Subroutine3 & 0xFFFF
    818          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   000003   22           RET
    819          
    820          /*********************************************************************
    821           * @fn      zclGeneral_SendSceneGetMembershipResponse
    822           *
    823           * @brief   Call to send Scene Get Membership Response Command
    824           *
    825           * @param   srcEP - Sending application's endpoint
    826           * @param   dstAddr - where you want the message to go
    827           * @param   status - scene command status
    828           * @param   capacity - remaining capacity of the scene table
    829           * @param   sceneCnt - number of scenes in the scene list
    830           * @param   sceneList - list of scene IDs
    831           * @param   groupID - group ID that scene belongs to
    832           * @param   seqNum - sequence number
    833           *
    834           * @return  ZStatus_t
    835           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    836          ZStatus_t zclGeneral_SendSceneGetMembershipResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendSceneGetMembershipResponse:
    837                                                               uint8 status, uint8 capacity, uint8 sceneCnt, uint8 *sceneList,
    838                                                               uint16 groupID, uint8 disableDefaultRsp, uint8 seqNum )
    839          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 9,R1
   \   000007   8A..         MOV     ?V0 + 10,R2
   \   000009   8B..         MOV     ?V0 + 11,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   \   00000F   7419         MOV     A,#0x19
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F5..         MOV     ?V0 + 6,A
   \   000017   741A         MOV     A,#0x1a
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 7,A
    840            uint8 *buf;
    841            uint8 *pBuf;
    842            uint8 len = 1 + 1 + 2; // Status + Capacity + Group ID;
   \   00001F   7804         MOV     R0,#0x4
   \   000021   7414         MOV     A,#0x14
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F5..         MOV     ?V0 + 8,A
    843            uint8 i;
    844            ZStatus_t stat;
    845          
    846            if ( status == ZCL_STATUS_SUCCESS )
   \   000029   EE           MOV     A,R6
   \   00002A   7005         JNZ     ??zclGeneral_SendSceneGetMembershipResponse_0
    847            {
    848              len++; // Scene Count
    849              len += sceneCnt; // Scene List (Scene ID is a single octet)
   \   00002C   7405         MOV     A,#0x5
   \   00002E   25..         ADD     A,?V0 + 8
   \   000030   F8           MOV     R0,A
    850            }
    851          
    852            buf = zcl_mem_alloc( len );
   \                     ??zclGeneral_SendSceneGetMembershipResponse_0:
   \   000031   8882         MOV     DPL,R0
   \   000033   8582..       MOV     ?V0 + 2,DPL
   \   000036   75..00       MOV     ?V0 + 3,#0x0
   \   000039                ; Setup parameters for call to function osal_mem_alloc
   \   000039   AA..         MOV     R2,?V0 + 2
   \   00003B   AB..         MOV     R3,?V0 + 3
   \   00003D   12....       LCALL   ??osal_mem_alloc?relay
   \   000040   8A..         MOV     ?V0 + 0,R2
   \   000042   8B..         MOV     ?V0 + 1,R3
    853            if ( buf )
   \   000044   EA           MOV     A,R2
   \   000045   45..         ORL     A,?V0 + 1
   \   000047   7003         JNZ     $+5
   \   000049   02....       LJMP    ??zclGeneral_SendSceneGetMembershipResponse_1 & 0xFFFF
    854            {
    855              pBuf = buf;
   \   00004C   A8..         MOV     R0,?V0 + 0
   \   00004E   A9..         MOV     R1,?V0 + 1
    856              *pBuf++ = status;
   \   000050   EE           MOV     A,R6
   \   000051   8882         MOV     DPL,R0
   \   000053   8983         MOV     DPH,R1
   \   000055   F0           MOVX    @DPTR,A
   \   000056   A3           INC     DPTR
    857              *pBuf++ = capacity;
   \   000057   EF           MOV     A,R7
   \   000058   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   00005B   7417         MOV     A,#0x17
   \   00005D   12....       LCALL   ?XSTACK_DISP0_8
   \   000060   12....       LCALL   ??Subroutine115_0 & 0xFFFF
    858              *pBuf++ = LO_UINT16( groupID );
   \                     ??CrossCallReturnLabel_206:
   \   000063   EA           MOV     A,R2
   \   000064   8882         MOV     DPL,R0
   \   000066   8983         MOV     DPH,R1
   \   000068   12....       LCALL   ??Subroutine111_0 & 0xFFFF
    859              *pBuf++ = HI_UINT16( groupID );
   \                     ??CrossCallReturnLabel_181:
   \   00006B   A3           INC     DPTR
    860              if ( status == ZCL_STATUS_SUCCESS )
   \   00006C   EE           MOV     A,R6
   \   00006D   7029         JNZ     ??zclGeneral_SendSceneGetMembershipResponse_2
    861              {
    862                *pBuf++ = sceneCnt;
   \   00006F   E5..         MOV     A,?V0 + 8
   \   000071   F0           MOVX    @DPTR,A
   \   000072   A3           INC     DPTR
   \   000073   08           INC     R0
   \   000074   08           INC     R0
   \   000075   08           INC     R0
   \   000076   A983         MOV     R1,DPH
    863                for ( i = 0; i < sceneCnt; i++ )
   \   000078   7C00         MOV     R4,#0x0
   \   00007A   7415         MOV     A,#0x15
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000082   800E         SJMP    ??zclGeneral_SendSceneGetMembershipResponse_3
    864                  *pBuf++ = sceneList[i];
   \                     ??zclGeneral_SendSceneGetMembershipResponse_4:
   \   000084   8C..         MOV     ?V0 + 4,R4
   \   000086   EA           MOV     A,R2
   \   000087   25..         ADD     A,?V0 + 4
   \   000089   F582         MOV     DPL,A
   \   00008B   EB           MOV     A,R3
   \   00008C   3400         ADDC    A,#0x0
   \   00008E   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000091   0C           INC     R4
   \                     ??zclGeneral_SendSceneGetMembershipResponse_3:
   \   000092   EC           MOV     A,R4
   \   000093   C3           CLR     C
   \   000094   95..         SUBB    A,?V0 + 8
   \   000096   40EC         JC      ??zclGeneral_SendSceneGetMembershipResponse_4
    865              }
    866          
    867              stat = zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    868                                      COMMAND_SCENE_GET_MEMBERSHIP_RSP, TRUE,
    869                                      ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, len, buf );
   \                     ??zclGeneral_SendSceneGetMembershipResponse_2:
   \   000098                ; Setup parameters for call to function zcl_SendCommand
   \   000098   78..         MOV     R0,#?V0 + 0
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00009D   78..         MOV     R0,#?V0 + 2
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   E5..         MOV     A,?V0 + 7
   \   0000A4   F5..         MOV     ?V0 + 2,A
   \   0000A6   78..         MOV     R0,#?V0 + 2
   \   0000A8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AB   E4           CLR     A
   \   0000AC   F5..         MOV     ?V0 + 2,A
   \   0000AE   78..         MOV     R0,#?V0 + 2
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B3   E5..         MOV     A,?V0 + 6
   \   0000B5   F5..         MOV     ?V0 + 2,A
   \   0000B7   78..         MOV     R0,#?V0 + 2
   \   0000B9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BC   75..01       MOV     ?V0 + 2,#0x1
   \   0000BF   78..         MOV     R0,#?V0 + 2
   \   0000C1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C4   78..         MOV     R0,#?V0 + 2
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C9   75..06       MOV     ?V0 + 2,#0x6
   \   0000CC   78..         MOV     R0,#?V0 + 2
   \   0000CE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D1   7C05         MOV     R4,#0x5
   \   0000D3   7D00         MOV     R5,#0x0
   \   0000D5   AA..         MOV     R2,?V0 + 10
   \   0000D7   AB..         MOV     R3,?V0 + 11
   \   0000D9   A9..         MOV     R1,?V0 + 9
   \   0000DB   12....       LCALL   ??zcl_SendCommand?relay
   \   0000DE   740B         MOV     A,#0xb
   \   0000E0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000E3   E9           MOV     A,R1
   \   0000E4   F5..         MOV     ?V0 + 2,A
    870              zcl_mem_free( buf );
   \   0000E6                ; Setup parameters for call to function osal_mem_free
   \   0000E6   AA..         MOV     R2,?V0 + 0
   \   0000E8   AB..         MOV     R3,?V0 + 1
   \   0000EA   12....       LCALL   ??osal_mem_free?relay
   \   0000ED   8003         SJMP    ??zclGeneral_SendSceneGetMembershipResponse_5
    871            }
    872            else
    873              stat = ZMemError;
   \                     ??zclGeneral_SendSceneGetMembershipResponse_1:
   \   0000EF   75..10       MOV     ?V0 + 2,#0x10
    874          
    875            return ( stat );
   \                     ??zclGeneral_SendSceneGetMembershipResponse_5:
   \   0000F2   A9..         MOV     R1,?V0 + 2
   \   0000F4                REQUIRE ?Subroutine6
   \   0000F4                ; // Fall through to label ?Subroutine6
    876          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F0C         MOV     R7,#0xc
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    877          
    878          #ifdef ZCL_LIGHT_LINK_ENHANCE
    879          /*********************************************************************
    880           * @fn      zclGeneral_SendSceneCopy
    881           *
    882           * @brief   Send Scene Copy Request to a device
    883           *
    884           * @param   srcEP - sending application's endpoint
    885           * @param   dstAddr - where to send the request
    886           * @param   mode - how scene copy is to proceed
    887           * @param   groupIDFrom - group from which scene to be copied
    888           * @param   sceneIDFrom - scene from which scene to be copied
    889           * @param   groupIDTo - group to which scene to be copied
    890           * @param   sceneIDTo - scene to which scene to be copied
    891           * @param   disableDefaultRsp - disable Default Response command
    892           * @param   seqNum - the identification number for the transaction
    893           *
    894           * @return  ZStatus_t
    895           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    896          ZStatus_t zclGeneral_SendSceneCopy( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendSceneCopy:
    897                                              uint8 mode, uint16 groupIDFrom, uint8 sceneIDFrom,
    898                                              uint16 groupIDTo, uint8 sceneIDTo,
    899                                              uint8 disableDefaultRsp, uint8 seqNum )
    900          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 0,R1
   \   00000C   EC           MOV     A,R4
   \   00000D   FE           MOV     R6,A
   \   00000E   ED           MOV     A,R5
   \   00000F   FF           MOV     R7,A
   \   000010   7417         MOV     A,#0x17
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FD           MOV     R5,A
   \   000017   7418         MOV     A,#0x18
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FC           MOV     R4,A
   \   00001E   7419         MOV     A,#0x19
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F5..         MOV     ?V0 + 1,A
    901            uint8 buf[7];
    902          
    903            buf[0] = mode;
   \   000026   EE           MOV     A,R6
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   7413         MOV     A,#0x13
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   12....       LCALL   ?Subroutine27 & 0xFFFF
    904            buf[1] = LO_UINT16( groupIDFrom );
   \                     ??CrossCallReturnLabel_28:
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E8           MOV     A,R0
   \   00003A   F0           MOVX    @DPTR,A
    905            buf[2] = HI_UINT16( groupIDFrom );
   \   00003B   7402         MOV     A,#0x2
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   E9           MOV     A,R1
   \   000041   F0           MOVX    @DPTR,A
    906            buf[3] = sceneIDFrom;
   \   000042   7403         MOV     A,#0x3
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   EF           MOV     A,R7
   \   000048   F0           MOVX    @DPTR,A
   \   000049   7415         MOV     A,#0x15
   \   00004B   12....       LCALL   ?XSTACK_DISP0_8
   \   00004E   12....       LCALL   ?Subroutine48 & 0xFFFF
    907            buf[4] = LO_UINT16( groupIDTo );
   \                     ??CrossCallReturnLabel_68:
   \   000051   7404         MOV     A,#0x4
   \   000053   12....       LCALL   ?XSTACK_DISP0_8
   \   000056   E8           MOV     A,R0
   \   000057   F0           MOVX    @DPTR,A
    908            buf[5] = HI_UINT16( groupIDTo );
   \   000058   7405         MOV     A,#0x5
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   E9           MOV     A,R1
   \   00005E   F0           MOVX    @DPTR,A
    909            buf[6] = sceneIDTo;
   \   00005F   7406         MOV     A,#0x6
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   ED           MOV     A,R5
   \   000065   12....       LCALL   ??Subroutine103_0 & 0xFFFF
    910          
    911            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    912                                      COMMAND_SCENE_COPY, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    913                                      disableDefaultRsp, 0, seqNum, 7, buf ) );
   \                     ??CrossCallReturnLabel_167:
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006B   75..07       MOV     ?V0 + 2,#0x7
   \   00006E   75..00       MOV     ?V0 + 3,#0x0
   \   000071   78..         MOV     R0,#?V0 + 2
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000076   78..         MOV     R0,#?V0 + 1
   \   000078   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007B   E4           CLR     A
   \   00007C   F5..         MOV     ?V0 + 2,A
   \   00007E   78..         MOV     R0,#?V0 + 2
   \   000080   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000083   EC           MOV     A,R4
   \   000084   F5..         MOV     ?V0 + 1,A
   \   000086   78..         MOV     R0,#?V0 + 1
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008B   75..00       MOV     ?V0 + 1,#0x0
   \   00008E   78..         MOV     R0,#?V0 + 1
   \   000090   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000093   75..01       MOV     ?V0 + 1,#0x1
   \   000096   78..         MOV     R0,#?V0 + 1
   \   000098   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009B   75..42       MOV     ?V0 + 1,#0x42
   \   00009E   78..         MOV     R0,#?V0 + 1
   \   0000A0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A3   7C05         MOV     R4,#0x5
   \   0000A5   7D00         MOV     R5,#0x0
   \   0000A7   A9..         MOV     R1,?V0 + 0
   \   0000A9   12....       LCALL   ??zcl_SendCommand?relay
   \   0000AC   740B         MOV     A,#0xb
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B1   7407         MOV     A,#0x7
   \   0000B3   02....       LJMP    ??Subroutine108_0 & 0xFFFF
    914          }
    915          
    916          /*********************************************************************
    917           * @fn      zclGeneral_SendSceneCopyResponse
    918           *
    919           * @brief   Send Scene Copy Response to a device
    920           *
    921           * @param   srcEP - sending application's endpoint
    922           * @param   dstAddr - where to send the request
    923           * @param   status - status of copy scene attemp
    924           * @param   groupIDFrom - group from which scene was copied
    925           * @param   sceneIDFrom - scene from which scene was copied
    926           * @param   disableDefaultRsp - disable Default Response command
    927           * @param   seqNum - the identification number for the transaction
    928           *
    929           * @return  ZStatus_t
    930           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    931          ZStatus_t zclGeneral_SendSceneCopyResponse( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendSceneCopyResponse:
    932                                                      uint8 status, uint16 groupIDFrom, uint8 sceneIDFrom,
    933                                                      uint8 disableDefaultRsp, uint8 seqNum )
    934          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
   \   00000E   8D..         MOV     ?V0 + 0,R5
   \   000010   7412         MOV     A,#0x12
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FC           MOV     R4,A
   \   000017   7413         MOV     A,#0x13
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FD           MOV     R5,A
    935            uint8 buf[4];
    936          
    937            buf[0] = status;
   \   00001E   EF           MOV     A,R7
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   F0           MOVX    @DPTR,A
   \   000026   7410         MOV     A,#0x10
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   12....       LCALL   ?Subroutine27 & 0xFFFF
    938            buf[1] = LO_UINT16( groupIDFrom );
   \                     ??CrossCallReturnLabel_29:
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   E8           MOV     A,R0
   \   000032   F0           MOVX    @DPTR,A
    939            buf[2] = HI_UINT16( groupIDFrom );
   \   000033   7402         MOV     A,#0x2
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   E9           MOV     A,R1
   \   000039   F0           MOVX    @DPTR,A
    940            buf[3] = sceneIDFrom;
   \   00003A   7403         MOV     A,#0x3
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   E5..         MOV     A,?V0 + 0
   \   000041   12....       LCALL   ??Subroutine103_0 & 0xFFFF
    941          
    942            return ( zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_SCENES,
    943                                      COMMAND_SCENE_COPY_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
    944                                      disableDefaultRsp, 0, seqNum, 4, buf ) );
   \                     ??CrossCallReturnLabel_168:
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   75..04       MOV     ?V0 + 2,#0x4
   \   00004A   75..00       MOV     ?V0 + 3,#0x0
   \   00004D   78..         MOV     R0,#?V0 + 2
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   ED           MOV     A,R5
   \   000053   F5..         MOV     ?V0 + 1,A
   \   000055   78..         MOV     R0,#?V0 + 1
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005A   E4           CLR     A
   \   00005B   F5..         MOV     ?V0 + 2,A
   \   00005D   78..         MOV     R0,#?V0 + 2
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   EC           MOV     A,R4
   \   000063   F5..         MOV     ?V0 + 1,A
   \   000065   78..         MOV     R0,#?V0 + 1
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006A   75..01       MOV     ?V0 + 1,#0x1
   \   00006D   78..         MOV     R0,#?V0 + 1
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000072   78..         MOV     R0,#?V0 + 1
   \   000074   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000077   75..42       MOV     ?V0 + 1,#0x42
   \   00007A   78..         MOV     R0,#?V0 + 1
   \   00007C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007F   7C05         MOV     R4,#0x5
   \   000081                REQUIRE ?Subroutine9
   \   000081                ; // Fall through to label ?Subroutine9
    945          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7D00         MOV     R5,#0x0
   \   000002   EE           MOV     A,R6
   \   000003   F9           MOV     R1,A
   \   000004   12....       LCALL   ??zcl_SendCommand?relay
   \   000007   740B         MOV     A,#0xb
   \   000009   12....       LCALL   ?DEALLOC_XSTACK8
   \   00000C   7404         MOV     A,#0x4
   \   00000E   02....       LJMP    ??Subroutine108_0 & 0xFFFF
    946          #endif // ZCL_LIGHT_LINK_ENHANCE
    947          #endif // ZCL_SCENES
    948          
    949          #ifdef ZCL_ON_OFF
    950          #ifdef ZCL_LIGHT_LINK_ENHANCE
    951          /*********************************************************************
    952           * @fn      zclGeneral_SendOnOff_CmdOffWithEffect
    953           *
    954           * @brief   Call to send out an Off with Effect Command.
    955           *
    956           * @param   srcEP - Sending application's endpoint
    957           * @param   dstAddr - where you want the message to go
    958           * @param   effectId - fading effect to use when switching light off
    959           * @param   effectVariant - which variant of effect to be triggered
    960           * @param   disableDefaultRsp - whether to disable the Default Response command
    961           * @param   seqNum - sequence number
    962           *
    963           * @return  ZStatus_t
    964           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    965          ZStatus_t zclGeneral_SendOnOff_CmdOffWithEffect( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendOnOff_CmdOffWithEffect:
    966                                                           uint8 effectId, uint8 effectVariant,
    967                                                           uint8 disableDefaultRsp, uint8 seqNum )
    968          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
   \   00000E   740D         MOV     A,#0xd
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   740E         MOV     A,#0xe
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine23 & 0xFFFF
    969            uint8 buf[2];
    970          
    971            buf[0] = effectId;
    972            buf[1] = effectVariant;
   \                     ??CrossCallReturnLabel_21:
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ?Subroutine52 & 0xFFFF
    973          
    974            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF,
    975                                    COMMAND_OFF_WITH_EFFECT, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
    976                                    disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_159:
   \   000023   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000026   75..02       MOV     ?V0 + 0,#0x2
   \   000029   75..00       MOV     ?V0 + 1,#0x0
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   EC           MOV     A,R4
   \   000032   F5..         MOV     ?V0 + 0,A
   \   000034   78..         MOV     R0,#?V0 + 0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000039   E4           CLR     A
   \   00003A   F5..         MOV     ?V0 + 0,A
   \   00003C   78..         MOV     R0,#?V0 + 0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   E9           MOV     A,R1
   \   000042   F5..         MOV     ?V0 + 0,A
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000049   75..00       MOV     ?V0 + 0,#0x0
   \   00004C   78..         MOV     R0,#?V0 + 0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000051   75..01       MOV     ?V0 + 0,#0x1
   \   000054   78..         MOV     R0,#?V0 + 0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000059   75..40       MOV     ?V0 + 0,#0x40
   \   00005C   78..         MOV     R0,#?V0 + 0
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000061   7C06         MOV     R4,#0x6
   \   000063   02....       LJMP    ??Subroutine106_0 & 0xFFFF
    977          }
    978          
    979          /*********************************************************************
    980           * @fn      zclGeneral_SendOnOff_CmdOnWithTimedOff
    981           *
    982           * @brief   Call to send out an On with Timed Off Command.
    983           *
    984           * @param   srcEP - Sending application's endpoint
    985           * @param   dstAddr - where you want the message to go
    986           * @param   onOffCtrl - how the lamp is to be operated
    987           * @param   onTime - the length of time (in 1/10ths second) that the lamp is to remain on, before automatically turning off
    988           * @param   offWaitTime - the length of time (in 1/10ths second) that the lamp shall remain off, and guarded to prevent an on command turning the light back on.
    989           * @param   disableDefaultRsp - whether to disable the Default Response command
    990           * @param   seqNum - sequence number
    991           *
    992           * @return  ZStatus_t
    993           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    994          ZStatus_t zclGeneral_SendOnOff_CmdOnWithTimedOff ( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendOnOff_CmdOnWithTimedOff:
    995                                                             zclOnOffCtrl_t onOffCtrl, uint16 onTime, uint16 offWaitTime,
    996                                                             uint8 disableDefaultRsp, uint8 seqNum )
    997          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   7414         MOV     A,#0x14
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FF           MOV     R7,A
   \   000013   7415         MOV     A,#0x15
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   E0           MOVX    A,@DPTR
   \   000019   F5..         MOV     ?V0 + 2,A
    998            uint8 buf[5];
    999          
   1000            buf[0] = onOffCtrl.byte;
   \   00001B   7410         MOV     A,#0x10
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   12....       LCALL   ?Subroutine43 & 0xFFFF
   1001            buf[1] = LO_UINT16( onTime );
   \                     ??CrossCallReturnLabel_55:
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   EC           MOV     A,R4
   \   000027   F0           MOVX    @DPTR,A
   1002            buf[2] = HI_UINT16( onTime );
   \   000028   7402         MOV     A,#0x2
   \   00002A   12....       LCALL   ?XSTACK_DISP0_8
   \   00002D   ED           MOV     A,R5
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   7412         MOV     A,#0x12
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   12....       LCALL   ?Subroutine48 & 0xFFFF
   1003            buf[3] = LO_UINT16( offWaitTime );
   \                     ??CrossCallReturnLabel_69:
   \   000037   7403         MOV     A,#0x3
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   E8           MOV     A,R0
   \   00003D   F0           MOVX    @DPTR,A
   1004            buf[4] = HI_UINT16( offWaitTime );
   \   00003E   7404         MOV     A,#0x4
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   E9           MOV     A,R1
   \   000044   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   1005          
   1006            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ON_OFF,
   1007                                    COMMAND_ON_WITH_TIMED_OFF, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1008                                    disableDefaultRsp, 0, seqNum, 5, buf );
   \                     ??CrossCallReturnLabel_160:
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   75..05       MOV     ?V0 + 0,#0x5
   \   00004D   75..00       MOV     ?V0 + 1,#0x0
   \   000050   78..         MOV     R0,#?V0 + 0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000055   E5..         MOV     A,?V0 + 2
   \   000057   F5..         MOV     ?V0 + 0,A
   \   000059   78..         MOV     R0,#?V0 + 0
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005E   E4           CLR     A
   \   00005F   F5..         MOV     ?V0 + 0,A
   \   000061   78..         MOV     R0,#?V0 + 0
   \   000063   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000066   EF           MOV     A,R7
   \   000067   F5..         MOV     ?V0 + 0,A
   \   000069   78..         MOV     R0,#?V0 + 0
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006E   75..00       MOV     ?V0 + 0,#0x0
   \   000071   78..         MOV     R0,#?V0 + 0
   \   000073   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000076   75..01       MOV     ?V0 + 0,#0x1
   \   000079   78..         MOV     R0,#?V0 + 0
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007E   75..42       MOV     ?V0 + 0,#0x42
   \   000081   78..         MOV     R0,#?V0 + 0
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000086   7C06         MOV     R4,#0x6
   \   000088   7D00         MOV     R5,#0x0
   \   00008A   EE           MOV     A,R6
   \   00008B   F9           MOV     R1,A
   \   00008C   12....       LCALL   ??zcl_SendCommand?relay
   \   00008F   740B         MOV     A,#0xb
   \   000091   12....       LCALL   ?DEALLOC_XSTACK8
   \   000094   7405         MOV     A,#0x5
   \   000096   02....       LJMP    ??Subroutine107_0 & 0xFFFF
   1009          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine88 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
   1010          #endif // ZCL_LIGHT_LINK_ENHANCE
   1011          #endif // ZCL_ON_OFF
   1012          
   1013          #ifdef ZCL_LEVEL_CTRL
   1014          /*********************************************************************
   1015           * @fn      zclGeneral_SendLevelControlMoveToLevelRequest
   1016           *
   1017           * @brief   Call to send out a Level Control Request. You can also use
   1018           *          the appropriate macro.
   1019           *
   1020           * @param   srcEP - Sending application's endpoint
   1021           * @param   dstAddr - where you want the message to go
   1022           * @param   cmd - one of the following:
   1023           *              COMMAND_LEVEL_MOVE_TO_LEVEL or
   1024           *              COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF
   1025           * @param   level - what level to move to
   1026           * @param   transitionTime - how long to take to get to the level (in seconds)
   1027           *
   1028           * @return  ZStatus_t
   1029           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1030          ZStatus_t zclGeneral_SendLevelControlMoveToLevelRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendLevelControlMoveToLevelRequest:
   1031                                                                   uint8 cmd, uint8 level, uint16 transTime,
   1032                                                                   uint8 disableDefaultRsp, uint8 seqNum )
   1033          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
   \   00000E   8D..         MOV     ?V0 + 0,R5
   \   000010   7411         MOV     A,#0x11
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FC           MOV     R4,A
   \   000017   7412         MOV     A,#0x12
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ?Subroutine34 & 0xFFFF
   1034            uint8 buf[3];
   1035          
   1036            buf[0] = level;
   \                     ??CrossCallReturnLabel_44:
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   12....       LCALL   ?Subroutine27 & 0xFFFF
   1037            buf[1] = LO_UINT16( transTime );
   \                     ??CrossCallReturnLabel_30:
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E8           MOV     A,R0
   \   000029   F0           MOVX    @DPTR,A
   1038            buf[2] = HI_UINT16( transTime );
   \   00002A   7402         MOV     A,#0x2
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ?Subroutine53 & 0xFFFF
   1039          
   1040            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1041                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1042                                    disableDefaultRsp, 0, seqNum, 3, buf );
   \                     ??CrossCallReturnLabel_165:
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   75..03       MOV     ?V0 + 2,#0x3
   \   000038   75..00       MOV     ?V0 + 3,#0x0
   \   00003B   78..         MOV     R0,#?V0 + 2
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   ED           MOV     A,R5
   \   000041   F5..         MOV     ?V0 + 1,A
   \   000043   78..         MOV     R0,#?V0 + 1
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000048   E4           CLR     A
   \   000049   F5..         MOV     ?V0 + 2,A
   \   00004B   78..         MOV     R0,#?V0 + 2
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   EC           MOV     A,R4
   \   000051   F5..         MOV     ?V0 + 1,A
   \   000053   78..         MOV     R0,#?V0 + 1
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000058   75..00       MOV     ?V0 + 1,#0x0
   \   00005B   78..         MOV     R0,#?V0 + 1
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000060   75..01       MOV     ?V0 + 1,#0x1
   \   000063   78..         MOV     R0,#?V0 + 1
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000068   EF           MOV     A,R7
   \   000069   F5..         MOV     ?V0 + 1,A
   \   00006B   78..         MOV     R0,#?V0 + 1
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000070   7C08         MOV     R4,#0x8
   \   000072   02....       LJMP    ?Subroutine0 & 0xFFFF
   1043          }
   1044          
   1045          /*********************************************************************
   1046           * @fn      zclGeneral_SendLevelControlMoveRequest
   1047           *
   1048           * @brief   Call to send out a Level Control Request. You can also use
   1049           *          the appropriate macro.
   1050           *
   1051           * @param   srcEP - Sending application's endpoint
   1052           * @param   dstAddr - where you want the message to go
   1053           * @param   cmd - one of the following:
   1054           *              COMMAND_LEVEL_MOVE or
   1055           *              COMMAND_LEVEL_MOVE_WITH_ON_OFF
   1056           * @param   moveMode - LEVEL_MOVE_UP or
   1057           *                     LEVEL_MOVE_DOWN
   1058           * @param   rate - number of steps to take per second
   1059           *
   1060           * @return  ZStatus_t
   1061           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1062          ZStatus_t zclGeneral_SendLevelControlMoveRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendLevelControlMoveRequest:
   1063                                                            uint8 cmd, uint8 moveMode, uint8 rate,
   1064                                                            uint8 disableDefaultRsp, uint8 seqNum )
   1065          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
   \   00000E   740D         MOV     A,#0xd
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   740E         MOV     A,#0xe
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   740F         MOV     A,#0xf
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FC           MOV     R4,A
   1066            uint8 buf[2];
   1067          
   1068            buf[0] = moveMode;
   \   000023   85..82       MOV     DPL,?XSP + 0
   \   000026   85..83       MOV     DPH,?XSP + 1
   \   000029   ED           MOV     A,R5
   \   00002A   F0           MOVX    @DPTR,A
   1069            buf[1] = rate;
   \   00002B   7401         MOV     A,#0x1
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   E8           MOV     A,R0
   \   000031   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   1070          
   1071            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1072                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1073                                    disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_161:
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   75..02       MOV     ?V0 + 0,#0x2
   \   00003A   75..00       MOV     ?V0 + 1,#0x0
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   EC           MOV     A,R4
   \   000043   F5..         MOV     ?V0 + 0,A
   \   000045   78..         MOV     R0,#?V0 + 0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004A   E4           CLR     A
   \   00004B   F5..         MOV     ?V0 + 0,A
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   E9           MOV     A,R1
   \   000053   F5..         MOV     ?V0 + 0,A
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005A   75..00       MOV     ?V0 + 0,#0x0
   \   00005D   78..         MOV     R0,#?V0 + 0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000062   75..01       MOV     ?V0 + 0,#0x1
   \   000065   78..         MOV     R0,#?V0 + 0
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006A   EF           MOV     A,R7
   \   00006B   F5..         MOV     ?V0 + 0,A
   \   00006D   78..         MOV     R0,#?V0 + 0
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000072   7C08         MOV     R4,#0x8
   \   000074   80..         SJMP    ??Subroutine106_0
   1074          }
   1075          
   1076          /*********************************************************************
   1077           * @fn      zclGeneral_SendLevelControlStepRequest
   1078           *
   1079           * @brief   Call to send out a Level Control Request. You can also use
   1080           *          the appropriate macro.
   1081           *
   1082           * @param   srcEP - Sending application's endpoint
   1083           * @param   dstAddr - where you want the message to go
   1084           * @param   cmd - one of the following:
   1085           *              COMMAND_LEVEL_STEP
   1086           *              COMMAND_LEVEL_STEP_WITH_ON_OFF
   1087           * @param   stepMode - LEVEL_STEP_UP or
   1088           *                     LEVEL_STEP_DOWN
   1089           * @param   amount - number of levels to step
   1090           * @param   transitionTime - time, in 1/10ths of a second, to take to perform the step
   1091           *
   1092           * @return  ZStatus_t
   1093           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1094          ZStatus_t zclGeneral_SendLevelControlStepRequest( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclGeneral_SendLevelControlStepRequest:
   1095                                                            uint8 cmd, uint8 stepMode, uint8 stepSize, uint16 transTime,
   1096                                                            uint8 disableDefaultRsp, uint8 seqNum )
   1097          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
   \   00000E   8D..         MOV     ?V0 + 0,R5
   \   000010   7410         MOV     A,#0x10
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F8           MOV     R0,A
   \   000017   7413         MOV     A,#0x13
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FC           MOV     R4,A
   \   00001E   7414         MOV     A,#0x14
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   12....       LCALL   ?Subroutine82 & 0xFFFF
   1098            uint8 buf[4];
   1099          
   1100            buf[0] = stepMode;
   1101            buf[1] = stepSize;
   \                     ??CrossCallReturnLabel_129:
   \   000026   7401         MOV     A,#0x1
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E8           MOV     A,R0
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   7411         MOV     A,#0x11
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   12....       LCALL   ?Subroutine48 & 0xFFFF
   1102            buf[2] = LO_UINT16( transTime );
   \                     ??CrossCallReturnLabel_70:
   \   000035   7402         MOV     A,#0x2
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   E8           MOV     A,R0
   \   00003B   F0           MOVX    @DPTR,A
   1103            buf[3] = HI_UINT16( transTime );
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   12....       LCALL   ?Subroutine53 & 0xFFFF
   1104          
   1105            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1106                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1107                                    disableDefaultRsp, 0, seqNum, 4, buf );
   \                     ??CrossCallReturnLabel_166:
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   75..04       MOV     ?V0 + 2,#0x4
   \   00004A   75..00       MOV     ?V0 + 3,#0x0
   \   00004D   78..         MOV     R0,#?V0 + 2
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   ED           MOV     A,R5
   \   000053   F5..         MOV     ?V0 + 1,A
   \   000055   78..         MOV     R0,#?V0 + 1
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005A   E4           CLR     A
   \   00005B   F5..         MOV     ?V0 + 2,A
   \   00005D   78..         MOV     R0,#?V0 + 2
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   EC           MOV     A,R4
   \   000063   F5..         MOV     ?V0 + 1,A
   \   000065   78..         MOV     R0,#?V0 + 1
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006A   75..00       MOV     ?V0 + 1,#0x0
   \   00006D   78..         MOV     R0,#?V0 + 1
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000072   75..01       MOV     ?V0 + 1,#0x1
   \   000075   78..         MOV     R0,#?V0 + 1
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007A   EF           MOV     A,R7
   \   00007B   F5..         MOV     ?V0 + 1,A
   \   00007D   78..         MOV     R0,#?V0 + 1
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000082   7C08         MOV     R4,#0x8
   \   000084   02....       LJMP    ?Subroutine9 & 0xFFFF
   1108          }
   1109          
   1110          /*********************************************************************
   1111           * @fn      zclGeneral_SendLevelControlStepRequest
   1112           *
   1113           * @brief   Call to send out a Level Control Request. You can also use
   1114           *          the appropriate macro.
   1115           *
   1116           * @param   srcEP - Sending application's endpoint
   1117           * @param   dstAddr - where you want the message to go
   1118           * @param   cmd - one of the following:
   1119           *              COMMAND_LEVEL_STOP
   1120           *              COMMAND_LEVEL_STOP_WITH_ON_OFF
   1121           *
   1122           * @return  ZStatus_t
   1123           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1124          ZStatus_t zclGeneral_SendLevelControlStopRequest( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
   \                     zclGeneral_SendLevelControlStopRequest:
   1125                                                            uint8 disableDefaultRsp, uint8 seqNum )
   1126          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EC           MOV     A,R4
   \   000008   FF           MOV     R7,A
   \   000009   740C         MOV     A,#0xc
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F9           MOV     R1,A
   1127            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL,
   1128                                    cmd, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1129                                    disableDefaultRsp, 0, seqNum, 0, NULL );
   \   000010                ; Setup parameters for call to function zcl_SendCommand
   \   000010   E4           CLR     A
   \   000011   F5..         MOV     ?V0 + 2,A
   \   000013   F5..         MOV     ?V0 + 3,A
   \   000015   78..         MOV     R0,#?V0 + 2
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   78..         MOV     R0,#?V0 + 2
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   E9           MOV     A,R1
   \   000020   F5..         MOV     ?V0 + 1,A
   \   000022   78..         MOV     R0,#?V0 + 1
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000027   78..         MOV     R0,#?V0 + 2
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   ED           MOV     A,R5
   \   00002D   F5..         MOV     ?V0 + 1,A
   \   00002F   78..         MOV     R0,#?V0 + 1
   \   000031   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000034   75..00       MOV     ?V0 + 1,#0x0
   \   000037   78..         MOV     R0,#?V0 + 1
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003C   75..01       MOV     ?V0 + 1,#0x1
   \   00003F   78..         MOV     R0,#?V0 + 1
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000044   EF           MOV     A,R7
   \   000045   F5..         MOV     ?V0 + 1,A
   \   000047   78..         MOV     R0,#?V0 + 1
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004C   7C08         MOV     R4,#0x8
   \   00004E   7D00         MOV     R5,#0x0
   \   000050   EE           MOV     A,R6
   \   000051   F9           MOV     R1,A
   \   000052   12....       LCALL   ??zcl_SendCommand?relay
   \   000055   740B         MOV     A,#0xb
   \   000057   80..         SJMP    ??Subroutine108_0
   1130          }
   1131          #endif // ZCL_LEVEL_CTRL
   1132          
   1133          #ifdef ZCL_ALARMS
   1134          /*********************************************************************
   1135           * @fn      zclGeneral_SendAlarm
   1136           *
   1137           * @brief   Call to send out an Alarm Request Command
   1138           *
   1139           * @param   srcEP - Sending application's endpoint
   1140           * @param   dstAddr - where you want the message to go
   1141           * @param   cmd - COMMAND_ALARMS_ALARM
   1142           * @param   alarmCode - code for the cause of the alarm
   1143           * @param   clusterID - cluster whose attribute generate the alarm
   1144           *
   1145           * @return  ZStatus_t
   1146           */
   1147          ZStatus_t zclGeneral_SendAlarm( uint8 srcEP, afAddrType_t *dstAddr,
   1148                                          uint8 alarmCode, uint16 clusterID,
   1149                                          uint8 disableDefaultRsp, uint8 seqNum )
   1150          {
   1151            uint8 buf[3];
   1152          
   1153            buf[0] = alarmCode;
   1154            buf[1] = LO_UINT16( clusterID );
   1155            buf[2] = HI_UINT16( clusterID );
   1156          
   1157            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1158                                    COMMAND_ALARMS_ALARM, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1159                                    disableDefaultRsp, 0, seqNum, 3, buf );
   1160          }
   1161          
   1162          /*********************************************************************
   1163           * @fn      zclGeneral_SendAlarmReset
   1164           *
   1165           * @brief   Call to send out an Alarm Reset Command
   1166           *
   1167           * @param   srcEP - Sending application's endpoint
   1168           * @param   dstAddr - where you want the message to go
   1169           * @param   alarmCode - code for the cause of the alarm
   1170           * @param   clusterID - cluster whose attribute generate the alarm
   1171           *
   1172           * @return  ZStatus_t
   1173          */
   1174          ZStatus_t zclGeneral_SendAlarmReset( uint8 srcEP, afAddrType_t *dstAddr,
   1175                                               uint8 alarmCode, uint16 clusterID,
   1176                                               uint8 disableDefaultRsp, uint8 seqNum )
   1177          {
   1178            uint8 buf[3];
   1179          
   1180            buf[0] = alarmCode;
   1181            buf[1] = LO_UINT16( clusterID );
   1182            buf[2] = HI_UINT16( clusterID );
   1183          
   1184            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1185                                    COMMAND_ALARMS_RESET, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1186                                    disableDefaultRsp, 0, seqNum, 3, buf );
   1187          }
   1188          
   1189          /*********************************************************************
   1190           * @fn      zclGeneral_SendAlarmGetRespnose
   1191           *
   1192           * @brief   Call to send out an Alarm Get Response Command
   1193           *
   1194           * @param   srcEP - Sending application's endpoint
   1195           * @param   dstAddr - where you want the message to go
   1196           * @param   status - SUCCESS or NOT_FOUND
   1197           * @param   alarmCode - code for the cause of the alarm
   1198           * @param   clusterID - cluster whose attribute generate the alarm
   1199           * @param   timeStamp - time at which the alarm occured
   1200           *
   1201           * @return  ZStatus_t
   1202           */
   1203          ZStatus_t zclGeneral_SendAlarmGetRespnose( uint8 srcEP, afAddrType_t *dstAddr,
   1204                                                     uint8 status, uint8 alarmCode, uint16 clusterID,
   1205                                                     uint32 timeStamp, uint8 disableDefaultRsp, uint8 seqNum )
   1206          {
   1207            uint8 buf[8];
   1208            uint8 len = 1; // Status
   1209          
   1210            buf[0] = status;
   1211            if ( status == ZCL_STATUS_SUCCESS )
   1212            {
   1213              len += 1 + 2 + 4; // Alarm code + Cluster ID + Time stamp
   1214              buf[1] = alarmCode;
   1215              buf[2] = LO_UINT16( clusterID );
   1216              buf[3] = HI_UINT16( clusterID );
   1217              zcl_buffer_uint32( &buf[4], timeStamp );
   1218            }
   1219          
   1220            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1221                                    COMMAND_ALARMS_GET_RSP, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1222                                    disableDefaultRsp, 0, seqNum, len, buf );
   1223          }
   1224          
   1225          #ifdef SE_UK_EXT
   1226          /*********************************************************************
   1227           * @fn      zclGeneral_SendAlarmGetEventLog
   1228           *
   1229           * @brief   Call to send out an Alarm Get Event Log Command
   1230           *
   1231           * @param   srcEP - Sending application's endpoint
   1232           * @param   dstAddr - where you want the message to go
   1233           * @param   pEventLog - pointer to Get Event Log Command
   1234           * @param   disableDefaultRsp - disable default response
   1235           * @param   seqNum - ZCL sequence number
   1236           *
   1237           * @return  ZStatus_t
   1238           */
   1239          ZStatus_t zclGeneral_SendAlarmGetEventLog( uint8 srcEP, afAddrType_t *dstAddr,
   1240                                                     zclGetEventLog_t *pEventLog,
   1241                                                     uint8 disableDefaultRsp, uint8 seqNum )
   1242          {
   1243            uint8 buf[10];
   1244          
   1245            buf[0] = pEventLog->logID;
   1246            zcl_buffer_uint32( &buf[1], pEventLog->startTime );
   1247            zcl_buffer_uint32( &buf[5], pEventLog->endTime );
   1248            buf[9] = pEventLog->numEvents;
   1249          
   1250            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1251                                    COMMAND_ALARMS_GET_EVENT_LOG, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1252                                    disableDefaultRsp, 0, seqNum, 10, buf );
   1253          }
   1254          
   1255          /*********************************************************************
   1256           * @fn      zclGeneral_SendAlarmPublishEventLog
   1257           *
   1258           * @brief   Call to send out an Alarm Publish Event Log Command
   1259           *
   1260           * @param   srcEP - Sending application's endpoint
   1261           * @param   dstAddr - where you want the message to go
   1262           * @param   pEventLog - pointer to Publish Event Log Command
   1263           * @param   disableDefaultRsp - disable default response
   1264           * @param   seqNum - ZCL sequence number
   1265           *
   1266           * @return  ZStatus_t
   1267           */
   1268          ZStatus_t zclGeneral_SendAlarmPublishEventLog( uint8 srcEP, afAddrType_t *dstAddr,
   1269                                                         zclPublishEventLog_t *pEventLog,
   1270                                                         uint8 disableDefaultRsp, uint8 seqNum )
   1271          {
   1272            uint8 *buf;
   1273            uint8 *pBuf;
   1274            uint8 bufLen;
   1275          
   1276            // Log ID + Command Index + Total Commands + (numSubLogs * ( Event ID + Event Time))
   1277            bufLen = 1 + 1 + 1 + (pEventLog->numSubLogs * (1 + 4));
   1278          
   1279            buf = zcl_mem_alloc( bufLen );
   1280            if ( buf == NULL )
   1281            {
   1282              return (ZMemError);
   1283            }
   1284          
   1285            pBuf = buf;
   1286            *pBuf++ = pEventLog->logID;
   1287            *pBuf++ = pEventLog->cmdIndex;
   1288            *pBuf++ = pEventLog->totalCmds;
   1289          
   1290            for ( uint8 i = 0; i < pEventLog->numSubLogs; i++ )
   1291            {
   1292              zclEventLogPayload_t *pLogs = &(pEventLog->pLogs[i]);
   1293          
   1294              *pBuf++ = pLogs->eventId;
   1295              pBuf = zcl_buffer_uint32( pBuf, pLogs->eventTime );
   1296            }
   1297          
   1298            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_ALARMS,
   1299                                    COMMAND_ALARMS_PUBLISH_EVENT_LOG, TRUE, ZCL_FRAME_CLIENT_SERVER_DIR,
   1300                                    disableDefaultRsp, 0, seqNum, bufLen, buf );
   1301          }
   1302          #endif // SE_UK_EXT
   1303          #endif // ZCL_ALARMS
   1304          
   1305          #ifdef ZCL_LOCATION
   1306          /*********************************************************************
   1307           * @fn      zclGeneral_SendLocationSetAbsolute
   1308           *
   1309           * @brief   Call to send out a Set Absolute Location Command
   1310           *
   1311           * @param   srcEP - Sending application's endpoint
   1312           * @param   dstAddr - where you want the message to go
   1313           * @param   absLoc - absolute location info
   1314           *
   1315           * @return  ZStatus_t
   1316           */
   1317          ZStatus_t zclGeneral_SendLocationSetAbsolute( uint8 srcEP, afAddrType_t *dstAddr,
   1318                                                        zclLocationAbsolute_t *absLoc,
   1319                                                        uint8 disableDefaultRsp, uint8 seqNum )
   1320          {
   1321             uint8 buf[10]; // 5 fields (2 octects each)
   1322          
   1323             buf[0] = LO_UINT16( absLoc->coordinate1 );
   1324             buf[1] = HI_UINT16( absLoc->coordinate1 );
   1325             buf[2] = LO_UINT16( absLoc->coordinate2 );
   1326             buf[3] = HI_UINT16( absLoc->coordinate2 );
   1327             buf[4] = LO_UINT16( absLoc->coordinate3 );
   1328             buf[5] = HI_UINT16( absLoc->coordinate3 );
   1329             buf[6] = LO_UINT16( absLoc->power );
   1330             buf[7] = HI_UINT16( absLoc->power );
   1331             buf[8] = LO_UINT16( absLoc->pathLossExponent );
   1332             buf[9] = HI_UINT16( absLoc->pathLossExponent );
   1333          
   1334             return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1335                                     COMMAND_LOCATION_SET_ABSOLUTE, TRUE,
   1336                                     ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 10, buf );
   1337          }
   1338          
   1339          /*********************************************************************
   1340           * @fn      zclGeneral_SendLocationSetDevCfg
   1341           *
   1342           * @brief   Call to send out a Set Device Configuration Command
   1343           *
   1344           * @param   srcEP - Sending application's endpoint
   1345           * @param   dstAddr - where you want the message to go
   1346           * @param   devCfg - device configuration info
   1347           *
   1348           * @return  ZStatus_t
   1349           */
   1350          ZStatus_t zclGeneral_SendLocationSetDevCfg( uint8 srcEP, afAddrType_t *dstAddr,
   1351                                                      zclLocationDevCfg_t *devCfg,
   1352                                                      uint8 disableDefaultRsp, uint8 seqNum )
   1353          {
   1354             uint8 buf[9];  // 4 fields (2 octects each) + 1 field with 1 octect
   1355          
   1356             buf[0] = LO_UINT16( devCfg->power );
   1357             buf[1] = HI_UINT16( devCfg->power );
   1358             buf[2] = LO_UINT16( devCfg->pathLossExponent );
   1359             buf[3] = HI_UINT16( devCfg->pathLossExponent );
   1360             buf[4] = LO_UINT16( devCfg->calcPeriod );
   1361             buf[5] = HI_UINT16( devCfg->calcPeriod );
   1362             buf[6] = devCfg->numMeasurements;
   1363             buf[7] = LO_UINT16( devCfg->reportPeriod );
   1364             buf[8] = HI_UINT16( devCfg->reportPeriod );
   1365          
   1366             return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1367                                     COMMAND_LOCATION_SET_DEV_CFG, TRUE,
   1368                                     ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 9, buf );
   1369          }
   1370          
   1371          /*********************************************************************
   1372           * @fn      zclGeneral_SendLocationGetDevCfg
   1373           *
   1374           * @brief   Call to send out a Get Device Configuration Command
   1375           *
   1376           * @param   srcEP - Sending application's endpoint
   1377           * @param   dstAddr - where you want the message to go
   1378           * @param   targetAddr - device for which location parameters are being requested
   1379           *
   1380           * @return  ZStatus_t
   1381           */
   1382          ZStatus_t zclGeneral_SendLocationGetDevCfg( uint8 srcEP, afAddrType_t *dstAddr,
   1383                                                      uint8 *targetAddr, uint8 disableDefaultRsp, uint8 seqNum )
   1384          {
   1385            uint8 buf[8];
   1386          
   1387            zcl_memcpy( buf, targetAddr, 8 );
   1388          
   1389            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1390                                    COMMAND_LOCATION_GET_DEV_CFG, TRUE,
   1391                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 8, buf );
   1392          }
   1393          
   1394          /*********************************************************************
   1395           * @fn      zclGeneral_SendLocationGetData
   1396           *
   1397           * @brief   Call to send out a Get Location Data Command
   1398           *
   1399           * @param   srcEP - Sending application's endpoint
   1400           * @param   dstAddr - where you want the message to go
   1401           * @param   locaData - location information and channel parameters that are requested.
   1402           *
   1403           * @return  ZStatus_t
   1404           */
   1405          ZStatus_t zclGeneral_SendLocationGetData( uint8 srcEP, afAddrType_t *dstAddr,
   1406                                                    zclLocationGetData_t *locData,
   1407                                                    uint8 disableDefaultRsp, uint8 seqNum )
   1408          {
   1409            uint8 buf[10]; // bitmap (1) + number responses (1) + IEEE Address (8)
   1410            uint8 *pBuf = buf;
   1411            uint8 len = 2; // bitmap + number responses
   1412          
   1413            *pBuf  = locData->absoluteOnly;
   1414            *pBuf |= locData->recalculate << 1;
   1415            *pBuf |= locData->brdcastIndicator << 2;
   1416            *pBuf |= locData->brdcastResponse << 3;
   1417            *pBuf |= locData->compactResponse << 4;
   1418            pBuf++;  // move past the bitmap field
   1419          
   1420            *pBuf++ = locData->numResponses;
   1421          
   1422            if ( locData->brdcastIndicator == 0 )
   1423            {
   1424              zcl_memcpy( pBuf, locData->targetAddr, 8 );
   1425              len += 8; // ieee addr
   1426            }
   1427          
   1428            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1429                                    COMMAND_LOCATION_GET_DATA, TRUE,
   1430                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, len, buf );
   1431          }
   1432          
   1433          /*********************************************************************
   1434           * @fn      zclGeneral_SendLocationDevCfgResponse
   1435           *
   1436           * @brief   Call to send out a Device Configuration Response Command
   1437           *
   1438           * @param   srcEP - Sending application's endpoint
   1439           * @param   dstAddr - where you want the message to go
   1440           * @param   devCfg - device's location parameters that are requested
   1441           *
   1442           * @return  ZStatus_t
   1443           */
   1444          ZStatus_t zclGeneral_SendLocationDevCfgResponse( uint8 srcEP, afAddrType_t *dstAddr,
   1445                                                           zclLocationDevCfgRsp_t *devCfg,
   1446                                                           uint8 disableDefaultRsp, uint8 seqNum )
   1447          {
   1448            uint8 buf[10]; // 4 fields (2 octects each) + 2 fields (1 octect each)
   1449            uint8 len = 1; // Status
   1450          
   1451            buf[0] = devCfg->status;
   1452            if ( devCfg->status == ZCL_STATUS_SUCCESS )
   1453            {
   1454              buf[1] = LO_UINT16( devCfg->data.power );
   1455              buf[2] = HI_UINT16( devCfg->data.power );
   1456              buf[3] = LO_UINT16( devCfg->data.pathLossExponent );
   1457              buf[4] = HI_UINT16( devCfg->data.pathLossExponent );
   1458              buf[5] = LO_UINT16( devCfg->data.calcPeriod );
   1459              buf[6] = HI_UINT16( devCfg->data.calcPeriod );
   1460              buf[7] = devCfg->data.numMeasurements;
   1461              buf[8] = LO_UINT16( devCfg->data.reportPeriod );
   1462              buf[9] = HI_UINT16( devCfg->data.reportPeriod );
   1463              len += 9;
   1464            }
   1465          
   1466            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1467                                    COMMAND_LOCATION_DEV_CFG_RSP, TRUE,
   1468                                    ZCL_FRAME_SERVER_CLIENT_DIR, disableDefaultRsp, 0, seqNum, len, buf );
   1469          }
   1470          
   1471          /*********************************************************************
   1472           * @fn      zclGeneral_SendLocationData
   1473           *
   1474           * @brief   Call to send out location data
   1475           *
   1476           * @param   srcEP - Sending application's endpoint
   1477           * @param   dstAddr - where you want the message to go
   1478           * @param   status - indicates whether response to request was successful or not
   1479           * @param   locData - location information and channel parameters being sent
   1480           *
   1481           * @return  ZStatus_t
   1482           */
   1483          ZStatus_t zclGeneral_SendLocationData( uint8 srcEP, afAddrType_t *dstAddr, uint8 cmd,
   1484                                                 uint8 status, zclLocationData_t *locData,
   1485                                                 uint8 disableDefaultRsp, uint8 seqNum )
   1486          {
   1487            uint8 buf[16];
   1488            uint8 *pBuf = buf;
   1489            uint8 len = 0;
   1490          
   1491            if ( cmd == COMMAND_LOCATION_DATA_RSP )
   1492            {
   1493              // Only response command includes a status field
   1494              *pBuf++ = status;
   1495              len++;
   1496            }
   1497          
   1498            if ( cmd != COMMAND_LOCATION_DATA_RSP || status == ZCL_STATUS_SUCCESS )
   1499            {
   1500              // Notification or Response with successful status
   1501              *pBuf++ = locData->type;
   1502              *pBuf++ = LO_UINT16( locData->absLoc.coordinate1 );
   1503              *pBuf++ = HI_UINT16( locData->absLoc.coordinate1 );
   1504              *pBuf++ = LO_UINT16( locData->absLoc.coordinate2 );
   1505              *pBuf++ = HI_UINT16( locData->absLoc.coordinate2 );
   1506              len += 5;
   1507          
   1508              if ( locationType2D(locData->type) == 0 )
   1509              {
   1510                // 2D location doesn't have coordinate 3
   1511                *pBuf++ = LO_UINT16( locData->absLoc.coordinate3 );
   1512                *pBuf++ = HI_UINT16( locData->absLoc.coordinate3 );
   1513                len += 2;
   1514              }
   1515          
   1516              if ( cmd != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   1517              {
   1518                // Compact notification doesn't include these fields
   1519                *pBuf++ = LO_UINT16( locData->absLoc.power );
   1520                *pBuf++ = HI_UINT16( locData->absLoc.power );
   1521                *pBuf++ = LO_UINT16( locData->absLoc.pathLossExponent );
   1522                *pBuf++ = HI_UINT16( locData->absLoc.pathLossExponent );
   1523                len += 4;
   1524              }
   1525          
   1526              if ( locationTypeAbsolute(locData->type) == 0 )
   1527              {
   1528                // Absolute location doesn't include these fields
   1529                if ( cmd != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   1530                {
   1531                  // Compact notification doesn't include this field
   1532                  *pBuf++ = locData->calcLoc.locationMethod;
   1533                  len++;
   1534                }
   1535          
   1536                *pBuf++ = locData->calcLoc.qualityMeasure;
   1537                *pBuf++ = LO_UINT16( locData->calcLoc.locationAge );
   1538                *pBuf++ = HI_UINT16( locData->calcLoc.locationAge );
   1539                len += 3;
   1540              }
   1541            }
   1542          
   1543            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_GEN_LOCATION,
   1544                                    cmd, TRUE, ZCL_FRAME_SERVER_CLIENT_DIR,
   1545                                    disableDefaultRsp, 0, seqNum, len, buf );
   1546          }
   1547          #endif // ZCL_LOCATION
   1548          
   1549          /*********************************************************************
   1550           * @fn      zclGeneral_FindCallbacks
   1551           *
   1552           * @brief   Find the callbacks for an endpoint
   1553           *
   1554           * @param   endpoint - endpoint to find the application callbacks for
   1555           *
   1556           * @return  pointer to the callbacks
   1557           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1558          static zclGeneral_AppCallbacks_t *zclGeneral_FindCallbacks( uint8 endpoint )
   \                     zclGeneral_FindCallbacks:
   1559          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1560            zclGenCBRec_t *pCBs;
   1561          
   1562            pCBs = zclGenCBs;
   \   000004   90....       MOV     DPTR,#zclGenCBs
   1563            while ( pCBs )
   1564            {
   1565              if ( pCBs->endpoint == endpoint )
   1566                return ( pCBs->CBs );
   1567              pCBs = pCBs->next;
   \                     ??zclGeneral_FindCallbacks_0:
   \   000007   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   00000A   6013         JZ      ??zclGeneral_FindCallbacks_1
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   69           XRL     A,R1
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   70ED         JNZ     ??zclGeneral_FindCallbacks_0
   \   00001A   12....       LCALL   ?Subroutine19 & 0xFFFF
   1568            }
   \                     ??CrossCallReturnLabel_216:
   \   00001D   8004         SJMP    ??zclGeneral_FindCallbacks_2
   1569            return ( (zclGeneral_AppCallbacks_t *)NULL );
   \                     ??zclGeneral_FindCallbacks_1:
   \   00001F   7A00         MOV     R2,#0x0
   \   000021   7B00         MOV     R3,#0x0
   \                     ??zclGeneral_FindCallbacks_2:
   \   000023   02....       LJMP    ?Subroutine7 & 0xFFFF
   1570          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine115_0
   \   000003                ; // Fall through to label ??Subroutine115_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
   1571          
   1572          /*********************************************************************
   1573           * @fn      zclGeneral_HdlIncoming
   1574           *
   1575           * @brief   Callback from ZCL to process incoming Commands specific
   1576           *          to this cluster library or Profile commands for attributes
   1577           *          that aren't in the attribute list
   1578           *
   1579           *
   1580           * @param   pInMsg - pointer to the incoming message
   1581           *
   1582           * @return  ZStatus_t
   1583           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1584          static ZStatus_t zclGeneral_HdlIncoming( zclIncoming_t *pInMsg )
   \                     zclGeneral_HdlIncoming:
   1585          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1586            ZStatus_t stat = ZSuccess;
   1587          
   1588          #if defined ( INTER_PAN )
   1589            if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_208:
   \   000010                ; Setup parameters for call to function StubAPS_InterPan
   \   000010   EA           MOV     A,R2
   \   000011   240F         ADD     A,#0xf
   \   000013   F582         MOV     DPL,A
   \   000015   EB           MOV     A,R3
   \   000016   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_120:
   \   000019   EA           MOV     A,R2
   \   00001A   2410         ADD     A,#0x10
   \   00001C   F582         MOV     DPL,A
   \   00001E   EB           MOV     A,R3
   \   00001F   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000022   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000025   12....       LCALL   ??StubAPS_InterPan?relay
   \   000028   E9           MOV     A,R1
   \   000029   703E         JNZ     ??zclGeneral_HdlIncoming_0
   1590              return ( stat ); // Cluster not supported thru Inter-PAN
   1591          #endif
   1592            if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
   \   00002B   8E82         MOV     DPL,R6
   \   00002D   8F83         MOV     DPH,R7
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   5403         ANL     A,#0x3
   \   000035   6401         XRL     A,#0x1
   \   000037   7034         JNZ     ??zclGeneral_HdlIncoming_1
   1593            {
   1594              // Is this a manufacturer specific command?
   1595              if ( pInMsg->hdr.fc.manuSpecific == 0 )
   \   000039   E8           MOV     A,R0
   \   00003A   5404         ANL     A,#0x4
   \   00003C   7009         JNZ     ??zclGeneral_HdlIncoming_2
   1596              {
   1597                stat = zclGeneral_HdlInSpecificCommands( pInMsg );
   \   00003E                ; Setup parameters for call to function zclGeneral_HdlInSpecificCommands
   \   00003E   EE           MOV     A,R6
   \   00003F   FA           MOV     R2,A
   \   000040   EF           MOV     A,R7
   \   000041   FB           MOV     R3,A
   \   000042   12....       LCALL   ??zclGeneral_HdlInSpecificCommands?relay
   \   000045   8028         SJMP    ??zclGeneral_HdlIncoming_3
   1598              }
   1599              else
   1600              {
   1601                // We don't support any manufacturer specific command.
   1602                stat = zclGeneral_HdlInManuSpecificCommands( pInMsg );  //add my own function
   \                     ??zclGeneral_HdlIncoming_2:
   \   000047                ; Setup parameters for call to function zclGeneral_FindCallbacks
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   1603              }
   1604            }
   \                     ??CrossCallReturnLabel_218:
   \   00004E   12....       LCALL   ??zclGeneral_FindCallbacks?relay
   \   000051   8B..         MOV     ?V0 + 1,R3
   \   000053   EA           MOV     A,R2
   \   000054   45..         ORL     A,?V0 + 1
   \   000056   6015         JZ      ??zclGeneral_HdlIncoming_1
   \   000058   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00005B   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zclGeneral_HdlIncoming>_0`:
   \   00005E   0600         DW        6
   \   000060   02           DB        2
   \   000061   ....         DW        ??zclGeneral_HdlIncoming_1
   \   000063   ....         DW        ??zclGeneral_HdlIncoming_0
   \   000065   ....         DW        ??zclGeneral_HdlIncoming_1
   \   000067   ....         DW        ??zclGeneral_HdlIncoming_0
   \                     ??zclGeneral_HdlIncoming_0:
   \   000069   7900         MOV     R1,#0x0
   \   00006B   8002         SJMP    ??zclGeneral_HdlIncoming_3
   \                     ??zclGeneral_HdlIncoming_1:
   \   00006D   7901         MOV     R1,#0x1
   1605            else
   1606            {
   1607              // Handle all the normal (Read, Write...) commands -- should never get here
   1608              stat = ZFailure;
   1609            }
   1610            return ( stat );
   \                     ??zclGeneral_HdlIncoming_3:
   \   00006F   02....       LJMP    ??Subroutine137_0 & 0xFFFF
   1611          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   12....       LCALL   ?Subroutine97 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   00000E   78..         MOV     R0,#?V0 + 0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_252:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F9           MOV     R1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine118_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   C8           XCH     A,R0
   \   000005   2414         ADD     A,#0x14
   \   000007   F582         MOV     DPL,A
   \   000009   E8           MOV     A,R0
   \   00000A   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine127_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
   1612          
   1613          /*********************************************************************
   1614           * @fn      zclGeneral_HdlInSpecificCommands
   1615           *
   1616           * @brief   Callback from ZCL to process incoming Commands specific
   1617           *          to this cluster library
   1618          
   1619           * @param   pInMsg - pointer to the incoming message
   1620           *
   1621           * @return  ZStatus_t
   1622           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1623          static ZStatus_t zclGeneral_HdlInSpecificCommands( zclIncoming_t *pInMsg )
   \                     zclGeneral_HdlInSpecificCommands:
   1624          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1625            ZStatus_t stat;
   1626            zclGeneral_AppCallbacks_t *pCBs;
   1627          
   1628            // make sure endpoint exists
   1629            pCBs = zclGeneral_FindCallbacks( pInMsg->msg->endPoint );
   \   000009                ; Setup parameters for call to function zclGeneral_FindCallbacks
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000010   12....       LCALL   ??zclGeneral_FindCallbacks?relay
   \   000013   8A..         MOV     ?V0 + 0,R2
   \   000015   8B..         MOV     ?V0 + 1,R3
   \   000017   AC..         MOV     R4,?V0 + 0
   \   000019   AD..         MOV     R5,?V0 + 1
   1630            if ( pCBs == NULL )
   \   00001B   EC           MOV     A,R4
   \   00001C   4D           ORL     A,R5
   \   00001D   6036         JZ      ??zclGeneral_HdlInSpecificCommands_0
   1631              return ( ZFailure );
   1632          
   1633            switch ( pInMsg->msg->clusterId )
   \   00001F   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000022   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for zclGeneral_HdlInSpecificComman_0`:
   \   000025   0000         DW        0
   \   000027   08           DB        8
   \   000028   ....         DW        ??zclGeneral_HdlInSpecificCommands_0
   \   00002A   ....         DW        ??zclGeneral_HdlInSpecificCommands_1
   \   00002C   ....         DW        ??zclGeneral_HdlInSpecificCommands_0
   \   00002E   ....         DW        ??zclGeneral_HdlInSpecificCommands_0
   \   000030   ....         DW        ??zclGeneral_HdlInSpecificCommands_2
   \   000032   ....         DW        ??zclGeneral_HdlInSpecificCommands_3
   \   000034   ....         DW        ??zclGeneral_HdlInSpecificCommands_4
   \   000036   ....         DW        ??zclGeneral_HdlInSpecificCommands_5
   \   000038   ....         DW        ??zclGeneral_HdlInSpecificCommands_0
   \   00003A   ....         DW        ??zclGeneral_HdlInSpecificCommands_6
   1634            {
   1635          #ifdef ZCL_BASIC
   1636              case ZCL_CLUSTER_ID_GEN_BASIC:
   1637                stat = zclGeneral_ProcessInBasic( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_1:
   \   00003C   8E82         MOV     DPL,R6
   \   00003E   8F83         MOV     DPH,R7
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   5408         ANL     A,#0x8
   \   000045   701E         JNZ     ??zclGeneral_HdlInSpecificCommands_7
   \   000047   8E82         MOV     DPL,R6
   \   000049   8F83         MOV     DPH,R7
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   6004         JZ      ??zclGeneral_HdlInSpecificCommands_8
   \                     ??zclGeneral_HdlInSpecificCommands_0:
   \   000055   7901         MOV     R1,#0x1
   \   000057   8063         SJMP    ??zclGeneral_HdlInSpecificCommands_9
   \                     ??zclGeneral_HdlInSpecificCommands_8:
   \   000059   8C82         MOV     DPL,R4
   \   00005B   8D83         MOV     DPH,R5
   \   00005D   12....       LCALL   ??Subroutine134_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   000060   6003         JZ      ??zclGeneral_HdlInSpecificCommands_7
   \   000062                ; Setup parameters for indirect call
   \   000062   12....       LCALL   ?CALL_IND
   \                     ??zclGeneral_HdlInSpecificCommands_7:
   \   000065   7900         MOV     R1,#0x0
   \   000067   8053         SJMP    ??zclGeneral_HdlInSpecificCommands_9
   1638                break;
   1639          #endif // ZCL_BASIC
   1640          
   1641          #ifdef ZCL_IDENTIFY
   1642              case ZCL_CLUSTER_ID_GEN_IDENTIFY:
   1643                stat = zclGeneral_ProcessInIdentity( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_2:
   \   000069                ; Setup parameters for call to function zclGeneral_ProcessInIdentity
   \   000069   EE           MOV     A,R6
   \   00006A   FA           MOV     R2,A
   \   00006B   EF           MOV     A,R7
   \   00006C   FB           MOV     R3,A
   \   00006D   12....       LCALL   ??zclGeneral_ProcessInIdentity?relay
   1644                break;
   \   000070   804A         SJMP    ??zclGeneral_HdlInSpecificCommands_9
   1645          #endif // ZCL_IDENTIFY
   1646          
   1647          #ifdef ZCL_GROUPS
   1648              case ZCL_CLUSTER_ID_GEN_GROUPS:
   1649                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \                     ??zclGeneral_HdlInSpecificCommands_3:
   \   000072   8E82         MOV     DPL,R6
   \   000074   8F83         MOV     DPH,R7
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   E0           MOVX    A,@DPTR
   \   000079   5408         ANL     A,#0x8
   \   00007B   7009         JNZ     ??zclGeneral_HdlInSpecificCommands_10
   1650                  stat = zclGeneral_ProcessInGroupsServer( pInMsg );
   \   00007D                ; Setup parameters for call to function zclGeneral_ProcessInGroupsServer
   \   00007D   EE           MOV     A,R6
   \   00007E   FA           MOV     R2,A
   \   00007F   EF           MOV     A,R7
   \   000080   FB           MOV     R3,A
   \   000081   12....       LCALL   ??zclGeneral_ProcessInGroupsServer?relay
   \   000084   8036         SJMP    ??zclGeneral_HdlInSpecificCommands_9
   1651                else
   1652                  stat = zclGeneral_ProcessInGroupsClient( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_10:
   \   000086                ; Setup parameters for call to function zclGeneral_ProcessInGroupsClient
   \   000086   EE           MOV     A,R6
   \   000087   FA           MOV     R2,A
   \   000088   EF           MOV     A,R7
   \   000089   FB           MOV     R3,A
   \   00008A   12....       LCALL   ??zclGeneral_ProcessInGroupsClient?relay
   \   00008D   802D         SJMP    ??zclGeneral_HdlInSpecificCommands_9
   1653                break;
   1654          #endif // ZCL_GROUPS
   1655          
   1656          #ifdef ZCL_SCENES
   1657              case ZCL_CLUSTER_ID_GEN_SCENES:
   1658                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \                     ??zclGeneral_HdlInSpecificCommands_4:
   \   00008F   8E82         MOV     DPL,R6
   \   000091   8F83         MOV     DPH,R7
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   E0           MOVX    A,@DPTR
   \   000096   5408         ANL     A,#0x8
   \   000098   7009         JNZ     ??zclGeneral_HdlInSpecificCommands_11
   1659                  stat = zclGeneral_ProcessInScenesServer( pInMsg, pCBs );
   \   00009A                ; Setup parameters for call to function zclGeneral_ProcessInScenesServer
   \   00009A   EE           MOV     A,R6
   \   00009B   FA           MOV     R2,A
   \   00009C   EF           MOV     A,R7
   \   00009D   FB           MOV     R3,A
   \   00009E   12....       LCALL   ??zclGeneral_ProcessInScenesServer?relay
   \   0000A1   8019         SJMP    ??zclGeneral_HdlInSpecificCommands_9
   1660                else
   1661                  stat = zclGeneral_ProcessInScenesClient( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_11:
   \   0000A3                ; Setup parameters for call to function zclGeneral_ProcessInScenesClient
   \   0000A3   EE           MOV     A,R6
   \   0000A4   FA           MOV     R2,A
   \   0000A5   EF           MOV     A,R7
   \   0000A6   FB           MOV     R3,A
   \   0000A7   12....       LCALL   ??zclGeneral_ProcessInScenesClient?relay
   \   0000AA   8010         SJMP    ??zclGeneral_HdlInSpecificCommands_9
   1662                break;
   1663          #endif // ZCL_SCENES
   1664          
   1665          #ifdef ZCL_ON_OFF
   1666              case ZCL_CLUSTER_ID_GEN_ON_OFF:
   1667                stat = zclGeneral_ProcessInOnOff( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_5:
   \   0000AC                ; Setup parameters for call to function zclGeneral_ProcessInOnOff
   \   0000AC   EE           MOV     A,R6
   \   0000AD   FA           MOV     R2,A
   \   0000AE   EF           MOV     A,R7
   \   0000AF   FB           MOV     R3,A
   \   0000B0   12....       LCALL   ??zclGeneral_ProcessInOnOff?relay
   1668                break;
   \   0000B3   8007         SJMP    ??zclGeneral_HdlInSpecificCommands_9
   1669          #endif // ZCL_ON_OFF
   1670          
   1671          #ifdef ZCL_LEVEL_CTRL
   1672              case ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL:
   1673                stat = zclGeneral_ProcessInLevelControl( pInMsg, pCBs );
   \                     ??zclGeneral_HdlInSpecificCommands_6:
   \   0000B5                ; Setup parameters for call to function zclGeneral_ProcessInLevelControl
   \   0000B5   EE           MOV     A,R6
   \   0000B6   FA           MOV     R2,A
   \   0000B7   EF           MOV     A,R7
   \   0000B8   FB           MOV     R3,A
   \   0000B9   12....       LCALL   ??zclGeneral_ProcessInLevelControl?relay
   1674                break;
   1675          #endif // ZCL_LEVEL_CTRL
   1676          
   1677          #ifdef ZCL_ALARMS
   1678              case ZCL_CLUSTER_ID_GEN_ALARMS:
   1679                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1680                  stat = zclGeneral_ProcessInAlarmsServer( pInMsg, pCBs );
   1681                else
   1682                  stat = zclGeneral_ProcessInAlarmsClient( pInMsg, pCBs );
   1683                break;
   1684          #endif // ZCL_ALARMS
   1685          
   1686          #ifdef ZCL_LOCATION
   1687              case ZCL_CLUSTER_ID_GEN_LOCATION:
   1688                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1689                  stat = zclGeneral_ProcessInLocationServer( pInMsg, pCBs );
   1690                else
   1691                  stat = zclGeneral_ProcessInLocationClient( pInMsg, pCBs );
   1692                break;
   1693          #endif // ZCL_LOCATION
   1694          
   1695              case ZCL_CLUSTER_ID_GEN_POWER_CFG:
   1696              case ZCL_CLUSTER_ID_GEN_DEVICE_TEMP_CONFIG:
   1697              case ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG:
   1698              case ZCL_CLUSTER_ID_GEN_TIME:
   1699              default:
   1700                stat = ZFailure;
   1701                break;
   1702            }
   1703          
   1704            return ( stat );
   \                     ??zclGeneral_HdlInSpecificCommands_9:
   \   0000BC   02....       LJMP    ??Subroutine137_0 & 0xFFFF
   1705          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine134_0:
   \   000000   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   000003   E582         MOV     A,DPL
   \   000005   4583         ORL     A,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_363:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   22           RET
   1706          
   1707          /*********************************************************************
   1708           * @fn      zclGeneral_HdlInManuSpecificCommands
   1709           *
   1710           * @brief   Callback to process incoming Manufacturer Commands specific
   1711           *          to this cluster library
   1712          
   1713           * @param   pInMsg - pointer to the incoming message
   1714           *
   1715           * @return  ZStatus_t
   1716           */
   1717          static ZStatus_t zclGeneral_HdlInManuSpecificCommands( zclIncoming_t *pInMsg )//my own function
   1718          {
   1719            ZStatus_t stat;
   1720            zclGeneral_AppCallbacks_t *pCBs;
   1721          
   1722            // make sure endpoint exists
   1723            pCBs = zclGeneral_FindCallbacks( pInMsg->msg->endPoint );
   1724            if ( pCBs == NULL )
   1725              return ( ZFailure );
   1726          
   1727            switch ( pInMsg->msg->clusterId )
   1728            {
   1729          #ifdef ZCL_BASIC
   1730              case ZCL_CLUSTER_ID_GEN_BASIC:
   1731                stat = ZFailure;
   1732                break;
   1733          #endif // ZCL_BASIC
   1734          
   1735          #ifdef ZCL_IDENTIFY
   1736              case ZCL_CLUSTER_ID_GEN_IDENTIFY:
   1737                stat = ZFailure;
   1738                break;
   1739          #endif // ZCL_IDENTIFY
   1740          
   1741          #ifdef ZCL_GROUPS
   1742              case ZCL_CLUSTER_ID_GEN_GROUPS:
   1743                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1744                  stat = ZFailure;
   1745                else
   1746                  stat = ZFailure;
   1747                break;
   1748          #endif // ZCL_GROUPS
   1749          
   1750          #ifdef ZCL_SCENES
   1751              case ZCL_CLUSTER_ID_GEN_SCENES:
   1752                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1753                  stat = ZFailure;
   1754                else
   1755                  stat = ZFailure;
   1756                break;
   1757          #endif // ZCL_SCENES
   1758          
   1759          #ifdef ZCL_ON_OFF
   1760              case ZCL_CLUSTER_ID_GEN_ON_OFF:
   1761                stat = zclGeneral_ProcessInManuOnOff( pInMsg, pCBs );
   1762                break;
   1763          #endif // ZCL_ON_OFF
   1764          
   1765          #ifdef ZCL_LEVEL_CTRL
   1766              case ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL:
   1767                stat = zclGeneral_ProcessInManuLevelControl( pInMsg, pCBs );
   1768                break;
   1769          #endif // ZCL_LEVEL_CTRL
   1770          
   1771          #ifdef ZCL_ALARMS
   1772              case ZCL_CLUSTER_ID_GEN_ALARMS:
   1773                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1774                  stat = ZFailure;
   1775                else
   1776                  stat = ZFailure;
   1777                break;
   1778          #endif // ZCL_ALARMS
   1779          
   1780          #ifdef ZCL_LOCATION
   1781              case ZCL_CLUSTER_ID_GEN_LOCATION:
   1782                if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1783                  stat = ZFailure;
   1784                else
   1785                  stat = ZFailure;
   1786                break;
   1787          #endif // ZCL_LOCATION
   1788          
   1789              case ZCL_CLUSTER_ID_GEN_POWER_CFG:
   1790              case ZCL_CLUSTER_ID_GEN_DEVICE_TEMP_CONFIG:
   1791              case ZCL_CLUSTER_ID_GEN_ON_OFF_SWITCH_CONFIG:
   1792              case ZCL_CLUSTER_ID_GEN_TIME:
   1793              default:
   1794                stat = ZFailure;
   1795                break;
   1796            }
   1797          
   1798            return ( stat );
   1799          }
   1800          
   1801          #ifdef ZCL_BASIC
   1802          /*********************************************************************
   1803           * @fn      zclGeneral_ProcessInBasic
   1804           *
   1805           * @brief   Process in the received Basic Command.
   1806           *
   1807           * @param   pInMsg - pointer to the incoming message
   1808           *
   1809           * @return  ZStatus_t
   1810           */
   1811          static ZStatus_t zclGeneral_ProcessInBasic( zclIncoming_t *pInMsg,
   1812                                                      zclGeneral_AppCallbacks_t *pCBs )
   1813          {
   1814            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   1815            {
   1816              if ( pInMsg->hdr.commandID > COMMAND_BASIC_RESET_FACT_DEFAULT )
   1817                return ( ZFailure );   // Error ignore the command
   1818          
   1819              if ( pCBs->pfnBasicReset )
   1820                pCBs->pfnBasicReset();
   1821            }
   1822            // no Client command
   1823          
   1824            return ( ZSuccess );
   1825          }
   1826          #endif // ZCL_BASIC
   1827          
   1828          #ifdef ZCL_IDENTIFY
   1829          /*********************************************************************
   1830           * @fn      zclGeneral_ProcessInIdentity
   1831           *
   1832           * @brief   Process in the received Identity Command.
   1833           *
   1834           * @param   pInMsg - pointer to the incoming message
   1835           *
   1836           * @return  ZStatus_t
   1837           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1838          static ZStatus_t zclGeneral_ProcessInIdentity( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInIdentity:
   1839                                                         zclGeneral_AppCallbacks_t *pCBs )
   1840          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   1841            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \   00000E   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_125:
   \   000011   E8           MOV     A,R0
   \   000012   FA           MOV     R2,A
   \   000013   E9           MOV     A,R1
   \   000014   FB           MOV     R3,A
   \   000015   85..82       MOV     DPL,?V0 + 0
   \   000018   85..83       MOV     DPH,?V0 + 1
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   5408         ANL     A,#0x8
   \   000020   85..82       MOV     DPL,?V0 + 0
   \   000023   85..83       MOV     DPH,?V0 + 1
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   6003         JZ      $+5
   \   00002F   02....       LJMP    ??zclGeneral_ProcessInIdentity_0 & 0xFFFF
   1842            {
   1843              if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY )
   \   000032   E0           MOVX    A,@DPTR
   \   000033   F8           MOV     R0,A
   \   000034   7007         JNZ     ??zclGeneral_ProcessInIdentity_1
   1844              {
   1845                if ( pCBs->pfnIdentify )
   \   000036   8C82         MOV     DPL,R4
   \   000038   8D83         MOV     DPH,R5
   \   00003A   02....       LJMP    ??zclGeneral_ProcessInIdentity_2 & 0xFFFF
   1846                {
   1847                  zclIdentify_t cmd;
   1848          
   1849                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   1850                  cmd.identifyTime = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1851          
   1852                  pCBs->pfnIdentify( &cmd );
   1853                }
   1854              }
   1855              else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_QUERY )
   \                     ??zclGeneral_ProcessInIdentity_1:
   \   00003D   7401         MOV     A,#0x1
   \   00003F   68           XRL     A,R0
   \   000040   6003         JZ      $+5
   \   000042   02....       LJMP    ??zclGeneral_ProcessInIdentity_3 & 0xFFFF
   1856              {
   1857                uint16 identifyTime = 0;
   \   000045   7404         MOV     A,#0x4
   \   000047   12....       LCALL   ?XSTACK_DISP0_8
   \   00004A   E4           CLR     A
   \   00004B   F0           MOVX    @DPTR,A
   \   00004C   A3           INC     DPTR
   \   00004D   F0           MOVX    @DPTR,A
   1858          
   1859                // Retrieve Identify Time
   1860                zcl_ReadAttrData( pInMsg->msg->endPoint, pInMsg->msg->clusterId,
   1861                                  ATTRID_IDENTIFY_TIME, (uint8 *)&identifyTime, NULL );
   \   00004E   85..82       MOV     DPL,?V0 + 0
   \   000051   85..83       MOV     DPH,?V0 + 1
   \   000054   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000057                ; Setup parameters for call to function zcl_ReadAttrData
   \   000057   E4           CLR     A
   \   000058   F5..         MOV     ?V0 + 2,A
   \   00005A   F5..         MOV     ?V0 + 3,A
   \   00005C   78..         MOV     R0,#?V0 + 2
   \   00005E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000061   7406         MOV     A,#0x6
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   8582..       MOV     ?V0 + 2,DPL
   \   000069   8583..       MOV     ?V0 + 3,DPH
   \   00006C   78..         MOV     R0,#?V0 + 2
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000071   7C00         MOV     R4,#0x0
   \   000073   7D00         MOV     R5,#0x0
   \   000075   8E82         MOV     DPL,R6
   \   000077   8F83         MOV     DPH,R7
   \   000079   A3           INC     DPTR
   \   00007A   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   00007D   EE           MOV     A,R6
   \   00007E   2414         ADD     A,#0x14
   \   000080   F582         MOV     DPL,A
   \   000082   EF           MOV     A,R7
   \   000083   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000086   12....       LCALL   ??zcl_ReadAttrData?relay
   \   000089   7404         MOV     A,#0x4
   \   00008B   12....       LCALL   ?DEALLOC_XSTACK8
   1862          
   1863                // Is device identifying itself?
   1864                if ( identifyTime > 0 )
   \   00008E   7404         MOV     A,#0x4
   \   000090   12....       LCALL   ?XSTACK_DISP0_8
   \   000093   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   000096   7003         JNZ     $+5
   \   000098   02....       LJMP    ??zclGeneral_ProcessInIdentity_4 & 0xFFFF
   1865                {
   1866                  zclGeneral_SendIdentifyQueryResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   1867                                                        identifyTime, true, pInMsg->hdr.transSeqNum );
   \   00009B   85..82       MOV     DPL,?V0 + 0
   \   00009E   85..83       MOV     DPH,?V0 + 1
   \   0000A1   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   0000A4                ; Setup parameters for call to function zclGeneral_SendIdentifyQueryResponse
   \   0000A4   85..82       MOV     DPL,?V0 + 0
   \   0000A7   85..83       MOV     DPH,?V0 + 1
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   A3           INC     DPTR
   \   0000B0   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_132:
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B6   75..01       MOV     ?V0 + 0,#0x1
   \   0000B9   78..         MOV     R0,#?V0 + 0
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BE   7406         MOV     A,#0x6
   \   0000C0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C3   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000C6   12....       LCALL   ??zclGeneral_SendIdentifyQueryResponse?relay
   \   0000C9   7402         MOV     A,#0x2
   \   0000CB   12....       LCALL   ?DEALLOC_XSTACK8
   1868          #ifdef ZCL_EZMODE
   1869                  zcl_EZModeAction( EZMODE_ACTION_IDENTIFY_QUERY, NULL );
   1870          #endif
   1871                  return ( ZCL_STATUS_CMD_HAS_RSP );
   \   0000CE   79FF         MOV     R1,#-0x1
   \   0000D0   02....       LJMP    ??zclGeneral_ProcessInIdentity_5 & 0xFFFF
   1872                }
   1873              }
   1874          #ifdef ZCL_EZMODE
   1875              else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_EZMODE_INVOKE )
   1876              {
   1877                if ( pCBs->pfnIdentifyEZModeInvoke )
   1878                {
   1879                  pCBs->pfnIdentifyEZModeInvoke( pInMsg->pData[0] );
   1880                }
   1881              }
   1882              else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_UPDATE_COMMISSION_STATE )
   1883              {
   1884                if ( pCBs->pfnIdentifyUpdateCommState )
   1885                {
   1886                  zclIdentifyUpdateCommState_t cmd;
   1887          
   1888                  cmd.action = pInMsg->pData[0];
   1889                  cmd.commissionStateMask = pInMsg->pData[1];
   1890          
   1891                  pCBs->pfnIdentifyUpdateCommState( &cmd );
   1892                }
   1893              }
   1894          #endif
   1895          
   1896          #ifdef ZCL_LIGHT_LINK_ENHANCE
   1897              else if ( pInMsg->hdr.commandID == COMMAND_IDENTIFY_TRIGGER_EFFECT )
   \                     ??zclGeneral_ProcessInIdentity_3:
   \   0000D3   7440         MOV     A,#0x40
   \   0000D5   68           XRL     A,R0
   \   0000D6   705F         JNZ     ??zclGeneral_ProcessInIdentity_6
   1898              {
   1899                if ( pCBs->pfnIdentifyTriggerEffect )
   \   0000D8   EC           MOV     A,R4
   \   0000D9   2404         ADD     A,#0x4
   \   0000DB   F8           MOV     R0,A
   \   0000DC   ED           MOV     A,R5
   \   0000DD   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_123:
   \   0000E0   FC           MOV     R4,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   FD           MOV     R5,A
   \   0000E4   EC           MOV     A,R4
   \   0000E5   4D           ORL     A,R5
   \   0000E6   7003         JNZ     $+5
   \   0000E8   02....       LJMP    ??zclGeneral_ProcessInIdentity_4 & 0xFFFF
   1900                {
   1901                  zclIdentifyTriggerEffect_t cmd;
   1902          
   1903                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   \   0000EB   85..82       MOV     DPL,?V0 + 0
   \   0000EE   85..83       MOV     DPH,?V0 + 1
   \   0000F1   E0           MOVX    A,@DPTR
   \   0000F2   2406         ADD     A,#0x6
   \   0000F4   FC           MOV     R4,A
   \   0000F5   A3           INC     DPTR
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   3400         ADDC    A,#0x0
   \   0000F9   FD           MOV     R5,A
   \   0000FA   85..82       MOV     DPL,?XSP + 0
   \   0000FD   85..83       MOV     DPH,?XSP + 1
   \   000100   EC           MOV     A,R4
   \   000101   F0           MOVX    @DPTR,A
   \   000102   A3           INC     DPTR
   \   000103   ED           MOV     A,R5
   \   000104   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   1904                  cmd.effectId = pInMsg->pData[0];
   1905                  cmd.effectVariant = pInMsg->pData[1];
   1906          
   1907                  pCBs->pfnIdentifyTriggerEffect( &cmd );
   1908                }
   1909              }
   1910          #endif //ZCL_LIGHT_LINK_ENHANCE
   1911              else
   1912              {
   1913                return ( ZFailure );   // Error ignore the command
   1914              }
   1915            }
   \                     ??CrossCallReturnLabel_304:
   \   000107   E0           MOVX    A,@DPTR
   \   000108   FC           MOV     R4,A
   \   000109   A3           INC     DPTR
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   F583         MOV     DPH,A
   \   00010D   8C82         MOV     DPL,R4
   \   00010F   E0           MOVX    A,@DPTR
   \   000110   C0E0         PUSH    A
   \   000112   7402         MOV     A,#0x2
   \   000114   12....       LCALL   ?XSTACK_DISP0_8
   \   000117   D0E0         POP     A
   \   000119   12....       LCALL   ??Subroutine124_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_305:
   \   00011C   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   00011F   C0E0         PUSH    A
   \   000121   7403         MOV     A,#0x3
   \   000123   12....       LCALL   ?XSTACK_DISP0_8
   \   000126   D0E0         POP     A
   \   000128   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   00012B   8882         MOV     DPL,R0
   \   00012D   8983         MOV     DPH,R1
   \   00012F   12....       LCALL   ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_370:
   \   000132   803D         SJMP    ??zclGeneral_ProcessInIdentity_7
   1916            else // Client Command
   1917            {
   1918              if ( pInMsg->hdr.commandID > COMMAND_IDENTIFY_QUERY_RSP )
   \                     ??zclGeneral_ProcessInIdentity_0:
   \   000134   E0           MOVX    A,@DPTR
   \   000135   6004         JZ      ??zclGeneral_ProcessInIdentity_8
   1919                return ( ZFailure );   // Error ignore the command
   \                     ??zclGeneral_ProcessInIdentity_6:
   \   000137   7901         MOV     R1,#0x1
   \   000139   803B         SJMP    ??zclGeneral_ProcessInIdentity_5
   1920          
   1921              if ( pCBs->pfnIdentifyQueryRsp )
   \                     ??zclGeneral_ProcessInIdentity_8:
   \   00013B   8C82         MOV     DPL,R4
   \   00013D   8D83         MOV     DPH,R5
   \   00013F   A3           INC     DPTR
   \   000140   A3           INC     DPTR
   \   000141   A3           INC     DPTR
   \   000142   A3           INC     DPTR
   \                     ??zclGeneral_ProcessInIdentity_2:
   \   000143   A3           INC     DPTR
   \   000144   A3           INC     DPTR
   \   000145   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000148   FC           MOV     R4,A
   \   000149   E9           MOV     A,R1
   \   00014A   FD           MOV     R5,A
   \   00014B   EC           MOV     A,R4
   \   00014C   4D           ORL     A,R5
   \   00014D   6025         JZ      ??zclGeneral_ProcessInIdentity_4
   1922              {
   1923                zclIdentifyQueryRsp_t rsp;
   1924          
   1925                rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \   00014F   85..82       MOV     DPL,?V0 + 0
   \   000152   85..83       MOV     DPH,?V0 + 1
   \   000155   12....       LCALL   ?Subroutine81 & 0xFFFF
   1926                rsp.timeout = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1927          
   1928                pCBs->pfnIdentifyQueryRsp( &rsp );
   1929              }
   1930            }
   \                     ??CrossCallReturnLabel_270:
   \   000158   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   00015B   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   00015E   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000161   7402         MOV     A,#0x2
   \   000163   12....       LCALL   ?XSTACK_DISP0_8
   \   000166   E8           MOV     A,R0
   \   000167   F0           MOVX    @DPTR,A
   \   000168   A3           INC     DPTR
   \   000169   E9           MOV     A,R1
   \   00016A   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   00016D   8C82         MOV     DPL,R4
   \   00016F   8D83         MOV     DPH,R5
   \                     ??zclGeneral_ProcessInIdentity_7:
   \   000171   12....       LCALL   ?CALL_IND
   1931          
   1932            return ( ZSuccess );
   \                     ??zclGeneral_ProcessInIdentity_4:
   \   000174   7900         MOV     R1,#0x0
   \                     ??zclGeneral_ProcessInIdentity_5:
   \   000176   7406         MOV     A,#0x6
   \   000178   02....       LJMP    ??Subroutine108_0 & 0xFFFF
   1933          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_364:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for indirect call
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AA82         MOV     R2,DPL
   \   000009   AB83         MOV     R3,DPH
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine113_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002                REQUIRE ??Subroutine114_0
   \   000002                ; // Fall through to label ??Subroutine114_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine114_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F9           MOV     R1,A
   \   000003   EA           MOV     A,R2
   \   000004   F8           MOV     R0,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2406         ADD     A,#0x6
   \   000003   F8           MOV     R0,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F9           MOV     R1,A
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine123_0:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_299:
   \   000003   49           ORL     A,R1
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F9           MOV     R1,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004                REQUIRE ??Subroutine124_0
   \   000004                ; // Fall through to label ??Subroutine124_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine124_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   000003   FE           MOV     R6,A
   \   000004   E9           MOV     A,R1
   \   000005   FF           MOV     R7,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   EE           MOV     A,R6
   \   000001   2406         ADD     A,#0x6
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   EE           MOV     A,R6
   \   000009   2414         ADD     A,#0x14
   \   00000B   F582         MOV     DPL,A
   \   00000D   EF           MOV     A,R7
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine129_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   EA           MOV     A,R2
   \   000001   2408         ADD     A,#0x8
   \   000003   F8           MOV     R0,A
   \   000004   EB           MOV     A,R3
   \   000005   3400         ADDC    A,#0x0
   \   000007   F9           MOV     R1,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine139_0:
   \   000000   12....       LCALL   ?Subroutine86 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   000003   F583         MOV     DPH,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   22           RET
   1934          #endif // ZCL_IDENTIFY
   1935          
   1936          #ifdef ZCL_GROUPS
   1937          
   1938          /*********************************************************************
   1939           * @fn      zclGeneral_AddGroup
   1940           *
   1941           * @brief   Add a Group.
   1942           *
   1943           * @param   endPoint - application endpoint
   1944           * @param   group - group to be added
   1945           * @param   pData - pointer to the group info
   1946           *
   1947           * @return  ZStatus_t
   1948           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1949          static ZStatus_t zclGeneral_AddGroup( uint8 endPoint, aps_Group_t *group, uint8 *pData )
   \                     zclGeneral_AddGroup:
   1950          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 2,R1
   \   00000C   8A..         MOV     ?V0 + 0,R2
   \   00000E   8B..         MOV     ?V0 + 1,R3
   \   000010   EC           MOV     A,R4
   \   000011   FE           MOV     R6,A
   \   000012   ED           MOV     A,R5
   \   000013   FF           MOV     R7,A
   1951            uint8 nameLen;
   1952            uint8 nameSupport = FALSE;
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   E4           CLR     A
   \   00001B   F0           MOVX    @DPTR,A
   1953          
   1954            pData += 2;   // Move past group ID
   \   00001C   12....       LCALL   ?Subroutine67 & 0xFFFF
   1955            nameLen = *pData++;
   \                     ??CrossCallReturnLabel_110:
   \   00001F   F5..         MOV     ?V0 + 4,A
   \   000021   A3           INC     DPTR
   \   000022   AE82         MOV     R6,DPL
   \   000024   AF83         MOV     R7,DPH
   1956          
   1957            // Retrieve Name Support attribute
   1958            zcl_ReadAttrData( endPoint, ZCL_CLUSTER_ID_GEN_GROUPS,
   1959                              ATTRID_GROUP_NAME_SUPPORT, &nameSupport, NULL );
   \   000026                ; Setup parameters for call to function zcl_ReadAttrData
   \   000026   E4           CLR     A
   \   000027   F5..         MOV     ?V0 + 6,A
   \   000029   F5..         MOV     ?V0 + 7,A
   \   00002B   78..         MOV     R0,#?V0 + 6
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   7402         MOV     A,#0x2
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   8582..       MOV     ?V0 + 6,DPL
   \   000038   8583..       MOV     ?V0 + 7,DPH
   \   00003B   78..         MOV     R0,#?V0 + 6
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   7C00         MOV     R4,#0x0
   \   000042   7D00         MOV     R5,#0x0
   \   000044   7A04         MOV     R2,#0x4
   \   000046   7B00         MOV     R3,#0x0
   \   000048   12....       LCALL   ??zcl_ReadAttrData?relay
   \   00004B   7404         MOV     A,#0x4
   \   00004D   12....       LCALL   ?DEALLOC_XSTACK8
   1960          
   1961            if ( nameSupport )
   \   000050   85..82       MOV     DPL,?XSP + 0
   \   000053   85..83       MOV     DPH,?XSP + 1
   \   000056   E0           MOVX    A,@DPTR
   \   000057   6030         JZ      ??zclGeneral_AddGroup_0
   1962            {
   1963              if ( nameLen > (APS_GROUP_NAME_LEN-1) )
   \   000059   E5..         MOV     A,?V0 + 4
   \   00005B   C3           CLR     C
   \   00005C   9410         SUBB    A,#0x10
   \   00005E   4003         JC      ??zclGeneral_AddGroup_1
   1964                 nameLen = (APS_GROUP_NAME_LEN-1);
   \   000060   75..0F       MOV     ?V0 + 4,#0xf
   1965              group->name[0] = nameLen;
   \                     ??zclGeneral_AddGroup_1:
   \   000063   85..82       MOV     DPL,?V0 + 0
   \   000066   85..83       MOV     DPH,?V0 + 1
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   E5..         MOV     A,?V0 + 4
   \   00006D   12....       LCALL   ?Subroutine60 & 0xFFFF
   1966              zcl_memcpy( &(group->name[1]), pData, nameLen );
   1967            }
   \                     ??CrossCallReturnLabel_98:
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000073   AC..         MOV     R4,?V0 + 4
   \   000075   7D00         MOV     R5,#0x0
   \   000077   E5..         MOV     A,?V0 + 0
   \   000079   2403         ADD     A,#0x3
   \   00007B   FA           MOV     R2,A
   \   00007C   E5..         MOV     A,?V0 + 1
   \   00007E   3400         ADDC    A,#0x0
   \   000080   FB           MOV     R3,A
   \   000081   12....       LCALL   ??osal_memcpy?relay
   \   000084   7403         MOV     A,#0x3
   \   000086   12....       LCALL   ?DEALLOC_XSTACK8
   1968          
   1969            return ( aps_AddGroup( endPoint, group ) );
   \                     ??zclGeneral_AddGroup_0:
   \   000089                ; Setup parameters for call to function aps_AddGroup
   \   000089   AA..         MOV     R2,?V0 + 0
   \   00008B   AB..         MOV     R3,?V0 + 1
   \   00008D   A9..         MOV     R1,?V0 + 2
   \   00008F   12....       LCALL   ??aps_AddGroup?relay
   \   000092   7401         MOV     A,#0x1
   \   000094   12....       LCALL   ?DEALLOC_XSTACK8
   \   000097   7F0B         MOV     R7,#0xb
   \   000099   02....       LJMP    ?BANKED_LEAVE_XDATA
   1970          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8E..         MOV     ?V0 + 8,R6
   \   000003   8F..         MOV     ?V0 + 9,R7
   \   000005   75..00       MOV     ?V0 + 10,#0x0
   \   000008   78..         MOV     R0,#?V0 + 8
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FE           MOV     R6,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FF           MOV     R7,A
   \   000008   8E82         MOV     DPL,R6
   \   00000A   8F83         MOV     DPH,R7
   \   00000C   22           RET
   1971          
   1972          /*********************************************************************
   1973           * @fn      zclGeneral_ProcessInGroupsServer
   1974           *
   1975           * @brief   Process in the received Groups Command.
   1976           *
   1977           * @param   pInMsg - pointer to the incoming message
   1978           *
   1979           * @return  ZStatus_t
   1980           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1981          static ZStatus_t zclGeneral_ProcessInGroupsServer( zclIncoming_t *pInMsg )
   \                     zclGeneral_ProcessInGroupsServer:
   1982          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 22
   \   000005   74EA         MOV     A,#-0x16
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   1983            aps_Group_t group;
   1984            aps_Group_t *pGroup;
   1985            uint8 *pData;
   1986            uint8 status;
   1987            uint8 grpCnt;
   1988            uint8 grpRspCnt = 0;
   \   00000E   7F00         MOV     R7,#0x0
   1989            uint16 *grpList;
   1990            uint16 identifyTime = 0;
   \   000010   7402         MOV     A,#0x2
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E4           CLR     A
   \   000016   F0           MOVX    @DPTR,A
   \   000017   A3           INC     DPTR
   \   000018   F0           MOVX    @DPTR,A
   1991            uint8 i;
   1992            ZStatus_t stat = ZSuccess;
   \   000019   FE           MOV     R6,A
   1993          
   1994            zcl_memset( (uint8*)&group, 0, sizeof( aps_Group_t ) );
   \   00001A                ; Setup parameters for call to function osal_memset
   \   00001A   7C12         MOV     R4,#0x12
   \   00001C   FD           MOV     R5,A
   \   00001D   F9           MOV     R1,A
   \   00001E   7404         MOV     A,#0x4
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   AA82         MOV     R2,DPL
   \   000025   AB83         MOV     R3,DPH
   \   000027   12....       LCALL   ??osal_memset?relay
   1995          
   1996            pData = pInMsg->pData;
   \   00002A   85..82       MOV     DPL,?V0 + 0
   \   00002D   85..83       MOV     DPH,?V0 + 1
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   E0           MOVX    A,@DPTR
   \   000039   F5..         MOV     ?V0 + 2,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F5..         MOV     ?V0 + 3,A
   1997            group.ID = BUILD_UINT16( pData[0], pData[1] );
   \   00003F   85..82       MOV     DPL,?V0 + 2
   \   000042   F583         MOV     DPH,A
   \   000044   A3           INC     DPTR
   \   000045   A882         MOV     R0,DPL
   \   000047   A983         MOV     R1,DPH
   \   000049   85..82       MOV     DPL,?V0 + 2
   \   00004C   F583         MOV     DPH,A
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   FC           MOV     R4,A
   \   000050   8882         MOV     DPL,R0
   \   000052   8983         MOV     DPH,R1
   \   000054   E0           MOVX    A,@DPTR
   \   000055   FB           MOV     R3,A
   \   000056   EC           MOV     A,R4
   \   000057   FA           MOV     R2,A
   \   000058   7404         MOV     A,#0x4
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   1998            switch ( pInMsg->hdr.commandID )
   \                     ??CrossCallReturnLabel_185:
   \   000060   E5..         MOV     A,?V0 + 0
   \   000062   2406         ADD     A,#0x6
   \   000064   F5..         MOV     ?V0 + 8,A
   \   000066   E5..         MOV     A,?V0 + 1
   \   000068   3400         ADDC    A,#0x0
   \   00006A   F5..         MOV     ?V0 + 9,A
   \   00006C   E5..         MOV     A,?V0 + 0
   \   00006E   2407         ADD     A,#0x7
   \   000070   F5..         MOV     ?V0 + 6,A
   \   000072   E5..         MOV     A,?V0 + 1
   \   000074   3400         ADDC    A,#0x0
   \   000076   F5..         MOV     ?V0 + 7,A
   \   000078   85..82       MOV     DPL,?V0 + 6
   \   00007B   F583         MOV     DPH,A
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   601E         JZ      ??zclGeneral_ProcessInGroupsServer_0
   \   000080   14           DEC     A
   \   000081   607E         JZ      ??zclGeneral_ProcessInGroupsServer_1
   \   000083   14           DEC     A
   \   000084   7003         JNZ     $+5
   \   000086   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_2 & 0xFFFF
   \   000089   14           DEC     A
   \   00008A   7003         JNZ     $+5
   \   00008C   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_3 & 0xFFFF
   \   00008F   14           DEC     A
   \   000090   7003         JNZ     $+5
   \   000092   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_4 & 0xFFFF
   \   000095   14           DEC     A
   \   000096   7003         JNZ     $+5
   \   000098   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_5 & 0xFFFF
   \   00009B   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_6 & 0xFFFF
   1999            {
   2000              case COMMAND_GROUP_ADD:
   2001                status = zclGeneral_AddGroup( pInMsg->msg->endPoint, &group, pData );
   \                     ??zclGeneral_ProcessInGroupsServer_0:
   \   00009E                ; Setup parameters for call to function zclGeneral_AddGroup
   \   00009E   AC..         MOV     R4,?V0 + 2
   \   0000A0   AD..         MOV     R5,?V0 + 3
   \   0000A2   7404         MOV     A,#0x4
   \   0000A4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A7   AA82         MOV     R2,DPL
   \   0000A9   AB83         MOV     R3,DPH
   \   0000AB   85..82       MOV     DPL,?V0 + 0
   \   0000AE   85..83       MOV     DPH,?V0 + 1
   \   0000B1   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   0000B4   12....       LCALL   ??zclGeneral_AddGroup?relay
   \   0000B7   E9           MOV     A,R1
   \   0000B8   FC           MOV     R4,A
   2002                if ( status != ZSuccess )
   \   0000B9   600B         JZ      ??zclGeneral_ProcessInGroupsServer_7
   2003                {
   2004                  if ( status == ZApsDuplicateEntry )
   \   0000BB   74B8         MOV     A,#-0x48
   \   0000BD   6C           XRL     A,R4
   \   0000BE   7004         JNZ     ??zclGeneral_ProcessInGroupsServer_8
   2005                    status = ZCL_STATUS_DUPLICATE_EXISTS;
   \   0000C0   7C8A         MOV     R4,#-0x76
   \   0000C2   8002         SJMP    ??zclGeneral_ProcessInGroupsServer_7
   2006                  else
   2007                    status = ZCL_STATUS_INSUFFICIENT_SPACE;
   \                     ??zclGeneral_ProcessInGroupsServer_8:
   \   0000C4   7C89         MOV     R4,#-0x77
   2008                }
   2009                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInGroupsServer_7:
   \   0000C6   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000C9   6003         JZ      $+5
   \   0000CB   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_9 & 0xFFFF
   \   0000CE   85..82       MOV     DPL,?V0 + 0
   \   0000D1   85..83       MOV     DPH,?V0 + 1
   \   0000D4   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   0000D7   6003         JZ      $+5
   \   0000D9   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_9 & 0xFFFF
   2010                {
   2011                  zclGeneral_SendGroupAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2012                                                   status, group.ID, true, pInMsg->hdr.transSeqNum );
   \   0000DC                ; Setup parameters for call to function zclGeneral_SendGroupResponse
   \   0000DC   85..82       MOV     DPL,?V0 + 8
   \   0000DF   85..83       MOV     DPH,?V0 + 9
   \   0000E2   E0           MOVX    A,@DPTR
   \   0000E3   F5..         MOV     ?V0 + 2,A
   \   0000E5   78..         MOV     R0,#?V0 + 2
   \   0000E7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EA   75..01       MOV     ?V0 + 2,#0x1
   \   0000ED   78..         MOV     R0,#?V0 + 2
   \   0000EF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F2   7406         MOV     A,#0x6
   \   0000F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F7   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000FA   EC           MOV     A,R4
   \   0000FB   FD           MOV     R5,A
   \   0000FC   7C00         MOV     R4,#0x0
   \   0000FE   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_10 & 0xFFFF
   2013                  stat = ZCL_STATUS_CMD_HAS_RSP;
   2014                }
   2015                break;
   2016          
   2017              case COMMAND_GROUP_VIEW:
   2018                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInGroupsServer_1:
   \   000101   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000104   6003         JZ      $+5
   \   000106   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_9 & 0xFFFF
   \   000109   8C82         MOV     DPL,R4
   \   00010B   8D83         MOV     DPH,R5
   \   00010D   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   000110   6003         JZ      $+5
   \   000112   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_9 & 0xFFFF
   2019                {
   2020                  pGroup = aps_FindGroup( pInMsg->msg->endPoint, group.ID );
   \   000115                ; Setup parameters for call to function aps_FindGroup
   \   000115   7404         MOV     A,#0x4
   \   000117   12....       LCALL   ?XSTACK_DISP0_8
   \   00011A   E0           MOVX    A,@DPTR
   \   00011B   FA           MOV     R2,A
   \   00011C   EC           MOV     A,R4
   \   00011D   2414         ADD     A,#0x14
   \   00011F   F582         MOV     DPL,A
   \   000121   ED           MOV     A,R5
   \   000122   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   000125   12....       LCALL   ??aps_FindGroup?relay
   \   000128   8A..         MOV     ?V0 + 2,R2
   \   00012A   8B..         MOV     ?V0 + 3,R3
   2021                  if ( pGroup )
   \   00012C   EA           MOV     A,R2
   \   00012D   45..         ORL     A,?V0 + 3
   \   00012F   6004         JZ      ??zclGeneral_ProcessInGroupsServer_11
   2022                  {
   2023                    status = ZCL_STATUS_SUCCESS;
   \   000131   7C00         MOV     R4,#0x0
   \   000133   800D         SJMP    ??zclGeneral_ProcessInGroupsServer_12
   2024                  }
   2025                  else
   2026                  {
   2027                    // Group not found
   2028                    status = ZCL_STATUS_NOT_FOUND;
   \                     ??zclGeneral_ProcessInGroupsServer_11:
   \   000135   7C8B         MOV     R4,#-0x75
   2029                    pGroup = &group;
   \   000137   7404         MOV     A,#0x4
   \   000139   12....       LCALL   ?XSTACK_DISP0_8
   \   00013C   8582..       MOV     ?V0 + 2,DPL
   \   00013F   8583..       MOV     ?V0 + 3,DPH
   2030                  }
   2031                  zclGeneral_SendGroupViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2032                                                    status, pGroup, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInGroupsServer_12:
   \   000142   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000145   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000148   78..         MOV     R0,#?V0 + 2
   \   00014A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014D   7D01         MOV     R5,#0x1
   \   00014F   12....       LCALL   ??Subroutine128_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   000152   12....       LCALL   ??zclGeneral_SendGroupViewResponse?relay
   \   000155   7403         MOV     A,#0x3
   \   000157   12....       LCALL   ?DEALLOC_XSTACK8
   2033                  stat = ZCL_STATUS_CMD_HAS_RSP;
   \   00015A   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_13 & 0xFFFF
   2034                }
   2035                break;
   2036          
   2037              case COMMAND_GROUP_GET_MEMBERSHIP:
   2038                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInGroupsServer_2:
   \   00015D   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000160   6003         JZ      $+5
   \   000162   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_9 & 0xFFFF
   \   000165   8C82         MOV     DPL,R4
   \   000167   8D83         MOV     DPH,R5
   \   000169   A3           INC     DPTR
   \   00016A   A3           INC     DPTR
   \   00016B   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   00016E   6003         JZ      $+5
   \   000170   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_9 & 0xFFFF
   2039                {
   2040                  grpCnt = *pData++;
   \   000173   85..82       MOV     DPL,?V0 + 2
   \   000176   85..83       MOV     DPH,?V0 + 3
   \   000179   E0           MOVX    A,@DPTR
   \   00017A   FE           MOV     R6,A
   \   00017B   88..         MOV     ?V0 + 2,R0
   \   00017D   89..         MOV     ?V0 + 3,R1
   2041          
   2042                  // Allocate space for the group list
   2043                  grpList = zcl_mem_alloc( sizeof( uint16 ) * APS_MAX_GROUPS );
   \   00017F                ; Setup parameters for call to function osal_mem_alloc
   \   00017F   7A20         MOV     R2,#0x20
   \   000181   7B00         MOV     R3,#0x0
   \   000183   12....       LCALL   ??osal_mem_alloc?relay
   \   000186   8A..         MOV     ?V0 + 4,R2
   \   000188   8B..         MOV     ?V0 + 5,R3
   2044                  if ( grpList != NULL )
   \   00018A   EA           MOV     A,R2
   \   00018B   45..         ORL     A,?V0 + 5
   \   00018D   7003         JNZ     $+5
   \   00018F   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_14 & 0xFFFF
   2045                  {
   2046                    if ( grpCnt == 0 )
   \   000192   EE           MOV     A,R6
   \   000193   7010         JNZ     ??zclGeneral_ProcessInGroupsServer_15
   2047                    {
   2048                      // Find out all the groups of which the endpoint is a member.
   2049                      grpRspCnt = aps_FindAllGroupsForEndpoint( pInMsg->msg->endPoint, grpList );
   \   000195                ; Setup parameters for call to function aps_FindAllGroupsForEndpoint
   \   000195   85..82       MOV     DPL,?V0 + 0
   \   000198   85..83       MOV     DPH,?V0 + 1
   \   00019B   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   2050                    }
   \                     ??CrossCallReturnLabel_221:
   \   00019E   12....       LCALL   ??aps_FindAllGroupsForEndpoint?relay
   \   0001A1   E9           MOV     A,R1
   \   0001A2   FF           MOV     R7,A
   \   0001A3   805D         SJMP    ??zclGeneral_ProcessInGroupsServer_16
   2051                    else
   2052                    {
   2053                      // Find out the groups (in the list) of which the endpoint is a member.
   2054                      for ( i = 0; i < grpCnt; i++ )
   \                     ??zclGeneral_ProcessInGroupsServer_15:
   \   0001A5   8E..         MOV     ?V0 + 10,R6
   2055                      {
   2056                        group.ID = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclGeneral_ProcessInGroupsServer_17:
   \   0001A7   85..82       MOV     DPL,?V0 + 2
   \   0001AA   85..83       MOV     DPH,?V0 + 3
   \   0001AD   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   0001B0   7404         MOV     A,#0x4
   \   0001B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B5   12....       LCALL   ?Subroutine64 & 0xFFFF
   2057                        pData += 2;
   \                     ??CrossCallReturnLabel_256:
   \   0001B8   E5..         MOV     A,?V0 + 2
   \   0001BA   2402         ADD     A,#0x2
   \   0001BC   F5..         MOV     ?V0 + 2,A
   \   0001BE   E5..         MOV     A,?V0 + 3
   \   0001C0   3400         ADDC    A,#0x0
   \   0001C2   F5..         MOV     ?V0 + 3,A
   2058          
   2059                        if ( aps_FindGroup( pInMsg->msg->endPoint, group.ID ) )
   \   0001C4                ; Setup parameters for call to function aps_FindGroup
   \   0001C4   7404         MOV     A,#0x4
   \   0001C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C9   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_210:
   \   0001CC   85..82       MOV     DPL,?V0 + 0
   \   0001CF   85..83       MOV     DPH,?V0 + 1
   \   0001D2   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_222:
   \   0001D5   12....       LCALL   ??aps_FindGroup?relay
   \   0001D8   8B..         MOV     ?V0 + 7,R3
   \   0001DA   EA           MOV     A,R2
   \   0001DB   45..         ORL     A,?V0 + 7
   \   0001DD   601A         JZ      ??zclGeneral_ProcessInGroupsServer_18
   2060                          grpList[grpRspCnt++] = group.ID;
   \   0001DF   7404         MOV     A,#0x4
   \   0001E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E4   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   2061                      }
   \                     ??CrossCallReturnLabel_211:
   \   0001E7   EF           MOV     A,R7
   \   0001E8   C3           CLR     C
   \   0001E9   33           RLC     A
   \   0001EA   F8           MOV     R0,A
   \   0001EB   E4           CLR     A
   \   0001EC   33           RLC     A
   \   0001ED   F9           MOV     R1,A
   \   0001EE   E5..         MOV     A,?V0 + 4
   \   0001F0   28           ADD     A,R0
   \   0001F1   F582         MOV     DPL,A
   \   0001F3   E5..         MOV     A,?V0 + 5
   \   0001F5   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   0001F8   0F           INC     R7
   \                     ??zclGeneral_ProcessInGroupsServer_18:
   \   0001F9   15..         DEC     ?V0 + 10
   \   0001FB   E5..         MOV     A,?V0 + 10
   \   0001FD   70A8         JNZ     ??zclGeneral_ProcessInGroupsServer_17
   \   0001FF   EF           MOV     A,R7
   \   000200   6051         JZ      ??zclGeneral_ProcessInGroupsServer_19
   2062                    }
   2063          
   2064                    if ( grpCnt == 0 ||  grpRspCnt != 0 )
   2065                    {
   2066                      zclGeneral_SendGroupGetMembershipResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2067                                                                 aps_GroupsRemaingCapacity(), grpRspCnt,
   2068                                                                 grpList, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInGroupsServer_16:
   \   000202                ; Setup parameters for call to function aps_CountAllGroups
   \   000202   12....       LCALL   ??aps_CountAllGroups?relay
   \   000205   85..82       MOV     DPL,?V0 + 0
   \   000208   85..83       MOV     DPH,?V0 + 1
   \   00020B   12....       LCALL   ?Subroutine32 & 0xFFFF
   2069                    }
   \                     ??CrossCallReturnLabel_40:
   \   00020E                ; Setup parameters for call to function zclGeneral_SendGroupGetMembershipRequest
   \   00020E   85..82       MOV     DPL,?V0 + 8
   \   000211   85..83       MOV     DPH,?V0 + 9
   \   000214   E0           MOVX    A,@DPTR
   \   000215   F5..         MOV     ?V0 + 2,A
   \   000217   78..         MOV     R0,#?V0 + 2
   \   000219   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00021C   75..01       MOV     ?V0 + 2,#0x1
   \   00021F   78..         MOV     R0,#?V0 + 2
   \   000221   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000224   78..         MOV     R0,#?V0 + 4
   \   000226   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000229   EF           MOV     A,R7
   \   00022A   F5..         MOV     ?V0 + 2,A
   \   00022C   78..         MOV     R0,#?V0 + 2
   \   00022E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000231   7410         MOV     A,#0x10
   \   000233   C3           CLR     C
   \   000234   99           SUBB    A,R1
   \   000235   F5..         MOV     ?V0 + 2,A
   \   000237   78..         MOV     R0,#?V0 + 2
   \   000239   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00023C   75..01       MOV     ?V0 + 2,#0x1
   \   00023F   78..         MOV     R0,#?V0 + 2
   \   000241   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000244   7D01         MOV     R5,#0x1
   \   000246   7C02         MOV     R4,#0x2
   \   000248   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00024B   12....       LCALL   ??zclGeneral_SendGroupGetMembershipRequest?rela
   \   00024E   7407         MOV     A,#0x7
   \   000250   12....       LCALL   ?DEALLOC_XSTACK8
   2070          
   2071                    zcl_mem_free( grpList );
   \                     ??zclGeneral_ProcessInGroupsServer_19:
   \   000253                ; Setup parameters for call to function osal_mem_free
   \   000253   AA..         MOV     R2,?V0 + 4
   \   000255   AB..         MOV     R3,?V0 + 5
   \   000257   12....       LCALL   ??osal_mem_free?relay
   \   00025A   804F         SJMP    ??zclGeneral_ProcessInGroupsServer_13
   2072                  }
   2073                  else
   2074                  {
   2075                    // Couldn't allocate space for the group list -- send a Default Response command back.
   2076                    zclDefaultRspCmd_t defaultRspCmd;
   2077          
   2078                    defaultRspCmd.commandID = pInMsg->hdr.commandID;
   \                     ??zclGeneral_ProcessInGroupsServer_14:
   \   00025C   85..82       MOV     DPL,?V0 + 6
   \   00025F   85..83       MOV     DPH,?V0 + 7
   \   000262   12....       LCALL   ?Subroutine43 & 0xFFFF
   2079                    defaultRspCmd.statusCode = ZCL_STATUS_INSUFFICIENT_SPACE;
   \                     ??CrossCallReturnLabel_56:
   \   000265   12....       LCALL   ?XSTACK_DISP0_8
   \   000268   7489         MOV     A,#-0x77
   \   00026A   F0           MOVX    @DPTR,A
   2080                    zcl_SendDefaultRspCmd( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   2081                                           pInMsg->msg->clusterId, &defaultRspCmd,
   2082                                           ZCL_FRAME_SERVER_CLIENT_DIR, true, 0, pInMsg->hdr.transSeqNum );
   \   00026B   12....       LCALL   ?Subroutine30 & 0xFFFF
   2083                  }
   \                     ??CrossCallReturnLabel_36:
   \   00026E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000271   E4           CLR     A
   \   000272   F5..         MOV     ?V0 + 0,A
   \   000274   F5..         MOV     ?V0 + 1,A
   \   000276   78..         MOV     R0,#?V0 + 0
   \   000278   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00027B   75..01       MOV     ?V0 + 0,#0x1
   \   00027E   78..         MOV     R0,#?V0 + 0
   \   000280   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000283   78..         MOV     R0,#?V0 + 0
   \   000285   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000288   7405         MOV     A,#0x5
   \   00028A   12....       LCALL   ?XSTACK_DISP0_8
   \   00028D   8582..       MOV     ?V0 + 0,DPL
   \   000290   8583..       MOV     ?V0 + 1,DPH
   \   000293   78..         MOV     R0,#?V0 + 0
   \   000295   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000298   8E82         MOV     DPL,R6
   \   00029A   8F83         MOV     DPH,R7
   \   00029C   A3           INC     DPTR
   \   00029D   A3           INC     DPTR
   \   00029E   A3           INC     DPTR
   \   00029F   A3           INC     DPTR
   \   0002A0   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   0002A3   12....       LCALL   ??zcl_SendDefaultRspCmd?relay
   \   0002A6   7407         MOV     A,#0x7
   \   0002A8   12....       LCALL   ?DEALLOC_XSTACK8
   2084          
   2085                  stat = ZCL_STATUS_CMD_HAS_RSP;
   \                     ??zclGeneral_ProcessInGroupsServer_13:
   \   0002AB   7EFF         MOV     R6,#-0x1
   \   0002AD   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_9 & 0xFFFF
   2086                }
   2087                break;
   2088          
   2089              case COMMAND_GROUP_REMOVE:
   2090                if ( aps_RemoveGroup( pInMsg->msg->endPoint, group.ID ) )
   \                     ??zclGeneral_ProcessInGroupsServer_3:
   \   0002B0                ; Setup parameters for call to function aps_RemoveGroup
   \   0002B0   7404         MOV     A,#0x4
   \   0002B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B5   E0           MOVX    A,@DPTR
   \   0002B6   FA           MOV     R2,A
   \   0002B7   85..82       MOV     DPL,?V0 + 0
   \   0002BA   85..83       MOV     DPH,?V0 + 1
   \   0002BD   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   0002C0   12....       LCALL   ??aps_RemoveGroup?relay
   \   0002C3   E9           MOV     A,R1
   \   0002C4   6004         JZ      ??zclGeneral_ProcessInGroupsServer_20
   2091                {
   2092                  status = ZCL_STATUS_SUCCESS;
   \   0002C6   7C00         MOV     R4,#0x0
   \   0002C8   8002         SJMP    ??zclGeneral_ProcessInGroupsServer_21
   2093                }
   2094                else
   2095                {
   2096                  status = ZCL_STATUS_NOT_FOUND;
   \                     ??zclGeneral_ProcessInGroupsServer_20:
   \   0002CA   7C8B         MOV     R4,#-0x75
   2097                }
   2098          
   2099                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInGroupsServer_21:
   \   0002CC   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0002CF   6003         JZ      $+5
   \   0002D1   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_9 & 0xFFFF
   \   0002D4   85..82       MOV     DPL,?V0 + 0
   \   0002D7   85..83       MOV     DPH,?V0 + 1
   \   0002DA   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   0002DD   6003         JZ      $+5
   \   0002DF   02....       LJMP    ??zclGeneral_ProcessInGroupsServer_9 & 0xFFFF
   2100                {
   2101                  zclGeneral_SendGroupRemoveResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2102                                                      status, group.ID, true, pInMsg->hdr.transSeqNum );
   \   0002E2                ; Setup parameters for call to function zclGeneral_SendGroupResponse
   \   0002E2   85..82       MOV     DPL,?V0 + 8
   \   0002E5   85..83       MOV     DPH,?V0 + 9
   \   0002E8   E0           MOVX    A,@DPTR
   \   0002E9   F5..         MOV     ?V0 + 2,A
   \   0002EB   78..         MOV     R0,#?V0 + 2
   \   0002ED   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002F0   75..01       MOV     ?V0 + 2,#0x1
   \   0002F3   78..         MOV     R0,#?V0 + 2
   \   0002F5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002F8   7406         MOV     A,#0x6
   \   0002FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0002FD   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000300   EC           MOV     A,R4
   \   000301   FD           MOV     R5,A
   \   000302   7C03         MOV     R4,#0x3
   \                     ??zclGeneral_ProcessInGroupsServer_10:
   \   000304   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000307   12....       LCALL   ??zclGeneral_SendGroupResponse?relay
   \   00030A   7404         MOV     A,#0x4
   \   00030C   12....       LCALL   ?DEALLOC_XSTACK8
   2103                  stat = ZCL_STATUS_CMD_HAS_RSP;
   \   00030F   1E           DEC     R6
   \   000310   8067         SJMP    ??zclGeneral_ProcessInGroupsServer_9
   2104                }
   2105                break;
   2106          
   2107              case COMMAND_GROUP_REMOVE_ALL:
   2108                aps_RemoveAllGroup( pInMsg->msg->endPoint );
   \                     ??zclGeneral_ProcessInGroupsServer_4:
   \   000312                ; Setup parameters for call to function aps_RemoveAllGroup
   \   000312   85..82       MOV     DPL,?V0 + 0
   \   000315   85..83       MOV     DPH,?V0 + 1
   \   000318   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_224:
   \   00031B   12....       LCALL   ??aps_RemoveAllGroup?relay
   2109                break;
   \   00031E   8059         SJMP    ??zclGeneral_ProcessInGroupsServer_9
   2110          
   2111              case COMMAND_GROUP_ADD_IF_IDENTIFYING:
   2112                // Retrieve Identify Time
   2113                zcl_ReadAttrData( pInMsg->msg->endPoint, ZCL_CLUSTER_ID_GEN_IDENTIFY,
   2114                                  ATTRID_IDENTIFY_TIME, (uint8 *)&identifyTime, NULL );
   \                     ??zclGeneral_ProcessInGroupsServer_5:
   \   000320                ; Setup parameters for call to function zcl_ReadAttrData
   \   000320   E4           CLR     A
   \   000321   F5..         MOV     ?V0 + 4,A
   \   000323   F5..         MOV     ?V0 + 5,A
   \   000325   78..         MOV     R0,#?V0 + 4
   \   000327   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00032A   7404         MOV     A,#0x4
   \   00032C   12....       LCALL   ?XSTACK_DISP0_8
   \   00032F   8582..       MOV     ?V0 + 4,DPL
   \   000332   8583..       MOV     ?V0 + 5,DPH
   \   000335   78..         MOV     R0,#?V0 + 4
   \   000337   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00033A   7C00         MOV     R4,#0x0
   \   00033C   7D00         MOV     R5,#0x0
   \   00033E   7A03         MOV     R2,#0x3
   \   000340   7B00         MOV     R3,#0x0
   \   000342   85..82       MOV     DPL,?V0 + 0
   \   000345   85..83       MOV     DPH,?V0 + 1
   \   000348   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   00034B   12....       LCALL   ??zcl_ReadAttrData?relay
   \   00034E   7404         MOV     A,#0x4
   \   000350   12....       LCALL   ?DEALLOC_XSTACK8
   2115          
   2116                // Is device identifying itself?
   2117                if ( identifyTime > 0 )
   \   000353   7402         MOV     A,#0x2
   \   000355   12....       LCALL   ?XSTACK_DISP0_8
   \   000358   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   00035B   601C         JZ      ??zclGeneral_ProcessInGroupsServer_9
   2118                  zclGeneral_AddGroup( pInMsg->msg->endPoint, &group, pData );
   \   00035D                ; Setup parameters for call to function zclGeneral_AddGroup
   \   00035D   AC..         MOV     R4,?V0 + 2
   \   00035F   AD..         MOV     R5,?V0 + 3
   \   000361   7404         MOV     A,#0x4
   \   000363   12....       LCALL   ?XSTACK_DISP0_8
   \   000366   AA82         MOV     R2,DPL
   \   000368   AB83         MOV     R3,DPH
   \   00036A   85..82       MOV     DPL,?V0 + 0
   \   00036D   85..83       MOV     DPH,?V0 + 1
   \   000370   12....       LCALL   ??Subroutine118_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000373   12....       LCALL   ??zclGeneral_AddGroup?relay
   \   000376   8001         SJMP    ??zclGeneral_ProcessInGroupsServer_9
   2119                break;
   2120          
   2121              default:
   2122                stat = ZFailure;
   \                     ??zclGeneral_ProcessInGroupsServer_6:
   \   000378   0E           INC     R6
   2123                break;
   2124            }
   2125          
   2126            return ( stat );
   \                     ??zclGeneral_ProcessInGroupsServer_9:
   \   000379   EE           MOV     A,R6
   \   00037A   F9           MOV     R1,A
   \   00037B   7416         MOV     A,#0x16
   \   00037D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000380   02....       LJMP    ?Subroutine6 & 0xFFFF
   2127          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2406         ADD     A,#0x6
   \   000004   FA           MOV     R2,A
   \   000005   E5..         MOV     A,?V0 + 1
   \   000007   3400         ADDC    A,#0x0
   \   000009   FB           MOV     R3,A
   \   00000A   E5..         MOV     A,?V0 + 0
   \   00000C   2414         ADD     A,#0x14
   \   00000E   F582         MOV     DPL,A
   \   000010   E5..         MOV     A,?V0 + 1
   \   000012   12....       LCALL   ?Subroutine95 & 0xFFFF
   \                     ??CrossCallReturnLabel_251:
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   39           ADDC    A,R1
   \   000001   F583         MOV     DPH,A
   \   000003                REQUIRE ??Subroutine110_0
   \   000003                ; // Fall through to label ??Subroutine110_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FE           MOV     R6,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FF           MOV     R7,A
   \   00000B                ; Setup parameters for call to function zclGeneral_SendGroupViewResponse
   \   00000B                ; Setup parameters for call to function zcl_SendDefaultRspCmd
   \   00000B   85..82       MOV     DPL,?V0 + 8
   \   00000E   85..83       MOV     DPH,?V0 + 9
   \   000011   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FC           MOV     R4,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FD           MOV     R5,A
   \   00000B   EC           MOV     A,R4
   \   00000C   2415         ADD     A,#0x15
   \   00000E   F582         MOV     DPL,A
   \   000010   ED           MOV     A,R5
   \   000011   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   85..82       MOV     DPL,?V0 + 0
   \   000003   85..83       MOV     DPH,?V0 + 1
   \   000006   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000009   2415         ADD     A,#0x15
   \   00000B   F582         MOV     DPL,A
   \   00000D   E5..         MOV     A,?V0 + 1
   \   00000F   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine122_0:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine123_0
   \   000002                ; // Fall through to label ??Subroutine123_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine128_0:
   \   000000   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET
   2128          
   2129          /*********************************************************************
   2130           * @fn      zclGeneral_ProcessInGroupsClient
   2131           *
   2132           * @brief   Process in the received Groups Command.
   2133           *
   2134           * @param   pInMsg - pointer to the incoming message
   2135           *
   2136           * @return  ZStatus_t
   2137           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   E8           MOV     A,R0
   \   000002   FE           MOV     R6,A
   \   000003   E9           MOV     A,R1
   \   000004   FF           MOV     R7,A
   \   000005                REQUIRE ??Subroutine112_0
   \   000005                ; // Fall through to label ??Subroutine112_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine112_0:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine113_0
   \   000004                ; // Fall through to label ??Subroutine113_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2138          static ZStatus_t zclGeneral_ProcessInGroupsClient( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInGroupsClient:
   2139                                                             zclGeneral_AppCallbacks_t *pCBs )
   2140          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 28
   \   000005   74E4         MOV     A,#-0x1c
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 4,R2
   \   00000C   8B..         MOV     ?V0 + 5,R3
   \   00000E   12....       LCALL   ?Subroutine40 & 0xFFFF
   2141            aps_Group_t group;
   2142            uint8 *pData = pInMsg->pData;
   2143            uint8 grpCnt;
   2144            uint8 nameLen;
   2145            zclGroupRsp_t rsp;
   2146            uint8 i;
   2147            ZStatus_t stat = ZSuccess;
   \                     ??CrossCallReturnLabel_332:
   \   000011   75..00       MOV     ?V0 + 11,#0x0
   2148          
   2149            zcl_memset( (uint8*)&group, 0, sizeof( aps_Group_t ) );
   \   000014                ; Setup parameters for call to function osal_memset
   \   000014   7C12         MOV     R4,#0x12
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7900         MOV     R1,#0x0
   \   00001A   740A         MOV     A,#0xa
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   AA82         MOV     R2,DPL
   \   000021   AB83         MOV     R3,DPH
   \   000023   12....       LCALL   ??osal_memset?relay
   2150            zcl_memset( (uint8*)&rsp, 0, sizeof( zclGroupRsp_t ) );
   \   000026                ; Setup parameters for call to function osal_memset
   \   000026   7C0A         MOV     R4,#0xa
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   85..82       MOV     DPL,?XSP + 0
   \   00002F   85..83       MOV     DPH,?XSP + 1
   \   000032   AA82         MOV     R2,DPL
   \   000034   AB83         MOV     R3,DPH
   \   000036   12....       LCALL   ??osal_memset?relay
   2151          
   2152            switch ( pInMsg->hdr.commandID )
   \   000039   E5..         MOV     A,?V0 + 0
   \   00003B   2418         ADD     A,#0x18
   \   00003D   F5..         MOV     ?V0 + 0,A
   \   00003F   E5..         MOV     A,?V0 + 1
   \   000041   3400         ADDC    A,#0x0
   \   000043   F5..         MOV     ?V0 + 1,A
   \   000045   8E82         MOV     DPL,R6
   \   000047   8F83         MOV     DPH,R7
   \   000049   A3           INC     DPTR
   \   00004A   A882         MOV     R0,DPL
   \   00004C   A983         MOV     R1,DPH
   \   00004E   E5..         MOV     A,?V0 + 4
   \   000050   2407         ADD     A,#0x7
   \   000052   F5..         MOV     ?V0 + 2,A
   \   000054   E5..         MOV     A,?V0 + 5
   \   000056   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000059   600F         JZ      ??zclGeneral_ProcessInGroupsClient_0
   \   00005B   14           DEC     A
   \   00005C   600C         JZ      ??zclGeneral_ProcessInGroupsClient_0
   \   00005E   14           DEC     A
   \   00005F   7003         JNZ     $+5
   \   000061   02....       LJMP    ??zclGeneral_ProcessInGroupsClient_1 & 0xFFFF
   \   000064   14           DEC     A
   \   000065   6003         JZ      $+5
   \   000067   02....       LJMP    ??zclGeneral_ProcessInGroupsClient_2 & 0xFFFF
   2153            {
   2154              case COMMAND_GROUP_ADD_RSP:
   2155              case COMMAND_GROUP_VIEW_RSP:
   2156              case COMMAND_GROUP_REMOVE_RSP:
   2157                rsp.status = *pData++;
   \                     ??zclGeneral_ProcessInGroupsClient_0:
   \   00006A   8E82         MOV     DPL,R6
   \   00006C   8F83         MOV     DPH,R7
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   FC           MOV     R4,A
   \   000070   7403         MOV     A,#0x3
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   EC           MOV     A,R4
   \   000076   12....       LCALL   ?Subroutine36 & 0xFFFF
   2158                group.ID = BUILD_UINT16( pData[0], pData[1] );
   \                     ??CrossCallReturnLabel_193:
   \   000079   740A         MOV     A,#0xa
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   12....       LCALL   ?Subroutine64 & 0xFFFF
   2159          
   2160                if ( rsp.status == ZCL_STATUS_SUCCESS && pInMsg->hdr.commandID == COMMAND_GROUP_VIEW_RSP )
   \                     ??CrossCallReturnLabel_257:
   \   000081   EC           MOV     A,R4
   \   000082   704F         JNZ     ??CrossCallReturnLabel_258
   \   000084   85..82       MOV     DPL,?V0 + 2
   \   000087   85..83       MOV     DPH,?V0 + 3
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   6401         XRL     A,#0x1
   \   00008D   7044         JNZ     ??CrossCallReturnLabel_258
   2161                {
   2162                  pData += 2;   // Move past ID
   \   00008F   12....       LCALL   ?Subroutine67 & 0xFFFF
   2163                  nameLen = *pData++;
   \                     ??CrossCallReturnLabel_111:
   \   000092   F5..         MOV     ?V0 + 6,A
   \   000094   A3           INC     DPTR
   \   000095   0E           INC     R6
   \   000096   AF83         MOV     R7,DPH
   2164                  if ( nameLen > (APS_GROUP_NAME_LEN-1) )
   \   000098   C3           CLR     C
   \   000099   9410         SUBB    A,#0x10
   \   00009B   4003         JC      ??zclGeneral_ProcessInGroupsClient_3
   2165                    nameLen = (APS_GROUP_NAME_LEN-1);
   \   00009D   75..0F       MOV     ?V0 + 6,#0xf
   2166                  group.name[0] = nameLen;
   \                     ??zclGeneral_ProcessInGroupsClient_3:
   \   0000A0   740C         MOV     A,#0xc
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   E5..         MOV     A,?V0 + 6
   \   0000A7   12....       LCALL   ?Subroutine60 & 0xFFFF
   2167                  zcl_memcpy( &(group.name[1]), pData, nameLen );
   \                     ??CrossCallReturnLabel_99:
   \   0000AA   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000AD   AC..         MOV     R4,?V0 + 6
   \   0000AF   7D00         MOV     R5,#0x0
   \   0000B1   7410         MOV     A,#0x10
   \   0000B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B6   AA82         MOV     R2,DPL
   \   0000B8   AB83         MOV     R3,DPH
   \   0000BA   12....       LCALL   ??osal_memcpy?relay
   \   0000BD   7403         MOV     A,#0x3
   \   0000BF   12....       LCALL   ?DEALLOC_XSTACK8
   2168                  rsp.grpName = group.name;
   \   0000C2   740C         MOV     A,#0xc
   \   0000C4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C7   A882         MOV     R0,DPL
   \   0000C9   A983         MOV     R1,DPH
   \   0000CB   7408         MOV     A,#0x8
   \   0000CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D0   12....       LCALL   ?Subroutine64 & 0xFFFF
   2169                }
   2170          
   2171                if ( pCBs->pfnGroupRsp )
   \                     ??CrossCallReturnLabel_258:
   \   0000D3   85..82       MOV     DPL,?V0 + 0
   \   0000D6   85..83       MOV     DPH,?V0 + 1
   \   0000D9   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   0000DC   7003         JNZ     $+5
   \   0000DE   02....       LJMP    ??zclGeneral_ProcessInGroupsClient_4 & 0xFFFF
   2172                {
   2173                  rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \   0000E1   12....       LCALL   ?Subroutine13 & 0xFFFF
   2174                  rsp.cmdID = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_266:
   \   0000E4   C0E0         PUSH    A
   \   0000E6   7402         MOV     A,#0x2
   \   0000E8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EB   D0E0         POP     A
   \   0000ED   F0           MOVX    @DPTR,A
   2175                  rsp.grpCnt = 1;
   \   0000EE   7404         MOV     A,#0x4
   \   0000F0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F3   7401         MOV     A,#0x1
   \   0000F5   F0           MOVX    @DPTR,A
   2176                  rsp.grpList = &group.ID;
   \   0000F6   740A         MOV     A,#0xa
   \   0000F8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FB   A882         MOV     R0,DPL
   \   0000FD   A983         MOV     R1,DPH
   \   0000FF   7405         MOV     A,#0x5
   \   000101   12....       LCALL   ?XSTACK_DISP0_8
   \   000104   12....       LCALL   ?Subroutine64 & 0xFFFF
   2177                  rsp.capacity = 0;
   \                     ??CrossCallReturnLabel_259:
   \   000107   7407         MOV     A,#0x7
   \   000109   12....       LCALL   ?XSTACK_DISP0_8
   \   00010C   E4           CLR     A
   \   00010D   12....       LCALL   ??Subroutine138_0 & 0xFFFF
   2178          
   2179                  pCBs->pfnGroupRsp( &rsp );
   2180                }
   \                     ??CrossCallReturnLabel_368:
   \   000110   12....       LCALL   ?CALL_IND
   \   000113   02....       LJMP    ??zclGeneral_ProcessInGroupsClient_4 & 0xFFFF
   2181                break;
   2182          
   2183              case COMMAND_GROUP_GET_MEMBERSHIP_RSP:
   2184                {
   2185                  uint16 *grpList = NULL;
   \                     ??zclGeneral_ProcessInGroupsClient_1:
   \   000116   75..00       MOV     ?V0 + 6,#0x0
   \   000119   75..00       MOV     ?V0 + 7,#0x0
   2186                  rsp.capacity = *pData++;
   \   00011C   8E82         MOV     DPL,R6
   \   00011E   8F83         MOV     DPH,R7
   \   000120   E0           MOVX    A,@DPTR
   \   000121   C0E0         PUSH    A
   \   000123   7407         MOV     A,#0x7
   \   000125   12....       LCALL   ?XSTACK_DISP0_8
   \   000128   D0E0         POP     A
   \   00012A   F0           MOVX    @DPTR,A
   \   00012B   E8           MOV     A,R0
   \   00012C   FE           MOV     R6,A
   \   00012D   E9           MOV     A,R1
   \   00012E   FF           MOV     R7,A
   2187                  grpCnt = *pData++;
   \   00012F   8E82         MOV     DPL,R6
   \   000131   8F83         MOV     DPH,R7
   \   000133   E0           MOVX    A,@DPTR
   \   000134   F5..         MOV     ?V0 + 8,A
   \   000136   A3           INC     DPTR
   \   000137   0E           INC     R6
   \   000138   AF83         MOV     R7,DPH
   2188          
   2189                  if ( grpCnt > 0 )
   \   00013A   6047         JZ      ??zclGeneral_ProcessInGroupsClient_5
   2190                  {
   2191                    // Allocate space for the group list
   2192                    grpList = zcl_mem_alloc( sizeof( uint16 ) * grpCnt );
   \   00013C                ; Setup parameters for call to function osal_mem_alloc
   \   00013C   C3           CLR     C
   \   00013D   33           RLC     A
   \   00013E   FA           MOV     R2,A
   \   00013F   E4           CLR     A
   \   000140   33           RLC     A
   \   000141   FB           MOV     R3,A
   \   000142   12....       LCALL   ??osal_mem_alloc?relay
   \   000145   8A..         MOV     ?V0 + 6,R2
   \   000147   8B..         MOV     ?V0 + 7,R3
   2193                    if ( grpList != NULL )
   \   000149   EA           MOV     A,R2
   \   00014A   45..         ORL     A,?V0 + 7
   \   00014C   6035         JZ      ??zclGeneral_ProcessInGroupsClient_5
   2194                    {
   2195                      rsp.grpCnt = grpCnt;
   \   00014E   7404         MOV     A,#0x4
   \   000150   12....       LCALL   ?XSTACK_DISP0_8
   \   000153   E5..         MOV     A,?V0 + 8
   \   000155   F0           MOVX    @DPTR,A
   2196                      for ( i = 0; i < grpCnt; i++ )
   \   000156   7C00         MOV     R4,#0x0
   \   000158   8023         SJMP    ??zclGeneral_ProcessInGroupsClient_6
   2197                      {
   2198                        grpList[i] = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclGeneral_ProcessInGroupsClient_7:
   \   00015A   8E82         MOV     DPL,R6
   \   00015C   8F83         MOV     DPH,R7
   \   00015E   12....       LCALL   ??Subroutine130_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000161   E4           CLR     A
   \   000162   39           ADDC    A,R1
   \   000163   FB           MOV     R3,A
   \   000164   EC           MOV     A,R4
   \   000165   33           RLC     A
   \   000166   F8           MOV     R0,A
   \   000167   E4           CLR     A
   \   000168   33           RLC     A
   \   000169   F9           MOV     R1,A
   \   00016A   E5..         MOV     A,?V0 + 6
   \   00016C   28           ADD     A,R0
   \   00016D   F582         MOV     DPL,A
   \   00016F   E5..         MOV     A,?V0 + 7
   \   000171   12....       LCALL   ?Subroutine57 & 0xFFFF
   2199                        pData += 2;
   \                     ??CrossCallReturnLabel_192:
   \   000174   EE           MOV     A,R6
   \   000175   2402         ADD     A,#0x2
   \   000177   FE           MOV     R6,A
   \   000178   EF           MOV     A,R7
   \   000179   3400         ADDC    A,#0x0
   \   00017B   FF           MOV     R7,A
   2200                      }
   \   00017C   0C           INC     R4
   \                     ??zclGeneral_ProcessInGroupsClient_6:
   \   00017D   EC           MOV     A,R4
   \   00017E   C3           CLR     C
   \   00017F   95..         SUBB    A,?V0 + 8
   \   000181   40D7         JC      ??zclGeneral_ProcessInGroupsClient_7
   2201                    }
   2202                  }
   2203          
   2204                  if ( pCBs->pfnGroupRsp )
   \                     ??zclGeneral_ProcessInGroupsClient_5:
   \   000183   85..82       MOV     DPL,?V0 + 0
   \   000186   85..83       MOV     DPH,?V0 + 1
   \   000189   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   00018C   601E         JZ      ??zclGeneral_ProcessInGroupsClient_8
   2205                  {
   2206                    rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \   00018E   12....       LCALL   ?Subroutine13 & 0xFFFF
   2207                    rsp.cmdID = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_267:
   \   000191   C0E0         PUSH    A
   \   000193   7402         MOV     A,#0x2
   \   000195   12....       LCALL   ?XSTACK_DISP0_8
   \   000198   D0E0         POP     A
   \   00019A   F0           MOVX    @DPTR,A
   2208                    rsp.grpList = grpList;
   \   00019B   7405         MOV     A,#0x5
   \   00019D   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A0   E5..         MOV     A,?V0 + 6
   \   0001A2   F0           MOVX    @DPTR,A
   \   0001A3   A3           INC     DPTR
   \   0001A4   E5..         MOV     A,?V0 + 7
   \   0001A6   12....       LCALL   ??Subroutine138_0 & 0xFFFF
   2209          
   2210                    pCBs->pfnGroupRsp( &rsp );
   2211                  }
   \                     ??CrossCallReturnLabel_369:
   \   0001A9   12....       LCALL   ?CALL_IND
   2212          
   2213                  if ( grpList != NULL )
   \                     ??zclGeneral_ProcessInGroupsClient_8:
   \   0001AC   E5..         MOV     A,?V0 + 6
   \   0001AE   45..         ORL     A,?V0 + 7
   \   0001B0   600C         JZ      ??zclGeneral_ProcessInGroupsClient_4
   2214                  {
   2215                    zcl_mem_free( grpList );
   \   0001B2                ; Setup parameters for call to function osal_mem_free
   \   0001B2   AA..         MOV     R2,?V0 + 6
   \   0001B4   AB..         MOV     R3,?V0 + 7
   \   0001B6   12....       LCALL   ??osal_mem_free?relay
   \   0001B9   8003         SJMP    ??zclGeneral_ProcessInGroupsClient_4
   2216                  }
   2217                }
   2218                break;
   2219          
   2220              default:
   2221                stat = ZFailure;
   \                     ??zclGeneral_ProcessInGroupsClient_2:
   \   0001BB   75..01       MOV     ?V0 + 11,#0x1
   2222                break;
   2223            }
   2224          
   2225            return ( stat );
   \                     ??zclGeneral_ProcessInGroupsClient_4:
   \   0001BE   A9..         MOV     R1,?V0 + 11
   \   0001C0   741C         MOV     A,#0x1c
   \   0001C2                REQUIRE ?Subroutine4
   \   0001C2                ; // Fall through to label ?Subroutine4
   2226          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine119_0
   \   000003                ; // Fall through to label ??Subroutine119_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   85..82       MOV     DPL,?V0 + 4
   \   000003   85..83       MOV     DPH,?V0 + 5
   \   000006                REQUIRE ??Subroutine121_0
   \   000006                ; // Fall through to label ??Subroutine121_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine121_0:
   \   000000   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_271:
   \   000003   E8           MOV     A,R0
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   E9           MOV     A,R1
   \   000007   F0           MOVX    @DPTR,A
   \   000008   85..82       MOV     DPL,?V0 + 2
   \   00000B   85..83       MOV     DPH,?V0 + 3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   8C..         MOV     ?V0 + 0,R4
   \   000002   8D..         MOV     ?V0 + 1,R5
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010                REQUIRE ??Subroutine129_0
   \   000010                ; // Fall through to label ??Subroutine129_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine130_0:
   \   000000   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   000003   F9           MOV     R1,A
   \   000004   EA           MOV     A,R2
   \   000005   2400         ADD     A,#0x0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 3,A
   \   000004   85..82       MOV     DPL,?V0 + 2
   \   000007   F583         MOV     DPH,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine138_0:
   \   000000   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   000003   85..82       MOV     DPL,?V0 + 0
   \   000006   85..83       MOV     DPH,?V0 + 1
   \   000009                REQUIRE ??Subroutine139_0
   \   000009                ; // Fall through to label ??Subroutine139_0
   2227          #endif // ZCL_GROUPS
   2228          
   2229          #if defined( ZCL_SCENES )
   2230          #if !defined ( ZCL_STANDALONE )
   2231          /*********************************************************************
   2232           * @fn      zclGeneral_AddScene
   2233           *
   2234           * @brief   Add a scene for an endpoint
   2235           *
   2236           * @param   endpoint -
   2237           * @param   scene - new scene item
   2238           *
   2239           * @return  ZStatus_t
   2240           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2241          ZStatus_t zclGeneral_AddScene( uint8 endpoint, zclGeneral_Scene_t *scene )
   \                     zclGeneral_AddScene:
   2242          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   2243            zclGenSceneItem_t *pNewItem;
   2244            zclGenSceneItem_t *pLoop;
   2245          
   2246            // Fill in the new profile list
   2247            pNewItem = zcl_mem_alloc( sizeof( zclGenSceneItem_t ) );
   \   00000B                ; Setup parameters for call to function osal_mem_alloc
   \   00000B   7A3A         MOV     R2,#0x3a
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   12....       LCALL   ??osal_mem_alloc?relay
   \   000012   8A..         MOV     ?V0 + 4,R2
   \   000014   8B..         MOV     ?V0 + 5,R3
   \   000016   AE..         MOV     R6,?V0 + 4
   \   000018   AF..         MOV     R7,?V0 + 5
   2248            if ( pNewItem == NULL )
   \   00001A   EE           MOV     A,R6
   \   00001B   4F           ORL     A,R7
   \   00001C   7004         JNZ     ??zclGeneral_AddScene_0
   2249              return ( ZMemError );
   \   00001E   7910         MOV     R1,#0x10
   \   000020   8065         SJMP    ??zclGeneral_AddScene_1
   2250          
   2251            // Fill in the plugin record.
   2252            pNewItem->next = (zclGenSceneItem_t *)NULL;
   \                     ??zclGeneral_AddScene_0:
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   E4           CLR     A
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   12....       LCALL   ?Subroutine65 & 0xFFFF
   2253            pNewItem->endpoint = endpoint;
   \                     ??CrossCallReturnLabel_105:
   \   00002C   A3           INC     DPTR
   \   00002D   E5..         MOV     A,?V0 + 2
   \   00002F   F0           MOVX    @DPTR,A
   2254            zcl_memcpy( (uint8*)&(pNewItem->scene), (uint8*)scene, sizeof ( zclGeneral_Scene_t ));
   \   000030                ; Setup parameters for call to function osal_memcpy
   \   000030   85....       MOV     ?V0 + 4,?V0 + 0
   \   000033   85....       MOV     ?V0 + 5,?V0 + 1
   \   000036   75..00       MOV     ?V0 + 6,#0x0
   \   000039   78..         MOV     R0,#?V0 + 4
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003E   7C37         MOV     R4,#0x37
   \   000040   7D00         MOV     R5,#0x0
   \   000042   EE           MOV     A,R6
   \   000043   2403         ADD     A,#0x3
   \   000045   FA           MOV     R2,A
   \   000046   EF           MOV     A,R7
   \   000047   3400         ADDC    A,#0x0
   \   000049   FB           MOV     R3,A
   \   00004A   12....       LCALL   ??osal_memcpy?relay
   \   00004D   7403         MOV     A,#0x3
   \   00004F   12....       LCALL   ?DEALLOC_XSTACK8
   2255          
   2256            // Find spot in list
   2257            if (  zclGenSceneTable == NULL )
   \   000052   90....       MOV     DPTR,#zclGenSceneTable
   \   000055   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   000058   90....       MOV     DPTR,#zclGenSceneTable
   \   00005B   7006         JNZ     ??zclGeneral_AddScene_2
   2258            {
   2259              zclGenSceneTable = pNewItem;
   \   00005D   EE           MOV     A,R6
   \   00005E   F0           MOVX    @DPTR,A
   \   00005F   A3           INC     DPTR
   \   000060   EF           MOV     A,R7
   \   000061   801E         SJMP    ??zclGeneral_AddScene_3
   2260            }
   2261            else
   2262            {
   2263              // Look for end of list
   2264              pLoop = zclGenSceneTable;
   \                     ??zclGeneral_AddScene_2:
   \   000063   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_340:
   \   000066   8003         SJMP    ??zclGeneral_AddScene_4
   2265              while ( pLoop->next != NULL )
   2266                pLoop = pLoop->next;
   \                     ??zclGeneral_AddScene_5:
   \   000068   E8           MOV     A,R0
   \   000069   FA           MOV     R2,A
   \   00006A   E9           MOV     A,R1
   \                     ??zclGeneral_AddScene_4:
   \   00006B   FB           MOV     R3,A
   \   00006C   8A82         MOV     DPL,R2
   \   00006E   8B83         MOV     DPH,R3
   \   000070   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000073   70F3         JNZ     ??zclGeneral_AddScene_5
   2267          
   2268              // Put new item at end of list
   2269              pLoop->next = pNewItem;
   \   000075   EE           MOV     A,R6
   \   000076   F8           MOV     R0,A
   \   000077   EF           MOV     A,R7
   \   000078   F9           MOV     R1,A
   \   000079   8A82         MOV     DPL,R2
   \   00007B   8B83         MOV     DPH,R3
   \   00007D   E8           MOV     A,R0
   \   00007E   F0           MOVX    @DPTR,A
   \   00007F   A3           INC     DPTR
   \   000080   E9           MOV     A,R1
   \                     ??zclGeneral_AddScene_3:
   \   000081   F0           MOVX    @DPTR,A
   2270            }
   2271          
   2272            // Update NV
   2273            zclGeneral_ScenesWriteNV();
   \   000082                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   000082   12....       LCALL   ??zclGeneral_ScenesWriteNV?relay
   2274          
   2275            return ( ZSuccess );
   \   000085   7900         MOV     R1,#0x0
   \                     ??zclGeneral_AddScene_1:
   \   000087   7F07         MOV     R7,#0x7
   \   000089   02....       LJMP    ?BANKED_LEAVE_XDATA
   2276          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET
   2277          #endif // ZCL_STANDALONE
   2278          
   2279          #if !defined ( ZCL_STANDALONE )
   2280          /*********************************************************************
   2281           * @fn      zclGeneral_FindScene
   2282           *
   2283           * @brief   Find a scene with endpoint and sceneID
   2284           *
   2285           * @param   endpoint -
   2286           * @param   groupID - what group the scene belongs to
   2287           * @param   sceneID - ID to look for scene
   2288           *
   2289           * @return  a pointer to the scene information, NULL if not found
   2290           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2291          zclGeneral_Scene_t *zclGeneral_FindScene( uint8 endpoint, uint16 groupID, uint8 sceneID )
   \                     zclGeneral_FindScene:
   2292          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FD           MOV     R5,A
   2293            zclGenSceneItem_t *pLoop;
   2294          
   2295            // Look for end of list
   2296            pLoop = zclGenSceneTable;
   \   000007   90....       MOV     DPTR,#zclGenSceneTable
   \   00000A   8004         SJMP    ??zclGeneral_FindScene_0
   2297            while ( pLoop )
   2298            {
   2299              if ( (pLoop->endpoint == endpoint || endpoint == 0xFF)
   2300                  && pLoop->scene.groupID == groupID && pLoop->scene.ID == sceneID )
   2301              {
   2302                return ( &(pLoop->scene) );
   2303              }
   2304              pLoop = pLoop->next;
   \                     ??zclGeneral_FindScene_1:
   \   00000C   8E82         MOV     DPL,R6
   \   00000E   8F83         MOV     DPH,R7
   \                     ??zclGeneral_FindScene_0:
   \   000010   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   000013   EE           MOV     A,R6
   \   000014   4F           ORL     A,R7
   \   000015   6032         JZ      ??zclGeneral_FindScene_2
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   6D           XRL     A,R5
   \   00001F   6005         JZ      ??zclGeneral_FindScene_3
   \   000021   74FF         MOV     A,#-0x1
   \   000023   6D           XRL     A,R5
   \   000024   70E6         JNZ     ??zclGeneral_FindScene_1
   \                     ??zclGeneral_FindScene_3:
   \   000026   EE           MOV     A,R6
   \   000027   2403         ADD     A,#0x3
   \   000029   F8           MOV     R0,A
   \   00002A   EF           MOV     A,R7
   \   00002B   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_124:
   \   00002E   6A           XRL     A,R2
   \   00002F   7003         JNZ     ??zclGeneral_FindScene_4
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   6B           XRL     A,R3
   \                     ??zclGeneral_FindScene_4:
   \   000034   70D6         JNZ     ??zclGeneral_FindScene_1
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   A3           INC     DPTR
   \   00003B   A3           INC     DPTR
   \   00003C   A3           INC     DPTR
   \   00003D   A3           INC     DPTR
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   6C           XRL     A,R4
   \   000041   70C9         JNZ     ??zclGeneral_FindScene_1
   \   000043   E8           MOV     A,R0
   \   000044   FA           MOV     R2,A
   \   000045   E9           MOV     A,R1
   \   000046   FB           MOV     R3,A
   \   000047   8004         SJMP    ??zclGeneral_FindScene_5
   2305            }
   2306          
   2307            return ( (zclGeneral_Scene_t *)NULL );
   \                     ??zclGeneral_FindScene_2:
   \   000049   7A00         MOV     R2,#0x0
   \   00004B   7B00         MOV     R3,#0x0
   \                     ??zclGeneral_FindScene_5:
   \   00004D                REQUIRE ?Subroutine8
   \   00004D                ; // Fall through to label ?Subroutine8
   2308          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   2309          #endif // ZCL_STANDALONE
   2310          
   2311          #if !defined ( ZCL_STANDALONE )
   2312          /*********************************************************************
   2313           * @fn      aps_FindAllScensForGroup
   2314           *
   2315           * @brief   Find all the scenes with groupID
   2316           *
   2317           * @param   endpoint - endpoint to look for
   2318           * @param   sceneList - List to hold scene IDs (should hold APS_MAX_SCENES entries)
   2319           *
   2320           * @return  number of scenes copied to sceneList
   2321           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2322          uint8 zclGeneral_FindAllScenesForGroup( uint8 endpoint, uint16 groupID, uint8 *sceneList )
   \                     zclGeneral_FindAllScenesForGroup:
   2323          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
   2324            zclGenSceneItem_t *pLoop;
   2325            uint8 cnt = 0;
   \   000007   7E00         MOV     R6,#0x0
   2326          
   2327            // Look for end of list
   2328            pLoop = zclGenSceneTable;
   \   000009   90....       MOV     DPTR,#zclGenSceneTable
   \   00000C   8039         SJMP    ??zclGeneral_FindAllScenesForGroup_0
   2329            while ( pLoop )
   2330            {
   2331              if ( pLoop->endpoint == endpoint && pLoop->scene.groupID == groupID )
   \                     ??zclGeneral_FindAllScenesForGroup_1:
   \   00000E   8882         MOV     DPL,R0
   \   000010   8983         MOV     DPH,R1
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   6F           XRL     A,R7
   \   000016   702B         JNZ     ??zclGeneral_FindAllScenesForGroup_2
   \   000018   8882         MOV     DPL,R0
   \   00001A   8983         MOV     DPH,R1
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6A           XRL     A,R2
   \   000021   7003         JNZ     ??zclGeneral_FindAllScenesForGroup_3
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   6B           XRL     A,R3
   \                     ??zclGeneral_FindAllScenesForGroup_3:
   \   000026   701B         JNZ     ??zclGeneral_FindAllScenesForGroup_2
   2332                sceneList[cnt++] = pLoop->scene.ID;
   \   000028   8882         MOV     DPL,R0
   \   00002A   8983         MOV     DPH,R1
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   C0E0         PUSH    A
   \   000034   8E..         MOV     ?V0 + 0,R6
   \   000036   EC           MOV     A,R4
   \   000037   25..         ADD     A,?V0 + 0
   \   000039   F582         MOV     DPL,A
   \   00003B   ED           MOV     A,R5
   \   00003C   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   00003F   D0E0         POP     A
   \   000041   F0           MOVX    @DPTR,A
   \   000042   0E           INC     R6
   2333              pLoop = pLoop->next;
   \                     ??zclGeneral_FindAllScenesForGroup_2:
   \   000043   8882         MOV     DPL,R0
   \   000045   8983         MOV     DPH,R1
   2334            }
   \                     ??zclGeneral_FindAllScenesForGroup_0:
   \   000047   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   00004A   70C2         JNZ     ??zclGeneral_FindAllScenesForGroup_1
   2335            return ( cnt );
   \   00004C   EE           MOV     A,R6
   \   00004D   F9           MOV     R1,A
   \   00004E   02....       LJMP    ??Subroutine137_0 & 0xFFFF
   2336          }
   2337          #endif // ZCL_STANDALONE
   2338          
   2339          #if !defined ( ZCL_STANDALONE )
   2340          /*********************************************************************
   2341           * @fn      zclGeneral_RemoveScene
   2342           *
   2343           * @brief   Remove a scene with endpoint and sceneID
   2344           *
   2345           * @param   endpoint -
   2346           * @param   groupID - what group the scene belongs to
   2347           * @param   sceneID - ID to look for scene
   2348           *
   2349           * @return  TRUE if removed, FALSE if not found
   2350           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2351          uint8 zclGeneral_RemoveScene( uint8 endpoint, uint16 groupID, uint8 sceneID )
   \                     zclGeneral_RemoveScene:
   2352          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EC           MOV     A,R4
   \   000008   FF           MOV     R7,A
   2353            zclGenSceneItem_t *pLoop;
   2354            zclGenSceneItem_t *pPrev;
   2355          
   2356            // Look for end of list
   2357            pLoop = zclGenSceneTable;
   \   000009   90....       MOV     DPTR,#zclGenSceneTable
   \   00000C   12....       LCALL   ?Subroutine48 & 0xFFFF
   2358            pPrev = NULL;
   \                     ??CrossCallReturnLabel_71:
   \   00000F   7C00         MOV     R4,#0x0
   \   000011   7D00         MOV     R5,#0x0
   \   000013   800B         SJMP    ??CrossCallReturnLabel_72
   2359            while ( pLoop )
   2360            {
   2361              if ( pLoop->endpoint == endpoint
   2362                  && pLoop->scene.groupID == groupID && pLoop->scene.ID == sceneID )
   2363              {
   2364                if ( pPrev == NULL )
   2365                  zclGenSceneTable = pLoop->next;
   2366                else
   2367                  pPrev->next = pLoop->next;
   2368          
   2369                // Free the memory
   2370                zcl_mem_free( pLoop );
   2371          
   2372                // Update NV
   2373                zclGeneral_ScenesWriteNV();
   2374          
   2375                return ( TRUE );
   2376              }
   2377              pPrev = pLoop;
   \                     ??zclGeneral_RemoveScene_0:
   \   000015   E8           MOV     A,R0
   \   000016   FC           MOV     R4,A
   \   000017   E9           MOV     A,R1
   \   000018   FD           MOV     R5,A
   2378              pLoop = pLoop->next;
   \   000019   8882         MOV     DPL,R0
   \   00001B   8983         MOV     DPH,R1
   \   00001D   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000020   E8           MOV     A,R0
   \   000021   49           ORL     A,R1
   \   000022   604C         JZ      ??zclGeneral_RemoveScene_1
   \   000024   8882         MOV     DPL,R0
   \   000026   8983         MOV     DPH,R1
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6E           XRL     A,R6
   \   00002C   70E7         JNZ     ??zclGeneral_RemoveScene_0
   \   00002E   8882         MOV     DPL,R0
   \   000030   8983         MOV     DPH,R1
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   6A           XRL     A,R2
   \   000037   7003         JNZ     ??zclGeneral_RemoveScene_2
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   6B           XRL     A,R3
   \                     ??zclGeneral_RemoveScene_2:
   \   00003C   70D7         JNZ     ??zclGeneral_RemoveScene_0
   \   00003E   8882         MOV     DPL,R0
   \   000040   8983         MOV     DPH,R1
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   6F           XRL     A,R7
   \   000049   70CA         JNZ     ??zclGeneral_RemoveScene_0
   \   00004B   8882         MOV     DPL,R0
   \   00004D   8983         MOV     DPH,R1
   \   00004F   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000052   EC           MOV     A,R4
   \   000053   4D           ORL     A,R5
   \   000054   7005         JNZ     ??zclGeneral_RemoveScene_3
   \   000056   90....       MOV     DPTR,#zclGenSceneTable
   \   000059   8004         SJMP    ??zclGeneral_RemoveScene_4
   \                     ??zclGeneral_RemoveScene_3:
   \   00005B   8C82         MOV     DPL,R4
   \   00005D   8D83         MOV     DPH,R5
   \                     ??zclGeneral_RemoveScene_4:
   \   00005F   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000062                ; Setup parameters for call to function osal_mem_free
   \   000062   E8           MOV     A,R0
   \   000063   FA           MOV     R2,A
   \   000064   E9           MOV     A,R1
   \   000065   FB           MOV     R3,A
   \   000066   12....       LCALL   ??osal_mem_free?relay
   \   000069                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   000069   12....       LCALL   ??zclGeneral_ScenesWriteNV?relay
   \   00006C   7901         MOV     R1,#0x1
   \   00006E   8002         SJMP    ??zclGeneral_RemoveScene_5
   2379            }
   2380          
   2381            return ( FALSE );
   \                     ??zclGeneral_RemoveScene_1:
   \   000070   7900         MOV     R1,#0x0
   \                     ??zclGeneral_RemoveScene_5:
   \   000072   02....       LJMP    ?Subroutine8 & 0xFFFF
   2382          }
   2383          #endif // ZCL_STANDALONE
   2384          
   2385          #if !defined ( ZCL_STANDALONE )
   2386          /*********************************************************************
   2387           * @fn      zclGeneral_RemoveAllScenes
   2388           *
   2389           * @brief   Remove all scenes with endpoint and group Id
   2390           *
   2391           * @param   endpoint -
   2392           * @param   groupID - ID to look for group
   2393           *
   2394           * @return  none
   2395           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2396          void zclGeneral_RemoveAllScenes( uint8 endpoint, uint16 groupID )
   \                     zclGeneral_RemoveAllScenes:
   2397          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 4,R1
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   2398            zclGenSceneItem_t *pLoop;
   2399            zclGenSceneItem_t *pPrev;
   2400            zclGenSceneItem_t *pNext;
   2401          
   2402            // Look for end of list
   2403            pLoop = zclGenSceneTable;
   \   00000B   90....       MOV     DPTR,#zclGenSceneTable
   \   00000E   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   2404            pPrev = NULL;
   \                     ??CrossCallReturnLabel_213:
   \   000011   7E00         MOV     R6,#0x0
   \   000013   7F00         MOV     R7,#0x0
   \   000015   8015         SJMP    ??zclGeneral_RemoveAllScenes_0
   2405            while ( pLoop )
   2406            {
   2407              if ( pLoop->endpoint == endpoint && pLoop->scene.groupID == groupID )
   2408              {
   2409                if ( pPrev == NULL )
   2410                  zclGenSceneTable = pLoop->next;
   2411                else
   2412                  pPrev->next = pLoop->next;
   \                     ??zclGeneral_RemoveAllScenes_1:
   \   000017   8E82         MOV     DPL,R6
   \   000019   8F83         MOV     DPH,R7
   \                     ??zclGeneral_RemoveAllScenes_2:
   \   00001B   12....       LCALL   ?Subroutine63 & 0xFFFF
   2413                pNext = pLoop->next;
   \                     ??CrossCallReturnLabel_303:
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 2,A
   \   000021   A3           INC     DPTR
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 3,A
   2414          
   2415                // Free the memory
   2416                zcl_mem_free( pLoop );
   \   000025                ; Setup parameters for call to function osal_mem_free
   \   000025   12....       LCALL   ??osal_mem_free?relay
   2417                pLoop = pNext;
   \   000028   AA..         MOV     R2,?V0 + 2
   \   00002A   AB..         MOV     R3,?V0 + 3
   \                     ??zclGeneral_RemoveAllScenes_0:
   \   00002C   EA           MOV     A,R2
   \   00002D   4B           ORL     A,R3
   \   00002E   603A         JZ      ??zclGeneral_RemoveAllScenes_3
   \   000030   8A82         MOV     DPL,R2
   \   000032   8B83         MOV     DPH,R3
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   65..         XRL     A,?V0 + 4
   \   000039   7022         JNZ     ??zclGeneral_RemoveAllScenes_4
   \   00003B   8A82         MOV     DPL,R2
   \   00003D   8B83         MOV     DPH,R3
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   65..         XRL     A,?V0 + 0
   \   000045   7004         JNZ     ??zclGeneral_RemoveAllScenes_5
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   65..         XRL     A,?V0 + 1
   \                     ??zclGeneral_RemoveAllScenes_5:
   \   00004B   7010         JNZ     ??zclGeneral_RemoveAllScenes_4
   \   00004D   8A82         MOV     DPL,R2
   \   00004F   8B83         MOV     DPH,R3
   \   000051   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000054   EE           MOV     A,R6
   \   000055   4F           ORL     A,R7
   \   000056   70BF         JNZ     ??zclGeneral_RemoveAllScenes_1
   \   000058   90....       MOV     DPTR,#zclGenSceneTable
   \   00005B   80BE         SJMP    ??zclGeneral_RemoveAllScenes_2
   2418              }
   2419              else
   2420              {
   2421                pPrev = pLoop;
   \                     ??zclGeneral_RemoveAllScenes_4:
   \   00005D   EA           MOV     A,R2
   \   00005E   FE           MOV     R6,A
   \   00005F   EB           MOV     A,R3
   \   000060   FF           MOV     R7,A
   2422                pLoop = pLoop->next;
   \   000061   8A82         MOV     DPL,R2
   \   000063   8B83         MOV     DPH,R3
   \   000065   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   2423              }
   2424            }
   \                     ??CrossCallReturnLabel_214:
   \   000068   80C2         SJMP    ??zclGeneral_RemoveAllScenes_0
   2425          
   2426            // Update NV
   2427            zclGeneral_ScenesWriteNV();
   \                     ??zclGeneral_RemoveAllScenes_3:
   \   00006A                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   00006A   12....       LCALL   ??zclGeneral_ScenesWriteNV?relay
   2428          }
   \   00006D   02....       LJMP    ?Subroutine5 & 0xFFFF
   2429          #endif // ZCL_STANDALONE
   2430          
   2431          #if !defined ( ZCL_STANDALONE )
   2432          /*********************************************************************
   2433           * @fn      zclGeneral_CountScenes
   2434           *
   2435           * @brief   Count the number of scenes for an endpoint
   2436           *
   2437           * @param   endpoint -
   2438           *
   2439           * @return  number of scenes assigned to an endpoint
   2440           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2441          uint8 zclGeneral_CountScenes( uint8 endpoint )
   \                     zclGeneral_CountScenes:
   2442          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   F8           MOV     R0,A
   2443            zclGenSceneItem_t *pLoop;
   2444            uint8 cnt = 0;
   \   000006   7900         MOV     R1,#0x0
   2445          
   2446            // Look for end of list
   2447            pLoop = zclGenSceneTable;
   \   000008   90....       MOV     DPTR,#zclGenSceneTable
   \   00000B   800F         SJMP    ??zclGeneral_CountScenes_0
   2448            while ( pLoop )
   2449            {
   2450              if ( pLoop->endpoint == endpoint  )
   \                     ??zclGeneral_CountScenes_1:
   \   00000D   8A82         MOV     DPL,R2
   \   00000F   8B83         MOV     DPH,R3
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   68           XRL     A,R0
   \   000015   7001         JNZ     ??zclGeneral_CountScenes_2
   2451                cnt++;
   \   000017   09           INC     R1
   2452              pLoop = pLoop->next;
   \                     ??zclGeneral_CountScenes_2:
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   2453            }
   \                     ??zclGeneral_CountScenes_0:
   \   00001C   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   00001F   70EC         JNZ     ??zclGeneral_CountScenes_1
   2454            return ( cnt );
   \   000021   80..         SJMP    ?Subroutine7
   2455          }
   2456          #endif
   2457          
   2458          #if !defined ( ZCL_STANDALONE )
   2459          /*********************************************************************
   2460           * @fn      zclGeneral_CountAllScenes
   2461           *
   2462           * @brief   Count the total number of scenes
   2463           *
   2464           * @param   none
   2465           *
   2466           * @return  number of scenes
   2467           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2468          uint8 zclGeneral_CountAllScenes( void )
   \                     zclGeneral_CountAllScenes:
   2469          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2470            zclGenSceneItem_t *pLoop;
   2471            uint8 cnt = 0;
   \   000004   7900         MOV     R1,#0x0
   2472          
   2473            // Look for end of list
   2474            pLoop = zclGenSceneTable;
   \   000006   90....       MOV     DPTR,#zclGenSceneTable
   \   000009   8001         SJMP    ??zclGeneral_CountAllScenes_0
   2475            while ( pLoop )
   2476            {
   2477              cnt++;
   \                     ??zclGeneral_CountAllScenes_1:
   \   00000B   09           INC     R1
   2478              pLoop = pLoop->next;
   2479            }
   \                     ??zclGeneral_CountAllScenes_0:
   \   00000C   12....       LCALL   ??Subroutine115_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   E582         MOV     A,DPL
   \   000015   4583         ORL     A,DPH
   \   000017   70F2         JNZ     ??zclGeneral_CountAllScenes_1
   2480            return ( cnt );
   \   000019                REQUIRE ?Subroutine7
   \   000019                ; // Fall through to label ?Subroutine7
   2481          }
   2482          #endif // ZCL_STANDALONE
   2483          
   2484          /*********************************************************************
   2485           * @fn      zclGeneral_ReadSceneCountCB
   2486           *
   2487           * @brief   Read the number of scenes currently in the device's
   2488           *          scene table (i.e., the Scene Count attribute).
   2489           *
   2490           *          Note: This function gets called only when the pointer
   2491           *                'dataPtr' to the Scene Count attribute value is
   2492           *                NULL in the attribute database registered with
   2493           *                the ZCL.
   2494           *
   2495           * @param   clusterId - cluster that attribute belongs to
   2496           * @param   attrId - attribute to be read or written
   2497           * @param   oper - ZCL_OPER_LEN, ZCL_OPER_READ, or ZCL_OPER_WRITE
   2498           * @param   pValue - pointer to attribute value
   2499           * @param   pLen - pointer to length of attribute value read
   2500           *
   2501           * @return  status
   2502           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2503          ZStatus_t zclGeneral_ReadSceneCountCB( uint16 clusterId, uint16 attrId,
   \                     zclGeneral_ReadSceneCountCB:
   2504                                                 uint8 oper, uint8 *pValue, uint16 *pLen )
   2505          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 3,R1
   \   000007   740C         MOV     A,#0xc
   \   000009   12....       LCALL   ?XSTACK_DISP0_8
   \   00000C   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   00000F   88..         MOV     ?V0 + 0,R0
   \   000011   89..         MOV     ?V0 + 1,R1
   2506            ZStatus_t status = ZCL_STATUS_SUCCESS;
   \   000013   75..00       MOV     ?V0 + 2,#0x0
   \   000016   740E         MOV     A,#0xe
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine45 & 0xFFFF
   2507          
   2508            // This callback function should only be called for the Scene Count attribute
   2509            switch ( oper )
   \                     ??CrossCallReturnLabel_60:
   \   00001E   E5..         MOV     A,?V0 + 3
   \   000020   6012         JZ      ??zclGeneral_ReadSceneCountCB_0
   \   000022   14           DEC     A
   \   000023   701B         JNZ     ??zclGeneral_ReadSceneCountCB_1
   2510            {
   2511              case ZCL_OPER_LEN:
   2512                *pLen = 1; // uint8
   2513                break;
   2514          
   2515              case ZCL_OPER_READ:
   2516                *pValue = zclGeneral_CountAllScenes();
   \   000025                ; Setup parameters for call to function zclGeneral_CountAllScenes
   \   000025   12....       LCALL   ??zclGeneral_CountAllScenes?relay
   \   000028   E9           MOV     A,R1
   \   000029   85..82       MOV     DPL,?V0 + 0
   \   00002C   85..83       MOV     DPH,?V0 + 1
   \   00002F   F0           MOVX    @DPTR,A
   2517          
   2518                if ( pLen != NULL )
   \   000030   EE           MOV     A,R6
   \   000031   4F           ORL     A,R7
   \   000032   600F         JZ      ??zclGeneral_ReadSceneCountCB_2
   2519                {
   2520                  *pLen = 1;
   \                     ??zclGeneral_ReadSceneCountCB_0:
   \   000034   8E82         MOV     DPL,R6
   \   000036   8F83         MOV     DPH,R7
   \   000038   7401         MOV     A,#0x1
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   E4           CLR     A
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   8003         SJMP    ??zclGeneral_ReadSceneCountCB_2
   2521                }
   2522                break;
   2523          
   2524              case ZCL_OPER_WRITE:
   2525                // Fall through
   2526          
   2527              default:
   2528                status = ZCL_STATUS_SOFTWARE_FAILURE; // should never get here!
   \                     ??zclGeneral_ReadSceneCountCB_1:
   \   000040   75..C1       MOV     ?V0 + 2,#-0x3f
   2529                break;
   2530            }
   2531          
   2532            return ( status );
   \                     ??zclGeneral_ReadSceneCountCB_2:
   \   000043   A9..         MOV     R1,?V0 + 2
   \   000045   02....       LJMP    ??Subroutine109_0 & 0xFFFF
   2533          }
   2534          
   2535          /*********************************************************************
   2536           * @fn      zclGeneral_ProcessInScenesServer
   2537           *
   2538           * @brief   Process in the received Scenes Command.
   2539           *
   2540           * @param   pInMsg - pointer to the incoming message
   2541           *
   2542           * @return  ZStatus_t
   2543           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   000003                REQUIRE ??Subroutine116_0
   \   000003                ; // Fall through to label ??Subroutine116_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine116_0:
   \   000000   FB           MOV     R3,A
   \   000001                REQUIRE ??Subroutine117_0
   \   000001                ; // Fall through to label ??Subroutine117_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine117_0:
   \   000000   85..82       MOV     DPL,?V0 + 6
   \   000003   85..83       MOV     DPH,?V0 + 7
   \   000006                REQUIRE ??Subroutine118_0
   \   000006                ; // Fall through to label ??Subroutine118_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine122_0
   \   000004                ; // Fall through to label ??Subroutine122_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2544          static ZStatus_t zclGeneral_ProcessInScenesServer( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInScenesServer:
   2545                                                             zclGeneral_AppCallbacks_t *pCBs )
   2546          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 63
   \   000005   74C1         MOV     A,#-0x3f
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 6,R2
   \   00000C   8B..         MOV     ?V0 + 7,R3
   \   00000E   8C..         MOV     ?V0 + 10,R4
   \   000010   8D..         MOV     ?V0 + 11,R5
   2547            zclGeneral_Scene_t scene;
   2548            zclGeneral_Scene_t *pScene;
   2549            uint8 *pData = pInMsg->pData;
   \   000012   EA           MOV     A,R2
   \   000013   2408         ADD     A,#0x8
   \   000015   F5..         MOV     ?V0 + 2,A
   \   000017   EB           MOV     A,R3
   \   000018   12....       LCALL   ?Subroutine94 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   00001B   12....       LCALL   ?Subroutine32 & 0xFFFF
   2550            uint8 nameLen;
   2551            uint8 status;
   2552            uint8 sceneCnt = 0;
   \                     ??CrossCallReturnLabel_41:
   \   00001E   75..00       MOV     ?V0 + 8,#0x0
   2553            uint8 *sceneList = NULL;
   \   000021   75..00       MOV     ?V0 + 12,#0x0
   \   000024   75..00       MOV     ?V0 + 13,#0x0
   2554            uint8 sendRsp = TRUE;
   2555            uint8 nameSupport = FALSE;
   \   000027   7401         MOV     A,#0x1
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E4           CLR     A
   \   00002D   F0           MOVX    @DPTR,A
   2556            ZStatus_t stat = ZSuccess;
   \   00002E   FE           MOV     R6,A
   2557          
   2558            zcl_memset( (uint8*)&scene, 0, sizeof( zclGeneral_Scene_t ) );
   \   00002F                ; Setup parameters for call to function osal_memset
   \   00002F   7C37         MOV     R4,#0x37
   \   000031   FD           MOV     R5,A
   \   000032   F9           MOV     R1,A
   \   000033   7408         MOV     A,#0x8
   \   000035   12....       LCALL   ?XSTACK_DISP0_8
   \   000038   AA82         MOV     R2,DPL
   \   00003A   AB83         MOV     R3,DPH
   \   00003C   12....       LCALL   ??osal_memset?relay
   2559          
   2560            scene.groupID = BUILD_UINT16( pData[0], pData[1] );
   \   00003F   85..82       MOV     DPL,?V0 + 0
   \   000042   85..83       MOV     DPH,?V0 + 1
   \   000045   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000048   7408         MOV     A,#0x8
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   12....       LCALL   ?Subroutine54 & 0xFFFF
   2561            pData += 2;   // Move past group ID
   2562            scene.ID = *pData++;
   \                     ??CrossCallReturnLabel_84:
   \   000050   85..82       MOV     DPL,?V0 + 0
   \   000053   F583         MOV     DPH,A
   \   000055   E0           MOVX    A,@DPTR
   \   000056   FC           MOV     R4,A
   \   000057   740A         MOV     A,#0xa
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   EC           MOV     A,R4
   \   00005D   F0           MOVX    @DPTR,A
   \   00005E   85..82       MOV     DPL,?V0 + 0
   \   000061   85..83       MOV     DPH,?V0 + 1
   \   000064   A3           INC     DPTR
   \   000065   8582..       MOV     ?V0 + 0,DPL
   \   000068   8583..       MOV     ?V0 + 1,DPH
   \   00006B   E5..         MOV     A,?V0 + 6
   \   00006D   2407         ADD     A,#0x7
   \   00006F   F5..         MOV     ?V0 + 14,A
   \   000071   E5..         MOV     A,?V0 + 7
   \   000073   3400         ADDC    A,#0x0
   \   000075   F5..         MOV     ?V0 + 15,A
   \   000077   85..82       MOV     DPL,?V0 + 14
   \   00007A   F583         MOV     DPH,A
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   6037         JZ      ??zclGeneral_ProcessInScenesServer_0
   \   00007F   14           DEC     A
   \   000080   7003         JNZ     $+5
   \   000082   02....       LJMP    ??zclGeneral_ProcessInScenesServer_1 & 0xFFFF
   \   000085   14           DEC     A
   \   000086   7003         JNZ     $+5
   \   000088   02....       LJMP    ??zclGeneral_ProcessInScenesServer_2 & 0xFFFF
   \   00008B   14           DEC     A
   \   00008C   7003         JNZ     $+5
   \   00008E   02....       LJMP    ??zclGeneral_ProcessInScenesServer_3 & 0xFFFF
   \   000091   14           DEC     A
   \   000092   7003         JNZ     $+5
   \   000094   02....       LJMP    ??zclGeneral_ProcessInScenesServer_4 & 0xFFFF
   \   000097   14           DEC     A
   \   000098   7003         JNZ     $+5
   \   00009A   02....       LJMP    ??zclGeneral_ProcessInScenesServer_5 & 0xFFFF
   \   00009D   14           DEC     A
   \   00009E   7003         JNZ     $+5
   \   0000A0   02....       LJMP    ??zclGeneral_ProcessInScenesServer_6 & 0xFFFF
   \   0000A3   24C6         ADD     A,#-0x3a
   \   0000A5   600F         JZ      ??zclGeneral_ProcessInScenesServer_0
   \   0000A7   14           DEC     A
   \   0000A8   7003         JNZ     $+5
   \   0000AA   02....       LJMP    ??zclGeneral_ProcessInScenesServer_1 & 0xFFFF
   \   0000AD   14           DEC     A
   \   0000AE   7003         JNZ     $+5
   \   0000B0   02....       LJMP    ??zclGeneral_ProcessInScenesServer_7 & 0xFFFF
   \   0000B3   02....       LJMP    ??zclGeneral_ProcessInScenesServer_8 & 0xFFFF
   2563          
   2564            switch ( pInMsg->hdr.commandID )
   2565            {
   2566              case COMMAND_SCENE_ADD:
   2567          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2568              case COMMAND_SCENE_ENHANCED_ADD:
   2569          #endif // ZCL_LIGHT_LINK_ENHANCE
   2570                // Parse the rest of the incoming message
   2571                scene.transTime = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclGeneral_ProcessInScenesServer_0:
   \   0000B6   85..82       MOV     DPL,?V0 + 0
   \   0000B9   85..83       MOV     DPH,?V0 + 1
   \   0000BC   12....       LCALL   ??Subroutine113_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   0000BF   740B         MOV     A,#0xb
   \   0000C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C4   12....       LCALL   ?Subroutine54 & 0xFFFF
   2572                pData += 2;
   2573          
   2574                if ( pInMsg->hdr.commandID == COMMAND_SCENE_ENHANCED_ADD )
   \                     ??CrossCallReturnLabel_85:
   \   0000C7   85..82       MOV     DPL,?V0 + 14
   \   0000CA   85..83       MOV     DPH,?V0 + 15
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   6440         XRL     A,#0x40
   \   0000D0   702D         JNZ     ??CrossCallReturnLabel_260
   2575                {
   2576                  // Received transition time is in 1/10 second
   2577                  scene.transTime100ms = scene.transTime % 10;
   \   0000D2   740B         MOV     A,#0xb
   \   0000D4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   F8           MOV     R0,A
   \   0000D9   7A0A         MOV     R2,#0xa
   \   0000DB   7B00         MOV     R3,#0x0
   \   0000DD   12....       LCALL   ?US_DIV_MOD
   \   0000E0   740D         MOV     A,#0xd
   \   0000E2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E5   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   2578                  scene.transTime /= 10;
   \                     ??CrossCallReturnLabel_187:
   \   0000E8   740B         MOV     A,#0xb
   \   0000EA   12....       LCALL   ?XSTACK_DISP0_8
   \   0000ED   12....       LCALL   ?Subroutine48 & 0xFFFF
   2579                }
   \                     ??CrossCallReturnLabel_75:
   \   0000F0   7A0A         MOV     R2,#0xa
   \   0000F2   7B00         MOV     R3,#0x0
   \   0000F4   12....       LCALL   ?US_DIV_MOD
   \   0000F7   740B         MOV     A,#0xb
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   12....       LCALL   ?Subroutine64 & 0xFFFF
   2580          
   2581                nameLen= *pData++; // Name length
   \                     ??CrossCallReturnLabel_260:
   \   0000FF   85..82       MOV     DPL,?V0 + 0
   \   000102   85..83       MOV     DPH,?V0 + 1
   \   000105   E0           MOVX    A,@DPTR
   \   000106   FE           MOV     R6,A
   \   000107   A3           INC     DPTR
   \   000108   8582..       MOV     ?V0 + 0,DPL
   \   00010B   8583..       MOV     ?V0 + 1,DPH
   2582          
   2583                // Retrieve Name Support attribute
   2584                zcl_ReadAttrData( pInMsg->msg->endPoint, ZCL_CLUSTER_ID_GEN_SCENES,
   2585                                  ATTRID_SCENES_NAME_SUPPORT, &nameSupport, NULL );
   \   00010E                ; Setup parameters for call to function zcl_ReadAttrData
   \   00010E   E4           CLR     A
   \   00010F   F5..         MOV     ?V0 + 4,A
   \   000111   F5..         MOV     ?V0 + 5,A
   \   000113   78..         MOV     R0,#?V0 + 4
   \   000115   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000118   7403         MOV     A,#0x3
   \   00011A   12....       LCALL   ?XSTACK_DISP0_8
   \   00011D   8582..       MOV     ?V0 + 4,DPL
   \   000120   8583..       MOV     ?V0 + 5,DPH
   \   000123   78..         MOV     R0,#?V0 + 4
   \   000125   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000128   7C04         MOV     R4,#0x4
   \   00012A   7D00         MOV     R5,#0x0
   \   00012C   7A05         MOV     R2,#0x5
   \   00012E   7B00         MOV     R3,#0x0
   \   000130   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000133   12....       LCALL   ??zcl_ReadAttrData?relay
   \   000136   7404         MOV     A,#0x4
   \   000138   12....       LCALL   ?DEALLOC_XSTACK8
   2586          
   2587                if ( nameSupport )
   \   00013B   7401         MOV     A,#0x1
   \   00013D   12....       LCALL   ?XSTACK_DISP0_8
   \   000140   E0           MOVX    A,@DPTR
   \   000141   6034         JZ      ??zclGeneral_ProcessInScenesServer_9
   2588                {
   2589                  if ( nameLen > (ZCL_GEN_SCENE_NAME_LEN-1) )
   \   000143   EE           MOV     A,R6
   \   000144   C3           CLR     C
   \   000145   9410         SUBB    A,#0x10
   \   000147   4002         JC      ??zclGeneral_ProcessInScenesServer_10
   2590                    nameLen = (ZCL_GEN_SCENE_NAME_LEN-1);
   \   000149   7E0F         MOV     R6,#0xf
   2591                  scene.name[0] = nameLen;
   \                     ??zclGeneral_ProcessInScenesServer_10:
   \   00014B   740F         MOV     A,#0xf
   \   00014D   12....       LCALL   ?XSTACK_DISP0_8
   \   000150   EE           MOV     A,R6
   \   000151   F0           MOVX    @DPTR,A
   2592                  zcl_memcpy( &(scene.name[1]), pData, nameLen );
   \   000152                ; Setup parameters for call to function osal_memcpy
   \   000152   85....       MOV     ?V0 + 8,?V0 + 0
   \   000155   85....       MOV     ?V0 + 9,?V0 + 1
   \   000158   75..00       MOV     ?V0 + 10,#0x0
   \   00015B   78..         MOV     R0,#?V0 + 8
   \   00015D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000160   8E..         MOV     ?V0 + 4,R6
   \   000162   AC..         MOV     R4,?V0 + 4
   \   000164   7D00         MOV     R5,#0x0
   \   000166   7413         MOV     A,#0x13
   \   000168   12....       LCALL   ?XSTACK_DISP0_8
   \   00016B   AA82         MOV     R2,DPL
   \   00016D   AB83         MOV     R3,DPH
   \   00016F   12....       LCALL   ??osal_memcpy?relay
   \   000172   7403         MOV     A,#0x3
   \   000174   12....       LCALL   ?DEALLOC_XSTACK8
   2593                }
   2594          
   2595                pData += nameLen; // move past name, use original length
   \                     ??zclGeneral_ProcessInScenesServer_9:
   \   000177   8E..         MOV     ?V0 + 4,R6
   \   000179   E5..         MOV     A,?V0 + 0
   \   00017B   25..         ADD     A,?V0 + 4
   \   00017D   12....       LCALL   ?Subroutine72 & 0xFFFF
   2596          
   2597                scene.extLen = pInMsg->pDataLen - ( (uint16)( pData - pInMsg->pData ) );
   \                     ??CrossCallReturnLabel_116:
   \   000180   F8           MOV     R0,A
   \   000181   A9..         MOV     R1,?V0 + 0
   \   000183   85..82       MOV     DPL,?V0 + 6
   \   000186   85..83       MOV     DPH,?V0 + 7
   \   000189   A3           INC     DPTR
   \   00018A   A3           INC     DPTR
   \   00018B   A3           INC     DPTR
   \   00018C   A3           INC     DPTR
   \   00018D   A3           INC     DPTR
   \   00018E   A3           INC     DPTR
   \   00018F   A3           INC     DPTR
   \   000190   A3           INC     DPTR
   \   000191   A3           INC     DPTR
   \   000192   A3           INC     DPTR
   \   000193   E0           MOVX    A,@DPTR
   \   000194   C3           CLR     C
   \   000195   99           SUBB    A,R1
   \   000196   28           ADD     A,R0
   \   000197   C0E0         PUSH    A
   \   000199   741F         MOV     A,#0x1f
   \   00019B   12....       LCALL   ?XSTACK_DISP0_8
   \   00019E   D0E0         POP     A
   \   0001A0   F0           MOVX    @DPTR,A
   2598                if ( scene.extLen > 0 )
   \   0001A1   602A         JZ      ??zclGeneral_ProcessInScenesServer_11
   2599                {
   2600                  // Copy the extention field(s)
   2601                  if ( scene.extLen > ZCL_GEN_SCENE_EXT_LEN )
   \   0001A3   C3           CLR     C
   \   0001A4   9420         SUBB    A,#0x20
   \   0001A6   4003         JC      ??zclGeneral_ProcessInScenesServer_12
   2602                  {
   2603                    scene.extLen = ZCL_GEN_SCENE_EXT_LEN;
   \   0001A8   741F         MOV     A,#0x1f
   \   0001AA   F0           MOVX    @DPTR,A
   2604                  }
   2605                  zcl_memcpy( scene.extField, pData, scene.extLen );
   \                     ??zclGeneral_ProcessInScenesServer_12:
   \   0001AB                ; Setup parameters for call to function osal_memcpy
   \   0001AB   75..00       MOV     ?V0 + 2,#0x0
   \   0001AE   78..         MOV     R0,#?V0 + 0
   \   0001B0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001B3   7422         MOV     A,#0x22
   \   0001B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B8   E0           MOVX    A,@DPTR
   \   0001B9   FC           MOV     R4,A
   \   0001BA   7D00         MOV     R5,#0x0
   \   0001BC   7423         MOV     A,#0x23
   \   0001BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C1   AA82         MOV     R2,DPL
   \   0001C3   AB83         MOV     R3,DPH
   \   0001C5   12....       LCALL   ??osal_memcpy?relay
   \   0001C8   7403         MOV     A,#0x3
   \   0001CA   12....       LCALL   ?DEALLOC_XSTACK8
   2606                }
   2607          
   2608                if ( scene.groupID == 0x0000 ||
   2609                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   \                     ??zclGeneral_ProcessInScenesServer_11:
   \   0001CD   7408         MOV     A,#0x8
   \   0001CF   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D2   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   0001D5   6015         JZ      ??zclGeneral_ProcessInScenesServer_13
   \   0001D7                ; Setup parameters for call to function aps_FindGroup
   \   0001D7   7408         MOV     A,#0x8
   \   0001D9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001DC   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   0001DF   12....       LCALL   ??aps_FindGroup?relay
   \   0001E2   8B..         MOV     ?V0 + 1,R3
   \   0001E4   EA           MOV     A,R2
   \   0001E5   45..         ORL     A,?V0 + 1
   \   0001E7   7003         JNZ     $+5
   \   0001E9   02....       LJMP    ??zclGeneral_ProcessInScenesServer_14 & 0xFFFF
   2610                {
   2611                  // Either the Scene doesn't belong to a Group (Group ID = 0x0000) or it
   2612                  // does and the corresponding Group exits
   2613                  pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   \                     ??zclGeneral_ProcessInScenesServer_13:
   \   0001EC                ; Setup parameters for call to function zclGeneral_FindScene
   \   0001EC   740A         MOV     A,#0xa
   \   0001EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F1   E0           MOVX    A,@DPTR
   \   0001F2   FC           MOV     R4,A
   \   0001F3   7408         MOV     A,#0x8
   \   0001F5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001F8   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   0001FB   12....       LCALL   ??zclGeneral_FindScene?relay
   \   0001FE   8A..         MOV     ?V0 + 4,R2
   \   000200   8B..         MOV     ?V0 + 5,R3
   2614                  if ( pScene || ( zclGeneral_CountAllScenes() < ZCL_GEN_MAX_SCENES ) )
   \   000202   EA           MOV     A,R2
   \   000203   45..         ORL     A,?V0 + 5
   \   000205   700C         JNZ     ??zclGeneral_ProcessInScenesServer_15
   \   000207                ; Setup parameters for call to function zclGeneral_CountAllScenes
   \   000207   12....       LCALL   ??zclGeneral_CountAllScenes?relay
   \   00020A   E9           MOV     A,R1
   \   00020B   C3           CLR     C
   \   00020C   9410         SUBB    A,#0x10
   \   00020E   4003         JC      $+5
   \   000210   02....       LJMP    ??zclGeneral_ProcessInScenesServer_16 & 0xFFFF
   2615                  {
   2616                    status = ZCL_STATUS_SUCCESS;
   \                     ??zclGeneral_ProcessInScenesServer_15:
   \   000213   75..00       MOV     ?V0 + 0,#0x0
   2617                    if ( pScene != NULL )
   \   000216   E5..         MOV     A,?V0 + 4
   \   000218   45..         ORL     A,?V0 + 5
   \   00021A   7003         JNZ     $+5
   \   00021C   02....       LJMP    ??zclGeneral_ProcessInScenesServer_17 & 0xFFFF
   2618                    {
   2619                      // The Scene already exists so update it
   2620                      pScene->transTime = scene.transTime;
   \   00021F   740B         MOV     A,#0xb
   \   000221   12....       LCALL   ?XSTACK_DISP0_8
   \   000224   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000227   85..82       MOV     DPL,?V0 + 4
   \   00022A   85..83       MOV     DPH,?V0 + 5
   \   00022D   A3           INC     DPTR
   \   00022E   A3           INC     DPTR
   \   00022F   A3           INC     DPTR
   \   000230   12....       LCALL   ?Subroutine64 & 0xFFFF
   2621                      zcl_memcpy( pScene->name, scene.name, ZCL_GEN_SCENE_NAME_LEN );
   \                     ??CrossCallReturnLabel_261:
   \   000233                ; Setup parameters for call to function osal_memcpy
   \   000233   740F         MOV     A,#0xf
   \   000235   12....       LCALL   ?XSTACK_DISP0_8
   \   000238   A982         MOV     R1,DPL
   \   00023A   AA83         MOV     R2,DPH
   \   00023C   89..         MOV     ?V0 + 8,R1
   \   00023E   8A..         MOV     ?V0 + 9,R2
   \   000240   75..00       MOV     ?V0 + 10,#0x0
   \   000243   78..         MOV     R0,#?V0 + 8
   \   000245   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000248   7C10         MOV     R4,#0x10
   \   00024A   7D00         MOV     R5,#0x0
   \   00024C   E5..         MOV     A,?V0 + 4
   \   00024E   2407         ADD     A,#0x7
   \   000250   FA           MOV     R2,A
   \   000251   E5..         MOV     A,?V0 + 5
   \   000253   3400         ADDC    A,#0x0
   \   000255   FB           MOV     R3,A
   \   000256   12....       LCALL   ??osal_memcpy?relay
   \   000259   7403         MOV     A,#0x3
   \   00025B   12....       LCALL   ?DEALLOC_XSTACK8
   2622          
   2623                      // Use the new extention field(s)
   2624                      zcl_memcpy( pScene->extField, scene.extField, scene.extLen );
   \   00025E                ; Setup parameters for call to function osal_memcpy
   \   00025E   7420         MOV     A,#0x20
   \   000260   12....       LCALL   ?XSTACK_DISP0_8
   \   000263   A982         MOV     R1,DPL
   \   000265   AA83         MOV     R2,DPH
   \   000267   89..         MOV     ?V0 + 8,R1
   \   000269   8A..         MOV     ?V0 + 9,R2
   \   00026B   78..         MOV     R0,#?V0 + 8
   \   00026D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000270   7422         MOV     A,#0x22
   \   000272   12....       LCALL   ?XSTACK_DISP0_8
   \   000275   E0           MOVX    A,@DPTR
   \   000276   FC           MOV     R4,A
   \   000277   7D00         MOV     R5,#0x0
   \   000279   E5..         MOV     A,?V0 + 4
   \   00027B   2418         ADD     A,#0x18
   \   00027D   FA           MOV     R2,A
   \   00027E   E5..         MOV     A,?V0 + 5
   \   000280   3400         ADDC    A,#0x0
   \   000282   FB           MOV     R3,A
   \   000283   12....       LCALL   ??osal_memcpy?relay
   \   000286   7403         MOV     A,#0x3
   \   000288   12....       LCALL   ?DEALLOC_XSTACK8
   2625                      pScene->extLen = scene.extLen;
   \   00028B   741F         MOV     A,#0x1f
   \   00028D   12....       LCALL   ?XSTACK_DISP0_8
   \   000290   E0           MOVX    A,@DPTR
   \   000291   C0E0         PUSH    A
   \   000293   E5..         MOV     A,?V0 + 4
   \   000295   2417         ADD     A,#0x17
   \   000297   F582         MOV     DPL,A
   \   000299   E5..         MOV     A,?V0 + 5
   \   00029B   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   00029E   D0E0         POP     A
   \   0002A0   F0           MOVX    @DPTR,A
   2626          
   2627                      // Save Scenes
   2628                      zclGeneral_ScenesSave();
   \   0002A1                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   0002A1   12....       LCALL   ??zclGeneral_ScenesWriteNV?relay
   2629                    }
   \   0002A4   8019         SJMP    ??zclGeneral_ProcessInScenesServer_18
   2630                    else
   2631                    {
   2632                      // The Scene doesn't exist so add it
   2633                      zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
   \                     ??zclGeneral_ProcessInScenesServer_17:
   \   0002A6                ; Setup parameters for call to function zclGeneral_AddScene
   \   0002A6   7408         MOV     A,#0x8
   \   0002A8   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AB   AA82         MOV     R2,DPL
   \   0002AD   AB83         MOV     R3,DPH
   \   0002AF   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   2634                    }
   2635                  }
   \                     ??CrossCallReturnLabel_228:
   \   0002B2   12....       LCALL   ??zclGeneral_AddScene?relay
   \   0002B5   8008         SJMP    ??zclGeneral_ProcessInScenesServer_18
   2636                  else
   2637                  {
   2638                    status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
   \                     ??zclGeneral_ProcessInScenesServer_16:
   \   0002B7   75..89       MOV     ?V0 + 0,#-0x77
   \   0002BA   8003         SJMP    ??zclGeneral_ProcessInScenesServer_18
   2639                  }
   2640                }
   2641                else
   2642                {
   2643                  status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   \                     ??zclGeneral_ProcessInScenesServer_14:
   \   0002BC   75..85       MOV     ?V0 + 0,#-0x7b
   2644                }
   2645          
   2646                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_18:
   \   0002BF   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   0002C2   6003         JZ      $+5
   \   0002C4   02....       LJMP    ??zclGeneral_ProcessInScenesServer_19 & 0xFFFF
   \   0002C7   8882         MOV     DPL,R0
   \   0002C9   8983         MOV     DPH,R1
   \   0002CB   A3           INC     DPTR
   \   0002CC   A3           INC     DPTR
   \   0002CD   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_311:
   \   0002D0   6003         JZ      $+5
   \   0002D2   02....       LJMP    ??zclGeneral_ProcessInScenesServer_19 & 0xFFFF
   2647                {
   2648                  if ( pInMsg->hdr.commandID == COMMAND_SCENE_ADD )
   \   0002D5   E8           MOV     A,R0
   \   0002D6   2414         ADD     A,#0x14
   \   0002D8   FA           MOV     R2,A
   \   0002D9   E9           MOV     A,R1
   \   0002DA   3400         ADDC    A,#0x0
   \   0002DC   FB           MOV     R3,A
   \   0002DD   EA           MOV     A,R2
   \   0002DE   FE           MOV     R6,A
   \   0002DF   EB           MOV     A,R3
   \   0002E0   FF           MOV     R7,A
   \   0002E1   E8           MOV     A,R0
   \   0002E2   2406         ADD     A,#0x6
   \   0002E4   FA           MOV     R2,A
   \   0002E5   E9           MOV     A,R1
   \   0002E6   3400         ADDC    A,#0x0
   \   0002E8   FB           MOV     R3,A
   \   0002E9   740A         MOV     A,#0xa
   \   0002EB   12....       LCALL   ?XSTACK_DISP0_8
   \   0002EE   E0           MOVX    A,@DPTR
   \   0002EF   F9           MOV     R1,A
   \   0002F0   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   0002F3   7026         JNZ     ??zclGeneral_ProcessInScenesServer_20
   2649                  {
   2650                    zclGeneral_SendSceneAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2651                                                    status, scene.groupID, scene.ID,
   2652                                                    true, pInMsg->hdr.transSeqNum );
   \   0002F5                ; Setup parameters for call to function zclGeneral_SendSceneResponse
   \   0002F5   E8           MOV     A,R0
   \   0002F6   F5..         MOV     ?V0 + 1,A
   \   0002F8   78..         MOV     R0,#?V0 + 1
   \   0002FA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002FD   75..01       MOV     ?V0 + 1,#0x1
   \   000300   78..         MOV     R0,#?V0 + 1
   \   000302   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000305   E9           MOV     A,R1
   \   000306   F5..         MOV     ?V0 + 1,A
   \   000308   78..         MOV     R0,#?V0 + 1
   \   00030A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00030D   740B         MOV     A,#0xb
   \   00030F   12....       LCALL   ?XSTACK_DISP0_8
   \   000312   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000315   AD..         MOV     R5,?V0 + 0
   \   000317   7C00         MOV     R4,#0x0
   \   000319   8024         SJMP    ??zclGeneral_ProcessInScenesServer_21
   2653                  }
   2654          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2655                  else // COMMAND_SCENE_ENHANCED_ADD
   2656                  {
   2657                    zclGeneral_SendSceneEnhancedAddResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2658                                                            status, scene.groupID, scene.ID,
   2659                                                            true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInScenesServer_20:
   \   00031B                ; Setup parameters for call to function zclGeneral_SendSceneResponse
   \   00031B   E8           MOV     A,R0
   \   00031C   F5..         MOV     ?V0 + 1,A
   \   00031E   78..         MOV     R0,#?V0 + 1
   \   000320   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000323   75..01       MOV     ?V0 + 1,#0x1
   \   000326   78..         MOV     R0,#?V0 + 1
   \   000328   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00032B   E9           MOV     A,R1
   \   00032C   F5..         MOV     ?V0 + 1,A
   \   00032E   78..         MOV     R0,#?V0 + 1
   \   000330   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000333   740B         MOV     A,#0xb
   \   000335   12....       LCALL   ?XSTACK_DISP0_8
   \   000338   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00033B   AD..         MOV     R5,?V0 + 0
   \   00033D   7C40         MOV     R4,#0x40
   \                     ??zclGeneral_ProcessInScenesServer_21:
   \   00033F   8E82         MOV     DPL,R6
   \   000341   8F83         MOV     DPH,R7
   \   000343   02....       LJMP    ??CrossCallReturnLabel_320 & 0xFFFF
   2660                  }
   2661          #endif // ZCL_LIGHT_LINK_ENHANCE
   2662                }
   2663                stat = ZCL_STATUS_CMD_HAS_RSP;
   2664          
   2665                break;
   2666          
   2667              case COMMAND_SCENE_VIEW:
   2668          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2669              case COMMAND_SCENE_ENHANCED_VIEW:
   2670          #endif // ZCL_LIGHT_LINK_ENHANCE
   2671                pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   \                     ??zclGeneral_ProcessInScenesServer_1:
   \   000346                ; Setup parameters for call to function zclGeneral_FindScene
   \   000346   7408         MOV     A,#0x8
   \   000348   12....       LCALL   ?XSTACK_DISP0_8
   \   00034B   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   00034E   12....       LCALL   ??zclGeneral_FindScene?relay
   \   000351   8A..         MOV     ?V0 + 4,R2
   \   000353   8B..         MOV     ?V0 + 5,R3
   2672                if ( pScene != NULL )
   \   000355   EA           MOV     A,R2
   \   000356   45..         ORL     A,?V0 + 5
   \   000358   6004         JZ      ??zclGeneral_ProcessInScenesServer_22
   2673                {
   2674                  status = ZCL_STATUS_SUCCESS;
   \   00035A   8E..         MOV     ?V0 + 0,R6
   \   00035C   802F         SJMP    ??zclGeneral_ProcessInScenesServer_23
   2675                }
   2676                else
   2677                {
   2678                  // Scene not found
   2679                  if ( scene.groupID != 0x0000 &&
   2680                       aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) == NULL )
   \                     ??zclGeneral_ProcessInScenesServer_22:
   \   00035E   7408         MOV     A,#0x8
   \   000360   12....       LCALL   ?XSTACK_DISP0_8
   \   000363   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   000366   6017         JZ      ??zclGeneral_ProcessInScenesServer_24
   \   000368                ; Setup parameters for call to function aps_FindGroup
   \   000368   7408         MOV     A,#0x8
   \   00036A   12....       LCALL   ?XSTACK_DISP0_8
   \   00036D   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_241:
   \   000370   12....       LCALL   ??aps_FindGroup?relay
   \   000373   8B..         MOV     ?V0 + 1,R3
   \   000375   EA           MOV     A,R2
   \   000376   45..         ORL     A,?V0 + 1
   \   000378   7005         JNZ     ??zclGeneral_ProcessInScenesServer_24
   2681                  {
   2682                    status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   \   00037A   75..85       MOV     ?V0 + 0,#-0x7b
   \   00037D   8003         SJMP    ??zclGeneral_ProcessInScenesServer_25
   2683                  }
   2684                  else
   2685                  {
   2686                    status = ZCL_STATUS_NOT_FOUND;
   \                     ??zclGeneral_ProcessInScenesServer_24:
   \   00037F   75..8B       MOV     ?V0 + 0,#-0x75
   2687                  }
   2688                  pScene = &scene;
   \                     ??zclGeneral_ProcessInScenesServer_25:
   \   000382   7408         MOV     A,#0x8
   \   000384   12....       LCALL   ?XSTACK_DISP0_8
   \   000387   8582..       MOV     ?V0 + 4,DPL
   \   00038A   8583..       MOV     ?V0 + 5,DPH
   2689                }
   2690          
   2691                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_23:
   \   00038D   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000390   6003         JZ      $+5
   \   000392   02....       LJMP    ??zclGeneral_ProcessInScenesServer_19 & 0xFFFF
   \   000395   8882         MOV     DPL,R0
   \   000397   8983         MOV     DPH,R1
   \   000399   A3           INC     DPTR
   \   00039A   A3           INC     DPTR
   \   00039B   12....       LCALL   ??Subroutine126_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_312:
   \   00039E   6003         JZ      $+5
   \   0003A0   02....       LJMP    ??zclGeneral_ProcessInScenesServer_19 & 0xFFFF
   2692                {
   2693                  if ( pInMsg->hdr.commandID == COMMAND_SCENE_VIEW )
   \   0003A3   E8           MOV     A,R0
   \   0003A4   2414         ADD     A,#0x14
   \   0003A6   FE           MOV     R6,A
   \   0003A7   E9           MOV     A,R1
   \   0003A8   3400         ADDC    A,#0x0
   \   0003AA   FF           MOV     R7,A
   \   0003AB   E8           MOV     A,R0
   \   0003AC   2406         ADD     A,#0x6
   \   0003AE   FA           MOV     R2,A
   \   0003AF   E9           MOV     A,R1
   \   0003B0   3400         ADDC    A,#0x0
   \   0003B2   FB           MOV     R3,A
   \   0003B3   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0003B6   6401         XRL     A,#0x1
   \   0003B8   701B         JNZ     ??zclGeneral_ProcessInScenesServer_26
   2694                  {
   2695                    zclGeneral_SendSceneViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2696                                                     status, pScene, true, pInMsg->hdr.transSeqNum );
   \   0003BA                ; Setup parameters for call to function zclGeneral_SendSceneViewRsp
   \   0003BA   E8           MOV     A,R0
   \   0003BB   F5..         MOV     ?V0 + 1,A
   \   0003BD   78..         MOV     R0,#?V0 + 1
   \   0003BF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003C2   75..01       MOV     ?V0 + 1,#0x1
   \   0003C5   78..         MOV     R0,#?V0 + 1
   \   0003C7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003CA   78..         MOV     R0,#?V0 + 4
   \   0003CC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003CF   AD..         MOV     R5,?V0 + 0
   \   0003D1   7C01         MOV     R4,#0x1
   \   0003D3   8019         SJMP    ??zclGeneral_ProcessInScenesServer_27
   2697                  }
   2698          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2699                  else
   2700                  {
   2701                    zclGeneral_SendSceneEnhancedViewResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2702                                                             status, pScene, true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInScenesServer_26:
   \   0003D5                ; Setup parameters for call to function zclGeneral_SendSceneViewRsp
   \   0003D5   E8           MOV     A,R0
   \   0003D6   F5..         MOV     ?V0 + 1,A
   \   0003D8   78..         MOV     R0,#?V0 + 1
   \   0003DA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003DD   75..01       MOV     ?V0 + 1,#0x1
   \   0003E0   78..         MOV     R0,#?V0 + 1
   \   0003E2   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003E5   78..         MOV     R0,#?V0 + 4
   \   0003E7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003EA   AD..         MOV     R5,?V0 + 0
   \   0003EC   7C41         MOV     R4,#0x41
   \                     ??zclGeneral_ProcessInScenesServer_27:
   \   0003EE   8E82         MOV     DPL,R6
   \   0003F0   8F83         MOV     DPH,R7
   \   0003F2   E0           MOVX    A,@DPTR
   \   0003F3   F9           MOV     R1,A
   \   0003F4   12....       LCALL   ??zclGeneral_SendSceneViewRsp?relay
   \   0003F7   7404         MOV     A,#0x4
   \   0003F9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003FC   02....       LJMP    ??zclGeneral_ProcessInScenesServer_19 & 0xFFFF
   2703                  }
   2704          #endif // ZCL_LIGHT_LINK_ENHANCE
   2705                }
   2706                stat = ZCL_STATUS_CMD_HAS_RSP;
   2707                break;
   2708          
   2709              case COMMAND_SCENE_REMOVE:
   2710                if ( zclGeneral_RemoveScene( pInMsg->msg->endPoint, scene.groupID, scene.ID ) )
   \                     ??zclGeneral_ProcessInScenesServer_2:
   \   0003FF                ; Setup parameters for call to function zclGeneral_RemoveScene
   \   0003FF   7408         MOV     A,#0x8
   \   000401   12....       LCALL   ?XSTACK_DISP0_8
   \   000404   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_242:
   \   000407   12....       LCALL   ??zclGeneral_RemoveScene?relay
   \   00040A   E9           MOV     A,R1
   \   00040B   6004         JZ      ??zclGeneral_ProcessInScenesServer_28
   2711                {
   2712                  status = ZCL_STATUS_SUCCESS;
   \   00040D   8E..         MOV     ?V0 + 0,R6
   \   00040F   801A         SJMP    ??zclGeneral_ProcessInScenesServer_29
   2713                }
   2714                else
   2715                {
   2716                  // Scene not found
   2717                  if ( aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) == NULL )
   \                     ??zclGeneral_ProcessInScenesServer_28:
   \   000411                ; Setup parameters for call to function aps_FindGroup
   \   000411   7408         MOV     A,#0x8
   \   000413   12....       LCALL   ?XSTACK_DISP0_8
   \   000416   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000419   12....       LCALL   ??aps_FindGroup?relay
   \   00041C   8B..         MOV     ?V0 + 1,R3
   \   00041E   EA           MOV     A,R2
   \   00041F   45..         ORL     A,?V0 + 1
   \   000421   7005         JNZ     ??zclGeneral_ProcessInScenesServer_30
   2718                  {
   2719                    // The Group is not in the Group Table
   2720                    status = ZCL_STATUS_INVALID_FIELD;
   \   000423   75..85       MOV     ?V0 + 0,#-0x7b
   \   000426   8003         SJMP    ??zclGeneral_ProcessInScenesServer_29
   2721                  }
   2722                  else
   2723                  {
   2724                    status = ZCL_STATUS_NOT_FOUND;
   \                     ??zclGeneral_ProcessInScenesServer_30:
   \   000428   75..8B       MOV     ?V0 + 0,#-0x75
   2725                  }
   2726                }
   2727          
   2728                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_29:
   \   00042B   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00042E   6003         JZ      $+5
   \   000430   02....       LJMP    ??zclGeneral_ProcessInScenesServer_19 & 0xFFFF
   \   000433   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   000436   6003         JZ      $+5
   \   000438   02....       LJMP    ??zclGeneral_ProcessInScenesServer_19 & 0xFFFF
   2729                {
   2730                  // Addressed to this device (not to a group) - send a response back
   2731                  zclGeneral_SendSceneRemoveResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2732                                                      status, scene.groupID,
   2733                                                      scene.ID, true, pInMsg->hdr.transSeqNum );
   \   00043B                ; Setup parameters for call to function zclGeneral_SendSceneResponse
   \   00043B   12....       LCALL   ?Subroutine33 & 0xFFFF
   2734                }
   \                     ??CrossCallReturnLabel_348:
   \   00043E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000441   75..01       MOV     ?V0 + 1,#0x1
   \   000444   78..         MOV     R0,#?V0 + 1
   \   000446   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000449   740C         MOV     A,#0xc
   \   00044B   12....       LCALL   ?XSTACK_DISP0_8
   \   00044E   12....       LCALL   ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   000451   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000454   740B         MOV     A,#0xb
   \   000456   12....       LCALL   ?XSTACK_DISP0_8
   \   000459   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00045C   AD..         MOV     R5,?V0 + 0
   \   00045E   7C02         MOV     R4,#0x2
   \   000460   02....       LJMP    ??zclGeneral_ProcessInScenesServer_31 & 0xFFFF
   2735                stat = ZCL_STATUS_CMD_HAS_RSP;
   2736                break;
   2737          
   2738              case COMMAND_SCENE_REMOVE_ALL:
   2739                if ( scene.groupID == 0x0000 ||
   2740                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   \                     ??zclGeneral_ProcessInScenesServer_3:
   \   000463   7408         MOV     A,#0x8
   \   000465   12....       LCALL   ?XSTACK_DISP0_8
   \   000468   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   00046B   6012         JZ      ??zclGeneral_ProcessInScenesServer_32
   \   00046D                ; Setup parameters for call to function aps_FindGroup
   \   00046D   7408         MOV     A,#0x8
   \   00046F   12....       LCALL   ?XSTACK_DISP0_8
   \   000472   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000475   12....       LCALL   ??aps_FindGroup?relay
   \   000478   8B..         MOV     ?V0 + 1,R3
   \   00047A   EA           MOV     A,R2
   \   00047B   45..         ORL     A,?V0 + 1
   \   00047D   600F         JZ      ??zclGeneral_ProcessInScenesServer_33
   2741                {
   2742                  zclGeneral_RemoveAllScenes( pInMsg->msg->endPoint, scene.groupID );
   \                     ??zclGeneral_ProcessInScenesServer_32:
   \   00047F                ; Setup parameters for call to function zclGeneral_RemoveAllScenes
   \   00047F   7408         MOV     A,#0x8
   \   000481   12....       LCALL   ?XSTACK_DISP0_8
   \   000484   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000487   12....       LCALL   ??zclGeneral_RemoveAllScenes?relay
   2743                  status = ZCL_STATUS_SUCCESS;
   \   00048A   8E..         MOV     ?V0 + 0,R6
   \   00048C   8003         SJMP    ??zclGeneral_ProcessInScenesServer_34
   2744                }
   2745                else
   2746                {
   2747                  status = ZCL_STATUS_INVALID_FIELD;
   \                     ??zclGeneral_ProcessInScenesServer_33:
   \   00048E   75..85       MOV     ?V0 + 0,#-0x7b
   2748                }
   2749          
   2750                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_34:
   \   000491   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000494   6003         JZ      $+5
   \   000496   02....       LJMP    ??zclGeneral_ProcessInScenesServer_19 & 0xFFFF
   \   000499   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   00049C   6003         JZ      $+5
   \   00049E   02....       LJMP    ??zclGeneral_ProcessInScenesServer_19 & 0xFFFF
   2751                {
   2752                  // Addressed to this device (not to a group) - send a response back
   2753                  zclGeneral_SendSceneRemoveAllResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2754                                                         status, scene.groupID, true, pInMsg->hdr.transSeqNum );
   \   0004A1                ; Setup parameters for call to function zclGeneral_SendSceneResponse
   \   0004A1   12....       LCALL   ?Subroutine33 & 0xFFFF
   2755                }
   \                     ??CrossCallReturnLabel_349:
   \   0004A4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0004A7   75..01       MOV     ?V0 + 1,#0x1
   \   0004AA   78..         MOV     R0,#?V0 + 1
   \   0004AC   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0004AF   75..00       MOV     ?V0 + 1,#0x0
   \   0004B2   78..         MOV     R0,#?V0 + 1
   \   0004B4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0004B7   740B         MOV     A,#0xb
   \   0004B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0004BC   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0004BF   AD..         MOV     R5,?V0 + 0
   \   0004C1   7C03         MOV     R4,#0x3
   \   0004C3   02....       LJMP    ??zclGeneral_ProcessInScenesServer_31 & 0xFFFF
   2756                stat = ZCL_STATUS_CMD_HAS_RSP;
   2757                break;
   2758          
   2759              case COMMAND_SCENE_STORE:
   2760                if ( scene.groupID == 0x0000 ||
   2761                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   \                     ??zclGeneral_ProcessInScenesServer_4:
   \   0004C6   7408         MOV     A,#0x8
   \   0004C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0004CB   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   0004CE   6015         JZ      ??zclGeneral_ProcessInScenesServer_35
   \   0004D0                ; Setup parameters for call to function aps_FindGroup
   \   0004D0   7408         MOV     A,#0x8
   \   0004D2   12....       LCALL   ?XSTACK_DISP0_8
   \   0004D5   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   0004D8   12....       LCALL   ??aps_FindGroup?relay
   \   0004DB   8B..         MOV     ?V0 + 1,R3
   \   0004DD   EA           MOV     A,R2
   \   0004DE   45..         ORL     A,?V0 + 1
   \   0004E0   7003         JNZ     $+5
   \   0004E2   02....       LJMP    ??zclGeneral_ProcessInScenesServer_36 & 0xFFFF
   2762                {
   2763                  // Either the Scene doesn't belong to a Group (Group ID = 0x0000) or it
   2764                  // does and the corresponding Group exits
   2765                  pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   \                     ??zclGeneral_ProcessInScenesServer_35:
   \   0004E5                ; Setup parameters for call to function zclGeneral_FindScene
   \   0004E5   740A         MOV     A,#0xa
   \   0004E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0004EA   E0           MOVX    A,@DPTR
   \   0004EB   FC           MOV     R4,A
   \   0004EC   7408         MOV     A,#0x8
   \   0004EE   12....       LCALL   ?XSTACK_DISP0_8
   \   0004F1   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   0004F4   12....       LCALL   ??zclGeneral_FindScene?relay
   \   0004F7   8A..         MOV     ?V0 + 4,R2
   \   0004F9   8B..         MOV     ?V0 + 5,R3
   2766                  if ( pScene || ( zclGeneral_CountAllScenes() < ZCL_GEN_MAX_SCENES ) )
   \   0004FB   EA           MOV     A,R2
   \   0004FC   45..         ORL     A,?V0 + 5
   \   0004FE   7009         JNZ     ??zclGeneral_ProcessInScenesServer_37
   \   000500                ; Setup parameters for call to function zclGeneral_CountAllScenes
   \   000500   12....       LCALL   ??zclGeneral_CountAllScenes?relay
   \   000503   E9           MOV     A,R1
   \   000504   C3           CLR     C
   \   000505   9410         SUBB    A,#0x10
   \   000507   506F         JNC     ??zclGeneral_ProcessInScenesServer_38
   2767                  {
   2768                    uint8 sceneChanged = FALSE;
   2769          
   2770                    status = ZCL_STATUS_SUCCESS;
   \                     ??zclGeneral_ProcessInScenesServer_37:
   \   000509   8E..         MOV     ?V0 + 0,R6
   2771                    if ( pScene == NULL )
   \   00050B   E5..         MOV     A,?V0 + 4
   \   00050D   45..         ORL     A,?V0 + 5
   \   00050F   700B         JNZ     ??zclGeneral_ProcessInScenesServer_39
   2772                    {
   2773                      // Haven't been added yet
   2774                      pScene = &scene;
   \   000511   7408         MOV     A,#0x8
   \   000513   12....       LCALL   ?XSTACK_DISP0_8
   \   000516   8582..       MOV     ?V0 + 4,DPL
   \   000519   8583..       MOV     ?V0 + 5,DPH
   2775                    }
   2776          
   2777                    if ( pCBs->pfnSceneStoreReq )
   \                     ??zclGeneral_ProcessInScenesServer_39:
   \   00051C   E5..         MOV     A,?V0 + 10
   \   00051E   241A         ADD     A,#0x1a
   \   000520   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   000523   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_283:
   \   000526   6029         JZ      ??zclGeneral_ProcessInScenesServer_40
   2778                    {
   2779                      zclSceneReq_t req;
   2780          
   2781                      req.srcAddr = &(pInMsg->msg->srcAddr);
   \   000528   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   00052B   12....       LCALL   ?XSTACK_DISP0_8
   \   00052E   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   2782                      req.scene = pScene;
   \                     ??CrossCallReturnLabel_188:
   \   000531   7404         MOV     A,#0x4
   \   000533   12....       LCALL   ?XSTACK_DISP0_8
   \   000536   E5..         MOV     A,?V0 + 4
   \   000538   F0           MOVX    @DPTR,A
   \   000539   A3           INC     DPTR
   \   00053A   E5..         MOV     A,?V0 + 5
   \   00053C   F0           MOVX    @DPTR,A
   2783          
   2784                      // Get the latest Scene info
   2785                      if ( pCBs->pfnSceneStoreReq( &req ) )
   \   00053D                ; Setup parameters for indirect call
   \   00053D   7402         MOV     A,#0x2
   \   00053F   12....       LCALL   ?XSTACK_DISP0_8
   \   000542   AA82         MOV     R2,DPL
   \   000544   AB83         MOV     R3,DPH
   \   000546   8882         MOV     DPL,R0
   \   000548   8983         MOV     DPH,R1
   \   00054A   12....       LCALL   ?CALL_IND
   \   00054D   E9           MOV     A,R1
   \   00054E   6001         JZ      ??zclGeneral_ProcessInScenesServer_40
   2786                      {
   2787                        sceneChanged = TRUE;
   \   000550   0E           INC     R6
   2788                      }
   2789                    }
   2790          
   2791                    if ( pScene == &scene )
   \                     ??zclGeneral_ProcessInScenesServer_40:
   \   000551   7408         MOV     A,#0x8
   \   000553   12....       LCALL   ?XSTACK_DISP0_8
   \   000556   E582         MOV     A,DPL
   \   000558   65..         XRL     A,?V0 + 4
   \   00055A   7004         JNZ     ??zclGeneral_ProcessInScenesServer_41
   \   00055C   E583         MOV     A,DPH
   \   00055E   65..         XRL     A,?V0 + 5
   \                     ??zclGeneral_ProcessInScenesServer_41:
   \   000560   700C         JNZ     ??zclGeneral_ProcessInScenesServer_42
   2792                    {
   2793                      // The Scene doesn't exist so add it
   2794                      zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
   \   000562                ; Setup parameters for call to function zclGeneral_AddScene
   \   000562   AA82         MOV     R2,DPL
   \   000564   AB83         MOV     R3,DPH
   \   000566   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   2795                    }
   \                     ??CrossCallReturnLabel_229:
   \   000569   12....       LCALL   ??zclGeneral_AddScene?relay
   \   00056C   8012         SJMP    ??zclGeneral_ProcessInScenesServer_43
   2796                    else if ( sceneChanged )
   \                     ??zclGeneral_ProcessInScenesServer_42:
   \   00056E   EE           MOV     A,R6
   \   00056F   A2E0         MOV     C,0xE0 /* A   */.0
   \   000571   500D         JNC     ??zclGeneral_ProcessInScenesServer_43
   2797                    {
   2798                      // The Scene already exists so update only NV
   2799                      zclGeneral_ScenesSave();
   \   000573                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   000573   12....       LCALL   ??zclGeneral_ScenesWriteNV?relay
   2800                    }
   2801                  }
   \   000576   8008         SJMP    ??zclGeneral_ProcessInScenesServer_43
   2802                  else
   2803                  {
   2804                    status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
   \                     ??zclGeneral_ProcessInScenesServer_38:
   \   000578   75..89       MOV     ?V0 + 0,#-0x77
   \   00057B   8003         SJMP    ??zclGeneral_ProcessInScenesServer_43
   2805                  }
   2806                }
   2807                else
   2808                {
   2809                  status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   \                     ??zclGeneral_ProcessInScenesServer_36:
   \   00057D   75..85       MOV     ?V0 + 0,#-0x7b
   2810                }
   2811          
   2812                if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_43:
   \   000580   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000583   6003         JZ      $+5
   \   000585   02....       LJMP    ??zclGeneral_ProcessInScenesServer_19 & 0xFFFF
   \   000588   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   00058B   6003         JZ      $+5
   \   00058D   02....       LJMP    ??zclGeneral_ProcessInScenesServer_19 & 0xFFFF
   2813                {
   2814                  // Addressed to this device (not to a group) - send a response back
   2815                  zclGeneral_SendSceneStoreResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2816                                                     status, scene.groupID, scene.ID,
   2817                                                     true, pInMsg->hdr.transSeqNum );
   \   000590                ; Setup parameters for call to function zclGeneral_SendSceneResponse
   \   000590   12....       LCALL   ?Subroutine33 & 0xFFFF
   2818                }
   \                     ??CrossCallReturnLabel_350:
   \   000593   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000596   75..01       MOV     ?V0 + 1,#0x1
   \   000599   78..         MOV     R0,#?V0 + 1
   \   00059B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00059E   740C         MOV     A,#0xc
   \   0005A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0005A3   12....       LCALL   ??Subroutine131_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   0005A6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0005A9   740B         MOV     A,#0xb
   \   0005AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0005AE   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0005B1   AD..         MOV     R5,?V0 + 0
   \   0005B3   7C04         MOV     R4,#0x4
   \                     ??zclGeneral_ProcessInScenesServer_31:
   \   0005B5   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   0005B8   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   0005BB   E0           MOVX    A,@DPTR
   \   0005BC   F9           MOV     R1,A
   \   0005BD   12....       LCALL   ??zclGeneral_SendSceneResponse?relay
   \   0005C0   7405         MOV     A,#0x5
   \   0005C2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0005C5   02....       LJMP    ??zclGeneral_ProcessInScenesServer_19 & 0xFFFF
   2819                stat = ZCL_STATUS_CMD_HAS_RSP;
   2820                break;
   2821          
   2822              case COMMAND_SCENE_RECALL:
   2823                pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, scene.groupID, scene.ID );
   \                     ??zclGeneral_ProcessInScenesServer_5:
   \   0005C8                ; Setup parameters for call to function zclGeneral_FindScene
   \   0005C8   7408         MOV     A,#0x8
   \   0005CA   12....       LCALL   ?XSTACK_DISP0_8
   \   0005CD   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   0005D0   12....       LCALL   ??zclGeneral_FindScene?relay
   \   0005D3   8A..         MOV     ?V0 + 4,R2
   \   0005D5   8B..         MOV     ?V0 + 5,R3
   2824                if ( pScene && pCBs->pfnSceneRecallReq )
   \   0005D7   EA           MOV     A,R2
   \   0005D8   45..         ORL     A,?V0 + 5
   \   0005DA   7003         JNZ     $+5
   \   0005DC   02....       LJMP    ??zclGeneral_ProcessInScenesServer_44 & 0xFFFF
   \   0005DF   E5..         MOV     A,?V0 + 10
   \   0005E1   241C         ADD     A,#0x1c
   \   0005E3   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   0005E6   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_284:
   \   0005E9   7003         JNZ     $+5
   \   0005EB   02....       LJMP    ??zclGeneral_ProcessInScenesServer_44 & 0xFFFF
   2825                {
   2826                  zclSceneReq_t req;
   2827          
   2828                  req.srcAddr = &(pInMsg->msg->srcAddr);
   \   0005EE   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   0005F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0005F4   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   2829                  req.scene = pScene;
   \                     ??CrossCallReturnLabel_189:
   \   0005F7   7404         MOV     A,#0x4
   \   0005F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0005FC   E5..         MOV     A,?V0 + 4
   \   0005FE   F0           MOVX    @DPTR,A
   \   0005FF   A3           INC     DPTR
   \   000600   E5..         MOV     A,?V0 + 5
   \   000602   F0           MOVX    @DPTR,A
   2830          
   2831                  pCBs->pfnSceneRecallReq( &req );
   \   000603                ; Setup parameters for indirect call
   \   000603   7402         MOV     A,#0x2
   \   000605   12....       LCALL   ?XSTACK_DISP0_8
   \   000608   AA82         MOV     R2,DPL
   \   00060A   AB83         MOV     R3,DPH
   \   00060C   8882         MOV     DPL,R0
   \   00060E   8983         MOV     DPH,R1
   \   000610   12....       LCALL   ?CALL_IND
   \   000613   02....       LJMP    ??zclGeneral_ProcessInScenesServer_44 & 0xFFFF
   2832                }
   2833                // No response
   2834                break;
   2835          
   2836              case COMMAND_SCENE_GET_MEMBERSHIP:
   2837                // Find all the Scenes corresponding to the Group ID
   2838                if ( scene.groupID == 0x0000 ||
   2839                     aps_FindGroup( pInMsg->msg->endPoint, scene.groupID ) != NULL )
   \                     ??zclGeneral_ProcessInScenesServer_6:
   \   000616   7408         MOV     A,#0x8
   \   000618   12....       LCALL   ?XSTACK_DISP0_8
   \   00061B   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   00061E   6012         JZ      ??zclGeneral_ProcessInScenesServer_45
   \   000620                ; Setup parameters for call to function aps_FindGroup
   \   000620   7408         MOV     A,#0x8
   \   000622   12....       LCALL   ?XSTACK_DISP0_8
   \   000625   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   000628   12....       LCALL   ??aps_FindGroup?relay
   \   00062B   8B..         MOV     ?V0 + 1,R3
   \   00062D   EA           MOV     A,R2
   \   00062E   45..         ORL     A,?V0 + 1
   \   000630   603E         JZ      ??zclGeneral_ProcessInScenesServer_46
   2840                {
   2841                  // Allocate space for the scene list
   2842                  sceneList = zcl_mem_alloc( ZCL_GEN_MAX_SCENES );
   \                     ??zclGeneral_ProcessInScenesServer_45:
   \   000632                ; Setup parameters for call to function osal_mem_alloc
   \   000632   7A10         MOV     R2,#0x10
   \   000634   7B00         MOV     R3,#0x0
   \   000636   12....       LCALL   ??osal_mem_alloc?relay
   \   000639   8A..         MOV     ?V0 + 12,R2
   \   00063B   8B..         MOV     ?V0 + 13,R3
   2843                  if ( sceneList != NULL )
   \   00063D   EA           MOV     A,R2
   \   00063E   45..         ORL     A,?V0 + 13
   \   000640   6029         JZ      ??zclGeneral_ProcessInScenesServer_47
   2844                  {
   2845                    sceneCnt = zclGeneral_FindAllScenesForGroup( pInMsg->msg->endPoint,
   2846                                                                 scene.groupID, sceneList );
   \   000642                ; Setup parameters for call to function zclGeneral_FindAllScenesForGroup
   \   000642   AC..         MOV     R4,?V0 + 12
   \   000644   AD..         MOV     R5,?V0 + 13
   \   000646   7408         MOV     A,#0x8
   \   000648   12....       LCALL   ?XSTACK_DISP0_8
   \   00064B   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   00064E   12....       LCALL   ??zclGeneral_FindAllScenesForGroup?relay
   \   000651   E9           MOV     A,R1
   \   000652   F5..         MOV     ?V0 + 8,A
   2847                    status = ZCL_STATUS_SUCCESS;
   \   000654   8E..         MOV     ?V0 + 0,R6
   2848                    if ( ! UNICAST_MSG( pInMsg->msg ) )
   \   000656   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000659   7009         JNZ     ??zclGeneral_ProcessInScenesServer_48
   \   00065B   8882         MOV     DPL,R0
   \   00065D   8983         MOV     DPH,R1
   \   00065F   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000662   600F         JZ      ??zclGeneral_ProcessInScenesServer_49
   2849                    {
   2850                      // Addressed to the Group - ONLY send a response if an entry within the
   2851                      // Scene Table corresponds to the Group ID
   2852                      if ( sceneCnt == 0 )
   \                     ??zclGeneral_ProcessInScenesServer_48:
   \   000664   E5..         MOV     A,?V0 + 8
   \   000666   700B         JNZ     ??zclGeneral_ProcessInScenesServer_49
   \   000668   02....       LJMP    ??zclGeneral_ProcessInScenesServer_50 & 0xFFFF
   2853                      {
   2854                        sendRsp = FALSE;
   2855                      }
   2856                    }
   2857                  }
   2858                  else
   2859                  {
   2860                    // Couldn't allocate space for the scene list!
   2861                    status = ZCL_STATUS_INSUFFICIENT_SPACE;
   \                     ??zclGeneral_ProcessInScenesServer_47:
   \   00066B   75..89       MOV     ?V0 + 0,#-0x77
   \   00066E   8003         SJMP    ??zclGeneral_ProcessInScenesServer_49
   2862                  }
   2863                }
   2864                else
   2865                {
   2866                  // The Group is not in the Group Table - send a response back
   2867                  status = ZCL_STATUS_INVALID_FIELD;
   \                     ??zclGeneral_ProcessInScenesServer_46:
   \   000670   75..85       MOV     ?V0 + 0,#-0x7b
   2868                }
   \                     ??zclGeneral_ProcessInScenesServer_49:
   \   000673   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000676   6003         JZ      $+5
   \   000678   02....       LJMP    ??zclGeneral_ProcessInScenesServer_51 & 0xFFFF
   \   00067B   8882         MOV     DPL,R0
   \   00067D   8983         MOV     DPH,R1
   \   00067F   12....       LCALL   ??Subroutine122_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   000682   6003         JZ      $+5
   \   000684   02....       LJMP    ??zclGeneral_ProcessInScenesServer_51 & 0xFFFF
   2869          
   2870          #ifdef ZCL_LIGHT_LINK_ENHANCE //ZLL allows response to unicast only
   2871                if ( sendRsp && UNICAST_MSG( pInMsg->msg ) )
   2872          #else
   2873                if ( sendRsp )
   2874          #endif //ZCL_LIGHT_LINK_ENHANCE
   2875                {
   2876                  zclGeneral_SendSceneGetMembershipResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2877                                              status, zclGeneral_ScenesRemaingCapacity(), sceneCnt, sceneList,
   2878                                              scene.groupID, true, pInMsg->hdr.transSeqNum );
   \   000687                ; Setup parameters for call to function zclGeneral_CountAllScenes
   \   000687   12....       LCALL   ??zclGeneral_CountAllScenes?relay
   \   00068A   85..82       MOV     DPL,?V0 + 6
   \   00068D   85..83       MOV     DPH,?V0 + 7
   \   000690   12....       LCALL   ??Subroutine129_0 & 0xFFFF
   2879                }
   \                     ??CrossCallReturnLabel_336:
   \   000693                ; Setup parameters for call to function zclGeneral_SendSceneGetMembershipResponse
   \   000693   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   000696   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000699   75..01       MOV     ?V0 + 1,#0x1
   \   00069C   78..         MOV     R0,#?V0 + 1
   \   00069E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0006A1   740A         MOV     A,#0xa
   \   0006A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0006A6   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0006A9   78..         MOV     R0,#?V0 + 12
   \   0006AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0006AE   E5..         MOV     A,?V0 + 8
   \   0006B0   F5..         MOV     ?V0 + 1,A
   \   0006B2   78..         MOV     R0,#?V0 + 1
   \   0006B4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0006B7   7410         MOV     A,#0x10
   \   0006B9   C3           CLR     C
   \   0006BA   99           SUBB    A,R1
   \   0006BB   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   0006BE   12....       LCALL   ??zclGeneral_SendSceneGetMembershipResponse?rel
   \   0006C1   7407         MOV     A,#0x7
   \   0006C3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0006C6   02....       LJMP    ??zclGeneral_ProcessInScenesServer_51 & 0xFFFF
   2880          
   2881                if ( sceneList != NULL )
   2882                  zcl_mem_free( sceneList );
   2883          
   2884                stat = ZCL_STATUS_CMD_HAS_RSP;
   2885                break;
   2886          
   2887          #ifdef ZCL_LIGHT_LINK_ENHANCE
   2888              case COMMAND_SCENE_COPY:
   2889                {
   2890                  uint8 mode;
   2891                  uint16 groupIDFrom, groupIDTo;
   2892                  uint8 sceneIDFrom, sceneIDTo;
   2893          
   2894                  pData = pInMsg->pData; // different payload format
   \                     ??zclGeneral_ProcessInScenesServer_7:
   \   0006C9   85..82       MOV     DPL,?V0 + 2
   \   0006CC   85..83       MOV     DPH,?V0 + 3
   \   0006CF   E0           MOVX    A,@DPTR
   \   0006D0   F5..         MOV     ?V0 + 0,A
   \   0006D2   A3           INC     DPTR
   \   0006D3   E0           MOVX    A,@DPTR
   2895          
   2896                  mode = *pData++;
   \   0006D4   85..82       MOV     DPL,?V0 + 0
   \   0006D7   F583         MOV     DPH,A
   \   0006D9   E0           MOVX    A,@DPTR
   \   0006DA   F5..         MOV     ?V0 + 14,A
   \   0006DC   12....       LCALL   ?Subroutine35 & 0xFFFF
   2897                  groupIDFrom = BUILD_UINT16( pData[0], pData[1] ); // from group ID
   \                     ??CrossCallReturnLabel_337:
   \   0006DF   F5..         MOV     ?V0 + 2,A
   \   0006E1   E4           CLR     A
   \   0006E2   39           ADDC    A,R1
   \   0006E3   F5..         MOV     ?V0 + 3,A
   2898                  pData += 2;
   \   0006E5   12....       LCALL   ?Subroutine92 & 0xFFFF
   2899                  sceneIDFrom = *pData++; // from scene ID
   \                     ??CrossCallReturnLabel_144:
   \   0006E8   85..82       MOV     DPL,?V0 + 0
   \   0006EB   F583         MOV     DPH,A
   \   0006ED   E0           MOVX    A,@DPTR
   \   0006EE   F5..         MOV     ?V0 + 8,A
   \   0006F0   12....       LCALL   ?Subroutine35 & 0xFFFF
   2900                  groupIDTo = BUILD_UINT16( pData[0], pData[1] ); // to group ID
   \                     ??CrossCallReturnLabel_338:
   \   0006F3   FE           MOV     R6,A
   \   0006F4   E4           CLR     A
   \   0006F5   39           ADDC    A,R1
   \   0006F6   FF           MOV     R7,A
   2901                  pData += 2;
   2902                  if ( (mode & SCENE_COPY_MODE_ALL_BIT) == 0 )
   \   0006F7   E5..         MOV     A,?V0 + 14
   \   0006F9   A2E0         MOV     C,0xE0 /* A   */.0
   \   0006FB   400B         JC      ??CrossCallReturnLabel_140
   2903                  {
   2904                    sceneIDTo = *pData++; // to scene ID
   \   0006FD   85..82       MOV     DPL,?V0 + 0
   \   000700   85..83       MOV     DPH,?V0 + 1
   \   000703   A3           INC     DPTR
   \   000704   A3           INC     DPTR
   \   000705   12....       LCALL   ?Subroutine88 & 0xFFFF
   2905                  }
   2906          
   2907                  // Make sure the groups exist
   2908                  if ( ( aps_FindGroup( pInMsg->msg->endPoint, groupIDFrom ) != NULL ) &&
   2909                       ( aps_FindGroup( pInMsg->msg->endPoint, groupIDTo ) != NULL ) )
   \                     ??CrossCallReturnLabel_140:
   \   000708                ; Setup parameters for call to function aps_FindGroup
   \   000708   AA..         MOV     R2,?V0 + 2
   \   00070A   AB..         MOV     R3,?V0 + 3
   \   00070C   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   00070F   12....       LCALL   ??aps_FindGroup?relay
   \   000712   8B..         MOV     ?V0 + 1,R3
   \   000714   EA           MOV     A,R2
   \   000715   45..         ORL     A,?V0 + 1
   \   000717   7003         JNZ     $+5
   \   000719   02....       LJMP    ??zclGeneral_ProcessInScenesServer_52 & 0xFFFF
   \   00071C                ; Setup parameters for call to function aps_FindGroup
   \   00071C   EE           MOV     A,R6
   \   00071D   FA           MOV     R2,A
   \   00071E   EF           MOV     A,R7
   \   00071F   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000722   12....       LCALL   ??aps_FindGroup?relay
   \   000725   8B..         MOV     ?V0 + 1,R3
   \   000727   EA           MOV     A,R2
   \   000728   45..         ORL     A,?V0 + 1
   \   00072A   7003         JNZ     $+5
   \   00072C   02....       LJMP    ??zclGeneral_ProcessInScenesServer_52 & 0xFFFF
   2910                  {
   2911                    // Allocate space for the scene list
   2912                    sceneList = zcl_mem_alloc( (mode & SCENE_COPY_MODE_ALL_BIT) ? ZCL_GEN_MAX_SCENES : 1 );
   \   00072F   E5..         MOV     A,?V0 + 14
   \   000731   A2E0         MOV     C,0xE0 /* A   */.0
   \   000733   5004         JNC     ??zclGeneral_ProcessInScenesServer_53
   \   000735   7A10         MOV     R2,#0x10
   \   000737   8002         SJMP    ??zclGeneral_ProcessInScenesServer_54
   \                     ??zclGeneral_ProcessInScenesServer_53:
   \   000739   7A01         MOV     R2,#0x1
   \                     ??zclGeneral_ProcessInScenesServer_54:
   \   00073B   7B00         MOV     R3,#0x0
   \   00073D                ; Setup parameters for call to function osal_mem_alloc
   \   00073D   12....       LCALL   ??osal_mem_alloc?relay
   \   000740   8A..         MOV     ?V0 + 12,R2
   \   000742   8B..         MOV     ?V0 + 13,R3
   2913                    if ( sceneList == NULL )
   \   000744   EA           MOV     A,R2
   \   000745   45..         ORL     A,?V0 + 13
   \   000747   7003         JNZ     $+5
   \   000749   02....       LJMP    ??zclGeneral_ProcessInScenesServer_55 & 0xFFFF
   2914                    {
   2915                      status = ZCL_STATUS_INSUFFICIENT_SPACE; // Couldn't allocate space for the scene list!
   2916                    }
   2917                    else
   2918                    {
   2919                      status = ZCL_STATUS_SUCCESS;
   \   00074C   75..00       MOV     ?V0 + 0,#0x0
   \   00074F   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   000752   E5..         MOV     A,?V0 + 14
   \   000754   A2E0         MOV     C,0xE0 /* A   */.0
   \   000756   5010         JNC     ??zclGeneral_ProcessInScenesServer_56
   2920                      if ( mode & SCENE_COPY_MODE_ALL_BIT ) // Copy all scenes
   2921                      {
   2922                        sceneCnt = zclGeneral_FindAllScenesForGroup( pInMsg->msg->endPoint,
   2923                                                                     groupIDFrom, sceneList );
   \   000758                ; Setup parameters for call to function zclGeneral_FindAllScenesForGroup
   \   000758   AC..         MOV     R4,?V0 + 12
   \   00075A   AD..         MOV     R5,?V0 + 13
   \   00075C   AA..         MOV     R2,?V0 + 2
   \   00075E   AB..         MOV     R3,?V0 + 3
   \   000760   12....       LCALL   ??zclGeneral_FindAllScenesForGroup?relay
   \   000763   E9           MOV     A,R1
   \   000764   F5..         MOV     ?V0 + 8,A
   \   000766   8021         SJMP    ??zclGeneral_ProcessInScenesServer_57
   2924                      }
   2925                      else // Copy single scene
   2926                      {
   2927                        // Make sure the scene exists
   2928                        pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDFrom, sceneIDFrom );
   \                     ??zclGeneral_ProcessInScenesServer_56:
   \   000768                ; Setup parameters for call to function zclGeneral_FindScene
   \   000768   AC..         MOV     R4,?V0 + 8
   \   00076A   AA..         MOV     R2,?V0 + 2
   \   00076C   AB..         MOV     R3,?V0 + 3
   \   00076E   12....       LCALL   ??zclGeneral_FindScene?relay
   \   000771   8A..         MOV     ?V0 + 4,R2
   \   000773   8B..         MOV     ?V0 + 5,R3
   2929                        if ( pScene != NULL )
   \   000775   EA           MOV     A,R2
   \   000776   45..         ORL     A,?V0 + 5
   \   000778   7003         JNZ     $+5
   \   00077A   02....       LJMP    ??zclGeneral_ProcessInScenesServer_52 & 0xFFFF
   2930                        {
   2931                          sceneList[0] = sceneIDFrom;
   \   00077D   85..82       MOV     DPL,?V0 + 12
   \   000780   85..83       MOV     DPH,?V0 + 13
   \   000783   E5..         MOV     A,?V0 + 8
   \   000785   F0           MOVX    @DPTR,A
   2932                          sceneCnt = 1;
   \   000786   75..01       MOV     ?V0 + 8,#0x1
   2933                        }
   2934                        else
   2935                        {
   2936                          status = ZCL_STATUS_INVALID_FIELD; // Scene not found
   2937                        }
   2938                      }
   2939                    }
   2940          
   2941                    if ( status == ZCL_STATUS_SUCCESS )
   2942                    {
   2943                      uint8 numScenesToAdd = 0;
   \                     ??zclGeneral_ProcessInScenesServer_57:
   \   000789   75..00       MOV     ?V0 + 9,#0x0
   2944                      uint8 i;
   2945                      for ( i = 0; i < sceneCnt; i++ )
   \   00078C   75..00       MOV     ?V0 + 1,#0x0
   \   00078F   8024         SJMP    ??zclGeneral_ProcessInScenesServer_58
   2946                      {
   2947                        if ( zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDTo, sceneList[i] ) == NULL )
   \                     ??zclGeneral_ProcessInScenesServer_59:
   \   000791                ; Setup parameters for call to function zclGeneral_FindScene
   \   000791   85....       MOV     ?V0 + 10,?V0 + 1
   \   000794   E5..         MOV     A,?V0 + 12
   \   000796   25..         ADD     A,?V0 + 10
   \   000798   F582         MOV     DPL,A
   \   00079A   E5..         MOV     A,?V0 + 13
   \   00079C   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   00079F   E0           MOVX    A,@DPTR
   \   0007A0   FC           MOV     R4,A
   \   0007A1   EE           MOV     A,R6
   \   0007A2   FA           MOV     R2,A
   \   0007A3   EF           MOV     A,R7
   \   0007A4   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   0007A7   12....       LCALL   ??zclGeneral_FindScene?relay
   \   0007AA   8B..         MOV     ?V0 + 11,R3
   \   0007AC   EA           MOV     A,R2
   \   0007AD   45..         ORL     A,?V0 + 11
   \   0007AF   7002         JNZ     ??zclGeneral_ProcessInScenesServer_60
   2948                        {
   2949                          numScenesToAdd++;
   \   0007B1   05..         INC     ?V0 + 9
   2950                        }
   2951                      }
   \                     ??zclGeneral_ProcessInScenesServer_60:
   \   0007B3   05..         INC     ?V0 + 1
   \                     ??zclGeneral_ProcessInScenesServer_58:
   \   0007B5   E5..         MOV     A,?V0 + 1
   \   0007B7   C3           CLR     C
   \   0007B8   95..         SUBB    A,?V0 + 8
   \   0007BA   40D5         JC      ??zclGeneral_ProcessInScenesServer_59
   2952                      if ( zclGeneral_ScenesRemaingCapacity() >= numScenesToAdd )
   \   0007BC                ; Setup parameters for call to function zclGeneral_CountAllScenes
   \   0007BC   12....       LCALL   ??zclGeneral_CountAllScenes?relay
   \   0007BF   E9           MOV     A,R1
   \   0007C0   F8           MOV     R0,A
   \   0007C1   7410         MOV     A,#0x10
   \   0007C3   C3           CLR     C
   \   0007C4   98           SUBB    A,R0
   \   0007C5   F8           MOV     R0,A
   \   0007C6   95E0         SUBB    A,0xE0 /* A   */
   \   0007C8   F9           MOV     R1,A
   \   0007C9   85....       MOV     ?V0 + 10,?V0 + 9
   \   0007CC   C3           CLR     C
   \   0007CD   E8           MOV     A,R0
   \   0007CE   95..         SUBB    A,?V0 + 10
   \   0007D0   E9           MOV     A,R1
   \   0007D1   9400         SUBB    A,#0x0
   \   0007D3   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0007D5   65D0         XRL     A,PSW
   \   0007D7   33           RLC     A
   \   0007D8   5003         JNC     $+5
   \   0007DA   02....       LJMP    ??zclGeneral_ProcessInScenesServer_55 & 0xFFFF
   2953                      {
   2954                        // Copy the scenes
   2955                        for ( i = 0; i < sceneCnt; i++ )
   \   0007DD   75..00       MOV     ?V0 + 1,#0x0
   \   0007E0   8040         SJMP    ??zclGeneral_ProcessInScenesServer_61
   2956                        {
   2957                          // Ignore scene ID from and scene ID to fields
   2958                          pScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDFrom, sceneList[i] );
   2959                          if ( pScene != NULL )
   2960                          {
   2961                            zclGeneral_Scene_t *pToScene;
   2962                            scene = *pScene;
   2963                            scene.groupID = groupIDTo;
   2964                            scene.ID = ( (mode & SCENE_COPY_MODE_ALL_BIT) ? sceneList[i] : sceneIDTo );
   \                     ??zclGeneral_ProcessInScenesServer_62:
   \   0007E2   85..82       MOV     DPL,?XSP + 0
   \   0007E5   85..83       MOV     DPH,?XSP + 1
   \                     ??zclGeneral_ProcessInScenesServer_63:
   \   0007E8   E0           MOVX    A,@DPTR
   \   0007E9   C0E0         PUSH    A
   \   0007EB   740A         MOV     A,#0xa
   \   0007ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0007F0   D0E0         POP     A
   \   0007F2   F0           MOVX    @DPTR,A
   2965          
   2966                            pToScene = zclGeneral_FindScene( pInMsg->msg->endPoint, groupIDTo, scene.ID );
   2967                            if( pToScene != NULL )
   \   0007F3   F5..         MOV     ?V0 + 9,A
   \   0007F5                ; Setup parameters for call to function zclGeneral_FindScene
   \   0007F5   FC           MOV     R4,A
   \   0007F6   EE           MOV     A,R6
   \   0007F7   FA           MOV     R2,A
   \   0007F8   EF           MOV     A,R7
   \   0007F9   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   0007FC   12....       LCALL   ??zclGeneral_FindScene?relay
   \   0007FF   8B..         MOV     ?V0 + 11,R3
   \   000801   EA           MOV     A,R2
   \   000802   45..         ORL     A,?V0 + 11
   \   000804   600B         JZ      ??zclGeneral_ProcessInScenesServer_64
   2968                            {
   2969                              zclGeneral_RemoveScene( pInMsg->msg->endPoint, groupIDTo, scene.ID );
   \   000806                ; Setup parameters for call to function zclGeneral_RemoveScene
   \   000806   AC..         MOV     R4,?V0 + 9
   \   000808   EE           MOV     A,R6
   \   000809   FA           MOV     R2,A
   \   00080A   EF           MOV     A,R7
   \   00080B   12....       LCALL   ??Subroutine116_0 & 0xFFFF
   2970                            }
   \                     ??CrossCallReturnLabel_237:
   \   00080E   12....       LCALL   ??zclGeneral_RemoveScene?relay
   2971                            // Add the scene
   2972                            zclGeneral_AddScene( pInMsg->msg->endPoint, &scene );
   \                     ??zclGeneral_ProcessInScenesServer_64:
   \   000811                ; Setup parameters for call to function zclGeneral_AddScene
   \   000811   7408         MOV     A,#0x8
   \   000813   12....       LCALL   ?XSTACK_DISP0_8
   \   000816   AA82         MOV     R2,DPL
   \   000818   AB83         MOV     R3,DPH
   \   00081A   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   00081D   12....       LCALL   ??zclGeneral_AddScene?relay
   \                     ??zclGeneral_ProcessInScenesServer_65:
   \   000820   05..         INC     ?V0 + 1
   \                     ??zclGeneral_ProcessInScenesServer_61:
   \   000822   E5..         MOV     A,?V0 + 1
   \   000824   C3           CLR     C
   \   000825   95..         SUBB    A,?V0 + 8
   \   000827   506A         JNC     ??zclGeneral_ProcessInScenesServer_66
   \   000829   85....       MOV     ?V0 + 4,?V0 + 1
   \   00082C   E5..         MOV     A,?V0 + 12
   \   00082E   25..         ADD     A,?V0 + 4
   \   000830   F8           MOV     R0,A
   \   000831   E5..         MOV     A,?V0 + 13
   \   000833   3400         ADDC    A,#0x0
   \   000835   F9           MOV     R1,A
   \   000836   7406         MOV     A,#0x6
   \   000838   12....       LCALL   ?XSTACK_DISP0_8
   \   00083B   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_262:
   \   00083E                ; Setup parameters for call to function zclGeneral_FindScene
   \   00083E   7406         MOV     A,#0x6
   \   000840   12....       LCALL   ?XSTACK_DISP0_8
   \   000843   12....       LCALL   ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_371:
   \   000846   E0           MOVX    A,@DPTR
   \   000847   FC           MOV     R4,A
   \   000848   AA..         MOV     R2,?V0 + 2
   \   00084A   AB..         MOV     R3,?V0 + 3
   \   00084C   12....       LCALL   ??Subroutine117_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   00084F   12....       LCALL   ??zclGeneral_FindScene?relay
   \   000852   8A..         MOV     ?V0 + 4,R2
   \   000854   8B..         MOV     ?V0 + 5,R3
   \   000856   EA           MOV     A,R2
   \   000857   45..         ORL     A,?V0 + 5
   \   000859   60C5         JZ      ??zclGeneral_ProcessInScenesServer_65
   \   00085B   7408         MOV     A,#0x8
   \   00085D   12....       LCALL   ?XSTACK_DISP0_8
   \   000860   AC82         MOV     R4,DPL
   \   000862   AD83         MOV     R5,DPH
   \   000864   8B83         MOV     DPH,R3
   \   000866   8A82         MOV     DPL,R2
   \   000868   7437         MOV     A,#0x37
   \   00086A   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   \   00086D   7408         MOV     A,#0x8
   \   00086F   12....       LCALL   ?XSTACK_DISP0_8
   \   000872   EE           MOV     A,R6
   \   000873   F0           MOVX    @DPTR,A
   \   000874   A3           INC     DPTR
   \   000875   EF           MOV     A,R7
   \   000876   F0           MOVX    @DPTR,A
   \   000877   E5..         MOV     A,?V0 + 14
   \   000879   A2E0         MOV     C,0xE0 /* A   */.0
   \   00087B   4003         JC      $+5
   \   00087D   02....       LJMP    ??zclGeneral_ProcessInScenesServer_62 & 0xFFFF
   \   000880   7406         MOV     A,#0x6
   \   000882   12....       LCALL   ?XSTACK_DISP0_8
   \   000885   12....       LCALL   ??Subroutine139_0 & 0xFFFF
   2973                          }
   2974                        }
   2975                      }
   \                     ??CrossCallReturnLabel_372:
   \   000888   02....       LJMP    ??zclGeneral_ProcessInScenesServer_63 & 0xFFFF
   2976                      else
   2977                      {
   2978                        status = ZCL_STATUS_INSUFFICIENT_SPACE; // The Scene Table is full
   \                     ??zclGeneral_ProcessInScenesServer_55:
   \   00088B   75..89       MOV     ?V0 + 0,#-0x77
   \   00088E   8003         SJMP    ??zclGeneral_ProcessInScenesServer_66
   2979                      }
   2980                    }
   2981                  }
   2982                  else
   2983                  {
   2984                    status = ZCL_STATUS_INVALID_FIELD; // The Group is not in the Group Table
   \                     ??zclGeneral_ProcessInScenesServer_52:
   \   000890   75..85       MOV     ?V0 + 0,#-0x7b
   2985                  }
   2986          
   2987                  if ( UNICAST_MSG( pInMsg->msg ) )
   \                     ??zclGeneral_ProcessInScenesServer_66:
   \   000893   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000896   7041         JNZ     ??zclGeneral_ProcessInScenesServer_51
   \   000898   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   00089B   703C         JNZ     ??zclGeneral_ProcessInScenesServer_51
   2988                  {
   2989                    if ( pScene == NULL )
   \   00089D   E5..         MOV     A,?V0 + 4
   \   00089F   45..         ORL     A,?V0 + 5
   \   0008A1   700B         JNZ     ??zclGeneral_ProcessInScenesServer_67
   2990                    {
   2991                      pScene = &scene;
   \   0008A3   7408         MOV     A,#0x8
   \   0008A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0008A8   8582..       MOV     ?V0 + 4,DPL
   \   0008AB   8583..       MOV     ?V0 + 5,DPH
   2992                    }
   2993                    // Addressed to this device (not to a group) - send a response back
   2994                    zclGeneral_SendSceneCopyResponse( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   2995                                                      status, pScene->groupID, pScene->ID,
   2996                                                      true, pInMsg->hdr.transSeqNum );
   \                     ??zclGeneral_ProcessInScenesServer_67:
   \   0008AE                ; Setup parameters for call to function zclGeneral_SendSceneCopyResponse
   \   0008AE   12....       LCALL   ?Subroutine33 & 0xFFFF
   2997                  }
   \                     ??CrossCallReturnLabel_352:
   \   0008B1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0008B4   75..01       MOV     ?V0 + 1,#0x1
   \   0008B7   78..         MOV     R0,#?V0 + 1
   \   0008B9   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0008BC   85..82       MOV     DPL,?V0 + 4
   \   0008BF   85..83       MOV     DPH,?V0 + 5
   \   0008C2   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0008C5   85..82       MOV     DPL,?V0 + 4
   \   0008C8   85..83       MOV     DPH,?V0 + 5
   \   0008CB   A3           INC     DPTR
   \   0008CC   A3           INC     DPTR
   \   0008CD   E0           MOVX    A,@DPTR
   \   0008CE   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_327:
   \   0008D1   12....       LCALL   ??zclGeneral_SendSceneCopyResponse?relay
   \   0008D4   7404         MOV     A,#0x4
   \   0008D6   12....       LCALL   ?DEALLOC_XSTACK8
   2998          
   2999                  if ( sceneList != NULL )
   \                     ??zclGeneral_ProcessInScenesServer_51:
   \   0008D9   E5..         MOV     A,?V0 + 12
   \   0008DB   45..         ORL     A,?V0 + 13
   \   0008DD   6007         JZ      ??zclGeneral_ProcessInScenesServer_19
   3000                  {
   3001                    zcl_mem_free( sceneList );
   \                     ??zclGeneral_ProcessInScenesServer_50:
   \   0008DF                ; Setup parameters for call to function osal_mem_free
   \   0008DF   AA..         MOV     R2,?V0 + 12
   \   0008E1   AB..         MOV     R3,?V0 + 13
   \   0008E3   12....       LCALL   ??osal_mem_free?relay
   3002                  }
   3003                }
   3004          
   3005                stat = ZCL_STATUS_CMD_HAS_RSP;
   \                     ??zclGeneral_ProcessInScenesServer_19:
   \   0008E6   7EFF         MOV     R6,#-0x1
   3006                break;
   \   0008E8   8001         SJMP    ??zclGeneral_ProcessInScenesServer_44
   3007          #endif // ZCL_LIGHT_LINK_ENHANCE
   3008          
   3009              default:
   3010                stat = ZFailure;
   \                     ??zclGeneral_ProcessInScenesServer_8:
   \   0008EA   0E           INC     R6
   3011              break;
   3012            }
   3013          
   3014            return ( stat );
   \                     ??zclGeneral_ProcessInScenesServer_44:
   \   0008EB   EE           MOV     A,R6
   \   0008EC   F9           MOV     R1,A
   \   0008ED   743F         MOV     A,#0x3f
   \   0008EF   02....       LJMP    ??Subroutine132_0 & 0xFFFF
   3015          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   F582         MOV     DPL,A
   \   000002   E5..         MOV     A,?V0 + 11
   \   000004                REQUIRE ??Subroutine127_0
   \   000004                ; // Fall through to label ??Subroutine127_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   FD           MOV     R5,A
   \   000001   AC..         MOV     R4,?V0 + 0
   \   000003                REQUIRE ??Subroutine128_0
   \   000003                ; // Fall through to label ??Subroutine128_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000008   F5..         MOV     ?V0 + 1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2402         ADD     A,#0x2
   \   000004   F5..         MOV     ?V0 + 0,A
   \   000006   E5..         MOV     A,?V0 + 1
   \   000008   3400         ADDC    A,#0x0
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   85..82       MOV     DPL,?V0 + 6
   \   000003   85..83       MOV     DPH,?V0 + 7
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   F8           MOV     R0,A
   \   00000E   85..82       MOV     DPL,?V0 + 14
   \   000011   85..83       MOV     DPH,?V0 + 15
   \   000014   E0           MOVX    A,@DPTR
   \   000015   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   85..82       MOV     DPL,?V0 + 6
   \   000003   85..83       MOV     DPH,?V0 + 7
   \   000006   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000009   7402         MOV     A,#0x2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   A3           INC     DPTR
   \   000001   8582..       MOV     ?V0 + 0,DPL
   \   000004   8583..       MOV     ?V0 + 1,DPH
   \   000007                REQUIRE ??Subroutine130_0
   \   000007                ; // Fall through to label ??Subroutine130_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   85..82       MOV     DPL,?V0 + 6
   \   000003   85..83       MOV     DPH,?V0 + 7
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C                REQUIRE ??Subroutine131_0
   \   00000C                ; // Fall through to label ??Subroutine131_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine131_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 1,A
   \   000003   78..         MOV     R0,#?V0 + 1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   85..82       MOV     DPL,?V0 + 6
   \   000003   85..83       MOV     DPH,?V0 + 7
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FE           MOV     R6,A
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   FF           MOV     R7,A
   \   00000B   EE           MOV     A,R6
   \   00000C   2415         ADD     A,#0x15
   \   00000E   F582         MOV     DPL,A
   \   000010   EF           MOV     A,R7
   \   000011   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   85..82       MOV     DPL,?V0 + 6
   \   000003   85..83       MOV     DPH,?V0 + 7
   \   000006   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_300:
   \   000009   2415         ADD     A,#0x15
   \   00000B   F582         MOV     DPL,A
   \   00000D   E9           MOV     A,R1
   \   00000E   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   F5..         MOV     ?V0 + 0,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004   3400         ADDC    A,#0x0
   \   000006   F5..         MOV     ?V0 + 1,A
   \   000008   85..82       MOV     DPL,?V0 + 2
   \   00000B   85..83       MOV     DPH,?V0 + 3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2406         ADD     A,#0x6
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   FB           MOV     R3,A
   \   000009   22           RET
   3016          
   3017          /*********************************************************************
   3018           * @fn      zclGeneral_ProcessInScenesClient
   3019           *
   3020           * @brief   Process in the received Scenes Command.
   3021           *
   3022           * @param   pInMsg - pointer to the incoming message
   3023           *
   3024           * @return  ZStatus_t
   3025           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3026          static ZStatus_t zclGeneral_ProcessInScenesClient( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInScenesClient:
   3027                                                             zclGeneral_AppCallbacks_t *pCBs )
   3028          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 65
   \   000005   74BF         MOV     A,#-0x41
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 8,R2
   \   00000C   8B..         MOV     ?V0 + 9,R3
   \   00000E   12....       LCALL   ?Subroutine40 & 0xFFFF
   3029            zclGeneral_Scene_t scene;
   3030            uint8 *pData = pInMsg->pData;
   3031            uint8 nameLen;
   3032            zclSceneRsp_t rsp;
   3033            uint8 i;
   3034            ZStatus_t stat = ZSuccess;
   \                     ??CrossCallReturnLabel_333:
   \   000011   75..00       MOV     ?V0 + 10,#0x0
   3035          
   3036            zcl_memset( (uint8*)&scene, 0, sizeof( zclGeneral_Scene_t ) );
   \   000014                ; Setup parameters for call to function osal_memset
   \   000014   7C37         MOV     R4,#0x37
   \   000016   7D00         MOV     R5,#0x0
   \   000018   7900         MOV     R1,#0x0
   \   00001A   740A         MOV     A,#0xa
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   AA82         MOV     R2,DPL
   \   000021   AB83         MOV     R3,DPH
   \   000023   12....       LCALL   ??osal_memset?relay
   3037            zcl_memset( (uint8*)&rsp, 0, sizeof( zclSceneRsp_t ) );
   \   000026                ; Setup parameters for call to function osal_memset
   \   000026   7C0A         MOV     R4,#0xa
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7900         MOV     R1,#0x0
   \   00002C   85..82       MOV     DPL,?XSP + 0
   \   00002F   85..83       MOV     DPH,?XSP + 1
   \   000032   AA82         MOV     R2,DPL
   \   000034   AB83         MOV     R3,DPH
   \   000036   12....       LCALL   ??osal_memset?relay
   3038          
   3039            // Get the status field first
   3040            rsp.status = *pData++;
   \   000039   8E82         MOV     DPL,R6
   \   00003B   8F83         MOV     DPH,R7
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   C0E0         PUSH    A
   \   000040   7403         MOV     A,#0x3
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   D0E0         POP     A
   \   000047   12....       LCALL   ?Subroutine61 & 0xFFFF
   3041          
   3042            if ( pInMsg->hdr.commandID == COMMAND_SCENE_GET_MEMBERSHIP_RSP )
   \                     ??CrossCallReturnLabel_100:
   \   00004A   E5..         MOV     A,?V0 + 8
   \   00004C   2407         ADD     A,#0x7
   \   00004E   F5..         MOV     ?V0 + 2,A
   \   000050   E5..         MOV     A,?V0 + 9
   \   000052   12....       LCALL   ?Subroutine73 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   000055   6406         XRL     A,#0x6
   \   000057   7014         JNZ     ??zclGeneral_ProcessInScenesClient_0
   3043            {
   3044              rsp.capacity = *pData++;
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   C0E0         PUSH    A
   \   000060   7407         MOV     A,#0x7
   \   000062   12....       LCALL   ?XSTACK_DISP0_8
   \   000065   D0E0         POP     A
   \   000067   12....       LCALL   ?Subroutine65 & 0xFFFF
   3045            }
   \                     ??CrossCallReturnLabel_107:
   \   00006A   0E           INC     R6
   \   00006B   AF83         MOV     R7,DPH
   3046          
   3047            scene.groupID = BUILD_UINT16( pData[0], pData[1] );
   \                     ??zclGeneral_ProcessInScenesClient_0:
   \   00006D   12....       LCALL   ??Subroutine112_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000070   740A         MOV     A,#0xa
   \   000072   12....       LCALL   ?XSTACK_DISP0_8
   \   000075   12....       LCALL   ?Subroutine55 & 0xFFFF
   3048            pData += 2;   // Move past group ID
   3049          
   3050            switch ( pInMsg->hdr.commandID )
   \                     ??CrossCallReturnLabel_86:
   \   000078   A3           INC     DPTR
   \   000079   A882         MOV     R0,DPL
   \   00007B   A983         MOV     R1,DPH
   \   00007D   E5..         MOV     A,?V0 + 0
   \   00007F   241E         ADD     A,#0x1e
   \   000081   12....       LCALL   ?Subroutine72 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000084   606A         JZ      ??zclGeneral_ProcessInScenesClient_1
   \   000086   14           DEC     A
   \   000087   6013         JZ      ??zclGeneral_ProcessInScenesClient_2
   \   000089   14           DEC     A
   \   00008A   6064         JZ      ??zclGeneral_ProcessInScenesClient_1
   \   00008C   14           DEC     A
   \   00008D   6061         JZ      ??zclGeneral_ProcessInScenesClient_1
   \   00008F   14           DEC     A
   \   000090   605E         JZ      ??zclGeneral_ProcessInScenesClient_1
   \   000092   24FE         ADD     A,#-0x2
   \   000094   7003         JNZ     $+5
   \   000096   02....       LJMP    ??zclGeneral_ProcessInScenesClient_3 & 0xFFFF
   \   000099   02....       LJMP    ??zclGeneral_ProcessInScenesClient_4 & 0xFFFF
   3051            {
   3052              case COMMAND_SCENE_VIEW_RSP:
   3053                // Parse the rest of the incoming message
   3054                scene.ID = *pData++; // Not applicable to Remove All Response command
   \                     ??zclGeneral_ProcessInScenesClient_2:
   \   00009C   8E82         MOV     DPL,R6
   \   00009E   8F83         MOV     DPH,R7
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   C0E0         PUSH    A
   \   0000A3   740C         MOV     A,#0xc
   \   0000A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A8   D0E0         POP     A
   \   0000AA   12....       LCALL   ?Subroutine36 & 0xFFFF
   3055                scene.transTime = BUILD_UINT16( pData[0], pData[1] );
   \                     ??CrossCallReturnLabel_194:
   \   0000AD   740D         MOV     A,#0xd
   \   0000AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B2   12....       LCALL   ?Subroutine55 & 0xFFFF
   3056                pData += 2;
   3057                nameLen = *pData++; // Name length
   \                     ??CrossCallReturnLabel_87:
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   F5..         MOV     ?V0 + 7,A
   \   0000B8   A3           INC     DPTR
   \   0000B9   0E           INC     R6
   \   0000BA   AF83         MOV     R7,DPH
   3058                if ( nameLen > (ZCL_GEN_SCENE_NAME_LEN-1) )
   \   0000BC   C3           CLR     C
   \   0000BD   9410         SUBB    A,#0x10
   \   0000BF   4003         JC      ??zclGeneral_ProcessInScenesClient_5
   3059                  nameLen = (ZCL_GEN_SCENE_NAME_LEN-1);
   \   0000C1   75..0F       MOV     ?V0 + 7,#0xf
   3060          
   3061                scene.name[0] = nameLen;
   \                     ??zclGeneral_ProcessInScenesClient_5:
   \   0000C4   7411         MOV     A,#0x11
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   E5..         MOV     A,?V0 + 7
   \   0000CB   F0           MOVX    @DPTR,A
   3062                zcl_memcpy( &(scene.name[1]), pData, nameLen );
   \   0000CC                ; Setup parameters for call to function osal_memcpy
   \   0000CC   8E..         MOV     ?V0 + 4,R6
   \   0000CE   8F..         MOV     ?V0 + 5,R7
   \   0000D0   75..00       MOV     ?V0 + 6,#0x0
   \   0000D3   78..         MOV     R0,#?V0 + 4
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000D8   85....       MOV     ?V0 + 4,?V0 + 7
   \   0000DB   AC..         MOV     R4,?V0 + 4
   \   0000DD   7D00         MOV     R5,#0x0
   \   0000DF   7415         MOV     A,#0x15
   \   0000E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E4   AA82         MOV     R2,DPL
   \   0000E6   AB83         MOV     R3,DPH
   \   0000E8   12....       LCALL   ??osal_memcpy?relay
   \   0000EB   7403         MOV     A,#0x3
   \   0000ED   12....       LCALL   ?DEALLOC_XSTACK8
   3063          
   3064                pData += nameLen; // move past name, use original length
   3065          
   3066                //*** Do something with the extension field(s)
   3067          
   3068                // Fall through to callback - break is left off intentionally
   3069          
   3070              case COMMAND_SCENE_ADD_RSP:
   3071              case COMMAND_SCENE_REMOVE_RSP:
   3072              case COMMAND_SCENE_REMOVE_ALL_RSP:
   3073              case COMMAND_SCENE_STORE_RSP:
   3074                if ( pCBs->pfnSceneRsp )
   \                     ??zclGeneral_ProcessInScenesClient_1:
   \   0000F0   85..82       MOV     DPL,?V0 + 0
   \   0000F3   85..83       MOV     DPH,?V0 + 1
   \   0000F6   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   0000F9   7003         JNZ     $+5
   \   0000FB   02....       LJMP    ??zclGeneral_ProcessInScenesClient_6 & 0xFFFF
   3075                {
   3076                  rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \   0000FE   85..82       MOV     DPL,?V0 + 8
   \   000101   85..83       MOV     DPH,?V0 + 9
   \   000104   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   3077                  rsp.cmdID = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_268:
   \   000107   C0E0         PUSH    A
   \   000109   7402         MOV     A,#0x2
   \   00010B   12....       LCALL   ?XSTACK_DISP0_8
   \   00010E   D0E0         POP     A
   \   000110   F0           MOVX    @DPTR,A
   3078                  rsp.scene = &scene;
   \   000111   740A         MOV     A,#0xa
   \   000113   12....       LCALL   ?XSTACK_DISP0_8
   \   000116   A882         MOV     R0,DPL
   \   000118   A983         MOV     R1,DPH
   \   00011A   7408         MOV     A,#0x8
   \   00011C   12....       LCALL   ?XSTACK_DISP0_8
   \   00011F   12....       LCALL   ?Subroutine25 & 0xFFFF
   3079          
   3080                  pCBs->pfnSceneRsp( &rsp );
   3081                }
   \                     ??CrossCallReturnLabel_366:
   \   000122   12....       LCALL   ?CALL_IND
   \   000125   02....       LJMP    ??zclGeneral_ProcessInScenesClient_6 & 0xFFFF
   3082                break;
   3083          
   3084              case COMMAND_SCENE_GET_MEMBERSHIP_RSP:
   3085                {
   3086                  uint8 *sceneList = NULL;
   \                     ??zclGeneral_ProcessInScenesClient_3:
   \   000128   75..00       MOV     ?V0 + 4,#0x0
   \   00012B   75..00       MOV     ?V0 + 5,#0x0
   3087          
   3088                  if ( rsp.status == ZCL_STATUS_SUCCESS )
   \   00012E   7403         MOV     A,#0x3
   \   000130   12....       LCALL   ?XSTACK_DISP0_8
   \   000133   E0           MOVX    A,@DPTR
   \   000134   7048         JNZ     ??zclGeneral_ProcessInScenesClient_7
   3089                  {
   3090                    uint8 sceneCnt = *pData++;
   \   000136   8E82         MOV     DPL,R6
   \   000138   8F83         MOV     DPH,R7
   \   00013A   E0           MOVX    A,@DPTR
   \   00013B   F5..         MOV     ?V0 + 6,A
   \   00013D   E8           MOV     A,R0
   \   00013E   FE           MOV     R6,A
   \   00013F   E9           MOV     A,R1
   \   000140   FF           MOV     R7,A
   3091          
   3092                    if ( sceneCnt > 0 )
   \   000141   E5..         MOV     A,?V0 + 6
   \   000143   6039         JZ      ??zclGeneral_ProcessInScenesClient_7
   3093                    {
   3094                      // Allocate space for the scene list
   3095                      sceneList = zcl_mem_alloc( sceneCnt );
   \   000145                ; Setup parameters for call to function osal_mem_alloc
   \   000145   FA           MOV     R2,A
   \   000146   7B00         MOV     R3,#0x0
   \   000148   12....       LCALL   ??osal_mem_alloc?relay
   \   00014B   8A..         MOV     ?V0 + 4,R2
   \   00014D   8B..         MOV     ?V0 + 5,R3
   3096                      if ( sceneList != NULL )
   \   00014F   EA           MOV     A,R2
   \   000150   45..         ORL     A,?V0 + 5
   \   000152   602A         JZ      ??zclGeneral_ProcessInScenesClient_7
   3097                      {
   3098                        rsp.sceneCnt = sceneCnt;
   \   000154   7404         MOV     A,#0x4
   \   000156   12....       LCALL   ?XSTACK_DISP0_8
   \   000159   E5..         MOV     A,?V0 + 6
   \   00015B   F0           MOVX    @DPTR,A
   3099                        for ( i = 0; i < sceneCnt; i++ )
   \   00015C   7800         MOV     R0,#0x0
   \   00015E   8018         SJMP    ??zclGeneral_ProcessInScenesClient_8
   3100                          sceneList[i] = *pData++;
   \                     ??zclGeneral_ProcessInScenesClient_9:
   \   000160   8E82         MOV     DPL,R6
   \   000162   8F83         MOV     DPH,R7
   \   000164   E0           MOVX    A,@DPTR
   \   000165   C0E0         PUSH    A
   \   000167   88..         MOV     ?V0 + 12,R0
   \   000169   EA           MOV     A,R2
   \   00016A   25..         ADD     A,?V0 + 12
   \   00016C   F582         MOV     DPL,A
   \   00016E   EB           MOV     A,R3
   \   00016F   12....       LCALL   ??Subroutine127_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   000172   D0E0         POP     A
   \   000174   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   000177   08           INC     R0
   \                     ??zclGeneral_ProcessInScenesClient_8:
   \   000178   E8           MOV     A,R0
   \   000179   C3           CLR     C
   \   00017A   95..         SUBB    A,?V0 + 6
   \   00017C   40E2         JC      ??zclGeneral_ProcessInScenesClient_9
   3101                      }
   3102                    }
   3103                  }
   3104          
   3105                  if ( pCBs->pfnSceneRsp )
   \                     ??zclGeneral_ProcessInScenesClient_7:
   \   00017E   85..82       MOV     DPL,?V0 + 0
   \   000181   85..83       MOV     DPH,?V0 + 1
   \   000184   12....       LCALL   ??Subroutine123_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000187   6033         JZ      ??zclGeneral_ProcessInScenesClient_10
   3106                  {
   3107                    rsp.srcAddr = &(pInMsg->msg->srcAddr);
   \   000189   85..82       MOV     DPL,?V0 + 8
   \   00018C   85..83       MOV     DPH,?V0 + 9
   \   00018F   12....       LCALL   ??Subroutine121_0 & 0xFFFF
   3108                    rsp.cmdID = pInMsg->hdr.commandID;
   \                     ??CrossCallReturnLabel_269:
   \   000192   C0E0         PUSH    A
   \   000194   7402         MOV     A,#0x2
   \   000196   12....       LCALL   ?XSTACK_DISP0_8
   \   000199   D0E0         POP     A
   \   00019B   F0           MOVX    @DPTR,A
   3109                    rsp.sceneList = sceneList;
   \   00019C   7405         MOV     A,#0x5
   \   00019E   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A1   E5..         MOV     A,?V0 + 4
   \   0001A3   F0           MOVX    @DPTR,A
   \   0001A4   A3           INC     DPTR
   \   0001A5   E5..         MOV     A,?V0 + 5
   \   0001A7   F0           MOVX    @DPTR,A
   3110                    rsp.scene = &scene;
   \   0001A8   740A         MOV     A,#0xa
   \   0001AA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AD   A882         MOV     R0,DPL
   \   0001AF   A983         MOV     R1,DPH
   \   0001B1   7408         MOV     A,#0x8
   \   0001B3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B6   12....       LCALL   ?Subroutine25 & 0xFFFF
   3111          
   3112                    pCBs->pfnSceneRsp( &rsp);
   3113                  }
   \                     ??CrossCallReturnLabel_367:
   \   0001B9   12....       LCALL   ?CALL_IND
   3114          
   3115                  if ( sceneList != NULL )
   \                     ??zclGeneral_ProcessInScenesClient_10:
   \   0001BC   E5..         MOV     A,?V0 + 4
   \   0001BE   45..         ORL     A,?V0 + 5
   \   0001C0   600C         JZ      ??zclGeneral_ProcessInScenesClient_6
   3116                  {
   3117                    zcl_mem_free( sceneList );
   \   0001C2                ; Setup parameters for call to function osal_mem_free
   \   0001C2   AA..         MOV     R2,?V0 + 4
   \   0001C4   AB..         MOV     R3,?V0 + 5
   \   0001C6   12....       LCALL   ??osal_mem_free?relay
   \   0001C9   8003         SJMP    ??zclGeneral_ProcessInScenesClient_6
   3118                  }
   3119                }
   3120                break;
   3121          
   3122              default:
   3123                stat = ZFailure;
   \                     ??zclGeneral_ProcessInScenesClient_4:
   \   0001CB   75..01       MOV     ?V0 + 10,#0x1
   3124                break;
   3125            }
   3126          
   3127            return ( stat );
   \                     ??zclGeneral_ProcessInScenesClient_6:
   \   0001CE   A9..         MOV     R1,?V0 + 10
   \   0001D0   7441         MOV     A,#0x41
   \   0001D2   02....       LJMP    ?Subroutine4 & 0xFFFF
   3128          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   AE82         MOV     R6,DPL
   \   000008   AF83         MOV     R7,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   12....       LCALL   ?Subroutine91 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004                REQUIRE ??Subroutine138_0
   \   000004                ; // Fall through to label ??Subroutine138_0
   3129          #endif // ZCL_SCENES
   3130          
   3131          #ifdef ZCL_ON_OFF
   3132          /*********************************************************************
   3133           * @fn      zclGeneral_ProcessInCmdOnOff
   3134           *
   3135           * @brief   Process in the received On/Off Command.
   3136           *
   3137           * @param   pInMsg - pointer to the incoming message
   3138           *
   3139           * @return  ZStatus_t
   3140           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   FA           MOV     R2,A
   \   000001   ED           MOV     A,R5
   \   000002   3400         ADDC    A,#0x0
   \   000004   FB           MOV     R3,A
   \   000005   EA           MOV     A,R2
   \   000006   FC           MOV     R4,A
   \   000007   EB           MOV     A,R3
   \   000008                REQUIRE ??Subroutine125_0
   \   000008                ; // Fall through to label ??Subroutine125_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3141          static ZStatus_t zclGeneral_ProcessInOnOff( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInOnOff:
   3142                                                      zclGeneral_AppCallbacks_t *pCBs )
   3143          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3144            ZStatus_t stat = ZSuccess;
   \   00000A   7E00         MOV     R6,#0x0
   3145          
   3146            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   5408         ANL     A,#0x8
   \   000015   6003         JZ      $+5
   \   000017   02....       LJMP    ??zclGeneral_ProcessInOnOff_0 & 0xFFFF
   3147            {
   3148              switch ( pInMsg->hdr.commandID )
   \   00001A   8A82         MOV     DPL,R2
   \   00001C   8B83         MOV     DPH,R3
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   A3           INC     DPTR
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   FF           MOV     R7,A
   \   000027   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_126:
   \   00002A   EF           MOV     A,R7
   \   00002B   6013         JZ      ??zclGeneral_ProcessInOnOff_1
   \   00002D   14           DEC     A
   \   00002E   6010         JZ      ??zclGeneral_ProcessInOnOff_1
   \   000030   14           DEC     A
   \   000031   600D         JZ      ??zclGeneral_ProcessInOnOff_1
   \   000033   24C2         ADD     A,#-0x3e
   \   000035   6022         JZ      ??zclGeneral_ProcessInOnOff_2
   \   000037   14           DEC     A
   \   000038   6069         JZ      ??zclGeneral_ProcessInOnOff_3
   \   00003A   14           DEC     A
   \   00003B   6070         JZ      ??zclGeneral_ProcessInOnOff_4
   \   00003D   02....       LJMP    ??zclGeneral_ProcessInOnOff_5 & 0xFFFF
   3149              {
   3150                case COMMAND_OFF:
   3151                case COMMAND_ON:
   3152                case COMMAND_TOGGLE:
   3153                  if ( pCBs->pfnOnOff )
   \                     ??zclGeneral_ProcessInOnOff_1:
   \   000040   8C82         MOV     DPL,R4
   \   000042   8D83         MOV     DPH,R5
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   12....       LCALL   ??Subroutine134_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   00004F   7003         JNZ     $+5
   \   000051   02....       LJMP    ??zclGeneral_ProcessInOnOff_0 & 0xFFFF
   3154                  {
   3155                    pCBs->pfnOnOff( pInMsg->hdr.commandID );
   \   000054                ; Setup parameters for indirect call
   \   000054   EF           MOV     A,R7
   \   000055   F9           MOV     R1,A
   \   000056   02....       LJMP    ??CrossCallReturnLabel_374 & 0xFFFF
   3156                  }
   3157                  break;
   3158          
   3159          #ifdef ZCL_LIGHT_LINK_ENHANCE
   3160                case COMMAND_OFF_WITH_EFFECT:
   3161                  if ( pCBs->pfnOnOff_OffWithEffect )
   \                     ??zclGeneral_ProcessInOnOff_2:
   \   000059   EC           MOV     A,R4
   \   00005A   240A         ADD     A,#0xa
   \   00005C   FC           MOV     R4,A
   \   00005D   ED           MOV     A,R5
   \   00005E   3400         ADDC    A,#0x0
   \   000060   FD           MOV     R5,A
   \   000061   8C82         MOV     DPL,R4
   \   000063   8D83         MOV     DPH,R5
   \   000065   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000068   E5..         MOV     A,?V0 + 0
   \   00006A   45..         ORL     A,?V0 + 1
   \   00006C   7003         JNZ     $+5
   \   00006E   02....       LJMP    ??zclGeneral_ProcessInOnOff_0 & 0xFFFF
   3162                  {
   3163                    zclOffWithEffect_t cmd;
   3164          
   3165                    cmd.srcAddr = &(pInMsg->msg->srcAddr);
   \   000071   8A82         MOV     DPL,R2
   \   000073   8B83         MOV     DPH,R3
   \   000075   12....       LCALL   ?Subroutine85 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000078   85..82       MOV     DPL,?XSP + 0
   \   00007B   85..83       MOV     DPH,?XSP + 1
   \   00007E   12....       LCALL   ??Subroutine110_0 & 0xFFFF
   3166                    cmd.effectId = pInMsg->pData[0];
   \                     ??CrossCallReturnLabel_190:
   \   000081   12....       LCALL   ?Subroutine21 & 0xFFFF
   3167                    cmd.effectVariant = pInMsg->pData[1];
   3168          
   3169                    pCBs->pfnOnOff_OffWithEffect( &cmd );
   3170                  }
   \                     ??CrossCallReturnLabel_12:
   \   000084   C0E0         PUSH    A
   \   000086   7402         MOV     A,#0x2
   \   000088   12....       LCALL   ?XSTACK_DISP0_8
   \   00008B   D0E0         POP     A
   \   00008D   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000090   12....       LCALL   ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_373:
   \   000093   A3           INC     DPTR
   \   000094   E0           MOVX    A,@DPTR
   \   000095   C0E0         PUSH    A
   \   000097   7403         MOV     A,#0x3
   \   000099   12....       LCALL   ?XSTACK_DISP0_8
   \   00009C   D0E0         POP     A
   \   00009E   12....       LCALL   ?Subroutine90 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   0000A1   804E         SJMP    ??zclGeneral_ProcessInOnOff_6
   3171                  break;
   3172          
   3173                case COMMAND_ON_WITH_RECALL_GLOBAL_SCENE:
   3174                  if ( pCBs->pfnOnOff_OnWithRecallGlobalScene )
   \                     ??zclGeneral_ProcessInOnOff_3:
   \   0000A3   EC           MOV     A,R4
   \   0000A4   240C         ADD     A,#0xc
   \   0000A6   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   0000A9   6057         JZ      ??zclGeneral_ProcessInOnOff_0
   3175                  {
   3176                    pCBs->pfnOnOff_OnWithRecallGlobalScene();
   \   0000AB                ; Setup parameters for indirect call
   \   0000AB   804F         SJMP    ??CrossCallReturnLabel_374
   3177                  }
   3178                  break;
   3179          
   3180                case COMMAND_ON_WITH_TIMED_OFF:
   3181                  if ( pCBs->pfnOnOff_OnWithTimedOff )
   \                     ??zclGeneral_ProcessInOnOff_4:
   \   0000AD   EC           MOV     A,R4
   \   0000AE   240E         ADD     A,#0xe
   \   0000B0   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_313:
   \   0000B3   604D         JZ      ??zclGeneral_ProcessInOnOff_0
   3182                  {
   3183                    zclOnWithTimedOff_t cmd;
   3184          
   3185                    cmd.onOffCtrl.byte = pInMsg->pData[0];
   \   0000B5   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000B8   C0E0         PUSH    A
   \   0000BA   7404         MOV     A,#0x4
   \   0000BC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BF   D0E0         POP     A
   \   0000C1   12....       LCALL   ?Subroutine38 & 0xFFFF
   3186                    cmd.onTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   \                     ??CrossCallReturnLabel_47:
   \   0000C4   F5..         MOV     ?V0 + 0,A
   \   0000C6   8882         MOV     DPL,R0
   \   0000C8   8983         MOV     DPH,R1
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   FB           MOV     R3,A
   \   0000CE   7406         MOV     A,#0x6
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   E5..         MOV     A,?V0 + 0
   \   0000D5   12....       LCALL   ??Subroutine111_0 & 0xFFFF
   3187                    cmd.offWaitTime = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
   \                     ??CrossCallReturnLabel_182:
   \   0000D8   8882         MOV     DPL,R0
   \   0000DA   8983         MOV     DPH,R1
   \   0000DC   A3           INC     DPTR
   \   0000DD   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   0000E0   A3           INC     DPTR
   \   0000E1   12....       LCALL   ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   0000E4   7408         MOV     A,#0x8
   \   0000E6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E9   12....       LCALL   ?Subroutine64 & 0xFFFF
   3188                    pCBs->pfnOnOff_OnWithTimedOff( &cmd );
   \                     ??CrossCallReturnLabel_263:
   \   0000EC                ; Setup parameters for indirect call
   \   0000EC   7404         MOV     A,#0x4
   \   0000EE   12....       LCALL   ?XSTACK_DISP0_8
   \                     ??zclGeneral_ProcessInOnOff_6:
   \   0000F1   AA82         MOV     R2,DPL
   \   0000F3   AB83         MOV     R3,DPH
   \   0000F5   8C82         MOV     DPL,R4
   \   0000F7   8D83         MOV     DPH,R5
   3189                  }
   \   0000F9   12....       LCALL   ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   0000FC   12....       LCALL   ?CALL_IND
   \   0000FF   8001         SJMP    ??zclGeneral_ProcessInOnOff_0
   3190                  break;
   3191          #endif // ZCL_LIGHT_LINK_ENHANCE
   3192          
   3193                default:
   3194                  stat = ZFailure;
   \                     ??zclGeneral_ProcessInOnOff_5:
   \   000101   0E           INC     R6
   3195                  break;
   3196              }
   3197            }
   3198            // no Client command
   3199          
   3200            return ( stat );
   \                     ??zclGeneral_ProcessInOnOff_0:
   \   000102   EE           MOV     A,R6
   \   000103   F9           MOV     R1,A
   \   000104   740A         MOV     A,#0xa
   \   000106   80..         SJMP    ??Subroutine136_0
   3201          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F582         MOV     DPL,A
   \   000002   ED           MOV     A,R5
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007                REQUIRE ??Subroutine134_0
   \   000007                ; // Fall through to label ??Subroutine134_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   FA           MOV     R2,A
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET
   3202          #endif // ZCL_ON_OFF
   3203          
   3204          #ifdef ZCL_ON_OFF
   3205          /*********************************************************************
   3206           * @fn      zclGeneral_ProcessInManuCmdOnOff
   3207           *
   3208           * @brief   Process in the received On/Off Command.
   3209           *
   3210           * @param   pInMsg - pointer to the incoming message
   3211           *
   3212           * @return  ZStatus_t
   3213           */
   3214          static ZStatus_t zclGeneral_ProcessInManuOnOff( zclIncoming_t *pInMsg,
   3215                                                      zclGeneral_AppCallbacks_t *pCBs )//add my own function
   3216          {
   3217            ZStatus_t stat = ZSuccess;
   3218          
   3219          #ifdef DALI_LIGHT
   3220            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   3221            {
   3222              switch ( pInMsg->hdr.commandID )
   3223              {
   3224                case COMMAND_OFF:
   3225                 dali_cmd = pInMsg->pData[0];
   3226                 dali_cmd = (dali_cmd << 1) | 0x01;
   3227                 dali_cmd = dali_cmd << 8;
   3228                 DALI_Send(dali_cmd,&dali_answer,&dali_answer_state);
   3229                 stat = ZSuccess;
   3230                 break;
   3231                case COMMAND_ON:
   3232                 dali_cmd = pInMsg->pData[0];
   3233                 dali_cmd = (dali_cmd << 1) | 0x01;
   3234                 dali_cmd = (dali_cmd << 8) | 0x05;
   3235                 DALI_Send(dali_cmd,&dali_answer,&dali_answer_state);
   3236                 stat = ZSuccess;
   3237                  break;
   3238          
   3239                default:
   3240                  stat = ZFailure;
   3241                  break;
   3242              }
   3243            }
   3244            // no Client command
   3245          
   3246          #endif
   3247            return ( stat );
   3248          }
   3249          #endif // ZCL_ON_OFF
   3250          
   3251          #ifdef ZCL_LEVEL_CTRL
   3252          /*********************************************************************
   3253           * @fn      zclGeneral_ProcessInLevelControl
   3254           *
   3255           * @brief   Process in the received Level Control Command.
   3256           *
   3257           * @param   pInMsg - pointer to the incoming message
   3258           *
   3259           * @return  ZStatus_t
   3260           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3261          static ZStatus_t zclGeneral_ProcessInLevelControl( zclIncoming_t *pInMsg,
   \                     zclGeneral_ProcessInLevelControl:
   3262                                                             zclGeneral_AppCallbacks_t *pCBs )
   3263          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3264            uint8 withOnOff = FALSE;
   \   00000A   7F00         MOV     R7,#0x0
   3265            ZStatus_t stat = ZSuccess;
   \   00000C   7E00         MOV     R6,#0x0
   3266          
   3267            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   \   00000E   8A82         MOV     DPL,R2
   \   000010   8B83         MOV     DPH,R3
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   5408         ANL     A,#0x8
   \   000017   6003         JZ      $+5
   \   000019   02....       LJMP    ??zclGeneral_ProcessInLevelControl_0 & 0xFFFF
   3268            {
   3269              switch ( pInMsg->hdr.commandID )
   \   00001C   12....       LCALL   ?Subroutine77 & 0xFFFF
   \                     ??CrossCallReturnLabel_127:
   \   00001F   8A82         MOV     DPL,R2
   \   000021   8B83         MOV     DPH,R3
   \   000023   A3           INC     DPTR
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   A3           INC     DPTR
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   6022         JZ      ??zclGeneral_ProcessInLevelControl_1
   \   00002D   14           DEC     A
   \   00002E   6056         JZ      ??zclGeneral_ProcessInLevelControl_2
   \   000030   14           DEC     A
   \   000031   7003         JNZ     $+5
   \   000033   02....       LJMP    ??zclGeneral_ProcessInLevelControl_3 & 0xFFFF
   \   000036   14           DEC     A
   \   000037   7003         JNZ     $+5
   \   000039   02....       LJMP    ??zclGeneral_ProcessInLevelControl_4 & 0xFFFF
   \   00003C   14           DEC     A
   \   00003D   600F         JZ      ??zclGeneral_ProcessInLevelControl_5
   \   00003F   14           DEC     A
   \   000040   6043         JZ      ??zclGeneral_ProcessInLevelControl_6
   \   000042   14           DEC     A
   \   000043   6072         JZ      ??zclGeneral_ProcessInLevelControl_7
   \   000045   14           DEC     A
   \   000046   7003         JNZ     $+5
   \   000048   02....       LJMP    ??zclGeneral_ProcessInLevelControl_4 & 0xFFFF
   \   00004B   02....       LJMP    ??zclGeneral_ProcessInLevelControl_8 & 0xFFFF
   3270              {
   3271                case COMMAND_LEVEL_MOVE_TO_LEVEL_WITH_ON_OFF:
   3272                  withOnOff = TRUE;
   \                     ??zclGeneral_ProcessInLevelControl_5:
   \   00004E   0F           INC     R7
   3273                  // fall through
   3274                case COMMAND_LEVEL_MOVE_TO_LEVEL:
   3275                  if ( pCBs->pfnLevelControlMoveToLevel )
   \                     ??zclGeneral_ProcessInLevelControl_1:
   \   00004F   EC           MOV     A,R4
   \   000050   2410         ADD     A,#0x10
   \   000052   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   000055   7003         JNZ     $+5
   \   000057   02....       LJMP    ??zclGeneral_ProcessInLevelControl_0 & 0xFFFF
   3276                  {
   3277                    zclLCMoveToLevel_t cmd;
   3278          
   3279                    cmd.level = pInMsg->pData[0];
   \   00005A   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00005D   C0E0         PUSH    A
   \   00005F   7403         MOV     A,#0x3
   \   000061   12....       LCALL   ?XSTACK_DISP0_8
   \   000064   D0E0         POP     A
   \   000066   12....       LCALL   ?Subroutine38 & 0xFFFF
   3280                    cmd.transitionTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   \                     ??CrossCallReturnLabel_48:
   \   000069   FA           MOV     R2,A
   \   00006A   8882         MOV     DPL,R0
   \   00006C   8983         MOV     DPH,R1
   \   00006E   A3           INC     DPTR
   \   00006F   12....       LCALL   ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   000072   7404         MOV     A,#0x4
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   12....       LCALL   ?Subroutine64 & 0xFFFF
   3281                    cmd.withOnOff = withOnOff;
   \                     ??CrossCallReturnLabel_264:
   \   00007A   7406         MOV     A,#0x6
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   EF           MOV     A,R7
   \   000080   F0           MOVX    @DPTR,A
   3282          
   3283                    pCBs->pfnLevelControlMoveToLevel( &cmd );
   \   000081                ; Setup parameters for indirect call
   \   000081   7403         MOV     A,#0x3
   \   000083   8073         SJMP    ??zclGeneral_ProcessInLevelControl_9
   3284                  }
   3285                  break;
   3286          
   3287                case COMMAND_LEVEL_MOVE_WITH_ON_OFF:
   3288                  withOnOff = TRUE;
   \                     ??zclGeneral_ProcessInLevelControl_6:
   \   000085   0F           INC     R7
   3289                  // fall through
   3290                case COMMAND_LEVEL_MOVE:
   3291                  if ( pCBs->pfnLevelControlMove )
   \                     ??zclGeneral_ProcessInLevelControl_2:
   \   000086   EC           MOV     A,R4
   \   000087   2412         ADD     A,#0x12
   \   000089   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   00008C   7003         JNZ     $+5
   \   00008E   02....       LJMP    ??zclGeneral_ProcessInLevelControl_0 & 0xFFFF
   3292                  {
   3293                    zclLCMove_t cmd;
   3294          
   3295                    cmd.moveMode = pInMsg->pData[0];
   \   000091   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000094   85..82       MOV     DPL,?XSP + 0
   \   000097   85..83       MOV     DPH,?XSP + 1
   \   00009A   12....       LCALL   ?Subroutine58 & 0xFFFF
   3296                    cmd.rate = pInMsg->pData[1];
   \                     ??CrossCallReturnLabel_93:
   \   00009D   12....       LCALL   ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   0000A0   A3           INC     DPTR
   \   0000A1   E0           MOVX    A,@DPTR
   \   0000A2   C0E0         PUSH    A
   \   0000A4   7401         MOV     A,#0x1
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   D0E0         POP     A
   \   0000AB   F0           MOVX    @DPTR,A
   3297                    cmd.withOnOff = withOnOff;
   \   0000AC   7402         MOV     A,#0x2
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   EF           MOV     A,R7
   \   0000B2   12....       LCALL   ?Subroutine90 & 0xFFFF
   3298          
   3299                    pCBs->pfnLevelControlMove( &cmd );
   3300                  }
   \                     ??CrossCallReturnLabel_172:
   \   0000B5   8044         SJMP    ??zclGeneral_ProcessInLevelControl_10
   3301                  break;
   3302          
   3303                case COMMAND_LEVEL_STEP_WITH_ON_OFF:
   3304                  withOnOff = TRUE;
   \                     ??zclGeneral_ProcessInLevelControl_7:
   \   0000B7   0F           INC     R7
   3305                  // fall through
   3306                case COMMAND_LEVEL_STEP:
   3307                  if ( pCBs->pfnLevelControlStep )
   \                     ??zclGeneral_ProcessInLevelControl_3:
   \   0000B8   EC           MOV     A,R4
   \   0000B9   2414         ADD     A,#0x14
   \   0000BB   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   0000BE   6056         JZ      ??zclGeneral_ProcessInLevelControl_0
   3308                  {
   3309                    zclLCStep_t cmd;
   3310          
   3311                    cmd.stepMode = pInMsg->pData[0];
   \   0000C0   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000C3   C0E0         PUSH    A
   \   0000C5   7407         MOV     A,#0x7
   \   0000C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CA   D0E0         POP     A
   \   0000CC   12....       LCALL   ?Subroutine58 & 0xFFFF
   3312                    cmd.amount =  pInMsg->pData[1];
   \                     ??CrossCallReturnLabel_94:
   \   0000CF   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   0000D2   C0E0         PUSH    A
   \   0000D4   7408         MOV     A,#0x8
   \   0000D6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D9   D0E0         POP     A
   \   0000DB   12....       LCALL   ?Subroutine58 & 0xFFFF
   3313                    cmd.transitionTime = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
   \                     ??CrossCallReturnLabel_95:
   \   0000DE   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   0000E1   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0000E4   12....       LCALL   ??Subroutine114_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   0000E7   7409         MOV     A,#0x9
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   12....       LCALL   ?Subroutine64 & 0xFFFF
   3314                    cmd.withOnOff = withOnOff;
   \                     ??CrossCallReturnLabel_265:
   \   0000EF   740B         MOV     A,#0xb
   \   0000F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F4   EF           MOV     A,R7
   \   0000F5   F0           MOVX    @DPTR,A
   3315          
   3316                    pCBs->pfnLevelControlStep( &cmd );
   \   0000F6                ; Setup parameters for indirect call
   \   0000F6   7407         MOV     A,#0x7
   \                     ??zclGeneral_ProcessInLevelControl_9:
   \   0000F8   12....       LCALL   ?XSTACK_DISP0_8
   \                     ??zclGeneral_ProcessInLevelControl_10:
   \   0000FB   AA82         MOV     R2,DPL
   \   0000FD   AB83         MOV     R3,DPH
   \   0000FF   8C82         MOV     DPL,R4
   \   000101   8D83         MOV     DPH,R5
   3317                  }
   \   000103   12....       LCALL   ??Subroutine139_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   000106   8008         SJMP    ??zclGeneral_ProcessInLevelControl_11
   3318                  break;
   3319          
   3320                case COMMAND_LEVEL_STOP:
   3321                case COMMAND_LEVEL_STOP_WITH_ON_OFF:
   3322                  // Both Stop commands are identical
   3323                  if ( pCBs->pfnLevelControlStop )
   \                     ??zclGeneral_ProcessInLevelControl_4:
   \   000108   EC           MOV     A,R4
   \   000109   2416         ADD     A,#0x16
   \   00010B   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   00010E   6006         JZ      ??zclGeneral_ProcessInLevelControl_0
   3324                  {
   3325                    pCBs->pfnLevelControlStop();
   \   000110                ; Setup parameters for indirect call
   \                     ??zclGeneral_ProcessInLevelControl_11:
   \   000110   12....       LCALL   ?CALL_IND
   \   000113   8001         SJMP    ??zclGeneral_ProcessInLevelControl_0
   3326                  }
   3327                  break;
   3328          
   3329                default:
   3330                  stat = ZFailure;
   \                     ??zclGeneral_ProcessInLevelControl_8:
   \   000115   0E           INC     R6
   3331                  break;
   3332              }
   3333            }
   3334            // no Client command
   3335          
   3336            return ( stat );
   \                     ??zclGeneral_ProcessInLevelControl_0:
   \   000116   EE           MOV     A,R6
   \   000117   F9           MOV     R1,A
   \   000118   740C         MOV     A,#0xc
   \   00011A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00011D   02....       LJMP    ?Subroutine8 & 0xFFFF
   3337          }
   3338          #endif // ZCL_LEVEL_CTRL
   3339          
   3340          #ifdef ZCL_LEVEL_CTRL
   3341          /*********************************************************************
   3342           * @fn      zclGeneral_ProcessInManuLevelControl
   3343           *
   3344           * @brief   Process in the received Level Control Command.
   3345           *
   3346           * @param   pInMsg - pointer to the incoming message
   3347           *
   3348           * @return  ZStatus_t
   3349           */
   3350          static ZStatus_t zclGeneral_ProcessInManuLevelControl( zclIncoming_t *pInMsg,
   3351                                                             zclGeneral_AppCallbacks_t *pCBs )//add my own function
   3352          {
   3353            ZStatus_t stat = ZSuccess;
   3354          
   3355          #ifdef DALI_LIGHT
   3356            if ( zcl_ServerCmd( pInMsg->hdr.fc.direction ) )
   3357            {
   3358              switch ( pInMsg->hdr.commandID )
   3359              {
   3360                case COMMAND_LEVEL_MOVE_TO_LEVEL:
   3361                 dali_cmd = pInMsg->pData[3];
   3362                 dali_cmd = (dali_cmd << 1) | 0x00;
   3363                 dali_cmd = (dali_cmd << 8) | (pInMsg->pData[0]);
   3364                 DALI_Send(dali_cmd,&dali_answer,&dali_answer_state);
   3365                 stat = ZSuccess;
   3366                  break;
   3367          
   3368                default:
   3369                  stat = ZFailure;
   3370                  break;
   3371              }
   3372            }
   3373            // no Client command
   3374          
   3375          #endif
   3376            return ( stat );
   3377          }
   3378          #endif // ZCL_LEVEL_CTRL
   3379          
   3380          #ifdef ZCL_ALARMS
   3381          /*********************************************************************
   3382           * @fn      zclGeneral_AddAlarm
   3383           *
   3384           * @brief   Add an alarm for a cluster
   3385           *
   3386           * @param   endpoint -
   3387           * @param   alarm - new alarm item
   3388           *
   3389           * @return  ZStatus_t
   3390           */
   3391          ZStatus_t zclGeneral_AddAlarm( uint8 endpoint, zclGeneral_Alarm_t *alarm )
   3392          {
   3393            zclGenAlarmItem_t *pNewItem;
   3394            zclGenAlarmItem_t *pLoop;
   3395          
   3396            // Fill in the new profile list
   3397            pNewItem = zcl_mem_alloc( sizeof( zclGenAlarmItem_t ) );
   3398            if ( pNewItem == NULL )
   3399              return ( ZMemError );
   3400          
   3401            // Fill in the plugin record.
   3402            pNewItem->next = (zclGenAlarmItem_t *)NULL;
   3403            pNewItem->endpoint =  endpoint;
   3404            zcl_memcpy( (uint8*)(&pNewItem->alarm), (uint8*)alarm, sizeof ( zclGeneral_Alarm_t ) );
   3405          
   3406            // Find spot in list
   3407            if (  zclGenAlarmTable == NULL )
   3408            {
   3409              zclGenAlarmTable = pNewItem;
   3410            }
   3411            else
   3412            {
   3413              // Look for end of list
   3414              pLoop = zclGenAlarmTable;
   3415              while ( pLoop->next != NULL )
   3416                pLoop = pLoop->next;
   3417          
   3418              // Put new item at end of list
   3419              pLoop->next = pNewItem;
   3420            }
   3421          
   3422            return ( ZSuccess );
   3423          }
   3424          
   3425          /*********************************************************************
   3426           * @fn      zclGeneral_FindAlarm
   3427           *
   3428           * @brief   Find an alarm with alarmCode and clusterID
   3429           *
   3430           * @param   endpoint -
   3431           * @param   groupID - what group the scene belongs to
   3432           * @param   sceneID - ID to look for scene
   3433           *
   3434           * @return  a pointer to the alarm information, NULL if not found
   3435           */
   3436          zclGeneral_Alarm_t *zclGeneral_FindAlarm( uint8 endpoint, uint8 alarmCode, uint16 clusterID )
   3437          {
   3438            zclGenAlarmItem_t *pLoop;
   3439          
   3440            // Look for the alarm
   3441            pLoop = zclGenAlarmTable;
   3442            while ( pLoop )
   3443            {
   3444              if ( pLoop->endpoint == endpoint &&
   3445                   pLoop->alarm.code == alarmCode && pLoop->alarm.clusterID == clusterID )
   3446              {
   3447                return ( &(pLoop->alarm) );
   3448              }
   3449              pLoop = pLoop->next;
   3450            }
   3451          
   3452            return ( (zclGeneral_Alarm_t *)NULL );
   3453          }
   3454          
   3455          /*********************************************************************
   3456           * @fn      zclGeneral_FindEarliestAlarm
   3457           *
   3458           * @brief   Find an alarm with the earliest timestamp
   3459           *
   3460           * @param   endpoint -
   3461           *
   3462           * @return  a pointer to the alarm information, NULL if not found
   3463           */
   3464          zclGeneral_Alarm_t *zclGeneral_FindEarliestAlarm( uint8 endpoint )
   3465          {
   3466            zclGenAlarmItem_t *pLoop;
   3467            zclGenAlarmItem_t earliestAlarm;
   3468            zclGenAlarmItem_t *pEarliestAlarm = &earliestAlarm;
   3469          
   3470            pEarliestAlarm->alarm.timeStamp = 0xFFFFFFFF;
   3471          
   3472            // Look for alarm with earliest time
   3473            pLoop = zclGenAlarmTable;
   3474            while ( pLoop )
   3475            {
   3476              if ( pLoop->endpoint == endpoint &&
   3477                   pLoop->alarm.timeStamp < pEarliestAlarm->alarm.timeStamp )
   3478              {
   3479                pEarliestAlarm = pLoop;
   3480              }
   3481              pLoop = pLoop->next;
   3482            }
   3483          
   3484            if ( pEarliestAlarm->alarm.timeStamp != 0xFFFFFFFF )
   3485              return ( &(pEarliestAlarm->alarm) );
   3486          
   3487            // No alarm
   3488            return ( (zclGeneral_Alarm_t *)NULL );
   3489          }
   3490          
   3491          /*********************************************************************
   3492           * @fn      zclGeneral_ResetAlarm
   3493           *
   3494           * @brief   Remove a scene with endpoint and sceneID
   3495           *
   3496           * @param   endpoint -
   3497           * @param   alarmCode -
   3498           * @param   clusterID -
   3499           *
   3500           * @return  TRUE if removed, FALSE if not found
   3501           */
   3502          void zclGeneral_ResetAlarm( uint8 endpoint, uint8 alarmCode, uint16 clusterID )
   3503          {
   3504            zclGenAlarmItem_t *pLoop;
   3505            zclGenAlarmItem_t *pPrev;
   3506          
   3507            // Look for end of list
   3508            pLoop = zclGenAlarmTable;
   3509            pPrev = NULL;
   3510            while ( pLoop )
   3511            {
   3512              if ( pLoop->endpoint == endpoint &&
   3513                   pLoop->alarm.code == alarmCode && pLoop->alarm.clusterID == clusterID )
   3514              {
   3515                if ( pPrev == NULL )
   3516                  zclGenAlarmTable = pLoop->next;
   3517                else
   3518                  pPrev->next = pLoop->next;
   3519          
   3520                // Free the memory
   3521                zcl_mem_free( pLoop );
   3522          
   3523                // Notify the Application so that if the alarm condition still active then
   3524                // a new notification will be generated, and a new alarm record will be
   3525                // added to the alarm log
   3526                // zclGeneral_NotifyReset( alarmCode, clusterID ); // callback function?
   3527                return;
   3528              }
   3529              pPrev = pLoop;
   3530              pLoop = pLoop->next;
   3531            }
   3532          }
   3533          
   3534          /*********************************************************************
   3535           * @fn      zclGeneral_ResetAllAlarms
   3536           *
   3537           * @brief   Remove all alarms with endpoint
   3538           *
   3539           * @param   endpoint -
   3540           * @param   notifyApp -
   3541           *
   3542           * @return  none
   3543           */
   3544          void zclGeneral_ResetAllAlarms( uint8 endpoint, uint8 notifyApp )
   3545          {
   3546            zclGenAlarmItem_t *pLoop;
   3547            zclGenAlarmItem_t *pPrev;
   3548            zclGenAlarmItem_t *pNext;
   3549          
   3550            // Look for end of list
   3551            pLoop = zclGenAlarmTable;
   3552            pPrev = NULL;
   3553            while ( pLoop )
   3554            {
   3555              if (  pLoop->endpoint == endpoint )
   3556              {
   3557                if ( pPrev == NULL )
   3558                  zclGenAlarmTable = pLoop->next;
   3559                else
   3560                  pPrev->next = pLoop->next;
   3561          
   3562                pNext = pLoop->next;
   3563          
   3564                // Free the memory
   3565                zcl_mem_free( pLoop );
   3566          
   3567                pLoop = pNext;
   3568              }
   3569              else
   3570              {
   3571                pPrev = pLoop;
   3572                pLoop = pLoop->next;
   3573              }
   3574            }
   3575          
   3576            if ( notifyApp )
   3577            {
   3578              // Notify the Application so that if any alarm conditions still active then
   3579              // a new notification will be generated, and a new alarm record will be
   3580              // added to the alarm log
   3581              // zclGeneral_NotifyResetAll(); // callback function?
   3582            }
   3583          }
   3584          
   3585          /*********************************************************************
   3586           * @fn      zclGeneral_ProcessInAlarmsServer
   3587           *
   3588           * @brief   Process in the received Alarms Command.
   3589           *
   3590           * @param   pInMsg - pointer to the incoming message
   3591           *
   3592           * @return  ZStatus_t
   3593           */
   3594          static ZStatus_t zclGeneral_ProcessInAlarmsServer( zclIncoming_t *pInMsg,
   3595                                                             zclGeneral_AppCallbacks_t *pCBs )
   3596          {
   3597            zclAlarm_t alarm;
   3598            zclGeneral_Alarm_t *pAlarm;
   3599            uint8 *pData = pInMsg->pData;
   3600            ZStatus_t stat = ZSuccess;
   3601          
   3602            switch ( pInMsg->hdr.commandID )
   3603            {
   3604              case COMMAND_ALARMS_RESET:
   3605                if ( pCBs->pfnAlarm )
   3606                {
   3607                  alarm.cmdID = pInMsg->hdr.commandID;
   3608                  alarm.alarmCode = pData[0];
   3609                  alarm.clusterID = BUILD_UINT16( pData[1], pData[2] );
   3610          
   3611                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3612                }
   3613                else
   3614                {
   3615                  stat = ZCL_STATUS_FAILURE;
   3616                }
   3617                break;
   3618          
   3619              case COMMAND_ALARMS_RESET_ALL:
   3620                if ( pCBs->pfnAlarm )
   3621                {
   3622                  alarm.cmdID = pInMsg->hdr.commandID;
   3623          
   3624                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3625                }
   3626                else
   3627                {
   3628                  stat = ZCL_STATUS_FAILURE;
   3629                }
   3630                break;
   3631          
   3632              case COMMAND_ALARMS_GET:
   3633                if ( pCBs->pfnAlarm )
   3634                {
   3635                  alarm.srcAddr = &(pInMsg->msg->srcAddr);
   3636                  alarm.cmdID = pInMsg->hdr.commandID;
   3637          
   3638                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3639          
   3640                  pAlarm = zclGeneral_FindEarliestAlarm( pInMsg->msg->endPoint );
   3641                  if ( pAlarm )
   3642                  {
   3643                    // Send a response back
   3644                    zclGeneral_SendAlarmGetRespnose( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   3645                                                     ZCL_STATUS_SUCCESS, pAlarm->code,
   3646                                                     pAlarm->clusterID, pAlarm->timeStamp,
   3647                                                     true, pInMsg->hdr.transSeqNum );
   3648                    // Remove the entry from the Alarm table
   3649                    zclGeneral_ResetAlarm( pInMsg->msg->endPoint, pAlarm->code, pAlarm->clusterID );
   3650                  }
   3651                  else
   3652                  {
   3653                    // Send a response back
   3654                    zclGeneral_SendAlarmGetRespnose( pInMsg->msg->endPoint, &pInMsg->msg->srcAddr,
   3655                                                     ZCL_STATUS_NOT_FOUND, 0, 0, 0,
   3656                                                     true, pInMsg->hdr.transSeqNum );
   3657                  }
   3658                  stat = ZCL_STATUS_CMD_HAS_RSP;
   3659                }
   3660                else
   3661                {
   3662                  stat = ZCL_STATUS_FAILURE;
   3663                }
   3664                break;
   3665          
   3666              case COMMAND_ALARMS_RESET_LOG:
   3667                if ( pCBs->pfnAlarm )
   3668                {
   3669                  alarm.cmdID = pInMsg->hdr.commandID;
   3670          
   3671                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3672          
   3673                  zclGeneral_ResetAllAlarms( pInMsg->msg->endPoint, FALSE );
   3674                }
   3675                else
   3676                {
   3677                  stat = ZCL_STATUS_FAILURE;
   3678                }
   3679                break;
   3680          
   3681          #ifdef SE_UK_EXT
   3682              case COMMAND_ALARMS_PUBLISH_EVENT_LOG:
   3683                if ( pCBs->pfnPublishEventLog )
   3684                {
   3685                  zclPublishEventLog_t eventLog;
   3686          
   3687                  eventLog.logID = *pData++;
   3688                  eventLog.cmdIndex = *pData++;
   3689                  eventLog.totalCmds = *pData++;
   3690          
   3691                  // First try to find out number of Sub Log Payloads
   3692                  eventLog.numSubLogs = (pInMsg->pDataLen-3)/(1+4); // event ID + event time
   3693                  if ( eventLog.numSubLogs > 0 )
   3694                  {
   3695                    // Try to alloc space for Log Payload
   3696                    eventLog.pLogs = (zclEventLogPayload_t *)zcl_mem_alloc( sizeof( zclEventLogPayload_t ) *
   3697                                                                             eventLog.numSubLogs );
   3698                    if ( eventLog.pLogs != NULL )
   3699                    {
   3700                      // Copy Log Payload
   3701                      for ( uint8 i = 0; i < eventLog.numSubLogs; i++ )
   3702                      {
   3703                        eventLog.pLogs[i].eventId = *pData++;
   3704                        eventLog.pLogs[i].eventTime = zcl_build_uint32( pData, 4 );
   3705                        pData += 4;
   3706                      }
   3707                    }
   3708                    else
   3709                    {
   3710                      stat = ZCL_STATUS_SOFTWARE_FAILURE;
   3711                    }
   3712                  }
   3713                  else
   3714                  {
   3715                    eventLog.pLogs = NULL;
   3716                  }
   3717          
   3718                  if ( stat == ZSuccess )
   3719                  {
   3720                    pCBs->pfnPublishEventLog( &(pInMsg->msg->srcAddr), &eventLog );
   3721                  }
   3722          
   3723                  if ( eventLog.pLogs != NULL )
   3724                  {
   3725                    zcl_mem_free( eventLog.pLogs );
   3726                  }
   3727                }
   3728                break;
   3729          #endif // SE_UK_EXT
   3730          
   3731              default:
   3732                stat = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   3733                break;
   3734            }
   3735          
   3736            return ( stat );
   3737          }
   3738          
   3739          /*********************************************************************
   3740           * @fn      zclGeneral_ProcessInAlarmsClient
   3741           *
   3742           * @brief   Process in the received Alarms Command.
   3743           *
   3744           * @param   pInMsg - pointer to the incoming message
   3745           *
   3746           * @return  ZStatus_t
   3747           */
   3748          static ZStatus_t zclGeneral_ProcessInAlarmsClient( zclIncoming_t *pInMsg,
   3749                                                             zclGeneral_AppCallbacks_t *pCBs )
   3750          {
   3751            uint8 *pData = pInMsg->pData;
   3752            zclAlarm_t alarm;
   3753            ZStatus_t stat = ZSuccess;
   3754          
   3755            zcl_memset( (uint8*)&alarm, 0, sizeof( zclAlarm_t ) );
   3756          
   3757            switch ( pInMsg->hdr.commandID )
   3758            {
   3759              case COMMAND_ALARMS_ALARM:
   3760                if ( pCBs->pfnAlarm )
   3761                {
   3762                  alarm.srcAddr = &(pInMsg->msg->srcAddr);
   3763                  alarm.cmdID = pInMsg->hdr.commandID;
   3764                  alarm.alarmCode = pData[0];
   3765                  alarm.clusterID = BUILD_UINT16( pData[1], pData[2] );
   3766          
   3767                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3768                }
   3769                else
   3770                {
   3771                  stat = ZCL_STATUS_FAILURE;
   3772                }
   3773                break;
   3774          
   3775              case COMMAND_ALARMS_GET_RSP:
   3776                if ( pCBs->pfnAlarm )
   3777                {
   3778                  alarm.srcAddr = &(pInMsg->msg->srcAddr);
   3779                  alarm.cmdID = pInMsg->hdr.commandID;
   3780                  alarm.alarmCode = *pData++;
   3781                  alarm.clusterID = BUILD_UINT16( pData[0], pData[1] );
   3782          
   3783                  pCBs->pfnAlarm( pInMsg->hdr.fc.direction, &alarm );
   3784                }
   3785                else
   3786                {
   3787                  stat = ZCL_STATUS_FAILURE;
   3788                }
   3789                break;
   3790          
   3791          #ifdef SE_UK_EXT
   3792              case COMMAND_ALARMS_GET_EVENT_LOG:
   3793                if ( pCBs->pfnGetEventLog )
   3794                {
   3795                  zclGetEventLog_t eventLog;
   3796          
   3797                  eventLog.logID = *pData++;
   3798                  eventLog.startTime = zcl_build_uint32( pData, 4 );
   3799                  pData += 4;
   3800                  eventLog.endTime = zcl_build_uint32( pData, 4 );
   3801                  pData += 4;
   3802                  eventLog.numEvents = *pData;
   3803          
   3804                  pCBs->pfnGetEventLog( pInMsg->msg->endPoint, &(pInMsg->msg->srcAddr),
   3805                                        &eventLog, pInMsg->hdr.transSeqNum );
   3806                }
   3807                break;
   3808          #endif // SE_UK_EXT
   3809          
   3810              default:
   3811                stat = ZCL_STATUS_UNSUP_CLUSTER_COMMAND;
   3812                break;
   3813            }
   3814          
   3815            return ( stat );
   3816          }
   3817          #endif // ZCL_ALARMS
   3818          
   3819          #ifdef ZCL_LOCATION
   3820          /*********************************************************************
   3821           * @fn      zclGeneral_ProcessInLocationServer
   3822           *
   3823           * @brief   Process in the received Location Command.
   3824           *
   3825           * @param   pInMsg - pointer to the incoming message
   3826           *
   3827           * @return  ZStatus_t
   3828           */
   3829          static ZStatus_t zclGeneral_ProcessInLocationServer( zclIncoming_t *pInMsg,
   3830                                                               zclGeneral_AppCallbacks_t *pCBs )
   3831          {
   3832            uint8 *pData = pInMsg->pData;
   3833            zclLocation_t cmd;
   3834            ZStatus_t stat = ZSuccess;
   3835          
   3836            zcl_memset( (uint8*)&cmd, 0, sizeof( zclLocation_t ) );
   3837          
   3838            switch ( pInMsg->hdr.commandID )
   3839            {
   3840              case COMMAND_LOCATION_SET_ABSOLUTE:
   3841                cmd.un.absLoc.coordinate1 = BUILD_UINT16( pData[0], pData[1] );
   3842                pData += 2;
   3843                cmd.un.absLoc.coordinate2 = BUILD_UINT16( pData[0], pData[1] );
   3844                pData += 2;
   3845                cmd.un.absLoc.coordinate3 = BUILD_UINT16( pData[0], pData[1] );
   3846                pData += 2;
   3847                cmd.un.absLoc.power = BUILD_UINT16( pData[0], pData[1] );
   3848                pData += 2;
   3849                cmd.un.absLoc.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3850          
   3851                if ( pCBs->pfnLocation )
   3852                {
   3853                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3854                  cmd.cmdID = pInMsg->hdr.commandID;
   3855          
   3856                  // Update the absolute location info
   3857                  pCBs->pfnLocation( &cmd );
   3858                }
   3859                break;
   3860          
   3861              case COMMAND_LOCATION_SET_DEV_CFG:
   3862                cmd.un.devCfg.power = BUILD_UINT16( pData[0], pData[1] );
   3863                pData += 2;
   3864                cmd.un.devCfg.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3865                pData += 2;
   3866                cmd.un.devCfg.calcPeriod = BUILD_UINT16( pData[0], pData[1] );
   3867                pData += 2;
   3868                cmd.un.devCfg.numMeasurements = *pData++;
   3869                cmd.un.devCfg.reportPeriod = BUILD_UINT16( pData[0], pData[1] );
   3870          
   3871                if ( pCBs->pfnLocation )
   3872                {
   3873                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3874                  cmd.cmdID = pInMsg->hdr.commandID;
   3875          
   3876                  // Update the device configuration info
   3877                  pCBs->pfnLocation( &cmd );
   3878                }
   3879                break;
   3880          
   3881              case COMMAND_LOCATION_GET_DEV_CFG:
   3882                cmd.un.ieeeAddr = pData;
   3883          
   3884                if ( pCBs->pfnLocation )
   3885                {
   3886                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3887                  cmd.cmdID = pInMsg->hdr.commandID;
   3888                  cmd.seqNum = pInMsg->hdr.transSeqNum;
   3889          
   3890                  // Retreive the Device Configuration
   3891                  pCBs->pfnLocation( &cmd );
   3892                }
   3893                stat = ZCL_STATUS_CMD_HAS_RSP;
   3894                break;
   3895          
   3896              case COMMAND_LOCATION_GET_DATA:
   3897                cmd.un.loc.bitmap.locByte = *pData++;
   3898                cmd.un.loc.numResponses = *pData++;
   3899          
   3900                if ( cmd.un.loc.brdcastResponse == 0 ) // command is sent as a unicast
   3901                  zcl_memcpy( cmd.un.loc.targetAddr, pData, 8 );
   3902          
   3903                if ( pCBs->pfnLocation )
   3904                {
   3905                  cmd.srcAddr = &(pInMsg->msg->srcAddr);
   3906                  cmd.cmdID = pInMsg->hdr.commandID;
   3907                  cmd.seqNum = pInMsg->hdr.transSeqNum;
   3908          
   3909                  // Retreive the Location Data
   3910                  pCBs->pfnLocation( &cmd );
   3911                }
   3912                stat = ZCL_STATUS_CMD_HAS_RSP;
   3913                break;
   3914          
   3915              default:
   3916                stat = ZFailure;
   3917                break;
   3918            }
   3919          
   3920            return ( stat );
   3921          }
   3922          
   3923          /*********************************************************************
   3924           * @fn      zclGeneral_ProcessInLocationDataRsp
   3925           *
   3926           * @brief   Process in the received Location Command.
   3927           *
   3928           * @param   pInMsg - pointer to the incoming message
   3929           *
   3930           * @return  ZStatus_t
   3931           */
   3932          static void zclGeneral_ProcessInLocationDataRsp( zclIncoming_t *pInMsg,
   3933                                                           zclGeneral_AppCallbacks_t *pCBs )
   3934          {
   3935            uint8 *pData = pInMsg->pData;
   3936            zclLocationRsp_t rsp;
   3937          
   3938            zcl_memset( (uint8*)&rsp, 0, sizeof( zclLocationRsp_t ) );
   3939          
   3940            if ( pCBs->pfnLocationRsp )
   3941            {
   3942              if ( pInMsg->hdr.commandID == COMMAND_LOCATION_DATA_RSP )
   3943                rsp.un.loc.status = *pData++;
   3944          
   3945              if ( pInMsg->hdr.commandID != COMMAND_LOCATION_DATA_RSP ||
   3946                   rsp.un.loc.status == ZCL_STATUS_SUCCESS )
   3947              {
   3948                rsp.un.loc.data.type = *pData++;
   3949                rsp.un.loc.data.absLoc.coordinate1 = BUILD_UINT16( pData[0], pData[1] );
   3950                pData += 2;
   3951                rsp.un.loc.data.absLoc.coordinate2 = BUILD_UINT16( pData[0], pData[1] );
   3952                pData += 2;
   3953          
   3954                if ( locationType2D( rsp.un.loc.data.type ) == 0 )
   3955                {
   3956                  rsp.un.loc.data.absLoc.coordinate3 = BUILD_UINT16( pData[0], pData[1] );
   3957                  pData += 2;
   3958                }
   3959          
   3960                if ( pInMsg->hdr.commandID != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   3961                {
   3962                  rsp.un.loc.data.absLoc.power = BUILD_UINT16( pData[0], pData[1] );
   3963                  pData += 2;
   3964                  rsp.un.loc.data.absLoc.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   3965                  pData += 2;
   3966                }
   3967          
   3968                if ( locationTypeAbsolute( rsp.un.loc.data.type ) == 0 )
   3969                {
   3970                  if ( pInMsg->hdr.commandID != COMMAND_LOCATION_COMPACT_DATA_NOTIF )
   3971                    rsp.un.loc.data.calcLoc.locationMethod = *pData++;
   3972          
   3973                  rsp.un.loc.data.calcLoc.qualityMeasure = *pData++;
   3974                  rsp.un.loc.data.calcLoc.locationAge = BUILD_UINT16( pData[0], pData[1] );
   3975                }
   3976              }
   3977          
   3978              rsp.srcAddr = &(pInMsg->msg->srcAddr);
   3979              rsp.cmdID = pInMsg->hdr.commandID;
   3980          
   3981              // Notify the Application
   3982              pCBs->pfnLocationRsp( &rsp );
   3983            }
   3984          }
   3985          
   3986          /*********************************************************************
   3987           * @fn      zclGeneral_ProcessInLocationClient
   3988           *
   3989           * @brief   Process in the received Location Command.
   3990           *
   3991           * @param   pInMsg - pointer to the incoming message
   3992           *
   3993           * @return  ZStatus_t
   3994           */
   3995          static ZStatus_t zclGeneral_ProcessInLocationClient( zclIncoming_t *pInMsg,
   3996                                                               zclGeneral_AppCallbacks_t *pCBs )
   3997          {
   3998            uint8 *pData = pInMsg->pData;
   3999            zclLocationRsp_t rsp;
   4000            ZStatus_t stat = ZSuccess;
   4001          
   4002            zcl_memset( (uint8*)&rsp, 0, sizeof( zclLocationRsp_t ) );
   4003          
   4004            switch ( pInMsg->hdr.commandID )
   4005            {
   4006              case COMMAND_LOCATION_DEV_CFG_RSP:
   4007                if ( pCBs->pfnLocationRsp )
   4008                {
   4009                  rsp.un.devCfg.status = *pData++;
   4010                  if ( rsp.un.devCfg.status == ZCL_STATUS_SUCCESS )
   4011                  {
   4012                    rsp.un.devCfg.data.power = BUILD_UINT16( pData[0], pData[1] );
   4013                    pData += 2;
   4014                    rsp.un.devCfg.data.pathLossExponent = BUILD_UINT16( pData[0], pData[1] );
   4015                    pData += 2;
   4016                    rsp.un.devCfg.data.calcPeriod = BUILD_UINT16( pData[0], pData[1] );
   4017                    pData += 2;
   4018                    rsp.un.devCfg.data.numMeasurements = *pData++;
   4019                    rsp.un.devCfg.data.reportPeriod = BUILD_UINT16( pData[0], pData[1] );
   4020          
   4021                    rsp.srcAddr = &(pInMsg->msg->srcAddr);
   4022                    rsp.cmdID = pInMsg->hdr.commandID;
   4023          
   4024                    // Notify the Application
   4025                    pCBs->pfnLocationRsp( &rsp );
   4026                  }
   4027                }
   4028                break;
   4029          
   4030              case COMMAND_LOCATION_DATA_RSP:
   4031              case COMMAND_LOCATION_DATA_NOTIF:
   4032              case COMMAND_LOCATION_COMPACT_DATA_NOTIF:
   4033                zclGeneral_ProcessInLocationDataRsp( pInMsg, pCBs );
   4034                break;
   4035          
   4036              case COMMAND_LOCATION_RSSI_PING:
   4037                if ( pCBs->pfnLocationRsp )
   4038                {
   4039                  rsp.un.locationType = *pData;
   4040          
   4041                  rsp.srcAddr = &(pInMsg->msg->srcAddr);
   4042                  rsp.cmdID = pInMsg->hdr.commandID;
   4043          
   4044                  // Notify the Application
   4045                  pCBs->pfnLocationRsp( &rsp );
   4046                }
   4047                break;
   4048          
   4049              default:
   4050                stat = ZFailure;
   4051                break;
   4052            }
   4053          
   4054            return ( stat );
   4055          }
   4056          #endif // ZCL_LOCATION
   4057          
   4058          #ifdef ZCL_SCENES
   4059          #if !defined ( ZCL_STANDALONE )
   4060          /*********************************************************************
   4061           * @fn      zclGeneral_ScenesInitNV
   4062           *
   4063           * @brief   Initialize the NV Scene Table Items
   4064           *
   4065           * @param   none
   4066           *
   4067           * @return  number of scenes
   4068           */
   4069          static uint8 zclGeneral_ScenesInitNV( void )
   4070          {
   4071            uint8  status;
   4072            uint16 size;
   4073          
   4074            size = (uint16)((sizeof ( nvGenScenesHdr_t ))
   4075                            + ( sizeof( zclGenSceneNVItem_t ) * ZCL_GEN_MAX_SCENES ));
   4076          
   4077            status = zcl_nv_item_init( ZCD_NV_SCENE_TABLE, size, NULL );
   4078          
   4079            if ( status != ZSUCCESS )
   4080            {
   4081              zclGeneral_ScenesSetDefaultNV();
   4082            }
   4083          
   4084            return status;
   4085          }
   4086          #endif // ZCL_STANDALONE
   4087          
   4088          #if !defined ( ZCL_STANDALONE )
   4089          /*********************************************************************
   4090           * @fn          zclGeneral_ScenesSetDefaultNV
   4091           *
   4092           * @brief       Write the defaults to NV
   4093           *
   4094           * @param       none
   4095           *
   4096           * @return      none
   4097           */
   4098          static void zclGeneral_ScenesSetDefaultNV( void )
   4099          {
   4100            nvGenScenesHdr_t hdr;
   4101          
   4102            // Initialize the header
   4103            hdr.numRecs = 0;
   4104          
   4105            // Save off the header
   4106            zcl_nv_write( ZCD_NV_SCENE_TABLE, 0, sizeof( nvGenScenesHdr_t ), &hdr );
   4107          }
   4108          #endif // ZCL_STANDALONE
   4109          
   4110          #if !defined ( ZCL_STANDALONE )
   4111          /*********************************************************************
   4112           * @fn          zclGeneral_ScenesWriteNV
   4113           *
   4114           * @brief       Save the Scene Table in NV
   4115           *
   4116           * @param       none
   4117           *
   4118           * @return      none
   4119           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4120          static void zclGeneral_ScenesWriteNV( void )
   \                     zclGeneral_ScenesWriteNV:
   4121          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 58
   \   000005   74C6         MOV     A,#-0x3a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   4122            nvGenScenesHdr_t hdr;
   4123            zclGenSceneItem_t *pLoop;
   4124            zclGenSceneNVItem_t item;
   4125          
   4126            hdr.numRecs = 0;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   E4           CLR     A
   \   000011   F0           MOVX    @DPTR,A
   \   000012   A3           INC     DPTR
   \   000013   F0           MOVX    @DPTR,A
   4127          
   4128            // Look for end of list
   4129            pLoop = zclGenSceneTable;
   \   000014   90....       MOV     DPTR,#zclGenSceneTable
   \   000017   E0           MOVX    A,@DPTR
   \   000018   FE           MOV     R6,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   02....       LJMP    ??zclGeneral_ScenesWriteNV_0 & 0xFFFF
   4130            while ( pLoop )
   4131            {
   4132              // Build the record
   4133              item.endpoint = pLoop->endpoint;
   \                     ??zclGeneral_ScenesWriteNV_1:
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   A3           INC     DPTR
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   C0E0         PUSH    A
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   D0E0         POP     A
   \   00002E   12....       LCALL   ?Subroutine65 & 0xFFFF
   4134              zcl_memcpy( &(item.scene), &(pLoop->scene), sizeof ( zclGeneral_Scene_t ) );
   \                     ??CrossCallReturnLabel_106:
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A982         MOV     R1,DPL
   \   000035   AA83         MOV     R2,DPH
   \   000037   89..         MOV     ?V0 + 0,R1
   \   000039   8A..         MOV     ?V0 + 1,R2
   \   00003B   75..00       MOV     ?V0 + 2,#0x0
   \   00003E   78..         MOV     R0,#?V0 + 0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000043   7C37         MOV     R4,#0x37
   \   000045   7D00         MOV     R5,#0x0
   \   000047   7406         MOV     A,#0x6
   \   000049   12....       LCALL   ?XSTACK_DISP0_8
   \   00004C   AA82         MOV     R2,DPL
   \   00004E   AB83         MOV     R3,DPH
   \   000050   12....       LCALL   ??osal_memcpy?relay
   \   000053   7403         MOV     A,#0x3
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
   4135          
   4136              // Save the record to NV
   4137              zcl_nv_write( ZCD_NV_SCENE_TABLE,
   4138                      (uint16)((sizeof( nvGenScenesHdr_t )) + (hdr.numRecs * sizeof ( zclGenSceneNVItem_t ))),
   4139                              sizeof ( zclGenSceneNVItem_t ), &item );
   \   000058                ; Setup parameters for call to function osal_nv_write
   \   000058   7402         MOV     A,#0x2
   \   00005A   12....       LCALL   ?XSTACK_DISP0_8
   \   00005D   8582..       MOV     ?V0 + 0,DPL
   \   000060   8583..       MOV     ?V0 + 1,DPH
   \   000063   78..         MOV     R0,#?V0 + 0
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000068   75..38       MOV     ?V0 + 0,#0x38
   \   00006B   75..00       MOV     ?V0 + 1,#0x0
   \   00006E   78..         MOV     R0,#?V0 + 0
   \   000070   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000073   7404         MOV     A,#0x4
   \   000075   12....       LCALL   ?XSTACK_DISP0_8
   \   000078   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   00007B   75F038       MOV     B,#0x38
   \   00007E   A4           MUL     AB
   \   00007F   F8           MOV     R0,A
   \   000080   AAF0         MOV     R2,B
   \   000082   75F038       MOV     B,#0x38
   \   000085   E9           MOV     A,R1
   \   000086   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000089   12....       LCALL   ??osal_nv_write?relay
   \   00008C   7404         MOV     A,#0x4
   \   00008E   12....       LCALL   ?DEALLOC_XSTACK8
   4140          
   4141              hdr.numRecs++;
   \   000091   85..82       MOV     DPL,?XSP + 0
   \   000094   85..83       MOV     DPH,?XSP + 1
   \   000097   E0           MOVX    A,@DPTR
   \   000098   2401         ADD     A,#0x1
   \   00009A   F0           MOVX    @DPTR,A
   \   00009B   A3           INC     DPTR
   \   00009C   E0           MOVX    A,@DPTR
   \   00009D   3400         ADDC    A,#0x0
   \   00009F   F0           MOVX    @DPTR,A
   4142          
   4143              pLoop = pLoop->next;
   \   0000A0   8E82         MOV     DPL,R6
   \   0000A2   8F83         MOV     DPH,R7
   \   0000A4   12....       LCALL   ?Subroutine46 & 0xFFFF
   4144            }
   \                     ??CrossCallReturnLabel_64:
   \   0000A7   FE           MOV     R6,A
   \   0000A8   E9           MOV     A,R1
   \                     ??zclGeneral_ScenesWriteNV_0:
   \   0000A9   FF           MOV     R7,A
   \   0000AA   EE           MOV     A,R6
   \   0000AB   4F           ORL     A,R7
   \   0000AC   6003         JZ      $+5
   \   0000AE   02....       LJMP    ??zclGeneral_ScenesWriteNV_1 & 0xFFFF
   4145          
   4146            // Save off the header
   4147            zcl_nv_write( ZCD_NV_SCENE_TABLE, 0, sizeof( nvGenScenesHdr_t ), &hdr );
   \   0000B1                ; Setup parameters for call to function osal_nv_write
   \   0000B1   85..82       MOV     DPL,?XSP + 0
   \   0000B4   85..83       MOV     DPH,?XSP + 1
   \   0000B7   8582..       MOV     ?V0 + 0,DPL
   \   0000BA   8583..       MOV     ?V0 + 1,DPH
   \   0000BD   78..         MOV     R0,#?V0 + 0
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C2   75..02       MOV     ?V0 + 0,#0x2
   \   0000C5   75..00       MOV     ?V0 + 1,#0x0
   \   0000C8   78..         MOV     R0,#?V0 + 0
   \   0000CA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CD   7C00         MOV     R4,#0x0
   \   0000CF   7D00         MOV     R5,#0x0
   \   0000D1   7A91         MOV     R2,#-0x6f
   \   0000D3   7B00         MOV     R3,#0x0
   \   0000D5   12....       LCALL   ??osal_nv_write?relay
   \   0000D8   7404         MOV     A,#0x4
   \   0000DA   12....       LCALL   ?DEALLOC_XSTACK8
   4148          }
   \   0000DD   743A         MOV     A,#0x3a
   \   0000DF   02....       LJMP    ??Subroutine107_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   A4           MUL     AB
   \   000001   2A           ADD     A,R2
   \   000002   F9           MOV     R1,A
   \   000003   E8           MOV     A,R0
   \   000004   2402         ADD     A,#0x2
   \   000006   FC           MOV     R4,A
   \   000007   E9           MOV     A,R1
   \   000008   3400         ADDC    A,#0x0
   \   00000A   FD           MOV     R5,A
   \   00000B   7A91         MOV     R2,#-0x6f
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   22           RET
   4149          #endif // ZCL_STANDALONE
   4150          
   4151          #if !defined ( ZCL_STANDALONE )
   4152          /*********************************************************************
   4153           * @fn          zclGeneral_ScenesRestoreFromNV
   4154           *
   4155           * @brief       Restore the Scene table from NV
   4156           *
   4157           * @param       none
   4158           *
   4159           * @return      Number of entries restored
   4160           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4161          static uint16 zclGeneral_ScenesRestoreFromNV( void )
   \                     zclGeneral_ScenesRestoreFromNV:
   4162          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 58
   \   000005   74C6         MOV     A,#-0x3a
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   4163            uint16 x;
   4164            nvGenScenesHdr_t hdr;
   4165          
   4166            zclGenSceneNVItem_t item;
   4167            uint16 numAdded = 0;
   \   00000A   7E00         MOV     R6,#0x0
   \   00000C   7F00         MOV     R7,#0x0
   4168          
   4169            if ( zcl_nv_read( ZCD_NV_SCENE_TABLE, 0, sizeof(nvGenScenesHdr_t), &hdr ) == ZSuccess )
   \   00000E                ; Setup parameters for call to function osal_nv_read
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   8582..       MOV     ?V0 + 0,DPL
   \   000017   8583..       MOV     ?V0 + 1,DPH
   \   00001A   78..         MOV     R0,#?V0 + 0
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   75..02       MOV     ?V0 + 0,#0x2
   \   000022   8E..         MOV     ?V0 + 1,R6
   \   000024   78..         MOV     R0,#?V0 + 0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7C00         MOV     R4,#0x0
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7A91         MOV     R2,#-0x6f
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   12....       LCALL   ??osal_nv_read?relay
   \   000034   7404         MOV     A,#0x4
   \   000036   12....       LCALL   ?DEALLOC_XSTACK8
   \   000039   E9           MOV     A,R1
   \   00003A   7077         JNZ     ??zclGeneral_ScenesRestoreFromNV_0
   4170            {
   4171              // Read in the device list
   4172              for ( x = 0; x < hdr.numRecs; x++ )
   \   00003C   8E..         MOV     ?V0 + 0,R6
   \   00003E   8061         SJMP    ??zclGeneral_ScenesRestoreFromNV_1
   4173              {
   4174                if ( zcl_nv_read( ZCD_NV_SCENE_TABLE,
   4175                          (uint16)(sizeof(nvGenScenesHdr_t) + (x * sizeof ( zclGenSceneNVItem_t ))),
   4176                                            sizeof ( zclGenSceneNVItem_t ), &item ) == ZSUCCESS )
   \                     ??zclGeneral_ScenesRestoreFromNV_2:
   \   000040                ; Setup parameters for call to function osal_nv_read
   \   000040   7402         MOV     A,#0x2
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   8582..       MOV     ?V0 + 2,DPL
   \   000048   8583..       MOV     ?V0 + 3,DPH
   \   00004B   78..         MOV     R0,#?V0 + 2
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   75..38       MOV     ?V0 + 2,#0x38
   \   000053   75..00       MOV     ?V0 + 3,#0x0
   \   000056   78..         MOV     R0,#?V0 + 2
   \   000058   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005B   E5..         MOV     A,?V0 + 0
   \   00005D   75F038       MOV     B,#0x38
   \   000060   A4           MUL     AB
   \   000061   F8           MOV     R0,A
   \   000062   AAF0         MOV     R2,B
   \   000064   75F038       MOV     B,#0x38
   \   000067   E5..         MOV     A,?V0 + 1
   \   000069   12....       LCALL   ?Subroutine68 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00006C   12....       LCALL   ??osal_nv_read?relay
   \   00006F   7404         MOV     A,#0x4
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   \   000074   E9           MOV     A,R1
   \   000075   701E         JNZ     ??zclGeneral_ScenesRestoreFromNV_3
   4177                {
   4178                  // Add the scene
   4179                  if ( zclGeneral_AddScene( item.endpoint, &(item.scene) ) == ZSuccess )
   \   000077                ; Setup parameters for call to function zclGeneral_AddScene
   \   000077   7403         MOV     A,#0x3
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   AA82         MOV     R2,DPL
   \   00007E   AB83         MOV     R3,DPH
   \   000080   7402         MOV     A,#0x2
   \   000082   12....       LCALL   ?XSTACK_DISP0_8
   \   000085   E0           MOVX    A,@DPTR
   \   000086   F9           MOV     R1,A
   \   000087   12....       LCALL   ??zclGeneral_AddScene?relay
   \   00008A   E9           MOV     A,R1
   \   00008B   7008         JNZ     ??zclGeneral_ScenesRestoreFromNV_3
   4180                  {
   4181                    numAdded++;
   \   00008D   EE           MOV     A,R6
   \   00008E   2401         ADD     A,#0x1
   \   000090   0E           INC     R6
   \   000091   EF           MOV     A,R7
   \   000092   3400         ADDC    A,#0x0
   \   000094   FF           MOV     R7,A
   4182                  }
   4183                }
   4184              }
   \                     ??zclGeneral_ScenesRestoreFromNV_3:
   \   000095   E5..         MOV     A,?V0 + 0
   \   000097   2401         ADD     A,#0x1
   \   000099   F5..         MOV     ?V0 + 0,A
   \   00009B   E5..         MOV     A,?V0 + 1
   \   00009D   3400         ADDC    A,#0x0
   \   00009F   F5..         MOV     ?V0 + 1,A
   \                     ??zclGeneral_ScenesRestoreFromNV_1:
   \   0000A1   85..82       MOV     DPL,?XSP + 0
   \   0000A4   85..83       MOV     DPH,?XSP + 1
   \   0000A7   12....       LCALL   ?Subroutine48 & 0xFFFF
   4185            }
   \                     ??CrossCallReturnLabel_77:
   \   0000AA   C3           CLR     C
   \   0000AB   E5..         MOV     A,?V0 + 0
   \   0000AD   98           SUBB    A,R0
   \   0000AE   E5..         MOV     A,?V0 + 1
   \   0000B0   99           SUBB    A,R1
   \   0000B1   408D         JC      ??zclGeneral_ScenesRestoreFromNV_2
   4186          
   4187            return ( numAdded );
   \                     ??zclGeneral_ScenesRestoreFromNV_0:
   \   0000B3   EE           MOV     A,R6
   \   0000B4   FA           MOV     R2,A
   \   0000B5   EF           MOV     A,R7
   \   0000B6   FB           MOV     R3,A
   \   0000B7   743A         MOV     A,#0x3a
   \   0000B9   02....       LJMP    ??Subroutine108_0 & 0xFFFF
   4188          }
   4189          #endif // ZCL_STANDALONE
   4190          
   4191          #if !defined ( ZCL_STANDALONE )
   4192          /*********************************************************************
   4193           * @fn          zclGeneral_ScenesInit
   4194           *
   4195           * @brief       Initialize the scenes table
   4196           *
   4197           * @param       none
   4198           *
   4199           * @return      none
   4200           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4201          void zclGeneral_ScenesInit( void )
   \                     zclGeneral_ScenesInit:
   4202          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   4203            // Initialize NV items
   4204            zclGeneral_ScenesInitNV();
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   E4           CLR     A
   \   00000B   F5..         MOV     ?V0 + 0,A
   \   00000D   F5..         MOV     ?V0 + 1,A
   \   00000F   78..         MOV     R0,#?V0 + 0
   \   000011   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000014   7C82         MOV     R4,#-0x7e
   \   000016   7D03         MOV     R5,#0x3
   \   000018   7A91         MOV     R2,#-0x6f
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   12....       LCALL   ??osal_nv_item_init?relay
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   E9           MOV     A,R1
   \   000025   602A         JZ      ??zclGeneral_ScenesInit_0
   \   000027   85..82       MOV     DPL,?XSP + 0
   \   00002A   85..83       MOV     DPH,?XSP + 1
   \   00002D   E4           CLR     A
   \   00002E   F0           MOVX    @DPTR,A
   \   00002F   A3           INC     DPTR
   \   000030   12....       LCALL   ??Subroutine102_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_162:
   \   000033   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000036   75..02       MOV     ?V0 + 0,#0x2
   \   000039   75..00       MOV     ?V0 + 1,#0x0
   \   00003C   78..         MOV     R0,#?V0 + 0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   7C00         MOV     R4,#0x0
   \   000043   7D00         MOV     R5,#0x0
   \   000045   7A91         MOV     R2,#-0x6f
   \   000047   7B00         MOV     R3,#0x0
   \   000049   12....       LCALL   ??osal_nv_write?relay
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?DEALLOC_XSTACK8
   4205          
   4206            // Restore the Scene table
   4207            zclGeneral_ScenesRestoreFromNV();
   \                     ??zclGeneral_ScenesInit_0:
   \   000051                ; Setup parameters for call to function zclGeneral_ScenesRestoreFromNV
   \   000051   12....       LCALL   ??zclGeneral_ScenesRestoreFromNV?relay
   4208          }
   \   000054   02....       LJMP    ??Subroutine135_0 & 0xFFFF
   4209          #endif // ZCL_STANDALONE
   4210          
   4211          #if !defined ( ZCL_STANDALONE )
   4212          /*********************************************************************
   4213           * @fn          zclGeneral_ScenesSave
   4214           *
   4215           * @brief       Save the scenes table
   4216           *
   4217           * @param       none
   4218           *
   4219           * @return      none
   4220           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   4221          void zclGeneral_ScenesSave( void )
   \                     zclGeneral_ScenesSave:
   4222          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   4223            // Update NV
   4224            zclGeneral_ScenesWriteNV();
   \   000004                ; Setup parameters for call to function zclGeneral_ScenesWriteNV
   \   000004   12....       LCALL   ??zclGeneral_ScenesWriteNV?relay
   4225          }
   \   000007   02....       LJMP    ?Subroutine7 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_RegisterCmdCallbacks?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_RegisterCmdCallbacks

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendIdentify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendIdentify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendIdentifyEZModeInvoke?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendIdentifyEZModeInvoke

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendIdentifyUpdateCommState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendIdentifyUpdateCommState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendIdentifyTriggerEffect?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendIdentifyTriggerEffect

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendIdentifyQueryResponse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendIdentifyQueryResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendGroupRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendGroupRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendAddGroupRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendAddGroupRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendGroupGetMembershipRequest?rela:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendGroupGetMembershipRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendGroupResponse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendGroupResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendGroupViewResponse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendGroupViewResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendAddSceneRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendAddSceneRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendSceneRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendSceneRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendSceneResponse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendSceneResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendSceneViewRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendSceneViewRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendSceneGetMembershipResponse?rel:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendSceneGetMembershipResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendSceneCopy?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendSceneCopy

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendSceneCopyResponse?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendSceneCopyResponse

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendOnOff_CmdOffWithEffect?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendOnOff_CmdOffWithEffect

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendOnOff_CmdOnWithTimedOff?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendOnOff_CmdOnWithTimedOff

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendLevelControlMoveToLevelRequest:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendLevelControlMoveToLevelRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendLevelControlMoveRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendLevelControlMoveRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendLevelControlStepRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendLevelControlStepRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_SendLevelControlStopRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_SendLevelControlStopRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_FindCallbacks?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_FindCallbacks

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_HdlIncoming?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_HdlIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_HdlInSpecificCommands?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_HdlInSpecificCommands

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_ProcessInIdentity?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInIdentity

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_AddGroup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_AddGroup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_ProcessInGroupsServer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInGroupsServer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_ProcessInGroupsClient?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInGroupsClient

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_AddScene?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_AddScene

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_FindScene?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_FindScene

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_FindAllScenesForGroup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_FindAllScenesForGroup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_RemoveScene?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_RemoveScene

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_RemoveAllScenes?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_RemoveAllScenes

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_CountScenes?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_CountScenes

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_CountAllScenes?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_CountAllScenes

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_ReadSceneCountCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ReadSceneCountCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_ProcessInScenesServer?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInScenesServer

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_ProcessInScenesClient?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInScenesClient

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_ProcessInOnOff?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInOnOff

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_ProcessInLevelControl?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ProcessInLevelControl

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_ScenesWriteNV?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ScenesWriteNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_ScenesRestoreFromNV?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ScenesRestoreFromNV

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_ScenesInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ScenesInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclGeneral_ScenesSave?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclGeneral_ScenesSave
   4226          #endif // ZCL_STANDALONE
   4227          
   4228          #endif // ZCL_SCENES
   4229          
   4230          /***************************************************************************
   4231          ****************************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       1      0     66  zclGeneral_AddGroup
                          0 0 20 -> aps_AddGroup
                          0 0 23 -> osal_memcpy
                          0 0 24 -> zcl_ReadAttrData
       1      0    105  zclGeneral_AddScene
                          0 0 15 -> osal_mem_alloc
                          0 0 18 -> osal_memcpy
                          0 0 15 -> zclGeneral_ScenesWriteNV
       2      0     87  zclGeneral_CountAllScenes
       2      0      0  zclGeneral_CountScenes
       1      0     97  zclGeneral_FindAllScenesForGroup
       2      0     10  zclGeneral_FindCallbacks
       0      0     96  zclGeneral_FindScene
       0      0     20  zclGeneral_HdlInSpecificCommands
                          0 0 10 -> zclGeneral_FindCallbacks
                          0 0 10 -> zclGeneral_ProcessInGroupsClient
                          0 0 10 -> zclGeneral_ProcessInGroupsServer
                          0 0 10 -> zclGeneral_ProcessInIdentity
                          0 0 10 -> zclGeneral_ProcessInLevelControl
                          0 0 10 -> zclGeneral_ProcessInOnOff
                          0 0 10 -> zclGeneral_ProcessInScenesClient
                          0 0 10 -> zclGeneral_ProcessInScenesServer
       0      0     10  zclGeneral_HdlIncoming
                          0 0 10 -> StubAPS_InterPan
                          0 0 10 -> zclGeneral_FindCallbacks
                          0 0 10 -> zclGeneral_HdlInSpecificCommands
       1      0     63  zclGeneral_ProcessInGroupsClient
                          0 0 50 -> osal_mem_alloc
                          0 0 50 -> osal_mem_free
                          0 0 53 -> osal_memcpy
                          0 0 50 -> osal_memset
       1      0     59  zclGeneral_ProcessInGroupsServer
                          0 0 42 -> aps_CountAllGroups
                          0 0 42 -> aps_FindAllGroupsForEndpoint
                          0 0 42 -> aps_FindGroup
                          0 0 42 -> aps_RemoveAllGroup
                          0 0 42 -> aps_RemoveGroup
                          0 0 42 -> osal_mem_alloc
                          0 0 42 -> osal_mem_free
                          0 0 42 -> osal_memset
                          0 0 42 -> zclGeneral_AddGroup
                          0 0 49 -> zclGeneral_SendGroupGetMembershipRequest
                          0 0 46 -> zclGeneral_SendGroupResponse
                          0 0 45 -> zclGeneral_SendGroupViewResponse
                          0 0 46 -> zcl_ReadAttrData
                          0 0 49 -> zcl_SendDefaultRspCmd
       1      0     32  zclGeneral_ProcessInIdentity
                          0 0 20 -> zclGeneral_SendIdentifyQueryResponse
                          0 0 22 -> zcl_ReadAttrData
       1      0     31  zclGeneral_ProcessInLevelControl
       1      0     30  zclGeneral_ProcessInOnOff
       1      0    100  zclGeneral_ProcessInScenesClient
                          0 0 87 -> osal_mem_alloc
                          0 0 87 -> osal_mem_free
                          0 0 90 -> osal_memcpy
                          0 0 87 -> osal_memset
       2      0    104  zclGeneral_ProcessInScenesServer
                          0 0 87 -> aps_FindGroup
                          0 0 87 -> osal_mem_alloc
                          0 0 87 -> osal_mem_free
                          0 0 90 -> osal_memcpy
                          0 0 87 -> osal_memset
                          0 0 87 -> zclGeneral_AddScene
                          0 0 87 -> zclGeneral_CountAllScenes
                          0 0 87 -> zclGeneral_FindAllScenesForGroup
                          0 0 87 -> zclGeneral_FindScene
                          0 0 87 -> zclGeneral_RemoveAllScenes
                          0 0 87 -> zclGeneral_RemoveScene
                          0 0 87 -> zclGeneral_ScenesWriteNV
                          0 0 91 -> zclGeneral_SendSceneCopyResponse
                          0 0 94 -> zclGeneral_SendSceneGetMembershipResponse
                          0 0 92 -> zclGeneral_SendSceneResponse
                          0 0 91 -> zclGeneral_SendSceneViewRsp
                          0 0 91 -> zcl_ReadAttrData
       1      0     16  zclGeneral_ReadSceneCountCB
                          0 0 12 -> zclGeneral_CountAllScenes
       1      0     14  zclGeneral_RegisterCmdCallbacks
                          0 0 12 -> osal_mem_alloc
                          0 0 12 -> zclGeneral_ScenesInit
                          0 0 14 -> zcl_registerPlugin
       0      0    100  zclGeneral_RemoveAllScenes
                          0 0 13 -> osal_mem_free
                          0 0 13 -> zclGeneral_ScenesWriteNV
       0      0     96  zclGeneral_RemoveScene
                          0 0  9 -> osal_mem_free
                          0 0  9 -> zclGeneral_ScenesWriteNV
       0      0     28  zclGeneral_ScenesInit
                          0 0 14 -> osal_nv_item_init
                          0 0 16 -> osal_nv_write
                          0 0 12 -> zclGeneral_ScenesRestoreFromNV
       0      0     86  zclGeneral_ScenesRestoreFromNV
                          0 0 74 -> osal_nv_read
                          0 0 70 -> zclGeneral_AddScene
       2      0      0  zclGeneral_ScenesSave
                          2 0  0 -> zclGeneral_ScenesWriteNV
       1      0    160  zclGeneral_ScenesWriteNV
                          0 0 72 -> osal_memcpy
                          0 0 73 -> osal_nv_write
       1      0     40  zclGeneral_SendAddGroupRequest
                          0 0 24 -> osal_mem_alloc
                          0 0 24 -> osal_mem_free
                          0 0 27 -> osal_memcpy
                          0 0 35 -> zcl_SendCommand
       1      0     41  zclGeneral_SendAddSceneRequest
                          0 0 27 -> osal_mem_alloc
                          0 0 27 -> osal_mem_free
                          0 0 30 -> osal_memcpy
                          0 0 38 -> zcl_SendCommand
       1      0     82  zclGeneral_SendGroupGetMembershipRequest
                          0 0 22 -> osal_mem_alloc
                          0 0 22 -> osal_mem_free
                          0 0 33 -> zcl_SendCommand
       1      0     28  zclGeneral_SendGroupRequest
                          0 0 25 -> zcl_SendCommand
       1      0     72  zclGeneral_SendGroupResponse
                          0 0 26 -> zcl_SendCommand
       1      0     80  zclGeneral_SendGroupViewResponse
                          0 0 24 -> osal_mem_alloc
                          0 0 24 -> osal_mem_free
                          0 0 27 -> osal_memcpy
                          0 0 35 -> zcl_SendCommand
       1      0     25  zclGeneral_SendIdentify
                          0 0 23 -> zcl_SendCommand
       1      0     24  zclGeneral_SendIdentifyEZModeInvoke
                          0 0 23 -> zcl_SendCommand
       1      0     43  zclGeneral_SendIdentifyQueryResponse
                          0 0 23 -> zcl_SendCommand
       1      0     26  zclGeneral_SendIdentifyTriggerEffect
                          0 0 24 -> zcl_SendCommand
       1      0     26  zclGeneral_SendIdentifyUpdateCommState
                          0 0 24 -> zcl_SendCommand
       1      0     27  zclGeneral_SendLevelControlMoveRequest
                          0 0 24 -> zcl_SendCommand
       1      0     30  zclGeneral_SendLevelControlMoveToLevelRequest
                          0 0 26 -> zcl_SendCommand
       1      0     32  zclGeneral_SendLevelControlStepRequest
                          0 0 27 -> zcl_SendCommand
       0      0     24  zclGeneral_SendLevelControlStopRequest
                          0 0 23 -> zcl_SendCommand
       1      0     26  zclGeneral_SendOnOff_CmdOffWithEffect
                          0 0 24 -> zcl_SendCommand
       1      0     33  zclGeneral_SendOnOff_CmdOnWithTimedOff
                          0 0 27 -> zcl_SendCommand
       1      0     37  zclGeneral_SendSceneCopy
                          0 0 30 -> zcl_SendCommand
       1      0    118  zclGeneral_SendSceneCopyResponse
                          0 0 27 -> zcl_SendCommand
       1      0    125  zclGeneral_SendSceneGetMembershipResponse
                          0 0 20 -> osal_mem_alloc
                          0 0 20 -> osal_mem_free
                          0 0 31 -> zcl_SendCommand
       1      0     30  zclGeneral_SendSceneRequest
                          0 0 26 -> zcl_SendCommand
       1      0    120  zclGeneral_SendSceneResponse
                          0 0 28 -> zcl_SendCommand
       1      0    129  zclGeneral_SendSceneViewRsp
                          0 0 27 -> osal_mem_alloc
                          0 0 27 -> osal_mem_free
                          0 0 30 -> osal_memcpy
                          0 0 38 -> zcl_SendCommand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      12  ??Subroutine102_0
      12  ??Subroutine103_0
      14  ??Subroutine104_0
       6  ??Subroutine105_0
      14  ??Subroutine106_0
       8  ??Subroutine107_0
       3  ??Subroutine108_0
       5  ??Subroutine109_0
       1  ??Subroutine110_0
       5  ??Subroutine111_0
       4  ??Subroutine112_0
       2  ??Subroutine113_0
       6  ??Subroutine114_0
       5  ??Subroutine115_0
       1  ??Subroutine116_0
       6  ??Subroutine117_0
      14  ??Subroutine118_0
       5  ??Subroutine119_0
       5  ??Subroutine120_0
      16  ??Subroutine121_0
       2  ??Subroutine122_0
       5  ??Subroutine123_0
       6  ??Subroutine124_0
       5  ??Subroutine125_0
       7  ??Subroutine126_0
       5  ??Subroutine127_0
       4  ??Subroutine128_0
       6  ??Subroutine129_0
       8  ??Subroutine130_0
       6  ??Subroutine131_0
       3  ??Subroutine132_0
       5  ??Subroutine133_0
       8  ??Subroutine134_0
       2  ??Subroutine135_0
       3  ??Subroutine136_0
       5  ??Subroutine137_0
       9  ??Subroutine138_0
       4  ??Subroutine139_0
       6  ??zclGeneral_AddGroup?relay
       6  ??zclGeneral_AddScene?relay
       6  ??zclGeneral_CountAllScenes?relay
       6  ??zclGeneral_CountScenes?relay
       6  ??zclGeneral_FindAllScenesForGroup?relay
       6  ??zclGeneral_FindCallbacks?relay
       6  ??zclGeneral_FindScene?relay
       6  ??zclGeneral_HdlInSpecificCommands?relay
       6  ??zclGeneral_HdlIncoming?relay
       6  ??zclGeneral_ProcessInGroupsClient?relay
       6  ??zclGeneral_ProcessInGroupsServer?relay
       6  ??zclGeneral_ProcessInIdentity?relay
       6  ??zclGeneral_ProcessInLevelControl?relay
       6  ??zclGeneral_ProcessInOnOff?relay
       6  ??zclGeneral_ProcessInScenesClient?relay
       6  ??zclGeneral_ProcessInScenesServer?relay
       6  ??zclGeneral_ReadSceneCountCB?relay
       6  ??zclGeneral_RegisterCmdCallbacks?relay
       6  ??zclGeneral_RemoveAllScenes?relay
       6  ??zclGeneral_RemoveScene?relay
       6  ??zclGeneral_ScenesInit?relay
       6  ??zclGeneral_ScenesRestoreFromNV?relay
       6  ??zclGeneral_ScenesSave?relay
       6  ??zclGeneral_ScenesWriteNV?relay
       6  ??zclGeneral_SendAddGroupRequest?relay
       6  ??zclGeneral_SendAddSceneRequest?relay
       6  ??zclGeneral_SendGroupGetMembershipRequest?rela
       6  ??zclGeneral_SendGroupRequest?relay
       6  ??zclGeneral_SendGroupResponse?relay
       6  ??zclGeneral_SendGroupViewResponse?relay
       6  ??zclGeneral_SendIdentify?relay
       6  ??zclGeneral_SendIdentifyEZModeInvoke?relay
       6  ??zclGeneral_SendIdentifyQueryResponse?relay
       6  ??zclGeneral_SendIdentifyTriggerEffect?relay
       6  ??zclGeneral_SendIdentifyUpdateCommState?relay
       6  ??zclGeneral_SendLevelControlMoveRequest?relay
       6  ??zclGeneral_SendLevelControlMoveToLevelRequest
       6  ??zclGeneral_SendLevelControlStepRequest?relay
       6  ??zclGeneral_SendLevelControlStopRequest?relay
       6  ??zclGeneral_SendOnOff_CmdOffWithEffect?relay
       6  ??zclGeneral_SendOnOff_CmdOnWithTimedOff?relay
       6  ??zclGeneral_SendSceneCopy?relay
       6  ??zclGeneral_SendSceneCopyResponse?relay
       6  ??zclGeneral_SendSceneGetMembershipResponse?rel
       6  ??zclGeneral_SendSceneRequest?relay
       6  ??zclGeneral_SendSceneResponse?relay
       6  ??zclGeneral_SendSceneViewRsp?relay
      14  ?Subroutine0
      27  ?Subroutine1
       5  ?Subroutine10
       5  ?Subroutine100
      15  ?Subroutine101
       3  ?Subroutine11
       4  ?Subroutine12
       6  ?Subroutine13
       8  ?Subroutine14
      18  ?Subroutine15
      21  ?Subroutine16
       7  ?Subroutine17
      26  ?Subroutine18
       3  ?Subroutine19
       7  ?Subroutine2
      22  ?Subroutine20
       9  ?Subroutine21
       9  ?Subroutine22
      13  ?Subroutine23
      17  ?Subroutine24
       4  ?Subroutine25
      19  ?Subroutine26
       6  ?Subroutine27
      11  ?Subroutine28
      21  ?Subroutine29
       4  ?Subroutine3
      21  ?Subroutine30
      13  ?Subroutine31
       4  ?Subroutine32
      12  ?Subroutine33
       6  ?Subroutine34
       7  ?Subroutine35
       5  ?Subroutine36
      13  ?Subroutine37
      11  ?Subroutine38
      14  ?Subroutine39
       3  ?Subroutine4
      16  ?Subroutine40
      12  ?Subroutine41
      17  ?Subroutine42
       6  ?Subroutine43
       6  ?Subroutine44
       7  ?Subroutine45
       4  ?Subroutine46
       4  ?Subroutine47
       4  ?Subroutine48
      22  ?Subroutine49
       5  ?Subroutine5
       4  ?Subroutine50
      11  ?Subroutine51
       1  ?Subroutine52
       1  ?Subroutine53
      11  ?Subroutine54
       9  ?Subroutine55
      15  ?Subroutine56
       3  ?Subroutine57
       6  ?Subroutine58
       4  ?Subroutine59
       5  ?Subroutine6
      11  ?Subroutine60
      11  ?Subroutine61
       7  ?Subroutine62
       4  ?Subroutine63
       1  ?Subroutine64
       7  ?Subroutine65
       9  ?Subroutine66
       5  ?Subroutine67
      16  ?Subroutine68
       3  ?Subroutine69
       7  ?Subroutine7
      22  ?Subroutine70
       4  ?Subroutine71
      16  ?Subroutine72
       5  ?Subroutine73
       4  ?Subroutine74
       4  ?Subroutine75
       9  ?Subroutine76
       9  ?Subroutine77
       1  ?Subroutine78
       5  ?Subroutine79
       5  ?Subroutine8
       8  ?Subroutine80
      16  ?Subroutine81
      12  ?Subroutine82
       6  ?Subroutine83
       6  ?Subroutine84
      10  ?Subroutine85
       9  ?Subroutine86
       8  ?Subroutine87
       9  ?Subroutine88
      12  ?Subroutine89
      17  ?Subroutine9
       8  ?Subroutine90
      13  ?Subroutine91
      11  ?Subroutine92
      10  ?Subroutine93
      10  ?Subroutine94
       7  ?Subroutine95
       6  ?Subroutine96
       8  ?Subroutine97
       6  ?Subroutine98
       9  ?Subroutine99
       2  zclGenCBs
       1  zclGenPluginRegisted
       2  zclGenSceneTable
     156  zclGeneral_AddGroup
     140  zclGeneral_AddScene
      25  zclGeneral_CountAllScenes
      35  zclGeneral_CountScenes
      81  zclGeneral_FindAllScenesForGroup
      38  zclGeneral_FindCallbacks
      77  zclGeneral_FindScene
     191  zclGeneral_HdlInSpecificCommands
     114  zclGeneral_HdlIncoming
     450  zclGeneral_ProcessInGroupsClient
     899  zclGeneral_ProcessInGroupsServer
     379  zclGeneral_ProcessInIdentity
     288  zclGeneral_ProcessInLevelControl
     264  zclGeneral_ProcessInOnOff
     469  zclGeneral_ProcessInScenesClient
    2290  zclGeneral_ProcessInScenesServer
      72  zclGeneral_ReadSceneCountCB
     138  zclGeneral_RegisterCmdCallbacks
     112  zclGeneral_RemoveAllScenes
     117  zclGeneral_RemoveScene
      87  zclGeneral_ScenesInit
     188  zclGeneral_ScenesRestoreFromNV
      10  zclGeneral_ScenesSave
     226  zclGeneral_ScenesWriteNV
     226  zclGeneral_SendAddGroupRequest
     323  zclGeneral_SendAddSceneRequest
     278  zclGeneral_SendGroupGetMembershipRequest
     118  zclGeneral_SendGroupRequest
     114  zclGeneral_SendGroupResponse
     287  zclGeneral_SendGroupViewResponse
      85  zclGeneral_SendIdentify
     118  zclGeneral_SendIdentifyEZModeInvoke
      82  zclGeneral_SendIdentifyQueryResponse
      95  zclGeneral_SendIdentifyTriggerEffect
      95  zclGeneral_SendIdentifyUpdateCommState
     118  zclGeneral_SendLevelControlMoveRequest
     117  zclGeneral_SendLevelControlMoveToLevelRequest
     135  zclGeneral_SendLevelControlStepRequest
      89  zclGeneral_SendLevelControlStopRequest
     102  zclGeneral_SendOnOff_CmdOffWithEffect
     153  zclGeneral_SendOnOff_CmdOnWithTimedOff
     182  zclGeneral_SendSceneCopy
     129  zclGeneral_SendSceneCopyResponse
     244  zclGeneral_SendSceneGetMembershipResponse
     141  zclGeneral_SendSceneRequest
     170  zclGeneral_SendSceneResponse
     377  zclGeneral_SendSceneViewRsp

 
 11 813 bytes in segment BANKED_CODE
    282 bytes in segment BANK_RELAYS
      5 bytes in segment XDATA_Z
 
 12 095 bytes of CODE  memory
      5 bytes of XDATA memory

Errors: none
Warnings: none
