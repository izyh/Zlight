###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             29/May/2014  14:49:49 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Components\stack\zcl\zcl_lighting.c          #
#    Command line       =  -f "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f "D:\Texas         #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO       #
#                          -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f "D:\Texas               #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wZCL.cfg" "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Components\stack\zcl\zcl_lighting.c" -D      #
#                          FEATURE_GREEN_POWER -D SECURE=1 -D                 #
#                          TC_LINKKEY_JOIN -D ZDSECMGR_TC_DEVICE_MAX=2 -D     #
#                          NV_RESTORE -D HOLD_AUTO_START -D INTER_PAN -D      #
#                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC  #
#                          -D MT_ZDO_FUNC -D MT_ZDO_CB_FUNC -D MT_UTIL_FUNC   #
#                          -D MT_ZDO_MGMT -D LCD_SUPPORTED -D HAL_LCD=FALSE   #
#                          -D HAL_KEY=FALSE -D ZCL_BASIC -D ZCL_READ -D       #
#                          ZCL_WRITE -D ZCL_IDENTIFY -D ZCL_ON_OFF -D         #
#                          ZCL_SCENES -D ZCL_GROUPS -D                        #
#                          ZCL_LIGHT_LINK_ENHANCE -D ZCL_LEVEL_CTRL -D        #
#                          ZCL_COLOR_CTRL -D xMAX_CHANNELS_24GHZ=0x02108800   #
#                          -lC "D:\Texas Instruments\Z-Stack Lighting         #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\List\" -lA "D:\Texas Instruments\Z-Stack     #
#                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC253 #
#                          x\BridgeEB-Pro\List\" --diag_suppress Pe001,Pa010  #
#                          -o "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\Obj\" -e --debug --core=plain --dptr=16,1    #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\" -I    #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\Sour #
#                          ce\" -I "D:\Texas Instruments\Z-Stack Lighting     #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\S #
#                          ource\" -I "D:\Texas Instruments\Z-Stack Lighting  #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\HomeAutomation\Source\" -I "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\HomeAutomation\SampleLight\Source\" -I           #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\ZMain\TI2530DB\" -I "D:\Texas                    #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\hal\include\" -I "D:\Texas      #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\hal\target\CC2530EB\" -I        #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\include\" -I "D:\Texas      #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\high_level\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\" -I        #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\single_chip #
#                          \" -I "D:\Texas Instruments\Z-Stack Lighting       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mt\" -I "D:\Texas               #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\osal\include\" -I "D:\Texas     #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\services\saddr\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\services\sdata\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\af\" -I "D:\Texas         #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\nwk\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sapi\" -I "D:\Texas       #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sec\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sys\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\zcl\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\zdo\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\zmac\" -I "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\zmac\f8w\" -Ohz                 #
#                          --require_prototypes                               #
#    List file          =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\List\zcl_lighting.lst                        #
#    Object file        =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\Obj\zcl_lighting.r51                         #
#                                                                             #
#                                                                             #
###############################################################################

D:\Texas Instruments\Z-Stack Lighting 1.0.2\Components\stack\zcl\zcl_lighting.c
      1          /**************************************************************************************************
      2            Filename:       zcl_lighting.c
      3            Revised:        $Date: 2013-07-03 15:56:37 -0700 (Wed, 03 Jul 2013) $
      4            Revision:       $Revision: 34689 $
      5          
      6            Description:    Zigbee Cluster Library -  Lighting
      7          
      8          
      9            Copyright 2006-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "zcl.h"
     44          #include "zcl_general.h"
     45          #include "zcl_lighting.h"
     46          
     47          #if defined ( INTER_PAN )
     48            #include "stub_aps.h"
     49          #endif
     50          
     51          #include "dali_thread.h"
     52          #include "hal_uart.h"

   \                                 In  segment SFR_AN, at 0x80
   \   union <unnamed> volatile __sfr _A_P0
   \                     _A_P0:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfd
   \   unsigned char volatile __sfr P0DIR
   \                     P0DIR:
   \   000000                DS 1
     53          #include "MT_UART.h"
     54          
     55          #include "onboard.h"
     56          
     57          /*********************************************************************
     58           * MACROS
     59           */
     60          
     61          /*********************************************************************
     62           * CONSTANTS
     63           */
     64          
     65          /*********************************************************************
     66           * TYPEDEFS
     67           */
     68          typedef struct zclLightingCBRec
     69          {
     70            struct zclLightingCBRec     *next;
     71            uint8                       endpoint; // Used to link it into the endpoint descriptor
     72            zclLighting_AppCallbacks_t  *CBs;     // Pointer to Callback function
     73          } zclLightingCBRec_t;
     74          
     75          /*********************************************************************
     76           * GLOBAL VARIABLES
     77           */
     78          
     79          /*********************************************************************
     80           * GLOBAL FUNCTIONS
     81           */
     82          
     83          /*********************************************************************
     84           * LOCAL VARIABLES
     85           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     86          static zclLightingCBRec_t *zclLightingCBs = (zclLightingCBRec_t *)NULL;
   \                     zclLightingCBs:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     87          static uint8 zclLightingPluginRegisted = FALSE;
   \                     zclLightingPluginRegisted:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     88          
     89          //uint16 dali_cmd;
     90          //uint8 dalishortaddr ,dali_answer ,dali_answer_state;//define my own variables
     91          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     92          static uint8 flag;
   \                     flag:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     93          
     94          /*********************************************************************
     95           * LOCAL FUNCTIONS
     96           */
     97          static ZStatus_t zclLighting_HdlIncoming( zclIncoming_t *pInHdlrMsg );
     98          static ZStatus_t zclLighting_HdlInSpecificCommands( zclIncoming_t *pInMsg );
     99          static ZStatus_t zclLighting_HdlInManuSpecCommands( zclIncoming_t *pInMsg );//define my own function
    100          static zclLighting_AppCallbacks_t *zclLighting_FindCallbacks( uint8 endpoint );
    101          
    102          static ZStatus_t zclLighting_ProcessInColorControlCmds( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    103          static ZStatus_t zclLighting_ProcessInManuBallastConfigCmds( zclIncoming_t *pInMsg,zclLighting_AppCallbacks_t *pCBs );  //define my own function
    104          
    105          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToHue( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    106          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveHue( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    107          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_StepHue( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    108          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToSaturation( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    109          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveSaturation( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    110          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_StepSaturation( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    111          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToHueAndSaturation( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    112          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToColor( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    113          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveColor( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    114          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_StepColor( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    115          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToColorTemperature( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    116          #ifdef ZCL_LIGHT_LINK_ENHANCE
    117          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHue( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    118          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedMoveHue( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    119          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedStepHue( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    120          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHueAndSaturation( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    121          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_ColorLoopSet( zclIncoming_t *pInMsg, zclLighting_AppCallbacks_t *pCBs );
    122          #endif // ZCL_LIGHT_LINK_ENHANCE
    123          
    124          /*********************************************************************
    125           * @fn      zclLighting_RegisterCmdCallbacks
    126           *
    127           * @brief   Register an applications command callbacks
    128           *
    129           * @param   endpoint - application's endpoint
    130           * @param   callbacks - pointer to the callback record.
    131           *
    132           * @return  ZMemError if not able to allocate
    133           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    134          ZStatus_t zclLighting_RegisterCmdCallbacks( uint8 endpoint, zclLighting_AppCallbacks_t *callbacks )
   \                     zclLighting_RegisterCmdCallbacks:
    135          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 0,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    136            zclLightingCBRec_t *pNewItem;
    137            zclLightingCBRec_t *pLoop;
    138          
    139            // Register as a ZCL Plugin
    140            if ( zclLightingPluginRegisted == FALSE )
   \   00000B   90....       MOV     DPTR,#zclLightingPluginRegisted
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   7021         JNZ     ??zclLighting_RegisterCmdCallbacks_0
    141            {
    142              zcl_registerPlugin( ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    143                                  ZCL_CLUSTER_ID_LIGHTING_BALLAST_CONFIG,
    144                                  zclLighting_HdlIncoming );
   \   000011                ; Setup parameters for call to function zcl_registerPlugin
   \   000011   75....       MOV     ?V0 + 2,#??zclLighting_HdlIncoming?relay & 0xff
   \   000014   75....       MOV     ?V0 + 3,#(??zclLighting_HdlIncoming?relay >> 8) & 0xff
   \   000017   78..         MOV     R0,#?V0 + 2
   \   000019   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001C   7C01         MOV     R4,#0x1
   \   00001E   7D03         MOV     R5,#0x3
   \   000020   7A00         MOV     R2,#0x0
   \   000022   7B03         MOV     R3,#0x3
   \   000024   12....       LCALL   ??zcl_registerPlugin?relay
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?DEALLOC_XSTACK8
    145              zclLightingPluginRegisted = TRUE;
   \   00002C   90....       MOV     DPTR,#zclLightingPluginRegisted
   \   00002F   7401         MOV     A,#0x1
   \   000031   F0           MOVX    @DPTR,A
    146            }
    147          
    148            // Fill in the new profile list
    149            pNewItem = zcl_mem_alloc( sizeof( zclLightingCBRec_t ) );
   \                     ??zclLighting_RegisterCmdCallbacks_0:
   \   000032                ; Setup parameters for call to function osal_mem_alloc
   \   000032   7A05         MOV     R2,#0x5
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   ??osal_mem_alloc?relay
   \   000039   8A..         MOV     ?V0 + 2,R2
   \   00003B   8B..         MOV     ?V0 + 3,R3
   \   00003D   A8..         MOV     R0,?V0 + 2
   \   00003F   A9..         MOV     R1,?V0 + 3
    150            if ( pNewItem == NULL )
   \   000041   E8           MOV     A,R0
   \   000042   49           ORL     A,R1
   \   000043   7004         JNZ     ??zclLighting_RegisterCmdCallbacks_1
    151              return (ZMemError);
   \   000045   7910         MOV     R1,#0x10
   \   000047   803B         SJMP    ??zclLighting_RegisterCmdCallbacks_2
    152          
    153            pNewItem->next = (zclLightingCBRec_t *)NULL;
   \                     ??zclLighting_RegisterCmdCallbacks_1:
   \   000049   8882         MOV     DPL,R0
   \   00004B   8983         MOV     DPH,R1
   \   00004D   E4           CLR     A
   \   00004E   F0           MOVX    @DPTR,A
   \   00004F   A3           INC     DPTR
   \   000050   12....       LCALL   ?Subroutine60 & 0xFFFF
    154            pNewItem->endpoint = endpoint;
   \                     ??CrossCallReturnLabel_162:
   \   000053   E5..         MOV     A,?V0 + 0
   \   000055   12....       LCALL   ?Subroutine45 & 0xFFFF
    155            pNewItem->CBs = callbacks;
   \                     ??CrossCallReturnLabel_79:
   \   000058   EE           MOV     A,R6
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   EF           MOV     A,R7
   \   00005C   F0           MOVX    @DPTR,A
    156          
    157            // Find spot in list
    158            if ( zclLightingCBs == NULL )
   \   00005D   90....       MOV     DPTR,#zclLightingCBs
   \   000060   12....       LCALL   ??Subroutine74_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000063   90....       MOV     DPTR,#zclLightingCBs
   \   000066   6017         JZ      ??zclLighting_RegisterCmdCallbacks_3
    159            {
    160              zclLightingCBs = pNewItem;
    161            }
    162            else
    163            {
    164              // Look for end of list
    165              pLoop = zclLightingCBs;
   \   000068   E0           MOVX    A,@DPTR
   \   000069   FC           MOV     R4,A
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   8003         SJMP    ??zclLighting_RegisterCmdCallbacks_4
    166              while ( pLoop->next != NULL )
    167                pLoop = pLoop->next;
   \                     ??zclLighting_RegisterCmdCallbacks_5:
   \   00006E   EA           MOV     A,R2
   \   00006F   FC           MOV     R4,A
   \   000070   EB           MOV     A,R3
   \                     ??zclLighting_RegisterCmdCallbacks_4:
   \   000071   FD           MOV     R5,A
   \   000072   8C82         MOV     DPL,R4
   \   000074   8D83         MOV     DPH,R5
   \   000076   12....       LCALL   ??Subroutine74_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_139:
   \   000079   70F3         JNZ     ??zclLighting_RegisterCmdCallbacks_5
    168          
    169              // Put new item at end of list
    170              pLoop->next = pNewItem;
   \   00007B   8C82         MOV     DPL,R4
   \   00007D   8D83         MOV     DPH,R5
    171            }
   \                     ??zclLighting_RegisterCmdCallbacks_3:
   \   00007F   12....       LCALL   ?Subroutine62 & 0xFFFF
    172          
    173            return ( ZSuccess );
   \                     ??CrossCallReturnLabel_103:
   \   000082   7900         MOV     R1,#0x0
   \                     ??zclLighting_RegisterCmdCallbacks_2:
   \   000084   02....       LJMP    ??Subroutine73_0 & 0xFFFF
    174          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine73_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine74_0:
   \   000000   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   000003   EA           MOV     A,R2
   \   000004   4B           ORL     A,R3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_163:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET
    175          
    176          /*********************************************************************
    177           * @fn      zclLighting_ColorControl_Send_MoveToHueCmd
    178           *
    179           * @brief   Call to send out a Move To Hue Command
    180           *
    181           * @param   srcEP - Sending application's endpoint
    182           * @param   dstAddr - where you want the message to go
    183           * @param   hue - target hue value
    184           * @param   direction - direction of hue change
    185           * @param   transitionTime - tame taken to move to the target hue in 1/10 sec increments
    186           * @param   disableDefaultRsp - whether to disable the Default Response command
    187           * @param   seqNum - sequence number
    188           *
    189           * @return  ZStatus_t
    190           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    191          ZStatus_t zclLighting_ColorControl_Send_MoveToHueCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_MoveToHueCmd:
    192                                                                uint8 hue, uint8 direction, uint16 transitionTime,
    193                                                                uint8 disableDefaultRsp, uint8 seqNum )
    194          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
   \   00000E   8D..         MOV     ?V0 + 0,R5
   \   000010   7412         MOV     A,#0x12
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FC           MOV     R4,A
   \   000017   7413         MOV     A,#0x13
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ?Subroutine23 & 0xFFFF
    195            uint8 buf[4];
    196          
    197            buf[0] = hue;
    198            buf[1] = direction;
   \                     ??CrossCallReturnLabel_38:
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E5..         MOV     A,?V0 + 0
   \   000024   F0           MOVX    @DPTR,A
   \   000025   7410         MOV     A,#0x10
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   12....       LCALL   ?Subroutine18 & 0xFFFF
    199            buf[2] = LO_UINT16( transitionTime );
   \                     ??CrossCallReturnLabel_26:
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   E8           MOV     A,R0
   \   000031   F0           MOVX    @DPTR,A
    200            buf[3] = HI_UINT16( transitionTime );
   \   000032   7403         MOV     A,#0x3
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   12....       LCALL   ?Subroutine37 & 0xFFFF
    201          
    202            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    203                                    COMMAND_LIGHTING_MOVE_TO_HUE, TRUE,
    204                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 4, buf );
   \                     ??CrossCallReturnLabel_113:
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   75..04       MOV     ?V0 + 2,#0x4
   \   000040   75..00       MOV     ?V0 + 3,#0x0
   \   000043   78..         MOV     R0,#?V0 + 2
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000048   ED           MOV     A,R5
   \   000049   F5..         MOV     ?V0 + 1,A
   \   00004B   78..         MOV     R0,#?V0 + 1
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000050   E4           CLR     A
   \   000051   F5..         MOV     ?V0 + 2,A
   \   000053   78..         MOV     R0,#?V0 + 2
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   EC           MOV     A,R4
   \   000059   F5..         MOV     ?V0 + 1,A
   \   00005B   78..         MOV     R0,#?V0 + 1
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000060   75..00       MOV     ?V0 + 1,#0x0
   \   000063   78..         MOV     R0,#?V0 + 1
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000068   75..01       MOV     ?V0 + 1,#0x1
   \   00006B   78..         MOV     R0,#?V0 + 1
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000070   75..00       MOV     ?V0 + 1,#0x0
   \   000073   02....       LJMP    ?Subroutine0 & 0xFFFF
    205          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   E9           MOV     A,R1
   \   000001                REQUIRE ??Subroutine68_0
   \   000001                ; // Fall through to label ??Subroutine68_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine68_0:
   \   000000   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   000003   8582..       MOV     ?V0 + 2,DPL
   \   000006   8583..       MOV     ?V0 + 3,DPH
   \   000009   78..         MOV     R0,#?V0 + 2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FD           MOV     R5,A
   \   000002   EF           MOV     A,R7
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   7401         MOV     A,#0x1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000003   7402         MOV     A,#0x2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   78..         MOV     R0,#?V0 + 1
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000005   7C00         MOV     R4,#0x0
   \   000007   7D03         MOV     R5,#0x3
   \   000009   EE           MOV     A,R6
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   ??zcl_SendCommand?relay
   \   00000E   740B         MOV     A,#0xb
   \   000010   12....       LCALL   ?DEALLOC_XSTACK8
   \   000013   7404         MOV     A,#0x4
   \   000015                REQUIRE ??Subroutine72_0
   \   000015                ; // Fall through to label ??Subroutine72_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine72_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine73_0
   \   000003                ; // Fall through to label ??Subroutine73_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for indirect call
   \   000001                ; Setup parameters for indirect call
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET
    206          
    207          /*********************************************************************
    208           * @fn      zclLighting_ColorControl_Send_MoveHueCmd
    209           *
    210           * @brief   Call to send out a Move To Hue Command
    211           *
    212           * @param   srcEP - Sending application's endpoint
    213           * @param   dstAddr - where you want the message to go
    214           * @param   moveMode - LIGHTING_MOVE_HUE_STOP, LIGHTING_MOVE_HUE_UP,
    215           *                     LIGHTING_MOVE_HUE_DOWN
    216           * @param   rate - the movement in steps per second, where step is
    217           *                 a change in the device's hue of one unit
    218           * @param   disableDefaultRsp - whether to disable the Default Response command
    219           * @param   seqNum - sequence number
    220           *
    221           * @return  ZStatus_t
    222           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    223          ZStatus_t zclLighting_ColorControl_Send_MoveHueCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_MoveHueCmd:
    224                                                              uint8 moveMode, uint8 rate,
    225                                                              uint8 disableDefaultRsp, uint8 seqNum )
    226          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
   \   00000E   740D         MOV     A,#0xd
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   740E         MOV     A,#0xe
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine7 & 0xFFFF
    227            uint8 buf[2];
    228          
    229            buf[0] = moveMode;
    230            buf[1] = rate;
   \                     ??CrossCallReturnLabel_4:
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   ED           MOV     A,R5
   \   000021   12....       LCALL   ??Subroutine70_0 & 0xFFFF
    231          
    232            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    233                                    COMMAND_LIGHTING_MOVE_HUE, TRUE,
    234                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_130:
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   75..02       MOV     ?V0 + 0,#0x2
   \   00002A   75..00       MOV     ?V0 + 1,#0x0
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   EC           MOV     A,R4
   \   000033   F5..         MOV     ?V0 + 0,A
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003A   E4           CLR     A
   \   00003B   F5..         MOV     ?V0 + 0,A
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   E9           MOV     A,R1
   \   000043   F5..         MOV     ?V0 + 0,A
   \   000045   78..         MOV     R0,#?V0 + 0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004A   75..00       MOV     ?V0 + 0,#0x0
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000052   75..01       MOV     ?V0 + 0,#0x1
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005A   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine70_0:
   \   000000   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000003   8582..       MOV     ?V0 + 0,DPL
   \   000006   8583..       MOV     ?V0 + 1,DPH
   \   000009   78..         MOV     R0,#?V0 + 0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   78..         MOV     R0,#?V0 + 0
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000005   7C00         MOV     R4,#0x0
   \   000007   7D03         MOV     R5,#0x3
   \   000009   EE           MOV     A,R6
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   ??zcl_SendCommand?relay
   \   00000E   740B         MOV     A,#0xb
   \   000010   12....       LCALL   ?DEALLOC_XSTACK8
   \   000013   7402         MOV     A,#0x2
   \   000015                REQUIRE ??Subroutine71_0
   \   000015                ; // Fall through to label ??Subroutine71_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine71_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F03         MOV     R7,#0x3
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   EF           MOV     A,R7
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   22           RET
    235          }
    236          
    237          /*********************************************************************
    238           * @fn      zclLighting_ColorControl_Send_StepHueCmd
    239           *
    240           * @brief   Call to send out a Step Hue Command
    241           *
    242           * @param   srcEP - Sending application's endpoint
    243           * @param   dstAddr - where you want the message to go
    244           * @param   stepMode -	LIGHTING_STEP_HUE_UP, LIGHTING_STEP_HUE_DOWN
    245           * @param   stepSize -  change to the current value of the device's hue
    246           * @param   transitionTime - the movement in steps per 1/10 second
    247           * @param   disableDefaultRsp - whether to disable the Default Response command
    248           * @param   seqNum - sequence number
    249           *
    250           * @return  ZStatus_t
    251           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    252          ZStatus_t zclLighting_ColorControl_Send_StepHueCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_StepHueCmd:
    253                                            uint8 stepMode, uint8 stepSize, uint8 transitionTime,
    254                                            uint8 disableDefaultRsp, uint8 seqNum )
    255          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
   \   00000E   740F         MOV     A,#0xf
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   7410         MOV     A,#0x10
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   7411         MOV     A,#0x11
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   12....       LCALL   ?Subroutine7 & 0xFFFF
    256            uint8 buf[3];
    257          
    258            buf[0] = stepMode;
    259            buf[1] = stepSize;
   \                     ??CrossCallReturnLabel_5:
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   ED           MOV     A,R5
   \   000028   F0           MOVX    @DPTR,A
    260            buf[2] = transitionTime;
   \   000029   7402         MOV     A,#0x2
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E8           MOV     A,R0
   \   00002F   12....       LCALL   ??Subroutine68_0 & 0xFFFF
    261          
    262            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    263                                    COMMAND_LIGHTING_STEP_HUE, TRUE,
    264                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 3, buf );
   \                     ??CrossCallReturnLabel_119:
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   75..03       MOV     ?V0 + 2,#0x3
   \   000038   75..00       MOV     ?V0 + 3,#0x0
   \   00003B   78..         MOV     R0,#?V0 + 2
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   EC           MOV     A,R4
   \   000041   F5..         MOV     ?V0 + 1,A
   \   000043   78..         MOV     R0,#?V0 + 1
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000048   E4           CLR     A
   \   000049   F5..         MOV     ?V0 + 2,A
   \   00004B   78..         MOV     R0,#?V0 + 2
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   E9           MOV     A,R1
   \   000051   F5..         MOV     ?V0 + 1,A
   \   000053   78..         MOV     R0,#?V0 + 1
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000058   75..00       MOV     ?V0 + 1,#0x0
   \   00005B   78..         MOV     R0,#?V0 + 1
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000060   75..01       MOV     ?V0 + 1,#0x1
   \   000063   78..         MOV     R0,#?V0 + 1
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000068   75..02       MOV     ?V0 + 1,#0x2
   \   00006B   02....       LJMP    ?Subroutine4 & 0xFFFF
    265          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   78..         MOV     R0,#?V0 + 1
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000005   7C00         MOV     R4,#0x0
   \   000007   7D03         MOV     R5,#0x3
   \   000009   EE           MOV     A,R6
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   ??zcl_SendCommand?relay
   \   00000E   740B         MOV     A,#0xb
   \   000010   12....       LCALL   ?DEALLOC_XSTACK8
   \   000013   7403         MOV     A,#0x3
   \   000015   02....       LJMP    ??Subroutine72_0 & 0xFFFF
    266          
    267          /*********************************************************************
    268           * @fn      zclLighting_ColorControl_Send_MoveToSaturationCmd
    269           *
    270           * @brief   Call to send out a Move To Saturation Command
    271           *
    272           * @param   srcEP - Sending application's endpoint
    273           * @param   dstAddr - where you want the message to go
    274           * @param   saturation - target saturation value
    275           * @param   transitionTime - time taken move to the target saturation,
    276           *                           in 1/10 second units
    277           * @param   disableDefaultRsp - whether to disable the Default Response command
    278           * @param   seqNum - sequence number
    279           *
    280           * @return  ZStatus_t
    281           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    282          ZStatus_t zclLighting_ColorControl_Send_MoveToSaturationCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_MoveToSaturationCmd:
    283                                                   uint8 saturation, uint16 transitionTime,
    284                                                   uint8 disableDefaultRsp, uint8 seqNum )
    285          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
   \   00000E   7411         MOV     A,#0x11
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   12....       LCALL   ?Subroutine22 & 0xFFFF
    286            uint8 buf[3];
    287          
    288            buf[0] = saturation;
   \                     ??CrossCallReturnLabel_36:
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine25 & 0xFFFF
    289            buf[1] = LO_UINT16( transitionTime );
   \                     ??CrossCallReturnLabel_42:
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E8           MOV     A,R0
   \   000020   F0           MOVX    @DPTR,A
    290            buf[2] = HI_UINT16( transitionTime );
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ?Subroutine37 & 0xFFFF
    291          
    292            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    293                                    COMMAND_LIGHTING_MOVE_TO_SATURATION, TRUE,
    294                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 3, buf );
   \                     ??CrossCallReturnLabel_114:
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   75..03       MOV     ?V0 + 2,#0x3
   \   00002F   75..00       MOV     ?V0 + 3,#0x0
   \   000032   78..         MOV     R0,#?V0 + 2
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   EC           MOV     A,R4
   \   000038   F5..         MOV     ?V0 + 1,A
   \   00003A   78..         MOV     R0,#?V0 + 1
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003F   E4           CLR     A
   \   000040   F5..         MOV     ?V0 + 2,A
   \   000042   78..         MOV     R0,#?V0 + 2
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   ED           MOV     A,R5
   \   000048   F5..         MOV     ?V0 + 1,A
   \   00004A   78..         MOV     R0,#?V0 + 1
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 1
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000057   75..01       MOV     ?V0 + 1,#0x1
   \   00005A   78..         MOV     R0,#?V0 + 1
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005F   75..03       MOV     ?V0 + 1,#0x3
   \   000062   02....       LJMP    ?Subroutine4 & 0xFFFF
    295          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000003   7401         MOV     A,#0x1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   000003   740F         MOV     A,#0xf
   \   000005   22           RET
    296          
    297          /*********************************************************************
    298           * @fn      zclLighting_ColorControl_Send_MoveSaturationCmd
    299           *
    300           * @brief   Call to send out a Move Saturation Command
    301           *
    302           * @param   srcEP - Sending application's endpoint
    303           * @param   dstAddr - where you want the message to go
    304           * @param   moveMode - LIGHTING_MOVE_SATURATION_STOP, LIGHTING_MOVE_SATURATION_UP,
    305           *                     LIGHTING_MOVE_SATURATION_DOWN
    306           * @param   rate - rate of movement in step/sec; step is the device's saturation of one unit
    307           * @param   disableDefaultRsp - whether to disable the Default Response command
    308           * @param   seqNum - sequence number
    309           *
    310           * @return  ZStatus_t
    311           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    312          ZStatus_t zclLighting_ColorControl_Send_MoveSaturationCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_MoveSaturationCmd:
    313                                                                     uint8 moveMode, uint8 rate,
    314                                                                     uint8 disableDefaultRsp, uint8 seqNum )
    315          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
   \   00000E   740D         MOV     A,#0xd
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F9           MOV     R1,A
   \   000015   740E         MOV     A,#0xe
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   12....       LCALL   ?Subroutine7 & 0xFFFF
    316            uint8 buf[2];
    317          
    318            buf[0] = moveMode;
    319            buf[1] = rate;
   \                     ??CrossCallReturnLabel_6:
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   ED           MOV     A,R5
   \   000021   12....       LCALL   ??Subroutine70_0 & 0xFFFF
    320          
    321            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    322                                    COMMAND_LIGHTING_MOVE_SATURATION, TRUE,
    323                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 2, buf );
   \                     ??CrossCallReturnLabel_131:
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   75..02       MOV     ?V0 + 0,#0x2
   \   00002A   75..00       MOV     ?V0 + 1,#0x0
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   EC           MOV     A,R4
   \   000033   F5..         MOV     ?V0 + 0,A
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003A   E4           CLR     A
   \   00003B   F5..         MOV     ?V0 + 0,A
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   E9           MOV     A,R1
   \   000043   F5..         MOV     ?V0 + 0,A
   \   000045   78..         MOV     R0,#?V0 + 0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004A   75..00       MOV     ?V0 + 0,#0x0
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000052   75..01       MOV     ?V0 + 0,#0x1
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005A   75..04       MOV     ?V0 + 0,#0x4
   \   00005D   02....       LJMP    ?Subroutine1 & 0xFFFF
    324          }
    325          
    326          /*********************************************************************
    327           * @fn      zclLighting_ColorControl_Send_StepSaturationCmd
    328           *
    329           * @brief   Call to send out a Step Saturation Command
    330           *
    331           * @param   srcEP - Sending application's endpoint
    332           * @param   dstAddr - where you want the message to go
    333           * @param   stepMode -  LIGHTING_STEP_SATURATION_UP, LIGHTING_STEP_SATURATION_DOWN
    334           * @param   stepSize -  change to the current value of the device's hue
    335           * @param   transitionTime - time to perform a single step in 1/10 of second
    336           * @param   disableDefaultRsp - whether to disable the Default Response command
    337           * @param   seqNum - sequence number
    338           *
    339           * @return  ZStatus_t
    340           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    341          ZStatus_t zclLighting_ColorControl_Send_StepSaturationCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_StepSaturationCmd:
    342                                                   uint8 stepMode, uint8 stepSize, uint8 transitionTime,
    343                                                   uint8 disableDefaultRsp, uint8 seqNum )
    344          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
   \   00000E   740F         MOV     A,#0xf
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F8           MOV     R0,A
   \   000015   7410         MOV     A,#0x10
   \   000017   12....       LCALL   ?XSTACK_DISP0_8
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F9           MOV     R1,A
   \   00001C   7411         MOV     A,#0x11
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   12....       LCALL   ?Subroutine7 & 0xFFFF
    345            uint8 buf[3];
    346          
    347            buf[0] = stepMode;
    348            buf[1] = stepSize;
   \                     ??CrossCallReturnLabel_7:
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   ED           MOV     A,R5
   \   000028   F0           MOVX    @DPTR,A
    349            buf[2] = transitionTime;
   \   000029   7402         MOV     A,#0x2
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   E8           MOV     A,R0
   \   00002F   12....       LCALL   ??Subroutine68_0 & 0xFFFF
    350          
    351            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    352                                    COMMAND_LIGHTING_STEP_SATURATION, TRUE,
    353                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 3, buf );
   \                     ??CrossCallReturnLabel_120:
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   75..03       MOV     ?V0 + 2,#0x3
   \   000038   75..00       MOV     ?V0 + 3,#0x0
   \   00003B   78..         MOV     R0,#?V0 + 2
   \   00003D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000040   EC           MOV     A,R4
   \   000041   F5..         MOV     ?V0 + 1,A
   \   000043   78..         MOV     R0,#?V0 + 1
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000048   E4           CLR     A
   \   000049   F5..         MOV     ?V0 + 2,A
   \   00004B   78..         MOV     R0,#?V0 + 2
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   E9           MOV     A,R1
   \   000051   F5..         MOV     ?V0 + 1,A
   \   000053   78..         MOV     R0,#?V0 + 1
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000058   75..00       MOV     ?V0 + 1,#0x0
   \   00005B   78..         MOV     R0,#?V0 + 1
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000060   75..01       MOV     ?V0 + 1,#0x1
   \   000063   78..         MOV     R0,#?V0 + 1
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000068   75..05       MOV     ?V0 + 1,#0x5
   \   00006B                REQUIRE ?Subroutine4
   \   00006B                ; // Fall through to label ?Subroutine4
    354          }
    355          
    356          /*********************************************************************
    357           * @fn      zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd
    358           *
    359           * @brief   Call to send out a Move To Hue And Saturation Command
    360           *
    361           * @param   srcEP - Sending application's endpoint
    362           * @param   dstAddr - where you want the message to go
    363           * @param   hue - a target hue
    364           * @param   saturation - a target saturation
    365           * @param   transitionTime -  time to move, equal of the value of the field in 1/10 seconds
    366           * @param   disableDefaultRsp - whether to disable the Default Response command
    367           * @param   seqNum - sequence number
    368           *
    369           * @return  ZStatus_t
    370           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    371          ZStatus_t zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd:
    372                                                             uint8 hue, uint8 saturation, uint16 transitionTime,
    373                                                             uint8 disableDefaultRsp, uint8 seqNum )
    374          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
   \   00000E   8D..         MOV     ?V0 + 0,R5
   \   000010   7412         MOV     A,#0x12
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FC           MOV     R4,A
   \   000017   7413         MOV     A,#0x13
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   12....       LCALL   ?Subroutine23 & 0xFFFF
    375            uint8 buf[4];
    376          
    377            buf[0] = hue;
    378            buf[1] = saturation;
   \                     ??CrossCallReturnLabel_39:
   \   00001F   12....       LCALL   ?XSTACK_DISP0_8
   \   000022   E5..         MOV     A,?V0 + 0
   \   000024   F0           MOVX    @DPTR,A
   \   000025   7410         MOV     A,#0x10
   \   000027   12....       LCALL   ?XSTACK_DISP0_8
   \   00002A   12....       LCALL   ?Subroutine18 & 0xFFFF
    379            buf[2] = LO_UINT16( transitionTime );
   \                     ??CrossCallReturnLabel_27:
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   E8           MOV     A,R0
   \   000031   F0           MOVX    @DPTR,A
    380            buf[3] = HI_UINT16( transitionTime );
   \   000032   7403         MOV     A,#0x3
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   12....       LCALL   ?Subroutine37 & 0xFFFF
    381          
    382            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    383                                    COMMAND_LIGHTING_MOVE_TO_HUE_AND_SATURATION, TRUE,
    384                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 4, buf );
   \                     ??CrossCallReturnLabel_115:
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   75..04       MOV     ?V0 + 2,#0x4
   \   000040   75..00       MOV     ?V0 + 3,#0x0
   \   000043   78..         MOV     R0,#?V0 + 2
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000048   ED           MOV     A,R5
   \   000049   F5..         MOV     ?V0 + 1,A
   \   00004B   78..         MOV     R0,#?V0 + 1
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000050   E4           CLR     A
   \   000051   F5..         MOV     ?V0 + 2,A
   \   000053   78..         MOV     R0,#?V0 + 2
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   EC           MOV     A,R4
   \   000059   F5..         MOV     ?V0 + 1,A
   \   00005B   78..         MOV     R0,#?V0 + 1
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000060   75..00       MOV     ?V0 + 1,#0x0
   \   000063   78..         MOV     R0,#?V0 + 1
   \   000065   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000068   75..01       MOV     ?V0 + 1,#0x1
   \   00006B   78..         MOV     R0,#?V0 + 1
   \   00006D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000070   75..06       MOV     ?V0 + 1,#0x6
   \   000073   02....       LJMP    ?Subroutine0 & 0xFFFF
    385          }
    386          
    387          /*********************************************************************
    388           * @fn      zclLighting_ColorControl_Send_MoveToColorCmd
    389           *
    390           * @brief   Call to send out a Move To Color Command
    391           *
    392           * @param   srcEP - Sending application's endpoint
    393           * @param   dstAddr - where you want the message to go
    394           * @param   colorX - a target color X
    395           * @param   colorY - a target color Y
    396           * @param   transitionTime -  time to move, equal of the value of the field in 1/10 seconds
    397           * @param   disableDefaultRsp - whether to disable the Default Response command
    398           * @param   seqNum - sequence number
    399           *
    400           * @return  ZStatus_t
    401           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    402          ZStatus_t zclLighting_ColorControl_Send_MoveToColorCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_MoveToColorCmd:
    403                                                 uint16 colorX, uint16 colorY, uint16 transitionTime,
    404                                                 uint8 disableDefaultRsp, uint8 seqNum )
    405          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   7415         MOV     A,#0x15
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FF           MOV     R7,A
   \   000013   7416         MOV     A,#0x16
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   12....       LCALL   ?Subroutine6 & 0xFFFF
    406            uint8 buf[6];
    407          
    408            buf[0] = LO_UINT16( colorX );
    409            buf[1] = HI_UINT16( colorX );
   \                     ??CrossCallReturnLabel_0:
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   ED           MOV     A,R5
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   7411         MOV     A,#0x11
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   12....       LCALL   ?Subroutine18 & 0xFFFF
    410            buf[2] = LO_UINT16( colorY );
   \                     ??CrossCallReturnLabel_28:
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E8           MOV     A,R0
   \   00002C   F0           MOVX    @DPTR,A
    411            buf[3] = HI_UINT16( colorY );
   \   00002D   7403         MOV     A,#0x3
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E9           MOV     A,R1
   \   000033   F0           MOVX    @DPTR,A
   \   000034   7413         MOV     A,#0x13
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   12....       LCALL   ?Subroutine29 & 0xFFFF
    412            buf[4] = LO_UINT16( transitionTime );
   \                     ??CrossCallReturnLabel_51:
   \   00003C   7404         MOV     A,#0x4
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   E8           MOV     A,R0
   \   000042   F0           MOVX    @DPTR,A
    413            buf[5] = HI_UINT16( transitionTime );
   \   000043   7405         MOV     A,#0x5
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   12....       LCALL   ?Subroutine38 & 0xFFFF
    414          
    415            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    416                                    COMMAND_LIGHTING_MOVE_TO_COLOR, TRUE,
    417                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 6, buf );
   \                     ??CrossCallReturnLabel_125:
   \   00004B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004E   75..06       MOV     ?V0 + 0,#0x6
   \   000051   75..00       MOV     ?V0 + 1,#0x0
   \   000054   78..         MOV     R0,#?V0 + 0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   E5..         MOV     A,?V0 + 2
   \   00005B   F5..         MOV     ?V0 + 0,A
   \   00005D   78..         MOV     R0,#?V0 + 0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000062   E4           CLR     A
   \   000063   F5..         MOV     ?V0 + 0,A
   \   000065   78..         MOV     R0,#?V0 + 0
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006A   EF           MOV     A,R7
   \   00006B   F5..         MOV     ?V0 + 0,A
   \   00006D   78..         MOV     R0,#?V0 + 0
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000072   75..00       MOV     ?V0 + 0,#0x0
   \   000075   78..         MOV     R0,#?V0 + 0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007A   75..01       MOV     ?V0 + 0,#0x1
   \   00007D   78..         MOV     R0,#?V0 + 0
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000082   75..07       MOV     ?V0 + 0,#0x7
   \   000085   78..         MOV     R0,#?V0 + 0
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008A   7C00         MOV     R4,#0x0
   \   00008C   7D03         MOV     R5,#0x3
   \   00008E   EE           MOV     A,R6
   \   00008F   F9           MOV     R1,A
   \   000090   12....       LCALL   ??zcl_SendCommand?relay
   \   000093   740B         MOV     A,#0xb
   \   000095   12....       LCALL   ?DEALLOC_XSTACK8
   \   000098   7406         MOV     A,#0x6
   \   00009A   02....       LJMP    ??Subroutine71_0 & 0xFFFF
    418          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   E9           MOV     A,R1
   \   000001                REQUIRE ??Subroutine70_0
   \   000001                ; // Fall through to label ??Subroutine70_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   EC           MOV     A,R4
   \   000004   85..82       MOV     DPL,?XSP + 0
   \   000007   85..83       MOV     DPH,?XSP + 1
   \   00000A   F0           MOVX    @DPTR,A
   \   00000B   7401         MOV     A,#0x1
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000003   22           RET
    419          
    420          /*********************************************************************
    421           * @fn      zclLighting_ColorControl_Send_MoveColorCmd
    422           *
    423           * @brief   Call to send out a Move Color Command
    424           *
    425           * @param   srcEP - Sending application's endpoint
    426           * @param   dstAddr - where you want the message to go
    427           * @param   rateX - rate of movement in steps per second. A step is a change
    428           *                  in the device's CurrentX attribute of one unit.
    429           * @param   rateY - rate of movement in steps per second. A step is a change
    430           *                  in the device's CurrentY attribute of one unit.
    431           * @param   disableDefaultRsp - whether to disable the Default Response command
    432           * @param   seqNum - sequence number
    433           *
    434           * @return  ZStatus_t
    435           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    436          ZStatus_t zclLighting_ColorControl_Send_MoveColorCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_MoveColorCmd:
    437                                                                int16 rateX, int16 rateY,
    438                                                                uint8 disableDefaultRsp, uint8 seqNum )
    439          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   8C..         MOV     ?V0 + 0,R4
   \   00000E   8D..         MOV     ?V0 + 1,R5
   \   000010   7410         MOV     A,#0x10
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   7411         MOV     A,#0x11
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FC           MOV     R4,A
    440            uint8 buf[4];
    441          
    442            buf[0] = LO_UINT16( rateX );
   \   00001E   12....       LCALL   ?Subroutine43 & 0xFFFF
    443            buf[1] = HI_UINT16( rateX );
   \                     ??CrossCallReturnLabel_121:
   \   000021   12....       LCALL   ?SS_SHR
   \   000024   04           INC     A
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E5..         MOV     A,?V0 + 0
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   740E         MOV     A,#0xe
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   12....       LCALL   ?Subroutine30 & 0xFFFF
    444            buf[2] = LO_UINT16( rateY );
   \                     ??CrossCallReturnLabel_55:
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   12....       LCALL   ??Subroutine69_0 & 0xFFFF
    445            buf[3] = HI_UINT16( rateY );
   \                     ??CrossCallReturnLabel_123:
   \   000039   12....       LCALL   ?SS_SHR
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   12....       LCALL   ??Subroutine70_0 & 0xFFFF
    446          
    447            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    448                                    COMMAND_LIGHTING_MOVE_COLOR, TRUE,
    449                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 4, buf );
   \                     ??CrossCallReturnLabel_132:
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   75..04       MOV     ?V0 + 0,#0x4
   \   00004C   75..00       MOV     ?V0 + 1,#0x0
   \   00004F   78..         MOV     R0,#?V0 + 0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   EC           MOV     A,R4
   \   000055   F5..         MOV     ?V0 + 0,A
   \   000057   78..         MOV     R0,#?V0 + 0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005C   E4           CLR     A
   \   00005D   F5..         MOV     ?V0 + 0,A
   \   00005F   78..         MOV     R0,#?V0 + 0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000064   E9           MOV     A,R1
   \   000065   F5..         MOV     ?V0 + 0,A
   \   000067   78..         MOV     R0,#?V0 + 0
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006C   75..00       MOV     ?V0 + 0,#0x0
   \   00006F   78..         MOV     R0,#?V0 + 0
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000074   75..01       MOV     ?V0 + 0,#0x1
   \   000077   78..         MOV     R0,#?V0 + 0
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007C   75..08       MOV     ?V0 + 0,#0x8
   \   00007F   78..         MOV     R0,#?V0 + 0
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000084   7C00         MOV     R4,#0x0
   \   000086   7D03         MOV     R5,#0x3
   \   000088   EE           MOV     A,R6
   \   000089   F9           MOV     R1,A
   \   00008A   12....       LCALL   ??zcl_SendCommand?relay
   \   00008D   740B         MOV     A,#0xb
   \   00008F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000092   7404         MOV     A,#0x4
   \   000094                REQUIRE ?Subroutine2
   \   000094                ; // Fall through to label ?Subroutine2
    450          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F02         MOV     R7,#0x2
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine69_0
   \   000006                ; // Fall through to label ??Subroutine69_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine69_0:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   F0           MOVX    @DPTR,A
   \   000003   7408         MOV     A,#0x8
   \   000005   78..         MOV     R0,#?V0 + 0
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   7402         MOV     A,#0x2
   \   000009   22           RET
    451          
    452          /*********************************************************************
    453           * @fn      zclLighting_ColorControl_Send_StepColorCmd
    454           *
    455           * @brief   Call to send out a Step Color Command
    456           *
    457           * @param   srcEP - Sending application's endpoint
    458           * @param   dstAddr - where you want the message to go
    459           * @param   stepX - change to be added to the device's CurrentX attribute
    460           * @param   stepY - change to be added to the device's CurrentY attribute
    461           * @param   transitionTime -  time to perform the color change, equal of
    462           *                            the value of the field in 1/10 seconds
    463           * @param   disableDefaultRsp - whether to disable the Default Response command
    464           * @param   seqNum - sequence number
    465           *
    466           * @return  ZStatus_t
    467           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    468          ZStatus_t zclLighting_ColorControl_Send_StepColorCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_StepColorCmd:
    469                                                   int16 stepX, int16 stepY, uint16 transitionTime,
    470                                                   uint8 disableDefaultRsp, uint8 seqNum )
    471          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   8C..         MOV     ?V0 + 0,R4
   \   00000E   8D..         MOV     ?V0 + 1,R5
   \   000010   7414         MOV     A,#0x14
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FC           MOV     R4,A
   \   000017   7415         MOV     A,#0x15
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FD           MOV     R5,A
    472            uint8 buf[6];
    473          
    474            buf[0] = LO_UINT16( stepX );
   \   00001E   12....       LCALL   ?Subroutine43 & 0xFFFF
    475            buf[1] = HI_UINT16( stepX );
   \                     ??CrossCallReturnLabel_122:
   \   000021   12....       LCALL   ?SS_SHR
   \   000024   04           INC     A
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E5..         MOV     A,?V0 + 0
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   7410         MOV     A,#0x10
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   12....       LCALL   ?Subroutine30 & 0xFFFF
    476            buf[2] = LO_UINT16( stepY );
   \                     ??CrossCallReturnLabel_56:
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   12....       LCALL   ??Subroutine69_0 & 0xFFFF
    477            buf[3] = HI_UINT16( stepY );
   \                     ??CrossCallReturnLabel_124:
   \   000039   12....       LCALL   ?SS_SHR
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP0_8
   \   000041   E5..         MOV     A,?V0 + 0
   \   000043   F0           MOVX    @DPTR,A
   \   000044   7412         MOV     A,#0x12
   \   000046   12....       LCALL   ?XSTACK_DISP0_8
   \   000049   12....       LCALL   ?Subroutine29 & 0xFFFF
    478            buf[4] = LO_UINT16( transitionTime );
   \                     ??CrossCallReturnLabel_52:
   \   00004C   7404         MOV     A,#0x4
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   E8           MOV     A,R0
   \   000052   F0           MOVX    @DPTR,A
    479            buf[5] = HI_UINT16( transitionTime );
   \   000053   7405         MOV     A,#0x5
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   12....       LCALL   ?Subroutine38 & 0xFFFF
    480          
    481            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    482                                    COMMAND_LIGHTING_STEP_COLOR, TRUE,
    483                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 6, buf );
   \                     ??CrossCallReturnLabel_126:
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005E   75..06       MOV     ?V0 + 0,#0x6
   \   000061   75..00       MOV     ?V0 + 1,#0x0
   \   000064   78..         MOV     R0,#?V0 + 0
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000069   ED           MOV     A,R5
   \   00006A   F5..         MOV     ?V0 + 0,A
   \   00006C   78..         MOV     R0,#?V0 + 0
   \   00006E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000071   E4           CLR     A
   \   000072   F5..         MOV     ?V0 + 0,A
   \   000074   78..         MOV     R0,#?V0 + 0
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000079   EC           MOV     A,R4
   \   00007A   F5..         MOV     ?V0 + 0,A
   \   00007C   78..         MOV     R0,#?V0 + 0
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000081   75..00       MOV     ?V0 + 0,#0x0
   \   000084   78..         MOV     R0,#?V0 + 0
   \   000086   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000089   75..01       MOV     ?V0 + 0,#0x1
   \   00008C   78..         MOV     R0,#?V0 + 0
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000091   75..09       MOV     ?V0 + 0,#0x9
   \   000094   78..         MOV     R0,#?V0 + 0
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000099   7C00         MOV     R4,#0x0
   \   00009B   7D03         MOV     R5,#0x3
   \   00009D   EE           MOV     A,R6
   \   00009E   F9           MOV     R1,A
   \   00009F   12....       LCALL   ??zcl_SendCommand?relay
   \   0000A2   740B         MOV     A,#0xb
   \   0000A4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000A7   7406         MOV     A,#0x6
   \   0000A9   02....       LJMP    ?Subroutine2 & 0xFFFF
    484          }
    485          
    486          /*********************************************************************
    487           * @fn      zclLighting_ColorControl_Send_MoveToColorTemperatureCmd
    488           *
    489           * @brief   Call to send out a Move To Color Temperature Command
    490           *
    491           * @param   srcEP - Sending application's endpoint
    492           * @param   dstAddr - where you want the message to go
    493           * @param   colorTemperature - a target color temperature
    494           * @param   transitionTime -  time to perform the color change, equal of
    495           *                            the value of the field in 1/10 seconds
    496           * @param   disableDefaultRsp - whether to disable the Default Response command
    497           * @param   seqNum - sequence number
    498           *
    499           * @return  ZStatus_t
    500           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    501          ZStatus_t zclLighting_ColorControl_Send_MoveToColorTemperatureCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_MoveToColorTemperatureCmd:
    502                                                                 uint16 colorTemperature, uint16 transitionTime,
    503                                                                 uint8 disableDefaultRsp, uint8 seqNum )
    504          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 4
   \   000005   74FC         MOV     A,#-0x4
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   7411         MOV     A,#0x11
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FF           MOV     R7,A
   \   000013   7412         MOV     A,#0x12
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   12....       LCALL   ?Subroutine6 & 0xFFFF
    505            uint8 buf[4];
    506          
    507            buf[0] = LO_UINT16( colorTemperature );
    508            buf[1] = HI_UINT16( colorTemperature );
   \                     ??CrossCallReturnLabel_1:
   \   00001B   12....       LCALL   ?XSTACK_DISP0_8
   \   00001E   ED           MOV     A,R5
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   740F         MOV     A,#0xf
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   12....       LCALL   ?Subroutine18 & 0xFFFF
    509            buf[2] = LO_UINT16( transitionTime );
   \                     ??CrossCallReturnLabel_29:
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   E8           MOV     A,R0
   \   00002C   F0           MOVX    @DPTR,A
    510            buf[3] = HI_UINT16( transitionTime );
   \   00002D   7403         MOV     A,#0x3
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   12....       LCALL   ?Subroutine38 & 0xFFFF
    511          
    512            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    513                                    COMMAND_LIGHTING_MOVE_TO_COLOR_TEMPERATURE, TRUE,
    514                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 4, buf );
   \                     ??CrossCallReturnLabel_127:
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   75..04       MOV     ?V0 + 0,#0x4
   \   00003B   75..00       MOV     ?V0 + 1,#0x0
   \   00003E   78..         MOV     R0,#?V0 + 0
   \   000040   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000043   E5..         MOV     A,?V0 + 2
   \   000045   F5..         MOV     ?V0 + 0,A
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004C   E4           CLR     A
   \   00004D   F5..         MOV     ?V0 + 0,A
   \   00004F   78..         MOV     R0,#?V0 + 0
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000054   EF           MOV     A,R7
   \   000055   F5..         MOV     ?V0 + 0,A
   \   000057   78..         MOV     R0,#?V0 + 0
   \   000059   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005C   75..00       MOV     ?V0 + 0,#0x0
   \   00005F   78..         MOV     R0,#?V0 + 0
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000064   75..01       MOV     ?V0 + 0,#0x1
   \   000067   78..         MOV     R0,#?V0 + 0
   \   000069   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006C   75..0A       MOV     ?V0 + 0,#0xa
   \   00006F   78..         MOV     R0,#?V0 + 0
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000074   7C00         MOV     R4,#0x0
   \   000076   7D03         MOV     R5,#0x3
   \   000078   EE           MOV     A,R6
   \   000079   F9           MOV     R1,A
   \   00007A   12....       LCALL   ??zcl_SendCommand?relay
   \   00007D   740B         MOV     A,#0xb
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000082   7404         MOV     A,#0x4
   \   000084   80..         SJMP    ??Subroutine71_0
    515          }
    516          
    517          #ifdef ZCL_LIGHT_LINK_ENHANCE
    518          /*********************************************************************
    519           * @fn      zclLighting_ColorControl_Send_EnhancedMoveToHueCmd
    520           *
    521           * @brief   Call to send out an Enhanced Move To Hue Command
    522           *
    523           * @param   srcEP - Sending application's endpoint
    524           * @param   dstAddr - where you want the message to go
    525           * @param   enhancedHue - a target extended hue for lamp
    526           * @param   direction - direction of hue change
    527           * @param   transitionTime -  time to perform the color change, equal of
    528           *                            the value of the field in 1/10 seconds
    529           * @param   disableDefaultRsp - whether to disable the Default Response command
    530           * @param   seqNum - sequence number
    531           *
    532           * @return  ZStatus_t
    533           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    534          ZStatus_t zclLighting_ColorControl_Send_EnhancedMoveToHueCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_EnhancedMoveToHueCmd:
    535                                                                        uint16 enhancedHue, uint8 direction,
    536                                                                        uint16 transitionTime, uint8 disableDefaultRsp,
    537                                                                        uint8 seqNum )
    538          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   7410         MOV     A,#0x10
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   \   000013   7413         MOV     A,#0x13
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FF           MOV     R7,A
   \   00001A   7414         MOV     A,#0x14
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine6 & 0xFFFF
    539            uint8 buf[5];
    540          
    541            buf[0] = LO_UINT16( enhancedHue );
    542            buf[1] = HI_UINT16( enhancedHue );
   \                     ??CrossCallReturnLabel_2:
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   ED           MOV     A,R5
   \   000026   F0           MOVX    @DPTR,A
    543            buf[2] = direction;
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E8           MOV     A,R0
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   7411         MOV     A,#0x11
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   12....       LCALL   ?Subroutine19 & 0xFFFF
    544            buf[3] = LO_UINT16( transitionTime );
   \                     ??CrossCallReturnLabel_30:
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E8           MOV     A,R0
   \   00003A   F0           MOVX    @DPTR,A
    545            buf[4] = HI_UINT16( transitionTime );
   \   00003B   7404         MOV     A,#0x4
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   12....       LCALL   ?Subroutine38 & 0xFFFF
    546          
    547            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    548                                    COMMAND_LIGHTING_ENHANCED_MOVE_TO_HUE, TRUE,
    549                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 5, buf );
   \                     ??CrossCallReturnLabel_128:
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   75..05       MOV     ?V0 + 0,#0x5
   \   000049   75..00       MOV     ?V0 + 1,#0x0
   \   00004C   78..         MOV     R0,#?V0 + 0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   E5..         MOV     A,?V0 + 2
   \   000053   F5..         MOV     ?V0 + 0,A
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005A   E4           CLR     A
   \   00005B   F5..         MOV     ?V0 + 0,A
   \   00005D   78..         MOV     R0,#?V0 + 0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   EF           MOV     A,R7
   \   000063   F5..         MOV     ?V0 + 0,A
   \   000065   78..         MOV     R0,#?V0 + 0
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006A   75..00       MOV     ?V0 + 0,#0x0
   \   00006D   78..         MOV     R0,#?V0 + 0
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000072   75..01       MOV     ?V0 + 0,#0x1
   \   000075   78..         MOV     R0,#?V0 + 0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007A   75..40       MOV     ?V0 + 0,#0x40
   \   00007D                REQUIRE ?Subroutine5
   \   00007D                ; // Fall through to label ?Subroutine5
    550          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   78..         MOV     R0,#?V0 + 0
   \   000002   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000005   7C00         MOV     R4,#0x0
   \   000007   7D03         MOV     R5,#0x3
   \   000009   EE           MOV     A,R6
   \   00000A   F9           MOV     R1,A
   \   00000B   12....       LCALL   ??zcl_SendCommand?relay
   \   00000E   740B         MOV     A,#0xb
   \   000010   12....       LCALL   ?DEALLOC_XSTACK8
   \   000013   7405         MOV     A,#0x5
   \   000015   02....       LJMP    ??Subroutine71_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET
    551          
    552          /*********************************************************************
    553           * @fn      zclLighting_ColorControl_Send_EnhancedMoveHueCmd
    554           *
    555           * @brief   Call to send out an Enhanced Move Hue Command
    556           *
    557           * @param   srcEP - Sending application's endpoint
    558           * @param   dstAddr - where you want the message to go
    559           * @param   moveMode - LIGHTING_MOVE_HUE_STOP, LIGHTING_MOVE_HUE_UP,
    560           *                     LIGHTING_MOVE_HUE_DOWN
    561           * @param   rate - the movement in steps per second, where step is
    562           *                 a change in the device's hue of one unit
    563           * @param   disableDefaultRsp - whether to disable the Default Response command
    564           * @param   seqNum - sequence number
    565           *
    566           * @return  ZStatus_t
    567           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    568          ZStatus_t zclLighting_ColorControl_Send_EnhancedMoveHueCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_EnhancedMoveHueCmd:
    569                                                                      uint8 moveMode, uint16 rate,
    570                                                                      uint8 disableDefaultRsp, uint8 seqNum )
    571          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
   \   00000E   7411         MOV     A,#0x11
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   12....       LCALL   ?Subroutine22 & 0xFFFF
    572            uint8 buf[3];
    573          
    574            buf[0] = moveMode;
   \                     ??CrossCallReturnLabel_37:
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   12....       LCALL   ?Subroutine25 & 0xFFFF
    575            buf[1] = LO_UINT16( rate );
   \                     ??CrossCallReturnLabel_43:
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   E8           MOV     A,R0
   \   000020   F0           MOVX    @DPTR,A
    576            buf[2] = HI_UINT16( rate );
   \   000021   7402         MOV     A,#0x2
   \   000023   12....       LCALL   ?XSTACK_DISP0_8
   \   000026   12....       LCALL   ?Subroutine37 & 0xFFFF
    577          
    578            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    579                                    COMMAND_LIGHTING_ENHANCED_MOVE_HUE, TRUE,
    580                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 3, buf );
   \                     ??CrossCallReturnLabel_116:
   \   000029   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002C   75..03       MOV     ?V0 + 2,#0x3
   \   00002F   75..00       MOV     ?V0 + 3,#0x0
   \   000032   78..         MOV     R0,#?V0 + 2
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   EC           MOV     A,R4
   \   000038   F5..         MOV     ?V0 + 1,A
   \   00003A   78..         MOV     R0,#?V0 + 1
   \   00003C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003F   E4           CLR     A
   \   000040   F5..         MOV     ?V0 + 2,A
   \   000042   78..         MOV     R0,#?V0 + 2
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000047   ED           MOV     A,R5
   \   000048   F5..         MOV     ?V0 + 1,A
   \   00004A   78..         MOV     R0,#?V0 + 1
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004F   75..00       MOV     ?V0 + 1,#0x0
   \   000052   78..         MOV     R0,#?V0 + 1
   \   000054   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000057   75..01       MOV     ?V0 + 1,#0x1
   \   00005A   78..         MOV     R0,#?V0 + 1
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005F   75..41       MOV     ?V0 + 1,#0x41
   \   000062   02....       LJMP    ?Subroutine4 & 0xFFFF
    581          }
    582          
    583          /*********************************************************************
    584           * @fn      zclLighting_ColorControl_Send_EnhancedStepHueCmd
    585           *
    586           * @brief   Call to send out an Enhanced Step Hue Command
    587           *
    588           * @param   srcEP - Sending application's endpoint
    589           * @param   dstAddr - where you want the message to go
    590           * @param   stepMode -	LIGHTING_STEP_HUE_UP, LIGHTING_STEP_HUE_DOWN
    591           * @param   stepSize -  change to the current value of the device's hue
    592           * @param   transitionTime - the movement in steps per 1/10 second
    593           * @param   disableDefaultRsp - whether to disable the Default Response command
    594           * @param   seqNum - sequence number
    595           *
    596           * @return  ZStatus_t
    597           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    598          ZStatus_t zclLighting_ColorControl_Send_EnhancedStepHueCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_EnhancedStepHueCmd:
    599                                            uint8 stepMode, uint16 stepSize, uint16 transitionTime,
    600                                            uint8 disableDefaultRsp, uint8 seqNum )
    601          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EC           MOV     A,R4
   \   00000D   FF           MOV     R7,A
   \   00000E   7415         MOV     A,#0x15
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   12....       LCALL   ?Subroutine47 & 0xFFFF
    602            uint8 buf[5];
    603          
    604            buf[0] = stepMode;
   \                     ??CrossCallReturnLabel_86:
   \   000016   7411         MOV     A,#0x11
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine25 & 0xFFFF
    605            buf[1] = LO_UINT16( stepSize );
   \                     ??CrossCallReturnLabel_44:
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   E8           MOV     A,R0
   \   000022   F0           MOVX    @DPTR,A
    606            buf[2] = HI_UINT16( stepSize );
   \   000023   7402         MOV     A,#0x2
   \   000025   12....       LCALL   ?XSTACK_DISP0_8
   \   000028   E9           MOV     A,R1
   \   000029   F0           MOVX    @DPTR,A
   \   00002A   7413         MOV     A,#0x13
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   12....       LCALL   ?Subroutine19 & 0xFFFF
    607            buf[3] = LO_UINT16( transitionTime );
   \                     ??CrossCallReturnLabel_31:
   \   000032   12....       LCALL   ?XSTACK_DISP0_8
   \   000035   E8           MOV     A,R0
   \   000036   F0           MOVX    @DPTR,A
    608            buf[4] = HI_UINT16( transitionTime );
   \   000037   7404         MOV     A,#0x4
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   12....       LCALL   ?Subroutine37 & 0xFFFF
    609          
    610            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    611                                    COMMAND_LIGHTING_ENHANCED_STEP_HUE, TRUE,
    612                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 5, buf );
   \                     ??CrossCallReturnLabel_117:
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   75..05       MOV     ?V0 + 2,#0x5
   \   000045   75..00       MOV     ?V0 + 3,#0x0
   \   000048   78..         MOV     R0,#?V0 + 2
   \   00004A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004D   EC           MOV     A,R4
   \   00004E   F5..         MOV     ?V0 + 1,A
   \   000050   78..         MOV     R0,#?V0 + 1
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000055   E4           CLR     A
   \   000056   F5..         MOV     ?V0 + 2,A
   \   000058   78..         MOV     R0,#?V0 + 2
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   ED           MOV     A,R5
   \   00005E   F5..         MOV     ?V0 + 1,A
   \   000060   78..         MOV     R0,#?V0 + 1
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000065   75..00       MOV     ?V0 + 1,#0x0
   \   000068   78..         MOV     R0,#?V0 + 1
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006D   75..01       MOV     ?V0 + 1,#0x1
   \   000070   78..         MOV     R0,#?V0 + 1
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000075   75..42       MOV     ?V0 + 1,#0x42
   \   000078   78..         MOV     R0,#?V0 + 1
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007D   7C00         MOV     R4,#0x0
   \   00007F   7D03         MOV     R5,#0x3
   \   000081   EE           MOV     A,R6
   \   000082   F9           MOV     R1,A
   \   000083   12....       LCALL   ??zcl_SendCommand?relay
   \   000086   740B         MOV     A,#0xb
   \   000088   12....       LCALL   ?DEALLOC_XSTACK8
   \   00008B   7405         MOV     A,#0x5
   \   00008D   02....       LJMP    ??Subroutine72_0 & 0xFFFF
    613          }
    614          
    615          /*********************************************************************
    616           * @fn      zclLighting_ColorControl_Send_EnhancedMoveToHueAndSaturationCmd
    617           *
    618           * @brief   Call to send out an Enhanced Move To Hue And Saturation Command
    619           *
    620           * @param   srcEP - Sending application's endpoint
    621           * @param   dstAddr - where you want the message to go
    622           * @param   Enhanced hue - a target Enhanced hue for lamp
    623           * @param   saturation - a target saturation
    624           * @param   transitionTime -  time to move, equal of the value of the field in 1/10 seconds
    625           * @param   disableDefaultRsp - whether to disable the Default Response command
    626           * @param   seqNum - sequence number
    627           *
    628           * @return  ZStatus_t
    629           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    630          ZStatus_t zclLighting_ColorControl_Send_EnhancedMoveToHueAndSaturationCmd( uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_EnhancedMoveToHueAndSaturationCmd:
    631                                                            uint16 enhancedHue, uint8 saturation, uint16 transitionTime,
    632                                                            uint8 disableDefaultRsp, uint8 seqNum )
    633          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   7410         MOV     A,#0x10
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   \   000013   7413         MOV     A,#0x13
   \   000015   12....       LCALL   ?XSTACK_DISP0_8
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FF           MOV     R7,A
   \   00001A   7414         MOV     A,#0x14
   \   00001C   12....       LCALL   ?XSTACK_DISP0_8
   \   00001F   12....       LCALL   ?Subroutine6 & 0xFFFF
    634            uint8 buf[5];
    635          
    636            buf[0] = LO_UINT16( enhancedHue );
    637            buf[1] = HI_UINT16( enhancedHue );
   \                     ??CrossCallReturnLabel_3:
   \   000022   12....       LCALL   ?XSTACK_DISP0_8
   \   000025   ED           MOV     A,R5
   \   000026   F0           MOVX    @DPTR,A
    638            buf[2] = saturation;
   \   000027   7402         MOV     A,#0x2
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   E8           MOV     A,R0
   \   00002D   F0           MOVX    @DPTR,A
   \   00002E   7411         MOV     A,#0x11
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   12....       LCALL   ?Subroutine19 & 0xFFFF
    639            buf[3] = LO_UINT16( transitionTime );
   \                     ??CrossCallReturnLabel_32:
   \   000036   12....       LCALL   ?XSTACK_DISP0_8
   \   000039   E8           MOV     A,R0
   \   00003A   F0           MOVX    @DPTR,A
    640            buf[4] = HI_UINT16( transitionTime );
   \   00003B   7404         MOV     A,#0x4
   \   00003D   12....       LCALL   ?XSTACK_DISP0_8
   \   000040   12....       LCALL   ?Subroutine38 & 0xFFFF
    641          
    642            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    643                                    COMMAND_LIGHTING_ENHANCED_MOVE_TO_HUE_AND_SATURATION, TRUE,
    644                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 5, buf );
   \                     ??CrossCallReturnLabel_129:
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   75..05       MOV     ?V0 + 0,#0x5
   \   000049   75..00       MOV     ?V0 + 1,#0x0
   \   00004C   78..         MOV     R0,#?V0 + 0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   E5..         MOV     A,?V0 + 2
   \   000053   F5..         MOV     ?V0 + 0,A
   \   000055   78..         MOV     R0,#?V0 + 0
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005A   E4           CLR     A
   \   00005B   F5..         MOV     ?V0 + 0,A
   \   00005D   78..         MOV     R0,#?V0 + 0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000062   EF           MOV     A,R7
   \   000063   F5..         MOV     ?V0 + 0,A
   \   000065   78..         MOV     R0,#?V0 + 0
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006A   75..00       MOV     ?V0 + 0,#0x0
   \   00006D   78..         MOV     R0,#?V0 + 0
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000072   75..01       MOV     ?V0 + 0,#0x1
   \   000075   78..         MOV     R0,#?V0 + 0
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007A   75..43       MOV     ?V0 + 0,#0x43
   \   00007D   02....       LJMP    ?Subroutine5 & 0xFFFF
    645          }
    646          
    647          /*********************************************************************
    648           * @fn      zclLighting_ColorControl_Send_ColorLoopSetCmd
    649           *
    650           * @brief   Call to send out a Color Loop Set Command
    651           *
    652           * @param   srcEP - Sending application's endpoint
    653           * @param   dstAddr - where you want the message to go
    654           * @param   updateFlags - which color loop attributes to update before the color loop is started.
    655           * @param   action - action to take for the color loop
    656           * @param   direction - direction for the color loop (decrement or increment)
    657           * @param   time - number of seconds over which to perform a full color loop
    658           * @param   startHue - starting hue to use for the color loop
    659           * @param   disableDefaultRsp - whether to disable the Default Response command
    660           * @param   seqNum - sequence number
    661           *
    662           * @return  ZStatus_t
    663           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    664          ZStatus_t zclLighting_ColorControl_Send_ColorLoopSetCmd(uint8 srcEP, afAddrType_t *dstAddr,
   \                     zclLighting_ColorControl_Send_ColorLoopSetCmd:
    665                                                            zclCCColorLoopSet_updateFlags_t updateFlags, uint8 action,
    666                                                            uint8 direction, uint16 time, uint16 startHue,
    667                                                            uint8 disableDefaultRsp, uint8 seqNum)
    668          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 0,R1
   \   00000C   EC           MOV     A,R4
   \   00000D   FE           MOV     R6,A
   \   00000E   ED           MOV     A,R5
   \   00000F   FF           MOV     R7,A
   \   000010   7419         MOV     A,#0x19
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E0           MOVX    A,@DPTR
   \   000016   FC           MOV     R4,A
   \   000017   741A         MOV     A,#0x1a
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   FD           MOV     R5,A
    669            uint8 buf[7];
    670          
    671            buf[0] = updateFlags.byte;
   \   00001E   7413         MOV     A,#0x13
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E0           MOVX    A,@DPTR
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   F0           MOVX    @DPTR,A
    672            buf[1] = action;
   \   00002B   7401         MOV     A,#0x1
   \   00002D   12....       LCALL   ?XSTACK_DISP0_8
   \   000030   EE           MOV     A,R6
   \   000031   F0           MOVX    @DPTR,A
    673            buf[2] = direction;
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   EF           MOV     A,R7
   \   000038   F0           MOVX    @DPTR,A
   \   000039   7415         MOV     A,#0x15
   \   00003B   12....       LCALL   ?XSTACK_DISP0_8
   \   00003E   12....       LCALL   ?Subroutine19 & 0xFFFF
    674            buf[3] = LO_UINT16( time );
   \                     ??CrossCallReturnLabel_33:
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   E8           MOV     A,R0
   \   000045   F0           MOVX    @DPTR,A
    675            buf[4] = HI_UINT16( time );
   \   000046   7404         MOV     A,#0x4
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   E9           MOV     A,R1
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   7417         MOV     A,#0x17
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   12....       LCALL   ?Subroutine29 & 0xFFFF
    676            buf[5] = LO_UINT16( startHue );
   \                     ??CrossCallReturnLabel_53:
   \   000055   7405         MOV     A,#0x5
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   E8           MOV     A,R0
   \   00005B   F0           MOVX    @DPTR,A
    677            buf[6] = HI_UINT16( startHue );
   \   00005C   7406         MOV     A,#0x6
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   12....       LCALL   ?Subroutine37 & 0xFFFF
    678          
    679            return zcl_SendCommand( srcEP, dstAddr, ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL,
    680                                    COMMAND_LIGHTING_COLOR_LOOP_SET, TRUE,
    681                                    ZCL_FRAME_CLIENT_SERVER_DIR, disableDefaultRsp, 0, seqNum, 7, buf );
   \                     ??CrossCallReturnLabel_118:
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000067   75..07       MOV     ?V0 + 2,#0x7
   \   00006A   75..00       MOV     ?V0 + 3,#0x0
   \   00006D   78..         MOV     R0,#?V0 + 2
   \   00006F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000072   ED           MOV     A,R5
   \   000073   F5..         MOV     ?V0 + 1,A
   \   000075   78..         MOV     R0,#?V0 + 1
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007A   E4           CLR     A
   \   00007B   F5..         MOV     ?V0 + 2,A
   \   00007D   78..         MOV     R0,#?V0 + 2
   \   00007F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000082   EC           MOV     A,R4
   \   000083   F5..         MOV     ?V0 + 1,A
   \   000085   78..         MOV     R0,#?V0 + 1
   \   000087   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008A   75..00       MOV     ?V0 + 1,#0x0
   \   00008D   78..         MOV     R0,#?V0 + 1
   \   00008F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000092   75..01       MOV     ?V0 + 1,#0x1
   \   000095   78..         MOV     R0,#?V0 + 1
   \   000097   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009A   75..44       MOV     ?V0 + 1,#0x44
   \   00009D   78..         MOV     R0,#?V0 + 1
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A2   7C00         MOV     R4,#0x0
   \   0000A4   7D03         MOV     R5,#0x3
   \   0000A6   A9..         MOV     R1,?V0 + 0
   \   0000A8   12....       LCALL   ??zcl_SendCommand?relay
   \   0000AB   740B         MOV     A,#0xb
   \   0000AD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B0   7407         MOV     A,#0x7
   \   0000B2   02....       LJMP    ??Subroutine72_0 & 0xFFFF
    682          }
    683          #endif //ZCL_LIGHT_LINK_ENHANCE
    684          
    685          /*********************************************************************
    686           * @fn      zclLighting_FindCallbacks
    687           *
    688           * @brief   Find the callbacks for an endpoint
    689           *
    690           * @param   endpoint - endpoint to find the application callbacks for
    691           *
    692           * @return  pointer to the callbacks
    693           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    694          static zclLighting_AppCallbacks_t *zclLighting_FindCallbacks( uint8 endpoint )
   \                     zclLighting_FindCallbacks:
    695          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    696            zclLightingCBRec_t *pCBs;
    697          
    698            pCBs = zclLightingCBs;
   \   000004   90....       MOV     DPTR,#zclLightingCBs
    699            while ( pCBs != NULL )
    700            {
    701              if ( pCBs->endpoint == endpoint )
    702                return ( pCBs->CBs );
    703              pCBs = pCBs->next;
   \                     ??zclLighting_FindCallbacks_0:
   \   000007   12....       LCALL   ??Subroutine74_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   00000A   6016         JZ      ??zclLighting_FindCallbacks_1
   \   00000C   8A82         MOV     DPL,R2
   \   00000E   8B83         MOV     DPH,R3
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   69           XRL     A,R1
   \   000014   8A82         MOV     DPL,R2
   \   000016   8B83         MOV     DPH,R3
   \   000018   70ED         JNZ     ??zclLighting_FindCallbacks_0
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   12....       LCALL   ?Subroutine53 & 0xFFFF
    704            }
   \                     ??CrossCallReturnLabel_144:
   \   000020   8004         SJMP    ??zclLighting_FindCallbacks_2
    705            return ( (zclLighting_AppCallbacks_t *)NULL );
   \                     ??zclLighting_FindCallbacks_1:
   \   000022   7A00         MOV     R2,#0x0
   \   000024   7B00         MOV     R3,#0x0
   \                     ??zclLighting_FindCallbacks_2:
   \   000026   D083         POP     DPH
   \   000028   D082         POP     DPL
   \   00002A   02....       LJMP    ?BRET
    706          }
    707          
    708          /*********************************************************************
    709           * @fn      zclLighting_HdlIncoming
    710           *
    711           * @brief   Callback from ZCL to process incoming Commands specific
    712           *          to this cluster library or Profile commands for attributes
    713           *          that aren't in the attribute list
    714           *
    715           * @param   pInMsg - pointer to the incoming message
    716           *
    717           * @return  ZStatus_t
    718           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    719          static ZStatus_t zclLighting_HdlIncoming( zclIncoming_t *pInMsg )
   \                     zclLighting_HdlIncoming:
    720          {   
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    721            ZStatus_t stat = ZSuccess;
    722          
    723          #if defined ( INTER_PAN )
    724            if ( StubAPS_InterPan( pInMsg->msg->srcAddr.panId, pInMsg->msg->srcAddr.endPoint ) )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   000010                ; Setup parameters for call to function StubAPS_InterPan
   \   000010   EA           MOV     A,R2
   \   000011   240F         ADD     A,#0xf
   \   000013   F582         MOV     DPL,A
   \   000015   EB           MOV     A,R3
   \   000016   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_81:
   \   000019   EA           MOV     A,R2
   \   00001A   2410         ADD     A,#0x10
   \   00001C   F582         MOV     DPL,A
   \   00001E   EB           MOV     A,R3
   \   00001F   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_148:
   \   000022   12....       LCALL   ?Subroutine53 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   000025   12....       LCALL   ??StubAPS_InterPan?relay
   \   000028   E9           MOV     A,R1
   \   000029   6004         JZ      ??zclLighting_HdlIncoming_0
    725              return ( stat ); // Cluster not supported thru Inter-PAN
   \   00002B   7900         MOV     R1,#0x0
   \   00002D   8078         SJMP    ??zclLighting_HdlIncoming_1
    726          #endif
    727            if ( zcl_ClusterCmd( pInMsg->hdr.fc.type ) )
   \                     ??zclLighting_HdlIncoming_0:
   \   00002F   8E82         MOV     DPL,R6
   \   000031   8F83         MOV     DPH,R7
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   E0           MOVX    A,@DPTR
   \   000036   FA           MOV     R2,A
   \   000037   5403         ANL     A,#0x3
   \   000039   6401         XRL     A,#0x1
   \   00003B   7025         JNZ     ??zclLighting_HdlIncoming_2
   \   00003D   8E82         MOV     DPL,R6
   \   00003F   8F83         MOV     DPH,R7
   \   000041   E0           MOVX    A,@DPTR
   \   000042   F8           MOV     R0,A
   \   000043   A3           INC     DPTR
   \   000044   E0           MOVX    A,@DPTR
   \   000045   C8           XCH     A,R0
   \   000046   2414         ADD     A,#0x14
   \   000048   F582         MOV     DPL,A
   \   00004A   E8           MOV     A,R0
   \   00004B   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   00004E   EA           MOV     A,R2
   \   00004F   5404         ANL     A,#0x4
   \   000051   7028         JNZ     ??zclLighting_HdlIncoming_3
    728            {
    729              // Is this a manufacturer specific command?
    730              if ( pInMsg->hdr.fc.manuSpecific == 0 )
    731              {
    732                stat = zclLighting_HdlInSpecificCommands( pInMsg );
   \   000053                ; Setup parameters for call to function zclLighting_FindCallbacks
   \   000053   12....       LCALL   ??zclLighting_FindCallbacks?relay
   \   000056   8A..         MOV     ?V0 + 0,R2
   \   000058   8B..         MOV     ?V0 + 1,R3
   \   00005A   AC..         MOV     R4,?V0 + 0
   \   00005C   AD..         MOV     R5,?V0 + 1
   \   00005E   EC           MOV     A,R4
   \   00005F   4D           ORL     A,R5
   \   000060   7005         JNZ     ??zclLighting_HdlIncoming_4
   \                     ??zclLighting_HdlIncoming_2:
   \   000062   75..01       MOV     ?V0 + 0,#0x1
   \   000065   803E         SJMP    ??zclLighting_HdlIncoming_5
   \                     ??zclLighting_HdlIncoming_4:
   \   000067   12....       LCALL   ?Subroutine21 & 0xFFFF
    733              }
   \                     ??CrossCallReturnLabel_34:
   \   00006A   7004         JNZ     ??zclLighting_HdlIncoming_6
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   6403         XRL     A,#0x3
   \                     ??zclLighting_HdlIncoming_6:
   \   000070   702F         JNZ     ??zclLighting_HdlIncoming_7
   \   000072                ; Setup parameters for call to function zclLighting_ProcessInColorControlCmds
   \   000072   EE           MOV     A,R6
   \   000073   FA           MOV     R2,A
   \   000074   EF           MOV     A,R7
   \   000075   FB           MOV     R3,A
   \   000076   12....       LCALL   ??zclLighting_ProcessInColorControlCmds?relay
   \   000079   8023         SJMP    ??zclLighting_HdlIncoming_8
    734              else
    735              {
    736                // We don't support any manufacturer specific command.
    737                //stat = ZFailure;
    738                
    739                stat = zclLighting_HdlInManuSpecCommands( pInMsg );//define my own function
   \                     ??zclLighting_HdlIncoming_3:
   \   00007B                ; Setup parameters for call to function zclLighting_FindCallbacks
   \   00007B   12....       LCALL   ??zclLighting_FindCallbacks?relay
   \   00007E   8A..         MOV     ?V0 + 2,R2
   \   000080   8B..         MOV     ?V0 + 3,R3
   \   000082   AC..         MOV     R4,?V0 + 2
   \   000084   AD..         MOV     R5,?V0 + 3
   \   000086   EC           MOV     A,R4
   \   000087   4D           ORL     A,R5
   \   000088   60D8         JZ      ??zclLighting_HdlIncoming_2
   \   00008A   12....       LCALL   ?Subroutine21 & 0xFFFF
    740              }
    741            }
   \                     ??CrossCallReturnLabel_35:
   \   00008D   6401         XRL     A,#0x1
   \   00008F   7004         JNZ     ??zclLighting_HdlIncoming_9
   \   000091   A3           INC     DPTR
   \   000092   E0           MOVX    A,@DPTR
   \   000093   6403         XRL     A,#0x3
   \                     ??zclLighting_HdlIncoming_9:
   \   000095   700A         JNZ     ??zclLighting_HdlIncoming_7
   \   000097                ; Setup parameters for call to function zclLighting_ProcessInManuBallastConfigCmds
   \   000097   EE           MOV     A,R6
   \   000098   FA           MOV     R2,A
   \   000099   EF           MOV     A,R7
   \   00009A   FB           MOV     R3,A
   \   00009B   12....       LCALL   ??zclLighting_ProcessInManuBallastConfigCmds?re
   \                     ??zclLighting_HdlIncoming_8:
   \   00009E   E9           MOV     A,R1
   \   00009F   8002         SJMP    ??zclLighting_HdlIncoming_10
   \                     ??zclLighting_HdlIncoming_7:
   \   0000A1   7401         MOV     A,#0x1
   \                     ??zclLighting_HdlIncoming_10:
   \   0000A3   F5..         MOV     ?V0 + 0,A
    742            else
    743            {
    744              // Handle all the normal (Read, Write...) commands -- should never get here
    745              stat = ZFailure;
    746            }
    747            return ( stat );
   \                     ??zclLighting_HdlIncoming_5:
   \   0000A5   A9..         MOV     R1,?V0 + 0
   \                     ??zclLighting_HdlIncoming_1:
   \   0000A7   02....       LJMP    ??Subroutine73_0 & 0xFFFF
    748          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine75_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL   ??Subroutine75_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_149:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   22           RET
    749          
    750          /*********************************************************************
    751           * @fn      zclLighting_HdlInSpecificCommands
    752           *
    753           * @brief   Callback from ZCL to process incoming Commands specific
    754           *          to this cluster library
    755          
    756           * @param   pInMsg - pointer to the incoming message
    757           *
    758           * @return  ZStatus_t
    759           */
    760          static ZStatus_t zclLighting_HdlInSpecificCommands( zclIncoming_t *pInMsg )
    761          {
    762            ZStatus_t stat = ZSuccess;
    763            zclLighting_AppCallbacks_t *pCBs;
    764          
    765            // make sure endpoint exists
    766            pCBs = zclLighting_FindCallbacks( pInMsg->msg->endPoint );
    767            if (pCBs == NULL )
    768              return ( ZFailure );
    769          
    770            switch ( pInMsg->msg->clusterId )
    771            {
    772              case ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL:
    773                stat = zclLighting_ProcessInColorControlCmds( pInMsg, pCBs );
    774                break;
    775          
    776              case ZCL_CLUSTER_ID_LIGHTING_BALLAST_CONFIG:
    777                // no commands
    778              default:
    779                stat = ZFailure;
    780                break;
    781            }
    782          
    783            return ( stat );
    784          }
    785          
    786          /*********************************************************************
    787           * @fn      zclLighting_HdlInManuSpecCommands
    788           *
    789           * @brief   Callback to process incoming Manufacturer Commands specific
    790           *          to this cluster library
    791          
    792           * @param   pInMsg - pointer to the incoming message
    793           *
    794           * @return  ZStatus_t
    795           */
    796          static ZStatus_t zclLighting_HdlInManuSpecCommands( zclIncoming_t *pInMsg )  //define my own function
    797          {
    798            ZStatus_t stat = ZSuccess;
    799            zclLighting_AppCallbacks_t *pCBs;
    800          
    801            // make sure endpoint exists
    802            pCBs = zclLighting_FindCallbacks( pInMsg->msg->endPoint );
    803            if (pCBs == NULL )
    804              return ( ZFailure );
    805          
    806            switch ( pInMsg->msg->clusterId )
    807            {
    808              case ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL:
    809                stat = ZFailure;
    810                break;
    811          
    812              case ZCL_CLUSTER_ID_LIGHTING_BALLAST_CONFIG:
    813                stat = zclLighting_ProcessInManuBallastConfigCmds( pInMsg, pCBs );
    814                break;
    815                
    816              default:
    817                stat = ZFailure;
    818                break;
    819            }
    820          
    821            return ( stat );
    822          }
    823          
    824          /*********************************************************************
    825           * @fn      zclLighting_ProcessInColorControlCmds
    826           *
    827           * @brief   Callback from ZCL to process incoming Commands specific
    828           *          to this cluster library on a command ID basis
    829          
    830           * @param   pInMsg - pointer to the incoming message
    831           * @param   pCBs - pointer to the application callbacks
    832           *
    833           * @return  ZStatus_t
    834           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   F8           MOV     R0,A
   \   000001   ED           MOV     A,R5
   \   000002   3400         ADDC    A,#0x0
   \   000004   F9           MOV     R1,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009                REQUIRE ??Subroutine74_0
   \   000009                ; // Fall through to label ??Subroutine74_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    835          static ZStatus_t zclLighting_ProcessInColorControlCmds( zclIncoming_t *pInMsg,
   \                     zclLighting_ProcessInColorControlCmds:
    836                                                       zclLighting_AppCallbacks_t *pCBs )
    837          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 20
   \   000005   74EC         MOV     A,#-0x14
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    838            ZStatus_t stat;
    839          
    840            switch ( pInMsg->hdr.commandID )
   \   00000A   EA           MOV     A,R2
   \   00000B   2408         ADD     A,#0x8
   \   00000D   F8           MOV     R0,A
   \   00000E   EB           MOV     A,R3
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F9           MOV     R1,A
   \   000012   E8           MOV     A,R0
   \   000013   FE           MOV     R6,A
   \   000014   E9           MOV     A,R1
   \   000015   FF           MOV     R7,A
   \   000016   8A82         MOV     DPL,R2
   \   000018   8B83         MOV     DPH,R3
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   6064         JZ      ??zclLighting_ProcessInColorControlCmds_0
   \   000024   14           DEC     A
   \   000025   7003         JNZ     $+5
   \   000027   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_1 & 0xFFFF
   \   00002A   14           DEC     A
   \   00002B   7003         JNZ     $+5
   \   00002D   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_2 & 0xFFFF
   \   000030   14           DEC     A
   \   000031   7003         JNZ     $+5
   \   000033   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_3 & 0xFFFF
   \   000036   14           DEC     A
   \   000037   7003         JNZ     $+5
   \   000039   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_4 & 0xFFFF
   \   00003C   14           DEC     A
   \   00003D   7003         JNZ     $+5
   \   00003F   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_5 & 0xFFFF
   \   000042   14           DEC     A
   \   000043   7003         JNZ     $+5
   \   000045   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_6 & 0xFFFF
   \   000048   14           DEC     A
   \   000049   7003         JNZ     $+5
   \   00004B   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_7 & 0xFFFF
   \   00004E   14           DEC     A
   \   00004F   7003         JNZ     $+5
   \   000051   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_8 & 0xFFFF
   \   000054   14           DEC     A
   \   000055   7003         JNZ     $+5
   \   000057   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_9 & 0xFFFF
   \   00005A   14           DEC     A
   \   00005B   7003         JNZ     $+5
   \   00005D   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_10 & 0xFFFF
   \   000060   24CA         ADD     A,#-0x36
   \   000062   7003         JNZ     $+5
   \   000064   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_11 & 0xFFFF
   \   000067   14           DEC     A
   \   000068   7003         JNZ     $+5
   \   00006A   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_12 & 0xFFFF
   \   00006D   14           DEC     A
   \   00006E   7003         JNZ     $+5
   \   000070   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_13 & 0xFFFF
   \   000073   14           DEC     A
   \   000074   7003         JNZ     $+5
   \   000076   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_14 & 0xFFFF
   \   000079   14           DEC     A
   \   00007A   7003         JNZ     $+5
   \   00007C   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_15 & 0xFFFF
   \   00007F   24FD         ADD     A,#-0x3
   \   000081   7003         JNZ     $+5
   \   000083   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_16 & 0xFFFF
   \   000086   803C         SJMP    ??zclLighting_ProcessInColorControlCmds_17
    841            {
    842              case COMMAND_LIGHTING_MOVE_TO_HUE:
    843                stat = zclLighting_ProcessInCmd_ColorControl_MoveToHue( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_0:
   \   000088   12....       LCALL   ??Subroutine81_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   00008B   6037         JZ      ??zclLighting_ProcessInColorControlCmds_17
   \   00008D   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000090   C0E0         PUSH    A
   \   000092   7403         MOV     A,#0x3
   \   000094   12....       LCALL   ?XSTACK_DISP0_8
   \   000097   D0E0         POP     A
   \   000099   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   00009C   C0E0         PUSH    A
   \   00009E   7404         MOV     A,#0x4
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   D0E0         POP     A
   \   0000A5   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0000A8   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   0000AB   12....       LCALL   ??Subroutine80_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   0000AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B1   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0000B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   F4           CPL     A
   \   0000B9   7006         JNZ     ??zclLighting_ProcessInColorControlCmds_18
   \                     ??zclLighting_ProcessInColorControlCmds_19:
   \   0000BB   75..87       MOV     ?V0 + 0,#-0x79
   \   0000BE   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_20 & 0xFFFF
   \                     ??zclLighting_ProcessInColorControlCmds_18:
   \   0000C1                ; Setup parameters for indirect call
   \   0000C1   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_21 & 0xFFFF
   \                     ??zclLighting_ProcessInColorControlCmds_17:
   \   0000C4   75..01       MOV     ?V0 + 0,#0x1
   \   0000C7   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_20 & 0xFFFF
    844                break;
    845          
    846              case COMMAND_LIGHTING_MOVE_HUE:
    847                stat = zclLighting_ProcessInCmd_ColorControl_MoveHue( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_1:
   \   0000CA   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000CD   C0E0         PUSH    A
   \   0000CF   7407         MOV     A,#0x7
   \   0000D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D4   D0E0         POP     A
   \   0000D6   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   0000D9   C0E0         PUSH    A
   \   0000DB   7408         MOV     A,#0x8
   \   0000DD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000E0   D0E0         POP     A
   \   0000E2   F0           MOVX    @DPTR,A
   \   0000E3   700E         JNZ     ??zclLighting_ProcessInColorControlCmds_22
   \   0000E5   7407         MOV     A,#0x7
   \   0000E7   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   6006         JZ      ??zclLighting_ProcessInColorControlCmds_22
   \                     ??zclLighting_ProcessInColorControlCmds_23:
   \   0000ED   75..85       MOV     ?V0 + 0,#-0x7b
   \   0000F0   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_20 & 0xFFFF
   \                     ??zclLighting_ProcessInColorControlCmds_22:
   \   0000F3   8C82         MOV     DPL,R4
   \   0000F5   8D83         MOV     DPH,R5
   \   0000F7   8057         SJMP    ??zclLighting_ProcessInColorControlCmds_24
    848                break;
    849          
    850              case COMMAND_LIGHTING_STEP_HUE:
    851                stat = zclLighting_ProcessInCmd_ColorControl_StepHue( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_2:
   \   0000F9   EC           MOV     A,R4
   \   0000FA   2404         ADD     A,#0x4
   \   0000FC   8067         SJMP    ??zclLighting_ProcessInColorControlCmds_25
    852                break;
    853          
    854              case COMMAND_LIGHTING_MOVE_TO_SATURATION:
    855                stat = zclLighting_ProcessInCmd_ColorControl_MoveToSaturation( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_3:
   \   0000FE   EC           MOV     A,R4
   \   0000FF   2406         ADD     A,#0x6
   \   000101   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_140:
   \   000104   60BE         JZ      ??zclLighting_ProcessInColorControlCmds_17
   \   000106   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000109   FB           MOV     R3,A
   \   00010A   8A82         MOV     DPL,R2
   \   00010C   8B83         MOV     DPH,R3
   \   00010E   A3           INC     DPTR
   \   00010F   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   000112   E0           MOVX    A,@DPTR
   \   000113   FB           MOV     R3,A
   \   000114   EC           MOV     A,R4
   \   000115   FA           MOV     R2,A
   \   000116   7401         MOV     A,#0x1
   \   000118   12....       LCALL   ?XSTACK_DISP0_8
   \   00011B   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   00011E   E0           MOVX    A,@DPTR
   \   00011F   F4           CPL     A
   \   000120   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_26 & 0xFFFF
    856                break;
    857          
    858              case COMMAND_LIGHTING_MOVE_SATURATION:
    859                stat = zclLighting_ProcessInCmd_ColorControl_MoveSaturation( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_4:
   \   000123   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000126   C0E0         PUSH    A
   \   000128   7407         MOV     A,#0x7
   \   00012A   12....       LCALL   ?XSTACK_DISP0_8
   \   00012D   D0E0         POP     A
   \   00012F   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000132   C0E0         PUSH    A
   \   000134   7408         MOV     A,#0x8
   \   000136   12....       LCALL   ?XSTACK_DISP0_8
   \   000139   D0E0         POP     A
   \   00013B   F0           MOVX    @DPTR,A
   \   00013C   7008         JNZ     ??zclLighting_ProcessInColorControlCmds_27
   \   00013E   7407         MOV     A,#0x7
   \   000140   12....       LCALL   ?XSTACK_DISP0_8
   \   000143   E0           MOVX    A,@DPTR
   \   000144   70A7         JNZ     ??zclLighting_ProcessInColorControlCmds_23
   \                     ??zclLighting_ProcessInColorControlCmds_27:
   \   000146   8C82         MOV     DPL,R4
   \   000148   8D83         MOV     DPH,R5
   \   00014A   A3           INC     DPTR
   \   00014B   A3           INC     DPTR
   \   00014C   A3           INC     DPTR
   \   00014D   A3           INC     DPTR
   \   00014E   A3           INC     DPTR
   \   00014F   A3           INC     DPTR
   \                     ??zclLighting_ProcessInColorControlCmds_24:
   \   000150   A3           INC     DPTR
   \   000151   A3           INC     DPTR
   \   000152   12....       LCALL   ??Subroutine82_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000155   7003         JNZ     $+5
   \   000157   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_17 & 0xFFFF
   \   00015A                ; Setup parameters for indirect call
   \   00015A   7407         MOV     A,#0x7
   \   00015C   12....       LCALL   ?XSTACK_DISP0_8
   \   00015F   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_28 & 0xFFFF
    860                break;
    861          
    862              case COMMAND_LIGHTING_STEP_SATURATION:
    863                stat = zclLighting_ProcessInCmd_ColorControl_StepSaturation( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_5:
   \   000162   EC           MOV     A,R4
   \   000163   240A         ADD     A,#0xa
   \                     ??zclLighting_ProcessInColorControlCmds_25:
   \   000165   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_141:
   \   000168   7003         JNZ     $+5
   \   00016A   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_17 & 0xFFFF
   \   00016D   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000170   F583         MOV     DPH,A
   \   000172   8A82         MOV     DPL,R2
   \   000174   A3           INC     DPTR
   \   000175   E0           MOVX    A,@DPTR
   \   000176   C0E0         PUSH    A
   \   000178   7401         MOV     A,#0x1
   \   00017A   12....       LCALL   ?XSTACK_DISP0_8
   \   00017D   D0E0         POP     A
   \   00017F   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000182   A3           INC     DPTR
   \   000183   E0           MOVX    A,@DPTR
   \   000184   C0E0         PUSH    A
   \   000186   7402         MOV     A,#0x2
   \   000188   12....       LCALL   ?XSTACK_DISP0_8
   \   00018B   D0E0         POP     A
   \   00018D   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000190   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_29 & 0xFFFF
    864                break;
    865          
    866              case COMMAND_LIGHTING_MOVE_TO_HUE_AND_SATURATION:
    867                stat = zclLighting_ProcessInCmd_ColorControl_MoveToHueAndSaturation( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_6:
   \   000193   EC           MOV     A,R4
   \   000194   240C         ADD     A,#0xc
   \   000196   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_142:
   \   000199   7003         JNZ     $+5
   \   00019B   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_17 & 0xFFFF
   \   00019E   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   0001A1   C0E0         PUSH    A
   \   0001A3   7403         MOV     A,#0x3
   \   0001A5   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A8   D0E0         POP     A
   \   0001AA   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0001AD   E0           MOVX    A,@DPTR
   \   0001AE   F5..         MOV     ?V0 + 0,A
   \   0001B0   7404         MOV     A,#0x4
   \   0001B2   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B5   E5..         MOV     A,?V0 + 0
   \   0001B7   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0001BA   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0001BD   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0001C0   E0           MOVX    A,@DPTR
   \   0001C1   FB           MOV     R3,A
   \   0001C2   EC           MOV     A,R4
   \   0001C3   FA           MOV     R2,A
   \   0001C4   7405         MOV     A,#0x5
   \   0001C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C9   EA           MOV     A,R2
   \   0001CA   F0           MOVX    @DPTR,A
   \   0001CB   A3           INC     DPTR
   \   0001CC   EB           MOV     A,R3
   \   0001CD   F0           MOVX    @DPTR,A
   \   0001CE   7403         MOV     A,#0x3
   \   0001D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D3   E0           MOVX    A,@DPTR
   \   0001D4   F4           CPL     A
   \   0001D5   7003         JNZ     $+5
   \   0001D7   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_19 & 0xFFFF
   \   0001DA   74FF         MOV     A,#-0x1
   \   0001DC   65..         XRL     A,?V0 + 0
   \                     ??zclLighting_ProcessInColorControlCmds_26:
   \   0001DE   7003         JNZ     $+5
   \   0001E0   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_19 & 0xFFFF
   \   0001E3                ; Setup parameters for indirect call
   \   0001E3   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_29 & 0xFFFF
    868                break;
    869          
    870              case COMMAND_LIGHTING_MOVE_TO_COLOR:
    871                stat = zclLighting_ProcessInCmd_ColorControl_MoveToColor( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_7:
   \   0001E6                ; Setup parameters for call to function zclLighting_ProcessInCmd_ColorControl_MoveToColor
   \   0001E6   12....       LCALL   ??zclLighting_ProcessInCmd_ColorControl_MoveToC
   \   0001E9   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_30 & 0xFFFF
    872                break;
    873          
    874              case COMMAND_LIGHTING_MOVE_COLOR:
    875                stat = zclLighting_ProcessInCmd_ColorControl_MoveColor( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_8:
   \   0001EC   EC           MOV     A,R4
   \   0001ED   2410         ADD     A,#0x10
   \   0001EF   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0001F2   7003         JNZ     $+5
   \   0001F4   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_17 & 0xFFFF
   \   0001F7   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0001FA   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FD   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   000200   12....       LCALL   ?XSTACK_DISP0_8
   \   000203   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000206   12....       LCALL   ?XSTACK_DISP0_8
   \   000209   AA82         MOV     R2,DPL
   \   00020B   AB83         MOV     R3,DPH
   \   00020D   8C82         MOV     DPL,R4
   \   00020F   8D83         MOV     DPH,R5
   \   000211   12....       LCALL   ?CALL_IND
   \   000214   75..00       MOV     ?V0 + 0,#0x0
   \   000217   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_20 & 0xFFFF
    876                break;
    877          
    878              case COMMAND_LIGHTING_STEP_COLOR:
    879                stat = zclLighting_ProcessInCmd_ColorControl_StepColor( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_9:
   \   00021A   EC           MOV     A,R4
   \   00021B   2412         ADD     A,#0x12
   \   00021D   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000220   7003         JNZ     $+5
   \   000222   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_17 & 0xFFFF
   \   000225   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000228   E0           MOVX    A,@DPTR
   \   000229   FE           MOV     R6,A
   \   00022A   A3           INC     DPTR
   \   00022B   E0           MOVX    A,@DPTR
   \   00022C   FB           MOV     R3,A
   \   00022D   EE           MOV     A,R6
   \   00022E   FA           MOV     R2,A
   \   00022F   740E         MOV     A,#0xe
   \   000231   12....       LCALL   ?XSTACK_DISP0_8
   \   000234   EA           MOV     A,R2
   \   000235   12....       LCALL   ??Subroutine77_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   000238   FE           MOV     R6,A
   \   000239   8882         MOV     DPL,R0
   \   00023B   8983         MOV     DPH,R1
   \   00023D   A3           INC     DPTR
   \   00023E   A3           INC     DPTR
   \   00023F   A3           INC     DPTR
   \   000240   E0           MOVX    A,@DPTR
   \   000241   FB           MOV     R3,A
   \   000242   EE           MOV     A,R6
   \   000243   FA           MOV     R2,A
   \   000244   7410         MOV     A,#0x10
   \   000246   12....       LCALL   ?XSTACK_DISP0_8
   \   000249   EA           MOV     A,R2
   \   00024A   F0           MOVX    @DPTR,A
   \   00024B   A3           INC     DPTR
   \   00024C   EB           MOV     A,R3
   \   00024D   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_80:
   \   000250   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000253   A3           INC     DPTR
   \   000254   A3           INC     DPTR
   \   000255   A3           INC     DPTR
   \   000256   E0           MOVX    A,@DPTR
   \   000257   F9           MOV     R1,A
   \   000258   EA           MOV     A,R2
   \   000259   F8           MOV     R0,A
   \   00025A   7412         MOV     A,#0x12
   \   00025C   12....       LCALL   ?XSTACK_DISP0_8
   \   00025F   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000262                ; Setup parameters for indirect call
   \   000262   740E         MOV     A,#0xe
   \   000264   8029         SJMP    ??zclLighting_ProcessInColorControlCmds_31
    880                break;
    881          
    882              case COMMAND_LIGHTING_MOVE_TO_COLOR_TEMPERATURE:
    883                stat = zclLighting_ProcessInCmd_ColorControl_MoveToColorTemperature( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_10:
   \   000266   EC           MOV     A,R4
   \   000267   2414         ADD     A,#0x14
   \   000269   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   00026C   7003         JNZ     $+5
   \   00026E   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_17 & 0xFFFF
   \   000271   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000274   12....       LCALL   ?XSTACK_DISP0_8
   \   000277   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   00027A   12....       LCALL   ?XSTACK_DISP0_8
   \   00027D   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000280   12....       LCALL   ?XSTACK_DISP0_8
   \   000283   C3           CLR     C
   \   000284   A3           INC     DPTR
   \   000285   E0           MOVX    A,@DPTR
   \   000286   94FF         SUBB    A,#-0x1
   \   000288   4003         JC      $+5
   \   00028A   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_19 & 0xFFFF
   \   00028D                ; Setup parameters for indirect call
   \   00028D   7403         MOV     A,#0x3
   \                     ??zclLighting_ProcessInColorControlCmds_31:
   \   00028F   12....       LCALL   ?XSTACK_DISP0_8
   \   000292   AA82         MOV     R2,DPL
   \   000294   AB83         MOV     R3,DPH
   \   000296   8C82         MOV     DPL,R4
   \   000298   8D83         MOV     DPH,R5
   \   00029A   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_32 & 0xFFFF
    884                break;
    885          
    886          #ifdef ZCL_LIGHT_LINK_ENHANCE
    887              case COMMAND_LIGHTING_ENHANCED_MOVE_TO_HUE:
    888                stat = zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHue( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_11:
   \   00029D   EC           MOV     A,R4
   \   00029E   2416         ADD     A,#0x16
   \   0002A0   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   0002A3   7003         JNZ     $+5
   \   0002A5   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_17 & 0xFFFF
   \   0002A8   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   0002AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0002AE   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   0002B1   C0E0         PUSH    A
   \   0002B3   740B         MOV     A,#0xb
   \   0002B5   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B8   D0E0         POP     A
   \   0002BA   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0002BD   12....       LCALL   ?XSTACK_DISP0_8
   \   0002C0   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   0002C3                ; Setup parameters for indirect call
   \   0002C3   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_33 & 0xFFFF
    889                break;
    890          
    891              case COMMAND_LIGHTING_ENHANCED_MOVE_HUE:
    892                stat = zclLighting_ProcessInCmd_ColorControl_EnhancedMoveHue( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_12:
   \   0002C6   12....       LCALL   ?Subroutine13 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0002C9   85..82       MOV     DPL,?XSP + 0
   \   0002CC   85..83       MOV     DPH,?XSP + 1
   \   0002CF   F0           MOVX    @DPTR,A
   \   0002D0   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   0002D3   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0002D6   E0           MOVX    A,@DPTR
   \   0002D7   F9           MOV     R1,A
   \   0002D8   EA           MOV     A,R2
   \   0002D9   F8           MOV     R0,A
   \   0002DA   7401         MOV     A,#0x1
   \   0002DC   12....       LCALL   ?XSTACK_DISP0_8
   \   0002DF   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   0002E2   7401         MOV     A,#0x1
   \   0002E4   12....       LCALL   ?XSTACK_DISP0_8
   \   0002E7   E0           MOVX    A,@DPTR
   \   0002E8   49           ORL     A,R1
   \   0002E9   700C         JNZ     ??zclLighting_ProcessInColorControlCmds_34
   \   0002EB   85..82       MOV     DPL,?XSP + 0
   \   0002EE   85..83       MOV     DPH,?XSP + 1
   \   0002F1   E0           MOVX    A,@DPTR
   \   0002F2   6003         JZ      $+5
   \   0002F4   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_23 & 0xFFFF
   \                     ??zclLighting_ProcessInColorControlCmds_34:
   \   0002F7   EC           MOV     A,R4
   \   0002F8   2418         ADD     A,#0x18
   \   0002FA   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_150:
   \   0002FD   12....       LCALL   ??Subroutine82_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000300   7003         JNZ     $+5
   \   000302   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_17 & 0xFFFF
   \   000305                ; Setup parameters for indirect call
   \   000305   85..82       MOV     DPL,?XSP + 0
   \   000308   85..83       MOV     DPH,?XSP + 1
   \                     ??zclLighting_ProcessInColorControlCmds_28:
   \   00030B   AA82         MOV     R2,DPL
   \   00030D   AB83         MOV     R3,DPH
   \   00030F   8882         MOV     DPL,R0
   \   000311   8983         MOV     DPH,R1
   \   000313   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_32 & 0xFFFF
    893                break;
    894          
    895              case COMMAND_LIGHTING_ENHANCED_STEP_HUE:
    896                stat = zclLighting_ProcessInCmd_ColorControl_EnhancedStepHue( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_13:
   \   000316   EC           MOV     A,R4
   \   000317   241A         ADD     A,#0x1a
   \   000319   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   00031C   7003         JNZ     $+5
   \   00031E   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_17 & 0xFFFF
   \   000321   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000324   C0E0         PUSH    A
   \   000326   7409         MOV     A,#0x9
   \   000328   12....       LCALL   ?XSTACK_DISP0_8
   \   00032B   D0E0         POP     A
   \   00032D   12....       LCALL   ?Subroutine44 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000330   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_57:
   \   000333   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000336   E0           MOVX    A,@DPTR
   \   000337   FD           MOV     R5,A
   \   000338   EE           MOV     A,R6
   \   000339   FC           MOV     R4,A
   \   00033A   740A         MOV     A,#0xa
   \   00033C   12....       LCALL   ?XSTACK_DISP0_8
   \   00033F   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_156:
   \   000342   A3           INC     DPTR
   \   000343   A3           INC     DPTR
   \   000344   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   000347   A3           INC     DPTR
   \   000348   E0           MOVX    A,@DPTR
   \   000349   FB           MOV     R3,A
   \   00034A   EC           MOV     A,R4
   \   00034B   FA           MOV     R2,A
   \   00034C   740C         MOV     A,#0xc
   \   00034E   12....       LCALL   ?XSTACK_DISP0_8
   \   000351   EA           MOV     A,R2
   \   000352   F0           MOVX    @DPTR,A
   \   000353   A3           INC     DPTR
   \   000354   EB           MOV     A,R3
   \   000355   F0           MOVX    @DPTR,A
   \   000356                ; Setup parameters for indirect call
   \   000356   7409         MOV     A,#0x9
   \   000358   12....       LCALL   ?XSTACK_DISP0_8
   \                     ??zclLighting_ProcessInColorControlCmds_29:
   \   00035B   AA82         MOV     R2,DPL
   \   00035D   AB83         MOV     R3,DPH
   \   00035F   8882         MOV     DPL,R0
   \   000361   8983         MOV     DPH,R1
   \   000363   803C         SJMP    ??zclLighting_ProcessInColorControlCmds_35
    897                break;
    898          
    899              case COMMAND_LIGHTING_ENHANCED_MOVE_TO_HUE_AND_SATURATION:
    900                stat = zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHueAndSaturation( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_14:
   \   000365   EC           MOV     A,R4
   \   000366   241C         ADD     A,#0x1c
   \   000368   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   00036B   7003         JNZ     $+5
   \   00036D   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_17 & 0xFFFF
   \   000370   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000373   12....       LCALL   ?XSTACK_DISP0_8
   \   000376   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_161:
   \   000379   F5..         MOV     ?V0 + 0,A
   \   00037B   740B         MOV     A,#0xb
   \   00037D   12....       LCALL   ?XSTACK_DISP0_8
   \   000380   E5..         MOV     A,?V0 + 0
   \   000382   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000385   12....       LCALL   ?XSTACK_DISP0_8
   \   000388   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   00038B   74FF         MOV     A,#-0x1
   \   00038D   65..         XRL     A,?V0 + 0
   \   00038F   7003         JNZ     $+5
   \   000391   02....       LJMP    ??zclLighting_ProcessInColorControlCmds_19 & 0xFFFF
   \   000394                ; Setup parameters for indirect call
   \                     ??zclLighting_ProcessInColorControlCmds_33:
   \   000394   7409         MOV     A,#0x9
   \   000396   12....       LCALL   ?XSTACK_DISP0_8
   \                     ??zclLighting_ProcessInColorControlCmds_21:
   \   000399   AA82         MOV     R2,DPL
   \   00039B   AB83         MOV     R3,DPH
   \   00039D   8C82         MOV     DPL,R4
   \   00039F   8D83         MOV     DPH,R5
   \                     ??zclLighting_ProcessInColorControlCmds_35:
   \   0003A1   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0003A4   8014         SJMP    ??zclLighting_ProcessInColorControlCmds_32
    901                break;
    902          
    903              case COMMAND_LIGHTING_COLOR_LOOP_SET:
    904                stat = zclLighting_ProcessInCmd_ColorControl_ColorLoopSet( pInMsg, pCBs );
   \                     ??zclLighting_ProcessInColorControlCmds_15:
   \   0003A6                ; Setup parameters for call to function zclLighting_ProcessInCmd_ColorControl_ColorLoopSet
   \   0003A6   12....       LCALL   ??zclLighting_ProcessInCmd_ColorControl_ColorLo
   \   0003A9   8012         SJMP    ??zclLighting_ProcessInColorControlCmds_30
    905                break;
    906          
    907              case COMMAND_LIGHTING_STOP_MOVE_STEP:
    908                if ( pCBs->pfnColorControl_StopMoveStep ) // no payload to parse
   \                     ??zclLighting_ProcessInColorControlCmds_16:
   \   0003AB   EC           MOV     A,R4
   \   0003AC   2420         ADD     A,#0x20
   \   0003AE   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_151:
   \   0003B1   12....       LCALL   ??Subroutine78_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   0003B4   E582         MOV     A,DPL
   \   0003B6   4583         ORL     A,DPH
   \   0003B8   6006         JZ      ??zclLighting_ProcessInColorControlCmds_20
    909                {
    910                  stat = pCBs->pfnColorControl_StopMoveStep();
   \   0003BA                ; Setup parameters for indirect call
   \                     ??zclLighting_ProcessInColorControlCmds_32:
   \   0003BA   12....       LCALL   ?CALL_IND
   \                     ??zclLighting_ProcessInColorControlCmds_30:
   \   0003BD   E9           MOV     A,R1
   \   0003BE   F5..         MOV     ?V0 + 0,A
    911                }
    912                break;
    913          #endif // ZCL_LIGHT_LINK_ENHANCE
    914          
    915              default:
    916                // Unknown command
    917                stat = ZFailure;
    918                break;
    919            }
    920          
    921            return ( stat );
   \                     ??zclLighting_ProcessInColorControlCmds_20:
   \   0003C0   A9..         MOV     R1,?V0 + 0
   \   0003C2   7414         MOV     A,#0x14
   \   0003C4   02....       LJMP    ?Subroutine2 & 0xFFFF
    922          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   F582         MOV     DPL,A
   \   000002   ED           MOV     A,R5
   \   000003                REQUIRE ??Subroutine75_0
   \   000003                ; // Fall through to label ??Subroutine75_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000003                ; Setup parameters for indirect call
   \   000003   7403         MOV     A,#0x3
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   EC           MOV     A,R4
   \   000001                REQUIRE ??Subroutine76_0
   \   000001                ; // Fall through to label ??Subroutine76_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine76_0:
   \   000000   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002                REQUIRE ??Subroutine77_0
   \   000002                ; // Fall through to label ??Subroutine77_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine77_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   FA           MOV     R2,A
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_94:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F583         MOV     DPH,A
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000003   F583         MOV     DPH,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_88:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   8A82         MOV     DPL,R2
   \   000004   8B83         MOV     DPH,R3
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine78_0
   \   000004                ; // Fall through to label ??Subroutine78_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine78_0:
   \   000000   12....       LCALL   ??Subroutine79_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine51 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5..         MOV     ?V0 + 0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   FB           MOV     R3,A
   \   000009   7409         MOV     A,#0x9
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FE           MOV     R6,A
   \   000005   A3           INC     DPTR
   \   000006   E0           MOVX    A,@DPTR
   \   000007   FB           MOV     R3,A
   \   000008   EE           MOV     A,R6
   \   000009   FA           MOV     R2,A
   \   00000A   7403         MOV     A,#0x3
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine79_0
   \   000004                ; // Fall through to label ??Subroutine79_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine79_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000003   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000006   E8           MOV     A,R0
   \   000007   FC           MOV     R4,A
   \   000008   E9           MOV     A,R1
   \   000009   FD           MOV     R5,A
   \   00000A   EC           MOV     A,R4
   \   00000B   4D           ORL     A,R5
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_97:
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_93:
   \   000003   85..82       MOV     DPL,?XSP + 0
   \   000006   85..83       MOV     DPH,?XSP + 1
   \   000009   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_101:
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FA           MOV     R2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005                REQUIRE ??Subroutine80_0
   \   000005                ; // Fall through to label ??Subroutine80_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine80_0:
   \   000000   8882         MOV     DPL,R0
   \   000002   8983         MOV     DPH,R1
   \   000004   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_176:
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   EA           MOV     A,R2
   \   00000A   F8           MOV     R0,A
   \   00000B   7405         MOV     A,#0x5
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine48 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   000004   A3           INC     DPTR
   \   000005   12....       LCALL   ?Subroutine54 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000008   A3           INC     DPTR
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   F9           MOV     R1,A
   \   00000B   EA           MOV     A,R2
   \   00000C   F8           MOV     R0,A
   \   00000D   740C         MOV     A,#0xc
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   ED           MOV     A,R5
   \   000003   F0           MOVX    @DPTR,A
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_92:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   F8           MOV     R0,A
   \   000001   ED           MOV     A,R5
   \   000002   3400         ADDC    A,#0x0
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   FC           MOV     R4,A
   \   000007   E9           MOV     A,R1
   \   000008   FD           MOV     R5,A
   \   000009                REQUIRE ??Subroutine81_0
   \   000009                ; // Fall through to label ??Subroutine81_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine81_0:
   \   000000   8C82         MOV     DPL,R4
   \   000002   8D83         MOV     DPH,R5
   \   000004                REQUIRE ??Subroutine82_0
   \   000004                ; // Fall through to label ??Subroutine82_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine82_0:
   \   000000   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_98:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   FE           MOV     R6,A
   \   000003   8A82         MOV     DPL,R2
   \   000005   8B83         MOV     DPH,R3
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine52 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET
    923          
    924          /*********************************************************************
    925           * @fn      zclLighting_ProcessInManuBallastConfigCmds
    926           *
    927           * @brief   Callback from ZCL to process incoming Commands specific
    928           *          to this cluster library on a command ID basis
    929          
    930           * @param   pInMsg - pointer to the incoming message
    931           * @param   pCBs - pointer to the application callbacks
    932           *
    933           * @return  ZStatus_t
    934           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    935          static ZStatus_t zclLighting_ProcessInManuBallastConfigCmds( zclIncoming_t *pInMsg,
   \                     zclLighting_ProcessInManuBallastConfigCmds:
    936                                                       zclLighting_AppCallbacks_t *pCBs )  //define my own function
    937          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    938            ZStatus_t stat;
    939          
    940            switch ( pInMsg->hdr.commandID )
   \   00000E   8E82         MOV     DPL,R6
   \   000010   8F83         MOV     DPH,R7
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6003         JZ      $+5
   \   00001C   02....       LJMP    ??zclLighting_ProcessInManuBallastConfigCmds_0 & 0xFFFF
    941            {
    942              uint8 Tbuf[1];
    943              case COMMAND_BALLAST_DALI_ADDRESSING:
    944                for(uint8 i=0; (dalishortaddr-i) > 0; i++)
   \   00001F   75..00       MOV     ?V0 + 2,#0x0
   \   000022   02....       LJMP    ??zclLighting_ProcessInManuBallastConfigCmds_1 & 0xFFFF
    945                {
    946                 Tbuf[0] = i;
   \                     ??zclLighting_ProcessInManuBallastConfigCmds_2:
   \   000025   85..82       MOV     DPL,?XSP + 0
   \   000028   85..83       MOV     DPH,?XSP + 1
   \   00002B   E5..         MOV     A,?V0 + 2
   \   00002D   12....       LCALL   ?Subroutine44 & 0xFFFF
    947                 zcl_SendCommand(pInMsg->msg->endPoint,&(pInMsg->msg->srcAddr),ZCL_CLUSTER_ID_LIGHT_LINK,
    948                                 0x43,1,1,
    949                                 0,pInMsg->hdr.manuCode,pInMsg->hdr.transSeqNum,1,Tbuf);//send a notice to controller after allocate DALI address.
    950                }
   \                     ??CrossCallReturnLabel_75:
   \   000030   E0           MOVX    A,@DPTR
   \   000031   F5..         MOV     ?V0 + 0,A
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F5..         MOV     ?V0 + 1,A
   \   000037                ; Setup parameters for call to function zcl_SendCommand
   \   000037   85..82       MOV     DPL,?XSP + 0
   \   00003A   85..83       MOV     DPH,?XSP + 1
   \   00003D   8582..       MOV     ?V0 + 4,DPL
   \   000040   8583..       MOV     ?V0 + 5,DPH
   \   000043   78..         MOV     R0,#?V0 + 4
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000048   75..01       MOV     ?V0 + 4,#0x1
   \   00004B   75..00       MOV     ?V0 + 5,#0x0
   \   00004E   78..         MOV     R0,#?V0 + 4
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   F5..         MOV     ?V0 + 3,A
   \   000060   78..         MOV     R0,#?V0 + 3
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000065   8E82         MOV     DPL,R6
   \   000067   8F83         MOV     DPH,R7
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   A3           INC     DPTR
   \   00006C   A3           INC     DPTR
   \   00006D   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000070   75..00       MOV     ?V0 + 3,#0x0
   \   000073   78..         MOV     R0,#?V0 + 3
   \   000075   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000078   75..01       MOV     ?V0 + 3,#0x1
   \   00007B   78..         MOV     R0,#?V0 + 3
   \   00007D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000080   78..         MOV     R0,#?V0 + 3
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000085   75..43       MOV     ?V0 + 3,#0x43
   \   000088   78..         MOV     R0,#?V0 + 3
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008D   7C00         MOV     R4,#0x0
   \   00008F   7D10         MOV     R5,#0x10
   \   000091   E5..         MOV     A,?V0 + 0
   \   000093   2406         ADD     A,#0x6
   \   000095   FA           MOV     R2,A
   \   000096   E5..         MOV     A,?V0 + 1
   \   000098   3400         ADDC    A,#0x0
   \   00009A   FB           MOV     R3,A
   \   00009B   E5..         MOV     A,?V0 + 0
   \   00009D   2414         ADD     A,#0x14
   \   00009F   F582         MOV     DPL,A
   \   0000A1   E5..         MOV     A,?V0 + 1
   \   0000A3   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_83:
   \   0000A6   12....       LCALL   ??zcl_SendCommand?relay
   \   0000A9   740B         MOV     A,#0xb
   \   0000AB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AE   05..         INC     ?V0 + 2
   \                     ??zclLighting_ProcessInManuBallastConfigCmds_1:
   \   0000B0   90....       MOV     DPTR,#dalishortaddr
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   85....       MOV     ?V0 + 0,?V0 + 2
   \   0000B7   C3           CLR     C
   \   0000B8   95..         SUBB    A,?V0 + 0
   \   0000BA   F8           MOV     R0,A
   \   0000BB   95E0         SUBB    A,0xE0 /* A   */
   \   0000BD   F9           MOV     R1,A
   \   0000BE   C3           CLR     C
   \   0000BF   E8           MOV     A,R0
   \   0000C0   9401         SUBB    A,#0x1
   \   0000C2   E9           MOV     A,R1
   \   0000C3   9400         SUBB    A,#0x0
   \   0000C5   A2D2         MOV     C,0xD0 /* PSW */.2
   \   0000C7   65D0         XRL     A,PSW
   \   0000C9   33           RLC     A
   \   0000CA   4003         JC      $+5
   \   0000CC   02....       LJMP    ??zclLighting_ProcessInManuBallastConfigCmds_2 & 0xFFFF
    951          //       zcl_SendCommand(0x0b,&(pInMsg->msg->srcAddr),ZCL_CLUSTER_ID_LIGHT_LINK,
    952          //                       0x43,1,1,
    953          //                       0,pInMsg->hdr.manuCode,pInMsg->hdr.transSeqNum,1,Tbuf);//send a notice to controller after allocate DALI address.
    954                P0DIR = 0x02;
   \   0000CF   75FD02       MOV     0xfd,#0x2
    955                flag=!flag;
   \   0000D2   90....       MOV     DPTR,#flag
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   7004         JNZ     ??zclLighting_ProcessInManuBallastConfigCmds_3
   \   0000D8   7401         MOV     A,#0x1
   \   0000DA   8001         SJMP    ??zclLighting_ProcessInManuBallastConfigCmds_4
   \                     ??zclLighting_ProcessInManuBallastConfigCmds_3:
   \   0000DC   E4           CLR     A
   \                     ??zclLighting_ProcessInManuBallastConfigCmds_4:
   \   0000DD   F0           MOVX    @DPTR,A
    956                P0_1 = flag;
   \   0000DE   C3           CLR     C
   \   0000DF   33           RLC     A
   \   0000E0   F8           MOV     R0,A
   \   0000E1   E580         MOV     A,0x80
   \   0000E3   54FD         ANL     A,#0xfd
   \   0000E5   48           ORL     A,R0
   \   0000E6   F580         MOV     0x80,A
    957                stat = ZSuccess;
   \   0000E8   7900         MOV     R1,#0x0
    958                break;
   \   0000EA   8002         SJMP    ??zclLighting_ProcessInManuBallastConfigCmds_5
    959                
    960              default:
    961                // Unknown command
    962                stat = ZFailure;
   \                     ??zclLighting_ProcessInManuBallastConfigCmds_0:
   \   0000EC   7901         MOV     R1,#0x1
    963                break;
    964            }
    965          
    966            return ( stat );
   \                     ??zclLighting_ProcessInManuBallastConfigCmds_5:
   \   0000EE   7401         MOV     A,#0x1
   \   0000F0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F3   7F06         MOV     R7,#0x6
   \   0000F5   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000F8                REQUIRE P0DIR
   \   0000F8                REQUIRE _A_P0
    967          }
    968          /*********************************************************************
    969           * @fn      zclLighting_ProcessInCmd_ColorControl_MoveToHue
    970           *
    971           * @brief   Process in the received Move To Hue Command.
    972           *
    973           * @param   pInMsg - pointer to the incoming message
    974           * @param   pCBs - pointer to the application callbacks
    975           *
    976           * @return  ZStatus_t
    977           */
    978          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToHue( zclIncoming_t *pInMsg,
    979                                                                 zclLighting_AppCallbacks_t *pCBs )
    980          {
    981            if ( pCBs->pfnColorControl_MoveToHue )
    982            {
    983              zclCCMoveToHue_t cmd;
    984          
    985              cmd.hue = pInMsg->pData[0];
    986              cmd.direction = pInMsg->pData[1];
    987              cmd.transitionTime = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
    988          
    989              if ( cmd.hue > LIGHTING_COLOR_HUE_MAX )
    990              {
    991                return ( ZCL_STATUS_INVALID_VALUE );
    992              }
    993          
    994              return ( pCBs->pfnColorControl_MoveToHue( &cmd ) );
    995            }
    996          
    997            return ( ZFailure );
    998          }
    999          
   1000          /*********************************************************************
   1001           * @fn      zclLighting_ProcessInCmd_ColorControl_MoveHue
   1002           *
   1003           * @brief   Process in the received Move Hue Command.
   1004           *
   1005           * @param   pInMsg - pointer to the incoming message
   1006           * @param   pCBs - pointer to the application callbacks
   1007           *
   1008           * @return  ZStatus_t
   1009           */
   1010          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveHue( zclIncoming_t *pInMsg,
   1011                                                               zclLighting_AppCallbacks_t *pCBs )
   1012          {
   1013            zclCCMoveHue_t cmd;
   1014          
   1015            cmd.moveMode = pInMsg->pData[0];
   1016            cmd.rate = pInMsg->pData[1];
   1017          
   1018            // If the Rate field has a value of zero, the command has no effect and
   1019            // a Default Response command is sent in response, with the status code
   1020            // set to INVALID_FIELD.
   1021            if ( ( cmd.rate == 0 ) && ( cmd.moveMode != LIGHTING_MOVE_HUE_STOP ) )
   1022            {
   1023              return ( ZCL_STATUS_INVALID_FIELD );
   1024            }
   1025          
   1026            if ( pCBs->pfnColorControl_MoveHue )
   1027              return ( pCBs->pfnColorControl_MoveHue( &cmd ) );
   1028          
   1029            return ( ZFailure );
   1030          }
   1031          
   1032          /*********************************************************************
   1033           * @fn      zclLighting_ProcessInCmd_ColorControl_StepHue
   1034           *
   1035           * @brief   Process in the received Step Hue Command.
   1036           *
   1037           * @param   pInMsg - pointer to the incoming message
   1038           * @param   pCBs - pointer to the application callbacks
   1039           *
   1040           * @return  ZStatus_t
   1041           */
   1042          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_StepHue( zclIncoming_t *pInMsg,
   1043                                                               zclLighting_AppCallbacks_t *pCBs )
   1044          {
   1045            if ( pCBs->pfnColorControl_StepHue )
   1046            {
   1047              zclCCStepHue_t cmd;
   1048          
   1049              cmd.stepMode = pInMsg->pData[0];
   1050              cmd.stepSize = pInMsg->pData[1];
   1051              cmd.transitionTime = pInMsg->pData[2];
   1052          
   1053              return ( pCBs->pfnColorControl_StepHue( &cmd ) );
   1054            }
   1055          
   1056            return ( ZFailure );
   1057          }
   1058          
   1059          /*********************************************************************
   1060           * @fn      zclLighting_ProcessInCmd_ColorControl_MoveToSaturation
   1061           *
   1062           * @brief   Process in the received Move to Saturation Command.
   1063           *
   1064           * @param   pInMsg - pointer to the incoming message
   1065           * @param   pCBs - pointer to the application callbacks
   1066           *
   1067           * @return  ZStatus_t
   1068           */
   1069          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToSaturation( zclIncoming_t *pInMsg,
   1070                                                                        zclLighting_AppCallbacks_t *pCBs )
   1071          {
   1072            if ( pCBs->pfnColorControl_MoveToSaturation )
   1073            {
   1074              zclCCMoveToSaturation_t cmd;
   1075          
   1076              cmd.saturation = pInMsg->pData[0];
   1077              cmd.transitionTime = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   1078          
   1079              if ( cmd.saturation > LIGHTING_COLOR_SAT_MAX )
   1080              {
   1081                return ( ZCL_STATUS_INVALID_VALUE );
   1082              }
   1083              return ( pCBs->pfnColorControl_MoveToSaturation( &cmd ) );
   1084            }
   1085          
   1086            return ( ZFailure );
   1087          }
   1088          
   1089          /*********************************************************************
   1090           * @fn      zclLighting_ProcessInCmd_ColorControl_MoveSaturation
   1091           *
   1092           * @brief   Process in the received Move Saturation Command.
   1093           *
   1094           * @param   pInMsg - pointer to the incoming message
   1095           * @param   pCBs - pointer to the application callbacks
   1096           *
   1097           * @return  ZStatus_t
   1098           */
   1099          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveSaturation( zclIncoming_t *pInMsg,
   1100                                                                      zclLighting_AppCallbacks_t *pCBs )
   1101          {
   1102            zclCCMoveSaturation_t cmd;
   1103          
   1104            cmd.moveMode = pInMsg->pData[0];
   1105            cmd.rate = pInMsg->pData[1];
   1106          
   1107            // If the Rate field has a value of zero, the command has no effect and
   1108            // a Default Response command is sent in response, with the status code
   1109            // set to INVALID_FIELD.
   1110            if ( ( cmd.rate == 0 ) && ( cmd.moveMode != LIGHTING_MOVE_SATURATION_STOP ) )
   1111            {
   1112              return ( ZCL_STATUS_INVALID_FIELD );
   1113            }
   1114          
   1115            if ( pCBs->pfnColorControl_MoveSaturation )
   1116              return ( pCBs->pfnColorControl_MoveSaturation( &cmd ) );
   1117          
   1118            return ( ZFailure );
   1119          }
   1120          
   1121          /*********************************************************************
   1122           * @fn      zclLighting_ProcessInCmd_ColorControl_StepSaturation
   1123           *
   1124           * @brief   Process in the received Step Saturation Command.
   1125           *
   1126           * @param   pInMsg - pointer to the incoming message
   1127           * @param   pCBs - pointer to the application callbacks
   1128           *
   1129           * @return  ZStatus_t
   1130           */
   1131          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_StepSaturation( zclIncoming_t *pInMsg,
   1132                                                                      zclLighting_AppCallbacks_t *pCBs )
   1133          {
   1134            if ( pCBs->pfnColorControl_StepSaturation )
   1135            {
   1136              zclCCStepSaturation_t cmd;
   1137          
   1138              cmd.stepMode = pInMsg->pData[0];
   1139              cmd.stepSize = pInMsg->pData[1];
   1140              cmd.transitionTime = pInMsg->pData[2];
   1141          
   1142              return ( pCBs->pfnColorControl_StepSaturation( &cmd ) );
   1143            }
   1144          
   1145            return ( ZFailure );
   1146          }
   1147          
   1148          /*********************************************************************
   1149           * @fn      zclLighting_ProcessInCmd_ColorControl_MoveToHueAndSaturation
   1150           *
   1151           * @brief   Process in the received Move To Hue And Saturation Command.
   1152           *
   1153           * @param   pInMsg - pointer to the incoming message
   1154           * @param   pCBs - pointer to the application callbacks
   1155           *
   1156           * @return  ZStatus_t
   1157           */
   1158          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToHueAndSaturation( zclIncoming_t *pInMsg,
   1159                                                                              zclLighting_AppCallbacks_t *pCBs )
   1160          {
   1161            if ( pCBs->pfnColorControl_MoveToHueAndSaturation )
   1162            {
   1163              zclCCMoveToHueAndSaturation_t cmd;
   1164          
   1165              cmd.hue = pInMsg->pData[0];
   1166              cmd.saturation = pInMsg->pData[1];
   1167              cmd.transitionTime = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
   1168          
   1169              if ( ( cmd.hue > LIGHTING_COLOR_HUE_MAX ) || ( cmd.saturation > LIGHTING_COLOR_SAT_MAX ) )
   1170              {
   1171                return ( ZCL_STATUS_INVALID_VALUE );
   1172              }
   1173          
   1174              return ( pCBs->pfnColorControl_MoveToHueAndSaturation( &cmd ) );
   1175            }
   1176          
   1177            return ( ZFailure );
   1178          }
   1179          
   1180          /*********************************************************************
   1181           * @fn      zclLighting_ProcessInCmd_ColorControl_MoveToColor
   1182           *
   1183           * @brief   Process in the received Move To Color Command.
   1184           *
   1185           * @param   pInMsg - pointer to the incoming message
   1186           * @param   pCBs - pointer to the application callbacks
   1187           *
   1188           * @return  ZStatus_t
   1189           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1190          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToColor( zclIncoming_t *pInMsg,
   \                     zclLighting_ProcessInCmd_ColorControl_MoveToColor:
   1191                                                                   zclLighting_AppCallbacks_t *pCBs )
   1192          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1193            if ( pCBs->pfnColorControl_MoveToColor )
   \   00000A   EC           MOV     A,R4
   \   00000B   240E         ADD     A,#0xe
   \   00000D   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   000010   12....       LCALL   ??Subroutine82_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000013   6067         JZ      ??zclLighting_ProcessInCmd_ColorControl_MoveToC_1
   1194            {
   1195              zclCCMoveToColor_t cmd;
   1196          
   1197              cmd.colorX = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   \   000015   8A82         MOV     DPL,R2
   \   000017   8B83         MOV     DPH,R3
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000024   E0           MOVX    A,@DPTR
   \   000025   FE           MOV     R6,A
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   FD           MOV     R5,A
   \   000029   EE           MOV     A,R6
   \   00002A   85..82       MOV     DPL,?XSP + 0
   \   00002D   85..83       MOV     DPH,?XSP + 1
   \   000030   12....       LCALL   ??Subroutine76_0 & 0xFFFF
   1198              cmd.colorY = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
   \                     ??CrossCallReturnLabel_155:
   \   000033   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000036   E0           MOVX    A,@DPTR
   \   000037   FD           MOV     R5,A
   \   000038   EE           MOV     A,R6
   \   000039   FC           MOV     R4,A
   \   00003A   7402         MOV     A,#0x2
   \   00003C   12....       LCALL   ?XSTACK_DISP0_8
   \   00003F   EC           MOV     A,R4
   \   000040   12....       LCALL   ?Subroutine63 & 0xFFFF
   1199              cmd.transitionTime = BUILD_UINT16( pInMsg->pData[4], pInMsg->pData[5] );
   \                     ??CrossCallReturnLabel_158:
   \   000043   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   000046   E0           MOVX    A,@DPTR
   \   000047   FB           MOV     R3,A
   \   000048   EC           MOV     A,R4
   \   000049   FA           MOV     R2,A
   \   00004A   7404         MOV     A,#0x4
   \   00004C   12....       LCALL   ?XSTACK_DISP0_8
   \   00004F   12....       LCALL   ?Subroutine40 & 0xFFFF
   1200          
   1201              if ( ( cmd.colorX > LIGHTING_COLOR_CURRENT_X_MAX ) || ( cmd.colorY > LIGHTING_COLOR_CURRENT_Y_MAX ) )
   \                     ??CrossCallReturnLabel_69:
   \   000052   C3           CLR     C
   \   000053   A3           INC     DPTR
   \   000054   E0           MOVX    A,@DPTR
   \   000055   94FF         SUBB    A,#-0x1
   \   000057   500C         JNC     ??zclLighting_ProcessInCmd_ColorControl_MoveToC_2
   \   000059   7402         MOV     A,#0x2
   \   00005B   12....       LCALL   ?XSTACK_DISP0_8
   \   00005E   C3           CLR     C
   \   00005F   A3           INC     DPTR
   \   000060   E0           MOVX    A,@DPTR
   \   000061   94FF         SUBB    A,#-0x1
   \   000063   4004         JC      ??zclLighting_ProcessInCmd_ColorControl_MoveToC_3
   1202              {
   1203                return ( ZCL_STATUS_INVALID_VALUE );
   \                     ??zclLighting_ProcessInCmd_ColorControl_MoveToC_2:
   \   000065   7987         MOV     R1,#-0x79
   \   000067   8015         SJMP    ??zclLighting_ProcessInCmd_ColorControl_MoveToC_4
   1204              }
   1205          
   1206              return ( pCBs->pfnColorControl_MoveToColor( &cmd ) );
   \                     ??zclLighting_ProcessInCmd_ColorControl_MoveToC_3:
   \   000069                ; Setup parameters for indirect call
   \   000069   85..82       MOV     DPL,?XSP + 0
   \   00006C   85..83       MOV     DPH,?XSP + 1
   \   00006F   AA82         MOV     R2,DPL
   \   000071   AB83         MOV     R3,DPH
   \   000073   8882         MOV     DPL,R0
   \   000075   8983         MOV     DPH,R1
   \   000077   12....       LCALL   ?CALL_IND
   \   00007A   8002         SJMP    ??zclLighting_ProcessInCmd_ColorControl_MoveToC_4
   1207            }
   1208          
   1209            return ( ZFailure );
   \                     ??zclLighting_ProcessInCmd_ColorControl_MoveToC_1:
   \   00007C   7901         MOV     R1,#0x1
   \                     ??zclLighting_ProcessInCmd_ColorControl_MoveToC_4:
   \   00007E   7406         MOV     A,#0x6
   \   000080                REQUIRE ?Subroutine3
   \   000080                ; // Fall through to label ?Subroutine3
   1210          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F01         MOV     R7,#0x1
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_100:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   12....       LCALL   ?Subroutine50 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET
   1211          
   1212          /*********************************************************************
   1213           * @fn      zclLighting_ProcessInCmd_ColorControl_MoveColor
   1214           *
   1215           * @brief   Process in the received Move Color Command.
   1216           *
   1217           * @param   pInMsg - pointer to the incoming message
   1218           * @param   pCBs - pointer to the application callbacks
   1219           *
   1220           * @return  ZStatus_t
   1221           */
   1222          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveColor( zclIncoming_t *pInMsg,
   1223                                                                 zclLighting_AppCallbacks_t *pCBs )
   1224          {
   1225            if ( pCBs->pfnColorControl_MoveColor )
   1226            {
   1227              zclCCMoveColor_t cmd;
   1228          
   1229              cmd.rateX = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1230              cmd.rateY = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
   1231          
   1232              pCBs->pfnColorControl_MoveColor( &cmd );
   1233          
   1234              return ( ZSuccess );
   1235            }
   1236          
   1237            return ( ZFailure );
   1238          }
   1239          
   1240          /*********************************************************************
   1241           * @fn      zclLighting_ProcessInCmd_ColorControl_StepColor
   1242           *
   1243           * @brief   Process in the received Step Color Command.
   1244           *
   1245           * @param   pInMsg - pointer to the incoming message
   1246           * @param   pCBs - pointer to the application callbacks
   1247           *
   1248           * @return  ZStatus_t
   1249           */
   1250          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_StepColor( zclIncoming_t *pInMsg,
   1251                                                                 zclLighting_AppCallbacks_t *pCBs )
   1252          {
   1253            if ( pCBs->pfnColorControl_StepColor )
   1254            {
   1255              zclCCStepColor_t cmd;
   1256          
   1257              cmd.stepX = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1258              cmd.stepY = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
   1259              cmd.transitionTime = BUILD_UINT16( pInMsg->pData[4], pInMsg->pData[5] );
   1260          
   1261              return ( pCBs->pfnColorControl_StepColor( &cmd ) );
   1262            }
   1263          
   1264            return ( ZFailure );
   1265          }
   1266          
   1267          /*********************************************************************
   1268           * @fn      zclLighting_ProcessInCmd_ColorControl_MoveToColorTemperature
   1269           *
   1270           * @brief   Process in the received Move to Color Temperature Command.
   1271           *
   1272           * @param   pInMsg - pointer to the incoming message
   1273           * @param   pCBs - pointer to the application callbacks
   1274           *
   1275           * @return  ZStatus_t
   1276           */
   1277          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_MoveToColorTemperature( zclIncoming_t *pInMsg,
   1278                                                                              zclLighting_AppCallbacks_t *pCBs )
   1279          {
   1280            if ( pCBs->pfnColorControl_MoveToColorTemperature )
   1281            {
   1282              zclCCMoveToColorTemperature_t cmd;
   1283          
   1284              cmd.colorTemperature = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1285              cmd.transitionTime = BUILD_UINT16( pInMsg->pData[2], pInMsg->pData[3] );
   1286          
   1287              if ( cmd.colorTemperature > LIGHTING_COLOR_TEMPERATURE_MAX )
   1288              {
   1289                return ( ZCL_STATUS_INVALID_VALUE );
   1290              }
   1291          
   1292              return ( pCBs->pfnColorControl_MoveToColorTemperature( &cmd ) );
   1293            }
   1294          
   1295            return ( ZFailure );
   1296          }
   1297          
   1298          #ifdef ZCL_LIGHT_LINK_ENHANCE
   1299          /*********************************************************************
   1300           * @fn      zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHue
   1301           *
   1302           * @brief   Process in the received Enhanced Move To Hue Command.
   1303           *
   1304           * @param   pInMsg - pointer to the incoming message
   1305           * @param   pCBs - pointer to the application callbacks
   1306           *
   1307           * @return  ZStatus_t
   1308           */
   1309          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHue( zclIncoming_t *pInMsg,
   1310                                                                         zclLighting_AppCallbacks_t *pCBs )
   1311          {
   1312            if ( pCBs->pfnColorControl_EnhancedMoveToHue )
   1313            {
   1314              zclCCEnhancedMoveToHue_t cmd;
   1315          
   1316              cmd.enhancedHue = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1317              cmd.direction = pInMsg->pData[2];
   1318              cmd.transitionTime = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
   1319          
   1320              return ( pCBs->pfnColorControl_EnhancedMoveToHue( &cmd ) );
   1321            }
   1322          
   1323            return ( ZFailure );
   1324          }
   1325          
   1326          /*********************************************************************
   1327           * @fn      zclLighting_ProcessInCmd_ColorControl_EnhancedMoveHue
   1328           *
   1329           * @brief   Process in the received Enhanced Move Hue Command.
   1330           *
   1331           * @param   pInMsg - pointer to the incoming message
   1332           * @param   pCBs - pointer to the application callbacks
   1333           *
   1334           * @return  ZStatus_t
   1335           */
   1336          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedMoveHue( zclIncoming_t *pInMsg,
   1337                                                                       zclLighting_AppCallbacks_t *pCBs )
   1338          {
   1339            zclCCEnhancedMoveHue_t cmd;
   1340          
   1341            cmd.moveMode = pInMsg->pData[0];
   1342            cmd.rate = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   1343          
   1344            // If the Rate field has a value of zero, the command has no effect and
   1345            // a Default Response command is sent in response, with the status code
   1346            // set to INVALID_FIELD.
   1347            if ( ( cmd.rate == 0 ) && ( cmd.moveMode != LIGHTING_MOVE_HUE_STOP ) )
   1348            {
   1349              return ( ZCL_STATUS_INVALID_FIELD );
   1350            }
   1351          
   1352            if ( pCBs->pfnColorControl_EnhancedMoveHue )
   1353            {
   1354              return ( pCBs->pfnColorControl_EnhancedMoveHue( &cmd ) );
   1355            }
   1356          
   1357            return ( ZFailure );
   1358          }
   1359          
   1360          /*********************************************************************
   1361           * @fn      zclLighting_ProcessInCmd_ColorControl_EnhancedStepHue
   1362           *
   1363           * @brief   Process in the received Enhanced Step Hue Command.
   1364           *
   1365           * @param   pInMsg - pointer to the incoming message
   1366           * @param   pCBs - pointer to the application callbacks
   1367           *
   1368           * @return  ZStatus_t
   1369           */
   1370          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedStepHue( zclIncoming_t *pInMsg,
   1371                                                                       zclLighting_AppCallbacks_t *pCBs )
   1372          {
   1373            if ( pCBs->pfnColorControl_EnhancedStepHue )
   1374            {
   1375              zclCCEnhancedStepHue_t cmd;
   1376          
   1377              cmd.stepMode = pInMsg->pData[0];
   1378              cmd.stepSize = BUILD_UINT16( pInMsg->pData[1], pInMsg->pData[2] );
   1379              cmd.transitionTime = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
   1380          
   1381              return ( pCBs->pfnColorControl_EnhancedStepHue( &cmd ) );
   1382            }
   1383          
   1384            return ( ZFailure );
   1385          }
   1386          
   1387          /*********************************************************************
   1388           * @fn      zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHueAndSaturation
   1389           *
   1390           * @brief   Process in the received Enhanced Move To Hue And Saturation Command.
   1391           *
   1392           * @param   pInMsg - pointer to the incoming message
   1393           * @param   pCBs - pointer to the application callbacks
   1394           *
   1395           * @return  ZStatus_t
   1396           */
   1397          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_EnhancedMoveToHueAndSaturation( zclIncoming_t *pInMsg,
   1398                                                                                      zclLighting_AppCallbacks_t *pCBs )
   1399          {
   1400            if ( pCBs->pfnColorControl_EnhancedMoveToHueAndSaturation )
   1401            {
   1402              zclCCEnhancedMoveToHueAndSaturation_t cmd;
   1403          
   1404              cmd.enhancedHue = BUILD_UINT16( pInMsg->pData[0], pInMsg->pData[1] );
   1405              cmd.saturation = pInMsg->pData[2];
   1406              cmd.transitionTime = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
   1407          
   1408              if ( cmd.saturation > LIGHTING_COLOR_SAT_MAX )
   1409              {
   1410                return ( ZCL_STATUS_INVALID_VALUE );
   1411              }
   1412          
   1413              return ( pCBs->pfnColorControl_EnhancedMoveToHueAndSaturation( &cmd ) );
   1414            }
   1415          
   1416            return ( ZFailure );
   1417          }
   1418          
   1419          /*********************************************************************
   1420           * @fn      zclLighting_ProcessInCmd_ColorControl_ColorLoopSet
   1421           *
   1422           * @brief   Process in the received Color Loop Set Command.
   1423           *
   1424           * @param   pInMsg - pointer to the incoming message
   1425           * @param   pCBs - pointer to the application callbacks
   1426           *
   1427           * @return  ZStatus_t
   1428           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1429          static ZStatus_t zclLighting_ProcessInCmd_ColorControl_ColorLoopSet( zclIncoming_t *pInMsg,
   \                     zclLighting_ProcessInCmd_ColorControl_ColorLoopSet:
   1430                                                                     zclLighting_AppCallbacks_t *pCBs )
   1431          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1432            if ( pCBs->pfnColorControl_ColorLoopSet )
   \   00000A   EC           MOV     A,R4
   \   00000B   241E         ADD     A,#0x1e
   \   00000D   F8           MOV     R0,A
   \   00000E   ED           MOV     A,R5
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F9           MOV     R1,A
   \   000012   8882         MOV     DPL,R0
   \   000014   8983         MOV     DPH,R1
   \   000016   E0           MOVX    A,@DPTR
   \   000017   FC           MOV     R4,A
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   FD           MOV     R5,A
   \   00001B   EC           MOV     A,R4
   \   00001C   4D           ORL     A,R5
   \   00001D   607A         JZ      ??zclLighting_ProcessInCmd_ColorControl_ColorLo_1
   1433            {
   1434              zclCCColorLoopSet_t cmd = {0};
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   AC82         MOV     R4,DPL
   \   000027   AD83         MOV     R5,DPH
   \   000029   7583..       MOV     DPH,#(`?<Constant {{{0}}}>` >> 8) & 0xff
   \   00002C   7582..       MOV     DPL,#`?<Constant {{{0}}}>` & 0xff
   \   00002F   7408         MOV     A,#0x8
   \   000031   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1435          
   1436              cmd.updateFlags.byte = pInMsg->pData[0];
   \   000034   EA           MOV     A,R2
   \   000035   2408         ADD     A,#0x8
   \   000037   FA           MOV     R2,A
   \   000038   EB           MOV     A,R3
   \   000039   3400         ADDC    A,#0x0
   \   00003B   FB           MOV     R3,A
   \   00003C   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_95:
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   85..82       MOV     DPL,?XSP + 0
   \   000043   85..83       MOV     DPH,?XSP + 1
   \   000046   12....       LCALL   ?Subroutine27 & 0xFFFF
   1437              cmd.action = pInMsg->pData[1];
   \                     ??CrossCallReturnLabel_47:
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   C0E0         PUSH    A
   \   00004C   7402         MOV     A,#0x2
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   D0E0         POP     A
   \   000053   12....       LCALL   ?Subroutine27 & 0xFFFF
   1438              cmd.direction = pInMsg->pData[2];
   \                     ??CrossCallReturnLabel_48:
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   C0E0         PUSH    A
   \   00005A   7403         MOV     A,#0x3
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   D0E0         POP     A
   \   000061   F0           MOVX    @DPTR,A
   1439              cmd.time = BUILD_UINT16( pInMsg->pData[3], pInMsg->pData[4] );
   \   000062   8A82         MOV     DPL,R2
   \   000064   8B83         MOV     DPH,R3
   \   000066   12....       LCALL   ?Subroutine26 & 0xFFFF
   1440              cmd.startHue = BUILD_UINT16( pInMsg->pData[5], pInMsg->pData[6] );
   1441          
   1442              return ( pCBs->pfnColorControl_ColorLoopSet( &cmd ) );
   1443            }
   \                     ??CrossCallReturnLabel_46:
   \   000069   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   FD           MOV     R5,A
   \   00006F   EE           MOV     A,R6
   \   000070   FC           MOV     R4,A
   \   000071   7404         MOV     A,#0x4
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   000079   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00007C   A3           INC     DPTR
   \   00007D   E0           MOVX    A,@DPTR
   \   00007E   FB           MOV     R3,A
   \   00007F   EC           MOV     A,R4
   \   000080   FA           MOV     R2,A
   \   000081   7406         MOV     A,#0x6
   \   000083   12....       LCALL   ?XSTACK_DISP0_8
   \   000086   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000089   AA82         MOV     R2,DPL
   \   00008B   AB83         MOV     R3,DPH
   \   00008D   8882         MOV     DPL,R0
   \   00008F   8983         MOV     DPH,R1
   \   000091   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000094   12....       LCALL   ?CALL_IND
   \   000097   8002         SJMP    ??zclLighting_ProcessInCmd_ColorControl_ColorLo_2
   1444          
   1445            return ( ZFailure );
   \                     ??zclLighting_ProcessInCmd_ColorControl_ColorLo_1:
   \   000099   7901         MOV     R1,#0x1
   \                     ??zclLighting_ProcessInCmd_ColorControl_ColorLo_2:
   \   00009B   7408         MOV     A,#0x8
   \   00009D   02....       LJMP    ?Subroutine3 & 0xFFFF
   1446          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine56 & 0xFFFF
   \                     ??CrossCallReturnLabel_96:
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E0           MOVX    A,@DPTR
   \   000005   FC           MOV     R4,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F583         MOV     DPH,A
   \   00000A   8C82         MOV     DPL,R4
   \   00000C   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_RegisterCmdCallbacks?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_RegisterCmdCallbacks

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ColorControl_Send_MoveToHueCmd?re:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_MoveToHueCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ColorControl_Send_MoveHueCmd?rela:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_MoveHueCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ColorControl_Send_StepHueCmd?rela:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_StepHueCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ColorControl_Send_MoveToSaturatio:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_MoveToSaturationCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ColorControl_Send_MoveSaturationC:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_MoveSaturationCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ColorControl_Send_StepSaturationC:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_StepSaturationCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ColorControl_Send_MoveToHueAndSat:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ColorControl_Send_MoveToColorCmd?:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_MoveToColorCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ColorControl_Send_MoveColorCmd?re:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_MoveColorCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ColorControl_Send_StepColorCmd?re:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_StepColorCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ColorControl_Send_MoveToColorTemp:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_MoveToColorTemperatureCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ColorControl_Send_EnhancedMoveToH:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_EnhancedMoveToHueCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ColorControl_Send_EnhancedMoveHue:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_EnhancedMoveHueCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ColorControl_Send_EnhancedStepHue:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_EnhancedStepHueCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ColorControl_Send_EnhancedMoveToH_1:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_EnhancedMoveToHueAndSaturationCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ColorControl_Send_ColorLoopSetCmd:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ColorControl_Send_ColorLoopSetCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_FindCallbacks?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_FindCallbacks

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_HdlIncoming?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_HdlIncoming

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ProcessInColorControlCmds?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ProcessInColorControlCmds

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ProcessInManuBallastConfigCmds?re:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ProcessInManuBallastConfigCmds

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ProcessInCmd_ColorControl_MoveToC:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ProcessInCmd_ColorControl_MoveToColor

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zclLighting_ProcessInCmd_ColorControl_ColorLo:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zclLighting_ProcessInCmd_ColorControl_ColorLoopSet

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {{{0}}}>`:
   \   000000   00           DB 0
   \   000001   00           DB 0
   \   000002   00000000     DB 0, 0, 0, 0, 0, 0
   \            0000    
   1447          #endif // ZCL_LIGHT_LINK_ENHANCE
   1448          
   1449          /****************************************************************************
   1450          ****************************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       1      0     38  zclLighting_ColorControl_Send_ColorLoopSetCmd
                          0 0 30 -> zcl_SendCommand
       1      0     29  zclLighting_ColorControl_Send_EnhancedMoveHueCmd
                          0 0 26 -> zcl_SendCommand
       1      0     32  zclLighting_ColorControl_Send_EnhancedMoveToHueAndSaturationCmd
                          0 0 27 -> zcl_SendCommand
       1      0     32  zclLighting_ColorControl_Send_EnhancedMoveToHueCmd
                          0 0 27 -> zcl_SendCommand
       1      0     33  zclLighting_ColorControl_Send_EnhancedStepHueCmd
                          0 0 28 -> zcl_SendCommand
       1      0     29  zclLighting_ColorControl_Send_MoveColorCmd
                          0 0 25 -> zcl_SendCommand
       1      0     26  zclLighting_ColorControl_Send_MoveHueCmd
                          0 0 24 -> zcl_SendCommand
       1      0     26  zclLighting_ColorControl_Send_MoveSaturationCmd
                          0 0 24 -> zcl_SendCommand
       1      0     34  zclLighting_ColorControl_Send_MoveToColorCmd
                          0 0 28 -> zcl_SendCommand
       1      0     30  zclLighting_ColorControl_Send_MoveToColorTemperatureCmd
                          0 0 26 -> zcl_SendCommand
       1      0     31  zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd
                          0 0 27 -> zcl_SendCommand
       1      0     31  zclLighting_ColorControl_Send_MoveToHueCmd
                          0 0 27 -> zcl_SendCommand
       1      0     29  zclLighting_ColorControl_Send_MoveToSaturationCmd
                          0 0 26 -> zcl_SendCommand
       1      0     33  zclLighting_ColorControl_Send_StepColorCmd
                          0 0 27 -> zcl_SendCommand
       1      0     29  zclLighting_ColorControl_Send_StepHueCmd
                          0 0 26 -> zcl_SendCommand
       1      0     29  zclLighting_ColorControl_Send_StepSaturationCmd
                          0 0 26 -> zcl_SendCommand
       2      0     12  zclLighting_FindCallbacks
       0      0     12  zclLighting_HdlIncoming
                          0 0 12 -> StubAPS_InterPan
                          0 0 12 -> zclLighting_FindCallbacks
                          0 0 12 -> zclLighting_ProcessInColorControlCmds
                          0 0 12 -> zclLighting_ProcessInManuBallastConfigCmds
       2      0     47  zclLighting_ProcessInCmd_ColorControl_ColorLoopSet
       0      0     45  zclLighting_ProcessInCmd_ColorControl_MoveToColor
       1      0     42  zclLighting_ProcessInColorControlCmds
                          0 0 30 -> zclLighting_ProcessInCmd_ColorControl_ColorLoopSet
                          0 0 30 -> zclLighting_ProcessInCmd_ColorControl_MoveToColor
       1      0     38  zclLighting_ProcessInManuBallastConfigCmds
                          0 0 26 -> zcl_SendCommand
       1      0     14  zclLighting_RegisterCmdCallbacks
                          0 0 12 -> osal_mem_alloc
                          0 0 14 -> zcl_registerPlugin


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {{{0}}}>
      12  ??Subroutine68_0
       8  ??Subroutine69_0
      12  ??Subroutine70_0
       8  ??Subroutine71_0
       3  ??Subroutine72_0
       5  ??Subroutine73_0
       6  ??Subroutine74_0
       5  ??Subroutine75_0
       5  ??Subroutine76_0
       8  ??Subroutine77_0
       4  ??Subroutine78_0
      10  ??Subroutine79_0
      14  ??Subroutine80_0
       4  ??Subroutine81_0
       6  ??Subroutine82_0
       6  ??zclLighting_ColorControl_Send_ColorLoopSetCmd
       6  ??zclLighting_ColorControl_Send_EnhancedMoveHue
       6  ??zclLighting_ColorControl_Send_EnhancedMoveToH
       6  ??zclLighting_ColorControl_Send_EnhancedMoveToH_1
       6  ??zclLighting_ColorControl_Send_EnhancedStepHue
       6  ??zclLighting_ColorControl_Send_MoveColorCmd?re
       6  ??zclLighting_ColorControl_Send_MoveHueCmd?rela
       6  ??zclLighting_ColorControl_Send_MoveSaturationC
       6  ??zclLighting_ColorControl_Send_MoveToColorCmd?
       6  ??zclLighting_ColorControl_Send_MoveToColorTemp
       6  ??zclLighting_ColorControl_Send_MoveToHueAndSat
       6  ??zclLighting_ColorControl_Send_MoveToHueCmd?re
       6  ??zclLighting_ColorControl_Send_MoveToSaturatio
       6  ??zclLighting_ColorControl_Send_StepColorCmd?re
       6  ??zclLighting_ColorControl_Send_StepHueCmd?rela
       6  ??zclLighting_ColorControl_Send_StepSaturationC
       6  ??zclLighting_FindCallbacks?relay
       6  ??zclLighting_HdlIncoming?relay
       6  ??zclLighting_ProcessInCmd_ColorControl_ColorLo
       6  ??zclLighting_ProcessInCmd_ColorControl_MoveToC
       6  ??zclLighting_ProcessInColorControlCmds?relay
       6  ??zclLighting_ProcessInManuBallastConfigCmds?re
       6  ??zclLighting_RegisterCmdCallbacks?relay
      21  ?Subroutine0
      21  ?Subroutine1
       5  ?Subroutine10
      13  ?Subroutine11
       9  ?Subroutine12
       9  ?Subroutine13
      13  ?Subroutine14
      13  ?Subroutine15
      12  ?Subroutine16
       6  ?Subroutine17
       6  ?Subroutine18
       6  ?Subroutine19
       8  ?Subroutine2
       4  ?Subroutine20
       8  ?Subroutine21
       6  ?Subroutine22
      13  ?Subroutine23
      10  ?Subroutine24
       6  ?Subroutine25
       6  ?Subroutine26
       6  ?Subroutine27
       4  ?Subroutine28
       4  ?Subroutine29
       8  ?Subroutine3
      10  ?Subroutine30
       4  ?Subroutine31
       9  ?Subroutine32
       4  ?Subroutine33
       5  ?Subroutine34
       4  ?Subroutine35
       4  ?Subroutine36
       1  ?Subroutine37
       1  ?Subroutine38
       2  ?Subroutine39
      24  ?Subroutine4
       8  ?Subroutine40
       1  ?Subroutine41
       6  ?Subroutine42
       6  ?Subroutine43
       6  ?Subroutine44
       5  ?Subroutine45
       6  ?Subroutine46
      11  ?Subroutine47
       4  ?Subroutine48
       6  ?Subroutine49
      24  ?Subroutine5
       5  ?Subroutine50
       9  ?Subroutine51
      10  ?Subroutine52
       6  ?Subroutine53
       6  ?Subroutine54
      14  ?Subroutine55
      13  ?Subroutine56
       4  ?Subroutine57
      10  ?Subroutine58
       8  ?Subroutine59
      14  ?Subroutine6
       8  ?Subroutine60
      10  ?Subroutine61
       6  ?Subroutine62
       9  ?Subroutine63
       3  ?Subroutine64
       9  ?Subroutine65
       9  ?Subroutine66
      10  ?Subroutine67
       6  ?Subroutine7
      16  ?Subroutine8
       9  ?Subroutine9
       1  P0DIR
       1  _A_P0
       1  flag
       2  zclLightingCBs
       1  zclLightingPluginRegisted
     181  zclLighting_ColorControl_Send_ColorLoopSetCmd
     101  zclLighting_ColorControl_Send_EnhancedMoveHueCmd
     128  zclLighting_ColorControl_Send_EnhancedMoveToHueAndSaturationCmd
     125  zclLighting_ColorControl_Send_EnhancedMoveToHueCmd
     144  zclLighting_ColorControl_Send_EnhancedStepHueCmd
     148  zclLighting_ColorControl_Send_MoveColorCmd
      93  zclLighting_ColorControl_Send_MoveHueCmd
      96  zclLighting_ColorControl_Send_MoveSaturationCmd
     157  zclLighting_ColorControl_Send_MoveToColorCmd
     134  zclLighting_ColorControl_Send_MoveToColorTemperatureCmd
     118  zclLighting_ColorControl_Send_MoveToHueAndSaturationCmd
     118  zclLighting_ColorControl_Send_MoveToHueCmd
     101  zclLighting_ColorControl_Send_MoveToSaturationCmd
     172  zclLighting_ColorControl_Send_StepColorCmd
     110  zclLighting_ColorControl_Send_StepHueCmd
     107  zclLighting_ColorControl_Send_StepSaturationCmd
      45  zclLighting_FindCallbacks
     170  zclLighting_HdlIncoming
     160  zclLighting_ProcessInCmd_ColorControl_ColorLoopSet
     128  zclLighting_ProcessInCmd_ColorControl_MoveToColor
     967  zclLighting_ProcessInColorControlCmds
     248  zclLighting_ProcessInManuBallastConfigCmds
     135  zclLighting_RegisterCmdCallbacks

 
 4 558 bytes in segment BANKED_CODE
   138 bytes in segment BANK_RELAYS
     2 bytes in segment SFR_AN
     8 bytes in segment XDATA_ROM_C
     4 bytes in segment XDATA_Z
 
 4 696 bytes of CODE  memory
     8 bytes of CONST memory
     0 bytes of DATA  memory (+ 2 bytes shared)
     4 bytes of XDATA memory

Errors: none
Warnings: none
