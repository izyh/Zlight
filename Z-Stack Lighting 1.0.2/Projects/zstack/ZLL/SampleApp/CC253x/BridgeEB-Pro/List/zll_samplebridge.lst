###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             07/May/2014  17:02:27 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\Source\Bridge\ #
#                          zll_samplebridge.c                                 #
#    Command line       =  -f "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f "D:\Texas         #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO       #
#                          -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f "D:\Texas               #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wZCL.cfg" "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\Source\Bridge\ #
#                          zll_samplebridge.c" -D FEATURE_GREEN_POWER -D      #
#                          SECURE=1 -D TC_LINKKEY_JOIN -D                     #
#                          ZDSECMGR_TC_DEVICE_MAX=2 -D NV_RESTORE -D          #
#                          HOLD_AUTO_START -D INTER_PAN -D ZTOOL_P1 -D        #
#                          MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D           #
#                          MT_ZDO_FUNC -D MT_ZDO_CB_FUNC -D MT_UTIL_FUNC -D   #
#                          MT_ZDO_MGMT -D LCD_SUPPORTED -D HAL_LCD=FALSE -D   #
#                          HAL_KEY=FALSE -D ZCL_BASIC -D ZCL_READ -D          #
#                          ZCL_WRITE -D ZCL_IDENTIFY -D ZCL_ON_OFF -D         #
#                          ZCL_SCENES -D ZCL_GROUPS -D                        #
#                          ZCL_LIGHT_LINK_ENHANCE -D ZCL_LEVEL_CTRL -D        #
#                          ZCL_COLOR_CTRL -D xMAX_CHANNELS_24GHZ=0x02108800   #
#                          -lC "D:\Texas Instruments\Z-Stack Lighting         #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\List\" -lA "D:\Texas Instruments\Z-Stack     #
#                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC253 #
#                          x\BridgeEB-Pro\List\" --diag_suppress Pe001,Pa010  #
#                          -o "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\Obj\" -e --debug --core=plain --dptr=16,1    #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\" -I    #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\Sour #
#                          ce\" -I "D:\Texas Instruments\Z-Stack Lighting     #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\S #
#                          ource\" -I "D:\Texas Instruments\Z-Stack Lighting  #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\HomeAutomation\Source\" -I "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\HomeAutomation\SampleLight\Source\" -I           #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\ZMain\TI2530DB\" -I "D:\Texas                    #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\hal\include\" -I "D:\Texas      #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\hal\target\CC2530EB\" -I        #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\include\" -I "D:\Texas      #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\high_level\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\" -I        #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\single_chip #
#                          \" -I "D:\Texas Instruments\Z-Stack Lighting       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mt\" -I "D:\Texas               #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\osal\include\" -I "D:\Texas     #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\services\saddr\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\services\sdata\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\af\" -I "D:\Texas         #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\nwk\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sapi\" -I "D:\Texas       #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sec\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sys\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\zcl\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\zdo\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\zmac\" -I "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\zmac\f8w\" -Ohz                 #
#                          --require_prototypes                               #
#    List file          =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\List\zll_samplebridge.lst                    #
#    Object file        =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\BridgeE #
#                          B-Pro\Obj\zll_samplebridge.r51                     #
#                                                                             #
#                                                                             #
###############################################################################

D:\Texas Instruments\Z-Stack Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\Source\Bridge\zll_samplebridge.c
      1          /**************************************************************************************************
      2            Filename:       zll_samplebridge.c
      3            Revised:        $Date: 2013-04-05 10:52:56 -0700 (Fri, 05 Apr 2013) $
      4            Revision:       $Revision: 33786 $
      5          
      6          
      7            Description:    Zigbee Cluster Library - Light Link (ZLL) Bridge Sample
      8                            Application.
      9          
     10          
     11            Copyright 2013 Texas Instruments Incorporated. All rights reserved.
     12          
     13            IMPORTANT: Your use of this Software is limited to those specific rights
     14            granted under the terms of a software license agreement between the user
     15            who downloaded the software, his/her employer (which must be your employer)
     16            and Texas Instruments Incorporated (the "License").  You may not use this
     17            Software unless you agree to abide by the terms of the License. The License
     18            limits your use, and you acknowledge, that the Software may not be modified,
     19            copied or distributed unless embedded on a Texas Instruments microcontroller
     20            or used solely and exclusively in conjunction with a Texas Instruments radio
     21            frequency transceiver, which is integrated into your product.  Other than for
     22            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     23            works of, modify, distribute, perform, display or sell this Software and/or
     24            its documentation for any purpose.
     25          
     26            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     27            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     28            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     29            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     30            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     31            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     32            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     33            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     34            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     35            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     36            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     37          
     38            Should you have any questions regarding your right to use this Software,
     39            contact Texas Instruments Incorporated at www.TI.com.
     40          **************************************************************************************************/
     41          
     42          /*********************************************************************
     43            This device will be like a Controller device.  This application is not
     44            intended to be a Controller device, but will use the device description
     45            to implement this sample code.
     46          *********************************************************************/
     47          
     48          /*********************************************************************
     49           * INCLUDES
     50           */
     51          #if defined ( NV_RESTORE )
     52          #include "OSAL_Nv.h"
     53          #endif
     54          #include "ZDApp.h"
     55          #include "ZDObject.h"
     56          
     57          #if defined ( INTER_PAN )
     58          #include "stub_aps.h"
     59          #endif
     60          
     61          #include "zll_initiator.h"
     62          
     63          #if defined ( MT_APP_FUNC )
     64          #include "MT_APP.h"
     65          #include "zll_rpc.h"
     66          #endif
     67          
     68          #include "zll_samplebridge.h"
     69          
     70          #include "onboard.h"
     71          #ifdef HAL_BOARD_CC2530USB
     72          #include "osal_clock.h"
     73          #endif
     74          /* HAL */
     75          #include "hal_lcd.h"
     76          #include "hal_led.h"
     77          #include "hal_key.h"
     78          
     79          /*********************************************************************
     80           * MACROS
     81           */
     82          
     83          #ifdef HAL_BOARD_CC2530USB
     84            #define TOUCH_LINK_KEY      0
     85            #define FACTORY_RESET_KEY   (HAL_KEY_SW_1 | HAL_KEY_SW_2)
     86            #define CLASSIC_COMMISS_KEY HAL_KEY_SW_2
     87            #define PERMIT_JOIN_KEY     HAL_KEY_SW_1
     88            #define ON_KEY              0
     89            #define OFF_KEY             0
     90            #define DEVICE_DISCOVERY    0
     91            #define DEV_SEL_UP_KEY      0
     92            #define DEV_SEL_DN_KEY      0
     93          #else // HAL_BOARD_CC2530EB
     94            #define TOUCH_LINK_KEY      HAL_KEY_LEFT
     95            #define FACTORY_RESET_KEY   HAL_KEY_RIGHT
     96            #define CLASSIC_COMMISS_KEY (HAL_KEY_UP | HAL_KEY_SW_6)
     97            #define PERMIT_JOIN_KEY     (HAL_KEY_DOWN | HAL_KEY_SW_6)
     98            #define ON_KEY              HAL_KEY_UP
     99            #define OFF_KEY             HAL_KEY_DOWN
    100            #define DEVICE_DISCOVERY    HAL_KEY_CENTER
    101            #define DEV_SEL_UP_KEY      (HAL_KEY_RIGHT | HAL_KEY_SW_6)
    102            #define DEV_SEL_DN_KEY      (HAL_KEY_LEFT | HAL_KEY_SW_6)
    103          #endif
    104          
    105          #define PERMIT_JOIN_DURATION       60
    106          #define DEVICE_DISCOVERY_DELAY     2000
    107          
    108          /*********************************************************************
    109           * CONSTANTS
    110           */
    111          
    112          // Application Events
    113          #define SAMPLEBRIDGE_IDENTIFY_TIMEOUT_EVT    0x0001
    114          #define SAMPLEBRIDGE_DEV_ANNCE_EVT           0x0002
    115          
    116          /*********************************************************************
    117           * TYPEDEFS
    118           */
    119          
    120          /*********************************************************************
    121           * GLOBAL VARIABLES
    122           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    123          byte zllSampleBridge_TaskID;
   \                     zllSampleBridge_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    124          
    125          
    126          /*********************************************************************
    127           * GLOBAL FUNCTIONS
    128           */
    129          extern void zll_ItemInit( uint16 id, uint16 len, void *pBuf );
    130          extern void initiatorSelectNwkParams( void );
    131          
    132          /*********************************************************************
    133           * LOCAL VARIABLES
    134           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          static afAddrType_t zllSampleBridge_DstAddr;
   \                     zllSampleBridge_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          static zllBridgeLinkedTargetList_t linkedTargets;
   \                     linkedTargets:
   \   000000                DS 80
   \   000050                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          static uint8 linkedAddrNextIdx = 0;
   \                     linkedAddrNextIdx:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          static uint8 linkedAddrSelIdx = 0;
   \                     linkedAddrSelIdx:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          static uint8 linkedAddrNum = 0;
   \                     linkedAddrNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          static zllBridgeControlledGroupsList_t controlledGroups;
   \                     controlledGroups:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          static uint8 sampleBridgeSeqNum = 0;
   \                     sampleBridgeSeqNum:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_I, align 1, keep-with-next
    142          static uint16 lastDevAnnceAddr = INVALID_NODE_ADDR;
   \                     lastDevAnnceAddr:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for lastDevAnnceAddr>`
   \   000002                REQUIRE __INIT_XDATA_I
    143          
    144          /*********************************************************************
    145           * LOCAL FUNCTIONS
    146           */
    147          #if defined ( MT_APP_FUNC )
    148          static void zllSampleBridge_ProcessAppMsg( uint8 srcEP, uint8 len, uint8 *msg );
    149          #endif
    150          static void zllSampleBridge_HandleKeys( byte shift, byte keys );
    151          static void zllSampleBridge_BasicResetCB( void );
    152          static void zllSampleBridge_IdentifyCB( zclIdentify_t *pCmd );
    153          static void zllSampleBridge_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
    154          static void zllSampleBridge_GroupRspCB( zclGroupRsp_t *pRsp );
    155          static void zllSampleBridge_ProcessIdentifyTimeChange( void );
    156          static ZStatus_t zllSampleBridge_SendActiveEPReq( uint16 dstAddr );
    157          
    158          // Functions to process ZCL Foundation incoming Command/Response messages
    159          static void zllSampleBridge_ProcessIncomingMsg( zclIncomingMsg_t *msg );
    160          #ifdef ZCL_READ
    161          static ZStatus_t zllSampleBridge_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
    162          #endif
    163          #ifdef ZCL_WRITE
    164          static uint8 zllSampleBridge_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
    165          #endif
    166          static uint8 zllSampleBridge_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
    167          #ifdef ZCL_DISCOVER
    168          static uint8 zllSampleBridge_ProcessInDiscRspCmd( zclIncomingMsg_t *pInMsg );
    169          #endif
    170          
    171          // This callback is called to process a Get Group Identifiers Request command
    172          static ZStatus_t zllSampleBridge_GetGrpIDsReqCB( afAddrType_t *srcAddr, zclLLGetGrpIDsReq_t *pReq, uint8 seqNum );
    173          
    174          // This callback is called to process a Get Endpoint List Request command
    175          static ZStatus_t zllSampleBridge_GetEPListReqCB( afAddrType_t *srcAddr, zclLLGetEPListReq_t *pReq, uint8 seqNum );
    176          
    177          // This callback is called to process a Get Endpoint Info Request command
    178          static ZStatus_t zllSampleBridge_GetEndpointInfoCB( afAddrType_t *srcAddr, zclLLEndpointInfo_t *pRsp );
    179          
    180          // Target touch linked notification
    181          static ZStatus_t zllSampleBridge_ProcessTL( epInfoRec_t *pRec );
    182          static ZStatus_t zllSampleBridge_UpdateLinkedTarget( epInfoRec_t *pRec );
    183          static void zllSampleBridge_InitLinkedTargets( void );
    184          static uint8 zllSampleBridge_addControlledGroup( uint16 groupId );
    185          // Device Discovery
    186          static void zllSampleBridge_ProcessZDOMsg( zdoIncomingMsg_t *inMsg );
    187          static bool zllSampleBridge_SelectTargetSimpleDesc( SimpleDescriptionFormat_t *pSimpleDesc );
    188          
    189          /*********************************************************************
    190           * ZCL General Profile Callback table
    191           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    192          static zclGeneral_AppCallbacks_t zllSampleBridge_GenCmdCBs =
   \                     zllSampleBridge_GenCmdCBs:
   \   000000                DS 36
   \   000024                REQUIRE `?<Initializer for zllSampleBridge_GenCmdCBs>`
   \   000024                REQUIRE __INIT_XDATA_I
    193          {
    194            zllSampleBridge_BasicResetCB,           // Basic Cluster Reset command
    195            zllSampleBridge_IdentifyCB,             // Identify command
    196          #ifdef ZCL_EZMODE
    197            NULL,                                   // Identify EZ-Mode Invoke command
    198            NULL,                                   // Identify Update Commission State command
    199          #endif
    200            NULL,                                   // Identify Trigger Effect command
    201            zllSampleBridge_IdentifyQueryRspCB,     // Identify Query Response command
    202            NULL,                                   // On/Off cluster commands
    203            NULL,                                   // On/Off cluster enhanced command Off with Effect
    204            NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
    205            NULL,                                   // On/Off cluster enhanced command On with Timed Off
    206          #ifdef ZCL_LEVEL_CTRL
    207            NULL,                                   // Level Control Move to Level command
    208            NULL,                                   // Level Control Move command
    209            NULL,                                   // Level Control Step command
    210            NULL,                                   // Level Control Stop command
    211          #endif
    212          #ifdef ZCL_GROUPS
    213            zllSampleBridge_GroupRspCB,             // Group Response commands
    214          #endif
    215          #ifdef ZCL_SCENES
    216            NULL,                                   // Scene Store Request command
    217            NULL,                                   // Scene Recall Request command
    218            NULL,                                   // Scene Response command
    219          #endif
    220          #if ZCL_ALARMS
    221            NULL,                                   // Alarm (Response) commands
    222          #endif
    223          #ifdef SE_UK_EXT
    224            NULL,                                   // Get Event Log command
    225            NULL,                                   // Publish Event Log command
    226          #endif
    227            NULL,                                   // RSSI Location command
    228            NULL                                    // RSSI Location Response command
    229          };
    230          
    231          // ZLL Command Callbacks table

   \                                 In  segment XDATA_I, align 1, keep-with-next
    232          static zclLL_AppCallbacks_t zllSampleBridge_LLCmdCBs =
   \                     zllSampleBridge_LLCmdCBs:
   \   000000                DS 10
   \   00000A                REQUIRE `?<Initializer for zllSampleBridge_LLCmdCBs>`
   \   00000A                REQUIRE __INIT_XDATA_I
    233          {
    234            // Received Server Commands
    235            zllSampleBridge_GetGrpIDsReqCB,         // Get Group Identifiers Request command
    236            zllSampleBridge_GetEPListReqCB,         // Get Endpoint List Request command
    237          
    238            // Received Client Commands
    239            zllSampleBridge_GetEndpointInfoCB,      // Endpoint Information command
    240            NULL,                                   // Get Group Identifiers Response command
    241            NULL                                    // Get Endpoint List Response command
    242          };
    243          
    244          /*********************************************************************
    245           * @fn          zllSampleBridge_Init
    246           *
    247           * @brief       Initialization function for the Sample Bridge App task.
    248           *
    249           * @param       task_id
    250           *
    251           * @return      none
    252           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    253          void zllSampleBridge_Init( byte task_id )
   \                     zllSampleBridge_Init:
    254          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    255            zllSampleBridge_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#zllSampleBridge_TaskID
   \   000009   F0           MOVX    @DPTR,A
    256          
    257            // Set destination address to indirect
    258            zllSampleBridge_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00000A   90....       MOV     DPTR,#zllSampleBridge_DstAddr + 8
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
    259            zllSampleBridge_DstAddr.endPoint = 0;
   \   00000F   A3           INC     DPTR
   \   000010   F0           MOVX    @DPTR,A
    260            zllSampleBridge_DstAddr.addr.shortAddr = 0;
   \   000011   90....       MOV     DPTR,#zllSampleBridge_DstAddr
   \   000014   F0           MOVX    @DPTR,A
   \   000015   A3           INC     DPTR
   \   000016   12....       LCALL   ?Subroutine11 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   000019   12....       LCALL   ??osal_memset?relay
   \   00001C                ; Setup parameters for call to function zll_ItemInit
   \   00001C   75....       MOV     ?V0 + 0,#linkedTargets & 0xff
   \   00001F   75....       MOV     ?V0 + 1,#(linkedTargets >> 8) & 0xff
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7C50         MOV     R4,#0x50
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   7A01         MOV     R2,#0x1
   \   00002D   7B04         MOV     R3,#0x4
   \   00002F   12....       LCALL   ??zll_ItemInit?relay
   \   000032   7402         MOV     A,#0x2
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
   \   000037   90....       MOV     DPTR,#linkedAddrNum
   \   00003A   E4           CLR     A
   \   00003B   F0           MOVX    @DPTR,A
   \   00003C   F9           MOV     R1,A
   \                     ??zllSampleBridge_Init_0:
   \   00003D   89..         MOV     ?V0 + 0,R1
   \   00003F   75..00       MOV     ?V0 + 1,#0x0
   \   000042   7403         MOV     A,#0x3
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?S_SHL
   \   000049   74..         MOV     A,#linkedTargets & 0xff
   \   00004B   25..         ADD     A,?V0 + 0
   \   00004D   F582         MOV     DPL,A
   \   00004F   74..         MOV     A,#(linkedTargets >> 8) & 0xff
   \   000051   35..         ADDC    A,?V0 + 1
   \   000053   F583         MOV     DPH,A
   \   000055   E0           MOVX    A,@DPTR
   \   000056   F4           CPL     A
   \   000057   7003         JNZ     ??zllSampleBridge_Init_1
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F4           CPL     A
   \                     ??zllSampleBridge_Init_1:
   \   00005C   6006         JZ      ??zllSampleBridge_Init_2
   \   00005E   90....       MOV     DPTR,#linkedAddrNum
   \   000061   E0           MOVX    A,@DPTR
   \   000062   04           INC     A
   \   000063   F0           MOVX    @DPTR,A
   \                     ??zllSampleBridge_Init_2:
   \   000064   09           INC     R1
   \   000065   E9           MOV     A,R1
   \   000066   C3           CLR     C
   \   000067   940A         SUBB    A,#0xa
   \   000069   40D2         JC      ??zllSampleBridge_Init_0
   \   00006B   90....       MOV     DPTR,#linkedAddrNum
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   C3           CLR     C
   \   000070   940A         SUBB    A,#0xa
   \   000072   5005         JNC     ??zllSampleBridge_Init_3
   \   000074   E0           MOVX    A,@DPTR
   \   000075   90....       MOV     DPTR,#linkedAddrNextIdx
   \   000078   F0           MOVX    @DPTR,A
   \                     ??zllSampleBridge_Init_3:
   \   000079                ; Setup parameters for call to function osal_memset
   \   000079   7C06         MOV     R4,#0x6
   \   00007B   7D00         MOV     R5,#0x0
   \   00007D   7900         MOV     R1,#0x0
   \   00007F   7A..         MOV     R2,#controlledGroups & 0xff
   \   000081   7B..         MOV     R3,#(controlledGroups >> 8) & 0xff
   \   000083   12....       LCALL   ??osal_memset?relay
   \   000086                ; Setup parameters for call to function zll_ItemInit
   \   000086   75....       MOV     ?V0 + 0,#controlledGroups & 0xff
   \   000089   75....       MOV     ?V0 + 1,#(controlledGroups >> 8) & 0xff
   \   00008C   78..         MOV     R0,#?V0 + 0
   \   00008E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000091   7C06         MOV     R4,#0x6
   \   000093   7D00         MOV     R5,#0x0
   \   000095   7A02         MOV     R2,#0x2
   \   000097   7B04         MOV     R3,#0x4
   \   000099   12....       LCALL   ??zll_ItemInit?relay
   \   00009C   7402         MOV     A,#0x2
   \   00009E   12....       LCALL   ?DEALLOC_XSTACK8
    261          
    262            // init linked list in NV
    263            zllSampleBridge_InitLinkedTargets();
    264          
    265            // Register the ZCL General Cluster Library callback functions
    266            zclGeneral_RegisterCmdCallbacks( SAMPLEBRIDGE_ENDPOINT, &zllSampleBridge_GenCmdCBs );
   \   0000A1                ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
   \   0000A1   7A..         MOV     R2,#zllSampleBridge_GenCmdCBs & 0xff
   \   0000A3   7B..         MOV     R3,#(zllSampleBridge_GenCmdCBs >> 8) & 0xff
   \   0000A5   790B         MOV     R1,#0xb
   \   0000A7   12....       LCALL   ??zclGeneral_RegisterCmdCallbacks?relay
    267          
    268            // Register for ZCL Light Link Cluster Library callback functions
    269            zclLL_RegisterCmdCallbacks( SAMPLEBRIDGE_ENDPOINT, &zllSampleBridge_LLCmdCBs );
   \   0000AA                ; Setup parameters for call to function zclLL_RegisterCmdCallbacks
   \   0000AA   7A..         MOV     R2,#zllSampleBridge_LLCmdCBs & 0xff
   \   0000AC   7B..         MOV     R3,#(zllSampleBridge_LLCmdCBs >> 8) & 0xff
   \   0000AE   790B         MOV     R1,#0xb
   \   0000B0   12....       LCALL   ??zclLL_RegisterCmdCallbacks?relay
    270          
    271            // Register the application's attribute list
    272            zcl_registerAttrList( SAMPLEBRIDGE_ENDPOINT, SAMPLEBRIDGE_MAX_ATTRIBUTES, zllSampleBridge_Attrs );
   \   0000B3                ; Setup parameters for call to function zcl_registerAttrList
   \   0000B3   7C..         MOV     R4,#zllSampleBridge_Attrs & 0xff
   \   0000B5   7D..         MOV     R5,#(zllSampleBridge_Attrs >> 8) & 0xff
   \   0000B7   7A0A         MOV     R2,#0xa
   \   0000B9   790B         MOV     R1,#0xb
   \   0000BB   12....       LCALL   ??zcl_registerAttrList?relay
    273          
    274            // Register the Application to receive the unprocessed Foundation command/response messages
    275            zllInitiator_RegisterForMsg( zllSampleBridge_TaskID );
   \   0000BE                ; Setup parameters for call to function zllInitiator_RegisterForMsg
   \   0000BE   90....       MOV     DPTR,#zllSampleBridge_TaskID
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   F9           MOV     R1,A
   \   0000C3   12....       LCALL   ??zllInitiator_RegisterForMsg?relay
    276          
    277            // Register the application for ZDO messages for device discovery
    278            ZDO_RegisterForZDOMsg( zllSampleBridge_TaskID, Device_annce );
   \   0000C6                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000C6   7A13         MOV     R2,#0x13
   \   0000C8   7B00         MOV     R3,#0x0
   \   0000CA   90....       MOV     DPTR,#zllSampleBridge_TaskID
   \   0000CD   E0           MOVX    A,@DPTR
   \   0000CE   F9           MOV     R1,A
   \   0000CF   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    279            ZDO_RegisterForZDOMsg( zllSampleBridge_TaskID, Active_EP_rsp );
   \   0000D2                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000D2   7A05         MOV     R2,#0x5
   \   0000D4   7B80         MOV     R3,#-0x80
   \   0000D6   90....       MOV     DPTR,#zllSampleBridge_TaskID
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   F9           MOV     R1,A
   \   0000DB   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    280            ZDO_RegisterForZDOMsg( zllSampleBridge_TaskID, Simple_Desc_rsp );
   \   0000DE                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   0000DE   7A04         MOV     R2,#0x4
   \   0000E0   7B80         MOV     R3,#-0x80
   \   0000E2   90....       MOV     DPTR,#zllSampleBridge_TaskID
   \   0000E5   E0           MOVX    A,@DPTR
   \   0000E6   F9           MOV     R1,A
   \   0000E7   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
    281          
    282            // Register for all key events - This app will handle all key events
    283            RegisterForKeys( zllSampleBridge_TaskID );
   \   0000EA                ; Setup parameters for call to function RegisterForKeys
   \   0000EA   90....       MOV     DPTR,#zllSampleBridge_TaskID
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   F9           MOV     R1,A
   \   0000EF   12....       LCALL   ??RegisterForKeys?relay
    284          
    285            zllInitiator_RegisterApp( &zllSampleBridge_SimpleDesc, &zllSampleBridge_DeviceInfo );
   \   0000F2                ; Setup parameters for call to function zllInitiator_RegisterApp
   \   0000F2   7C..         MOV     R4,#zllSampleBridge_DeviceInfo & 0xff
   \   0000F4   7D..         MOV     R5,#(zllSampleBridge_DeviceInfo >> 8) & 0xff
   \   0000F6   7A..         MOV     R2,#zllSampleBridge_SimpleDesc & 0xff
   \   0000F8   7B..         MOV     R3,#(zllSampleBridge_SimpleDesc >> 8) & 0xff
   \   0000FA   12....       LCALL   ??zllInitiator_RegisterApp?relay
    286          
    287            zllInitiator_RegisterIdentifyCB( zllSampleBridge_IdentifyCB );
   \   0000FD                ; Setup parameters for call to function zllInitiator_RegisterIdentifyCB
   \   0000FD   7A..         MOV     R2,#??zllSampleBridge_IdentifyCB?relay & 0xff
   \   0000FF   7B..         MOV     R3,#(??zllSampleBridge_IdentifyCB?relay >> 8) & 0xff
   \   000101   12....       LCALL   ??zllInitiator_RegisterIdentifyCB?relay
    288          
    289            zllInitiator_RegisterNotifyTLCB( zllSampleBridge_ProcessTL );
   \   000104                ; Setup parameters for call to function zllInitiator_RegisterNotifyTLCB
   \   000104   7A..         MOV     R2,#??zllSampleBridge_ProcessTL?relay & 0xff
   \   000106   7B..         MOV     R3,#(??zllSampleBridge_ProcessTL?relay >> 8) & 0xff
   \   000108   12....       LCALL   ??zllInitiator_RegisterNotifyTLCB?relay
    290          
    291            zllInitiator_RegisterResetAppCB ( zllSampleBridge_BasicResetCB );
   \   00010B                ; Setup parameters for call to function zllInitiator_RegisterResetAppCB
   \   00010B   7A..         MOV     R2,#??zllSampleBridge_BasicResetCB?relay & 0xff
   \   00010D   7B..         MOV     R3,#(??zllSampleBridge_BasicResetCB?relay >> 8) & 0xff
   \   00010F   12....       LCALL   ??zllInitiator_RegisterResetAppCB?relay
    292          
    293            zllInitiator_InitDevice();
   \   000112                ; Setup parameters for call to function zllInitiator_InitDevice
   \   000112   12....       LCALL   ??zllInitiator_InitDevice?relay
    294          
    295          }
   \   000115   80..         SJMP    ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine30_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memset
   \   000001                ; Setup parameters for call to function osal_memset
   \   000001   7C50         MOV     R4,#0x50
   \   000003   FD           MOV     R5,A
   \   000004   79FF         MOV     R1,#-0x1
   \   000006   7A..         MOV     R2,#linkedTargets & 0xff
   \   000008   7B..         MOV     R3,#(linkedTargets >> 8) & 0xff
   \   00000A   22           RET
    296          
    297          /*********************************************************************
    298           * @fn          zclSample_event_loop
    299           *
    300           * @brief       Event Loop Processor for the Sample Bridge App task.
    301           *
    302           * @param       task_id
    303           * @param       events - events bitmap
    304           *
    305           * @return      unprocessed events bitmap
    306           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    307          uint16 zllSampleBridge_event_loop( uint8 task_id, uint16 events )
   \                     zllSampleBridge_event_loop:
    308          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    309            (void)task_id;  // Intentionally unreferenced parameter
    310          
    311            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   7003         JNZ     $+5
   \   00000E   02....       LJMP    ??zllSampleBridge_event_loop_0 & 0xFFFF
    312            {
    313              afIncomingMSGPacket_t *pMsg;
    314          
    315              if ( (pMsg = (afIncomingMSGPacket_t *)osal_msg_receive( zllSampleBridge_TaskID )) )
   \   000011                ; Setup parameters for call to function osal_msg_receive
   \   000011   90....       MOV     DPTR,#zllSampleBridge_TaskID
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F9           MOV     R1,A
   \   000016   12....       LCALL   ??osal_msg_receive?relay
   \   000019   8A..         MOV     ?V0 + 2,R2
   \   00001B   8B..         MOV     ?V0 + 3,R3
   \   00001D   AE..         MOV     R6,?V0 + 2
   \   00001F   AF..         MOV     R7,?V0 + 3
   \   000021   EE           MOV     A,R6
   \   000022   4F           ORL     A,R7
   \   000023   7003         JNZ     $+5
   \   000025   02....       LJMP    ??zllSampleBridge_event_loop_1 & 0xFFFF
    316              {
    317                switch ( pMsg->hdr.event )
   \   000028   8E82         MOV     DPL,R6
   \   00002A   8F83         MOV     DPH,R7
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   24DD         ADD     A,#-0x23
   \   00002F   600E         JZ      ??zllSampleBridge_event_loop_2
   \   000031   24EF         ADD     A,#-0x11
   \   000033   6019         JZ      ??zllSampleBridge_event_loop_3
   \   000035   2474         ADD     A,#0x74
   \   000037   605A         JZ      ??zllSampleBridge_event_loop_4
   \   000039   24ED         ADD     A,#-0x13
   \   00003B   6061         JZ      ??zllSampleBridge_event_loop_5
   \   00003D   8062         SJMP    ??zllSampleBridge_event_loop_6
    318                {
    319          #if defined (MT_APP_FUNC)
    320                  case MT_SYS_APP_MSG:
    321                    // Message received from MT
    322                   zllSampleBridge_ProcessAppMsg( ((mtSysAppMsg_t *)pMsg)->endpoint,
    323                                                  ((mtSysAppMsg_t *)pMsg)->appDataLen,
    324                                                  ((mtSysAppMsg_t *)pMsg)->appData );
   \                     ??zllSampleBridge_event_loop_2:
   \   00003F                ; Setup parameters for call to function zllSampleBridge_ProcessAppMsg
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000046   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000049   12....       LCALL   ??zllSampleBridge_ProcessAppMsg?relay
    325                    break;
   \   00004C   8053         SJMP    ??zllSampleBridge_event_loop_6
    326          #endif
    327                  case ZCL_INCOMING_MSG:
    328                    // Incoming ZCL Foundation command/response messages
    329                    zllSampleBridge_ProcessIncomingMsg( (zclIncomingMsg_t *)pMsg );
   \                     ??zllSampleBridge_event_loop_3:
   \   00004E   EE           MOV     A,R6
   \   00004F   2417         ADD     A,#0x17
   \   000051   F8           MOV     R0,A
   \   000052   EF           MOV     A,R7
   \   000053   3400         ADDC    A,#0x0
   \   000055   F9           MOV     R1,A
   \   000056   88..         MOV     ?V0 + 2,R0
   \   000058   89..         MOV     ?V0 + 3,R1
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   14           DEC     A
   \   000063   601B         JZ      ??zllSampleBridge_event_loop_7
   \   000065   24FD         ADD     A,#-0x3
   \   000067   701A         JNZ     ??zllSampleBridge_event_loop_8
   \   000069   8882         MOV     DPL,R0
   \   00006B   8983         MOV     DPH,R1
   \   00006D   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   000070   8882         MOV     DPL,R0
   \   000072   8983         MOV     DPH,R1
   \   000074   7900         MOV     R1,#0x0
   \                     ??zllSampleBridge_event_loop_9:
   \   000076   E0           MOVX    A,@DPTR
   \   000077   F8           MOV     R0,A
   \   000078   E9           MOV     A,R1
   \   000079   C3           CLR     C
   \   00007A   98           SUBB    A,R0
   \   00007B   5006         JNC     ??zllSampleBridge_event_loop_8
   \   00007D   09           INC     R1
   \   00007E   80F6         SJMP    ??zllSampleBridge_event_loop_9
   \                     ??zllSampleBridge_event_loop_7:
   \   000080                ; Setup parameters for call to function zllSampleBridge_ProcessInReadRspCmd
   \   000080   12....       LCALL   ??zllSampleBridge_ProcessInReadRspCmd?relay
   \                     ??zllSampleBridge_event_loop_8:
   \   000083   85..82       MOV     DPL,?V0 + 2
   \   000086   85..83       MOV     DPH,?V0 + 3
   \   000089   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   00008C   6013         JZ      ??zllSampleBridge_event_loop_6
   \   00008E                ; Setup parameters for call to function osal_mem_free
   \   00008E   12....       LCALL   ??osal_mem_free?relay
   \   000091   800E         SJMP    ??zllSampleBridge_event_loop_6
    330                    break;
    331          
    332                  case KEY_CHANGE:
    333                    zllSampleBridge_HandleKeys( ((keyChange_t *)pMsg)->state, ((keyChange_t *)pMsg)->keys );
   \                     ??zllSampleBridge_event_loop_4:
   \   000093                ; Setup parameters for call to function zllSampleBridge_HandleKeys
   \   000093   A3           INC     DPTR
   \   000094   A3           INC     DPTR
   \   000095   A3           INC     DPTR
   \   000096   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000099   12....       LCALL   ??zllSampleBridge_HandleKeys?relay
    334                    break;
   \   00009C   8003         SJMP    ??zllSampleBridge_event_loop_6
    335          
    336                  case ZDO_CB_MSG:
    337                    // ZDO sends the message that we registered for
    338                    zllSampleBridge_ProcessZDOMsg( (zdoIncomingMsg_t *)pMsg );
   \                     ??zllSampleBridge_event_loop_5:
   \   00009E                ; Setup parameters for call to function zllSampleBridge_ProcessZDOMsg
   \   00009E   12....       LCALL   ??zllSampleBridge_ProcessZDOMsg?relay
    339                    break;
    340          
    341                  default:
    342                    break;
    343                }
    344          
    345                // Release the memory
    346                osal_msg_deallocate( (uint8 *)pMsg );
   \                     ??zllSampleBridge_event_loop_6:
   \   0000A1                ; Setup parameters for call to function osal_msg_deallocate
   \   0000A1   EE           MOV     A,R6
   \   0000A2   FA           MOV     R2,A
   \   0000A3   EF           MOV     A,R7
   \   0000A4   FB           MOV     R3,A
   \   0000A5   12....       LCALL   ??osal_msg_deallocate?relay
    347              }
    348          
    349              // return unprocessed events
    350              return (events ^ SYS_EVENT_MSG);
   \                     ??zllSampleBridge_event_loop_1:
   \   0000A8   AA..         MOV     R2,?V0 + 0
   \   0000AA   E5..         MOV     A,?V0 + 1
   \   0000AC   6480         XRL     A,#0x80
   \   0000AE   FB           MOV     R3,A
   \   0000AF   804F         SJMP    ??zllSampleBridge_event_loop_10
    351            }
    352          
    353            if ( events & SAMPLEBRIDGE_IDENTIFY_TIMEOUT_EVT )
   \                     ??zllSampleBridge_event_loop_0:
   \   0000B1   EA           MOV     A,R2
   \   0000B2   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000B4   501A         JNC     ??zllSampleBridge_event_loop_11
    354            {
    355              if ( zllSampleBridge_IdentifyTime > 0 )
   \   0000B6   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   0000B9   600C         JZ      ??zllSampleBridge_event_loop_12
    356                zllSampleBridge_IdentifyTime--;
   \   0000BB   90....       MOV     DPTR,#zllSampleBridge_IdentifyTime
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   24FF         ADD     A,#-0x1
   \   0000C1   F0           MOVX    @DPTR,A
   \   0000C2   A3           INC     DPTR
   \   0000C3   E0           MOVX    A,@DPTR
   \   0000C4   34FF         ADDC    A,#-0x1
   \   0000C6   F0           MOVX    @DPTR,A
    357              zllSampleBridge_ProcessIdentifyTimeChange();
   \                     ??zllSampleBridge_event_loop_12:
   \   0000C7                ; Setup parameters for call to function zllSampleBridge_ProcessIdentifyTimeChange
   \   0000C7   12....       LCALL   ??zllSampleBridge_ProcessIdentifyTimeChange?rel
    358          
    359              return ( events ^ SAMPLEBRIDGE_IDENTIFY_TIMEOUT_EVT );
   \   0000CA   E5..         MOV     A,?V0 + 0
   \   0000CC   6401         XRL     A,#0x1
   \   0000CE   8027         SJMP    ??zllSampleBridge_event_loop_13
    360            }
    361          
    362            if ( events & SAMPLEBRIDGE_DEV_ANNCE_EVT )
   \                     ??zllSampleBridge_event_loop_11:
   \   0000D0   5402         ANL     A,#0x2
   \   0000D2   6028         JZ      ??zllSampleBridge_event_loop_14
    363            {
    364              if ( lastDevAnnceAddr != INVALID_NODE_ADDR )
   \   0000D4   90....       MOV     DPTR,#lastDevAnnceAddr
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   64FE         XRL     A,#0xfe
   \   0000DA   7003         JNZ     ??zllSampleBridge_event_loop_15
   \   0000DC   A3           INC     DPTR
   \   0000DD   E0           MOVX    A,@DPTR
   \   0000DE   F4           CPL     A
   \                     ??zllSampleBridge_event_loop_15:
   \   0000DF   6012         JZ      ??zllSampleBridge_event_loop_16
    365              {
    366                zllSampleBridge_SendActiveEPReq( lastDevAnnceAddr );
   \   0000E1                ; Setup parameters for call to function zllSampleBridge_SendActiveEPReq
   \   0000E1   90....       MOV     DPTR,#lastDevAnnceAddr
   \   0000E4   12....       LCALL   ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   0000E7   12....       LCALL   ??zllSampleBridge_SendActiveEPReq?relay
    367                lastDevAnnceAddr = INVALID_NODE_ADDR;
   \   0000EA   90....       MOV     DPTR,#lastDevAnnceAddr
   \   0000ED   74FE         MOV     A,#-0x2
   \   0000EF   F0           MOVX    @DPTR,A
   \   0000F0   A3           INC     DPTR
   \   0000F1   04           INC     A
   \   0000F2   F0           MOVX    @DPTR,A
    368              }
    369              return  ( events ^ SAMPLEBRIDGE_DEV_ANNCE_EVT );
   \                     ??zllSampleBridge_event_loop_16:
   \   0000F3   E5..         MOV     A,?V0 + 0
   \   0000F5   6402         XRL     A,#0x2
   \                     ??zllSampleBridge_event_loop_13:
   \   0000F7   FA           MOV     R2,A
   \   0000F8   AB..         MOV     R3,?V0 + 1
   \   0000FA   8004         SJMP    ??zllSampleBridge_event_loop_10
    370            }
    371          
    372            // Discard unknown events
    373            return 0;
   \                     ??zllSampleBridge_event_loop_14:
   \   0000FC   7A00         MOV     R2,#0x0
   \   0000FE   7B00         MOV     R3,#0x0
   \                     ??zllSampleBridge_event_loop_10:
   \   000100                REQUIRE ?Subroutine1
   \   000100                ; // Fall through to label ?Subroutine1
    374          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   8E82         MOV     DPL,R6
   \   000004   8F83         MOV     DPH,R7
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F9           MOV     R1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   90....       MOV     DPTR,#zllSampleBridge_IdentifyTime
   \   000003                REQUIRE ??Subroutine31_0
   \   000003                ; // Fall through to label ??Subroutine31_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine31_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine32_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine33_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   22           RET
    375          
    376          /*********************************************************************
    377           * @fn      zllSampleBridge_ProcessTL
    378           *
    379           * @brief   Process notification data of target being touch-linked:
    380           *          - Add target to linked targets list
    381           *          - Provide user notification
    382           *          - initiate post-TL procedures (send EP Info to end-device)
    383           *
    384           * @param   pRec - Target's enpoint information record
    385           *
    386           * @return  status
    387           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    388          static ZStatus_t zllSampleBridge_ProcessTL( epInfoRec_t *pRec )
   \                     zllSampleBridge_ProcessTL:
    389          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    390            zllSampleBridge_DstAddr.endPoint = pRec->endpoint;
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   90....       MOV     DPTR,#zllSampleBridge_DstAddr + 9
   \   000013   F0           MOVX    @DPTR,A
    391            zllSampleBridge_DstAddr.addrMode = afAddr16Bit;
   \   000014   90....       MOV     DPTR,#zllSampleBridge_DstAddr + 8
   \   000017   7402         MOV     A,#0x2
   \   000019   F0           MOVX    @DPTR,A
    392            zllSampleBridge_DstAddr.addr.shortAddr = pRec->nwkAddr;
   \   00001A   8E82         MOV     DPL,R6
   \   00001C   8F83         MOV     DPH,R7
   \   00001E   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000021   90....       MOV     DPTR,#zllSampleBridge_DstAddr
   \   000024   12....       LCALL   ?Subroutine9 & 0xFFFF
    393          #if defined( INTER_PAN )
    394            zllSampleBridge_DstAddr.panId = _NIB.nwkPanId;
   \                     ??CrossCallReturnLabel_13:
   \   000027   90....       MOV     DPTR,#zllSampleBridge_DstAddr + 10
   \   00002A   12....       LCALL   ?Subroutine10 & 0xFFFF
    395          #endif
    396          
    397            zllSampleBridge_UpdateLinkedTarget( pRec );
   \                     ??CrossCallReturnLabel_15:
   \   00002D                ; Setup parameters for call to function zllSampleBridge_UpdateLinkedTarget
   \   00002D   12....       LCALL   ??zllSampleBridge_UpdateLinkedTarget?relay
    398          
    399          #if ( HAL_LED == TRUE )
    400            // Light LED
    401            HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
   \   000030                ; Setup parameters for call to function HalLedSet
   \   000030   7A01         MOV     R2,#0x1
   \   000032   7902         MOV     R1,#0x2
   \   000034   12....       LCALL   ??HalLedSet?relay
    402            HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
   \   000037                ; Setup parameters for call to function HalLedSet
   \   000037   7A00         MOV     R2,#0x0
   \   000039   7901         MOV     R1,#0x1
   \   00003B   12....       LCALL   ??HalLedSet?relay
    403          #endif
    404          
    405            //check if this is a light.
    406            if( pRec->deviceID < ZLL_DEVICEID_COLOR_CONTORLLER )
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   C3           CLR     C
   \   000048   A3           INC     DPTR
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   9408         SUBB    A,#0x8
   \   00004C   75..03       MOV     ?V0 + 0,#0x3
   \   00004F   78..         MOV     R0,#?V0 + 0
   \   000051   5013         JNC     ??zllSampleBridge_ProcessTL_0
    407            {
    408              HalLcdWriteStringValue( "TL Light:", pRec->nwkAddr, 16, HAL_LCD_LINE_3 );
   \   000053                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000053   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000056   7910         MOV     R1,#0x10
   \   000058   7A..         MOV     R2,#`?<Constant "TL Light:">` & 0xff
   \   00005A   7B..         MOV     R3,#(`?<Constant "TL Light:">` >> 8) & 0xff
   \   00005C   12....       LCALL   ??HalLcdWriteStringValue?relay
   \   00005F   7401         MOV     A,#0x1
   \   000061   12....       LCALL   ?DEALLOC_XSTACK8
   \   000064   8023         SJMP    ??zllSampleBridge_ProcessTL_1
    409            }
    410            else
    411            {
    412              HalLcdWriteStringValue( "TL Ctrlr:", pRec->nwkAddr, 16, HAL_LCD_LINE_3 );
   \                     ??zllSampleBridge_ProcessTL_0:
   \   000066                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000069   7910         MOV     R1,#0x10
   \   00006B   7A..         MOV     R2,#`?<Constant "TL Ctrlr:">` & 0xff
   \   00006D   7B..         MOV     R3,#(`?<Constant "TL Ctrlr:">` >> 8) & 0xff
   \   00006F   12....       LCALL   ??HalLcdWriteStringValue?relay
   \   000072   7401         MOV     A,#0x1
   \   000074   12....       LCALL   ?DEALLOC_XSTACK8
    413          
    414          #ifdef ZLL_UTILITY_SEND_EPINFO_ENABLED
    415              zllInitiator_SendEPInfo( SAMPLEBRIDGE_ENDPOINT, &zllSampleBridge_DstAddr, sampleBridgeSeqNum++ );
   \   000077   90....       MOV     DPTR,#sampleBridgeSeqNum
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   FC           MOV     R4,A
   \   00007C   7401         MOV     A,#0x1
   \   00007E   2C           ADD     A,R4
   \   00007F   F0           MOVX    @DPTR,A
   \   000080                ; Setup parameters for call to function zllInitiator_SendEPInfo
   \   000080   7A..         MOV     R2,#zllSampleBridge_DstAddr & 0xff
   \   000082   7B..         MOV     R3,#(zllSampleBridge_DstAddr >> 8) & 0xff
   \   000084   790B         MOV     R1,#0xb
   \   000086   12....       LCALL   ??zllInitiator_SendEPInfo?relay
    416          #endif //ZLL_UTILITY_SEND_EPINFO_ENABLED
    417            }
    418          
    419            return ( ZSuccess );
   \                     ??zllSampleBridge_ProcessTL_1:
   \   000089   7900         MOV     R1,#0x0
   \   00008B                REQUIRE ?Subroutine2
   \   00008B                ; // Fall through to label ?Subroutine2
    420          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   E8           MOV     A,R0
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004   F0           MOVX    @DPTR,A
   \   000005   90....       MOV     DPTR,#_NIB + 33
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F8           MOV     R0,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   22           RET
    421          
    422          /*********************************************************************
    423           * @fn      zllSampleBridge_UpdateLinkedTarget
    424           *
    425           * @brief   Add or update target in linked targets list
    426           *
    427           * @param   pRec - Target's enpoint information record
    428           *
    429           * @return  status
    430           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    431          static ZStatus_t zllSampleBridge_UpdateLinkedTarget( epInfoRec_t *pRec )
   \                     zllSampleBridge_UpdateLinkedTarget:
    432          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
    433            uint8 idx;
    434            ZStatus_t status = ZSuccess;
    435            for ( idx = 0; idx < MAX_LINKED_TARGETS; idx++ )
   \   000005   75..00       MOV     ?V0 + 2,#0x0
   \   000008   EA           MOV     A,R2
   \   000009   2402         ADD     A,#0x2
   \   00000B   F8           MOV     R0,A
   \   00000C   EB           MOV     A,R3
   \   00000D   3400         ADDC    A,#0x0
   \   00000F   F9           MOV     R1,A
   \   000010   E8           MOV     A,R0
   \   000011   FC           MOV     R4,A
   \   000012   E9           MOV     A,R1
   \   000013   FD           MOV     R5,A
    436            {
    437              if ( ( linkedTargets.arr[idx].Addr == pRec->nwkAddr )
    438                  && ( linkedTargets.arr[idx].EP == pRec->endpoint ) )
   \                     ??zllSampleBridge_UpdateLinkedTarget_0:
   \   000014   85....       MOV     ?V0 + 0,?V0 + 2
   \   000017   75..00       MOV     ?V0 + 1,#0x0
   \   00001A   7403         MOV     A,#0x3
   \   00001C   78..         MOV     R0,#?V0 + 0
   \   00001E   12....       LCALL   ?S_SHL
   \   000021   12....       LCALL   ?Subroutine14 & 0xFFFF
    439              {
    440                break; // found existing entry, overwrite.
    441              }
    442            }
   \                     ??CrossCallReturnLabel_32:
   \   000024   8882         MOV     DPL,R0
   \   000026   8983         MOV     DPH,R1
   \   000028   E0           MOVX    A,@DPTR
   \   000029   FE           MOV     R6,A
   \   00002A   A3           INC     DPTR
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   FF           MOV     R7,A
   \   00002D   8A82         MOV     DPL,R2
   \   00002F   8B83         MOV     DPH,R3
   \   000031   E0           MOVX    A,@DPTR
   \   000032   6E           XRL     A,R6
   \   000033   7003         JNZ     ??zllSampleBridge_UpdateLinkedTarget_1
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   6F           XRL     A,R7
   \                     ??zllSampleBridge_UpdateLinkedTarget_1:
   \   000038   7015         JNZ     ??zllSampleBridge_UpdateLinkedTarget_2
   \   00003A   8882         MOV     DPL,R0
   \   00003C   8983         MOV     DPH,R1
   \   00003E   A3           INC     DPTR
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F8           MOV     R0,A
   \   000047   8C82         MOV     DPL,R4
   \   000049   8D83         MOV     DPH,R5
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   68           XRL     A,R0
   \   00004D   6009         JZ      ??zllSampleBridge_UpdateLinkedTarget_3
   \                     ??zllSampleBridge_UpdateLinkedTarget_2:
   \   00004F   05..         INC     ?V0 + 2
   \   000051   E5..         MOV     A,?V0 + 2
   \   000053   C3           CLR     C
   \   000054   940A         SUBB    A,#0xa
   \   000056   40BC         JC      ??zllSampleBridge_UpdateLinkedTarget_0
    443            //this target is not in our records
    444            if ( idx == MAX_LINKED_TARGETS )
   \                     ??zllSampleBridge_UpdateLinkedTarget_3:
   \   000058   740A         MOV     A,#0xa
   \   00005A   65..         XRL     A,?V0 + 2
   \   00005C   701B         JNZ     ??zllSampleBridge_UpdateLinkedTarget_4
    445            {
    446              idx = linkedAddrNextIdx;
   \   00005E   90....       MOV     DPTR,#linkedAddrNextIdx
   \   000061   E0           MOVX    A,@DPTR
   \   000062   F5..         MOV     ?V0 + 2,A
    447              linkedAddrNextIdx++;
   \   000064   04           INC     A
   \   000065   F0           MOVX    @DPTR,A
    448              if( linkedAddrNextIdx > (MAX_LINKED_TARGETS-1) )
   \   000066   C3           CLR     C
   \   000067   940A         SUBB    A,#0xa
   \   000069   4002         JC      ??zllSampleBridge_UpdateLinkedTarget_5
    449              {
    450                //wrap around and overwrite previous address
    451                linkedAddrNextIdx = 0;
   \   00006B   E4           CLR     A
   \   00006C   F0           MOVX    @DPTR,A
    452              }
    453              if ( linkedAddrNum < MAX_LINKED_TARGETS )
   \                     ??zllSampleBridge_UpdateLinkedTarget_5:
   \   00006D   90....       MOV     DPTR,#linkedAddrNum
   \   000070   E0           MOVX    A,@DPTR
   \   000071   C3           CLR     C
   \   000072   940A         SUBB    A,#0xa
   \   000074   5003         JNC     ??zllSampleBridge_UpdateLinkedTarget_4
    454              {
    455                linkedAddrNum++;
   \   000076   E0           MOVX    A,@DPTR
   \   000077   04           INC     A
   \   000078   F0           MOVX    @DPTR,A
    456              }
    457            }
    458            linkedTargets.arr[idx].Addr = pRec->nwkAddr;
   \                     ??zllSampleBridge_UpdateLinkedTarget_4:
   \   000079   85....       MOV     ?V0 + 0,?V0 + 2
   \   00007C   75..00       MOV     ?V0 + 1,#0x0
   \   00007F   7403         MOV     A,#0x3
   \   000081   78..         MOV     R0,#?V0 + 0
   \   000083   12....       LCALL   ?S_SHL
   \   000086   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000089   8A82         MOV     DPL,R2
   \   00008B   8B83         MOV     DPH,R3
   \   00008D   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000090   12....       LCALL   ?Subroutine27 & 0xFFFF
    459            linkedTargets.arr[idx].profileID = pRec->profileID;
   \                     ??CrossCallReturnLabel_57:
   \   000093   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000096   12....       LCALL   ?Subroutine5 & 0xFFFF
    460            linkedTargets.arr[idx].deviceID = pRec->deviceID;
   \                     ??CrossCallReturnLabel_2:
   \   000099   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   12....       LCALL   ?Subroutine5 & 0xFFFF
    461            linkedTargets.arr[idx].deviceVersion = pRec->version;
   \                     ??CrossCallReturnLabel_3:
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   0000A6   F0           MOVX    @DPTR,A
    462            linkedTargets.arr[idx].EP = pRec->endpoint;
   \   0000A7   8C82         MOV     DPL,R4
   \   0000A9   8D83         MOV     DPH,R5
   \   0000AB   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_50:
   \   0000AE   A3           INC     DPTR
   \   0000AF   F0           MOVX    @DPTR,A
    463            linkedAddrSelIdx = idx;
   \   0000B0   E5..         MOV     A,?V0 + 2
   \   0000B2   90....       MOV     DPTR,#linkedAddrSelIdx
   \   0000B5   F0           MOVX    @DPTR,A
    464          
    465            // update linkedAddr in NV
    466          #if defined ( NV_RESTORE )
    467            osal_nv_write( ZCD_NV_ZLL_BRIDGE_LINK_TARGETS, 0, sizeof( linkedTargets ), &linkedTargets );
   \   0000B6                ; Setup parameters for call to function osal_nv_write
   \   0000B6   75....       MOV     ?V0 + 0,#linkedTargets & 0xff
   \   0000B9   75....       MOV     ?V0 + 1,#(linkedTargets >> 8) & 0xff
   \   0000BC   78..         MOV     R0,#?V0 + 0
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C1   75..50       MOV     ?V0 + 0,#0x50
   \   0000C4   75..00       MOV     ?V0 + 1,#0x0
   \   0000C7   78..         MOV     R0,#?V0 + 0
   \   0000C9   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000CC   7C00         MOV     R4,#0x0
   \   0000CE   7D00         MOV     R5,#0x0
   \   0000D0   7A01         MOV     R2,#0x1
   \   0000D2   7B04         MOV     R3,#0x4
   \   0000D4   12....       LCALL   ??osal_nv_write?relay
   \   0000D7   7404         MOV     A,#0x4
   \   0000D9   12....       LCALL   ?DEALLOC_XSTACK8
    468          #endif
    469            return status;
   \   0000DC   7900         MOV     R1,#0x0
   \   0000DE   7F03         MOV     R7,#0x3
   \   0000E0   02....       LJMP    ?BANKED_LEAVE_XDATA
    470          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   8882         MOV     DPL,R0
   \   000007   8983         MOV     DPH,R1
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   74..         MOV     A,#linkedTargets & 0xff
   \   000002   25..         ADD     A,?V0 + 0
   \   000004   F8           MOV     R0,A
   \   000005   74..         MOV     A,#(linkedTargets >> 8) & 0xff
   \   000007   35..         ADDC    A,?V0 + 1
   \   000009   F9           MOV     R1,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   EE           MOV     A,R6
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EF           MOV     A,R7
   \   000004   F0           MOVX    @DPTR,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET
    471          
    472          /*********************************************************************
    473           * @fn      zllSampleBridge_InitLinkedTargets()
    474           *
    475           * @brief   Initialize linked targets and controlled groups lists in NV.
    476           *
    477           * @param   none
    478           *
    479           * @return  none
    480           */
    481          static void zllSampleBridge_InitLinkedTargets( void )
    482          {
    483            uint8 i;
    484            osal_memset( &linkedTargets, 0xFF, sizeof(linkedTargets));
    485            zll_ItemInit( ZCD_NV_ZLL_BRIDGE_LINK_TARGETS, sizeof(zllBridgeLinkedTargetList_t), &linkedTargets );
    486            linkedAddrNum = 0;
    487            for (i = 0; i < MAX_LINKED_TARGETS; i++ )
    488            {
    489              if ( linkedTargets.arr[i].Addr != 0xFFFF )
    490              {
    491                linkedAddrNum++;
    492              }
    493            }
    494            if ( linkedAddrNum < MAX_LINKED_TARGETS )
    495            {
    496              linkedAddrNextIdx = linkedAddrNum;
    497            }
    498            // init controlled groups list
    499            osal_memset( &controlledGroups, 0x00, sizeof(controlledGroups));
    500            zll_ItemInit( ZCD_NV_ZLL_BRIDGE_CTRL_GROUPS, sizeof(zllBridgeControlledGroupsList_t), &controlledGroups );
    501          }
    502          
    503          #if defined ( MT_APP_FUNC )
    504          /*********************************************************************
    505           * @fn      zllSampleBridge_ProcessAppMsg
    506           *
    507           * @brief   Process Test messages
    508           *
    509           * @param   srcEP - Sending Apps endpoint
    510           * @param   len - number of bytes
    511           * @param   msg - pointer to message
    512           *          0 - lo byte destination address
    513           *          1 - hi byte destination address
    514           *          2 - destination endpoint
    515           *          3 - lo byte cluster ID
    516           *          4 - hi byte cluster ID
    517           *          5 - message length
    518           *          6 - destination address mode (first byte of data)
    519           *          7 - zcl command frame
    520           *
    521           * @return  none
    522           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    523          static void zllSampleBridge_ProcessAppMsg( uint8 srcEP, uint8 len, uint8 *msg )
   \                     zllSampleBridge_ProcessAppMsg:
    524          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 18
   \   000005   74EE         MOV     A,#-0x12
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 2,R1
   \   00000C   EC           MOV     A,R4
   \   00000D   FE           MOV     R6,A
   \   00000E   ED           MOV     A,R5
   \   00000F   FF           MOV     R7,A
    525            afAddrType_t dstAddr;
    526            uint16 clusterID;
    527            zclFrameHdr_t hdr;
    528            uint8 *pData;
    529            uint8 dataLen;
    530          
    531          #if defined( INTER_PAN )
    532            dstAddr.panId = _NIB.nwkPanId;
   \   000010   90....       MOV     DPTR,#_NIB + 33
   \   000013   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   000016   7410         MOV     A,#0x10
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   12....       LCALL   ?Subroutine10 & 0xFFFF
    533          #endif
    534          
    535            dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_16:
   \   00001E   8E82         MOV     DPL,R6
   \   000020   8F83         MOV     DPH,R7
   \   000022   E0           MOVX    A,@DPTR
   \   000023   FA           MOV     R2,A
   \   000024   A3           INC     DPTR
   \   000025   E0           MOVX    A,@DPTR
   \   000026   F9           MOV     R1,A
   \   000027   EA           MOV     A,R2
   \   000028   F8           MOV     R0,A
   \   000029   7406         MOV     A,#0x6
   \   00002B   12....       LCALL   ?XSTACK_DISP0_8
   \   00002E   12....       LCALL   ?Subroutine10 & 0xFFFF
    536            msg += 2;
   \                     ??CrossCallReturnLabel_17:
   \   000031   12....       LCALL   ?Subroutine26 & 0xFFFF
    537            dstAddr.endPoint = *msg++;
   \                     ??CrossCallReturnLabel_55:
   \   000034   C0E0         PUSH    A
   \   000036   740F         MOV     A,#0xf
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   D0E0         POP     A
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   8E82         MOV     DPL,R6
   \   000040   8F83         MOV     DPH,R7
   \   000042   A3           INC     DPTR
   \   000043   AE82         MOV     R6,DPL
   \   000045   AF83         MOV     R7,DPH
    538            clusterID = BUILD_UINT16( msg[0], msg[1] );
   \   000047   E0           MOVX    A,@DPTR
   \   000048   FA           MOV     R2,A
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F9           MOV     R1,A
   \   00004C   EA           MOV     A,R2
   \   00004D   2400         ADD     A,#0x0
   \   00004F   F5..         MOV     ?V0 + 0,A
   \   000051   E4           CLR     A
   \   000052   39           ADDC    A,R1
   \   000053   F5..         MOV     ?V0 + 1,A
    539            msg += 2;
   \   000055   12....       LCALL   ?Subroutine26 & 0xFFFF
    540            dataLen = *msg++; // Length of message (Z-Tool can support up to 255 octets)
   \                     ??CrossCallReturnLabel_56:
   \   000058   F5..         MOV     ?V0 + 8,A
   \   00005A   A3           INC     DPTR
   \   00005B   0E           INC     R6
   \   00005C   AF83         MOV     R7,DPH
    541            dstAddr.addrMode = (afAddrMode_t)(*msg++);
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   C0E0         PUSH    A
   \   000061   740E         MOV     A,#0xe
   \   000063   12....       LCALL   ?XSTACK_DISP0_8
   \   000066   D0E0         POP     A
   \   000068   F0           MOVX    @DPTR,A
   \   000069   8E82         MOV     DPL,R6
   \   00006B   8F83         MOV     DPH,R7
   \   00006D   A3           INC     DPTR
   \   00006E   0E           INC     R6
    542            dataLen--; // Length of ZCL frame
    543          
    544            // Begining of ZCL frame
    545            pData = zclParseHdr( &hdr, msg );
   \   00006F                ; Setup parameters for call to function zclParseHdr
   \   00006F   EE           MOV     A,R6
   \   000070   FC           MOV     R4,A
   \   000071   AD83         MOV     R5,DPH
   \   000073   85..82       MOV     DPL,?XSP + 0
   \   000076   85..83       MOV     DPH,?XSP + 1
   \   000079   AA82         MOV     R2,DPL
   \   00007B   AB83         MOV     R3,DPH
   \   00007D   12....       LCALL   ??zclParseHdr?relay
   \   000080   8A..         MOV     ?V0 + 4,R2
   \   000082   8A..         MOV     ?V0 + 6,R2
   \   000084   8B..         MOV     ?V0 + 7,R3
    546            dataLen -= (uint8)( pData - msg );
   \   000086   74FF         MOV     A,#-0x1
   \   000088   25..         ADD     A,?V0 + 8
   \   00008A   C3           CLR     C
   \   00008B   95..         SUBB    A,?V0 + 4
   \   00008D   2E           ADD     A,R6
   \   00008E   F5..         MOV     ?V0 + 8,A
    547          
    548          #ifdef ZLL_TESTAPP
    549              zllTestApp_ProcessAppMsg( srcEP, &dstAddr, clusterID, &hdr, dataLen, pData );
    550          #else
    551              if ( ZCL_CLUSTER_ID_LL( clusterID ) ||
    552                   ZCL_CLUSTER_ID_GEN( clusterID ) ||
    553                   ZCL_CLUSTER_ID_LIGHTING( clusterID ) )
   \   000090   E5..         MOV     A,?V0 + 0
   \   000092   7004         JNZ     ??zllSampleBridge_ProcessAppMsg_0
   \   000094   7410         MOV     A,#0x10
   \   000096   65..         XRL     A,?V0 + 1
   \                     ??zllSampleBridge_ProcessAppMsg_0:
   \   000098   6021         JZ      ??zllSampleBridge_ProcessAppMsg_1
   \   00009A   C3           CLR     C
   \   00009B   E5..         MOV     A,?V0 + 0
   \   00009D   9416         SUBB    A,#0x16
   \   00009F   E5..         MOV     A,?V0 + 1
   \   0000A1   9400         SUBB    A,#0x0
   \   0000A3   4016         JC      ??zllSampleBridge_ProcessAppMsg_1
   \   0000A5   E5..         MOV     A,?V0 + 0
   \   0000A7   2400         ADD     A,#0x0
   \   0000A9   F8           MOV     R0,A
   \   0000AA   E5..         MOV     A,?V0 + 1
   \   0000AC   34FD         ADDC    A,#-0x3
   \   0000AE   F9           MOV     R1,A
   \   0000AF   C3           CLR     C
   \   0000B0   E8           MOV     A,R0
   \   0000B1   9402         SUBB    A,#0x2
   \   0000B3   E9           MOV     A,R1
   \   0000B4   9400         SUBB    A,#0x0
   \   0000B6   4003         JC      $+5
   \   0000B8   02....       LJMP    ??zllSampleBridge_ProcessAppMsg_2 & 0xFFFF
    554              {
    555                // send MT_APP ZCL command as-is
    556          //      zcl_SendCommand( srcEP, &dstAddr, clusterID, hdr.commandID,
    557          //                       (hdr.fc.type == ZCL_FRAME_TYPE_SPECIFIC_CMD),
    558          //                       hdr.fc.direction, hdr.fc.disableDefaultRsp, hdr.manuCode,
    559          //                       hdr.transSeqNum, dataLen, pData );
    560                zcl_SendCommand( srcEP, &dstAddr, clusterID, hdr.commandID,
    561                                 (hdr.fc.type == ZCL_FRAME_TYPE_SPECIFIC_CMD),
    562                                 hdr.fc.direction, hdr.fc.disableDefaultRsp, hdr.manuCode,
    563                                 sampleBridgeSeqNum++, dataLen, pData );
   \                     ??zllSampleBridge_ProcessAppMsg_1:
   \   0000BB   90....       MOV     DPTR,#sampleBridgeSeqNum
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   FA           MOV     R2,A
   \   0000C0   7401         MOV     A,#0x1
   \   0000C2   2A           ADD     A,R2
   \   0000C3   12....       LCALL   ?Subroutine7 & 0xFFFF
    564              }
   \                     ??CrossCallReturnLabel_8:
   \   0000C6   5403         ANL     A,#0x3
   \   0000C8   6401         XRL     A,#0x1
   \   0000CA   7004         JNZ     ??zllSampleBridge_ProcessAppMsg_3
   \   0000CC   7B01         MOV     R3,#0x1
   \   0000CE   8002         SJMP    ??zllSampleBridge_ProcessAppMsg_4
   \                     ??zllSampleBridge_ProcessAppMsg_3:
   \   0000D0   7B00         MOV     R3,#0x0
   \                     ??zllSampleBridge_ProcessAppMsg_4:
   \   0000D2                ; Setup parameters for call to function zcl_SendCommand
   \   0000D2   78..         MOV     R0,#?V0 + 6
   \   0000D4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D7   75..00       MOV     ?V0 + 9,#0x0
   \   0000DA   78..         MOV     R0,#?V0 + 8
   \   0000DC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DF   EA           MOV     A,R2
   \   0000E0   F5..         MOV     ?V0 + 3,A
   \   0000E2   78..         MOV     R0,#?V0 + 3
   \   0000E4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E7   7407         MOV     A,#0x7
   \   0000E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000EC   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000EF   7407         MOV     A,#0x7
   \   0000F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F4   E0           MOVX    A,@DPTR
   \   0000F5   C4           SWAP    A
   \   0000F6   540F         ANL     A,#0xf
   \   0000F8   5401         ANL     A,#0x1
   \   0000FA   F5..         MOV     ?V0 + 3,A
   \   0000FC   78..         MOV     R0,#?V0 + 3
   \   0000FE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000101   7408         MOV     A,#0x8
   \   000103   12....       LCALL   ?XSTACK_DISP0_8
   \   000106   E0           MOVX    A,@DPTR
   \   000107   13           RRC     A
   \   000108   13           RRC     A
   \   000109   13           RRC     A
   \   00010A   541F         ANL     A,#0x1f
   \   00010C   5401         ANL     A,#0x1
   \   00010E   F5..         MOV     ?V0 + 3,A
   \   000110   78..         MOV     R0,#?V0 + 3
   \   000112   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000115   EB           MOV     A,R3
   \   000116   F5..         MOV     ?V0 + 3,A
   \   000118   78..         MOV     R0,#?V0 + 3
   \   00011A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00011D   740F         MOV     A,#0xf
   \   00011F   12....       LCALL   ?XSTACK_DISP0_8
   \   000122   E0           MOVX    A,@DPTR
   \   000123   F5..         MOV     ?V0 + 3,A
   \   000125   78..         MOV     R0,#?V0 + 3
   \   000127   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00012A   AC..         MOV     R4,?V0 + 0
   \   00012C   AD..         MOV     R5,?V0 + 1
   \   00012E   7411         MOV     A,#0x11
   \   000130   12....       LCALL   ?XSTACK_DISP0_8
   \   000133   AA82         MOV     R2,DPL
   \   000135   AB83         MOV     R3,DPH
   \   000137   A9..         MOV     R1,?V0 + 2
   \   000139   12....       LCALL   ??zcl_SendCommand?relay
   \   00013C   740B         MOV     A,#0xb
   \   00013E   12....       LCALL   ?DEALLOC_XSTACK8
    565          #endif //ZLL_TESTAPP
    566          }
   \                     ??zllSampleBridge_ProcessAppMsg_2:
   \   000141   7412         MOV     A,#0x12
   \   000143   12....       LCALL   ?DEALLOC_XSTACK8
   \   000146   7F0A         MOV     R7,#0xa
   \   000148   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FE           MOV     R6,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FF           MOV     R7,A
   \   000008   8E82         MOV     DPL,R6
   \   00000A   8F83         MOV     DPH,R7
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET
    567          #endif // MT_APP_FUNC
    568          
    569          /*********************************************************************
    570           * @fn      zllSampleBridge_HandleKeys
    571           *
    572           * @brief   Handles all key events for this device.
    573           *
    574           * @param   shift - true if in shift/alt.
    575           * @param   keys - bit field for key events.
    576           *
    577           * @return  none
    578           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    579          static void zllSampleBridge_HandleKeys( byte shift, byte keys )
   \                     zllSampleBridge_HandleKeys:
    580          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
    581            if(shift)
   \   000009   EE           MOV     A,R6
   \   00000A   6004         JZ      ??zllSampleBridge_HandleKeys_0
    582            {
    583              keys |= HAL_KEY_SW_6;
   \   00000C   EF           MOV     A,R7
   \   00000D   D2E5         SETB    0xE0 /* A   */.5
   \   00000F   FF           MOV     R7,A
    584            }
    585          
    586            if ( keys == ON_KEY )
   \                     ??zllSampleBridge_HandleKeys_0:
   \   000010   7401         MOV     A,#0x1
   \   000012   6F           XRL     A,R7
   \   000013   702F         JNZ     ??zllSampleBridge_HandleKeys_1
    587            {
    588              zclGeneral_SendOnOff_CmdOn( SAMPLEBRIDGE_ENDPOINT, &zllSampleBridge_DstAddr, FALSE, sampleBridgeSeqNum++ );
   \   000015   12....       LCALL   ?Subroutine13 & 0xFFFF
    589            }
   \                     ??CrossCallReturnLabel_30:
   \   000018   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000020   E9           MOV     A,R1
   \   000021   F5..         MOV     ?V0 + 0,A
   \   000023   78..         MOV     R0,#?V0 + 0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000028   E4           CLR     A
   \   000029   F5..         MOV     ?V0 + 0,A
   \   00002B   78..         MOV     R0,#?V0 + 0
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   78..         MOV     R0,#?V0 + 0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003A   75..01       MOV     ?V0 + 0,#0x1
   \   00003D   78..         MOV     R0,#?V0 + 0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000042   8040         SJMP    ??zllSampleBridge_HandleKeys_2
    590          
    591            if ( keys == FACTORY_RESET_KEY )
   \                     ??zllSampleBridge_HandleKeys_1:
   \   000044   7402         MOV     A,#0x2
   \   000046   6F           XRL     A,R7
   \   000047   7006         JNZ     ??zllSampleBridge_HandleKeys_3
    592            {
    593              zllInitiator_ResetToFactoryNew();
   \   000049                ; Setup parameters for call to function zllInitiator_ResetToFactoryNew
   \   000049   12....       LCALL   ??zllInitiator_ResetToFactoryNew?relay
   \   00004C   02....       LJMP    ??zllSampleBridge_HandleKeys_4 & 0xFFFF
    594            }
    595          
    596            if ( keys == OFF_KEY )
   \                     ??zllSampleBridge_HandleKeys_3:
   \   00004F   7410         MOV     A,#0x10
   \   000051   6F           XRL     A,R7
   \   000052   704A         JNZ     ??zllSampleBridge_HandleKeys_5
    597            {
    598              zclGeneral_SendOnOff_CmdOff( SAMPLEBRIDGE_ENDPOINT, &zllSampleBridge_DstAddr, FALSE, sampleBridgeSeqNum++ );
   \   000054   12....       LCALL   ?Subroutine13 & 0xFFFF
    599            }
   \                     ??CrossCallReturnLabel_31:
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   E9           MOV     A,R1
   \   000060   F5..         MOV     ?V0 + 0,A
   \   000062   78..         MOV     R0,#?V0 + 0
   \   000064   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000067   E4           CLR     A
   \   000068   F5..         MOV     ?V0 + 0,A
   \   00006A   78..         MOV     R0,#?V0 + 0
   \   00006C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006F   78..         MOV     R0,#?V0 + 0
   \   000071   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000074   78..         MOV     R0,#?V0 + 0
   \   000076   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000079   75..01       MOV     ?V0 + 0,#0x1
   \   00007C   78..         MOV     R0,#?V0 + 0
   \   00007E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000081   75..00       MOV     ?V0 + 0,#0x0
   \                     ??zllSampleBridge_HandleKeys_2:
   \   000084   78..         MOV     R0,#?V0 + 0
   \   000086   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000089   7C06         MOV     R4,#0x6
   \   00008B   7D00         MOV     R5,#0x0
   \   00008D   7A..         MOV     R2,#zllSampleBridge_DstAddr & 0xff
   \   00008F   7B..         MOV     R3,#(zllSampleBridge_DstAddr >> 8) & 0xff
   \   000091   790B         MOV     R1,#0xb
   \   000093   12....       LCALL   ??zcl_SendCommand?relay
   \   000096   740B         MOV     A,#0xb
   \   000098   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009B   02....       LJMP    ??zllSampleBridge_HandleKeys_4 & 0xFFFF
    600          
    601            if ( keys == TOUCH_LINK_KEY )
   \                     ??zllSampleBridge_HandleKeys_5:
   \   00009E   7408         MOV     A,#0x8
   \   0000A0   6F           XRL     A,R7
   \   0000A1   7006         JNZ     ??zllSampleBridge_HandleKeys_6
    602            {
    603              zllInitiator_StartDevDisc();
   \   0000A3                ; Setup parameters for call to function zllInitiator_StartDevDisc
   \   0000A3   12....       LCALL   ??zllInitiator_StartDevDisc?relay
   \   0000A6   02....       LJMP    ??zllSampleBridge_HandleKeys_4 & 0xFFFF
    604            }
    605          
    606            if ( keys == DEV_SEL_UP_KEY )
   \                     ??zllSampleBridge_HandleKeys_6:
   \   0000A9   75....       MOV     ?V0 + 0,#`?<Constant "Dev Sel:">` & 0xff
   \   0000AC   75....       MOV     ?V0 + 1,#(`?<Constant "Dev Sel:">` >> 8) & 0xff
   \   0000AF   7422         MOV     A,#0x22
   \   0000B1   6F           XRL     A,R7
   \   0000B2   702E         JNZ     ??zllSampleBridge_HandleKeys_7
    607            {
    608              if ( linkedAddrNum > 0 )
   \   0000B4   90....       MOV     DPTR,#linkedAddrNum
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   7003         JNZ     $+5
   \   0000BA   02....       LJMP    ??zllSampleBridge_HandleKeys_8 & 0xFFFF
    609              {
    610                if( (linkedAddrSelIdx+1) >= linkedAddrNum )
   \   0000BD   90....       MOV     DPTR,#linkedAddrSelIdx
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   2401         ADD     A,#0x1
   \   0000C3   F8           MOV     R0,A
   \   0000C4   E4           CLR     A
   \   0000C5   3400         ADDC    A,#0x0
   \   0000C7   F9           MOV     R1,A
   \   0000C8   90....       MOV     DPTR,#linkedAddrNum
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   FA           MOV     R2,A
   \   0000CD   E8           MOV     A,R0
   \   0000CE   9A           SUBB    A,R2
   \   0000CF   E9           MOV     A,R1
   \   0000D0   9400         SUBB    A,#0x0
   \   0000D2   C3           CLR     C
   \   0000D3   65D0         XRL     A,PSW
   \   0000D5   33           RLC     A
   \   0000D6   90....       MOV     DPTR,#linkedAddrSelIdx
   \   0000D9   4003         JC      ??zllSampleBridge_HandleKeys_9
    611                {
    612                  linkedAddrSelIdx = 0;
   \   0000DB   E4           CLR     A
   \   0000DC   8026         SJMP    ??zllSampleBridge_HandleKeys_10
    613                }
    614                else
    615                {
    616                  linkedAddrSelIdx++;
   \                     ??zllSampleBridge_HandleKeys_9:
   \   0000DE   E0           MOVX    A,@DPTR
   \   0000DF   04           INC     A
   \   0000E0   8022         SJMP    ??zllSampleBridge_HandleKeys_10
    617                }
    618                zllSampleBridge_DstAddr.addrMode = afAddr16Bit;
    619                zllSampleBridge_DstAddr.addr.shortAddr = linkedTargets.arr[linkedAddrSelIdx].Addr;
    620                zllSampleBridge_DstAddr.endPoint =  linkedTargets.arr[linkedAddrSelIdx].EP;
    621          
    622                zclGeneral_SendIdentify( SAMPLEBRIDGE_ENDPOINT, &zllSampleBridge_DstAddr,
    623                                         SAMPLEBRIDGE_CMD_IDENTIFY_TIME, FALSE, sampleBridgeSeqNum++ );
    624          
    625                HalLcdWriteStringValue( "Dev Sel:", zllSampleBridge_DstAddr.addr.shortAddr, 16, HAL_LCD_LINE_3 );
    626              }
    627              else
    628              {
    629                HalLcdWriteString( "Dev Sel: no trgt", HAL_LCD_LINE_3 );
    630              }
    631            }
    632          
    633            if ( keys == DEV_SEL_DN_KEY )
   \                     ??zllSampleBridge_HandleKeys_7:
   \   0000E2   7428         MOV     A,#0x28
   \   0000E4   6F           XRL     A,R7
   \   0000E5   6003         JZ      $+5
   \   0000E7   02....       LJMP    ??zllSampleBridge_HandleKeys_11 & 0xFFFF
    634            {
    635              if ( linkedAddrNum > 0 )
   \   0000EA   90....       MOV     DPTR,#linkedAddrNum
   \   0000ED   E0           MOVX    A,@DPTR
   \   0000EE   7003         JNZ     $+5
   \   0000F0   02....       LJMP    ??zllSampleBridge_HandleKeys_8 & 0xFFFF
    636              {
    637                if(linkedAddrSelIdx < 1)
   \   0000F3   90....       MOV     DPTR,#linkedAddrSelIdx
   \   0000F6   E0           MOVX    A,@DPTR
   \   0000F7   700A         JNZ     ??zllSampleBridge_HandleKeys_12
    638                {
    639                  linkedAddrSelIdx = (linkedAddrNum-1);
   \   0000F9   90....       MOV     DPTR,#linkedAddrNum
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   14           DEC     A
   \   0000FE   90....       MOV     DPTR,#linkedAddrSelIdx
   \   000101   8001         SJMP    ??zllSampleBridge_HandleKeys_10
    640                }
    641                else
    642                {
    643                  linkedAddrSelIdx--;
   \                     ??zllSampleBridge_HandleKeys_12:
   \   000103   14           DEC     A
   \                     ??zllSampleBridge_HandleKeys_10:
   \   000104   F0           MOVX    @DPTR,A
    644                }
    645                zllSampleBridge_DstAddr.addrMode = afAddr16Bit;
   \   000105   90....       MOV     DPTR,#zllSampleBridge_DstAddr + 8
   \   000108   7402         MOV     A,#0x2
   \   00010A   F0           MOVX    @DPTR,A
    646                zllSampleBridge_DstAddr.addr.shortAddr = linkedTargets.arr[linkedAddrSelIdx].Addr;
   \   00010B   90....       MOV     DPTR,#linkedAddrSelIdx
   \   00010E   E0           MOVX    A,@DPTR
   \   00010F   F5..         MOV     ?V0 + 2,A
   \   000111   75..00       MOV     ?V0 + 3,#0x0
   \   000114   7403         MOV     A,#0x3
   \   000116   78..         MOV     R0,#?V0 + 2
   \   000118   12....       LCALL   ?S_SHL
   \   00011B   74..         MOV     A,#linkedTargets & 0xff
   \   00011D   25..         ADD     A,?V0 + 2
   \   00011F   F8           MOV     R0,A
   \   000120   74..         MOV     A,#(linkedTargets >> 8) & 0xff
   \   000122   35..         ADDC    A,?V0 + 3
   \   000124   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   000127   90....       MOV     DPTR,#zllSampleBridge_DstAddr
   \   00012A   EA           MOV     A,R2
   \   00012B   F0           MOVX    @DPTR,A
   \   00012C   A3           INC     DPTR
   \   00012D   EB           MOV     A,R3
   \   00012E   12....       LCALL   ?Subroutine12 & 0xFFFF
    647                zllSampleBridge_DstAddr.endPoint = linkedTargets.arr[linkedAddrSelIdx].EP;
   \                     ??CrossCallReturnLabel_28:
   \   000131   A3           INC     DPTR
   \   000132   A3           INC     DPTR
   \   000133   A3           INC     DPTR
   \   000134   E0           MOVX    A,@DPTR
   \   000135   90....       MOV     DPTR,#zllSampleBridge_DstAddr + 9
   \   000138   F0           MOVX    @DPTR,A
    648          
    649                zclGeneral_SendIdentify( SAMPLEBRIDGE_ENDPOINT, &zllSampleBridge_DstAddr,
    650                                         SAMPLEBRIDGE_CMD_IDENTIFY_TIME, FALSE, sampleBridgeSeqNum++ );
   \   000139   90....       MOV     DPTR,#sampleBridgeSeqNum
   \   00013C   E0           MOVX    A,@DPTR
   \   00013D   F8           MOV     R0,A
   \   00013E   7401         MOV     A,#0x1
   \   000140   28           ADD     A,R0
   \   000141   F0           MOVX    @DPTR,A
   \   000142                ; Setup parameters for call to function zclGeneral_SendIdentify
   \   000142   E8           MOV     A,R0
   \   000143   F5..         MOV     ?V0 + 2,A
   \   000145   78..         MOV     R0,#?V0 + 2
   \   000147   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00014A   75..00       MOV     ?V0 + 2,#0x0
   \   00014D   78..         MOV     R0,#?V0 + 2
   \   00014F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000152   7C01         MOV     R4,#0x1
   \   000154   7D00         MOV     R5,#0x0
   \   000156   7A..         MOV     R2,#zllSampleBridge_DstAddr & 0xff
   \   000158   7B..         MOV     R3,#(zllSampleBridge_DstAddr >> 8) & 0xff
   \   00015A   790B         MOV     R1,#0xb
   \   00015C   12....       LCALL   ??zclGeneral_SendIdentify?relay
   \   00015F   7402         MOV     A,#0x2
   \   000161   12....       LCALL   ?DEALLOC_XSTACK8
    651          
    652                HalLcdWriteStringValue( "Dev Sel:", zllSampleBridge_DstAddr.addr.shortAddr, 16, HAL_LCD_LINE_3 );
   \   000164                ; Setup parameters for call to function HalLcdWriteStringValue
   \   000164   75..03       MOV     ?V0 + 2,#0x3
   \   000167   78..         MOV     R0,#?V0 + 2
   \   000169   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00016C   7910         MOV     R1,#0x10
   \   00016E   90....       MOV     DPTR,#zllSampleBridge_DstAddr
   \   000171   12....       LCALL   ?Subroutine22 & 0xFFFF
    653              }
   \                     ??CrossCallReturnLabel_44:
   \   000174   AA..         MOV     R2,?V0 + 0
   \   000176   AB..         MOV     R3,?V0 + 1
   \   000178   12....       LCALL   ??HalLcdWriteStringValue?relay
   \   00017B   7401         MOV     A,#0x1
   \   00017D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000180   802B         SJMP    ??zllSampleBridge_HandleKeys_4
    654              else
    655              {
    656                HalLcdWriteString( "Dev Sel: no trgt", HAL_LCD_LINE_3 );
   \                     ??zllSampleBridge_HandleKeys_8:
   \   000182                ; Setup parameters for call to function HalLcdWriteString
   \   000182   7903         MOV     R1,#0x3
   \   000184   7A..         MOV     R2,#`?<Constant "Dev Sel: no trgt">` & 0xff
   \   000186   7B..         MOV     R3,#(`?<Constant "Dev Sel: no trgt">` >> 8) & 0xff
   \   000188   8016         SJMP    ??zllSampleBridge_HandleKeys_13
    657              }
    658            }
    659          
    660            if ( keys == PERMIT_JOIN_KEY )
   \                     ??zllSampleBridge_HandleKeys_11:
   \   00018A   7430         MOV     A,#0x30
   \   00018C   6F           XRL     A,R7
   \   00018D   7016         JNZ     ??zllSampleBridge_HandleKeys_14
    661            {
    662              if ( zllInitiator_BridgeStartNetwork() != ZSuccess )
   \   00018F                ; Setup parameters for call to function zllInitiator_BridgeStartNetwork
   \   00018F   12....       LCALL   ??zllInitiator_BridgeStartNetwork?relay
   \   000192   E9           MOV     A,R1
   \   000193   6018         JZ      ??zllSampleBridge_HandleKeys_4
    663              {
    664                zllInitiator_PermitJoin( PERMIT_JOIN_DURATION );
   \   000195                ; Setup parameters for call to function zllInitiator_PermitJoin
   \   000195   793C         MOV     R1,#0x3c
   \   000197   12....       LCALL   ??zllInitiator_PermitJoin?relay
    665                HalLcdWriteString( "PermitJoin", HAL_LCD_LINE_3 );
   \   00019A                ; Setup parameters for call to function HalLcdWriteString
   \   00019A   7903         MOV     R1,#0x3
   \   00019C   7A..         MOV     R2,#`?<Constant "PermitJoin">` & 0xff
   \   00019E   7B..         MOV     R3,#(`?<Constant "PermitJoin">` >> 8) & 0xff
   \                     ??zllSampleBridge_HandleKeys_13:
   \   0001A0   12....       LCALL   ??HalLcdWriteString?relay
   \   0001A3   8008         SJMP    ??zllSampleBridge_HandleKeys_4
    666              }
    667            }
    668          
    669            if ( keys == CLASSIC_COMMISS_KEY )
   \                     ??zllSampleBridge_HandleKeys_14:
   \   0001A5   7421         MOV     A,#0x21
   \   0001A7   6F           XRL     A,R7
   \   0001A8   7003         JNZ     ??zllSampleBridge_HandleKeys_4
    670            {
    671              zllInitiator_ClassicalCommissioningStart();
   \   0001AA                ; Setup parameters for call to function zllInitiator_ClassicalCommissioningStart
   \   0001AA   12....       LCALL   ??zllInitiator_ClassicalCommissioningStart?rela
    672            }
    673          
    674          }
   \                     ??zllSampleBridge_HandleKeys_4:
   \   0001AD   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   90....       MOV     DPTR,#sampleBridgeSeqNum
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   7401         MOV     A,#0x1
   \   000007   29           ADD     A,R1
   \   000008   F0           MOVX    @DPTR,A
   \   000009                ; Setup parameters for call to function zcl_SendCommand
   \   000009                ; Setup parameters for call to function zcl_SendCommand
   \   000009   E4           CLR     A
   \   00000A   F5..         MOV     ?V0 + 0,A
   \   00000C   F5..         MOV     ?V0 + 1,A
   \   00000E   78..         MOV     R0,#?V0 + 0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   F9           MOV     R1,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005                REQUIRE ??Subroutine33_0
   \   000005                ; // Fall through to label ??Subroutine33_0
    675          
    676          /*********************************************************************
    677           * @fn      zllSampleBridge_ProcessIdentifyTimeChange
    678           *
    679           * @brief   Called to process any change to the IdentifyTime attribute.
    680           *
    681           * @param   none
    682           *
    683           * @return  none
    684           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    685          static void zllSampleBridge_ProcessIdentifyTimeChange( void )
   \                     zllSampleBridge_ProcessIdentifyTimeChange:
    686          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    687            if ( zllSampleBridge_IdentifyTime > 0 )
   \   000004   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   000007   6026         JZ      ??zllSampleBridge_ProcessIdentifyTimeChange_0
    688            {
    689              osal_start_timerEx( zllSampleBridge_TaskID, SAMPLEBRIDGE_IDENTIFY_TIMEOUT_EVT, 1000 );
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009   90....       MOV     DPTR,#__Constant_3e8
   \   00000C   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00000F   7A01         MOV     R2,#0x1
   \   000011   7B00         MOV     R3,#0x0
   \   000013   90....       MOV     DPTR,#zllSampleBridge_TaskID
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F9           MOV     R1,A
   \   000018   12....       LCALL   ??osal_start_timerEx?relay
   \   00001B   7404         MOV     A,#0x4
   \   00001D   12....       LCALL   ?DEALLOC_XSTACK8
    690          #if ( HAL_LED == TRUE )
    691              HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
   \   000020                ; Setup parameters for call to function HalLedBlink
   \   000020   7CE8         MOV     R4,#-0x18
   \   000022   7D03         MOV     R5,#0x3
   \   000024   7B05         MOV     R3,#0x5
   \   000026   7AFF         MOV     R2,#-0x1
   \   000028   7908         MOV     R1,#0x8
   \   00002A   12....       LCALL   ??HalLedBlink?relay
   \   00002D   8013         SJMP    ??zllSampleBridge_ProcessIdentifyTimeChange_1
    692          #endif
    693            }
    694            else
    695            {
    696          #if ( HAL_LED == TRUE )
    697              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \                     ??zllSampleBridge_ProcessIdentifyTimeChange_0:
   \   00002F                ; Setup parameters for call to function HalLedSet
   \   00002F   7A00         MOV     R2,#0x0
   \   000031   7908         MOV     R1,#0x8
   \   000033   12....       LCALL   ??HalLedSet?relay
    698          #endif
    699              osal_stop_timerEx( zllSampleBridge_TaskID, SAMPLEBRIDGE_IDENTIFY_TIMEOUT_EVT );
   \   000036                ; Setup parameters for call to function osal_stop_timerEx
   \   000036   7A01         MOV     R2,#0x1
   \   000038   7B00         MOV     R3,#0x0
   \   00003A   90....       MOV     DPTR,#zllSampleBridge_TaskID
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F9           MOV     R1,A
   \   00003F   12....       LCALL   ??osal_stop_timerEx?relay
    700            }
    701          }
   \                     ??zllSampleBridge_ProcessIdentifyTimeChange_1:
   \   000042                REQUIRE ?Subroutine3
   \   000042                ; // Fall through to label ?Subroutine3

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    702          
    703          /*********************************************************************
    704           * @fn      zllSampleBridge_BasicResetCB
    705           *
    706           * @brief   Callback from the ZCL General Cluster Library
    707           *          to set all the Basic Cluster attributes to default values.
    708           *
    709           * @param   none
    710           *
    711           * @return  none
    712           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine30_0
   \   000003                ; // Fall through to label ??Subroutine30_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    713          static void zllSampleBridge_BasicResetCB( void )
   \                     zllSampleBridge_BasicResetCB:
    714          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    715            // Reset all attributes to default values
    716            linkedAddrNum = 0;
   \   000005   90....       MOV     DPTR,#linkedAddrNum
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
    717            linkedAddrNextIdx = 0;
   \   00000A   90....       MOV     DPTR,#linkedAddrNextIdx
   \   00000D   F0           MOVX    @DPTR,A
    718            linkedAddrSelIdx = 0;
   \   00000E   90....       MOV     DPTR,#linkedAddrSelIdx
   \   000011   12....       LCALL   ?Subroutine11 & 0xFFFF
    719            osal_memset( &linkedTargets, 0xFF, sizeof(linkedTargets));
   \                     ??CrossCallReturnLabel_27:
   \   000014   12....       LCALL   ??osal_memset?relay
    720            osal_memset( &controlledGroups, 0x00, sizeof(controlledGroups));
   \   000017                ; Setup parameters for call to function osal_memset
   \   000017   7C06         MOV     R4,#0x6
   \   000019   7D00         MOV     R5,#0x0
   \   00001B   7900         MOV     R1,#0x0
   \   00001D   7A..         MOV     R2,#controlledGroups & 0xff
   \   00001F   7B..         MOV     R3,#(controlledGroups >> 8) & 0xff
   \   000021   12....       LCALL   ??osal_memset?relay
    721          #if defined ( NV_RESTORE )
    722            osal_nv_write( ZCD_NV_ZLL_BRIDGE_LINK_TARGETS, 0, sizeof( linkedTargets ), &linkedTargets );
   \   000024                ; Setup parameters for call to function osal_nv_write
   \   000024   75....       MOV     ?V0 + 0,#linkedTargets & 0xff
   \   000027   75....       MOV     ?V0 + 1,#(linkedTargets >> 8) & 0xff
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   75..50       MOV     ?V0 + 0,#0x50
   \   000032   75..00       MOV     ?V0 + 1,#0x0
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   7C00         MOV     R4,#0x0
   \   00003C   7D00         MOV     R5,#0x0
   \   00003E   7A01         MOV     R2,#0x1
   \   000040   7B04         MOV     R3,#0x4
   \   000042   12....       LCALL   ??osal_nv_write?relay
   \   000045   7404         MOV     A,#0x4
   \   000047   12....       LCALL   ?DEALLOC_XSTACK8
    723            osal_nv_write( ZCD_NV_ZLL_BRIDGE_CTRL_GROUPS, 0, sizeof( controlledGroups ), &controlledGroups );
   \   00004A                ; Setup parameters for call to function osal_nv_write
   \   00004A   75....       MOV     ?V0 + 0,#controlledGroups & 0xff
   \   00004D   75....       MOV     ?V0 + 1,#(controlledGroups >> 8) & 0xff
   \   000050   78..         MOV     R0,#?V0 + 0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000055   75..06       MOV     ?V0 + 0,#0x6
   \   000058   75..00       MOV     ?V0 + 1,#0x0
   \   00005B   78..         MOV     R0,#?V0 + 0
   \   00005D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000060   7C00         MOV     R4,#0x0
   \   000062   7D00         MOV     R5,#0x0
   \   000064   7A02         MOV     R2,#0x2
   \   000066   7B04         MOV     R3,#0x4
   \   000068   12....       LCALL   ??osal_nv_write?relay
   \   00006B   7404         MOV     A,#0x4
   \   00006D   02....       LJMP    ?Subroutine0 & 0xFFFF
    724          #endif
    725          }
    726          
    727          /*********************************************************************
    728           * @fn      zllSampleBridge_IdentifyCB
    729           *
    730           * @brief   Callback from the ZCL General Cluster Library when
    731           *          it received an Identity Command for this application.
    732           *
    733           * @param   srcAddr - source address and endpoint of the response message
    734           * @param   identifyTime - the number of seconds to identify yourself
    735           *
    736           * @return  none
    737           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    738          static void zllSampleBridge_IdentifyCB( zclIdentify_t *pCmd )
   \                     zllSampleBridge_IdentifyCB:
    739          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    740            zllSampleBridge_IdentifyTime = pCmd->identifyTime;
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   00000D   90....       MOV     DPTR,#zllSampleBridge_IdentifyTime
   \   000010   12....       LCALL   ?Subroutine10 & 0xFFFF
    741            zllSampleBridge_ProcessIdentifyTimeChange();
   \                     ??CrossCallReturnLabel_18:
   \   000013                ; Setup parameters for call to function zllSampleBridge_ProcessIdentifyTimeChange
   \   000013   12....       LCALL   ??zllSampleBridge_ProcessIdentifyTimeChange?rel
    742          }
   \   000016   02....       LJMP    ?Subroutine3 & 0xFFFF
    743          
    744          /*********************************************************************
    745           * @fn      zllSampleBridge_IdentifyQueryRspCB
    746           *
    747           * @brief   Callback from the ZCL General Cluster Library when
    748           *          it received an Identity Query Response Command for this application.
    749           *
    750           * @param   srcAddr - requestor's address
    751           * @param   timeout - number of seconds to identify yourself (valid for query response)
    752           *
    753           * @return  none
    754           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    755          static void zllSampleBridge_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
   \                     zllSampleBridge_IdentifyQueryRspCB:
    756          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    757            // Query Response (with timeout value)
    758            (void)pRsp;
    759          }
   \   000000   02....       LJMP    ?BRET
    760          
    761          
    762          /******************************************************************************
    763           *
    764           *  Functions for processing ZCL Foundation incoming Command/Response messages
    765           *
    766           *****************************************************************************/
    767          
    768          /*********************************************************************
    769           * @fn      zllSampleBridge_ProcessIncomingMsg
    770           *
    771           * @brief   Process ZCL Foundation incoming message
    772           *
    773           * @param   pInMsg - pointer to the received message
    774           *
    775           * @return  none
    776           */
    777          static void zllSampleBridge_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
    778          {
    779            switch ( pInMsg->zclHdr.commandID )
    780            {
    781          #ifdef ZCL_READ
    782              case ZCL_CMD_READ_RSP:
    783                zllSampleBridge_ProcessInReadRspCmd( pInMsg );
    784                break;
    785          #endif
    786          #ifdef ZCL_WRITE
    787              case ZCL_CMD_WRITE_RSP:
    788                zllSampleBridge_ProcessInWriteRspCmd( pInMsg );
    789                break;
    790          #endif
    791          #ifdef ZCL_REPORT
    792              // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
    793              case ZCL_CMD_CONFIG_REPORT:
    794                //zllSampleBridge_ProcessInConfigReportCmd( pInMsg );
    795                break;
    796          
    797              case ZCL_CMD_CONFIG_REPORT_RSP:
    798                //zllSampleBridge_ProcessInConfigReportRspCmd( pInMsg );
    799                break;
    800          
    801              case ZCL_CMD_READ_REPORT_CFG:
    802                //zllSampleBridge_ProcessInReadReportCfgCmd( pInMsg );
    803                break;
    804          
    805              case ZCL_CMD_READ_REPORT_CFG_RSP:
    806                //zllSampleBridge_ProcessInReadReportCfgRspCmd( pInMsg );
    807                break;
    808          
    809              case ZCL_CMD_REPORT:
    810                //zllSampleBridge_ProcessInReportCmd( pInMsg );
    811                break;
    812          #endif
    813              case ZCL_CMD_DEFAULT_RSP:
    814                zllSampleBridge_ProcessInDefaultRspCmd( pInMsg );
    815                break;
    816          #ifdef ZCL_DISCOVER
    817              case ZCL_CMD_DISCOVER_ATTRS_RSP:
    818                zllSampleBridge_ProcessInDiscRspCmd( pInMsg );
    819                break;
    820          #endif
    821              default:
    822                break;
    823            }
    824          
    825            if ( pInMsg->attrCmd )
    826              osal_mem_free( pInMsg->attrCmd );
    827          }
    828          
    829          #ifdef ZCL_READ
    830          /*********************************************************************
    831           * @fn      zllSampleBridge_ProcessInReadRspCmd
    832           *
    833           * @brief   Process the ZCL Read Attributes Response Command
    834           *
    835           * @param   pInMsg - incoming message to process
    836           *
    837           * @return  status
    838           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    839          static ZStatus_t zllSampleBridge_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
   \                     zllSampleBridge_ProcessInReadRspCmd:
    840          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    841            // Notify the originator of the results of the original read attributes
    842            // attempt and, for each successfull request, the value of the requested
    843            // attribute
    844          
    845          #if defined ( MT_APP_FUNC )
    846            uint8 i, *msg, *pBuf, dataLength;
    847            uint8 len = 0;
   \   000009   75..00       MOV     ?V0 + 3,#0x0
    848            zclReadRspCmd_t *pReadRsp = (zclReadRspCmd_t *)(pInMsg->attrCmd);
   \   00000C   EA           MOV     A,R2
   \   00000D   2417         ADD     A,#0x17
   \   00000F   F582         MOV     DPL,A
   \   000011   EB           MOV     A,R3
   \   000012   3400         ADDC    A,#0x0
   \   000014   F583         MOV     DPH,A
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 10,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 11,A
    849          
    850            for (i = 0; i < pReadRsp->numAttr; i++)
   \   00001D   75..00       MOV     ?V0 + 2,#0x0
   \   000020   803F         SJMP    ??zllSampleBridge_ProcessInReadRspCmd_0
    851            {
    852              if ( pReadRsp->attrList[i].status == ZSuccess )
   \                     ??zllSampleBridge_ProcessInReadRspCmd_1:
   \   000022   E5..         MOV     A,?V0 + 2
   \   000024   75F006       MOV     B,#0x6
   \   000027   A4           MUL     AB
   \   000028   F8           MOV     R0,A
   \   000029   A9F0         MOV     R1,B
   \   00002B   E5..         MOV     A,?V0 + 10
   \   00002D   28           ADD     A,R0
   \   00002E   F8           MOV     R0,A
   \   00002F   E5..         MOV     A,?V0 + 11
   \   000031   39           ADDC    A,R1
   \   000032   F9           MOV     R1,A
   \   000033   8882         MOV     DPL,R0
   \   000035   8983         MOV     DPH,R1
   \   000037   A3           INC     DPTR
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   701B         JNZ     ??zllSampleBridge_ProcessInReadRspCmd_2
    853              {
    854                dataLength = zclGetAttrDataLength( pReadRsp->attrList[i].dataType, pReadRsp->attrList[i].data );
   \   00003D                ; Setup parameters for call to function zclGetAttrDataLength
   \   00003D   8882         MOV     DPL,R0
   \   00003F   8983         MOV     DPH,R1
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   12....       LCALL   ??Subroutine33_0 & 0xFFFF
    855              }
   \                     ??CrossCallReturnLabel_80:
   \   000049   8882         MOV     DPL,R0
   \   00004B   8983         MOV     DPH,R1
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F9           MOV     R1,A
   \   000053   12....       LCALL   ??zclGetAttrDataLength?relay
   \   000056   EA           MOV     A,R2
   \   000057   FB           MOV     R3,A
    856          
    857              // prepend srcAddr, endpoint, cluster ID, and data length
    858              len += sizeof ( uint16 )     // attribute ID
    859                  + sizeof ( uint8 )      // attribute read status
    860                  + sizeof ( uint8 )      // attribute data type
    861                  + dataLength;
   \                     ??zllSampleBridge_ProcessInReadRspCmd_2:
   \   000058   7404         MOV     A,#0x4
   \   00005A   2B           ADD     A,R3
   \   00005B   25..         ADD     A,?V0 + 3
   \   00005D   F5..         MOV     ?V0 + 3,A
    862            }
   \   00005F   05..         INC     ?V0 + 2
   \                     ??zllSampleBridge_ProcessInReadRspCmd_0:
   \   000061   85..82       MOV     DPL,?V0 + 10
   \   000064   85..83       MOV     DPH,?V0 + 11
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F8           MOV     R0,A
   \   000069   E5..         MOV     A,?V0 + 2
   \   00006B   C3           CLR     C
   \   00006C   98           SUBB    A,R0
   \   00006D   40B3         JC      ??zllSampleBridge_ProcessInReadRspCmd_1
    863          
    864            msg = osal_mem_alloc( len );
   \   00006F                ; Setup parameters for call to function osal_mem_alloc
   \   00006F   85....       MOV     ?V0 + 2,?V0 + 3
   \   000072   85....       MOV     ?V0 + 4,?V0 + 2
   \   000075   AA..         MOV     R2,?V0 + 4
   \   000077   7B00         MOV     R3,#0x0
   \   000079   12....       LCALL   ??osal_mem_alloc?relay
   \   00007C   8A..         MOV     ?V0 + 8,R2
   \   00007E   8B..         MOV     ?V0 + 9,R3
    865            if ( msg != NULL )
   \   000080   EA           MOV     A,R2
   \   000081   45..         ORL     A,?V0 + 9
   \   000083   7003         JNZ     $+5
   \   000085   02....       LJMP    ??zllSampleBridge_ProcessInReadRspCmd_3 & 0xFFFF
    866            {
    867              pBuf = msg;
   \   000088   AE..         MOV     R6,?V0 + 8
   \   00008A   AF..         MOV     R7,?V0 + 9
    868          
    869              for (i = 0; i < pReadRsp->numAttr; i++)
   \   00008C   75..00       MOV     ?V0 + 2,#0x0
   \   00008F   02....       LJMP    ??zllSampleBridge_ProcessInReadRspCmd_4 & 0xFFFF
    870              {
    871                // Attribute information
    872                *pBuf++ = LO_UINT16( pReadRsp->attrList[i].attrID );
   \                     ??zllSampleBridge_ProcessInReadRspCmd_5:
   \   000092   E5..         MOV     A,?V0 + 2
   \   000094   75F006       MOV     B,#0x6
   \   000097   A4           MUL     AB
   \   000098   F8           MOV     R0,A
   \   000099   A9F0         MOV     R1,B
   \   00009B   E5..         MOV     A,?V0 + 10
   \   00009D   28           ADD     A,R0
   \   00009E   FA           MOV     R2,A
   \   00009F   E5..         MOV     A,?V0 + 11
   \   0000A1   39           ADDC    A,R1
   \   0000A2   FB           MOV     R3,A
   \   0000A3   8A82         MOV     DPL,R2
   \   0000A5   8B83         MOV     DPH,R3
   \   0000A7   A3           INC     DPTR
   \   0000A8   A882         MOV     R0,DPL
   \   0000AA   A983         MOV     R1,DPH
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   8E82         MOV     DPL,R6
   \   0000AF   8F83         MOV     DPH,R7
   \   0000B1   F0           MOVX    @DPTR,A
   \   0000B2   A3           INC     DPTR
   \   0000B3   AE82         MOV     R6,DPL
   \   0000B5   AF83         MOV     R7,DPH
    873                *pBuf++ = HI_UINT16( pReadRsp->attrList[i].attrID );
   \   0000B7   8882         MOV     DPL,R0
   \   0000B9   8983         MOV     DPH,R1
   \   0000BB   A3           INC     DPTR
   \   0000BC   12....       LCALL   ?Subroutine24 & 0xFFFF
    874                *pBuf++ = pReadRsp->attrList[i].status;
   \                     ??CrossCallReturnLabel_51:
   \   0000BF   2403         ADD     A,#0x3
   \   0000C1   F8           MOV     R0,A
   \   0000C2   EB           MOV     A,R3
   \   0000C3   3400         ADDC    A,#0x0
   \   0000C5   F9           MOV     R1,A
   \   0000C6   88..         MOV     ?V0 + 4,R0
   \   0000C8   89..         MOV     ?V0 + 5,R1
   \   0000CA   8882         MOV     DPL,R0
   \   0000CC   F583         MOV     DPH,A
   \   0000CE   12....       LCALL   ?Subroutine24 & 0xFFFF
    875                *pBuf++ = pReadRsp->attrList[i].dataType;
   \                     ??CrossCallReturnLabel_52:
   \   0000D1   2404         ADD     A,#0x4
   \   0000D3   08           INC     R0
   \   0000D4   EB           MOV     A,R3
   \   0000D5   3400         ADDC    A,#0x0
   \   0000D7   F9           MOV     R1,A
   \   0000D8   E8           MOV     A,R0
   \   0000D9   FC           MOV     R4,A
   \   0000DA   E9           MOV     A,R1
   \   0000DB   FD           MOV     R5,A
   \   0000DC   8C82         MOV     DPL,R4
   \   0000DE   8D83         MOV     DPH,R5
   \   0000E0   12....       LCALL   ?Subroutine29 & 0xFFFF
    876          
    877                if ( pReadRsp->attrList[i].status == ZSuccess )
   \                     ??CrossCallReturnLabel_61:
   \   0000E3   85..82       MOV     DPL,?V0 + 4
   \   0000E6   85..83       MOV     DPH,?V0 + 5
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   7047         JNZ     ??zllSampleBridge_ProcessInReadRspCmd_6
    878                {
    879                  dataLength = zclGetAttrDataLength( pReadRsp->attrList[i].dataType, pReadRsp->attrList[i].data );
    880                  pBuf = osal_memcpy( pBuf, pReadRsp->attrList[i].data, dataLength );
   \   0000EC   EA           MOV     A,R2
   \   0000ED   2405         ADD     A,#0x5
   \   0000EF   08           INC     R0
   \   0000F0   EB           MOV     A,R3
   \   0000F1   3400         ADDC    A,#0x0
   \   0000F3   F9           MOV     R1,A
   \   0000F4   E8           MOV     A,R0
   \   0000F5   FA           MOV     R2,A
   \   0000F6   E9           MOV     A,R1
   \   0000F7   FB           MOV     R3,A
   \   0000F8                ; Setup parameters for call to function osal_memcpy
   \   0000F8   8A82         MOV     DPL,R2
   \   0000FA   8B83         MOV     DPH,R3
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   F5..         MOV     ?V0 + 4,A
   \   0000FF   A3           INC     DPTR
   \   000100   E0           MOVX    A,@DPTR
   \   000101   F5..         MOV     ?V0 + 5,A
   \   000103   75..00       MOV     ?V0 + 6,#0x0
   \   000106   78..         MOV     R0,#?V0 + 4
   \   000108   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00010B                ; Setup parameters for call to function zclGetAttrDataLength
   \   00010B   8A82         MOV     DPL,R2
   \   00010D   8B83         MOV     DPH,R3
   \   00010F   12....       LCALL   ??Subroutine33_0 & 0xFFFF
    881                }
    882              }
   \                     ??CrossCallReturnLabel_81:
   \   000112   8C82         MOV     DPL,R4
   \   000114   8D83         MOV     DPH,R5
   \   000116   E0           MOVX    A,@DPTR
   \   000117   F9           MOV     R1,A
   \   000118   12....       LCALL   ??zclGetAttrDataLength?relay
   \   00011B   EA           MOV     A,R2
   \   00011C   FC           MOV     R4,A
   \   00011D   7D00         MOV     R5,#0x0
   \   00011F   EE           MOV     A,R6
   \   000120   FA           MOV     R2,A
   \   000121   EF           MOV     A,R7
   \   000122   FB           MOV     R3,A
   \   000123   12....       LCALL   ??osal_memcpy?relay
   \   000126   7403         MOV     A,#0x3
   \   000128   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012B   8A..         MOV     ?V0 + 4,R2
   \   00012D   8B..         MOV     ?V0 + 5,R3
   \   00012F   AE..         MOV     R6,?V0 + 4
   \   000131   AF..         MOV     R7,?V0 + 5
   \                     ??zllSampleBridge_ProcessInReadRspCmd_6:
   \   000133   05..         INC     ?V0 + 2
   \                     ??zllSampleBridge_ProcessInReadRspCmd_4:
   \   000135   85..82       MOV     DPL,?V0 + 10
   \   000138   85..83       MOV     DPH,?V0 + 11
   \   00013B   E0           MOVX    A,@DPTR
   \   00013C   F8           MOV     R0,A
   \   00013D   E5..         MOV     A,?V0 + 2
   \   00013F   C3           CLR     C
   \   000140   98           SUBB    A,R0
   \   000141   5003         JNC     $+5
   \   000143   02....       LJMP    ??zllSampleBridge_ProcessInReadRspCmd_5 & 0xFFFF
    883          
    884              MT_ZllSendZCLCmd( SAMPLEBRIDGE_ENDPOINT, pInMsg->srcAddr.addr.shortAddr,
    885                                pInMsg->srcAddr.endPoint, pInMsg->clusterId, &pInMsg->zclHdr, len, msg );
   \   000146                ; Setup parameters for call to function MT_ZllSendZCLCmd
   \   000146   78..         MOV     R0,#?V0 + 8
   \   000148   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014B   E5..         MOV     A,?V0 + 0
   \   00014D   2402         ADD     A,#0x2
   \   00014F   F5..         MOV     ?V0 + 4,A
   \   000151   E5..         MOV     A,?V0 + 1
   \   000153   3400         ADDC    A,#0x0
   \   000155   F5..         MOV     ?V0 + 5,A
   \   000157   78..         MOV     R0,#?V0 + 4
   \   000159   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00015C   85..82       MOV     DPL,?V0 + 0
   \   00015F   85..83       MOV     DPH,?V0 + 1
   \   000162   A3           INC     DPTR
   \   000163   A3           INC     DPTR
   \   000164   A3           INC     DPTR
   \   000165   A3           INC     DPTR
   \   000166   A3           INC     DPTR
   \   000167   A3           INC     DPTR
   \   000168   A3           INC     DPTR
   \   000169   A3           INC     DPTR
   \   00016A   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00016D   AD..         MOV     R5,?V0 + 3
   \   00016F   E5..         MOV     A,?V0 + 0
   \   000171   2413         ADD     A,#0x13
   \   000173   F582         MOV     DPL,A
   \   000175   E5..         MOV     A,?V0 + 1
   \   000177   3400         ADDC    A,#0x0
   \   000179   F583         MOV     DPH,A
   \   00017B   E0           MOVX    A,@DPTR
   \   00017C   FC           MOV     R4,A
   \   00017D   85..82       MOV     DPL,?V0 + 0
   \   000180   85..83       MOV     DPH,?V0 + 1
   \   000183   A3           INC     DPTR
   \   000184   A3           INC     DPTR
   \   000185   A3           INC     DPTR
   \   000186   A3           INC     DPTR
   \   000187   A3           INC     DPTR
   \   000188   A3           INC     DPTR
   \   000189   A3           INC     DPTR
   \   00018A   A3           INC     DPTR
   \   00018B   A3           INC     DPTR
   \   00018C   A3           INC     DPTR
   \   00018D   12....       LCALL   ??Subroutine33_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_82:
   \   000190   790B         MOV     R1,#0xb
   \   000192   12....       LCALL   ??MT_ZllSendZCLCmd?relay
   \   000195   7406         MOV     A,#0x6
   \   000197   12....       LCALL   ?DEALLOC_XSTACK8
    886          
    887              osal_mem_free( msg );
   \   00019A                ; Setup parameters for call to function osal_mem_free
   \   00019A   AA..         MOV     R2,?V0 + 8
   \   00019C   AB..         MOV     R3,?V0 + 9
   \   00019E   12....       LCALL   ??osal_mem_free?relay
    888          
    889              return ( ZSuccess );
   \   0001A1   7900         MOV     R1,#0x0
   \   0001A3   8002         SJMP    ??zllSampleBridge_ProcessInReadRspCmd_7
    890            }
    891          #endif //MT_APP_FUNC
    892          
    893            return ( ZFailure );
   \                     ??zllSampleBridge_ProcessInReadRspCmd_3:
   \   0001A5   7901         MOV     R1,#0x1
   \                     ??zllSampleBridge_ProcessInReadRspCmd_7:
   \   0001A7   7F0C         MOV     R7,#0xc
   \   0001A9   02....       LJMP    ?BANKED_LEAVE_XDATA
    894          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   12....       LCALL   ?Subroutine29 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   000003   EA           MOV     A,R2
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   0E           INC     R6
   \   000008   AF83         MOV     R7,DPH
   \   00000A   22           RET
    895          #endif // ZCL_READ
    896          
    897          #ifdef ZCL_WRITE
    898          /*********************************************************************
    899           * @fn      zllSampleBridge_ProcessInWriteRspCmd
    900           *
    901           * @brief   Process the ZCL Write Response Command
    902           *
    903           * @param   pInMsg - incoming message to process
    904           *
    905           * @return  none
    906           */
    907          static uint8 zllSampleBridge_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
    908          {
    909            zclWriteRspCmd_t *writeRspCmd;
    910            uint8 i;
    911          
    912            writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
    913            for (i = 0; i < writeRspCmd->numAttr; i++)
    914            {
    915              // Notify the device of the results of the its original write attributes
    916              // command.
    917            }
    918          
    919            return TRUE;
    920          }
    921          #endif // ZCL_WRITE
    922          
    923          /*********************************************************************
    924           * @fn      zllSampleBridge_ProcessInDefaultRspCmd
    925           *
    926           * @brief   Process the ZCL Default Response Command
    927           *
    928           * @param   pInMsg - incoming message to process
    929           *
    930           * @return  none
    931           */
    932          static uint8 zllSampleBridge_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
    933          {
    934            // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
    935          
    936            // Device is notified of the Default Response command.
    937            (void)pInMsg;
    938          
    939            return TRUE;
    940          }
    941          
    942          #ifdef ZCL_DISCOVER
    943          /*********************************************************************
    944           * @fn      zllSampleBridge_ProcessInDiscRspCmd
    945           *
    946           * @brief   Process the ZCL Discover Response Command
    947           *
    948           * @param   pInMsg - incoming message to process
    949           *
    950           * @return  none
    951           */
    952          static uint8 zllSampleBridge_ProcessInDiscRspCmd( zclIncomingMsg_t *pInMsg )
    953          {
    954            zclDiscoverAttrsRspCmd_t *discoverRspCmd;
    955            uint8 i;
    956          
    957            discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
    958            for ( i = 0; i < discoverRspCmd->numAttr; i++ )
    959            {
    960              // Device is notified of the result of its attribute discovery command.
    961            }
    962          
    963            return TRUE;
    964          }
    965          #endif // ZCL_DISCOVER
    966          
    967          
    968          /*********************************************************************
    969           * @fn      zllSampleBridge_GetGrpIDsReqCB
    970           *
    971           * @brief   This callback is called to process a Get Group Identifiers
    972           *          Request command.
    973           *
    974           * @param   srcAddr - sender's address
    975           * @param   pReq - parsed command
    976           * @param   seqNum - transaction sequence number
    977           *
    978           * @return  ZStatus_t
    979           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine32_0
   \   000002                ; // Fall through to label ??Subroutine32_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    980          static ZStatus_t zllSampleBridge_GetGrpIDsReqCB( afAddrType_t *srcAddr, zclLLGetGrpIDsReq_t *pReq, uint8 seqNum )
   \                     zllSampleBridge_GetGrpIDsReqCB:
    981          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   EC           MOV     A,R4
   \   00000F   FA           MOV     R2,A
   \   000010   ED           MOV     A,R5
   \   000011   FB           MOV     R3,A
   \   000012   89..         MOV     ?V0 + 2,R1
    982            zclLLGetGrpIDsRsp_t Rsp = {0};
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   AC82         MOV     R4,DPL
   \   00001C   AD83         MOV     R5,DPH
   \   00001E   7583..       MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
   \   000021   7582..       MOV     DPL,#`?<Constant {0}>` & 0xff
   \   000024   7405         MOV     A,#0x5
   \   000026   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    983            grpInfoRec_t *pGrpIDInfoRec = NULL;
   \   000029   F5..         MOV     ?V0 + 0,A
   \   00002B   F5..         MOV     ?V0 + 1,A
    984            uint8 i;
    985          
    986            for (i = 0; i < MAX_LINKED_GROUPS; i++)
   \   00002D   7C03         MOV     R4,#0x3
    987            {
    988              if ( controlledGroups.arr[Rsp.total] != 0 )
   \                     ??zllSampleBridge_GetGrpIDsReqCB_0:
   \   00002F   85..82       MOV     DPL,?XSP + 0
   \   000032   85..83       MOV     DPH,?XSP + 1
   \   000035   E0           MOVX    A,@DPTR
   \   000036   C3           CLR     C
   \   000037   33           RLC     A
   \   000038   F8           MOV     R0,A
   \   000039   E4           CLR     A
   \   00003A   33           RLC     A
   \   00003B   F9           MOV     R1,A
   \   00003C   74..         MOV     A,#controlledGroups & 0xff
   \   00003E   28           ADD     A,R0
   \   00003F   F582         MOV     DPL,A
   \   000041   74..         MOV     A,#(controlledGroups >> 8) & 0xff
   \   000043   39           ADDC    A,R1
   \   000044   F583         MOV     DPH,A
   \   000046   12....       LCALL   ??Subroutine31_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000049   6009         JZ      ??zllSampleBridge_GetGrpIDsReqCB_1
    989              {
    990                Rsp.total++;
   \   00004B   85..82       MOV     DPL,?XSP + 0
   \   00004E   85..83       MOV     DPH,?XSP + 1
   \   000051   E0           MOVX    A,@DPTR
   \   000052   04           INC     A
   \   000053   F0           MOVX    @DPTR,A
    991              }
    992            }
   \                     ??zllSampleBridge_GetGrpIDsReqCB_1:
   \   000054   1C           DEC     R4
   \   000055   EC           MOV     A,R4
   \   000056   70D7         JNZ     ??zllSampleBridge_GetGrpIDsReqCB_0
    993          
    994            Rsp.startIndex = pReq->startIndex;
   \   000058   8A82         MOV     DPL,R2
   \   00005A   8B83         MOV     DPH,R3
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   F9           MOV     R1,A
   \   00005E   7401         MOV     A,#0x1
   \   000060   12....       LCALL   ?XSTACK_DISP0_8
   \   000063   E9           MOV     A,R1
   \   000064   12....       LCALL   ?Subroutine7 & 0xFFFF
    995            if ( Rsp.total <= Rsp.startIndex )
   \                     ??CrossCallReturnLabel_6:
   \   000067   F8           MOV     R0,A
   \   000068   E9           MOV     A,R1
   \   000069   C3           CLR     C
   \   00006A   98           SUBB    A,R0
   \   00006B   4003         JC      $+5
   \   00006D   02....       LJMP    ??zllSampleBridge_GetGrpIDsReqCB_2 & 0xFFFF
    996            {
    997              Rsp.cnt = 0;
    998            }
    999            else
   1000            {
   1001              Rsp.cnt = Rsp.total - Rsp.startIndex;
   \   000070   E0           MOVX    A,@DPTR
   \   000071   C3           CLR     C
   \   000072   99           SUBB    A,R1
   \   000073   C0E0         PUSH    A
   \   000075   7402         MOV     A,#0x2
   \   000077   12....       LCALL   ?XSTACK_DISP0_8
   \   00007A   D0E0         POP     A
   \   00007C   F0           MOVX    @DPTR,A
   1002              pGrpIDInfoRec = osal_mem_alloc( Rsp.cnt * sizeof(grpInfoRec_t) );
   \   00007D                ; Setup parameters for call to function osal_mem_alloc
   \   00007D   75F003       MOV     B,#0x3
   \   000080   A4           MUL     AB
   \   000081   FA           MOV     R2,A
   \   000082   ABF0         MOV     R3,B
   \   000084   12....       LCALL   ??osal_mem_alloc?relay
   \   000087   8A..         MOV     ?V0 + 0,R2
   \   000089   8B..         MOV     ?V0 + 1,R3
   1003              if ( pGrpIDInfoRec != NULL )
   \   00008B   EA           MOV     A,R2
   \   00008C   45..         ORL     A,?V0 + 1
   \   00008E   606F         JZ      ??zllSampleBridge_GetGrpIDsReqCB_2
   1004              {
   1005                Rsp.grpInfoRec = pGrpIDInfoRec;
   \   000090   7403         MOV     A,#0x3
   \   000092   12....       LCALL   ?XSTACK_DISP0_8
   \   000095   EA           MOV     A,R2
   \   000096   F0           MOVX    @DPTR,A
   \   000097   A3           INC     DPTR
   \   000098   EB           MOV     A,R3
   \   000099   F0           MOVX    @DPTR,A
   1006                for ( i = Rsp.startIndex; i < (Rsp.cnt + Rsp.startIndex); i++ )
   \   00009A   7401         MOV     A,#0x1
   \   00009C   12....       LCALL   ?XSTACK_DISP0_8
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   F5..         MOV     ?V0 + 3,A
   \                     ??zllSampleBridge_GetGrpIDsReqCB_3:
   \   0000A2   85..82       MOV     DPL,?V0 + 3
   \   0000A5   A882         MOV     R0,DPL
   \   0000A7   7402         MOV     A,#0x2
   \   0000A9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AC   E0           MOVX    A,@DPTR
   \   0000AD   FA           MOV     R2,A
   \   0000AE   7401         MOV     A,#0x1
   \   0000B0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B3   E0           MOVX    A,@DPTR
   \   0000B4   FC           MOV     R4,A
   \   0000B5   EA           MOV     A,R2
   \   0000B6   2C           ADD     A,R4
   \   0000B7   FA           MOV     R2,A
   \   0000B8   E4           CLR     A
   \   0000B9   3400         ADDC    A,#0x0
   \   0000BB   FB           MOV     R3,A
   \   0000BC   E8           MOV     A,R0
   \   0000BD   9A           SUBB    A,R2
   \   0000BE   E4           CLR     A
   \   0000BF   9B           SUBB    A,R3
   \   0000C0   C3           CLR     C
   \   0000C1   65D0         XRL     A,PSW
   \   0000C3   33           RLC     A
   \   0000C4   5040         JNC     ??zllSampleBridge_GetGrpIDsReqCB_4
   1007                {
   1008                  Rsp.grpInfoRec[i].grpID = controlledGroups.arr[i];
   \   0000C6   E8           MOV     A,R0
   \   0000C7   75F003       MOV     B,#0x3
   \   0000CA   A4           MUL     AB
   \   0000CB   FA           MOV     R2,A
   \   0000CC   ABF0         MOV     R3,B
   \   0000CE   7403         MOV     A,#0x3
   \   0000D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   2A           ADD     A,R2
   \   0000D5   FA           MOV     R2,A
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   3B           ADDC    A,R3
   \   0000D9   FB           MOV     R3,A
   \   0000DA   E8           MOV     A,R0
   \   0000DB   C3           CLR     C
   \   0000DC   33           RLC     A
   \   0000DD   F8           MOV     R0,A
   \   0000DE   E4           CLR     A
   \   0000DF   33           RLC     A
   \   0000E0   F9           MOV     R1,A
   \   0000E1   74..         MOV     A,#controlledGroups & 0xff
   \   0000E3   28           ADD     A,R0
   \   0000E4   F582         MOV     DPL,A
   \   0000E6   74..         MOV     A,#(controlledGroups >> 8) & 0xff
   \   0000E8   39           ADDC    A,R1
   \   0000E9   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0000EC   8A82         MOV     DPL,R2
   \   0000EE   8B83         MOV     DPH,R3
   \   0000F0   12....       LCALL   ?Subroutine10 & 0xFFFF
   1009                  Rsp.grpInfoRec[i].grpType = 0; //unsupported in current spec
   \                     ??CrossCallReturnLabel_19:
   \   0000F3   8A82         MOV     DPL,R2
   \   0000F5   8B83         MOV     DPH,R3
   \   0000F7   A3           INC     DPTR
   \   0000F8   A3           INC     DPTR
   \   0000F9   E4           CLR     A
   \   0000FA   F0           MOVX    @DPTR,A
   1010                }
   \   0000FB   05..         INC     ?V0 + 3
   \   0000FD   80A3         SJMP    ??zllSampleBridge_GetGrpIDsReqCB_3
   1011              }
   1012              else
   1013              {
   1014                Rsp.cnt = 0;
   \                     ??zllSampleBridge_GetGrpIDsReqCB_2:
   \   0000FF   7402         MOV     A,#0x2
   \   000101   12....       LCALL   ?XSTACK_DISP0_8
   \   000104   E4           CLR     A
   \   000105   F0           MOVX    @DPTR,A
   1015              }
   1016            }
   1017          
   1018            zclLL_Send_GetGrpIDsRsp( SAMPLEBRIDGE_ENDPOINT, srcAddr, &Rsp, TRUE ,seqNum );
   \                     ??zllSampleBridge_GetGrpIDsReqCB_4:
   \   000106                ; Setup parameters for call to function zclLL_Send_GetGrpIDsRsp
   \   000106   E5..         MOV     A,?V0 + 2
   \   000108   F5..         MOV     ?V0 + 3,A
   \   00010A   78..         MOV     R0,#?V0 + 3
   \   00010C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00010F   75..01       MOV     ?V0 + 3,#0x1
   \   000112   78..         MOV     R0,#?V0 + 3
   \   000114   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000117   7402         MOV     A,#0x2
   \   000119   12....       LCALL   ?XSTACK_DISP0_8
   \   00011C   AC82         MOV     R4,DPL
   \   00011E   AD83         MOV     R5,DPH
   \   000120   EE           MOV     A,R6
   \   000121   FA           MOV     R2,A
   \   000122   EF           MOV     A,R7
   \   000123   FB           MOV     R3,A
   \   000124   790B         MOV     R1,#0xb
   \   000126   12....       LCALL   ??zclLL_Send_GetGrpIDsRsp?relay
   \   000129   7402         MOV     A,#0x2
   \   00012B   12....       LCALL   ?DEALLOC_XSTACK8
   1019          
   1020            if ( pGrpIDInfoRec != NULL )
   \   00012E   E5..         MOV     A,?V0 + 0
   \   000130   45..         ORL     A,?V0 + 1
   \   000132   6007         JZ      ??zllSampleBridge_GetGrpIDsReqCB_5
   1021            {
   1022              osal_mem_free( pGrpIDInfoRec );
   \   000134                ; Setup parameters for call to function osal_mem_free
   \   000134   AA..         MOV     R2,?V0 + 0
   \   000136   AB..         MOV     R3,?V0 + 1
   \   000138   12....       LCALL   ??osal_mem_free?relay
   1023            }
   1024            return ( ZSuccess );
   \                     ??zllSampleBridge_GetGrpIDsReqCB_5:
   \   00013B   7900         MOV     R1,#0x0
   \   00013D   7405         MOV     A,#0x5
   \   00013F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000142   7F06         MOV     R7,#0x6
   \   000144   02....       LJMP    ?BANKED_LEAVE_XDATA
   1025          }
   1026          
   1027          
   1028          /*********************************************************************
   1029           * @fn      zllSampleBridge_GetEPListReqCB
   1030           *
   1031           * @brief   This callback is called to process a Get Endpoint List
   1032           *          Request command.
   1033           *
   1034           * @param   srcAddr - sender's address
   1035           * @param   pReq - parsed command
   1036           * @param   seqNum - transaction sequence number
   1037           *
   1038           * @return  ZStatus_t
   1039           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1040          static ZStatus_t zllSampleBridge_GetEPListReqCB( afAddrType_t *srcAddr, zclLLGetEPListReq_t *pReq, uint8 seqNum )
   \                     zllSampleBridge_GetEPListReqCB:
   1041          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FA           MOV     R2,A
   \   000010   ED           MOV     A,R5
   \   000011   FB           MOV     R3,A
   \   000012   89..         MOV     ?V0 + 1,R1
   1042            zclLLGetEPListRsp_t Rsp = {0};
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   AC82         MOV     R4,DPL
   \   00001C   AD83         MOV     R5,DPH
   \   00001E   7583..       MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
   \   000021   7582..       MOV     DPL,#`?<Constant {0}>_1` & 0xff
   \   000024   7405         MOV     A,#0x5
   \   000026   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1043            epInfoRec_t *pInfoRec = NULL;
   \   000029   FE           MOV     R6,A
   \   00002A   FF           MOV     R7,A
   1044            uint8 InfoRecIdx, LinkedTargetAddrIdx;
   1045            ZStatus_t status;
   1046          
   1047            LinkedTargetAddrIdx = pReq->startIndex;
   \   00002B   8A82         MOV     DPL,R2
   \   00002D   8B83         MOV     DPH,R3
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F8           MOV     R0,A
   \   000031   88..         MOV     ?V0 + 0,R0
   1048            Rsp.total = linkedAddrNum;
   \   000033   90....       MOV     DPTR,#linkedAddrNum
   \   000036   E0           MOVX    A,@DPTR
   \   000037   85..82       MOV     DPL,?XSP + 0
   \   00003A   85..83       MOV     DPH,?XSP + 1
   \   00003D   F0           MOVX    @DPTR,A
   1049            Rsp.startIndex = LinkedTargetAddrIdx;
   \   00003E   7401         MOV     A,#0x1
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   E8           MOV     A,R0
   \   000044   12....       LCALL   ?Subroutine7 & 0xFFFF
   1050            Rsp.cnt = Rsp.total - Rsp.startIndex;
   \                     ??CrossCallReturnLabel_7:
   \   000047   C3           CLR     C
   \   000048   98           SUBB    A,R0
   \   000049   F5..         MOV     ?V0 + 4,A
   \   00004B   7402         MOV     A,#0x2
   \   00004D   12....       LCALL   ?XSTACK_DISP0_8
   \   000050   E5..         MOV     A,?V0 + 4
   \   000052   F0           MOVX    @DPTR,A
   1051            if ( Rsp.cnt > 0 )
   \   000053   7003         JNZ     $+5
   \   000055   02....       LJMP    ??zllSampleBridge_GetEPListReqCB_0 & 0xFFFF
   1052            {
   1053              pInfoRec = osal_mem_alloc( Rsp.cnt * sizeof(epInfoRec_t) );
   \   000058                ; Setup parameters for call to function osal_mem_alloc
   \   000058   8E..         MOV     ?V0 + 5,R6
   \   00005A   7403         MOV     A,#0x3
   \   00005C   78..         MOV     R0,#?V0 + 4
   \   00005E   12....       LCALL   ?S_SHL
   \   000061   AA..         MOV     R2,?V0 + 4
   \   000063   AB..         MOV     R3,?V0 + 5
   \   000065   12....       LCALL   ??osal_mem_alloc?relay
   \   000068   8A..         MOV     ?V0 + 4,R2
   \   00006A   8B..         MOV     ?V0 + 5,R3
   \   00006C   AE..         MOV     R6,?V0 + 4
   \   00006E   AF..         MOV     R7,?V0 + 5
   1054              if ( pInfoRec != NULL )
   \   000070   EE           MOV     A,R6
   \   000071   4F           ORL     A,R7
   \   000072   7003         JNZ     $+5
   \   000074   02....       LJMP    ??zllSampleBridge_GetEPListReqCB_1 & 0xFFFF
   1055              {
   1056                Rsp.epInfoRec = pInfoRec;
   \   000077   7403         MOV     A,#0x3
   \   000079   12....       LCALL   ?XSTACK_DISP0_8
   \   00007C   EE           MOV     A,R6
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   EF           MOV     A,R7
   \   000080   F0           MOVX    @DPTR,A
   1057          
   1058                for(InfoRecIdx = 0; LinkedTargetAddrIdx < linkedAddrNum; InfoRecIdx++, LinkedTargetAddrIdx++)
   \   000081   75..00       MOV     ?V0 + 6,#0x0
   \                     ??zllSampleBridge_GetEPListReqCB_2:
   \   000084   90....       MOV     DPTR,#linkedAddrNum
   \   000087   E0           MOVX    A,@DPTR
   \   000088   F8           MOV     R0,A
   \   000089   E5..         MOV     A,?V0 + 0
   \   00008B   C3           CLR     C
   \   00008C   98           SUBB    A,R0
   \   00008D   5076         JNC     ??zllSampleBridge_GetEPListReqCB_0
   1059                {
   1060                  pInfoRec[InfoRecIdx].nwkAddr = linkedTargets.arr[LinkedTargetAddrIdx].Addr;
   \   00008F   85....       MOV     ?V0 + 4,?V0 + 6
   \   000092   75..00       MOV     ?V0 + 5,#0x0
   \   000095   7403         MOV     A,#0x3
   \   000097   78..         MOV     R0,#?V0 + 4
   \   000099   12....       LCALL   ?S_SHL
   \   00009C   EE           MOV     A,R6
   \   00009D   25..         ADD     A,?V0 + 4
   \   00009F   F8           MOV     R0,A
   \   0000A0   EF           MOV     A,R7
   \   0000A1   35..         ADDC    A,?V0 + 5
   \   0000A3   F9           MOV     R1,A
   \   0000A4   E8           MOV     A,R0
   \   0000A5   FA           MOV     R2,A
   \   0000A6   E9           MOV     A,R1
   \   0000A7   FB           MOV     R3,A
   \   0000A8   85....       MOV     ?V0 + 4,?V0 + 0
   \   0000AB   75..00       MOV     ?V0 + 5,#0x0
   \   0000AE   7403         MOV     A,#0x3
   \   0000B0   78..         MOV     R0,#?V0 + 4
   \   0000B2   12....       LCALL   ?S_SHL
   \   0000B5   74..         MOV     A,#linkedTargets & 0xff
   \   0000B7   25..         ADD     A,?V0 + 4
   \   0000B9   F8           MOV     R0,A
   \   0000BA   74..         MOV     A,#(linkedTargets >> 8) & 0xff
   \   0000BC   35..         ADDC    A,?V0 + 5
   \   0000BE   F9           MOV     R1,A
   \   0000BF   8882         MOV     DPL,R0
   \   0000C1   8983         MOV     DPH,R1
   \   0000C3   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   0000C6   8A82         MOV     DPL,R2
   \   0000C8   8B83         MOV     DPH,R3
   \   0000CA   12....       LCALL   ?Subroutine4 & 0xFFFF
   1061                  pInfoRec[InfoRecIdx].endpoint = linkedTargets.arr[LinkedTargetAddrIdx].EP;
   \                     ??CrossCallReturnLabel_0:
   \   0000CD   A3           INC     DPTR
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   8A82         MOV     DPL,R2
   \   0000D1   8B83         MOV     DPH,R3
   \   0000D3   A3           INC     DPTR
   \   0000D4   A3           INC     DPTR
   \   0000D5   F0           MOVX    @DPTR,A
   1062                  pInfoRec[InfoRecIdx].profileID = linkedTargets.arr[LinkedTargetAddrIdx].profileID;
   \   0000D6   8882         MOV     DPL,R0
   \   0000D8   8983         MOV     DPH,R1
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   12....       LCALL   ?Subroutine17 & 0xFFFF
   1063                  pInfoRec[InfoRecIdx].deviceID = linkedTargets.arr[LinkedTargetAddrIdx].deviceID;
   1064                  pInfoRec[InfoRecIdx].version = linkedTargets.arr[LinkedTargetAddrIdx].deviceVersion;
   1065                }
   \                     ??CrossCallReturnLabel_39:
   \   0000DF   EC           MOV     A,R4
   \   0000E0   F0           MOVX    @DPTR,A
   \   0000E1   A3           INC     DPTR
   \   0000E2   ED           MOV     A,R5
   \   0000E3   12....       LCALL   ?Subroutine12 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0000E6   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_40:
   \   0000E9   A3           INC     DPTR
   \   0000EA   A3           INC     DPTR
   \   0000EB   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   8A82         MOV     DPL,R2
   \   0000F1   8B83         MOV     DPH,R3
   \   0000F3   A3           INC     DPTR
   \   0000F4   A3           INC     DPTR
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   A3           INC     DPTR
   \   0000F8   A3           INC     DPTR
   \   0000F9   A3           INC     DPTR
   \   0000FA   F0           MOVX    @DPTR,A
   \   0000FB   05..         INC     ?V0 + 6
   \   0000FD   05..         INC     ?V0 + 0
   \   0000FF   8083         SJMP    ??zllSampleBridge_GetEPListReqCB_2
   1066              }
   1067              else
   1068              {
   1069                return ( ZFailure );
   \                     ??zllSampleBridge_GetEPListReqCB_1:
   \   000101   7901         MOV     R1,#0x1
   \   000103   8038         SJMP    ??zllSampleBridge_GetEPListReqCB_3
   1070              }
   1071            }
   1072            else
   1073            {
   1074              Rsp.cnt = 0;
   1075            }
   1076          
   1077            status = zclLL_Send_GetEPListRsp( SAMPLEBRIDGE_ENDPOINT, srcAddr, &Rsp, TRUE ,seqNum );
   \                     ??zllSampleBridge_GetEPListReqCB_0:
   \   000105                ; Setup parameters for call to function zclLL_Send_GetEPListRsp
   \   000105   E5..         MOV     A,?V0 + 1
   \   000107   F5..         MOV     ?V0 + 4,A
   \   000109   78..         MOV     R0,#?V0 + 4
   \   00010B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00010E   75..01       MOV     ?V0 + 4,#0x1
   \   000111   78..         MOV     R0,#?V0 + 4
   \   000113   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000116   7402         MOV     A,#0x2
   \   000118   12....       LCALL   ?XSTACK_DISP0_8
   \   00011B   AC82         MOV     R4,DPL
   \   00011D   AD83         MOV     R5,DPH
   \   00011F   AA..         MOV     R2,?V0 + 2
   \   000121   AB..         MOV     R3,?V0 + 3
   \   000123   790B         MOV     R1,#0xb
   \   000125   12....       LCALL   ??zclLL_Send_GetEPListRsp?relay
   \   000128   7402         MOV     A,#0x2
   \   00012A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00012D   E9           MOV     A,R1
   \   00012E   F5..         MOV     ?V0 + 2,A
   1078            if ( pInfoRec != NULL )
   \   000130   EE           MOV     A,R6
   \   000131   4F           ORL     A,R7
   \   000132   6007         JZ      ??zllSampleBridge_GetEPListReqCB_4
   1079            {
   1080              osal_mem_free( pInfoRec );
   \   000134                ; Setup parameters for call to function osal_mem_free
   \   000134   EE           MOV     A,R6
   \   000135   FA           MOV     R2,A
   \   000136   EF           MOV     A,R7
   \   000137   FB           MOV     R3,A
   \   000138   12....       LCALL   ??osal_mem_free?relay
   1081            }
   1082          
   1083            return status;
   \                     ??zllSampleBridge_GetEPListReqCB_4:
   \   00013B   A9..         MOV     R1,?V0 + 2
   \                     ??zllSampleBridge_GetEPListReqCB_3:
   \   00013D   7405         MOV     A,#0x5
   \   00013F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000142   7F07         MOV     R7,#0x7
   \   000144   02....       LJMP    ?BANKED_LEAVE_XDATA
   1084          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   EC           MOV     A,R4
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   ED           MOV     A,R5
   \   000004   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   22           RET
   1085          
   1086          /*********************************************************************
   1087           * @fn      zllSampleBridge_GetEndpointInfoCB
   1088           *
   1089           * @brief   This callback is called to process a Endpoint info command.
   1090           *
   1091           * @param   srcAddr - sender's address
   1092           * @param   pReq - parsed command
   1093           *
   1094           * @return  ZStatus_t
   1095           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1096          static ZStatus_t zllSampleBridge_GetEndpointInfoCB( afAddrType_t *srcAddr, zclLLEndpointInfo_t *pReq )
   \                     zllSampleBridge_GetEndpointInfoCB:
   1097          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1098            zclLLGetGrpIDsReq_t zclLLGetGrpIDsReq;
   1099            zclLLGetEPListReq_t zclLLGetEPListReq;
   1100            static afAddrType_t DstAddr;
   1101          
   1102            DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00000A   90....       MOV     DPTR,#??DstAddr + 8
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?Subroutine6 & 0xFFFF
   1103            DstAddr.endPoint = pReq->endpoint;
   \                     ??CrossCallReturnLabel_4:
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   90....       MOV     DPTR,#??DstAddr + 9
   \   000018   12....       LCALL   ?Subroutine6 & 0xFFFF
   1104            DstAddr.addr.shortAddr = pReq->nwkAddr;
   \                     ??CrossCallReturnLabel_5:
   \   00001B   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   00001E   90....       MOV     DPTR,#??DstAddr
   \   000021   12....       LCALL   ?Subroutine9 & 0xFFFF
   1105            DstAddr.panId = _NIB.nwkPanId;
   \                     ??CrossCallReturnLabel_14:
   \   000024   90....       MOV     DPTR,#??DstAddr + 10
   \   000027   12....       LCALL   ?Subroutine10 & 0xFFFF
   1106            nwk_states_t nwkState = _NIB.nwkState;
   \                     ??CrossCallReturnLabel_20:
   \   00002A   90....       MOV     DPTR,#_NIB + 35
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   FE           MOV     R6,A
   1107          #if (ZSTACK_END_DEVICE_BUILD)
   1108            _NIB.nwkState = NWK_ENDDEVICE;
   1109          #endif
   1110          
   1111            zclLLGetGrpIDsReq.startIndex = 0;
   \   00002F   7401         MOV     A,#0x1
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   E4           CLR     A
   \   000035   12....       LCALL   ?Subroutine8 & 0xFFFF
   1112            zclLLGetEPListReq.startIndex = 0;
   \                     ??CrossCallReturnLabel_9:
   \   000038   F0           MOVX    @DPTR,A
   1113          
   1114          #ifdef ZLL_UTILITY_SEND_GETGRPIDS_ENABLED
   1115            zclLL_Send_GetGrpIDsReq( SAMPLEBRIDGE_ENDPOINT, &DstAddr, &zclLLGetGrpIDsReq, TRUE, sampleBridgeSeqNum++ );
   \   000039   90....       MOV     DPTR,#sampleBridgeSeqNum
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   F9           MOV     R1,A
   \   00003E   7401         MOV     A,#0x1
   \   000040   29           ADD     A,R1
   \   000041   F0           MOVX    @DPTR,A
   \   000042                ; Setup parameters for call to function zcl_SendCommand
   \   000042   7401         MOV     A,#0x1
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   8582..       MOV     ?V0 + 0,DPL
   \   00004A   8583..       MOV     ?V0 + 1,DPH
   \   00004D   78..         MOV     R0,#?V0 + 0
   \   00004F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000052   75..01       MOV     ?V0 + 0,#0x1
   \   000055   75..00       MOV     ?V0 + 1,#0x0
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   E9           MOV     A,R1
   \   00005E   F5..         MOV     ?V0 + 0,A
   \   000060   78..         MOV     R0,#?V0 + 0
   \   000062   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000065   E4           CLR     A
   \   000066   F5..         MOV     ?V0 + 0,A
   \   000068   78..         MOV     R0,#?V0 + 0
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   75..01       MOV     ?V0 + 0,#0x1
   \   000070   78..         MOV     R0,#?V0 + 0
   \   000072   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000075   75..00       MOV     ?V0 + 0,#0x0
   \   000078   78..         MOV     R0,#?V0 + 0
   \   00007A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007D   75..01       MOV     ?V0 + 0,#0x1
   \   000080   78..         MOV     R0,#?V0 + 0
   \   000082   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000085   75..41       MOV     ?V0 + 0,#0x41
   \   000088   78..         MOV     R0,#?V0 + 0
   \   00008A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008D   7C00         MOV     R4,#0x0
   \   00008F   7D10         MOV     R5,#0x10
   \   000091   7A..         MOV     R2,#??DstAddr & 0xff
   \   000093   7B..         MOV     R3,#(??DstAddr >> 8) & 0xff
   \   000095   790B         MOV     R1,#0xb
   \   000097   12....       LCALL   ??zcl_SendCommand?relay
   \   00009A   740B         MOV     A,#0xb
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
   1116          #endif //ZLL_UTILITY_SEND_GETGRPIDS_ENABLED
   1117          #ifdef ZLL_UTILITY_SEND_GETEPLIST_ENABLED
   1118            zclLL_Send_GetEPListReq( SAMPLEBRIDGE_ENDPOINT, &DstAddr, &zclLLGetEPListReq, TRUE, sampleBridgeSeqNum++ );
   \   00009F   90....       MOV     DPTR,#sampleBridgeSeqNum
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   F9           MOV     R1,A
   \   0000A4   7401         MOV     A,#0x1
   \   0000A6   29           ADD     A,R1
   \   0000A7   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000AA   8582..       MOV     ?V0 + 0,DPL
   \   0000AD   8583..       MOV     ?V0 + 1,DPH
   \   0000B0   78..         MOV     R0,#?V0 + 0
   \   0000B2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B5   75..01       MOV     ?V0 + 0,#0x1
   \   0000B8   75..00       MOV     ?V0 + 1,#0x0
   \   0000BB   78..         MOV     R0,#?V0 + 0
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C0   E9           MOV     A,R1
   \   0000C1   F5..         MOV     ?V0 + 0,A
   \   0000C3   78..         MOV     R0,#?V0 + 0
   \   0000C5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C8   E4           CLR     A
   \   0000C9   F5..         MOV     ?V0 + 0,A
   \   0000CB   78..         MOV     R0,#?V0 + 0
   \   0000CD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D0   75..01       MOV     ?V0 + 0,#0x1
   \   0000D3   78..         MOV     R0,#?V0 + 0
   \   0000D5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000D8   75..00       MOV     ?V0 + 0,#0x0
   \   0000DB   78..         MOV     R0,#?V0 + 0
   \   0000DD   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E0   75..01       MOV     ?V0 + 0,#0x1
   \   0000E3   78..         MOV     R0,#?V0 + 0
   \   0000E5   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000E8   75..42       MOV     ?V0 + 0,#0x42
   \   0000EB   78..         MOV     R0,#?V0 + 0
   \   0000ED   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000F0   7C00         MOV     R4,#0x0
   \   0000F2   7D10         MOV     R5,#0x10
   \   0000F4   7A..         MOV     R2,#??DstAddr & 0xff
   \   0000F6   7B..         MOV     R3,#(??DstAddr >> 8) & 0xff
   \   0000F8   790B         MOV     R1,#0xb
   \   0000FA   12....       LCALL   ??zcl_SendCommand?relay
   \   0000FD   740B         MOV     A,#0xb
   \   0000FF   12....       LCALL   ?DEALLOC_XSTACK8
   1119          #endif //ZLL_UTILITY_SEND_GETEPLIST_ENABLED
   1120          
   1121            _NIB.nwkState = nwkState;
   \   000102   EE           MOV     A,R6
   \   000103   90....       MOV     DPTR,#_NIB + 35
   \   000106   F0           MOVX    @DPTR,A
   1122          
   1123            return ( ZSuccess );
   \   000107   7900         MOV     R1,#0x0
   \   000109   7402         MOV     A,#0x2
   \   00010B   02....       LJMP    ?Subroutine0 & 0xFFFF
   1124          
   1125          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function zcl_SendCommand
   \   000001                ; Setup parameters for call to function ZDO_ParseSimpleDescRsp
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
   1126          
   1127          /*********************************************************************
   1128           * @fn          zllSampleBridge_GroupRspCB
   1129           *
   1130           * @brief       This callback is called to process Groups cluster responses.
   1131           *              It is used to add groups to the controlled groups list.
   1132           *
   1133           * @param       pRsp - pointer to the response command parsed data struct
   1134           *
   1135           * @return      none
   1136           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1137          static void zllSampleBridge_GroupRspCB( zclGroupRsp_t *pRsp )
   \                     zllSampleBridge_GroupRspCB:
   1138          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1139            if ( pRsp->status != ZCL_STATUS_SUCCESS )
   \   000005   8A82         MOV     DPL,R2
   \   000007   8B83         MOV     DPH,R3
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   7074         JNZ     ??zllSampleBridge_GroupRspCB_0
   1140            {
   1141              return;
   1142            }
   1143            if ( pRsp->cmdID == COMMAND_GROUP_ADD_RSP )
   \   00000F   8A82         MOV     DPL,R2
   \   000011   8B83         MOV     DPH,R3
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   706B         JNZ     ??zllSampleBridge_GroupRspCB_0
   1144            {
   1145              // update target group list
   1146              zllSampleBridge_addControlledGroup( pRsp->grpList[0] );
   \   000018   8A82         MOV     DPL,R2
   \   00001A   8B83         MOV     DPH,R3
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   A3           INC     DPTR
   \   00001F   A3           INC     DPTR
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   F8           MOV     R0,A
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F583         MOV     DPH,A
   \   000027   8882         MOV     DPL,R0
   \   000029   12....       LCALL   ?Subroutine22 & 0xFFFF
   1147            }
   \                     ??CrossCallReturnLabel_46:
   \   00002C   7E00         MOV     R6,#0x0
   \                     ??zllSampleBridge_GroupRspCB_1:
   \   00002E   EE           MOV     A,R6
   \   00002F   C3           CLR     C
   \   000030   33           RLC     A
   \   000031   F8           MOV     R0,A
   \   000032   E4           CLR     A
   \   000033   33           RLC     A
   \   000034   F9           MOV     R1,A
   \   000035   74..         MOV     A,#controlledGroups & 0xff
   \   000037   28           ADD     A,R0
   \   000038   F8           MOV     R0,A
   \   000039   74..         MOV     A,#(controlledGroups >> 8) & 0xff
   \   00003B   39           ADDC    A,R1
   \   00003C   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_85:
   \   00003F   EC           MOV     A,R4
   \   000040   6A           XRL     A,R2
   \   000041   7002         JNZ     ??zllSampleBridge_GroupRspCB_2
   \   000043   ED           MOV     A,R5
   \   000044   6B           XRL     A,R3
   \                     ??zllSampleBridge_GroupRspCB_2:
   \   000045   603C         JZ      ??zllSampleBridge_GroupRspCB_0
   \   000047   EA           MOV     A,R2
   \   000048   4B           ORL     A,R3
   \   000049   7031         JNZ     ??zllSampleBridge_GroupRspCB_3
   \   00004B   8882         MOV     DPL,R0
   \   00004D   8983         MOV     DPH,R1
   \   00004F   EC           MOV     A,R4
   \   000050   F0           MOVX    @DPTR,A
   \   000051   A3           INC     DPTR
   \   000052   ED           MOV     A,R5
   \   000053   F0           MOVX    @DPTR,A
   \   000054                ; Setup parameters for call to function osal_nv_write
   \   000054   75....       MOV     ?V0 + 0,#controlledGroups & 0xff
   \   000057   75....       MOV     ?V0 + 1,#(controlledGroups >> 8) & 0xff
   \   00005A   78..         MOV     R0,#?V0 + 0
   \   00005C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005F   75..06       MOV     ?V0 + 0,#0x6
   \   000062   75..00       MOV     ?V0 + 1,#0x0
   \   000065   78..         MOV     R0,#?V0 + 0
   \   000067   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006A   7C00         MOV     R4,#0x0
   \   00006C   7D00         MOV     R5,#0x0
   \   00006E   7A02         MOV     R2,#0x2
   \   000070   7B04         MOV     R3,#0x4
   \   000072   12....       LCALL   ??osal_nv_write?relay
   \   000075   7404         MOV     A,#0x4
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007A   8007         SJMP    ??zllSampleBridge_GroupRspCB_0
   \                     ??zllSampleBridge_GroupRspCB_3:
   \   00007C   0E           INC     R6
   \   00007D   EE           MOV     A,R6
   \   00007E   C3           CLR     C
   \   00007F   9403         SUBB    A,#0x3
   \   000081   40AB         JC      ??zllSampleBridge_GroupRspCB_1
   \                     ??zllSampleBridge_GroupRspCB_0:
   \   000083   02....       LJMP    ??Subroutine30_0 & 0xFFFF
   1148          }
   1149          
   1150          /*********************************************************************
   1151           * @fn          zllSampleBridge_addControlledGroup
   1152           *
   1153           * @brief       Add group ID to the controlled groups list.
   1154           *
   1155           * @param       groupId - the groupID to add.
   1156           *
   1157           * @return      TRUE if added or already exists, FALSE if no space left
   1158           */
   1159          static uint8 zllSampleBridge_addControlledGroup( uint16 groupId )
   1160          {
   1161            for (uint8 i = 0; i < MAX_LINKED_GROUPS; i++)
   1162            {
   1163              if ( controlledGroups.arr[i] == groupId )
   1164              {
   1165                return TRUE;
   1166              }
   1167              else if ( controlledGroups.arr[i] == 0 )
   1168              {
   1169                controlledGroups.arr[i] = groupId;
   1170          #if defined ( NV_RESTORE )
   1171                osal_nv_write( ZCD_NV_ZLL_BRIDGE_CTRL_GROUPS, 0, sizeof( controlledGroups ), &controlledGroups );
   1172          #endif
   1173                return TRUE;
   1174              }
   1175            }
   1176            return FALSE;
   1177          }
   1178          
   1179          /*********************************************************************
   1180           * @fn          zllSampleBridge_ProcessZDOMsg
   1181           *
   1182           * @brief       Process ZDO messages for Device Discovery
   1183           *
   1184           * @param       inMsg - Incoming ZDO message
   1185           *
   1186           * @return      none
   1187           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1188          static void zllSampleBridge_ProcessZDOMsg( zdoIncomingMsg_t *inMsg )
   \                     zllSampleBridge_ProcessZDOMsg:
   1189          {
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 34
   \   000005   74DE         MOV     A,#-0x22
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1190            static zAddrType_t addr;
   1191            addr.addrMode = Addr16Bit;
   \   00000A   90....       MOV     DPTR,#??addr + 8
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
   1192          
   1193            switch ( inMsg->clusterID )
   \   000010   EA           MOV     A,R2
   \   000011   240C         ADD     A,#0xc
   \   000013   F582         MOV     DPL,A
   \   000015   EB           MOV     A,R3
   \   000016   3400         ADDC    A,#0x0
   \   000018   F583         MOV     DPH,A
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 0,A
   \   00001D   A3           INC     DPTR
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 1,A
   \   000021   78..         MOV     R0,#?V0 + 0
   \   000023   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for zllSampleBridge_ProcessZDOMsg>_0`:
   \   000026   0000         DW        0
   \   000028   0300         DW        3
   \   00002A   1300         DW        19
   \   00002C   ....         DW        ??zllSampleBridge_ProcessZDOMsg_0
   \   00002E   0480         DW        32772
   \   000030   ....         DW        ??zllSampleBridge_ProcessZDOMsg_1
   \   000032   0580         DW        32773
   \   000034   ....         DW        ??zllSampleBridge_ProcessZDOMsg_2
   \   000036   ....         DW        ??zllSampleBridge_ProcessZDOMsg_3
   1194            {
   1195              case Device_annce:
   1196                {
   1197                  ZDO_DeviceAnnce_t devAnnce;
   1198          
   1199                  ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
   \                     ??zllSampleBridge_ProcessZDOMsg_0:
   \   000038                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   000038   7417         MOV     A,#0x17
   \   00003A   12....       LCALL   ?XSTACK_DISP0_8
   \   00003D   AC82         MOV     R4,DPL
   \   00003F   AD83         MOV     R5,DPH
   \   000041   12....       LCALL   ??ZDO_ParseDeviceAnnce?relay
   1200                  if ( ( lastDevAnnceAddr != INVALID_NODE_ADDR ) && ( lastDevAnnceAddr != devAnnce.nwkAddr ) )
   \   000044   90....       MOV     DPTR,#lastDevAnnceAddr
   \   000047   E0           MOVX    A,@DPTR
   \   000048   64FE         XRL     A,#0xfe
   \   00004A   7003         JNZ     ??zllSampleBridge_ProcessZDOMsg_4
   \   00004C   A3           INC     DPTR
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   F4           CPL     A
   \                     ??zllSampleBridge_ProcessZDOMsg_4:
   \   00004F   601D         JZ      ??zllSampleBridge_ProcessZDOMsg_5
   \   000051   90....       MOV     DPTR,#lastDevAnnceAddr
   \   000054   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000057   7417         MOV     A,#0x17
   \   000059   12....       LCALL   ?XSTACK_DISP0_8
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   68           XRL     A,R0
   \   00005E   7003         JNZ     ??zllSampleBridge_ProcessZDOMsg_6
   \   000060   A3           INC     DPTR
   \   000061   E0           MOVX    A,@DPTR
   \   000062   69           XRL     A,R1
   \                     ??zllSampleBridge_ProcessZDOMsg_6:
   \   000063   6009         JZ      ??zllSampleBridge_ProcessZDOMsg_5
   1201                  {
   1202                    zllSampleBridge_SendActiveEPReq( lastDevAnnceAddr );
   \   000065                ; Setup parameters for call to function zllSampleBridge_SendActiveEPReq
   \   000065   90....       MOV     DPTR,#lastDevAnnceAddr
   \   000068   12....       LCALL   ??Subroutine33_0 & 0xFFFF
   1203                  }
   \                     ??CrossCallReturnLabel_83:
   \   00006B   12....       LCALL   ??zllSampleBridge_SendActiveEPReq?relay
   1204                  lastDevAnnceAddr = devAnnce.nwkAddr;
   \                     ??zllSampleBridge_ProcessZDOMsg_5:
   \   00006E   7417         MOV     A,#0x17
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   000076   90....       MOV     DPTR,#lastDevAnnceAddr
   \   000079   12....       LCALL   ?Subroutine10 & 0xFFFF
   1205                  osal_start_timerEx( zllSampleBridge_TaskID, SAMPLEBRIDGE_DEV_ANNCE_EVT, DEVICE_DISCOVERY_DELAY );
   \                     ??CrossCallReturnLabel_21:
   \   00007C                ; Setup parameters for call to function osal_start_timerEx
   \   00007C   90....       MOV     DPTR,#__Constant_7d0
   \   00007F   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000082   7A02         MOV     R2,#0x2
   \   000084   7B00         MOV     R3,#0x0
   \   000086   90....       MOV     DPTR,#zllSampleBridge_TaskID
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F9           MOV     R1,A
   \   00008B   12....       LCALL   ??osal_start_timerEx?relay
   \   00008E   7404         MOV     A,#0x4
   \   000090   12....       LCALL   ?DEALLOC_XSTACK8
   1206                }
   1207                break;
   \   000093   02....       LJMP    ??zllSampleBridge_ProcessZDOMsg_3 & 0xFFFF
   1208          
   1209              case Active_EP_rsp:
   1210                {
   1211                  ZDO_ActiveEndpointRsp_t *pActiveEPs = NULL;
   1212                  pActiveEPs = ZDO_ParseEPListRsp( inMsg );
   \                     ??zllSampleBridge_ProcessZDOMsg_2:
   \   000096                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   000096   12....       LCALL   ??ZDO_ParseEPListRsp?relay
   \   000099   8A..         MOV     ?V0 + 0,R2
   \   00009B   8B..         MOV     ?V0 + 1,R3
   \   00009D   AE..         MOV     R6,?V0 + 0
   \   00009F   AF..         MOV     R7,?V0 + 1
   1213                  if ( pActiveEPs->status == ZSuccess )
   \   0000A1   8E82         MOV     DPL,R6
   \   0000A3   8F83         MOV     DPH,R7
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   705C         JNZ     ??zllSampleBridge_ProcessZDOMsg_7
   1214                  {
   1215                    for (uint8 i=0; i < pActiveEPs->cnt; i++ )
   \   0000A8   75..00       MOV     ?V0 + 4,#0x0
   \   0000AB   A3           INC     DPTR
   \   0000AC   8582..       MOV     ?V0 + 0,DPL
   \   0000AF   8583..       MOV     ?V0 + 1,DPH
   \   0000B2   8041         SJMP    ??zllSampleBridge_ProcessZDOMsg_8
   1216                    {
   1217                      addr.addr.shortAddr = pActiveEPs->nwkAddr;
   \                     ??zllSampleBridge_ProcessZDOMsg_9:
   \   0000B4   85..82       MOV     DPL,?V0 + 0
   \   0000B7   85..83       MOV     DPH,?V0 + 1
   \   0000BA   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   0000BD   90....       MOV     DPTR,#??addr
   \   0000C0   12....       LCALL   ?Subroutine10 & 0xFFFF
   1218                      ZDP_SimpleDescReq( &addr, pActiveEPs->nwkAddr, pActiveEPs->epList[i], 0 );
   \                     ??CrossCallReturnLabel_22:
   \   0000C3                ; Setup parameters for call to function ZDP_SimpleDescReq
   \   0000C3   75..00       MOV     ?V0 + 2,#0x0
   \   0000C6   78..         MOV     R0,#?V0 + 2
   \   0000C8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CB   85....       MOV     ?V0 + 2,?V0 + 4
   \   0000CE   EE           MOV     A,R6
   \   0000CF   25..         ADD     A,?V0 + 2
   \   0000D1   F582         MOV     DPL,A
   \   0000D3   EF           MOV     A,R7
   \   0000D4   3400         ADDC    A,#0x0
   \   0000D6   F583         MOV     DPH,A
   \   0000D8   A3           INC     DPTR
   \   0000D9   A3           INC     DPTR
   \   0000DA   A3           INC     DPTR
   \   0000DB   A3           INC     DPTR
   \   0000DC   E0           MOVX    A,@DPTR
   \   0000DD   F9           MOV     R1,A
   \   0000DE   85..82       MOV     DPL,?V0 + 0
   \   0000E1   85..83       MOV     DPH,?V0 + 1
   \   0000E4   12....       LCALL   ?Subroutine22 & 0xFFFF
   1219                    }
   \                     ??CrossCallReturnLabel_47:
   \   0000E7   7A..         MOV     R2,#??addr & 0xff
   \   0000E9   7B..         MOV     R3,#(??addr >> 8) & 0xff
   \   0000EB   12....       LCALL   ??ZDP_SimpleDescReq?relay
   \   0000EE   7401         MOV     A,#0x1
   \   0000F0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000F3   05..         INC     ?V0 + 4
   \                     ??zllSampleBridge_ProcessZDOMsg_8:
   \   0000F5   8E82         MOV     DPL,R6
   \   0000F7   8F83         MOV     DPH,R7
   \   0000F9   A3           INC     DPTR
   \   0000FA   A3           INC     DPTR
   \   0000FB   A3           INC     DPTR
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   F8           MOV     R0,A
   \   0000FE   E5..         MOV     A,?V0 + 4
   \   000100   C3           CLR     C
   \   000101   98           SUBB    A,R0
   \   000102   40B0         JC      ??zllSampleBridge_ProcessZDOMsg_9
   1220                  }
   1221          
   1222                  if ( pActiveEPs != NULL )
   \                     ??zllSampleBridge_ProcessZDOMsg_7:
   \   000104   EE           MOV     A,R6
   \   000105   4F           ORL     A,R7
   \   000106   7003         JNZ     $+5
   \   000108   02....       LJMP    ??zllSampleBridge_ProcessZDOMsg_3 & 0xFFFF
   1223                  {
   1224                    osal_mem_free( pActiveEPs );
   \   00010B                ; Setup parameters for call to function osal_mem_free
   \   00010B   EE           MOV     A,R6
   \   00010C   FA           MOV     R2,A
   \   00010D   EF           MOV     A,R7
   \   00010E   FB           MOV     R3,A
   \   00010F   02....       LJMP    ??zllSampleBridge_ProcessZDOMsg_10 & 0xFFFF
   1225                  }
   1226                }
   1227                break;
   1228          
   1229              case Simple_Desc_rsp:
   1230                {
   1231                  ZDO_SimpleDescRsp_t simpleDescRsp;
   1232                  simpleDescRsp.simpleDesc.pAppInClusterList = simpleDescRsp.simpleDesc.pAppOutClusterList = NULL;
   \                     ??zllSampleBridge_ProcessZDOMsg_1:
   \   000112   740D         MOV     A,#0xd
   \   000114   12....       LCALL   ?XSTACK_DISP0_8
   \   000117   E4           CLR     A
   \   000118   F0           MOVX    @DPTR,A
   \   000119   A3           INC     DPTR
   \   00011A   F0           MOVX    @DPTR,A
   \   00011B   740A         MOV     A,#0xa
   \   00011D   12....       LCALL   ?XSTACK_DISP0_8
   \   000120   E4           CLR     A
   \   000121   F0           MOVX    @DPTR,A
   \   000122   A3           INC     DPTR
   \   000123   12....       LCALL   ?Subroutine8 & 0xFFFF
   1233                  ZDO_ParseSimpleDescRsp( inMsg, &simpleDescRsp );
   \                     ??CrossCallReturnLabel_10:
   \   000126   AC82         MOV     R4,DPL
   \   000128   AD83         MOV     R5,DPH
   \   00012A   12....       LCALL   ??ZDO_ParseSimpleDescRsp?relay
   1234          
   1235                  if ( ( simpleDescRsp.status == ZDP_SUCCESS ) && ( zllSampleBridge_SelectTargetSimpleDesc( &(simpleDescRsp.simpleDesc) ) ) )
   \   00012D   85..82       MOV     DPL,?XSP + 0
   \   000130   85..83       MOV     DPH,?XSP + 1
   \   000133   E0           MOVX    A,@DPTR
   \   000134   6003         JZ      $+5
   \   000136   02....       LJMP    ??zllSampleBridge_ProcessZDOMsg_11 & 0xFFFF
   \   000139   7B00         MOV     R3,#0x0
   \   00013B   8001         SJMP    ??zllSampleBridge_ProcessZDOMsg_12
   \                     ??zllSampleBridge_ProcessZDOMsg_13:
   \   00013D   0B           INC     R3
   \                     ??zllSampleBridge_ProcessZDOMsg_12:
   \   00013E   7409         MOV     A,#0x9
   \   000140   12....       LCALL   ?XSTACK_DISP0_8
   \   000143   E0           MOVX    A,@DPTR
   \   000144   F8           MOV     R0,A
   \   000145   EB           MOV     A,R3
   \   000146   C3           CLR     C
   \   000147   98           SUBB    A,R0
   \   000148   4003         JC      $+5
   \   00014A   02....       LJMP    ??zllSampleBridge_ProcessZDOMsg_11 & 0xFFFF
   \   00014D   EB           MOV     A,R3
   \   00014E   C3           CLR     C
   \   00014F   33           RLC     A
   \   000150   F8           MOV     R0,A
   \   000151   E4           CLR     A
   \   000152   33           RLC     A
   \   000153   F9           MOV     R1,A
   \   000154   740A         MOV     A,#0xa
   \   000156   12....       LCALL   ?XSTACK_DISP0_8
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   28           ADD     A,R0
   \   00015B   FA           MOV     R2,A
   \   00015C   A3           INC     DPTR
   \   00015D   E0           MOVX    A,@DPTR
   \   00015E   39           ADDC    A,R1
   \   00015F   8A82         MOV     DPL,R2
   \   000161   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000164   7406         MOV     A,#0x6
   \   000166   68           XRL     A,R0
   \   000167   7001         JNZ     ??zllSampleBridge_ProcessZDOMsg_14
   \   000169   E9           MOV     A,R1
   \                     ??zllSampleBridge_ProcessZDOMsg_14:
   \   00016A   6010         JZ      ??zllSampleBridge_ProcessZDOMsg_15
   \   00016C   7408         MOV     A,#0x8
   \   00016E   68           XRL     A,R0
   \   00016F   7001         JNZ     ??zllSampleBridge_ProcessZDOMsg_16
   \   000171   E9           MOV     A,R1
   \                     ??zllSampleBridge_ProcessZDOMsg_16:
   \   000172   6008         JZ      ??zllSampleBridge_ProcessZDOMsg_15
   \   000174   E8           MOV     A,R0
   \   000175   7003         JNZ     ??zllSampleBridge_ProcessZDOMsg_17
   \   000177   7403         MOV     A,#0x3
   \   000179   69           XRL     A,R1
   \                     ??zllSampleBridge_ProcessZDOMsg_17:
   \   00017A   70C1         JNZ     ??zllSampleBridge_ProcessZDOMsg_13
   1236                  {
   1237                    epInfoRec_t rec;
   1238                    rec.nwkAddr = simpleDescRsp.nwkAddr;
   \                     ??zllSampleBridge_ProcessZDOMsg_15:
   \   00017C   7401         MOV     A,#0x1
   \   00017E   12....       LCALL   ?XSTACK_DISP0_8
   \   000181   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000184   740F         MOV     A,#0xf
   \   000186   12....       LCALL   ?XSTACK_DISP0_8
   \   000189   12....       LCALL   ?Subroutine10 & 0xFFFF
   1239                    rec.endpoint = simpleDescRsp.simpleDesc.EndPoint;
   \                     ??CrossCallReturnLabel_23:
   \   00018C   7403         MOV     A,#0x3
   \   00018E   12....       LCALL   ?XSTACK_DISP0_8
   \   000191   E0           MOVX    A,@DPTR
   \   000192   C0E0         PUSH    A
   \   000194   7411         MOV     A,#0x11
   \   000196   12....       LCALL   ?XSTACK_DISP0_8
   \   000199   D0E0         POP     A
   \   00019B   F0           MOVX    @DPTR,A
   1240                    rec.profileID = simpleDescRsp.simpleDesc.AppProfId;
   \   00019C   7404         MOV     A,#0x4
   \   00019E   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A1   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   0001A4   7412         MOV     A,#0x12
   \   0001A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A9   12....       LCALL   ?Subroutine10 & 0xFFFF
   1241                    rec.deviceID = simpleDescRsp.simpleDesc.AppDeviceId;
   \                     ??CrossCallReturnLabel_24:
   \   0001AC   7406         MOV     A,#0x6
   \   0001AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B1   12....       LCALL   ??Subroutine32_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   0001B4   7414         MOV     A,#0x14
   \   0001B6   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B9   12....       LCALL   ?Subroutine10 & 0xFFFF
   1242                    rec.version = simpleDescRsp.simpleDesc.AppDevVer;
   \                     ??CrossCallReturnLabel_25:
   \   0001BC   7408         MOV     A,#0x8
   \   0001BE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001C1   E0           MOVX    A,@DPTR
   \   0001C2   540F         ANL     A,#0xf
   \   0001C4   C0E0         PUSH    A
   \   0001C6   7416         MOV     A,#0x16
   \   0001C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CB   D0E0         POP     A
   \   0001CD   F0           MOVX    @DPTR,A
   1243                    zllSampleBridge_UpdateLinkedTarget( &rec );
   \   0001CE                ; Setup parameters for call to function zllSampleBridge_UpdateLinkedTarget
   \   0001CE   740F         MOV     A,#0xf
   \   0001D0   12....       LCALL   ?XSTACK_DISP0_8
   \   0001D3   AA82         MOV     R2,DPL
   \   0001D5   AB83         MOV     R3,DPH
   \   0001D7   12....       LCALL   ??zllSampleBridge_UpdateLinkedTarget?relay
   1244                    HalLcdWriteStringValueValue( "linked:", simpleDescRsp.nwkAddr, 16, simpleDescRsp.simpleDesc.EndPoint, 16, HAL_LCD_LINE_3 );
   \   0001DA                ; Setup parameters for call to function HalLcdWriteStringValueValue
   \   0001DA   75..03       MOV     ?V0 + 0,#0x3
   \   0001DD   78..         MOV     R0,#?V0 + 0
   \   0001DF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001E2   75..10       MOV     ?V0 + 0,#0x10
   \   0001E5   78..         MOV     R0,#?V0 + 0
   \   0001E7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001EA   7405         MOV     A,#0x5
   \   0001EC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EF   E0           MOVX    A,@DPTR
   \   0001F0   F5..         MOV     ?V0 + 0,A
   \   0001F2   75..00       MOV     ?V0 + 1,#0x0
   \   0001F5   78..         MOV     R0,#?V0 + 0
   \   0001F7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001FA   7910         MOV     R1,#0x10
   \   0001FC   7405         MOV     A,#0x5
   \   0001FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000201   12....       LCALL   ?Subroutine22 & 0xFFFF
   1245                  }
   \                     ??CrossCallReturnLabel_48:
   \   000204   7A..         MOV     R2,#`?<Constant "linked:">` & 0xff
   \   000206   7B..         MOV     R3,#(`?<Constant "linked:">` >> 8) & 0xff
   \   000208   12....       LCALL   ??HalLcdWriteStringValueValue?relay
   \   00020B   7404         MOV     A,#0x4
   \   00020D   12....       LCALL   ?DEALLOC_XSTACK8
   1246                  if ( simpleDescRsp.simpleDesc.pAppInClusterList != NULL )
   \                     ??zllSampleBridge_ProcessZDOMsg_11:
   \   000210   740A         MOV     A,#0xa
   \   000212   12....       LCALL   ?XSTACK_DISP0_8
   \   000215   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   000218   6003         JZ      ??zllSampleBridge_ProcessZDOMsg_18
   1247                  {
   1248                    osal_mem_free( simpleDescRsp.simpleDesc.pAppInClusterList );
   \   00021A                ; Setup parameters for call to function osal_mem_free
   \   00021A   12....       LCALL   ??osal_mem_free?relay
   1249                  }
   1250                  if ( simpleDescRsp.simpleDesc.pAppOutClusterList != NULL )
   \                     ??zllSampleBridge_ProcessZDOMsg_18:
   \   00021D   740D         MOV     A,#0xd
   \   00021F   12....       LCALL   ?XSTACK_DISP0_8
   \   000222   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000225   6003         JZ      ??zllSampleBridge_ProcessZDOMsg_3
   1251                  {
   1252                    osal_mem_free( simpleDescRsp.simpleDesc.pAppOutClusterList );
   \   000227                ; Setup parameters for call to function osal_mem_free
   \                     ??zllSampleBridge_ProcessZDOMsg_10:
   \   000227   12....       LCALL   ??osal_mem_free?relay
   1253                  }
   1254                }
   1255                break;
   1256          
   1257              default:
   1258                break;
   1259            }
   1260          }
   \                     ??zllSampleBridge_ProcessZDOMsg_3:
   \   00022A   7422         MOV     A,#0x22
   \   00022C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00022F   7F05         MOV     R7,#0x5
   \   000231   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??addr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
   1261          
   1262          /*********************************************************************
   1263           * @fn          zllSampleBridge_SendActiveEPReq
   1264           *
   1265           * @brief       Send out ZDP Active Endpoints Requst.
   1266           *
   1267           * @param       dstAddr - destination address
   1268           *
   1269           * @return      status
   1270           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1271          static ZStatus_t zllSampleBridge_SendActiveEPReq( uint16 dstAddr )
   \                     zllSampleBridge_SendActiveEPReq:
   1272          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FC           MOV     R4,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FD           MOV     R5,A
   1273            zAddrType_t addr;
   1274            addr.addrMode = Addr16Bit;
   \   00000E   7408         MOV     A,#0x8
   \   000010   12....       LCALL   ?XSTACK_DISP0_8
   \   000013   7402         MOV     A,#0x2
   \   000015   12....       LCALL   ?Subroutine8 & 0xFFFF
   1275            addr.addr.shortAddr = dstAddr;
   \                     ??CrossCallReturnLabel_11:
   \   000018   EC           MOV     A,R4
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   ED           MOV     A,R5
   \   00001C   F0           MOVX    @DPTR,A
   1276            return ZDP_ActiveEPReq( &addr, dstAddr, 0 );
   \   00001D                ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
   \   00001D   75..00       MOV     ?V0 + 0,#0x0
   \   000020   78..         MOV     R0,#?V0 + 0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000025   7905         MOV     R1,#0x5
   \   000027   7401         MOV     A,#0x1
   \   000029   12....       LCALL   ?XSTACK_DISP0_8
   \   00002C   AA82         MOV     R2,DPL
   \   00002E   AB83         MOV     R3,DPH
   \   000030   12....       LCALL   ??ZDP_NWKAddrOfInterestReq?relay
   \   000033   7401         MOV     A,#0x1
   \   000035   12....       LCALL   ?DEALLOC_XSTACK8
   \   000038   7409         MOV     A,#0x9
   \   00003A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003D   02....       LJMP    ?Subroutine2 & 0xFFFF
   1277          }

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for lastDevAnnceAddr>`:
   \   000000   FEFF         DW 65534

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zllSampleBridge_GenCmdCBs>`:
   \   000000   ....         DW ??zllSampleBridge_BasicResetCB?relay
   \   000002   ....         DW ??zllSampleBridge_IdentifyCB?relay
   \   000004   0000         DW 0H
   \   000006   ....         DW ??zllSampleBridge_IdentifyQueryRspCB?relay
   \   000008   0000         DW 0H
   \   00000A   0000         DW 0H
   \   00000C   0000         DW 0H
   \   00000E   0000         DW 0H
   \   000010   0000         DW 0H
   \   000012   0000         DW 0H
   \   000014   0000         DW 0H
   \   000016   0000         DW 0H
   \   000018   ....         DW ??zllSampleBridge_GroupRspCB?relay
   \   00001A   0000         DW 0H
   \   00001C   0000         DW 0H
   \   00001E   0000         DW 0H
   \   000020   0000         DW 0H
   \   000022   0000         DW 0H

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zllSampleBridge_LLCmdCBs>`:
   \   000000   ....         DW ??zllSampleBridge_GetGrpIDsReqCB?relay
   \   000002   ....         DW ??zllSampleBridge_GetEPListReqCB?relay
   \   000004   ....         DW ??zllSampleBridge_GetEndpointInfoCB?relay
   \   000006   0000         DW 0H
   \   000008   0000         DW 0H

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zllSampleBridge_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zllSampleBridge_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zllSampleBridge_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zllSampleBridge_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zllSampleBridge_ProcessTL?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zllSampleBridge_ProcessTL

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zllSampleBridge_UpdateLinkedTarget?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zllSampleBridge_UpdateLinkedTarget

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zllSampleBridge_ProcessAppMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zllSampleBridge_ProcessAppMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zllSampleBridge_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zllSampleBridge_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zllSampleBridge_ProcessIdentifyTimeChange?rel:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zllSampleBridge_ProcessIdentifyTimeChange

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zllSampleBridge_BasicResetCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zllSampleBridge_BasicResetCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zllSampleBridge_IdentifyCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zllSampleBridge_IdentifyCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zllSampleBridge_IdentifyQueryRspCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zllSampleBridge_IdentifyQueryRspCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zllSampleBridge_ProcessInReadRspCmd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zllSampleBridge_ProcessInReadRspCmd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zllSampleBridge_GetGrpIDsReqCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zllSampleBridge_GetGrpIDsReqCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zllSampleBridge_GetEPListReqCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zllSampleBridge_GetEPListReqCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zllSampleBridge_GetEndpointInfoCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zllSampleBridge_GetEndpointInfoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zllSampleBridge_GroupRspCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zllSampleBridge_GroupRspCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zllSampleBridge_ProcessZDOMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zllSampleBridge_ProcessZDOMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??zllSampleBridge_SendActiveEPReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zllSampleBridge_SendActiveEPReq

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TL Light:">`:
   \   000000   544C204C     DB "TL Light:"
   \            69676874
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "TL Ctrlr:">`:
   \   000000   544C2043     DB "TL Ctrlr:"
   \            74726C72
   \            3A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Dev Sel:">`:
   \   000000   44657620     DB "Dev Sel:"
   \            53656C3A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Dev Sel: no trgt">`:
   \   000000   44657620     DB "Dev Sel: no trgt"
   \            53656C3A
   \            206E6F20
   \            74726774
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "PermitJoin">`:
   \   000000   5065726D     DB "PermitJoin"
   \            69744A6F
   \            696E00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {0}>_1`:
   \   000000   00           DB 0
   \   000001   00000000     DB 0, 0, 0, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "linked:">`:
   \   000000   6C696E6B     DB "linked:"
   \            65643A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_7d0:
   \   000000   D0070000     DD 2000
   1278          
   1279          /*********************************************************************
   1280           * @fn          zllSampleBridge_SelectTargetSimpleDesc
   1281           *
   1282           * @brief       Select or filter candidate device as controlled target.
   1283           *
   1284           * @param       pSimpleDesc - pointer to the device's application Simple Descriptor
   1285           *
   1286           * @return      TRUE if include in target list, FALSE if to discard (filter out)
   1287           */
   1288          static bool zllSampleBridge_SelectTargetSimpleDesc( SimpleDescriptionFormat_t *pSimpleDesc )
   1289          {
   1290            for (uint8 i=0; i<pSimpleDesc->AppNumInClusters; i++)
   1291            {
   1292              if ( pSimpleDesc->pAppInClusterList[i] == ZCL_CLUSTER_ID_GEN_ON_OFF )
   1293              {
   1294                return TRUE;
   1295              }
   1296          #ifdef ZCL_LEVEL_CTRL
   1297              if ( pSimpleDesc->pAppInClusterList[i] == ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL )
   1298              {
   1299                return TRUE;
   1300              }
   1301          #endif
   1302          #ifdef ZCL_COLOR_CTRL
   1303              if ( pSimpleDesc->pAppInClusterList[i] == ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL )
   1304              {
   1305                return TRUE;
   1306              }
   1307          #endif
   1308            }
   1309            return FALSE;
   1310          }
   1311          
   1312          
   1313          /****************************************************************************
   1314          ****************************************************************************/
   1315          
   1316          

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0     14  zllSampleBridge_BasicResetCB
                          0 0 10 -> osal_memset
                          0 0 14 -> osal_nv_write
       2      0     22  zllSampleBridge_GetEPListReqCB
                          0 0 20 -> osal_mem_alloc
                          0 0 20 -> osal_mem_free
                          0 0 22 -> zclLL_Send_GetEPListRsp
       0      0     23  zllSampleBridge_GetEndpointInfoCB
                          0 0 23 -> zcl_SendCommand
       2      0     21  zllSampleBridge_GetGrpIDsReqCB
                          0 0 19 -> osal_mem_alloc
                          0 0 19 -> osal_mem_free
                          0 0 21 -> zclLL_Send_GetGrpIDsRsp
       0      0     14  zllSampleBridge_GroupRspCB
                          0 0 14 -> osal_nv_write
       0      0     35  zllSampleBridge_HandleKeys
                          0 0 12 -> HalLcdWriteString
                          0 0 13 -> HalLcdWriteStringValue
                          0 0 14 -> zclGeneral_SendIdentify
                          0 0 23 -> zcl_SendCommand
                          0 0 12 -> zllInitiator_BridgeStartNetwork
                          0 0 12 -> zllInitiator_ClassicalCommissioningStart
                          0 0 12 -> zllInitiator_PermitJoin
                          0 0 12 -> zllInitiator_ResetToFactoryNew
                          0 0 12 -> zllInitiator_StartDevDisc
       2      0      0  zllSampleBridge_IdentifyCB
                          2 0  0 -> zllSampleBridge_ProcessIdentifyTimeChange
       0      0      0  zllSampleBridge_IdentifyQueryRspCB
       0      0     12  zllSampleBridge_Init
                          0 0 10 -> RegisterForKeys
                          0 0 10 -> ZDO_RegisterForZDOMsg
                          0 0 10 -> osal_memset
                          0 0 10 -> zclGeneral_RegisterCmdCallbacks
                          0 0 10 -> zclLL_RegisterCmdCallbacks
                          0 0 10 -> zcl_registerAttrList
                          0 0 10 -> zllInitiator_InitDevice
                          0 0 10 -> zllInitiator_RegisterApp
                          0 0 10 -> zllInitiator_RegisterForMsg
                          0 0 10 -> zllInitiator_RegisterIdentifyCB
                          0 0 10 -> zllInitiator_RegisterNotifyTLCB
                          0 0 10 -> zllInitiator_RegisterResetAppCB
                          0 0 12 -> zll_ItemInit
       1      0     59  zllSampleBridge_ProcessAppMsg
                          0 0 36 -> zclParseHdr
                          0 0 47 -> zcl_SendCommand
       2      0     16  zllSampleBridge_ProcessIdentifyTimeChange
                          2 0  0 -> HalLedBlink
                          2 0  0 -> HalLedSet
                          2 0  4 -> osal_start_timerEx
                          2 0  0 -> osal_stop_timerEx
       1      0     38  zllSampleBridge_ProcessInReadRspCmd
                          0 0 26 -> MT_ZllSendZCLCmd
                          0 0 20 -> osal_mem_alloc
                          0 0 20 -> osal_mem_free
                          0 0 23 -> osal_memcpy
                          0 0 20 -> zclGetAttrDataLength
                          0 0 23 -> zclGetAttrDataLength
       0      0     10  zllSampleBridge_ProcessTL
                          0 0 10 -> HalLcdWriteStringValue
                          0 0  9 -> HalLedSet
                          0 0  9 -> zllInitiator_SendEPInfo
                          0 0  9 -> zllSampleBridge_UpdateLinkedTarget
       1      0     63  zllSampleBridge_ProcessZDOMsg
                          0 0 51 -> HalLcdWriteStringValueValue
                          0 0 47 -> ZDO_ParseDeviceAnnce
                          0 0 47 -> ZDO_ParseEPListRsp
                          0 0 47 -> ZDO_ParseSimpleDescRsp
                          0 0 48 -> ZDP_SimpleDescReq
                          0 0 47 -> osal_mem_free
                          0 0 51 -> osal_start_timerEx
                          0 0 47 -> zllSampleBridge_SendActiveEPReq
                          0 0 47 -> zllSampleBridge_UpdateLinkedTarget
       0      0     66  zllSampleBridge_SendActiveEPReq
                          0 0 19 -> ZDP_NWKAddrOfInterestReq
       1      0     62  zllSampleBridge_UpdateLinkedTarget
                          0 0 15 -> osal_nv_write
       0      0     12  zllSampleBridge_event_loop
                          0 0 12 -> osal_mem_free
                          0 0 12 -> osal_msg_deallocate
                          0 0 12 -> osal_msg_receive
                          0 0 12 -> zllSampleBridge_HandleKeys
                          0 0 12 -> zllSampleBridge_ProcessAppMsg
                          0 0 12 -> zllSampleBridge_ProcessIdentifyTimeChange
                          0 0 12 -> zllSampleBridge_ProcessInReadRspCmd
                          0 0 12 -> zllSampleBridge_ProcessZDOMsg
                          0 0 12 -> zllSampleBridge_SendActiveEPReq


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      17  ?<Constant "Dev Sel: no trgt">
       9  ?<Constant "Dev Sel:">
      11  ?<Constant "PermitJoin">
      10  ?<Constant "TL Ctrlr:">
      10  ?<Constant "TL Light:">
       8  ?<Constant "linked:">
       5  ?<Constant {0}>
       5  ?<Constant {0}>_1
       2  ?<Initializer for lastDevAnnceAddr>
      36  ?<Initializer for zllSampleBridge_GenCmdCBs>
      10  ?<Initializer for zllSampleBridge_LLCmdCBs>
       5  ??Subroutine30_0
       8  ??Subroutine31_0
       6  ??Subroutine32_0
       6  ??Subroutine33_0
       6  ??zllSampleBridge_BasicResetCB?relay
       6  ??zllSampleBridge_GetEPListReqCB?relay
       6  ??zllSampleBridge_GetEndpointInfoCB?relay
       6  ??zllSampleBridge_GetGrpIDsReqCB?relay
       6  ??zllSampleBridge_GroupRspCB?relay
       6  ??zllSampleBridge_HandleKeys?relay
       6  ??zllSampleBridge_IdentifyCB?relay
       6  ??zllSampleBridge_IdentifyQueryRspCB?relay
       6  ??zllSampleBridge_Init?relay
       6  ??zllSampleBridge_ProcessAppMsg?relay
       6  ??zllSampleBridge_ProcessIdentifyTimeChange?rel
       6  ??zllSampleBridge_ProcessInReadRspCmd?relay
       6  ??zllSampleBridge_ProcessTL?relay
       6  ??zllSampleBridge_ProcessZDOMsg?relay
       6  ??zllSampleBridge_SendActiveEPReq?relay
       6  ??zllSampleBridge_UpdateLinkedTarget?relay
       6  ??zllSampleBridge_event_loop?relay
       3  ?Subroutine0
       5  ?Subroutine1
       6  ?Subroutine10
      11  ?Subroutine11
       4  ?Subroutine12
      17  ?Subroutine13
      11  ?Subroutine14
      10  ?Subroutine15
      13  ?Subroutine16
      13  ?Subroutine17
       8  ?Subroutine18
       5  ?Subroutine19
       5  ?Subroutine2
       3  ?Subroutine20
       2  ?Subroutine21
       6  ?Subroutine22
      12  ?Subroutine23
       5  ?Subroutine24
      11  ?Subroutine25
      14  ?Subroutine26
      13  ?Subroutine27
      10  ?Subroutine28
      11  ?Subroutine29
       7  ?Subroutine3
      10  ?Subroutine4
       8  ?Subroutine5
      14  ?Subroutine6
       9  ?Subroutine7
       8  ?Subroutine8
      14  ?Subroutine9
      12  DstAddr
       4  __Constant_3e8
       4  __Constant_7d0
       9  addr
       6  controlledGroups
       2  lastDevAnnceAddr
       1  linkedAddrNextIdx
       1  linkedAddrNum
       1  linkedAddrSelIdx
      80  linkedTargets
       1  sampleBridgeSeqNum
     112  zllSampleBridge_BasicResetCB
      12  zllSampleBridge_DstAddr
      36  zllSampleBridge_GenCmdCBs
     327  zllSampleBridge_GetEPListReqCB
     270  zllSampleBridge_GetEndpointInfoCB
     327  zllSampleBridge_GetGrpIDsReqCB
     134  zllSampleBridge_GroupRspCB
     432  zllSampleBridge_HandleKeys
      25  zllSampleBridge_IdentifyCB
       3  zllSampleBridge_IdentifyQueryRspCB
     279  zllSampleBridge_Init
      10  zllSampleBridge_LLCmdCBs
     331  zllSampleBridge_ProcessAppMsg
      66  zllSampleBridge_ProcessIdentifyTimeChange
     428  zllSampleBridge_ProcessInReadRspCmd
     139  zllSampleBridge_ProcessTL
     564  zllSampleBridge_ProcessZDOMsg
      64  zllSampleBridge_SendActiveEPReq
       1  zllSampleBridge_TaskID
     227  zllSampleBridge_UpdateLinkedTarget
     256  zllSampleBridge_event_loop

 
 4 277 bytes in segment BANKED_CODE
   102 bytes in segment BANK_RELAYS
    48 bytes in segment XDATA_I
    48 bytes in segment XDATA_ID
    83 bytes in segment XDATA_ROM_C
   124 bytes in segment XDATA_Z
 
 4 427 bytes of CODE  memory
    75 bytes of CONST memory (+ 8 bytes shared)
   172 bytes of XDATA memory

Errors: none
Warnings: none
