///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            07/May/2014  17:02:27 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\Texas Instruments\Z-Stack Lighting             /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\Source\Bridge /
//                          \zll_samplebridge.c                               /
//    Command line       =  -f "D:\Texas Instruments\Z-Stack Lighting         /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ      /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f "D:\Texas        /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO     /
//                          -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f "D:\Texas              /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wZCL.cfg" "D:\Texas           /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\Source\Bridge /
//                          \zll_samplebridge.c" -D FEATURE_GREEN_POWER -D    /
//                          SECURE=1 -D TC_LINKKEY_JOIN -D                    /
//                          ZDSECMGR_TC_DEVICE_MAX=2 -D NV_RESTORE -D         /
//                          HOLD_AUTO_START -D INTER_PAN -D ZTOOL_P1 -D       /
//                          MT_TASK -D MT_APP_FUNC -D MT_SYS_FUNC -D          /
//                          MT_ZDO_FUNC -D MT_ZDO_CB_FUNC -D MT_UTIL_FUNC -D  /
//                          MT_ZDO_MGMT -D LCD_SUPPORTED -D HAL_LCD=FALSE -D  /
//                          HAL_KEY=FALSE -D ZCL_BASIC -D ZCL_READ -D         /
//                          ZCL_WRITE -D ZCL_IDENTIFY -D ZCL_ON_OFF -D        /
//                          ZCL_SCENES -D ZCL_GROUPS -D                       /
//                          ZCL_LIGHT_LINK_ENHANCE -D ZCL_LEVEL_CTRL -D       /
//                          ZCL_COLOR_CTRL -D xMAX_CHANNELS_24GHZ=0x02108800  /
//                          -lC "D:\Texas Instruments\Z-Stack Lighting        /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Bridge /
//                          EB-Pro\List\" -lA "D:\Texas Instruments\Z-Stack   /
//                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC25 /
//                          3x\BridgeEB-Pro\List\" --diag_suppress            /
//                          Pe001,Pa010 -o "D:\Texas Instruments\Z-Stack      /
//                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC25 /
//                          3x\BridgeEB-Pro\Obj\" -e --debug --core=plain     /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "D:\Texas                 /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\" -I   /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\Sou /
//                          rce\" -I "D:\Texas Instruments\Z-Stack Lighting   /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          Source\" -I "D:\Texas Instruments\Z-Stack         /
//                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC25 /
//                          3x\..\..\..\HomeAutomation\Source\" -I "D:\Texas  /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\HomeAutomation\SampleLight\Source\" -I         /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\ZMain\TI2530DB\" -I "D:\Texas                  /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\hal\include\" -I "D:\Texas    /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\hal\target\CC2530EB\" -I      /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\include\" -I "D:\Texas    /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\high_level\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\low_level\srf04\" -I      /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\low_level\srf04\single_ch /
//                          ip\" -I "D:\Texas Instruments\Z-Stack Lighting    /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mt\" -I "D:\Texas             /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\osal\include\" -I "D:\Texas   /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\services\saddr\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\services\sdata\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\af\" -I "D:\Texas       /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\nwk\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sapi\" -I "D:\Texas     /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sec\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sys\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\zcl\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\zdo\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\zmac\" -I "D:\Texas           /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\zmac\f8w\" -Ohz               /
//                          --require_prototypes                              /
//    List file          =  D:\Texas Instruments\Z-Stack Lighting             /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Bridge /
//                          EB-Pro\List\zll_samplebridge.s51                  /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME zll_samplebridge

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?S_SHL
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_I
        EXTERN __INIT_XDATA_Z

        FUNCTION ??zllSampleBridge_BasicResetCB?relay,0203H
        FUNCTION ??zllSampleBridge_GetEPListReqCB?relay,0203H
        FUNCTION ??zllSampleBridge_GetEndpointInfoCB?relay,0203H
        FUNCTION ??zllSampleBridge_GetGrpIDsReqCB?relay,0203H
        FUNCTION ??zllSampleBridge_GroupRspCB?relay,0203H
        FUNCTION ??zllSampleBridge_HandleKeys?relay,0203H
        FUNCTION ??zllSampleBridge_IdentifyCB?relay,0203H
        FUNCTION ??zllSampleBridge_IdentifyQueryRspCB?relay,0203H
        PUBLIC ??zllSampleBridge_Init?relay
        FUNCTION ??zllSampleBridge_Init?relay,0203H
        FUNCTION ??zllSampleBridge_ProcessAppMsg?relay,0203H
        FUNCTION ??zllSampleBridge_ProcessIdentifyTimeChange?rel,0203H
        FUNCTION ??zllSampleBridge_ProcessInReadRspCmd?relay,0203H
        FUNCTION ??zllSampleBridge_ProcessTL?relay,0203H
        FUNCTION ??zllSampleBridge_ProcessZDOMsg?relay,0203H
        FUNCTION ??zllSampleBridge_SendActiveEPReq?relay,0203H
        FUNCTION ??zllSampleBridge_UpdateLinkedTarget?relay,0203H
        PUBLIC ??zllSampleBridge_event_loop?relay
        FUNCTION ??zllSampleBridge_event_loop?relay,0203H
        PUBWEAK __Constant_3e8
        PUBWEAK __Constant_7d0
        FUNCTION zllSampleBridge_BasicResetCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION zllSampleBridge_GetEPListReqCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 22, STACK
        FUNCTION zllSampleBridge_GetEndpointInfoCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        FUNCTION zllSampleBridge_GetGrpIDsReqCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 21, STACK
        FUNCTION zllSampleBridge_GroupRspCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        FUNCTION zllSampleBridge_HandleKeys,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 23, STACK
        FUNCTION zllSampleBridge_IdentifyCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION zllSampleBridge_IdentifyQueryRspCB,0603H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC zllSampleBridge_Init
        FUNCTION zllSampleBridge_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        FUNCTION zllSampleBridge_ProcessAppMsg,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 47, STACK
        FUNCTION zllSampleBridge_ProcessIdentifyTimeChange,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME XSTACK, 4, STACK
        FUNCTION zllSampleBridge_ProcessInReadRspCmd,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 26, STACK
        FUNCTION zllSampleBridge_ProcessTL,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        FUNCTION zllSampleBridge_ProcessZDOMsg,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 51, STACK
        FUNCTION zllSampleBridge_SendActiveEPReq,021203H
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 19, STACK
        PUBLIC zllSampleBridge_TaskID
        FUNCTION zllSampleBridge_UpdateLinkedTarget,021203H
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC zllSampleBridge_event_loop
        FUNCTION zllSampleBridge_event_loop,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalLcdWriteString   SYMBOL "HalLcdWriteString"
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
HalLcdWriteStringValue SYMBOL "HalLcdWriteStringValue"
??HalLcdWriteStringValue?relay SYMBOL "?relay", HalLcdWriteStringValue
HalLcdWriteStringValueValue SYMBOL "HalLcdWriteStringValueValue"
??HalLcdWriteStringValueValue?relay SYMBOL "?relay", HalLcdWriteStringValueValue
HalLedBlink         SYMBOL "HalLedBlink"
??HalLedBlink?relay SYMBOL "?relay", HalLedBlink
HalLedSet           SYMBOL "HalLedSet"
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
MT_ZllSendZCLCmd    SYMBOL "MT_ZllSendZCLCmd"
??MT_ZllSendZCLCmd?relay SYMBOL "?relay", MT_ZllSendZCLCmd
RegisterForKeys     SYMBOL "RegisterForKeys"
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
ZDO_ParseDeviceAnnce SYMBOL "ZDO_ParseDeviceAnnce"
??ZDO_ParseDeviceAnnce?relay SYMBOL "?relay", ZDO_ParseDeviceAnnce
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
??ZDO_ParseEPListRsp?relay SYMBOL "?relay", ZDO_ParseEPListRsp
ZDO_ParseSimpleDescRsp SYMBOL "ZDO_ParseSimpleDescRsp"
??ZDO_ParseSimpleDescRsp?relay SYMBOL "?relay", ZDO_ParseSimpleDescRsp
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDP_NWKAddrOfInterestReq SYMBOL "ZDP_NWKAddrOfInterestReq"
??ZDP_NWKAddrOfInterestReq?relay SYMBOL "?relay", ZDP_NWKAddrOfInterestReq
ZDP_SimpleDescReq   SYMBOL "ZDP_SimpleDescReq"
??ZDP_SimpleDescReq?relay SYMBOL "?relay", ZDP_SimpleDescReq
osal_mem_alloc      SYMBOL "osal_mem_alloc"
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
??osal_memset?relay SYMBOL "?relay", osal_memset
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
osal_nv_write       SYMBOL "osal_nv_write"
??osal_nv_write?relay SYMBOL "?relay", osal_nv_write
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
osal_stop_timerEx   SYMBOL "osal_stop_timerEx"
??osal_stop_timerEx?relay SYMBOL "?relay", osal_stop_timerEx
zclGeneral_RegisterCmdCallbacks SYMBOL "zclGeneral_RegisterCmdCallbacks"
??zclGeneral_RegisterCmdCallbacks?relay SYMBOL "?relay", zclGeneral_RegisterCmdCallbacks
zclGeneral_SendIdentify SYMBOL "zclGeneral_SendIdentify"
??zclGeneral_SendIdentify?relay SYMBOL "?relay", zclGeneral_SendIdentify
zclGetAttrDataLength SYMBOL "zclGetAttrDataLength"
??zclGetAttrDataLength?relay SYMBOL "?relay", zclGetAttrDataLength
zclLL_RegisterCmdCallbacks SYMBOL "zclLL_RegisterCmdCallbacks"
??zclLL_RegisterCmdCallbacks?relay SYMBOL "?relay", zclLL_RegisterCmdCallbacks
zclLL_Send_GetEPListRsp SYMBOL "zclLL_Send_GetEPListRsp"
??zclLL_Send_GetEPListRsp?relay SYMBOL "?relay", zclLL_Send_GetEPListRsp
zclLL_Send_GetGrpIDsRsp SYMBOL "zclLL_Send_GetGrpIDsRsp"
??zclLL_Send_GetGrpIDsRsp?relay SYMBOL "?relay", zclLL_Send_GetGrpIDsRsp
zclParseHdr         SYMBOL "zclParseHdr"
??zclParseHdr?relay SYMBOL "?relay", zclParseHdr
zcl_SendCommand     SYMBOL "zcl_SendCommand"
??zcl_SendCommand?relay SYMBOL "?relay", zcl_SendCommand
zcl_registerAttrList SYMBOL "zcl_registerAttrList"
??zcl_registerAttrList?relay SYMBOL "?relay", zcl_registerAttrList
zllInitiator_BridgeStartNetwork SYMBOL "zllInitiator_BridgeStartNetwork"
??zllInitiator_BridgeStartNetwork?relay SYMBOL "?relay", zllInitiator_BridgeStartNetwork
zllInitiator_ClassicalCommissioningStart SYMBOL "zllInitiator_ClassicalCommissioningStart"
??zllInitiator_ClassicalCommissioningStart?rela SYMBOL "?relay", zllInitiator_ClassicalCommissioningStart
zllInitiator_InitDevice SYMBOL "zllInitiator_InitDevice"
??zllInitiator_InitDevice?relay SYMBOL "?relay", zllInitiator_InitDevice
zllInitiator_PermitJoin SYMBOL "zllInitiator_PermitJoin"
??zllInitiator_PermitJoin?relay SYMBOL "?relay", zllInitiator_PermitJoin
zllInitiator_RegisterApp SYMBOL "zllInitiator_RegisterApp"
??zllInitiator_RegisterApp?relay SYMBOL "?relay", zllInitiator_RegisterApp
zllInitiator_RegisterForMsg SYMBOL "zllInitiator_RegisterForMsg"
??zllInitiator_RegisterForMsg?relay SYMBOL "?relay", zllInitiator_RegisterForMsg
zllInitiator_RegisterIdentifyCB SYMBOL "zllInitiator_RegisterIdentifyCB"
??zllInitiator_RegisterIdentifyCB?relay SYMBOL "?relay", zllInitiator_RegisterIdentifyCB
zllInitiator_RegisterNotifyTLCB SYMBOL "zllInitiator_RegisterNotifyTLCB"
??zllInitiator_RegisterNotifyTLCB?relay SYMBOL "?relay", zllInitiator_RegisterNotifyTLCB
zllInitiator_RegisterResetAppCB SYMBOL "zllInitiator_RegisterResetAppCB"
??zllInitiator_RegisterResetAppCB?relay SYMBOL "?relay", zllInitiator_RegisterResetAppCB
zllInitiator_ResetToFactoryNew SYMBOL "zllInitiator_ResetToFactoryNew"
??zllInitiator_ResetToFactoryNew?relay SYMBOL "?relay", zllInitiator_ResetToFactoryNew
zllInitiator_SendEPInfo SYMBOL "zllInitiator_SendEPInfo"
??zllInitiator_SendEPInfo?relay SYMBOL "?relay", zllInitiator_SendEPInfo
zllInitiator_StartDevDisc SYMBOL "zllInitiator_StartDevDisc"
??zllInitiator_StartDevDisc?relay SYMBOL "?relay", zllInitiator_StartDevDisc
zll_ItemInit        SYMBOL "zll_ItemInit"
??zll_ItemInit?relay SYMBOL "?relay", zll_ItemInit
zllSampleBridge_Init SYMBOL "zllSampleBridge_Init"
??zllSampleBridge_Init?relay SYMBOL "?relay", zllSampleBridge_Init
zllSampleBridge_event_loop SYMBOL "zllSampleBridge_event_loop"
??zllSampleBridge_event_loop?relay SYMBOL "?relay", zllSampleBridge_event_loop

        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLcdWriteStringValue?relay
        FUNCTION ??HalLcdWriteStringValue?relay,00H
        EXTERN ??HalLcdWriteStringValueValue?relay
        FUNCTION ??HalLcdWriteStringValueValue?relay,00H
        EXTERN ??HalLedBlink?relay
        FUNCTION ??HalLedBlink?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??MT_ZllSendZCLCmd?relay
        FUNCTION ??MT_ZllSendZCLCmd?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDO_ParseDeviceAnnce?relay
        FUNCTION ??ZDO_ParseDeviceAnnce?relay,00H
        EXTERN ??ZDO_ParseEPListRsp?relay
        FUNCTION ??ZDO_ParseEPListRsp?relay,00H
        EXTERN ??ZDO_ParseSimpleDescRsp?relay
        FUNCTION ??ZDO_ParseSimpleDescRsp?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDP_NWKAddrOfInterestReq?relay
        FUNCTION ??ZDP_NWKAddrOfInterestReq?relay,00H
        EXTERN ??ZDP_SimpleDescReq?relay
        FUNCTION ??ZDP_SimpleDescReq?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_nv_write?relay
        FUNCTION ??osal_nv_write?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??osal_stop_timerEx?relay
        FUNCTION ??osal_stop_timerEx?relay,00H
        EXTERN ??zclGeneral_RegisterCmdCallbacks?relay
        FUNCTION ??zclGeneral_RegisterCmdCallbacks?relay,00H
        EXTERN ??zclGeneral_SendIdentify?relay
        FUNCTION ??zclGeneral_SendIdentify?relay,00H
        EXTERN ??zclGetAttrDataLength?relay
        FUNCTION ??zclGetAttrDataLength?relay,00H
        EXTERN ??zclLL_RegisterCmdCallbacks?relay
        FUNCTION ??zclLL_RegisterCmdCallbacks?relay,00H
        EXTERN ??zclLL_Send_GetEPListRsp?relay
        FUNCTION ??zclLL_Send_GetEPListRsp?relay,00H
        EXTERN ??zclLL_Send_GetGrpIDsRsp?relay
        FUNCTION ??zclLL_Send_GetGrpIDsRsp?relay,00H
        EXTERN ??zclParseHdr?relay
        FUNCTION ??zclParseHdr?relay,00H
        EXTERN ??zcl_SendCommand?relay
        FUNCTION ??zcl_SendCommand?relay,00H
        EXTERN ??zcl_registerAttrList?relay
        FUNCTION ??zcl_registerAttrList?relay,00H
        EXTERN ??zllInitiator_BridgeStartNetwork?relay
        FUNCTION ??zllInitiator_BridgeStartNetwork?relay,00H
        EXTERN ??zllInitiator_ClassicalCommissioningStart?rela
        FUNCTION ??zllInitiator_ClassicalCommissioningStart?rela,00H
        EXTERN ??zllInitiator_InitDevice?relay
        FUNCTION ??zllInitiator_InitDevice?relay,00H
        EXTERN ??zllInitiator_PermitJoin?relay
        FUNCTION ??zllInitiator_PermitJoin?relay,00H
        EXTERN ??zllInitiator_RegisterApp?relay
        FUNCTION ??zllInitiator_RegisterApp?relay,00H
        EXTERN ??zllInitiator_RegisterForMsg?relay
        FUNCTION ??zllInitiator_RegisterForMsg?relay,00H
        EXTERN ??zllInitiator_RegisterIdentifyCB?relay
        FUNCTION ??zllInitiator_RegisterIdentifyCB?relay,00H
        EXTERN ??zllInitiator_RegisterNotifyTLCB?relay
        FUNCTION ??zllInitiator_RegisterNotifyTLCB?relay,00H
        EXTERN ??zllInitiator_RegisterResetAppCB?relay
        FUNCTION ??zllInitiator_RegisterResetAppCB?relay,00H
        EXTERN ??zllInitiator_ResetToFactoryNew?relay
        FUNCTION ??zllInitiator_ResetToFactoryNew?relay,00H
        EXTERN ??zllInitiator_SendEPInfo?relay
        FUNCTION ??zllInitiator_SendEPInfo?relay,00H
        EXTERN ??zllInitiator_StartDevDisc?relay
        FUNCTION ??zllInitiator_StartDevDisc?relay,00H
        EXTERN ??zll_ItemInit?relay
        FUNCTION ??zll_ItemInit?relay,00H
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteStringValue
        FUNCTION HalLcdWriteStringValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteStringValueValue
        FUNCTION HalLcdWriteStringValueValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedBlink
        FUNCTION HalLedBlink,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MT_ZllSendZCLCmd
        FUNCTION MT_ZllSendZCLCmd,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseDeviceAnnce
        FUNCTION ZDO_ParseDeviceAnnce,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseSimpleDescRsp
        FUNCTION ZDO_ParseSimpleDescRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_NWKAddrOfInterestReq
        FUNCTION ZDP_NWKAddrOfInterestReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_SimpleDescReq
        FUNCTION ZDP_SimpleDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_nv_write
        FUNCTION osal_nv_write,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_stop_timerEx
        FUNCTION osal_stop_timerEx,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_RegisterCmdCallbacks
        FUNCTION zclGeneral_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGeneral_SendIdentify
        FUNCTION zclGeneral_SendIdentify,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclGetAttrDataLength
        FUNCTION zclGetAttrDataLength,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclLL_RegisterCmdCallbacks
        FUNCTION zclLL_RegisterCmdCallbacks,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclLL_Send_GetEPListRsp
        FUNCTION zclLL_Send_GetEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclLL_Send_GetGrpIDsRsp
        FUNCTION zclLL_Send_GetGrpIDsRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zclParseHdr
        FUNCTION zclParseHdr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_SendCommand
        FUNCTION zcl_SendCommand,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zcl_registerAttrList
        FUNCTION zcl_registerAttrList,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zllInitiator_BridgeStartNetwork
        FUNCTION zllInitiator_BridgeStartNetwork,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zllInitiator_ClassicalCommissioningStart
        FUNCTION zllInitiator_ClassicalCommissioningStart,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zllInitiator_InitDevice
        FUNCTION zllInitiator_InitDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zllInitiator_PermitJoin
        FUNCTION zllInitiator_PermitJoin,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zllInitiator_RegisterApp
        FUNCTION zllInitiator_RegisterApp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zllInitiator_RegisterForMsg
        FUNCTION zllInitiator_RegisterForMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zllInitiator_RegisterIdentifyCB
        FUNCTION zllInitiator_RegisterIdentifyCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zllInitiator_RegisterNotifyTLCB
        FUNCTION zllInitiator_RegisterNotifyTLCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zllInitiator_RegisterResetAppCB
        FUNCTION zllInitiator_RegisterResetAppCB,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zllInitiator_ResetToFactoryNew
        FUNCTION zllInitiator_ResetToFactoryNew,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zllInitiator_SendEPInfo
        FUNCTION zllInitiator_SendEPInfo,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zllInitiator_StartDevDisc
        FUNCTION zllInitiator_StartDevDisc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN zllSampleBridge_Attrs
        EXTERN zllSampleBridge_DeviceInfo
        EXTERN zllSampleBridge_IdentifyTime
        EXTERN zllSampleBridge_SimpleDesc
        EXTERN zll_ItemInit
        FUNCTION zll_ItemInit,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\Texas Instruments\Z-Stack Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\Source\Bridge\zll_samplebridge.c
//    1 /**************************************************************************************************
//    2   Filename:       zll_samplebridge.c
//    3   Revised:        $Date: 2013-04-05 10:52:56 -0700 (Fri, 05 Apr 2013) $
//    4   Revision:       $Revision: 33786 $
//    5 
//    6 
//    7   Description:    Zigbee Cluster Library - Light Link (ZLL) Bridge Sample
//    8                   Application.
//    9 
//   10 
//   11   Copyright 2013 Texas Instruments Incorporated. All rights reserved.
//   12 
//   13   IMPORTANT: Your use of this Software is limited to those specific rights
//   14   granted under the terms of a software license agreement between the user
//   15   who downloaded the software, his/her employer (which must be your employer)
//   16   and Texas Instruments Incorporated (the "License").  You may not use this
//   17   Software unless you agree to abide by the terms of the License. The License
//   18   limits your use, and you acknowledge, that the Software may not be modified,
//   19   copied or distributed unless embedded on a Texas Instruments microcontroller
//   20   or used solely and exclusively in conjunction with a Texas Instruments radio
//   21   frequency transceiver, which is integrated into your product.  Other than for
//   22   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   23   works of, modify, distribute, perform, display or sell this Software and/or
//   24   its documentation for any purpose.
//   25 
//   26   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   27   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   28   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   29   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   30   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   31   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   32   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   33   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   34   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   35   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   36   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   37 
//   38   Should you have any questions regarding your right to use this Software,
//   39   contact Texas Instruments Incorporated at www.TI.com.
//   40 **************************************************************************************************/
//   41 
//   42 /*********************************************************************
//   43   This device will be like a Controller device.  This application is not
//   44   intended to be a Controller device, but will use the device description
//   45   to implement this sample code.
//   46 *********************************************************************/
//   47 
//   48 /*********************************************************************
//   49  * INCLUDES
//   50  */
//   51 #if defined ( NV_RESTORE )
//   52 #include "OSAL_Nv.h"
//   53 #endif
//   54 #include "ZDApp.h"
//   55 #include "ZDObject.h"
//   56 
//   57 #if defined ( INTER_PAN )
//   58 #include "stub_aps.h"
//   59 #endif
//   60 
//   61 #include "zll_initiator.h"
//   62 
//   63 #if defined ( MT_APP_FUNC )
//   64 #include "MT_APP.h"
//   65 #include "zll_rpc.h"
//   66 #endif
//   67 
//   68 #include "zll_samplebridge.h"
//   69 
//   70 #include "onboard.h"
//   71 #ifdef HAL_BOARD_CC2530USB
//   72 #include "osal_clock.h"
//   73 #endif
//   74 /* HAL */
//   75 #include "hal_lcd.h"
//   76 #include "hal_led.h"
//   77 #include "hal_key.h"
//   78 
//   79 /*********************************************************************
//   80  * MACROS
//   81  */
//   82 
//   83 #ifdef HAL_BOARD_CC2530USB
//   84   #define TOUCH_LINK_KEY      0
//   85   #define FACTORY_RESET_KEY   (HAL_KEY_SW_1 | HAL_KEY_SW_2)
//   86   #define CLASSIC_COMMISS_KEY HAL_KEY_SW_2
//   87   #define PERMIT_JOIN_KEY     HAL_KEY_SW_1
//   88   #define ON_KEY              0
//   89   #define OFF_KEY             0
//   90   #define DEVICE_DISCOVERY    0
//   91   #define DEV_SEL_UP_KEY      0
//   92   #define DEV_SEL_DN_KEY      0
//   93 #else // HAL_BOARD_CC2530EB
//   94   #define TOUCH_LINK_KEY      HAL_KEY_LEFT
//   95   #define FACTORY_RESET_KEY   HAL_KEY_RIGHT
//   96   #define CLASSIC_COMMISS_KEY (HAL_KEY_UP | HAL_KEY_SW_6)
//   97   #define PERMIT_JOIN_KEY     (HAL_KEY_DOWN | HAL_KEY_SW_6)
//   98   #define ON_KEY              HAL_KEY_UP
//   99   #define OFF_KEY             HAL_KEY_DOWN
//  100   #define DEVICE_DISCOVERY    HAL_KEY_CENTER
//  101   #define DEV_SEL_UP_KEY      (HAL_KEY_RIGHT | HAL_KEY_SW_6)
//  102   #define DEV_SEL_DN_KEY      (HAL_KEY_LEFT | HAL_KEY_SW_6)
//  103 #endif
//  104 
//  105 #define PERMIT_JOIN_DURATION       60
//  106 #define DEVICE_DISCOVERY_DELAY     2000
//  107 
//  108 /*********************************************************************
//  109  * CONSTANTS
//  110  */
//  111 
//  112 // Application Events
//  113 #define SAMPLEBRIDGE_IDENTIFY_TIMEOUT_EVT    0x0001
//  114 #define SAMPLEBRIDGE_DEV_ANNCE_EVT           0x0002
//  115 
//  116 /*********************************************************************
//  117  * TYPEDEFS
//  118  */
//  119 
//  120 /*********************************************************************
//  121  * GLOBAL VARIABLES
//  122  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  123 byte zllSampleBridge_TaskID;
zllSampleBridge_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  124 
//  125 
//  126 /*********************************************************************
//  127  * GLOBAL FUNCTIONS
//  128  */
//  129 extern void zll_ItemInit( uint16 id, uint16 len, void *pBuf );
//  130 extern void initiatorSelectNwkParams( void );
//  131 
//  132 /*********************************************************************
//  133  * LOCAL VARIABLES
//  134  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  135 static afAddrType_t zllSampleBridge_DstAddr;
zllSampleBridge_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  136 static zllBridgeLinkedTargetList_t linkedTargets;
linkedTargets:
        DS 80
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  137 static uint8 linkedAddrNextIdx = 0;
linkedAddrNextIdx:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  138 static uint8 linkedAddrSelIdx = 0;
linkedAddrSelIdx:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  139 static uint8 linkedAddrNum = 0;
linkedAddrNum:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  140 static zllBridgeControlledGroupsList_t controlledGroups;
controlledGroups:
        DS 6
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  141 static uint8 sampleBridgeSeqNum = 0;
sampleBridgeSeqNum:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_I:XDATA:NOROOT(0)
//  142 static uint16 lastDevAnnceAddr = INVALID_NODE_ADDR;
lastDevAnnceAddr:
        DATA16
        DS 2
        REQUIRE `?<Initializer for lastDevAnnceAddr>`
        REQUIRE __INIT_XDATA_I
//  143 
//  144 /*********************************************************************
//  145  * LOCAL FUNCTIONS
//  146  */
//  147 #if defined ( MT_APP_FUNC )
//  148 static void zllSampleBridge_ProcessAppMsg( uint8 srcEP, uint8 len, uint8 *msg );
//  149 #endif
//  150 static void zllSampleBridge_HandleKeys( byte shift, byte keys );
//  151 static void zllSampleBridge_BasicResetCB( void );
//  152 static void zllSampleBridge_IdentifyCB( zclIdentify_t *pCmd );
//  153 static void zllSampleBridge_IdentifyQueryRspCB( zclIdentifyQueryRsp_t *pRsp );
//  154 static void zllSampleBridge_GroupRspCB( zclGroupRsp_t *pRsp );
//  155 static void zllSampleBridge_ProcessIdentifyTimeChange( void );
//  156 static ZStatus_t zllSampleBridge_SendActiveEPReq( uint16 dstAddr );
//  157 
//  158 // Functions to process ZCL Foundation incoming Command/Response messages
//  159 static void zllSampleBridge_ProcessIncomingMsg( zclIncomingMsg_t *msg );
//  160 #ifdef ZCL_READ
//  161 static ZStatus_t zllSampleBridge_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg );
//  162 #endif
//  163 #ifdef ZCL_WRITE
//  164 static uint8 zllSampleBridge_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg );
//  165 #endif
//  166 static uint8 zllSampleBridge_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg );
//  167 #ifdef ZCL_DISCOVER
//  168 static uint8 zllSampleBridge_ProcessInDiscRspCmd( zclIncomingMsg_t *pInMsg );
//  169 #endif
//  170 
//  171 // This callback is called to process a Get Group Identifiers Request command
//  172 static ZStatus_t zllSampleBridge_GetGrpIDsReqCB( afAddrType_t *srcAddr, zclLLGetGrpIDsReq_t *pReq, uint8 seqNum );
//  173 
//  174 // This callback is called to process a Get Endpoint List Request command
//  175 static ZStatus_t zllSampleBridge_GetEPListReqCB( afAddrType_t *srcAddr, zclLLGetEPListReq_t *pReq, uint8 seqNum );
//  176 
//  177 // This callback is called to process a Get Endpoint Info Request command
//  178 static ZStatus_t zllSampleBridge_GetEndpointInfoCB( afAddrType_t *srcAddr, zclLLEndpointInfo_t *pRsp );
//  179 
//  180 // Target touch linked notification
//  181 static ZStatus_t zllSampleBridge_ProcessTL( epInfoRec_t *pRec );
//  182 static ZStatus_t zllSampleBridge_UpdateLinkedTarget( epInfoRec_t *pRec );
//  183 static void zllSampleBridge_InitLinkedTargets( void );
//  184 static uint8 zllSampleBridge_addControlledGroup( uint16 groupId );
//  185 // Device Discovery
//  186 static void zllSampleBridge_ProcessZDOMsg( zdoIncomingMsg_t *inMsg );
//  187 static bool zllSampleBridge_SelectTargetSimpleDesc( SimpleDescriptionFormat_t *pSimpleDesc );
//  188 
//  189 /*********************************************************************
//  190  * ZCL General Profile Callback table
//  191  */

        RSEG XDATA_I:XDATA:NOROOT(0)
//  192 static zclGeneral_AppCallbacks_t zllSampleBridge_GenCmdCBs =
zllSampleBridge_GenCmdCBs:
        DATA8
        DS 36
        REQUIRE `?<Initializer for zllSampleBridge_GenCmdCBs>`
        REQUIRE __INIT_XDATA_I
//  193 {
//  194   zllSampleBridge_BasicResetCB,           // Basic Cluster Reset command
//  195   zllSampleBridge_IdentifyCB,             // Identify command
//  196 #ifdef ZCL_EZMODE
//  197   NULL,                                   // Identify EZ-Mode Invoke command
//  198   NULL,                                   // Identify Update Commission State command
//  199 #endif
//  200   NULL,                                   // Identify Trigger Effect command
//  201   zllSampleBridge_IdentifyQueryRspCB,     // Identify Query Response command
//  202   NULL,                                   // On/Off cluster commands
//  203   NULL,                                   // On/Off cluster enhanced command Off with Effect
//  204   NULL,                                   // On/Off cluster enhanced command On with Recall Global Scene
//  205   NULL,                                   // On/Off cluster enhanced command On with Timed Off
//  206 #ifdef ZCL_LEVEL_CTRL
//  207   NULL,                                   // Level Control Move to Level command
//  208   NULL,                                   // Level Control Move command
//  209   NULL,                                   // Level Control Step command
//  210   NULL,                                   // Level Control Stop command
//  211 #endif
//  212 #ifdef ZCL_GROUPS
//  213   zllSampleBridge_GroupRspCB,             // Group Response commands
//  214 #endif
//  215 #ifdef ZCL_SCENES
//  216   NULL,                                   // Scene Store Request command
//  217   NULL,                                   // Scene Recall Request command
//  218   NULL,                                   // Scene Response command
//  219 #endif
//  220 #if ZCL_ALARMS
//  221   NULL,                                   // Alarm (Response) commands
//  222 #endif
//  223 #ifdef SE_UK_EXT
//  224   NULL,                                   // Get Event Log command
//  225   NULL,                                   // Publish Event Log command
//  226 #endif
//  227   NULL,                                   // RSSI Location command
//  228   NULL                                    // RSSI Location Response command
//  229 };
//  230 
//  231 // ZLL Command Callbacks table

        RSEG XDATA_I:XDATA:NOROOT(0)
//  232 static zclLL_AppCallbacks_t zllSampleBridge_LLCmdCBs =
zllSampleBridge_LLCmdCBs:
        DATA8
        DS 10
        REQUIRE `?<Initializer for zllSampleBridge_LLCmdCBs>`
        REQUIRE __INIT_XDATA_I
//  233 {
//  234   // Received Server Commands
//  235   zllSampleBridge_GetGrpIDsReqCB,         // Get Group Identifiers Request command
//  236   zllSampleBridge_GetEPListReqCB,         // Get Endpoint List Request command
//  237 
//  238   // Received Client Commands
//  239   zllSampleBridge_GetEndpointInfoCB,      // Endpoint Information command
//  240   NULL,                                   // Get Group Identifiers Response command
//  241   NULL                                    // Get Endpoint List Response command
//  242 };
//  243 
//  244 /*********************************************************************
//  245  * @fn          zllSampleBridge_Init
//  246  *
//  247  * @brief       Initialization function for the Sample Bridge App task.
//  248  *
//  249  * @param       task_id
//  250  *
//  251  * @return      none
//  252  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  253 void zllSampleBridge_Init( byte task_id )
zllSampleBridge_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function zllSampleBridge_Init
        CODE
//  254 {
        FUNCALL zllSampleBridge_Init, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_Init, zll_ItemInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_Init, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_Init, zll_ItemInit
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_Init, zclGeneral_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_Init, zclLL_RegisterCmdCallbacks
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_Init, zcl_registerAttrList
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_Init, zllInitiator_RegisterForMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_Init, zllInitiator_RegisterApp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_Init, zllInitiator_RegisterIdentifyCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_Init, zllInitiator_RegisterNotifyTLCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_Init, zllInitiator_RegisterResetAppCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_Init, zllInitiator_InitDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
//  255   zllSampleBridge_TaskID = task_id;
        MOV     DPTR,#zllSampleBridge_TaskID
        MOVX    @DPTR,A
//  256 
//  257   // Set destination address to indirect
//  258   zllSampleBridge_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#zllSampleBridge_DstAddr + 8
        CLR     A
        MOVX    @DPTR,A
//  259   zllSampleBridge_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  260   zllSampleBridge_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#zllSampleBridge_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_26:
        LCALL   ??osal_memset?relay
        ; Setup parameters for call to function zll_ItemInit
        MOV     ?V0 + 0,#linkedTargets & 0xff
        MOV     ?V0 + 1,#(linkedTargets >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x50
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   ??zll_ItemInit?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     DPTR,#linkedAddrNum
        CLR     A
        MOVX    @DPTR,A
        MOV     R1,A
??zllSampleBridge_Init_0:
        MOV     ?V0 + 0,R1
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,#linkedTargets & 0xff
        ADD     A,?V0 + 0
        MOV     DPL,A
        MOV     A,#(linkedTargets >> 8) & 0xff
        ADDC    A,?V0 + 1
        MOV     DPH,A
        MOVX    A,@DPTR
        CPL     A
        JNZ     ??zllSampleBridge_Init_1
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??zllSampleBridge_Init_1:
        JZ      ??zllSampleBridge_Init_2
        MOV     DPTR,#linkedAddrNum
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
??zllSampleBridge_Init_2:
        INC     R1
        MOV     A,R1
        CLR     C
        SUBB    A,#0xa
        JC      ??zllSampleBridge_Init_0
        MOV     DPTR,#linkedAddrNum
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0xa
        JNC     ??zllSampleBridge_Init_3
        MOVX    A,@DPTR
        MOV     DPTR,#linkedAddrNextIdx
        MOVX    @DPTR,A
??zllSampleBridge_Init_3:
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,#controlledGroups & 0xff
        MOV     R3,#(controlledGroups >> 8) & 0xff
        LCALL   ??osal_memset?relay
        ; Setup parameters for call to function zll_ItemInit
        MOV     ?V0 + 0,#controlledGroups & 0xff
        MOV     ?V0 + 1,#(controlledGroups >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#0x2
        MOV     R3,#0x4
        LCALL   ??zll_ItemInit?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  261 
//  262   // init linked list in NV
//  263   zllSampleBridge_InitLinkedTargets();
//  264 
//  265   // Register the ZCL General Cluster Library callback functions
//  266   zclGeneral_RegisterCmdCallbacks( SAMPLEBRIDGE_ENDPOINT, &zllSampleBridge_GenCmdCBs );
        ; Setup parameters for call to function zclGeneral_RegisterCmdCallbacks
        MOV     R2,#zllSampleBridge_GenCmdCBs & 0xff
        MOV     R3,#(zllSampleBridge_GenCmdCBs >> 8) & 0xff
        MOV     R1,#0xb
        LCALL   ??zclGeneral_RegisterCmdCallbacks?relay
//  267 
//  268   // Register for ZCL Light Link Cluster Library callback functions
//  269   zclLL_RegisterCmdCallbacks( SAMPLEBRIDGE_ENDPOINT, &zllSampleBridge_LLCmdCBs );
        ; Setup parameters for call to function zclLL_RegisterCmdCallbacks
        MOV     R2,#zllSampleBridge_LLCmdCBs & 0xff
        MOV     R3,#(zllSampleBridge_LLCmdCBs >> 8) & 0xff
        MOV     R1,#0xb
        LCALL   ??zclLL_RegisterCmdCallbacks?relay
//  270 
//  271   // Register the application's attribute list
//  272   zcl_registerAttrList( SAMPLEBRIDGE_ENDPOINT, SAMPLEBRIDGE_MAX_ATTRIBUTES, zllSampleBridge_Attrs );
        ; Setup parameters for call to function zcl_registerAttrList
        MOV     R4,#zllSampleBridge_Attrs & 0xff
        MOV     R5,#(zllSampleBridge_Attrs >> 8) & 0xff
        MOV     R2,#0xa
        MOV     R1,#0xb
        LCALL   ??zcl_registerAttrList?relay
//  273 
//  274   // Register the Application to receive the unprocessed Foundation command/response messages
//  275   zllInitiator_RegisterForMsg( zllSampleBridge_TaskID );
        ; Setup parameters for call to function zllInitiator_RegisterForMsg
        MOV     DPTR,#zllSampleBridge_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??zllInitiator_RegisterForMsg?relay
//  276 
//  277   // Register the application for ZDO messages for device discovery
//  278   ZDO_RegisterForZDOMsg( zllSampleBridge_TaskID, Device_annce );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x13
        MOV     R3,#0x0
        MOV     DPTR,#zllSampleBridge_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  279   ZDO_RegisterForZDOMsg( zllSampleBridge_TaskID, Active_EP_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x5
        MOV     R3,#-0x80
        MOV     DPTR,#zllSampleBridge_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  280   ZDO_RegisterForZDOMsg( zllSampleBridge_TaskID, Simple_Desc_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x4
        MOV     R3,#-0x80
        MOV     DPTR,#zllSampleBridge_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  281 
//  282   // Register for all key events - This app will handle all key events
//  283   RegisterForKeys( zllSampleBridge_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#zllSampleBridge_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  284 
//  285   zllInitiator_RegisterApp( &zllSampleBridge_SimpleDesc, &zllSampleBridge_DeviceInfo );
        ; Setup parameters for call to function zllInitiator_RegisterApp
        MOV     R4,#zllSampleBridge_DeviceInfo & 0xff
        MOV     R5,#(zllSampleBridge_DeviceInfo >> 8) & 0xff
        MOV     R2,#zllSampleBridge_SimpleDesc & 0xff
        MOV     R3,#(zllSampleBridge_SimpleDesc >> 8) & 0xff
        LCALL   ??zllInitiator_RegisterApp?relay
//  286 
//  287   zllInitiator_RegisterIdentifyCB( zllSampleBridge_IdentifyCB );
        ; Setup parameters for call to function zllInitiator_RegisterIdentifyCB
        MOV     R2,#??zllSampleBridge_IdentifyCB?relay & 0xff
        MOV     R3,#(??zllSampleBridge_IdentifyCB?relay >> 8) & 0xff
        LCALL   ??zllInitiator_RegisterIdentifyCB?relay
//  288 
//  289   zllInitiator_RegisterNotifyTLCB( zllSampleBridge_ProcessTL );
        ; Setup parameters for call to function zllInitiator_RegisterNotifyTLCB
        MOV     R2,#??zllSampleBridge_ProcessTL?relay & 0xff
        MOV     R3,#(??zllSampleBridge_ProcessTL?relay >> 8) & 0xff
        LCALL   ??zllInitiator_RegisterNotifyTLCB?relay
//  290 
//  291   zllInitiator_RegisterResetAppCB ( zllSampleBridge_BasicResetCB );
        ; Setup parameters for call to function zllInitiator_RegisterResetAppCB
        MOV     R2,#??zllSampleBridge_BasicResetCB?relay & 0xff
        MOV     R3,#(??zllSampleBridge_BasicResetCB?relay >> 8) & 0xff
        LCALL   ??zllInitiator_RegisterResetAppCB?relay
//  292 
//  293   zllInitiator_InitDevice();
        ; Setup parameters for call to function zllInitiator_InitDevice
        LCALL   ??zllInitiator_InitDevice?relay
//  294 
//  295 }
        SJMP    ??Subroutine30_0
          CFI EndBlock cfiBlock0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock1
        REQUIRE ??Subroutine30_0
        ; // Fall through to label ??Subroutine30_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine30_0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  296 
//  297 /*********************************************************************
//  298  * @fn          zclSample_event_loop
//  299  *
//  300  * @brief       Event Loop Processor for the Sample Bridge App task.
//  301  *
//  302  * @param       task_id
//  303  * @param       events - events bitmap
//  304  *
//  305  * @return      unprocessed events bitmap
//  306  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  307 uint16 zllSampleBridge_event_loop( uint8 task_id, uint16 events )
zllSampleBridge_event_loop:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function zllSampleBridge_event_loop
        CODE
//  308 {
        FUNCALL zllSampleBridge_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_event_loop, zllSampleBridge_ProcessAppMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_event_loop, zllSampleBridge_ProcessInReadRspCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_event_loop, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_event_loop, zllSampleBridge_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_event_loop, zllSampleBridge_ProcessZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_event_loop, zllSampleBridge_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_event_loop, zllSampleBridge_SendActiveEPReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  309   (void)task_id;  // Intentionally unreferenced parameter
//  310 
//  311   if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??zllSampleBridge_event_loop_0 & 0xFFFF
//  312   {
//  313     afIncomingMSGPacket_t *pMsg;
//  314 
//  315     if ( (pMsg = (afIncomingMSGPacket_t *)osal_msg_receive( zllSampleBridge_TaskID )) )
        ; Setup parameters for call to function osal_msg_receive
        MOV     DPTR,#zllSampleBridge_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??zllSampleBridge_event_loop_1 & 0xFFFF
//  316     {
//  317       switch ( pMsg->hdr.event )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#-0x23
        JZ      ??zllSampleBridge_event_loop_2
        ADD     A,#-0x11
        JZ      ??zllSampleBridge_event_loop_3
        ADD     A,#0x74
        JZ      ??zllSampleBridge_event_loop_4
        ADD     A,#-0x13
        JZ      ??zllSampleBridge_event_loop_5
        SJMP    ??zllSampleBridge_event_loop_6
//  318       {
//  319 #if defined (MT_APP_FUNC)
//  320         case MT_SYS_APP_MSG:
//  321           // Message received from MT
//  322          zllSampleBridge_ProcessAppMsg( ((mtSysAppMsg_t *)pMsg)->endpoint,
//  323                                         ((mtSysAppMsg_t *)pMsg)->appDataLen,
//  324                                         ((mtSysAppMsg_t *)pMsg)->appData );
??zllSampleBridge_event_loop_2:
        ; Setup parameters for call to function zllSampleBridge_ProcessAppMsg
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_37:
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_53:
        LCALL   ??zllSampleBridge_ProcessAppMsg?relay
//  325           break;
        SJMP    ??zllSampleBridge_event_loop_6
//  326 #endif
//  327         case ZCL_INCOMING_MSG:
//  328           // Incoming ZCL Foundation command/response messages
//  329           zllSampleBridge_ProcessIncomingMsg( (zclIncomingMsg_t *)pMsg );
??zllSampleBridge_event_loop_3:
        MOV     A,R6
        ADD     A,#0x17
        MOV     R0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        DEC     A
        JZ      ??zllSampleBridge_event_loop_7
        ADD     A,#-0x3
        JNZ     ??zllSampleBridge_event_loop_8
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_66:
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     R1,#0x0
??zllSampleBridge_event_loop_9:
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R1
        CLR     C
        SUBB    A,R0
        JNC     ??zllSampleBridge_event_loop_8
        INC     R1
        SJMP    ??zllSampleBridge_event_loop_9
??zllSampleBridge_event_loop_7:
        ; Setup parameters for call to function zllSampleBridge_ProcessInReadRspCmd
        LCALL   ??zllSampleBridge_ProcessInReadRspCmd?relay
??zllSampleBridge_event_loop_8:
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_41:
        JZ      ??zllSampleBridge_event_loop_6
        ; Setup parameters for call to function osal_mem_free
        LCALL   ??osal_mem_free?relay
        SJMP    ??zllSampleBridge_event_loop_6
//  330           break;
//  331 
//  332         case KEY_CHANGE:
//  333           zllSampleBridge_HandleKeys( ((keyChange_t *)pMsg)->state, ((keyChange_t *)pMsg)->keys );
??zllSampleBridge_event_loop_4:
        ; Setup parameters for call to function zllSampleBridge_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine25 & 0xFFFF
??CrossCallReturnLabel_54:
        LCALL   ??zllSampleBridge_HandleKeys?relay
//  334           break;
        SJMP    ??zllSampleBridge_event_loop_6
//  335 
//  336         case ZDO_CB_MSG:
//  337           // ZDO sends the message that we registered for
//  338           zllSampleBridge_ProcessZDOMsg( (zdoIncomingMsg_t *)pMsg );
??zllSampleBridge_event_loop_5:
        ; Setup parameters for call to function zllSampleBridge_ProcessZDOMsg
        LCALL   ??zllSampleBridge_ProcessZDOMsg?relay
//  339           break;
//  340 
//  341         default:
//  342           break;
//  343       }
//  344 
//  345       // Release the memory
//  346       osal_msg_deallocate( (uint8 *)pMsg );
??zllSampleBridge_event_loop_6:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  347     }
//  348 
//  349     // return unprocessed events
//  350     return (events ^ SYS_EVENT_MSG);
??zllSampleBridge_event_loop_1:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??zllSampleBridge_event_loop_10
//  351   }
//  352 
//  353   if ( events & SAMPLEBRIDGE_IDENTIFY_TIMEOUT_EVT )
??zllSampleBridge_event_loop_0:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        JNC     ??zllSampleBridge_event_loop_11
//  354   {
//  355     if ( zllSampleBridge_IdentifyTime > 0 )
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_64:
        JZ      ??zllSampleBridge_event_loop_12
//  356       zllSampleBridge_IdentifyTime--;
        MOV     DPTR,#zllSampleBridge_IdentifyTime
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
//  357     zllSampleBridge_ProcessIdentifyTimeChange();
??zllSampleBridge_event_loop_12:
        ; Setup parameters for call to function zllSampleBridge_ProcessIdentifyTimeChange
        LCALL   ??zllSampleBridge_ProcessIdentifyTimeChange?rel
//  358 
//  359     return ( events ^ SAMPLEBRIDGE_IDENTIFY_TIMEOUT_EVT );
        MOV     A,?V0 + 0
        XRL     A,#0x1
        SJMP    ??zllSampleBridge_event_loop_13
//  360   }
//  361 
//  362   if ( events & SAMPLEBRIDGE_DEV_ANNCE_EVT )
??zllSampleBridge_event_loop_11:
        ANL     A,#0x2
        JZ      ??zllSampleBridge_event_loop_14
//  363   {
//  364     if ( lastDevAnnceAddr != INVALID_NODE_ADDR )
        MOV     DPTR,#lastDevAnnceAddr
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??zllSampleBridge_event_loop_15
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??zllSampleBridge_event_loop_15:
        JZ      ??zllSampleBridge_event_loop_16
//  365     {
//  366       zllSampleBridge_SendActiveEPReq( lastDevAnnceAddr );
        ; Setup parameters for call to function zllSampleBridge_SendActiveEPReq
        MOV     DPTR,#lastDevAnnceAddr
        LCALL   ??Subroutine33_0 & 0xFFFF
??CrossCallReturnLabel_79:
        LCALL   ??zllSampleBridge_SendActiveEPReq?relay
//  367       lastDevAnnceAddr = INVALID_NODE_ADDR;
        MOV     DPTR,#lastDevAnnceAddr
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
//  368     }
//  369     return  ( events ^ SAMPLEBRIDGE_DEV_ANNCE_EVT );
??zllSampleBridge_event_loop_16:
        MOV     A,?V0 + 0
        XRL     A,#0x2
??zllSampleBridge_event_loop_13:
        MOV     R2,A
        MOV     R3,?V0 + 1
        SJMP    ??zllSampleBridge_event_loop_10
//  370   }
//  371 
//  372   // Discard unknown events
//  373   return 0;
??zllSampleBridge_event_loop_14:
        MOV     R2,#0x0
        MOV     R3,#0x0
          CFI EndBlock cfiBlock3
??zllSampleBridge_event_loop_10:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  374 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine25:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function zllSampleBridge_event_loop
          CFI Conditional ??CrossCallReturnLabel_53
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function zllSampleBridge_event_loop
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_54
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+0
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine20:
          CFI Block cfiCond8 Using cfiCommon0
          CFI Function zllSampleBridge_event_loop
          CFI Conditional ??CrossCallReturnLabel_64
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function zllSampleBridge_ProcessIdentifyTimeChange
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond9) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond9) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond9) CFA_SP SP+-5
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        MOV     DPTR,#zllSampleBridge_IdentifyTime
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10
        REQUIRE ??Subroutine31_0
        ; // Fall through to label ??Subroutine31_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine31_0:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function zllSampleBridge_GetGrpIDsReqCB
          CFI Conditional ??CrossCallReturnLabel_63
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function zllSampleBridge_event_loop
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+0
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond13 Using cfiCommon0
          CFI (cfiCond13) Function zllSampleBridge_ProcessIdentifyTimeChange
          CFI (cfiCond13) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond13) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond13) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond13) CFA_SP SP+-5
          CFI Block cfiPicker14 Using cfiCommon1
          CFI (cfiPicker14) NoFunction
          CFI (cfiPicker14) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiCond13
          CFI EndBlock cfiPicker14
//  375 
//  376 /*********************************************************************
//  377  * @fn      zllSampleBridge_ProcessTL
//  378  *
//  379  * @brief   Process notification data of target being touch-linked:
//  380  *          - Add target to linked targets list
//  381  *          - Provide user notification
//  382  *          - initiate post-TL procedures (send EP Info to end-device)
//  383  *
//  384  * @param   pRec - Target's enpoint information record
//  385  *
//  386  * @return  status
//  387  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  388 static ZStatus_t zllSampleBridge_ProcessTL( epInfoRec_t *pRec )
zllSampleBridge_ProcessTL:
          CFI Block cfiBlock15 Using cfiCommon0
          CFI Function zllSampleBridge_ProcessTL
        CODE
//  389 {
        FUNCALL zllSampleBridge_ProcessTL, zllSampleBridge_UpdateLinkedTarget
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessTL, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessTL, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessTL, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessTL, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessTL, zllInitiator_SendEPInfo
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  390   zllSampleBridge_DstAddr.endPoint = pRec->endpoint;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#zllSampleBridge_DstAddr + 9
        MOVX    @DPTR,A
//  391   zllSampleBridge_DstAddr.addrMode = afAddr16Bit;
        MOV     DPTR,#zllSampleBridge_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  392   zllSampleBridge_DstAddr.addr.shortAddr = pRec->nwkAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_67:
        MOV     DPTR,#zllSampleBridge_DstAddr
        LCALL   ?Subroutine9 & 0xFFFF
//  393 #if defined( INTER_PAN )
//  394   zllSampleBridge_DstAddr.panId = _NIB.nwkPanId;
??CrossCallReturnLabel_13:
        MOV     DPTR,#zllSampleBridge_DstAddr + 10
        LCALL   ?Subroutine10 & 0xFFFF
//  395 #endif
//  396 
//  397   zllSampleBridge_UpdateLinkedTarget( pRec );
??CrossCallReturnLabel_15:
        ; Setup parameters for call to function zllSampleBridge_UpdateLinkedTarget
        LCALL   ??zllSampleBridge_UpdateLinkedTarget?relay
//  398 
//  399 #if ( HAL_LED == TRUE )
//  400   // Light LED
//  401   HalLedSet( HAL_LED_2, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x2
        LCALL   ??HalLedSet?relay
//  402   HalLedSet( HAL_LED_1, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x1
        LCALL   ??HalLedSet?relay
//  403 #endif
//  404 
//  405   //check if this is a light.
//  406   if( pRec->deviceID < ZLL_DEVICEID_COLOR_CONTORLLER )
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine16 & 0xFFFF
??CrossCallReturnLabel_38:
        INC     DPTR
        INC     DPTR
        CLR     C
        INC     DPTR
        MOVX    A,@DPTR
        SUBB    A,#0x8
        MOV     ?V0 + 0,#0x3
        MOV     R0,#?V0 + 0
        JNC     ??zllSampleBridge_ProcessTL_0
//  407   {
//  408     HalLcdWriteStringValue( "TL Light:", pRec->nwkAddr, 16, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteStringValue
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R1,#0x10
        MOV     R2,#`?<Constant "TL Light:">` & 0xff
        MOV     R3,#(`?<Constant "TL Light:">` >> 8) & 0xff
        LCALL   ??HalLcdWriteStringValue?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        SJMP    ??zllSampleBridge_ProcessTL_1
//  409   }
//  410   else
//  411   {
//  412     HalLcdWriteStringValue( "TL Ctrlr:", pRec->nwkAddr, 16, HAL_LCD_LINE_3 );
??zllSampleBridge_ProcessTL_0:
        ; Setup parameters for call to function HalLcdWriteStringValue
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     R1,#0x10
        MOV     R2,#`?<Constant "TL Ctrlr:">` & 0xff
        MOV     R3,#(`?<Constant "TL Ctrlr:">` >> 8) & 0xff
        LCALL   ??HalLcdWriteStringValue?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
//  413 
//  414 #ifdef ZLL_UTILITY_SEND_EPINFO_ENABLED
//  415     zllInitiator_SendEPInfo( SAMPLEBRIDGE_ENDPOINT, &zllSampleBridge_DstAddr, sampleBridgeSeqNum++ );
        MOV     DPTR,#sampleBridgeSeqNum
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0x1
        ADD     A,R4
        MOVX    @DPTR,A
        ; Setup parameters for call to function zllInitiator_SendEPInfo
        MOV     R2,#zllSampleBridge_DstAddr & 0xff
        MOV     R3,#(zllSampleBridge_DstAddr >> 8) & 0xff
        MOV     R1,#0xb
        LCALL   ??zllInitiator_SendEPInfo?relay
//  416 #endif //ZLL_UTILITY_SEND_EPINFO_ENABLED
//  417   }
//  418 
//  419   return ( ZSuccess );
??zllSampleBridge_ProcessTL_1:
        MOV     R1,#0x0
          CFI EndBlock cfiBlock15
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2
//  420 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock16 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine16:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function zllSampleBridge_event_loop
          CFI Conditional ??CrossCallReturnLabel_37
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function zllSampleBridge_ProcessTL
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+0
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19
//  421 
//  422 /*********************************************************************
//  423  * @fn      zllSampleBridge_UpdateLinkedTarget
//  424  *
//  425  * @brief   Add or update target in linked targets list
//  426  *
//  427  * @param   pRec - Target's enpoint information record
//  428  *
//  429  * @return  status
//  430  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  431 static ZStatus_t zllSampleBridge_UpdateLinkedTarget( epInfoRec_t *pRec )
zllSampleBridge_UpdateLinkedTarget:
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function zllSampleBridge_UpdateLinkedTarget
        CODE
//  432 {
        FUNCALL zllSampleBridge_UpdateLinkedTarget, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xb
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
        ; Saved register size: 11
        ; Auto size: 0
//  433   uint8 idx;
//  434   ZStatus_t status = ZSuccess;
//  435   for ( idx = 0; idx < MAX_LINKED_TARGETS; idx++ )
        MOV     ?V0 + 2,#0x0
        MOV     A,R2
        ADD     A,#0x2
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
//  436   {
//  437     if ( ( linkedTargets.arr[idx].Addr == pRec->nwkAddr )
//  438         && ( linkedTargets.arr[idx].EP == pRec->endpoint ) )
??zllSampleBridge_UpdateLinkedTarget_0:
        MOV     ?V0 + 0,?V0 + 2
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        LCALL   ?Subroutine14 & 0xFFFF
//  439     {
//  440       break; // found existing entry, overwrite.
//  441     }
//  442   }
??CrossCallReturnLabel_32:
        MOV     DPL,R0
        MOV     DPH,R1
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        XRL     A,R6
        JNZ     ??zllSampleBridge_UpdateLinkedTarget_1
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R7
??zllSampleBridge_UpdateLinkedTarget_1:
        JNZ     ??zllSampleBridge_UpdateLinkedTarget_2
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        XRL     A,R0
        JZ      ??zllSampleBridge_UpdateLinkedTarget_3
??zllSampleBridge_UpdateLinkedTarget_2:
        INC     ?V0 + 2
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,#0xa
        JC      ??zllSampleBridge_UpdateLinkedTarget_0
//  443   //this target is not in our records
//  444   if ( idx == MAX_LINKED_TARGETS )
??zllSampleBridge_UpdateLinkedTarget_3:
        MOV     A,#0xa
        XRL     A,?V0 + 2
        JNZ     ??zllSampleBridge_UpdateLinkedTarget_4
//  445   {
//  446     idx = linkedAddrNextIdx;
        MOV     DPTR,#linkedAddrNextIdx
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
//  447     linkedAddrNextIdx++;
        INC     A
        MOVX    @DPTR,A
//  448     if( linkedAddrNextIdx > (MAX_LINKED_TARGETS-1) )
        CLR     C
        SUBB    A,#0xa
        JC      ??zllSampleBridge_UpdateLinkedTarget_5
//  449     {
//  450       //wrap around and overwrite previous address
//  451       linkedAddrNextIdx = 0;
        CLR     A
        MOVX    @DPTR,A
//  452     }
//  453     if ( linkedAddrNum < MAX_LINKED_TARGETS )
??zllSampleBridge_UpdateLinkedTarget_5:
        MOV     DPTR,#linkedAddrNum
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0xa
        JNC     ??zllSampleBridge_UpdateLinkedTarget_4
//  454     {
//  455       linkedAddrNum++;
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  456     }
//  457   }
//  458   linkedTargets.arr[idx].Addr = pRec->nwkAddr;
??zllSampleBridge_UpdateLinkedTarget_4:
        MOV     ?V0 + 0,?V0 + 2
        MOV     ?V0 + 1,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        LCALL   ?Subroutine14 & 0xFFFF
??CrossCallReturnLabel_33:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_34:
        LCALL   ?Subroutine27 & 0xFFFF
//  459   linkedTargets.arr[idx].profileID = pRec->profileID;
??CrossCallReturnLabel_57:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_35:
        LCALL   ?Subroutine5 & 0xFFFF
//  460   linkedTargets.arr[idx].deviceID = pRec->deviceID;
??CrossCallReturnLabel_2:
        LCALL   ?Subroutine15 & 0xFFFF
??CrossCallReturnLabel_36:
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine5 & 0xFFFF
//  461   linkedTargets.arr[idx].deviceVersion = pRec->version;
??CrossCallReturnLabel_3:
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_49:
        MOVX    @DPTR,A
//  462   linkedTargets.arr[idx].EP = pRec->endpoint;
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine23 & 0xFFFF
??CrossCallReturnLabel_50:
        INC     DPTR
        MOVX    @DPTR,A
//  463   linkedAddrSelIdx = idx;
        MOV     A,?V0 + 2
        MOV     DPTR,#linkedAddrSelIdx
        MOVX    @DPTR,A
//  464 
//  465   // update linkedAddr in NV
//  466 #if defined ( NV_RESTORE )
//  467   osal_nv_write( ZCD_NV_ZLL_BRIDGE_LINK_TARGETS, 0, sizeof( linkedTargets ), &linkedTargets );
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#linkedTargets & 0xff
        MOV     ?V0 + 1,#(linkedTargets >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 0,#0x50
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 11)
//  468 #endif
//  469   return status;
        MOV     R1,#0x0
        MOV     R7,#0x3
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock20
//  470 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine23:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function zllSampleBridge_UpdateLinkedTarget
          CFI Conditional ??CrossCallReturnLabel_49
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function zllSampleBridge_UpdateLinkedTarget
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_50
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+0
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        MOVX    A,@DPTR
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine15:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function zllSampleBridge_UpdateLinkedTarget
          CFI Conditional ??CrossCallReturnLabel_34
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function zllSampleBridge_UpdateLinkedTarget
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+0
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond26 Using cfiCommon0
          CFI (cfiCond26) Function zllSampleBridge_UpdateLinkedTarget
          CFI (cfiCond26) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond26) CFA_SP SP+0
          CFI (cfiCond26) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker27 Using cfiCommon1
          CFI (cfiPicker27) NoFunction
          CFI (cfiPicker27) Picker
        MOVX    A,@DPTR
        MOV     R6,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R7,A
        MOV     DPL,R0
        MOV     DPH,R1
        RET
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiCond26
          CFI EndBlock cfiPicker27

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine14:
          CFI Block cfiCond28 Using cfiCommon0
          CFI Function zllSampleBridge_UpdateLinkedTarget
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function zllSampleBridge_UpdateLinkedTarget
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+0
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker30 Using cfiCommon1
          CFI (cfiPicker30) NoFunction
          CFI (cfiPicker30) Picker
        MOV     A,#linkedTargets & 0xff
        ADD     A,?V0 + 0
        MOV     R0,A
        MOV     A,#(linkedTargets >> 8) & 0xff
        ADDC    A,?V0 + 1
        MOV     R1,A
        RET
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiPicker30

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond31 Using cfiCommon0
          CFI Function zllSampleBridge_UpdateLinkedTarget
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function zllSampleBridge_UpdateLinkedTarget
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+0
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker33 Using cfiCommon1
          CFI (cfiPicker33) NoFunction
          CFI (cfiPicker33) Picker
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine27 & 0xFFFF
??CrossCallReturnLabel_58:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiPicker33

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine27:
          CFI Block cfiCond34 Using cfiCommon0
          CFI Function zllSampleBridge_UpdateLinkedTarget
          CFI Conditional ??CrossCallReturnLabel_57
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function zllSampleBridge_UpdateLinkedTarget
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_2
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+0
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function zllSampleBridge_UpdateLinkedTarget
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_58, ??CrossCallReturnLabel_3
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+0
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 11)
          CFI Block cfiPicker37 Using cfiCommon1
          CFI (cfiPicker37) NoFunction
          CFI (cfiPicker37) Picker
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiPicker37
//  471 
//  472 /*********************************************************************
//  473  * @fn      zllSampleBridge_InitLinkedTargets()
//  474  *
//  475  * @brief   Initialize linked targets and controlled groups lists in NV.
//  476  *
//  477  * @param   none
//  478  *
//  479  * @return  none
//  480  */
//  481 static void zllSampleBridge_InitLinkedTargets( void )
//  482 {
//  483   uint8 i;
//  484   osal_memset( &linkedTargets, 0xFF, sizeof(linkedTargets));
//  485   zll_ItemInit( ZCD_NV_ZLL_BRIDGE_LINK_TARGETS, sizeof(zllBridgeLinkedTargetList_t), &linkedTargets );
//  486   linkedAddrNum = 0;
//  487   for (i = 0; i < MAX_LINKED_TARGETS; i++ )
//  488   {
//  489     if ( linkedTargets.arr[i].Addr != 0xFFFF )
//  490     {
//  491       linkedAddrNum++;
//  492     }
//  493   }
//  494   if ( linkedAddrNum < MAX_LINKED_TARGETS )
//  495   {
//  496     linkedAddrNextIdx = linkedAddrNum;
//  497   }
//  498   // init controlled groups list
//  499   osal_memset( &controlledGroups, 0x00, sizeof(controlledGroups));
//  500   zll_ItemInit( ZCD_NV_ZLL_BRIDGE_CTRL_GROUPS, sizeof(zllBridgeControlledGroupsList_t), &controlledGroups );
//  501 }
//  502 
//  503 #if defined ( MT_APP_FUNC )
//  504 /*********************************************************************
//  505  * @fn      zllSampleBridge_ProcessAppMsg
//  506  *
//  507  * @brief   Process Test messages
//  508  *
//  509  * @param   srcEP - Sending Apps endpoint
//  510  * @param   len - number of bytes
//  511  * @param   msg - pointer to message
//  512  *          0 - lo byte destination address
//  513  *          1 - hi byte destination address
//  514  *          2 - destination endpoint
//  515  *          3 - lo byte cluster ID
//  516  *          4 - hi byte cluster ID
//  517  *          5 - message length
//  518  *          6 - destination address mode (first byte of data)
//  519  *          7 - zcl command frame
//  520  *
//  521  * @return  none
//  522  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  523 static void zllSampleBridge_ProcessAppMsg( uint8 srcEP, uint8 len, uint8 *msg )
zllSampleBridge_ProcessAppMsg:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function zllSampleBridge_ProcessAppMsg
        CODE
//  524 {
        FUNCALL zllSampleBridge_ProcessAppMsg, zclParseHdr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 36, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 36, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessAppMsg, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x12
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 18)
        ; Saved register size: 18
        ; Auto size: 18
        MOV     A,#-0x12
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
        MOV     ?V0 + 2,R1
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  525   afAddrType_t dstAddr;
//  526   uint16 clusterID;
//  527   zclFrameHdr_t hdr;
//  528   uint8 *pData;
//  529   uint8 dataLen;
//  530 
//  531 #if defined( INTER_PAN )
//  532   dstAddr.panId = _NIB.nwkPanId;
        MOV     DPTR,#_NIB + 33
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_68:
        MOV     A,#0x10
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
//  533 #endif
//  534 
//  535   dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
??CrossCallReturnLabel_16:
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        MOV     R0,A
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
//  536   msg += 2;
??CrossCallReturnLabel_17:
        LCALL   ?Subroutine26 & 0xFFFF
//  537   dstAddr.endPoint = *msg++;
??CrossCallReturnLabel_55:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  538   clusterID = BUILD_UINT16( msg[0], msg[1] );
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R2
        ADD     A,#0x0
        MOV     ?V0 + 0,A
        CLR     A
        ADDC    A,R1
        MOV     ?V0 + 1,A
//  539   msg += 2;
        LCALL   ?Subroutine26 & 0xFFFF
//  540   dataLen = *msg++; // Length of message (Z-Tool can support up to 255 octets)
??CrossCallReturnLabel_56:
        MOV     ?V0 + 8,A
        INC     DPTR
        INC     R6
        MOV     R7,DPH
//  541   dstAddr.addrMode = (afAddrMode_t)(*msg++);
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0xe
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     R6
//  542   dataLen--; // Length of ZCL frame
//  543 
//  544   // Begining of ZCL frame
//  545   pData = zclParseHdr( &hdr, msg );
        ; Setup parameters for call to function zclParseHdr
        MOV     A,R6
        MOV     R4,A
        MOV     R5,DPH
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??zclParseHdr?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 6,R2
        MOV     ?V0 + 7,R3
//  546   dataLen -= (uint8)( pData - msg );
        MOV     A,#-0x1
        ADD     A,?V0 + 8
        CLR     C
        SUBB    A,?V0 + 4
        ADD     A,R6
        MOV     ?V0 + 8,A
//  547 
//  548 #ifdef ZLL_TESTAPP
//  549     zllTestApp_ProcessAppMsg( srcEP, &dstAddr, clusterID, &hdr, dataLen, pData );
//  550 #else
//  551     if ( ZCL_CLUSTER_ID_LL( clusterID ) ||
//  552          ZCL_CLUSTER_ID_GEN( clusterID ) ||
//  553          ZCL_CLUSTER_ID_LIGHTING( clusterID ) )
        MOV     A,?V0 + 0
        JNZ     ??zllSampleBridge_ProcessAppMsg_0
        MOV     A,#0x10
        XRL     A,?V0 + 1
??zllSampleBridge_ProcessAppMsg_0:
        JZ      ??zllSampleBridge_ProcessAppMsg_1
        CLR     C
        MOV     A,?V0 + 0
        SUBB    A,#0x16
        MOV     A,?V0 + 1
        SUBB    A,#0x0
        JC      ??zllSampleBridge_ProcessAppMsg_1
        MOV     A,?V0 + 0
        ADD     A,#0x0
        MOV     R0,A
        MOV     A,?V0 + 1
        ADDC    A,#-0x3
        MOV     R1,A
        CLR     C
        MOV     A,R0
        SUBB    A,#0x2
        MOV     A,R1
        SUBB    A,#0x0
        JC      $+5
        LJMP    ??zllSampleBridge_ProcessAppMsg_2 & 0xFFFF
//  554     {
//  555       // send MT_APP ZCL command as-is
//  556 //      zcl_SendCommand( srcEP, &dstAddr, clusterID, hdr.commandID,
//  557 //                       (hdr.fc.type == ZCL_FRAME_TYPE_SPECIFIC_CMD),
//  558 //                       hdr.fc.direction, hdr.fc.disableDefaultRsp, hdr.manuCode,
//  559 //                       hdr.transSeqNum, dataLen, pData );
//  560       zcl_SendCommand( srcEP, &dstAddr, clusterID, hdr.commandID,
//  561                        (hdr.fc.type == ZCL_FRAME_TYPE_SPECIFIC_CMD),
//  562                        hdr.fc.direction, hdr.fc.disableDefaultRsp, hdr.manuCode,
//  563                        sampleBridgeSeqNum++, dataLen, pData );
??zllSampleBridge_ProcessAppMsg_1:
        MOV     DPTR,#sampleBridgeSeqNum
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#0x1
        ADD     A,R2
        LCALL   ?Subroutine7 & 0xFFFF
//  564     }
??CrossCallReturnLabel_8:
        ANL     A,#0x3
        XRL     A,#0x1
        JNZ     ??zllSampleBridge_ProcessAppMsg_3
        MOV     R3,#0x1
        SJMP    ??zllSampleBridge_ProcessAppMsg_4
??zllSampleBridge_ProcessAppMsg_3:
        MOV     R3,#0x0
??zllSampleBridge_ProcessAppMsg_4:
        ; Setup parameters for call to function zcl_SendCommand
        MOV     R0,#?V0 + 6
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 38)
        MOV     ?V0 + 9,#0x0
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 40)
        MOV     A,R2
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 41)
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 43)
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        SWAP    A
        ANL     A,#0xf
        ANL     A,#0x1
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 44)
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        RRC     A
        RRC     A
        RRC     A
        ANL     A,#0x1f
        ANL     A,#0x1
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 45)
        MOV     A,R3
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 46)
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 47)
        MOV     R4,?V0 + 0
        MOV     R5,?V0 + 1
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,?V0 + 2
        LCALL   ??zcl_SendCommand?relay
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 36)
//  565 #endif //ZLL_TESTAPP
//  566 }
??zllSampleBridge_ProcessAppMsg_2:
        MOV     A,#0x12
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R7,#0xa
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock38

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine26:
          CFI Block cfiCond39 Using cfiCommon0
          CFI Function zllSampleBridge_ProcessAppMsg
          CFI Conditional ??CrossCallReturnLabel_55
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond40 Using cfiCommon0
          CFI (cfiCond40) Function zllSampleBridge_ProcessAppMsg
          CFI (cfiCond40) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond40) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond40) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond40) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond40) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond40) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond40) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond40) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond40) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond40) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond40) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond40) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond40) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond40) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond40) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond40) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond40) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond40) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond40) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond40) CFA_SP SP+0
          CFI (cfiCond40) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiPicker41 Using cfiCommon1
          CFI (cfiPicker41) NoFunction
          CFI (cfiPicker41) Picker
        MOV     A,R6
        ADD     A,#0x2
        MOV     R6,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R7,A
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond39
          CFI EndBlock cfiCond40
          CFI EndBlock cfiPicker41
//  567 #endif // MT_APP_FUNC
//  568 
//  569 /*********************************************************************
//  570  * @fn      zllSampleBridge_HandleKeys
//  571  *
//  572  * @brief   Handles all key events for this device.
//  573  *
//  574  * @param   shift - true if in shift/alt.
//  575  * @param   keys - bit field for key events.
//  576  *
//  577  * @return  none
//  578  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  579 static void zllSampleBridge_HandleKeys( byte shift, byte keys )
zllSampleBridge_HandleKeys:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI Function zllSampleBridge_HandleKeys
        CODE
//  580 {
        FUNCALL zllSampleBridge_HandleKeys, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_HandleKeys, zllInitiator_ResetToFactoryNew
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_HandleKeys, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_HandleKeys, zllInitiator_StartDevDisc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_HandleKeys, zclGeneral_SendIdentify
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_HandleKeys, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_HandleKeys, zclGeneral_SendIdentify
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_HandleKeys, HalLcdWriteStringValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_HandleKeys, zllInitiator_BridgeStartNetwork
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_HandleKeys, zllInitiator_PermitJoin
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_HandleKeys, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_HandleKeys, zllInitiator_ClassicalCommissioningStart
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  581   if(shift)
        MOV     A,R6
        JZ      ??zllSampleBridge_HandleKeys_0
//  582   {
//  583     keys |= HAL_KEY_SW_6;
        MOV     A,R7
        SETB    0xE0 /* A   */.5
        MOV     R7,A
//  584   }
//  585 
//  586   if ( keys == ON_KEY )
??zllSampleBridge_HandleKeys_0:
        MOV     A,#0x1
        XRL     A,R7
        JNZ     ??zllSampleBridge_HandleKeys_1
//  587   {
//  588     zclGeneral_SendOnOff_CmdOn( SAMPLEBRIDGE_ENDPOINT, &zllSampleBridge_DstAddr, FALSE, sampleBridgeSeqNum++ );
        LCALL   ?Subroutine13 & 0xFFFF
//  589   }
??CrossCallReturnLabel_30:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R1
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        CLR     A
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        SJMP    ??zllSampleBridge_HandleKeys_2
          CFI CFA_XSP16 add(XSP16, 12)
//  590 
//  591   if ( keys == FACTORY_RESET_KEY )
??zllSampleBridge_HandleKeys_1:
        MOV     A,#0x2
        XRL     A,R7
        JNZ     ??zllSampleBridge_HandleKeys_3
//  592   {
//  593     zllInitiator_ResetToFactoryNew();
        ; Setup parameters for call to function zllInitiator_ResetToFactoryNew
        LCALL   ??zllInitiator_ResetToFactoryNew?relay
        LJMP    ??zllSampleBridge_HandleKeys_4 & 0xFFFF
//  594   }
//  595 
//  596   if ( keys == OFF_KEY )
??zllSampleBridge_HandleKeys_3:
        MOV     A,#0x10
        XRL     A,R7
        JNZ     ??zllSampleBridge_HandleKeys_5
//  597   {
//  598     zclGeneral_SendOnOff_CmdOff( SAMPLEBRIDGE_ENDPOINT, &zllSampleBridge_DstAddr, FALSE, sampleBridgeSeqNum++ );
        LCALL   ?Subroutine13 & 0xFFFF
//  599   }
??CrossCallReturnLabel_31:
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R1
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        CLR     A
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 0,#0x0
??zllSampleBridge_HandleKeys_2:
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R2,#zllSampleBridge_DstAddr & 0xff
        MOV     R3,#(zllSampleBridge_DstAddr >> 8) & 0xff
        MOV     R1,#0xb
        LCALL   ??zcl_SendCommand?relay
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        LJMP    ??zllSampleBridge_HandleKeys_4 & 0xFFFF
//  600 
//  601   if ( keys == TOUCH_LINK_KEY )
??zllSampleBridge_HandleKeys_5:
        MOV     A,#0x8
        XRL     A,R7
        JNZ     ??zllSampleBridge_HandleKeys_6
//  602   {
//  603     zllInitiator_StartDevDisc();
        ; Setup parameters for call to function zllInitiator_StartDevDisc
        LCALL   ??zllInitiator_StartDevDisc?relay
        LJMP    ??zllSampleBridge_HandleKeys_4 & 0xFFFF
//  604   }
//  605 
//  606   if ( keys == DEV_SEL_UP_KEY )
??zllSampleBridge_HandleKeys_6:
        MOV     ?V0 + 0,#`?<Constant "Dev Sel:">` & 0xff
        MOV     ?V0 + 1,#(`?<Constant "Dev Sel:">` >> 8) & 0xff
        MOV     A,#0x22
        XRL     A,R7
        JNZ     ??zllSampleBridge_HandleKeys_7
//  607   {
//  608     if ( linkedAddrNum > 0 )
        MOV     DPTR,#linkedAddrNum
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??zllSampleBridge_HandleKeys_8 & 0xFFFF
//  609     {
//  610       if( (linkedAddrSelIdx+1) >= linkedAddrNum )
        MOV     DPTR,#linkedAddrSelIdx
        MOVX    A,@DPTR
        ADD     A,#0x1
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPTR,#linkedAddrNum
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,R0
        SUBB    A,R2
        MOV     A,R1
        SUBB    A,#0x0
        CLR     C
        XRL     A,PSW
        RLC     A
        MOV     DPTR,#linkedAddrSelIdx
        JC      ??zllSampleBridge_HandleKeys_9
//  611       {
//  612         linkedAddrSelIdx = 0;
        CLR     A
        SJMP    ??zllSampleBridge_HandleKeys_10
//  613       }
//  614       else
//  615       {
//  616         linkedAddrSelIdx++;
??zllSampleBridge_HandleKeys_9:
        MOVX    A,@DPTR
        INC     A
        SJMP    ??zllSampleBridge_HandleKeys_10
//  617       }
//  618       zllSampleBridge_DstAddr.addrMode = afAddr16Bit;
//  619       zllSampleBridge_DstAddr.addr.shortAddr = linkedTargets.arr[linkedAddrSelIdx].Addr;
//  620       zllSampleBridge_DstAddr.endPoint =  linkedTargets.arr[linkedAddrSelIdx].EP;
//  621 
//  622       zclGeneral_SendIdentify( SAMPLEBRIDGE_ENDPOINT, &zllSampleBridge_DstAddr,
//  623                                SAMPLEBRIDGE_CMD_IDENTIFY_TIME, FALSE, sampleBridgeSeqNum++ );
//  624 
//  625       HalLcdWriteStringValue( "Dev Sel:", zllSampleBridge_DstAddr.addr.shortAddr, 16, HAL_LCD_LINE_3 );
//  626     }
//  627     else
//  628     {
//  629       HalLcdWriteString( "Dev Sel: no trgt", HAL_LCD_LINE_3 );
//  630     }
//  631   }
//  632 
//  633   if ( keys == DEV_SEL_DN_KEY )
??zllSampleBridge_HandleKeys_7:
        MOV     A,#0x28
        XRL     A,R7
        JZ      $+5
        LJMP    ??zllSampleBridge_HandleKeys_11 & 0xFFFF
//  634   {
//  635     if ( linkedAddrNum > 0 )
        MOV     DPTR,#linkedAddrNum
        MOVX    A,@DPTR
        JNZ     $+5
        LJMP    ??zllSampleBridge_HandleKeys_8 & 0xFFFF
//  636     {
//  637       if(linkedAddrSelIdx < 1)
        MOV     DPTR,#linkedAddrSelIdx
        MOVX    A,@DPTR
        JNZ     ??zllSampleBridge_HandleKeys_12
//  638       {
//  639         linkedAddrSelIdx = (linkedAddrNum-1);
        MOV     DPTR,#linkedAddrNum
        MOVX    A,@DPTR
        DEC     A
        MOV     DPTR,#linkedAddrSelIdx
        SJMP    ??zllSampleBridge_HandleKeys_10
//  640       }
//  641       else
//  642       {
//  643         linkedAddrSelIdx--;
??zllSampleBridge_HandleKeys_12:
        DEC     A
??zllSampleBridge_HandleKeys_10:
        MOVX    @DPTR,A
//  644       }
//  645       zllSampleBridge_DstAddr.addrMode = afAddr16Bit;
        MOV     DPTR,#zllSampleBridge_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  646       zllSampleBridge_DstAddr.addr.shortAddr = linkedTargets.arr[linkedAddrSelIdx].Addr;
        MOV     DPTR,#linkedAddrSelIdx
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 2
        LCALL   ?S_SHL
        MOV     A,#linkedTargets & 0xff
        ADD     A,?V0 + 2
        MOV     R0,A
        MOV     A,#(linkedTargets >> 8) & 0xff
        ADDC    A,?V0 + 3
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_84:
        MOV     DPTR,#zllSampleBridge_DstAddr
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        LCALL   ?Subroutine12 & 0xFFFF
//  647       zllSampleBridge_DstAddr.endPoint = linkedTargets.arr[linkedAddrSelIdx].EP;
??CrossCallReturnLabel_28:
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#zllSampleBridge_DstAddr + 9
        MOVX    @DPTR,A
//  648 
//  649       zclGeneral_SendIdentify( SAMPLEBRIDGE_ENDPOINT, &zllSampleBridge_DstAddr,
//  650                                SAMPLEBRIDGE_CMD_IDENTIFY_TIME, FALSE, sampleBridgeSeqNum++ );
        MOV     DPTR,#sampleBridgeSeqNum
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        ADD     A,R0
        MOVX    @DPTR,A
        ; Setup parameters for call to function zclGeneral_SendIdentify
        MOV     A,R0
        MOV     ?V0 + 2,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#zllSampleBridge_DstAddr & 0xff
        MOV     R3,#(zllSampleBridge_DstAddr >> 8) & 0xff
        MOV     R1,#0xb
        LCALL   ??zclGeneral_SendIdentify?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  651 
//  652       HalLcdWriteStringValue( "Dev Sel:", zllSampleBridge_DstAddr.addr.shortAddr, 16, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteStringValue
        MOV     ?V0 + 2,#0x3
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R1,#0x10
        MOV     DPTR,#zllSampleBridge_DstAddr
        LCALL   ?Subroutine22 & 0xFFFF
//  653     }
??CrossCallReturnLabel_44:
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??HalLcdWriteStringValue?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        SJMP    ??zllSampleBridge_HandleKeys_4
//  654     else
//  655     {
//  656       HalLcdWriteString( "Dev Sel: no trgt", HAL_LCD_LINE_3 );
??zllSampleBridge_HandleKeys_8:
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant "Dev Sel: no trgt">` & 0xff
        MOV     R3,#(`?<Constant "Dev Sel: no trgt">` >> 8) & 0xff
        SJMP    ??zllSampleBridge_HandleKeys_13
//  657     }
//  658   }
//  659 
//  660   if ( keys == PERMIT_JOIN_KEY )
??zllSampleBridge_HandleKeys_11:
        MOV     A,#0x30
        XRL     A,R7
        JNZ     ??zllSampleBridge_HandleKeys_14
//  661   {
//  662     if ( zllInitiator_BridgeStartNetwork() != ZSuccess )
        ; Setup parameters for call to function zllInitiator_BridgeStartNetwork
        LCALL   ??zllInitiator_BridgeStartNetwork?relay
        MOV     A,R1
        JZ      ??zllSampleBridge_HandleKeys_4
//  663     {
//  664       zllInitiator_PermitJoin( PERMIT_JOIN_DURATION );
        ; Setup parameters for call to function zllInitiator_PermitJoin
        MOV     R1,#0x3c
        LCALL   ??zllInitiator_PermitJoin?relay
//  665       HalLcdWriteString( "PermitJoin", HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x3
        MOV     R2,#`?<Constant "PermitJoin">` & 0xff
        MOV     R3,#(`?<Constant "PermitJoin">` >> 8) & 0xff
??zllSampleBridge_HandleKeys_13:
        LCALL   ??HalLcdWriteString?relay
        SJMP    ??zllSampleBridge_HandleKeys_4
//  666     }
//  667   }
//  668 
//  669   if ( keys == CLASSIC_COMMISS_KEY )
??zllSampleBridge_HandleKeys_14:
        MOV     A,#0x21
        XRL     A,R7
        JNZ     ??zllSampleBridge_HandleKeys_4
//  670   {
//  671     zllInitiator_ClassicalCommissioningStart();
        ; Setup parameters for call to function zllInitiator_ClassicalCommissioningStart
        LCALL   ??zllInitiator_ClassicalCommissioningStart?rela
//  672   }
//  673 
//  674 }
??zllSampleBridge_HandleKeys_4:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock42

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine13:
          CFI Block cfiCond43 Using cfiCommon0
          CFI Function zllSampleBridge_HandleKeys
          CFI Conditional ??CrossCallReturnLabel_30
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function zllSampleBridge_HandleKeys
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+0
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker45 Using cfiCommon1
          CFI (cfiPicker45) NoFunction
          CFI (cfiPicker45) Picker
        MOV     DPTR,#sampleBridgeSeqNum
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        ADD     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function zcl_SendCommand
        ; Setup parameters for call to function zcl_SendCommand
        CLR     A
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        RET
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiPicker45
//  675 
//  676 /*********************************************************************
//  677  * @fn      zllSampleBridge_ProcessIdentifyTimeChange
//  678  *
//  679  * @brief   Called to process any change to the IdentifyTime attribute.
//  680  *
//  681  * @param   none
//  682  *
//  683  * @return  none
//  684  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  685 static void zllSampleBridge_ProcessIdentifyTimeChange( void )
zllSampleBridge_ProcessIdentifyTimeChange:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function zllSampleBridge_ProcessIdentifyTimeChange
        CODE
//  686 {
        FUNCALL zllSampleBridge_ProcessIdentifyTimeChange, osal_start_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 4, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 4, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessIdentifyTimeChange, HalLedBlink
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessIdentifyTimeChange, HalLedSet
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessIdentifyTimeChange, osal_stop_timerEx
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  687   if ( zllSampleBridge_IdentifyTime > 0 )
        LCALL   ?Subroutine20 & 0xFFFF
??CrossCallReturnLabel_65:
        JZ      ??zllSampleBridge_ProcessIdentifyTimeChange_0
//  688   {
//  689     osal_start_timerEx( zllSampleBridge_TaskID, SAMPLEBRIDGE_IDENTIFY_TIMEOUT_EVT, 1000 );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_3e8
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 4)
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zllSampleBridge_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
//  690 #if ( HAL_LED == TRUE )
//  691     HalLedBlink ( HAL_LED_4, 0xFF, HAL_LED_DEFAULT_DUTY_CYCLE, HAL_LED_DEFAULT_FLASH_TIME );
        ; Setup parameters for call to function HalLedBlink
        MOV     R4,#-0x18
        MOV     R5,#0x3
        MOV     R3,#0x5
        MOV     R2,#-0x1
        MOV     R1,#0x8
        LCALL   ??HalLedBlink?relay
        SJMP    ??zllSampleBridge_ProcessIdentifyTimeChange_1
//  692 #endif
//  693   }
//  694   else
//  695   {
//  696 #if ( HAL_LED == TRUE )
//  697     HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
??zllSampleBridge_ProcessIdentifyTimeChange_0:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  698 #endif
//  699     osal_stop_timerEx( zllSampleBridge_TaskID, SAMPLEBRIDGE_IDENTIFY_TIMEOUT_EVT );
        ; Setup parameters for call to function osal_stop_timerEx
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#zllSampleBridge_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_stop_timerEx?relay
          CFI EndBlock cfiBlock46
//  700   }
//  701 }
??zllSampleBridge_ProcessIdentifyTimeChange_1:
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock47
//  702 
//  703 /*********************************************************************
//  704  * @fn      zllSampleBridge_BasicResetCB
//  705  *
//  706  * @brief   Callback from the ZCL General Cluster Library
//  707  *          to set all the Basic Cluster attributes to default values.
//  708  *
//  709  * @param   none
//  710  *
//  711  * @return  none
//  712  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  713 static void zllSampleBridge_BasicResetCB( void )
zllSampleBridge_BasicResetCB:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function zllSampleBridge_BasicResetCB
        CODE
//  714 {
        FUNCALL zllSampleBridge_BasicResetCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_BasicResetCB, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_BasicResetCB, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_BasicResetCB, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  715   // Reset all attributes to default values
//  716   linkedAddrNum = 0;
        MOV     DPTR,#linkedAddrNum
        CLR     A
        MOVX    @DPTR,A
//  717   linkedAddrNextIdx = 0;
        MOV     DPTR,#linkedAddrNextIdx
        MOVX    @DPTR,A
//  718   linkedAddrSelIdx = 0;
        MOV     DPTR,#linkedAddrSelIdx
        LCALL   ?Subroutine11 & 0xFFFF
//  719   osal_memset( &linkedTargets, 0xFF, sizeof(linkedTargets));
??CrossCallReturnLabel_27:
        LCALL   ??osal_memset?relay
//  720   osal_memset( &controlledGroups, 0x00, sizeof(controlledGroups));
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x6
        MOV     R5,#0x0
        MOV     R1,#0x0
        MOV     R2,#controlledGroups & 0xff
        MOV     R3,#(controlledGroups >> 8) & 0xff
        LCALL   ??osal_memset?relay
//  721 #if defined ( NV_RESTORE )
//  722   osal_nv_write( ZCD_NV_ZLL_BRIDGE_LINK_TARGETS, 0, sizeof( linkedTargets ), &linkedTargets );
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#linkedTargets & 0xff
        MOV     ?V0 + 1,#(linkedTargets >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x50
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x1
        MOV     R3,#0x4
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  723   osal_nv_write( ZCD_NV_ZLL_BRIDGE_CTRL_GROUPS, 0, sizeof( controlledGroups ), &controlledGroups );
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#controlledGroups & 0xff
        MOV     ?V0 + 1,#(controlledGroups >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x6
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x2
        MOV     R3,#0x4
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock48
//  724 #endif
//  725 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond49 Using cfiCommon0
          CFI Function zllSampleBridge_Init
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function zllSampleBridge_BasicResetCB
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond50) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond50) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond50) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond50) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond50) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond50) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond50) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond50) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond50) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond50) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond50) CFA_SP SP+0
          CFI (cfiCond50) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker51 Using cfiCommon1
          CFI (cfiPicker51) NoFunction
          CFI (cfiPicker51) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_memset
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x50
        MOV     R5,A
        MOV     R1,#-0x1
        MOV     R2,#linkedTargets & 0xff
        MOV     R3,#(linkedTargets >> 8) & 0xff
        RET
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiPicker51
//  726 
//  727 /*********************************************************************
//  728  * @fn      zllSampleBridge_IdentifyCB
//  729  *
//  730  * @brief   Callback from the ZCL General Cluster Library when
//  731  *          it received an Identity Command for this application.
//  732  *
//  733  * @param   srcAddr - source address and endpoint of the response message
//  734  * @param   identifyTime - the number of seconds to identify yourself
//  735  *
//  736  * @return  none
//  737  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  738 static void zllSampleBridge_IdentifyCB( zclIdentify_t *pCmd )
zllSampleBridge_IdentifyCB:
          CFI Block cfiBlock52 Using cfiCommon0
          CFI Function zllSampleBridge_IdentifyCB
        CODE
//  739 {
        FUNCALL zllSampleBridge_IdentifyCB, zllSampleBridge_ProcessIdentifyTimeChange
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  740   zllSampleBridge_IdentifyTime = pCmd->identifyTime;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_69:
        MOV     DPTR,#zllSampleBridge_IdentifyTime
        LCALL   ?Subroutine10 & 0xFFFF
//  741   zllSampleBridge_ProcessIdentifyTimeChange();
??CrossCallReturnLabel_18:
        ; Setup parameters for call to function zllSampleBridge_ProcessIdentifyTimeChange
        LCALL   ??zllSampleBridge_ProcessIdentifyTimeChange?rel
//  742 }
        LJMP    ?Subroutine3 & 0xFFFF
          CFI EndBlock cfiBlock52

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine21:
          CFI Block cfiCond53 Using cfiCommon0
          CFI Function zllSampleBridge_GetGrpIDsReqCB
          CFI Conditional ??CrossCallReturnLabel_77
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function zllSampleBridge_ProcessZDOMsg
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+0
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 47)
          CFI Block cfiPicker55 Using cfiCommon1
          CFI (cfiPicker55) NoFunction
          CFI (cfiPicker55) Picker
        MOV     DPH,A
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiPicker55
        REQUIRE ??Subroutine32_0
        ; // Fall through to label ??Subroutine32_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine32_0:
          CFI Block cfiCond56 Using cfiCommon0
          CFI Function zllSampleBridge_event_loop
          CFI Conditional ??CrossCallReturnLabel_66
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function zllSampleBridge_ProcessTL
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond57) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond57) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond57) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond57) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond57) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond57) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond57) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond57) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond57) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond57) CFA_SP SP+0
          CFI (cfiCond57) CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function zllSampleBridge_ProcessAppMsg
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+0
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function zllSampleBridge_IdentifyCB
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_69
          CFI (cfiCond59) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond59) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond59) CFA_SP SP+-5
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function zllSampleBridge_GetEndpointInfoCB
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+0
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function zllSampleBridge_ProcessZDOMsg
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+0
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 47)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function zllSampleBridge_ProcessZDOMsg
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+0
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 47)
          CFI Block cfiCond63 Using cfiCommon0
          CFI (cfiCond63) Function zllSampleBridge_ProcessZDOMsg
          CFI (cfiCond63) Conditional ??CrossCallReturnLabel_73
          CFI (cfiCond63) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond63) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond63) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond63) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond63) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond63) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond63) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond63) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond63) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond63) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond63) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond63) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond63) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond63) CFA_SP SP+0
          CFI (cfiCond63) CFA_XSP16 add(XSP16, 47)
          CFI Block cfiCond64 Using cfiCommon0
          CFI (cfiCond64) Function zllSampleBridge_ProcessZDOMsg
          CFI (cfiCond64) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond64) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond64) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond64) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond64) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond64) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond64) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond64) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond64) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond64) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond64) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond64) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond64) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond64) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond64) CFA_SP SP+0
          CFI (cfiCond64) CFA_XSP16 add(XSP16, 47)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function zllSampleBridge_ProcessZDOMsg
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_75
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+0
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 47)
          CFI Block cfiCond66 Using cfiCommon0
          CFI (cfiCond66) Function zllSampleBridge_ProcessZDOMsg
          CFI (cfiCond66) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond66) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond66) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond66) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond66) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond66) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond66) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond66) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond66) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond66) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond66) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond66) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond66) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond66) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond66) CFA_SP SP+0
          CFI (cfiCond66) CFA_XSP16 add(XSP16, 47)
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function zllSampleBridge_GetGrpIDsReqCB
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_77
          CFI (cfiCond67) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond67) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond67) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond67) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond67) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond67) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond67) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond67) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond67) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond67) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond67) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond67) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond67) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond67) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond67) CFA_SP SP+0
          CFI (cfiCond67) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond68 Using cfiCommon0
          CFI (cfiCond68) Function zllSampleBridge_ProcessZDOMsg
          CFI (cfiCond68) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond68) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond68) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond68) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond68) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond68) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond68) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond68) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond68) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond68) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond68) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond68) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond68) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond68) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond68) CFA_SP SP+0
          CFI (cfiCond68) CFA_XSP16 add(XSP16, 47)
          CFI Block cfiPicker69 Using cfiCommon1
          CFI (cfiPicker69) NoFunction
          CFI (cfiPicker69) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiCond63
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiCond68
          CFI EndBlock cfiPicker69
//  743 
//  744 /*********************************************************************
//  745  * @fn      zllSampleBridge_IdentifyQueryRspCB
//  746  *
//  747  * @brief   Callback from the ZCL General Cluster Library when
//  748  *          it received an Identity Query Response Command for this application.
//  749  *
//  750  * @param   srcAddr - requestor's address
//  751  * @param   timeout - number of seconds to identify yourself (valid for query response)
//  752  *
//  753  * @return  none
//  754  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  755 static void zllSampleBridge_IdentifyQueryRspCB(  zclIdentifyQueryRsp_t *pRsp )
zllSampleBridge_IdentifyQueryRspCB:
          CFI Block cfiBlock70 Using cfiCommon0
          CFI Function zllSampleBridge_IdentifyQueryRspCB
        CODE
//  756 {
        ; Saved register size: 0
        ; Auto size: 0
//  757   // Query Response (with timeout value)
//  758   (void)pRsp;
//  759 }
        LJMP    ?BRET
          CFI EndBlock cfiBlock70
//  760 
//  761 
//  762 /******************************************************************************
//  763  *
//  764  *  Functions for processing ZCL Foundation incoming Command/Response messages
//  765  *
//  766  *****************************************************************************/
//  767 
//  768 /*********************************************************************
//  769  * @fn      zllSampleBridge_ProcessIncomingMsg
//  770  *
//  771  * @brief   Process ZCL Foundation incoming message
//  772  *
//  773  * @param   pInMsg - pointer to the received message
//  774  *
//  775  * @return  none
//  776  */
//  777 static void zllSampleBridge_ProcessIncomingMsg( zclIncomingMsg_t *pInMsg)
//  778 {
//  779   switch ( pInMsg->zclHdr.commandID )
//  780   {
//  781 #ifdef ZCL_READ
//  782     case ZCL_CMD_READ_RSP:
//  783       zllSampleBridge_ProcessInReadRspCmd( pInMsg );
//  784       break;
//  785 #endif
//  786 #ifdef ZCL_WRITE
//  787     case ZCL_CMD_WRITE_RSP:
//  788       zllSampleBridge_ProcessInWriteRspCmd( pInMsg );
//  789       break;
//  790 #endif
//  791 #ifdef ZCL_REPORT
//  792     // See ZCL Test Applicaiton (zcl_testapp.c) for sample code on Attribute Reporting
//  793     case ZCL_CMD_CONFIG_REPORT:
//  794       //zllSampleBridge_ProcessInConfigReportCmd( pInMsg );
//  795       break;
//  796 
//  797     case ZCL_CMD_CONFIG_REPORT_RSP:
//  798       //zllSampleBridge_ProcessInConfigReportRspCmd( pInMsg );
//  799       break;
//  800 
//  801     case ZCL_CMD_READ_REPORT_CFG:
//  802       //zllSampleBridge_ProcessInReadReportCfgCmd( pInMsg );
//  803       break;
//  804 
//  805     case ZCL_CMD_READ_REPORT_CFG_RSP:
//  806       //zllSampleBridge_ProcessInReadReportCfgRspCmd( pInMsg );
//  807       break;
//  808 
//  809     case ZCL_CMD_REPORT:
//  810       //zllSampleBridge_ProcessInReportCmd( pInMsg );
//  811       break;
//  812 #endif
//  813     case ZCL_CMD_DEFAULT_RSP:
//  814       zllSampleBridge_ProcessInDefaultRspCmd( pInMsg );
//  815       break;
//  816 #ifdef ZCL_DISCOVER
//  817     case ZCL_CMD_DISCOVER_ATTRS_RSP:
//  818       zllSampleBridge_ProcessInDiscRspCmd( pInMsg );
//  819       break;
//  820 #endif
//  821     default:
//  822       break;
//  823   }
//  824 
//  825   if ( pInMsg->attrCmd )
//  826     osal_mem_free( pInMsg->attrCmd );
//  827 }
//  828 
//  829 #ifdef ZCL_READ
//  830 /*********************************************************************
//  831  * @fn      zllSampleBridge_ProcessInReadRspCmd
//  832  *
//  833  * @brief   Process the ZCL Read Attributes Response Command
//  834  *
//  835  * @param   pInMsg - incoming message to process
//  836  *
//  837  * @return  status
//  838  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  839 static ZStatus_t zllSampleBridge_ProcessInReadRspCmd( zclIncomingMsg_t *pInMsg )
zllSampleBridge_ProcessInReadRspCmd:
          CFI Block cfiBlock71 Using cfiCommon0
          CFI Function zllSampleBridge_ProcessInReadRspCmd
        CODE
//  840 {
        FUNCALL zllSampleBridge_ProcessInReadRspCmd, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessInReadRspCmd, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessInReadRspCmd, zclGetAttrDataLength
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessInReadRspCmd, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessInReadRspCmd, MT_ZllSendZCLCmd
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 26, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 26, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessInReadRspCmd, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  841   // Notify the originator of the results of the original read attributes
//  842   // attempt and, for each successfull request, the value of the requested
//  843   // attribute
//  844 
//  845 #if defined ( MT_APP_FUNC )
//  846   uint8 i, *msg, *pBuf, dataLength;
//  847   uint8 len = 0;
        MOV     ?V0 + 3,#0x0
//  848   zclReadRspCmd_t *pReadRsp = (zclReadRspCmd_t *)(pInMsg->attrCmd);
        MOV     A,R2
        ADD     A,#0x17
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 10,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 11,A
//  849 
//  850   for (i = 0; i < pReadRsp->numAttr; i++)
        MOV     ?V0 + 2,#0x0
        SJMP    ??zllSampleBridge_ProcessInReadRspCmd_0
//  851   {
//  852     if ( pReadRsp->attrList[i].status == ZSuccess )
??zllSampleBridge_ProcessInReadRspCmd_1:
        MOV     A,?V0 + 2
        MOV     B,#0x6
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,?V0 + 10
        ADD     A,R0
        MOV     R0,A
        MOV     A,?V0 + 11
        ADDC    A,R1
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??zllSampleBridge_ProcessInReadRspCmd_2
//  853     {
//  854       dataLength = zclGetAttrDataLength( pReadRsp->attrList[i].dataType, pReadRsp->attrList[i].data );
        ; Setup parameters for call to function zclGetAttrDataLength
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine33_0 & 0xFFFF
//  855     }
??CrossCallReturnLabel_80:
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??zclGetAttrDataLength?relay
        MOV     A,R2
        MOV     R3,A
//  856 
//  857     // prepend srcAddr, endpoint, cluster ID, and data length
//  858     len += sizeof ( uint16 )     // attribute ID
//  859         + sizeof ( uint8 )      // attribute read status
//  860         + sizeof ( uint8 )      // attribute data type
//  861         + dataLength;
??zllSampleBridge_ProcessInReadRspCmd_2:
        MOV     A,#0x4
        ADD     A,R3
        ADD     A,?V0 + 3
        MOV     ?V0 + 3,A
//  862   }
        INC     ?V0 + 2
??zllSampleBridge_ProcessInReadRspCmd_0:
        MOV     DPL,?V0 + 10
        MOV     DPH,?V0 + 11
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,R0
        JC      ??zllSampleBridge_ProcessInReadRspCmd_1
//  863 
//  864   msg = osal_mem_alloc( len );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     ?V0 + 2,?V0 + 3
        MOV     ?V0 + 4,?V0 + 2
        MOV     R2,?V0 + 4
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 8,R2
        MOV     ?V0 + 9,R3
//  865   if ( msg != NULL )
        MOV     A,R2
        ORL     A,?V0 + 9
        JNZ     $+5
        LJMP    ??zllSampleBridge_ProcessInReadRspCmd_3 & 0xFFFF
//  866   {
//  867     pBuf = msg;
        MOV     R6,?V0 + 8
        MOV     R7,?V0 + 9
//  868 
//  869     for (i = 0; i < pReadRsp->numAttr; i++)
        MOV     ?V0 + 2,#0x0
        LJMP    ??zllSampleBridge_ProcessInReadRspCmd_4 & 0xFFFF
//  870     {
//  871       // Attribute information
//  872       *pBuf++ = LO_UINT16( pReadRsp->attrList[i].attrID );
??zllSampleBridge_ProcessInReadRspCmd_5:
        MOV     A,?V0 + 2
        MOV     B,#0x6
        MUL     AB
        MOV     R0,A
        MOV     R1,B
        MOV     A,?V0 + 10
        ADD     A,R0
        MOV     R2,A
        MOV     A,?V0 + 11
        ADDC    A,R1
        MOV     R3,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOV     R0,DPL
        MOV     R1,DPH
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        INC     DPTR
        MOV     R6,DPL
        MOV     R7,DPH
//  873       *pBuf++ = HI_UINT16( pReadRsp->attrList[i].attrID );
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        LCALL   ?Subroutine24 & 0xFFFF
//  874       *pBuf++ = pReadRsp->attrList[i].status;
??CrossCallReturnLabel_51:
        ADD     A,#0x3
        MOV     R0,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     ?V0 + 4,R0
        MOV     ?V0 + 5,R1
        MOV     DPL,R0
        MOV     DPH,A
        LCALL   ?Subroutine24 & 0xFFFF
//  875       *pBuf++ = pReadRsp->attrList[i].dataType;
??CrossCallReturnLabel_52:
        ADD     A,#0x4
        INC     R0
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R4,A
        MOV     A,R1
        MOV     R5,A
        MOV     DPL,R4
        MOV     DPH,R5
        LCALL   ?Subroutine29 & 0xFFFF
//  876 
//  877       if ( pReadRsp->attrList[i].status == ZSuccess )
??CrossCallReturnLabel_61:
        MOV     DPL,?V0 + 4
        MOV     DPH,?V0 + 5
        MOVX    A,@DPTR
        JNZ     ??zllSampleBridge_ProcessInReadRspCmd_6
//  878       {
//  879         dataLength = zclGetAttrDataLength( pReadRsp->attrList[i].dataType, pReadRsp->attrList[i].data );
//  880         pBuf = osal_memcpy( pBuf, pReadRsp->attrList[i].data, dataLength );
        MOV     A,R2
        ADD     A,#0x5
        INC     R0
        MOV     A,R3
        ADDC    A,#0x0
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 23)
        ; Setup parameters for call to function zclGetAttrDataLength
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ??Subroutine33_0 & 0xFFFF
//  881       }
//  882     }
??CrossCallReturnLabel_81:
        MOV     DPL,R4
        MOV     DPH,R5
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??zclGetAttrDataLength?relay
        MOV     A,R2
        MOV     R4,A
        MOV     R5,#0x0
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
??zllSampleBridge_ProcessInReadRspCmd_6:
        INC     ?V0 + 2
??zllSampleBridge_ProcessInReadRspCmd_4:
        MOV     DPL,?V0 + 10
        MOV     DPH,?V0 + 11
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0 + 2
        CLR     C
        SUBB    A,R0
        JNC     $+5
        LJMP    ??zllSampleBridge_ProcessInReadRspCmd_5 & 0xFFFF
//  883 
//  884     MT_ZllSendZCLCmd( SAMPLEBRIDGE_ENDPOINT, pInMsg->srcAddr.addr.shortAddr,
//  885                       pInMsg->srcAddr.endPoint, pInMsg->clusterId, &pInMsg->zclHdr, len, msg );
        ; Setup parameters for call to function MT_ZllSendZCLCmd
        MOV     R0,#?V0 + 8
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,?V0 + 0
        ADD     A,#0x2
        MOV     ?V0 + 4,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 5,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     R5,?V0 + 3
        MOV     A,?V0 + 0
        ADD     A,#0x13
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine33_0 & 0xFFFF
??CrossCallReturnLabel_82:
        MOV     R1,#0xb
        LCALL   ??MT_ZllSendZCLCmd?relay
        MOV     A,#0x6
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  886 
//  887     osal_mem_free( msg );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 8
        MOV     R3,?V0 + 9
        LCALL   ??osal_mem_free?relay
//  888 
//  889     return ( ZSuccess );
        MOV     R1,#0x0
        SJMP    ??zllSampleBridge_ProcessInReadRspCmd_7
//  890   }
//  891 #endif //MT_APP_FUNC
//  892 
//  893   return ( ZFailure );
??zllSampleBridge_ProcessInReadRspCmd_3:
        MOV     R1,#0x1
??zllSampleBridge_ProcessInReadRspCmd_7:
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock71
//  894 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine24:
          CFI Block cfiCond72 Using cfiCommon0
          CFI Function zllSampleBridge_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_51
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function zllSampleBridge_ProcessInReadRspCmd
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_52
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond73) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond73) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond73) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+0
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker74 Using cfiCommon1
          CFI (cfiPicker74) NoFunction
          CFI (cfiPicker74) Picker
        LCALL   ?Subroutine29 & 0xFFFF
??CrossCallReturnLabel_62:
        MOV     A,R2
        RET
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiPicker74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine29:
          CFI Block cfiCond75 Using cfiCommon0
          CFI Function zllSampleBridge_ProcessInReadRspCmd
          CFI Conditional ??CrossCallReturnLabel_61
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function zllSampleBridge_ProcessInReadRspCmd
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_51
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond76) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond76) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond76) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+0
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond77 Using cfiCommon0
          CFI (cfiCond77) Function zllSampleBridge_ProcessInReadRspCmd
          CFI (cfiCond77) Conditional ??CrossCallReturnLabel_62, ??CrossCallReturnLabel_52
          CFI (cfiCond77) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond77) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond77) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond77) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond77) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond77) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond77) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond77) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond77) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond77) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond77) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond77) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond77) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond77) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond77) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond77) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond77) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond77) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond77) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond77) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond77) CFA_SP SP+0
          CFI (cfiCond77) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker78 Using cfiCommon1
          CFI (cfiPicker78) NoFunction
          CFI (cfiPicker78) Picker
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    @DPTR,A
        INC     DPTR
        INC     R6
        MOV     R7,DPH
        RET
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiCond77
          CFI EndBlock cfiPicker78
//  895 #endif // ZCL_READ
//  896 
//  897 #ifdef ZCL_WRITE
//  898 /*********************************************************************
//  899  * @fn      zllSampleBridge_ProcessInWriteRspCmd
//  900  *
//  901  * @brief   Process the ZCL Write Response Command
//  902  *
//  903  * @param   pInMsg - incoming message to process
//  904  *
//  905  * @return  none
//  906  */
//  907 static uint8 zllSampleBridge_ProcessInWriteRspCmd( zclIncomingMsg_t *pInMsg )
//  908 {
//  909   zclWriteRspCmd_t *writeRspCmd;
//  910   uint8 i;
//  911 
//  912   writeRspCmd = (zclWriteRspCmd_t *)pInMsg->attrCmd;
//  913   for (i = 0; i < writeRspCmd->numAttr; i++)
//  914   {
//  915     // Notify the device of the results of the its original write attributes
//  916     // command.
//  917   }
//  918 
//  919   return TRUE;
//  920 }
//  921 #endif // ZCL_WRITE
//  922 
//  923 /*********************************************************************
//  924  * @fn      zllSampleBridge_ProcessInDefaultRspCmd
//  925  *
//  926  * @brief   Process the ZCL Default Response Command
//  927  *
//  928  * @param   pInMsg - incoming message to process
//  929  *
//  930  * @return  none
//  931  */
//  932 static uint8 zllSampleBridge_ProcessInDefaultRspCmd( zclIncomingMsg_t *pInMsg )
//  933 {
//  934   // zclDefaultRspCmd_t *defaultRspCmd = (zclDefaultRspCmd_t *)pInMsg->attrCmd;
//  935 
//  936   // Device is notified of the Default Response command.
//  937   (void)pInMsg;
//  938 
//  939   return TRUE;
//  940 }
//  941 
//  942 #ifdef ZCL_DISCOVER
//  943 /*********************************************************************
//  944  * @fn      zllSampleBridge_ProcessInDiscRspCmd
//  945  *
//  946  * @brief   Process the ZCL Discover Response Command
//  947  *
//  948  * @param   pInMsg - incoming message to process
//  949  *
//  950  * @return  none
//  951  */
//  952 static uint8 zllSampleBridge_ProcessInDiscRspCmd( zclIncomingMsg_t *pInMsg )
//  953 {
//  954   zclDiscoverAttrsRspCmd_t *discoverRspCmd;
//  955   uint8 i;
//  956 
//  957   discoverRspCmd = (zclDiscoverAttrsRspCmd_t *)pInMsg->attrCmd;
//  958   for ( i = 0; i < discoverRspCmd->numAttr; i++ )
//  959   {
//  960     // Device is notified of the result of its attribute discovery command.
//  961   }
//  962 
//  963   return TRUE;
//  964 }
//  965 #endif // ZCL_DISCOVER
//  966 
//  967 
//  968 /*********************************************************************
//  969  * @fn      zllSampleBridge_GetGrpIDsReqCB
//  970  *
//  971  * @brief   This callback is called to process a Get Group Identifiers
//  972  *          Request command.
//  973  *
//  974  * @param   srcAddr - sender's address
//  975  * @param   pReq - parsed command
//  976  * @param   seqNum - transaction sequence number
//  977  *
//  978  * @return  ZStatus_t
//  979  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  980 static ZStatus_t zllSampleBridge_GetGrpIDsReqCB( afAddrType_t *srcAddr, zclLLGetGrpIDsReq_t *pReq, uint8 seqNum )
zllSampleBridge_GetGrpIDsReqCB:
          CFI Block cfiBlock79 Using cfiCommon0
          CFI Function zllSampleBridge_GetGrpIDsReqCB
        CODE
//  981 {
        FUNCALL zllSampleBridge_GetGrpIDsReqCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_GetGrpIDsReqCB, zclLL_Send_GetGrpIDsRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_GetGrpIDsReqCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
        MOV     ?V0 + 2,R1
//  982   zclLLGetGrpIDsRsp_t Rsp = {0};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>` & 0xff
        MOV     A,#0x5
        LCALL   ?MOVE_LONG8_XDATA_XDATA
//  983   grpInfoRec_t *pGrpIDInfoRec = NULL;
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,A
//  984   uint8 i;
//  985 
//  986   for (i = 0; i < MAX_LINKED_GROUPS; i++)
        MOV     R4,#0x3
//  987   {
//  988     if ( controlledGroups.arr[Rsp.total] != 0 )
??zllSampleBridge_GetGrpIDsReqCB_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#controlledGroups & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(controlledGroups >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        LCALL   ??Subroutine31_0 & 0xFFFF
??CrossCallReturnLabel_63:
        JZ      ??zllSampleBridge_GetGrpIDsReqCB_1
//  989     {
//  990       Rsp.total++;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
//  991     }
//  992   }
??zllSampleBridge_GetGrpIDsReqCB_1:
        DEC     R4
        MOV     A,R4
        JNZ     ??zllSampleBridge_GetGrpIDsReqCB_0
//  993 
//  994   Rsp.startIndex = pReq->startIndex;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R1
        LCALL   ?Subroutine7 & 0xFFFF
//  995   if ( Rsp.total <= Rsp.startIndex )
??CrossCallReturnLabel_6:
        MOV     R0,A
        MOV     A,R1
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??zllSampleBridge_GetGrpIDsReqCB_2 & 0xFFFF
//  996   {
//  997     Rsp.cnt = 0;
//  998   }
//  999   else
// 1000   {
// 1001     Rsp.cnt = Rsp.total - Rsp.startIndex;
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R1
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1002     pGrpIDInfoRec = osal_mem_alloc( Rsp.cnt * sizeof(grpInfoRec_t) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     B,#0x3
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
// 1003     if ( pGrpIDInfoRec != NULL )
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??zllSampleBridge_GetGrpIDsReqCB_2
// 1004     {
// 1005       Rsp.grpInfoRec = pGrpIDInfoRec;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
// 1006       for ( i = Rsp.startIndex; i < (Rsp.cnt + Rsp.startIndex); i++ )
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
??zllSampleBridge_GetGrpIDsReqCB_3:
        MOV     DPL,?V0 + 3
        MOV     R0,DPL
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,R2
        ADD     A,R4
        MOV     R2,A
        CLR     A
        ADDC    A,#0x0
        MOV     R3,A
        MOV     A,R0
        SUBB    A,R2
        CLR     A
        SUBB    A,R3
        CLR     C
        XRL     A,PSW
        RLC     A
        JNC     ??zllSampleBridge_GetGrpIDsReqCB_4
// 1007       {
// 1008         Rsp.grpInfoRec[i].grpID = controlledGroups.arr[i];
        MOV     A,R0
        MOV     B,#0x3
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R2
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R3
        MOV     R3,A
        MOV     A,R0
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#controlledGroups & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(controlledGroups >> 8) & 0xff
        ADDC    A,R1
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_77:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine10 & 0xFFFF
// 1009         Rsp.grpInfoRec[i].grpType = 0; //unsupported in current spec
??CrossCallReturnLabel_19:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
// 1010       }
        INC     ?V0 + 3
        SJMP    ??zllSampleBridge_GetGrpIDsReqCB_3
// 1011     }
// 1012     else
// 1013     {
// 1014       Rsp.cnt = 0;
??zllSampleBridge_GetGrpIDsReqCB_2:
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
// 1015     }
// 1016   }
// 1017 
// 1018   zclLL_Send_GetGrpIDsRsp( SAMPLEBRIDGE_ENDPOINT, srcAddr, &Rsp, TRUE ,seqNum );
??zllSampleBridge_GetGrpIDsReqCB_4:
        ; Setup parameters for call to function zclLL_Send_GetGrpIDsRsp
        MOV     A,?V0 + 2
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 3,#0x1
        MOV     R0,#?V0 + 3
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,#0xb
        LCALL   ??zclLL_Send_GetGrpIDsRsp?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 19)
// 1019 
// 1020   if ( pGrpIDInfoRec != NULL )
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??zllSampleBridge_GetGrpIDsReqCB_5
// 1021   {
// 1022     osal_mem_free( pGrpIDInfoRec );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_mem_free?relay
// 1023   }
// 1024   return ( ZSuccess );
??zllSampleBridge_GetGrpIDsReqCB_5:
        MOV     R1,#0x0
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock79
// 1025 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond80 Using cfiCommon0
          CFI Function zllSampleBridge_ProcessTL
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function zllSampleBridge_ProcessAppMsg
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond81) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond81) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond81) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond81) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond81) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond81) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond81) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond81) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond81) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond81) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond81) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond81) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond81) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond81) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond81) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond81) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond81) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond81) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond81) CFA_SP SP+0
          CFI (cfiCond81) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function zllSampleBridge_ProcessAppMsg
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond82) R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond82) VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond82) V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond82) V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond82) V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond82) V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond82) V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond82) V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond82) V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond82) V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond82) V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond82) V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond82) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond82) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond82) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond82) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond82) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond82) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond82) CFA_SP SP+0
          CFI (cfiCond82) CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function zllSampleBridge_IdentifyCB
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond83) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond83) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond83) CFA_SP SP+-5
          CFI Block cfiCond84 Using cfiCommon0
          CFI (cfiCond84) Function zllSampleBridge_GetGrpIDsReqCB
          CFI (cfiCond84) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond84) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond84) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond84) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond84) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond84) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond84) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond84) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond84) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond84) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond84) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond84) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond84) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond84) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond84) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond84) CFA_SP SP+0
          CFI (cfiCond84) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond85 Using cfiCommon0
          CFI (cfiCond85) Function zllSampleBridge_GetEndpointInfoCB
          CFI (cfiCond85) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond85) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond85) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond85) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond85) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond85) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond85) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond85) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond85) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond85) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond85) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond85) CFA_SP SP+0
          CFI (cfiCond85) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function zllSampleBridge_ProcessZDOMsg
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond86) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond86) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond86) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond86) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond86) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond86) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond86) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond86) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond86) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond86) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond86) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond86) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond86) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond86) CFA_SP SP+0
          CFI (cfiCond86) CFA_XSP16 add(XSP16, 47)
          CFI Block cfiCond87 Using cfiCommon0
          CFI (cfiCond87) Function zllSampleBridge_ProcessZDOMsg
          CFI (cfiCond87) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond87) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond87) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond87) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond87) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond87) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond87) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond87) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond87) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond87) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond87) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond87) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond87) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond87) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond87) CFA_SP SP+0
          CFI (cfiCond87) CFA_XSP16 add(XSP16, 47)
          CFI Block cfiCond88 Using cfiCommon0
          CFI (cfiCond88) Function zllSampleBridge_ProcessZDOMsg
          CFI (cfiCond88) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond88) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond88) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond88) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond88) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond88) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond88) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond88) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond88) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond88) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond88) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond88) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond88) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond88) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond88) CFA_SP SP+0
          CFI (cfiCond88) CFA_XSP16 add(XSP16, 47)
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function zllSampleBridge_ProcessZDOMsg
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond89) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond89) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond89) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond89) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond89) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond89) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond89) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond89) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond89) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond89) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond89) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond89) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond89) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond89) CFA_SP SP+0
          CFI (cfiCond89) CFA_XSP16 add(XSP16, 47)
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function zllSampleBridge_ProcessZDOMsg
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond90) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond90) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond90) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond90) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond90) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond90) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond90) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond90) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond90) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond90) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond90) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond90) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond90) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond90) CFA_SP SP+0
          CFI (cfiCond90) CFA_XSP16 add(XSP16, 47)
          CFI Block cfiPicker91 Using cfiCommon1
          CFI (cfiPicker91) NoFunction
          CFI (cfiPicker91) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiCond84
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiCond87
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiPicker91

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond92 Using cfiCommon0
          CFI Function zllSampleBridge_ProcessAppMsg
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 36)
          CFI Block cfiCond93 Using cfiCommon0
          CFI (cfiCond93) Function zllSampleBridge_GetGrpIDsReqCB
          CFI (cfiCond93) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond93) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond93) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond93) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond93) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond93) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond93) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond93) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond93) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond93) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond93) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond93) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond93) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond93) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond93) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond93) CFA_SP SP+0
          CFI (cfiCond93) CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond94 Using cfiCommon0
          CFI (cfiCond94) Function zllSampleBridge_GetEPListReqCB
          CFI (cfiCond94) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond94) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond94) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond94) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond94) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond94) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond94) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond94) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond94) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond94) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond94) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond94) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond94) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond94) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond94) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond94) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond94) CFA_SP SP+0
          CFI (cfiCond94) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker95 Using cfiCommon1
          CFI (cfiPicker95) NoFunction
          CFI (cfiPicker95) Picker
        MOVX    @DPTR,A
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond92
          CFI EndBlock cfiCond93
          CFI EndBlock cfiCond94
          CFI EndBlock cfiPicker95
// 1026 
// 1027 
// 1028 /*********************************************************************
// 1029  * @fn      zllSampleBridge_GetEPListReqCB
// 1030  *
// 1031  * @brief   This callback is called to process a Get Endpoint List
// 1032  *          Request command.
// 1033  *
// 1034  * @param   srcAddr - sender's address
// 1035  * @param   pReq - parsed command
// 1036  * @param   seqNum - transaction sequence number
// 1037  *
// 1038  * @return  ZStatus_t
// 1039  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1040 static ZStatus_t zllSampleBridge_GetEPListReqCB( afAddrType_t *srcAddr, zclLLGetEPListReq_t *pReq, uint8 seqNum )
zllSampleBridge_GetEPListReqCB:
          CFI Block cfiBlock96 Using cfiCommon0
          CFI Function zllSampleBridge_GetEPListReqCB
        CODE
// 1041 {
        FUNCALL zllSampleBridge_GetEPListReqCB, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_GetEPListReqCB, zclLL_Send_GetEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 22, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 22, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_GetEPListReqCB, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xf
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 15)
        ; Saved register size: 15
        ; Auto size: 5
        MOV     A,#-0x5
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R4
        MOV     R2,A
        MOV     A,R5
        MOV     R3,A
        MOV     ?V0 + 1,R1
// 1042   zclLLGetEPListRsp_t Rsp = {0};
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     DPH,#(`?<Constant {0}>_1` >> 8) & 0xff
        MOV     DPL,#`?<Constant {0}>_1` & 0xff
        MOV     A,#0x5
        LCALL   ?MOVE_LONG8_XDATA_XDATA
// 1043   epInfoRec_t *pInfoRec = NULL;
        MOV     R6,A
        MOV     R7,A
// 1044   uint8 InfoRecIdx, LinkedTargetAddrIdx;
// 1045   ZStatus_t status;
// 1046 
// 1047   LinkedTargetAddrIdx = pReq->startIndex;
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     ?V0 + 0,R0
// 1048   Rsp.total = linkedAddrNum;
        MOV     DPTR,#linkedAddrNum
        MOVX    A,@DPTR
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
// 1049   Rsp.startIndex = LinkedTargetAddrIdx;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R0
        LCALL   ?Subroutine7 & 0xFFFF
// 1050   Rsp.cnt = Rsp.total - Rsp.startIndex;
??CrossCallReturnLabel_7:
        CLR     C
        SUBB    A,R0
        MOV     ?V0 + 4,A
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     A,?V0 + 4
        MOVX    @DPTR,A
// 1051   if ( Rsp.cnt > 0 )
        JNZ     $+5
        LJMP    ??zllSampleBridge_GetEPListReqCB_0 & 0xFFFF
// 1052   {
// 1053     pInfoRec = osal_mem_alloc( Rsp.cnt * sizeof(epInfoRec_t) );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     ?V0 + 5,R6
        MOV     A,#0x3
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     R2,?V0 + 4
        MOV     R3,?V0 + 5
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 4,R2
        MOV     ?V0 + 5,R3
        MOV     R6,?V0 + 4
        MOV     R7,?V0 + 5
// 1054     if ( pInfoRec != NULL )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??zllSampleBridge_GetEPListReqCB_1 & 0xFFFF
// 1055     {
// 1056       Rsp.epInfoRec = pInfoRec;
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
// 1057 
// 1058       for(InfoRecIdx = 0; LinkedTargetAddrIdx < linkedAddrNum; InfoRecIdx++, LinkedTargetAddrIdx++)
        MOV     ?V0 + 6,#0x0
??zllSampleBridge_GetEPListReqCB_2:
        MOV     DPTR,#linkedAddrNum
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0 + 0
        CLR     C
        SUBB    A,R0
        JNC     ??zllSampleBridge_GetEPListReqCB_0
// 1059       {
// 1060         pInfoRec[InfoRecIdx].nwkAddr = linkedTargets.arr[LinkedTargetAddrIdx].Addr;
        MOV     ?V0 + 4,?V0 + 6
        MOV     ?V0 + 5,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     A,R6
        ADD     A,?V0 + 4
        MOV     R0,A
        MOV     A,R7
        ADDC    A,?V0 + 5
        MOV     R1,A
        MOV     A,R0
        MOV     R2,A
        MOV     A,R1
        MOV     R3,A
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,#0x0
        MOV     A,#0x3
        MOV     R0,#?V0 + 4
        LCALL   ?S_SHL
        MOV     A,#linkedTargets & 0xff
        ADD     A,?V0 + 4
        MOV     R0,A
        MOV     A,#(linkedTargets >> 8) & 0xff
        ADDC    A,?V0 + 5
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
        LCALL   ?Subroutine22 & 0xFFFF
??CrossCallReturnLabel_45:
        MOV     DPL,R2
        MOV     DPH,R3
        LCALL   ?Subroutine4 & 0xFFFF
// 1061         pInfoRec[InfoRecIdx].endpoint = linkedTargets.arr[LinkedTargetAddrIdx].EP;
??CrossCallReturnLabel_0:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
// 1062         pInfoRec[InfoRecIdx].profileID = linkedTargets.arr[LinkedTargetAddrIdx].profileID;
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine17 & 0xFFFF
// 1063         pInfoRec[InfoRecIdx].deviceID = linkedTargets.arr[LinkedTargetAddrIdx].deviceID;
// 1064         pInfoRec[InfoRecIdx].version = linkedTargets.arr[LinkedTargetAddrIdx].deviceVersion;
// 1065       }
??CrossCallReturnLabel_39:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        LCALL   ?Subroutine12 & 0xFFFF
??CrossCallReturnLabel_29:
        LCALL   ?Subroutine17 & 0xFFFF
??CrossCallReturnLabel_40:
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_1:
        MOVX    A,@DPTR
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
        INC     ?V0 + 6
        INC     ?V0 + 0
        SJMP    ??zllSampleBridge_GetEPListReqCB_2
// 1066     }
// 1067     else
// 1068     {
// 1069       return ( ZFailure );
??zllSampleBridge_GetEPListReqCB_1:
        MOV     R1,#0x1
        SJMP    ??zllSampleBridge_GetEPListReqCB_3
// 1070     }
// 1071   }
// 1072   else
// 1073   {
// 1074     Rsp.cnt = 0;
// 1075   }
// 1076 
// 1077   status = zclLL_Send_GetEPListRsp( SAMPLEBRIDGE_ENDPOINT, srcAddr, &Rsp, TRUE ,seqNum );
??zllSampleBridge_GetEPListReqCB_0:
        ; Setup parameters for call to function zclLL_Send_GetEPListRsp
        MOV     A,?V0 + 1
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 4,#0x1
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        MOV     R2,?V0 + 2
        MOV     R3,?V0 + 3
        MOV     R1,#0xb
        LCALL   ??zclLL_Send_GetEPListRsp?relay
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     A,R1
        MOV     ?V0 + 2,A
// 1078   if ( pInfoRec != NULL )
        MOV     A,R6
        ORL     A,R7
        JZ      ??zllSampleBridge_GetEPListReqCB_4
// 1079   {
// 1080     osal_mem_free( pInfoRec );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
// 1081   }
// 1082 
// 1083   return status;
??zllSampleBridge_GetEPListReqCB_4:
        MOV     R1,?V0 + 2
??zllSampleBridge_GetEPListReqCB_3:
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R7,#0x7
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock96
// 1084 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine17:
          CFI Block cfiCond97 Using cfiCommon0
          CFI Function zllSampleBridge_GetEPListReqCB
          CFI Conditional ??CrossCallReturnLabel_39
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond98 Using cfiCommon0
          CFI (cfiCond98) Function zllSampleBridge_GetEPListReqCB
          CFI (cfiCond98) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond98) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond98) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond98) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond98) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond98) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond98) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond98) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond98) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond98) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond98) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond98) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond98) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond98) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond98) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond98) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond98) CFA_SP SP+0
          CFI (cfiCond98) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker99 Using cfiCommon1
          CFI (cfiPicker99) NoFunction
          CFI (cfiPicker99) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond97
          CFI EndBlock cfiCond98
          CFI EndBlock cfiPicker99

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine12:
          CFI Block cfiCond100 Using cfiCommon0
          CFI Function zllSampleBridge_HandleKeys
          CFI Conditional ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function zllSampleBridge_GetEPListReqCB
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond101) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond101) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond101) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond101) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond101) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond101) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond101) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond101) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond101) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond101) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond101) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond101) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond101) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond101) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond101) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond101) CFA_SP SP+0
          CFI (cfiCond101) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker102 Using cfiCommon1
          CFI (cfiPicker102) NoFunction
          CFI (cfiPicker102) Picker
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_59:
        RET
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiPicker102

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine28:
          CFI Block cfiCond103 Using cfiCommon0
          CFI Function zllSampleBridge_HandleKeys
          CFI Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_28
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond104 Using cfiCommon0
          CFI (cfiCond104) Function zllSampleBridge_GetEPListReqCB
          CFI (cfiCond104) Conditional ??CrossCallReturnLabel_59, ??CrossCallReturnLabel_29
          CFI (cfiCond104) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond104) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond104) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond104) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond104) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond104) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond104) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond104) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond104) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond104) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond104) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond104) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond104) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond104) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond104) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond104) CFA_SP SP+0
          CFI (cfiCond104) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond105 Using cfiCommon0
          CFI (cfiCond105) Function zllSampleBridge_GetEPListReqCB
          CFI (cfiCond105) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_0
          CFI (cfiCond105) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond105) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond105) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond105) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond105) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond105) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond105) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond105) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond105) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond105) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond105) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond105) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond105) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond105) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond105) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond105) CFA_SP SP+0
          CFI (cfiCond105) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function zllSampleBridge_GetEPListReqCB
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_60, ??CrossCallReturnLabel_1
          CFI (cfiCond106) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond106) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond106) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond106) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond106) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond106) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond106) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond106) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond106) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond106) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond106) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond106) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond106) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond106) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond106) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond106) CFA_SP SP+0
          CFI (cfiCond106) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker107 Using cfiCommon1
          CFI (cfiPicker107) NoFunction
          CFI (cfiPicker107) Picker
        MOVX    @DPTR,A
        MOV     DPL,R0
        MOV     DPH,R1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond103
          CFI EndBlock cfiCond104
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiPicker107

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond108 Using cfiCommon0
          CFI Function zllSampleBridge_GetEPListReqCB
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond109 Using cfiCommon0
          CFI (cfiCond109) Function zllSampleBridge_GetEPListReqCB
          CFI (cfiCond109) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond109) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond109) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond109) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond109) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond109) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond109) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond109) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond109) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond109) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond109) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond109) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond109) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond109) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond109) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond109) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond109) CFA_SP SP+0
          CFI (cfiCond109) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker110 Using cfiCommon1
          CFI (cfiPicker110) NoFunction
          CFI (cfiPicker110) Picker
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        LCALL   ?Subroutine28 & 0xFFFF
??CrossCallReturnLabel_60:
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond108
          CFI EndBlock cfiCond109
          CFI EndBlock cfiPicker110
// 1085 
// 1086 /*********************************************************************
// 1087  * @fn      zllSampleBridge_GetEndpointInfoCB
// 1088  *
// 1089  * @brief   This callback is called to process a Endpoint info command.
// 1090  *
// 1091  * @param   srcAddr - sender's address
// 1092  * @param   pReq - parsed command
// 1093  *
// 1094  * @return  ZStatus_t
// 1095  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1096 static ZStatus_t zllSampleBridge_GetEndpointInfoCB( afAddrType_t *srcAddr, zclLLEndpointInfo_t *pReq )
zllSampleBridge_GetEndpointInfoCB:
          CFI Block cfiBlock111 Using cfiCommon0
          CFI Function zllSampleBridge_GetEndpointInfoCB
        CODE
// 1097 {
        FUNCALL zllSampleBridge_GetEndpointInfoCB, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_GetEndpointInfoCB, zcl_SendCommand
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1098   zclLLGetGrpIDsReq_t zclLLGetGrpIDsReq;
// 1099   zclLLGetEPListReq_t zclLLGetEPListReq;
// 1100   static afAddrType_t DstAddr;
// 1101 
// 1102   DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#??DstAddr + 8
        MOV     A,#0x2
        LCALL   ?Subroutine6 & 0xFFFF
// 1103   DstAddr.endPoint = pReq->endpoint;
??CrossCallReturnLabel_4:
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#??DstAddr + 9
        LCALL   ?Subroutine6 & 0xFFFF
// 1104   DstAddr.addr.shortAddr = pReq->nwkAddr;
??CrossCallReturnLabel_5:
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_70:
        MOV     DPTR,#??DstAddr
        LCALL   ?Subroutine9 & 0xFFFF
// 1105   DstAddr.panId = _NIB.nwkPanId;
??CrossCallReturnLabel_14:
        MOV     DPTR,#??DstAddr + 10
        LCALL   ?Subroutine10 & 0xFFFF
// 1106   nwk_states_t nwkState = _NIB.nwkState;
??CrossCallReturnLabel_20:
        MOV     DPTR,#_NIB + 35
        MOVX    A,@DPTR
        MOV     R6,A
// 1107 #if (ZSTACK_END_DEVICE_BUILD)
// 1108   _NIB.nwkState = NWK_ENDDEVICE;
// 1109 #endif
// 1110 
// 1111   zclLLGetGrpIDsReq.startIndex = 0;
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        LCALL   ?Subroutine8 & 0xFFFF
// 1112   zclLLGetEPListReq.startIndex = 0;
??CrossCallReturnLabel_9:
        MOVX    @DPTR,A
// 1113 
// 1114 #ifdef ZLL_UTILITY_SEND_GETGRPIDS_ENABLED
// 1115   zclLL_Send_GetGrpIDsReq( SAMPLEBRIDGE_ENDPOINT, &DstAddr, &zclLLGetGrpIDsReq, TRUE, sampleBridgeSeqNum++ );
        MOV     DPTR,#sampleBridgeSeqNum
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        ADD     A,R1
        MOVX    @DPTR,A
        ; Setup parameters for call to function zcl_SendCommand
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R1
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        CLR     A
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 0,#0x41
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x0
        MOV     R5,#0x10
        MOV     R2,#??DstAddr & 0xff
        MOV     R3,#(??DstAddr >> 8) & 0xff
        MOV     R1,#0xb
        LCALL   ??zcl_SendCommand?relay
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1116 #endif //ZLL_UTILITY_SEND_GETGRPIDS_ENABLED
// 1117 #ifdef ZLL_UTILITY_SEND_GETEPLIST_ENABLED
// 1118   zclLL_Send_GetEPListReq( SAMPLEBRIDGE_ENDPOINT, &DstAddr, &zclLLGetEPListReq, TRUE, sampleBridgeSeqNum++ );
        MOV     DPTR,#sampleBridgeSeqNum
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x1
        ADD     A,R1
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 16)
        MOV     A,R1
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 17)
        CLR     A
        MOV     ?V0 + 0,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 0,#0x1
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 0,#0x42
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x0
        MOV     R5,#0x10
        MOV     R2,#??DstAddr & 0xff
        MOV     R3,#(??DstAddr >> 8) & 0xff
        MOV     R1,#0xb
        LCALL   ??zcl_SendCommand?relay
        MOV     A,#0xb
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
// 1119 #endif //ZLL_UTILITY_SEND_GETEPLIST_ENABLED
// 1120 
// 1121   _NIB.nwkState = nwkState;
        MOV     A,R6
        MOV     DPTR,#_NIB + 35
        MOVX    @DPTR,A
// 1122 
// 1123   return ( ZSuccess );
        MOV     R1,#0x0
        MOV     A,#0x2
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock111
// 1124 
// 1125 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond112 Using cfiCommon0
          CFI Function zllSampleBridge_ProcessTL
          CFI Conditional ??CrossCallReturnLabel_13
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI Block cfiCond113 Using cfiCommon0
          CFI (cfiCond113) Function zllSampleBridge_GetEndpointInfoCB
          CFI (cfiCond113) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond113) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond113) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond113) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond113) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond113) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond113) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond113) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond113) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond113) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond113) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond113) CFA_SP SP+0
          CFI (cfiCond113) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker114 Using cfiCommon1
          CFI (cfiPicker114) NoFunction
          CFI (cfiPicker114) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     DPTR,#_NIB + 33
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond112
          CFI EndBlock cfiCond113
          CFI EndBlock cfiPicker114

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond115 Using cfiCommon0
          CFI Function zllSampleBridge_GetEndpointInfoCB
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond116 Using cfiCommon0
          CFI (cfiCond116) Function zllSampleBridge_GetEndpointInfoCB
          CFI (cfiCond116) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond116) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond116) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond116) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond116) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond116) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond116) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond116) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond116) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond116) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond116) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond116) CFA_SP SP+0
          CFI (cfiCond116) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker117 Using cfiCommon1
          CFI (cfiPicker117) NoFunction
          CFI (cfiPicker117) Picker
        MOVX    @DPTR,A
        MOV     DPL,R4
        MOV     DPH,R5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond115
          CFI EndBlock cfiCond116
          CFI EndBlock cfiPicker117

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z
// 1126 
// 1127 /*********************************************************************
// 1128  * @fn          zllSampleBridge_GroupRspCB
// 1129  *
// 1130  * @brief       This callback is called to process Groups cluster responses.
// 1131  *              It is used to add groups to the controlled groups list.
// 1132  *
// 1133  * @param       pRsp - pointer to the response command parsed data struct
// 1134  *
// 1135  * @return      none
// 1136  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1137 static void zllSampleBridge_GroupRspCB( zclGroupRsp_t *pRsp )
zllSampleBridge_GroupRspCB:
          CFI Block cfiBlock118 Using cfiCommon0
          CFI Function zllSampleBridge_GroupRspCB
        CODE
// 1138 {
        FUNCALL zllSampleBridge_GroupRspCB, osal_nv_write
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
// 1139   if ( pRsp->status != ZCL_STATUS_SUCCESS )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??zllSampleBridge_GroupRspCB_0
// 1140   {
// 1141     return;
// 1142   }
// 1143   if ( pRsp->cmdID == COMMAND_GROUP_ADD_RSP )
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??zllSampleBridge_GroupRspCB_0
// 1144   {
// 1145     // update target group list
// 1146     zllSampleBridge_addControlledGroup( pRsp->grpList[0] );
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        LCALL   ?Subroutine22 & 0xFFFF
// 1147   }
??CrossCallReturnLabel_46:
        MOV     R6,#0x0
??zllSampleBridge_GroupRspCB_1:
        MOV     A,R6
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#controlledGroups & 0xff
        ADD     A,R0
        MOV     R0,A
        MOV     A,#(controlledGroups >> 8) & 0xff
        ADDC    A,R1
        LCALL   ?Subroutine19 & 0xFFFF
??CrossCallReturnLabel_85:
        MOV     A,R4
        XRL     A,R2
        JNZ     ??zllSampleBridge_GroupRspCB_2
        MOV     A,R5
        XRL     A,R3
??zllSampleBridge_GroupRspCB_2:
        JZ      ??zllSampleBridge_GroupRspCB_0
        MOV     A,R2
        ORL     A,R3
        JNZ     ??zllSampleBridge_GroupRspCB_3
        MOV     DPL,R0
        MOV     DPH,R1
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        ; Setup parameters for call to function osal_nv_write
        MOV     ?V0 + 0,#controlledGroups & 0xff
        MOV     ?V0 + 1,#(controlledGroups >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     ?V0 + 0,#0x6
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     R4,#0x0
        MOV     R5,#0x0
        MOV     R2,#0x2
        MOV     R3,#0x4
        LCALL   ??osal_nv_write?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        SJMP    ??zllSampleBridge_GroupRspCB_0
??zllSampleBridge_GroupRspCB_3:
        INC     R6
        MOV     A,R6
        CLR     C
        SUBB    A,#0x3
        JC      ??zllSampleBridge_GroupRspCB_1
??zllSampleBridge_GroupRspCB_0:
        LJMP    ??Subroutine30_0 & 0xFFFF
          CFI EndBlock cfiBlock118
// 1148 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine22:
          CFI Block cfiCond119 Using cfiCommon0
          CFI Function zllSampleBridge_HandleKeys
          CFI Conditional ??CrossCallReturnLabel_44
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
          CFI Block cfiCond120 Using cfiCommon0
          CFI (cfiCond120) Function zllSampleBridge_GetEPListReqCB
          CFI (cfiCond120) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond120) R6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond120) VB load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond120) V0 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond120) V1 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond120) V2 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond120) V3 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond120) V4 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond120) V5 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond120) V6 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond120) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond120) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond120) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond120) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond120) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond120) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond120) CFA_SP SP+0
          CFI (cfiCond120) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond121 Using cfiCommon0
          CFI (cfiCond121) Function zllSampleBridge_GroupRspCB
          CFI (cfiCond121) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond121) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond121) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond121) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond121) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond121) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond121) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond121) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond121) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond121) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond121) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond121) CFA_SP SP+0
          CFI (cfiCond121) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond122 Using cfiCommon0
          CFI (cfiCond122) Function zllSampleBridge_ProcessZDOMsg
          CFI (cfiCond122) Conditional ??CrossCallReturnLabel_47
          CFI (cfiCond122) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond122) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond122) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond122) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond122) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond122) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond122) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond122) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond122) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond122) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond122) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond122) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond122) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond122) CFA_SP SP+0
          CFI (cfiCond122) CFA_XSP16 add(XSP16, 48)
          CFI Block cfiCond123 Using cfiCommon0
          CFI (cfiCond123) Function zllSampleBridge_ProcessZDOMsg
          CFI (cfiCond123) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond123) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond123) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond123) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond123) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond123) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond123) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond123) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond123) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond123) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond123) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond123) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond123) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond123) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond123) CFA_SP SP+0
          CFI (cfiCond123) CFA_XSP16 add(XSP16, 51)
          CFI Block cfiPicker124 Using cfiCommon1
          CFI (cfiPicker124) NoFunction
          CFI (cfiPicker124) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        RET
          CFI EndBlock cfiCond119
          CFI EndBlock cfiCond120
          CFI EndBlock cfiCond121
          CFI EndBlock cfiCond122
          CFI EndBlock cfiCond123
          CFI EndBlock cfiPicker124
// 1149 
// 1150 /*********************************************************************
// 1151  * @fn          zllSampleBridge_addControlledGroup
// 1152  *
// 1153  * @brief       Add group ID to the controlled groups list.
// 1154  *
// 1155  * @param       groupId - the groupID to add.
// 1156  *
// 1157  * @return      TRUE if added or already exists, FALSE if no space left
// 1158  */
// 1159 static uint8 zllSampleBridge_addControlledGroup( uint16 groupId )
// 1160 {
// 1161   for (uint8 i = 0; i < MAX_LINKED_GROUPS; i++)
// 1162   {
// 1163     if ( controlledGroups.arr[i] == groupId )
// 1164     {
// 1165       return TRUE;
// 1166     }
// 1167     else if ( controlledGroups.arr[i] == 0 )
// 1168     {
// 1169       controlledGroups.arr[i] = groupId;
// 1170 #if defined ( NV_RESTORE )
// 1171       osal_nv_write( ZCD_NV_ZLL_BRIDGE_CTRL_GROUPS, 0, sizeof( controlledGroups ), &controlledGroups );
// 1172 #endif
// 1173       return TRUE;
// 1174     }
// 1175   }
// 1176   return FALSE;
// 1177 }
// 1178 
// 1179 /*********************************************************************
// 1180  * @fn          zllSampleBridge_ProcessZDOMsg
// 1181  *
// 1182  * @brief       Process ZDO messages for Device Discovery
// 1183  *
// 1184  * @param       inMsg - Incoming ZDO message
// 1185  *
// 1186  * @return      none
// 1187  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1188 static void zllSampleBridge_ProcessZDOMsg( zdoIncomingMsg_t *inMsg )
zllSampleBridge_ProcessZDOMsg:
          CFI Block cfiBlock125 Using cfiCommon0
          CFI Function zllSampleBridge_ProcessZDOMsg
        CODE
// 1189 {
        FUNCALL zllSampleBridge_ProcessZDOMsg, ZDO_ParseDeviceAnnce
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessZDOMsg, zllSampleBridge_SendActiveEPReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessZDOMsg, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessZDOMsg, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessZDOMsg, ZDP_SimpleDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 48, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 48, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessZDOMsg, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessZDOMsg, ZDO_ParseSimpleDescRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessZDOMsg, zllSampleBridge_UpdateLinkedTarget
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessZDOMsg, HalLcdWriteStringValueValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 51, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 51, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessZDOMsg, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL zllSampleBridge_ProcessZDOMsg, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 47, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 47, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 34
        MOV     A,#-0x22
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 47)
// 1190   static zAddrType_t addr;
// 1191   addr.addrMode = Addr16Bit;
        MOV     DPTR,#??addr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
// 1192 
// 1193   switch ( inMsg->clusterID )
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for zllSampleBridge_ProcessZDOMsg>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        3
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        19
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zllSampleBridge_ProcessZDOMsg_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32772
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zllSampleBridge_ProcessZDOMsg_1
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32773
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zllSampleBridge_ProcessZDOMsg_2
        DATA
        DATA16
        DATA
        DATA16
        DW        ??zllSampleBridge_ProcessZDOMsg_3
        CODE
// 1194   {
// 1195     case Device_annce:
// 1196       {
// 1197         ZDO_DeviceAnnce_t devAnnce;
// 1198 
// 1199         ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
??zllSampleBridge_ProcessZDOMsg_0:
        ; Setup parameters for call to function ZDO_ParseDeviceAnnce
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDO_ParseDeviceAnnce?relay
// 1200         if ( ( lastDevAnnceAddr != INVALID_NODE_ADDR ) && ( lastDevAnnceAddr != devAnnce.nwkAddr ) )
        MOV     DPTR,#lastDevAnnceAddr
        MOVX    A,@DPTR
        XRL     A,#0xfe
        JNZ     ??zllSampleBridge_ProcessZDOMsg_4
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
??zllSampleBridge_ProcessZDOMsg_4:
        JZ      ??zllSampleBridge_ProcessZDOMsg_5
        MOV     DPTR,#lastDevAnnceAddr
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_71:
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        XRL     A,R0
        JNZ     ??zllSampleBridge_ProcessZDOMsg_6
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R1
??zllSampleBridge_ProcessZDOMsg_6:
        JZ      ??zllSampleBridge_ProcessZDOMsg_5
// 1201         {
// 1202           zllSampleBridge_SendActiveEPReq( lastDevAnnceAddr );
        ; Setup parameters for call to function zllSampleBridge_SendActiveEPReq
        MOV     DPTR,#lastDevAnnceAddr
        LCALL   ??Subroutine33_0 & 0xFFFF
// 1203         }
??CrossCallReturnLabel_83:
        LCALL   ??zllSampleBridge_SendActiveEPReq?relay
// 1204         lastDevAnnceAddr = devAnnce.nwkAddr;
??zllSampleBridge_ProcessZDOMsg_5:
        MOV     A,#0x17
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_72:
        MOV     DPTR,#lastDevAnnceAddr
        LCALL   ?Subroutine10 & 0xFFFF
// 1205         osal_start_timerEx( zllSampleBridge_TaskID, SAMPLEBRIDGE_DEV_ANNCE_EVT, DEVICE_DISCOVERY_DELAY );
??CrossCallReturnLabel_21:
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_7d0
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 51)
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#zllSampleBridge_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 47)
// 1206       }
// 1207       break;
        LJMP    ??zllSampleBridge_ProcessZDOMsg_3 & 0xFFFF
// 1208 
// 1209     case Active_EP_rsp:
// 1210       {
// 1211         ZDO_ActiveEndpointRsp_t *pActiveEPs = NULL;
// 1212         pActiveEPs = ZDO_ParseEPListRsp( inMsg );
??zllSampleBridge_ProcessZDOMsg_2:
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   ??ZDO_ParseEPListRsp?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
// 1213         if ( pActiveEPs->status == ZSuccess )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??zllSampleBridge_ProcessZDOMsg_7
// 1214         {
// 1215           for (uint8 i=0; i < pActiveEPs->cnt; i++ )
        MOV     ?V0 + 4,#0x0
        INC     DPTR
        MOV     ?V0 + 0,DPL
        MOV     ?V0 + 1,DPH
        SJMP    ??zllSampleBridge_ProcessZDOMsg_8
// 1216           {
// 1217             addr.addr.shortAddr = pActiveEPs->nwkAddr;
??zllSampleBridge_ProcessZDOMsg_9:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_73:
        MOV     DPTR,#??addr
        LCALL   ?Subroutine10 & 0xFFFF
// 1218             ZDP_SimpleDescReq( &addr, pActiveEPs->nwkAddr, pActiveEPs->epList[i], 0 );
??CrossCallReturnLabel_22:
        ; Setup parameters for call to function ZDP_SimpleDescReq
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     ?V0 + 2,?V0 + 4
        MOV     A,R6
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine22 & 0xFFFF
// 1219           }
??CrossCallReturnLabel_47:
        MOV     R2,#??addr & 0xff
        MOV     R3,#(??addr >> 8) & 0xff
        LCALL   ??ZDP_SimpleDescReq?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 47)
        INC     ?V0 + 4
??zllSampleBridge_ProcessZDOMsg_8:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,?V0 + 4
        CLR     C
        SUBB    A,R0
        JC      ??zllSampleBridge_ProcessZDOMsg_9
// 1220         }
// 1221 
// 1222         if ( pActiveEPs != NULL )
??zllSampleBridge_ProcessZDOMsg_7:
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??zllSampleBridge_ProcessZDOMsg_3 & 0xFFFF
// 1223         {
// 1224           osal_mem_free( pActiveEPs );
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LJMP    ??zllSampleBridge_ProcessZDOMsg_10 & 0xFFFF
// 1225         }
// 1226       }
// 1227       break;
// 1228 
// 1229     case Simple_Desc_rsp:
// 1230       {
// 1231         ZDO_SimpleDescRsp_t simpleDescRsp;
// 1232         simpleDescRsp.simpleDesc.pAppInClusterList = simpleDescRsp.simpleDesc.pAppOutClusterList = NULL;
??zllSampleBridge_ProcessZDOMsg_1:
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        LCALL   ?Subroutine8 & 0xFFFF
// 1233         ZDO_ParseSimpleDescRsp( inMsg, &simpleDescRsp );
??CrossCallReturnLabel_10:
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDO_ParseSimpleDescRsp?relay
// 1234 
// 1235         if ( ( simpleDescRsp.status == ZDP_SUCCESS ) && ( zllSampleBridge_SelectTargetSimpleDesc( &(simpleDescRsp.simpleDesc) ) ) )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??zllSampleBridge_ProcessZDOMsg_11 & 0xFFFF
        MOV     R3,#0x0
        SJMP    ??zllSampleBridge_ProcessZDOMsg_12
??zllSampleBridge_ProcessZDOMsg_13:
        INC     R3
??zllSampleBridge_ProcessZDOMsg_12:
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,R3
        CLR     C
        SUBB    A,R0
        JC      $+5
        LJMP    ??zllSampleBridge_ProcessZDOMsg_11 & 0xFFFF
        MOV     A,R3
        CLR     C
        RLC     A
        MOV     R0,A
        CLR     A
        RLC     A
        MOV     R1,A
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ADD     A,R0
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,R1
        MOV     DPL,R2
        LCALL   ?Subroutine21 & 0xFFFF
??CrossCallReturnLabel_78:
        MOV     A,#0x6
        XRL     A,R0
        JNZ     ??zllSampleBridge_ProcessZDOMsg_14
        MOV     A,R1
??zllSampleBridge_ProcessZDOMsg_14:
        JZ      ??zllSampleBridge_ProcessZDOMsg_15
        MOV     A,#0x8
        XRL     A,R0
        JNZ     ??zllSampleBridge_ProcessZDOMsg_16
        MOV     A,R1
??zllSampleBridge_ProcessZDOMsg_16:
        JZ      ??zllSampleBridge_ProcessZDOMsg_15
        MOV     A,R0
        JNZ     ??zllSampleBridge_ProcessZDOMsg_17
        MOV     A,#0x3
        XRL     A,R1
??zllSampleBridge_ProcessZDOMsg_17:
        JNZ     ??zllSampleBridge_ProcessZDOMsg_13
// 1236         {
// 1237           epInfoRec_t rec;
// 1238           rec.nwkAddr = simpleDescRsp.nwkAddr;
??zllSampleBridge_ProcessZDOMsg_15:
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_74:
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
// 1239           rec.endpoint = simpleDescRsp.simpleDesc.EndPoint;
??CrossCallReturnLabel_23:
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x11
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1240           rec.profileID = simpleDescRsp.simpleDesc.AppProfId;
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_75:
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
// 1241           rec.deviceID = simpleDescRsp.simpleDesc.AppDeviceId;
??CrossCallReturnLabel_24:
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ??Subroutine32_0 & 0xFFFF
??CrossCallReturnLabel_76:
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine10 & 0xFFFF
// 1242           rec.version = simpleDescRsp.simpleDesc.AppDevVer;
??CrossCallReturnLabel_25:
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0xf
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
// 1243           zllSampleBridge_UpdateLinkedTarget( &rec );
        ; Setup parameters for call to function zllSampleBridge_UpdateLinkedTarget
        MOV     A,#0xf
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??zllSampleBridge_UpdateLinkedTarget?relay
// 1244           HalLcdWriteStringValueValue( "linked:", simpleDescRsp.nwkAddr, 16, simpleDescRsp.simpleDesc.EndPoint, 16, HAL_LCD_LINE_3 );
        ; Setup parameters for call to function HalLcdWriteStringValueValue
        MOV     ?V0 + 0,#0x3
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 48)
        MOV     ?V0 + 0,#0x10
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 49)
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 51)
        MOV     R1,#0x10
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine22 & 0xFFFF
// 1245         }
??CrossCallReturnLabel_48:
        MOV     R2,#`?<Constant "linked:">` & 0xff
        MOV     R3,#(`?<Constant "linked:">` >> 8) & 0xff
        LCALL   ??HalLcdWriteStringValueValue?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 47)
// 1246         if ( simpleDescRsp.simpleDesc.pAppInClusterList != NULL )
??zllSampleBridge_ProcessZDOMsg_11:
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_42:
        JZ      ??zllSampleBridge_ProcessZDOMsg_18
// 1247         {
// 1248           osal_mem_free( simpleDescRsp.simpleDesc.pAppInClusterList );
        ; Setup parameters for call to function osal_mem_free
        LCALL   ??osal_mem_free?relay
// 1249         }
// 1250         if ( simpleDescRsp.simpleDesc.pAppOutClusterList != NULL )
??zllSampleBridge_ProcessZDOMsg_18:
        MOV     A,#0xd
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine18 & 0xFFFF
??CrossCallReturnLabel_43:
        JZ      ??zllSampleBridge_ProcessZDOMsg_3
// 1251         {
// 1252           osal_mem_free( simpleDescRsp.simpleDesc.pAppOutClusterList );
        ; Setup parameters for call to function osal_mem_free
??zllSampleBridge_ProcessZDOMsg_10:
        LCALL   ??osal_mem_free?relay
// 1253         }
// 1254       }
// 1255       break;
// 1256 
// 1257     default:
// 1258       break;
// 1259   }
// 1260 }
??zllSampleBridge_ProcessZDOMsg_3:
        MOV     A,#0x22
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 13)
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock125

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine19:
          CFI Block cfiCond126 Using cfiCommon0
          CFI Function zllSampleBridge_HandleKeys
          CFI Conditional ??CrossCallReturnLabel_84
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function zllSampleBridge_GroupRspCB
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond127) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond127) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond127) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond127) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond127) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond127) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond127) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond127) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond127) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond127) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond127) CFA_SP SP+0
          CFI (cfiCond127) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker128 Using cfiCommon1
          CFI (cfiPicker128) NoFunction
          CFI (cfiPicker128) Picker
        MOV     R1,A
        MOV     DPL,R0
        MOV     DPH,R1
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiPicker128
        REQUIRE ??Subroutine33_0
        ; // Fall through to label ??Subroutine33_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine33_0:
          CFI Block cfiCond129 Using cfiCommon0
          CFI Function zllSampleBridge_event_loop
          CFI Conditional ??CrossCallReturnLabel_79
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function zllSampleBridge_ProcessInReadRspCmd
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond130) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond130) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond130) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond130) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond130) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond130) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond130) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond130) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond130) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond130) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond130) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond130) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond130) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond130) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond130) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond130) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond130) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond130) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond130) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond130) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond130) CFA_SP SP+0
          CFI (cfiCond130) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function zllSampleBridge_ProcessInReadRspCmd
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond131) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond131) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond131) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond131) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond131) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond131) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond131) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond131) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond131) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond131) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond131) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond131) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond131) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond131) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond131) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond131) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond131) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond131) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond131) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond131) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond131) CFA_SP SP+0
          CFI (cfiCond131) CFA_XSP16 add(XSP16, 23)
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function zllSampleBridge_ProcessInReadRspCmd
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond132) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond132) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond132) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond132) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond132) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond132) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond132) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond132) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond132) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond132) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond132) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond132) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond132) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond132) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond132) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond132) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond132) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond132) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond132) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond132) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond132) CFA_SP SP+0
          CFI (cfiCond132) CFA_XSP16 add(XSP16, 26)
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function zllSampleBridge_ProcessZDOMsg
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond133) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond133) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond133) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond133) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond133) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond133) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond133) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond133) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond133) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond133) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond133) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond133) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond133) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond133) CFA_SP SP+0
          CFI (cfiCond133) CFA_XSP16 add(XSP16, 47)
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function zllSampleBridge_HandleKeys
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond134) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond134) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond134) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond134) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond134) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond134) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond134) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond134) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond134) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond134) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond134) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond134) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond134) CFA_SP SP+0
          CFI (cfiCond134) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function zllSampleBridge_GroupRspCB
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond135) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond135) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond135) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond135) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond135) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond135) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond135) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond135) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond135) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond135) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond135) CFA_SP SP+0
          CFI (cfiCond135) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker136 Using cfiCommon1
          CFI (cfiPicker136) NoFunction
          CFI (cfiPicker136) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        RET
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiPicker136

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine18:
          CFI Block cfiCond137 Using cfiCommon0
          CFI Function zllSampleBridge_event_loop
          CFI Conditional ??CrossCallReturnLabel_41
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function zllSampleBridge_ProcessZDOMsg
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond138) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond138) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond138) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond138) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond138) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond138) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond138) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond138) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond138) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond138) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond138) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond138) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond138) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond138) CFA_SP SP+0
          CFI (cfiCond138) CFA_XSP16 add(XSP16, 47)
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function zllSampleBridge_ProcessZDOMsg
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_43
          CFI (cfiCond139) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond139) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond139) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond139) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond139) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond139) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond139) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond139) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond139) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond139) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond139) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond139) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond139) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond139) CFA_SP SP+0
          CFI (cfiCond139) CFA_XSP16 add(XSP16, 47)
          CFI Block cfiPicker140 Using cfiCommon1
          CFI (cfiPicker140) NoFunction
          CFI (cfiPicker140) Picker
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        RET
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiPicker140

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond141 Using cfiCommon0
          CFI Function zllSampleBridge_GetEndpointInfoCB
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function zllSampleBridge_GetEndpointInfoCB
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond142) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond142) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond142) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond142) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond142) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond142) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond142) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond142) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond142) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond142) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond142) CFA_SP SP+0
          CFI (cfiCond142) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function zllSampleBridge_ProcessZDOMsg
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond143) R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond143) VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond143) V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond143) V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond143) V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond143) V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond143) V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond143) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond143) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond143) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond143) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond143) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond143) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond143) CFA_SP SP+0
          CFI (cfiCond143) CFA_XSP16 add(XSP16, 47)
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function zllSampleBridge_SendActiveEPReq
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_11
          CFI (cfiCond144) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond144) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond144) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond144) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond144) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond144) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond144) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond144) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond144) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond144) CFA_SP SP+0
          CFI (cfiCond144) CFA_XSP16 add(XSP16, 18)
          CFI Block cfiPicker145 Using cfiCommon1
          CFI (cfiPicker145) NoFunction
          CFI (cfiPicker145) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function zcl_SendCommand
        ; Setup parameters for call to function ZDO_ParseSimpleDescRsp
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiPicker145

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
??addr:
        DS 9
        REQUIRE __INIT_XDATA_Z
// 1261 
// 1262 /*********************************************************************
// 1263  * @fn          zllSampleBridge_SendActiveEPReq
// 1264  *
// 1265  * @brief       Send out ZDP Active Endpoints Requst.
// 1266  *
// 1267  * @param       dstAddr - destination address
// 1268  *
// 1269  * @return      status
// 1270  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
// 1271 static ZStatus_t zllSampleBridge_SendActiveEPReq( uint16 dstAddr )
zllSampleBridge_SendActiveEPReq:
          CFI Block cfiBlock146 Using cfiCommon0
          CFI Function zllSampleBridge_SendActiveEPReq
        CODE
// 1272 {
        FUNCALL zllSampleBridge_SendActiveEPReq, ZDP_NWKAddrOfInterestReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
// 1273   zAddrType_t addr;
// 1274   addr.addrMode = Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        LCALL   ?Subroutine8 & 0xFFFF
// 1275   addr.addr.shortAddr = dstAddr;
??CrossCallReturnLabel_11:
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
// 1276   return ZDP_ActiveEPReq( &addr, dstAddr, 0 );
        ; Setup parameters for call to function ZDP_NWKAddrOfInterestReq
        MOV     ?V0 + 0,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     R1,#0x5
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_NWKAddrOfInterestReq?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock146
// 1277 }

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for lastDevAnnceAddr>`:
        DATA16
        DW 65534

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zllSampleBridge_GenCmdCBs>`:
        DATA16
        DW ??zllSampleBridge_BasicResetCB?relay
        DW ??zllSampleBridge_IdentifyCB?relay
        DW 0H
        DW ??zllSampleBridge_IdentifyQueryRspCB?relay
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW ??zllSampleBridge_GroupRspCB?relay
        DW 0H
        DW 0H
        DW 0H
        DW 0H
        DW 0H

        RSEG XDATA_ID:CODE:NOROOT(0)
`?<Initializer for zllSampleBridge_LLCmdCBs>`:
        DATA16
        DW ??zllSampleBridge_GetGrpIDsReqCB?relay
        DW ??zllSampleBridge_GetEPListReqCB?relay
        DW ??zllSampleBridge_GetEndpointInfoCB?relay
        DW 0H
        DW 0H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zllSampleBridge_Init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zllSampleBridge_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zllSampleBridge_event_loop?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zllSampleBridge_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zllSampleBridge_ProcessTL?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zllSampleBridge_ProcessTL

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zllSampleBridge_UpdateLinkedTarget?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zllSampleBridge_UpdateLinkedTarget

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zllSampleBridge_ProcessAppMsg?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zllSampleBridge_ProcessAppMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zllSampleBridge_HandleKeys?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zllSampleBridge_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zllSampleBridge_ProcessIdentifyTimeChange?rel:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zllSampleBridge_ProcessIdentifyTimeChange

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zllSampleBridge_BasicResetCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zllSampleBridge_BasicResetCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zllSampleBridge_IdentifyCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zllSampleBridge_IdentifyCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zllSampleBridge_IdentifyQueryRspCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zllSampleBridge_IdentifyQueryRspCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zllSampleBridge_ProcessInReadRspCmd?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zllSampleBridge_ProcessInReadRspCmd

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zllSampleBridge_GetGrpIDsReqCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zllSampleBridge_GetGrpIDsReqCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zllSampleBridge_GetEPListReqCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zllSampleBridge_GetEPListReqCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zllSampleBridge_GetEndpointInfoCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zllSampleBridge_GetEndpointInfoCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zllSampleBridge_GroupRspCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zllSampleBridge_GroupRspCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zllSampleBridge_ProcessZDOMsg?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zllSampleBridge_ProcessZDOMsg

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??zllSampleBridge_SendActiveEPReq?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    zllSampleBridge_SendActiveEPReq

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "TL Light:">`:
        DB "TL Light:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "TL Ctrlr:">`:
        DB "TL Ctrlr:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Dev Sel:">`:
        DB "Dev Sel:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "Dev Sel: no trgt">`:
        DB "Dev Sel: no trgt"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "PermitJoin">`:
        DB "PermitJoin"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>`:
        DB 0
        DB 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant {0}>_1`:
        DB 0
        DB 0, 0, 0, 0

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "linked:">`:
        DB "linked:"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_3e8:
        DD 1000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_7d0:
        DD 2000

        END
// 1278 
// 1279 /*********************************************************************
// 1280  * @fn          zllSampleBridge_SelectTargetSimpleDesc
// 1281  *
// 1282  * @brief       Select or filter candidate device as controlled target.
// 1283  *
// 1284  * @param       pSimpleDesc - pointer to the device's application Simple Descriptor
// 1285  *
// 1286  * @return      TRUE if include in target list, FALSE if to discard (filter out)
// 1287  */
// 1288 static bool zllSampleBridge_SelectTargetSimpleDesc( SimpleDescriptionFormat_t *pSimpleDesc )
// 1289 {
// 1290   for (uint8 i=0; i<pSimpleDesc->AppNumInClusters; i++)
// 1291   {
// 1292     if ( pSimpleDesc->pAppInClusterList[i] == ZCL_CLUSTER_ID_GEN_ON_OFF )
// 1293     {
// 1294       return TRUE;
// 1295     }
// 1296 #ifdef ZCL_LEVEL_CTRL
// 1297     if ( pSimpleDesc->pAppInClusterList[i] == ZCL_CLUSTER_ID_GEN_LEVEL_CONTROL )
// 1298     {
// 1299       return TRUE;
// 1300     }
// 1301 #endif
// 1302 #ifdef ZCL_COLOR_CTRL
// 1303     if ( pSimpleDesc->pAppInClusterList[i] == ZCL_CLUSTER_ID_LIGHTING_COLOR_CONTROL )
// 1304     {
// 1305       return TRUE;
// 1306     }
// 1307 #endif
// 1308   }
// 1309   return FALSE;
// 1310 }
// 1311 
// 1312 
// 1313 /****************************************************************************
// 1314 ****************************************************************************/
// 1315 
// 1316 
// 
// 4 277 bytes in segment BANKED_CODE
//   102 bytes in segment BANK_RELAYS
//    48 bytes in segment XDATA_I
//    48 bytes in segment XDATA_ID
//    83 bytes in segment XDATA_ROM_C
//   124 bytes in segment XDATA_Z
// 
// 4 427 bytes of CODE  memory
//    75 bytes of CONST memory (+ 8 bytes shared)
//   172 bytes of XDATA memory
//
//Errors: none
//Warnings: none
