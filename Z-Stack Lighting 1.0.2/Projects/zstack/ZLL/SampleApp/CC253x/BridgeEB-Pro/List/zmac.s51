///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            27/Mar/2014  17:06:09 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\Texas Instruments\Z-Stack Lighting             /
//                          1.0.2\Components\zmac\f8w\zmac.c                  /
//    Command line       =  -f "D:\Texas Instruments\Z-Stack Lighting         /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ      /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f "D:\Texas        /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO     /
//                          -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f "D:\Texas              /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wZCL.cfg" "D:\Texas           /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Components\zmac\f8w\zmac.c" -D              /
//                          FEATURE_GREEN_POWER -D SECURE=1 -D                /
//                          TC_LINKKEY_JOIN -D ZDSECMGR_TC_DEVICE_MAX=2 -D    /
//                          NV_RESTORE -D HOLD_AUTO_START -D INTER_PAN -D     /
//                          ZTOOL_P1 -D MT_TASK -D MT_APP_FUNC -D             /
//                          MT_SYS_FUNC -D MT_ZDO_FUNC -D MT_ZDO_CB_FUNC -D   /
//                          MT_UTIL_FUNC -D MT_ZDO_MGMT -D LCD_SUPPORTED -D   /
//                          HAL_LCD=FALSE -D HAL_KEY=FALSE -D ZCL_BASIC -D    /
//                          ZCL_READ -D ZCL_WRITE -D ZCL_IDENTIFY -D          /
//                          ZCL_ON_OFF -D ZCL_SCENES -D ZCL_GROUPS -D         /
//                          ZCL_LIGHT_LINK_ENHANCE -D ZCL_LEVEL_CTRL -D       /
//                          ZCL_COLOR_CTRL -D xMAX_CHANNELS_24GHZ=0x02108800  /
//                          -lC "D:\Texas Instruments\Z-Stack Lighting        /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Bridge /
//                          EB-Pro\List\" -lA "D:\Texas Instruments\Z-Stack   /
//                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC25 /
//                          3x\BridgeEB-Pro\List\" --diag_suppress            /
//                          Pe001,Pa010 -o "D:\Texas Instruments\Z-Stack      /
//                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC25 /
//                          3x\BridgeEB-Pro\Obj\" -e --debug --core=plain     /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "D:\Texas                 /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\" -I   /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\Sou /
//                          rce\" -I "D:\Texas Instruments\Z-Stack Lighting   /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          Source\" -I "D:\Texas Instruments\Z-Stack         /
//                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC25 /
//                          3x\..\..\..\HomeAutomation\Source\" -I "D:\Texas  /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\HomeAutomation\SampleLight\Source\" -I         /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\ZMain\TI2530DB\" -I "D:\Texas                  /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\hal\include\" -I "D:\Texas    /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\hal\target\CC2530EB\" -I      /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\include\" -I "D:\Texas    /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\high_level\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\low_level\srf04\" -I      /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\low_level\srf04\single_ch /
//                          ip\" -I "D:\Texas Instruments\Z-Stack Lighting    /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mt\" -I "D:\Texas             /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\osal\include\" -I "D:\Texas   /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\services\saddr\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\services\sdata\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\af\" -I "D:\Texas       /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\nwk\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sapi\" -I "D:\Texas     /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sec\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sys\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\zcl\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\zdo\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\zmac\" -I "D:\Texas           /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\zmac\f8w\" -Ohz               /
//                          --require_prototypes                              /
//    List file          =  D:\Texas Instruments\Z-Stack Lighting             /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Bridge /
//                          EB-Pro\List\zmac.s51                              /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME zmac

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?CALL_IND
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_Z

        PUBLIC ??ZMacAssociateReq?relay
        FUNCTION ??ZMacAssociateReq?relay,0203H
        PUBLIC ??ZMacAssociateRsp?relay
        FUNCTION ??ZMacAssociateRsp?relay,0203H
        PUBLIC ??ZMacDataReq?relay
        FUNCTION ??ZMacDataReq?relay,0203H
        PUBLIC ??ZMacDataReqSec?relay
        FUNCTION ??ZMacDataReqSec?relay,0203H
        PUBLIC ??ZMacDisassociateReq?relay
        FUNCTION ??ZMacDisassociateReq?relay,0203H
        PUBLIC ??ZMacEnhancedActiveScanReq?relay
        FUNCTION ??ZMacEnhancedActiveScanReq?relay,0203H
        PUBLIC ??ZMacGetReq?relay
        FUNCTION ??ZMacGetReq?relay,0203H
        PUBLIC ??ZMacInit?relay
        FUNCTION ??ZMacInit?relay,0203H
        PUBLIC ??ZMacOrphanRsp?relay
        FUNCTION ??ZMacOrphanRsp?relay,0203H
        PUBLIC ??ZMacPollReq?relay
        FUNCTION ??ZMacPollReq?relay,0203H
        PUBLIC ??ZMacPurgeReq?relay
        FUNCTION ??ZMacPurgeReq?relay,0203H
        PUBLIC ??ZMacPwrOnReq?relay
        FUNCTION ??ZMacPwrOnReq?relay,0203H
        PUBLIC ??ZMacReset?relay
        FUNCTION ??ZMacReset?relay,0203H
        PUBLIC ??ZMacScanReq?relay
        FUNCTION ??ZMacScanReq?relay,0203H
        PUBLIC ??ZMacSendNoData?relay
        FUNCTION ??ZMacSendNoData?relay,0203H
        PUBLIC ??ZMacSetReq?relay
        FUNCTION ??ZMacSetReq?relay,0203H
        PUBLIC ??ZMacSetTransmitPower?relay
        FUNCTION ??ZMacSetTransmitPower?relay,0203H
        PUBLIC ??ZMacSrcMatchAckAllPending?relay
        FUNCTION ??ZMacSrcMatchAckAllPending?relay,0203H
        PUBLIC ??ZMacSrcMatchAddEntry?relay
        FUNCTION ??ZMacSrcMatchAddEntry?relay,0203H
        PUBLIC ??ZMacSrcMatchCheckAllPending?relay
        FUNCTION ??ZMacSrcMatchCheckAllPending?relay,0203H
        PUBLIC ??ZMacSrcMatchDeleteEntry?relay
        FUNCTION ??ZMacSrcMatchDeleteEntry?relay,0203H
        PUBLIC ??ZMacSrcMatchEnable?relay
        FUNCTION ??ZMacSrcMatchEnable?relay,0203H
        PUBLIC ??ZMacStartReq?relay
        FUNCTION ??ZMacStartReq?relay,0203H
        PUBLIC ??ZMacStateIdle?relay
        FUNCTION ??ZMacStateIdle?relay,0203H
        PUBLIC ??ZMacSyncReq?relay
        FUNCTION ??ZMacSyncReq?relay,0203H
        PUBLIC ??ZMac_PwrMode?relay
        FUNCTION ??ZMac_PwrMode?relay,0203H
        PUBLIC ZMacAssociateReq
        FUNCTION ZMacAssociateReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMacAssociateRsp
        FUNCTION ZMacAssociateRsp,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMacDataReq
        FUNCTION ZMacDataReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMacDataReqSec
        FUNCTION ZMacDataReqSec,021203H
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 23, STACK
        PUBLIC ZMacDisassociateReq
        FUNCTION ZMacDisassociateReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMacEnhancedActiveScanReq
        FUNCTION ZMacEnhancedActiveScanReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZMacGetReq
        FUNCTION ZMacGetReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZMacInit
        FUNCTION ZMacInit,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZMacOrphanRsp
        FUNCTION ZMacOrphanRsp,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMacPollReq
        FUNCTION ZMacPollReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMacPurgeReq
        FUNCTION ZMacPurgeReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZMacPwrOnReq
        FUNCTION ZMacPwrOnReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMacReset
        FUNCTION ZMacReset,021203H
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZMacScanReq
        FUNCTION ZMacScanReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZMacSendNoData
        FUNCTION ZMacSendNoData,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZMacSetReq
        FUNCTION ZMacSetReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZMacSetTransmitPower
        FUNCTION ZMacSetTransmitPower,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 3, STACK
        LOCFRAME XSTACK, 1, STACK
        PUBLIC ZMacSrcMatchAckAllPending
        FUNCTION ZMacSrcMatchAckAllPending,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZMacSrcMatchAddEntry
        FUNCTION ZMacSrcMatchAddEntry,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMacSrcMatchCheckAllPending
        FUNCTION ZMacSrcMatchCheckAllPending,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMacSrcMatchDeleteEntry
        FUNCTION ZMacSrcMatchDeleteEntry,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMacSrcMatchEnable
        FUNCTION ZMacSrcMatchEnable,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMacStartReq
        FUNCTION ZMacStartReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZMacStateIdle
        FUNCTION ZMacStateIdle,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMacSyncReq
        FUNCTION ZMacSyncReq,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMac_PwrMode
        FUNCTION ZMac_PwrMode,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZMac_ScanBuf
        PUBLIC _ScanChannels
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
MAC_Init            SYMBOL "MAC_Init"
??MAC_Init?relay    SYMBOL "?relay", MAC_Init
MAC_InitCoord       SYMBOL "MAC_InitCoord"
??MAC_InitCoord?relay SYMBOL "?relay", MAC_InitCoord
MAC_InitDevice      SYMBOL "MAC_InitDevice"
??MAC_InitDevice?relay SYMBOL "?relay", MAC_InitDevice
MAC_McpsDataAlloc   SYMBOL "MAC_McpsDataAlloc"
??MAC_McpsDataAlloc?relay SYMBOL "?relay", MAC_McpsDataAlloc
MAC_McpsDataReq     SYMBOL "MAC_McpsDataReq"
??MAC_McpsDataReq?relay SYMBOL "?relay", MAC_McpsDataReq
MAC_McpsPurgeReq    SYMBOL "MAC_McpsPurgeReq"
??MAC_McpsPurgeReq?relay SYMBOL "?relay", MAC_McpsPurgeReq
MAC_MlmeAssociateReq SYMBOL "MAC_MlmeAssociateReq"
??MAC_MlmeAssociateReq?relay SYMBOL "?relay", MAC_MlmeAssociateReq
MAC_MlmeAssociateRsp SYMBOL "MAC_MlmeAssociateRsp"
??MAC_MlmeAssociateRsp?relay SYMBOL "?relay", MAC_MlmeAssociateRsp
MAC_MlmeDisassociateReq SYMBOL "MAC_MlmeDisassociateReq"
??MAC_MlmeDisassociateReq?relay SYMBOL "?relay", MAC_MlmeDisassociateReq
MAC_MlmeGetReq      SYMBOL "MAC_MlmeGetReq"
??MAC_MlmeGetReq?relay SYMBOL "?relay", MAC_MlmeGetReq
MAC_MlmeOrphanRsp   SYMBOL "MAC_MlmeOrphanRsp"
??MAC_MlmeOrphanRsp?relay SYMBOL "?relay", MAC_MlmeOrphanRsp
MAC_MlmePollReq     SYMBOL "MAC_MlmePollReq"
??MAC_MlmePollReq?relay SYMBOL "?relay", MAC_MlmePollReq
MAC_MlmeResetReq    SYMBOL "MAC_MlmeResetReq"
??MAC_MlmeResetReq?relay SYMBOL "?relay", MAC_MlmeResetReq
MAC_MlmeScanReq     SYMBOL "MAC_MlmeScanReq"
??MAC_MlmeScanReq?relay SYMBOL "?relay", MAC_MlmeScanReq
MAC_MlmeSetReq      SYMBOL "MAC_MlmeSetReq"
??MAC_MlmeSetReq?relay SYMBOL "?relay", MAC_MlmeSetReq
MAC_MlmeStartReq    SYMBOL "MAC_MlmeStartReq"
??MAC_MlmeStartReq?relay SYMBOL "?relay", MAC_MlmeStartReq
MAC_MlmeSyncReq     SYMBOL "MAC_MlmeSyncReq"
??MAC_MlmeSyncReq?relay SYMBOL "?relay", MAC_MlmeSyncReq
MAC_PwrMode         SYMBOL "MAC_PwrMode"
??MAC_PwrMode?relay SYMBOL "?relay", MAC_PwrMode
MAC_PwrOnReq        SYMBOL "MAC_PwrOnReq"
??MAC_PwrOnReq?relay SYMBOL "?relay", MAC_PwrOnReq
MAC_SrcMatchAckAllPending SYMBOL "MAC_SrcMatchAckAllPending"
??MAC_SrcMatchAckAllPending?relay SYMBOL "?relay", MAC_SrcMatchAckAllPending
MAC_SrcMatchAddEntry SYMBOL "MAC_SrcMatchAddEntry"
??MAC_SrcMatchAddEntry?relay SYMBOL "?relay", MAC_SrcMatchAddEntry
MAC_SrcMatchCheckAllPending SYMBOL "MAC_SrcMatchCheckAllPending"
??MAC_SrcMatchCheckAllPending?relay SYMBOL "?relay", MAC_SrcMatchCheckAllPending
MAC_SrcMatchDeleteEntry SYMBOL "MAC_SrcMatchDeleteEntry"
??MAC_SrcMatchDeleteEntry?relay SYMBOL "?relay", MAC_SrcMatchDeleteEntry
MAC_SrcMatchEnable  SYMBOL "MAC_SrcMatchEnable"
??MAC_SrcMatchEnable?relay SYMBOL "?relay", MAC_SrcMatchEnable
macStateIdle        SYMBOL "macStateIdle"
??macStateIdle?relay SYMBOL "?relay", macStateIdle
osal_int_disable    SYMBOL "osal_int_disable"
??osal_int_disable?relay SYMBOL "?relay", osal_int_disable
osal_mem_alloc      SYMBOL "osal_mem_alloc"
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
osal_memset         SYMBOL "osal_memset"
??osal_memset?relay SYMBOL "?relay", osal_memset
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
sAddrExtCpy         SYMBOL "sAddrExtCpy"
??sAddrExtCpy?relay SYMBOL "?relay", sAddrExtCpy
ZMacAssociateReq    SYMBOL "ZMacAssociateReq"
??ZMacAssociateReq?relay SYMBOL "?relay", ZMacAssociateReq
ZMacAssociateRsp    SYMBOL "ZMacAssociateRsp"
??ZMacAssociateRsp?relay SYMBOL "?relay", ZMacAssociateRsp
ZMacDataReq         SYMBOL "ZMacDataReq"
??ZMacDataReq?relay SYMBOL "?relay", ZMacDataReq
ZMacDataReqSec      SYMBOL "ZMacDataReqSec"
??ZMacDataReqSec?relay SYMBOL "?relay", ZMacDataReqSec
ZMacDisassociateReq SYMBOL "ZMacDisassociateReq"
??ZMacDisassociateReq?relay SYMBOL "?relay", ZMacDisassociateReq
ZMacEnhancedActiveScanReq SYMBOL "ZMacEnhancedActiveScanReq"
??ZMacEnhancedActiveScanReq?relay SYMBOL "?relay", ZMacEnhancedActiveScanReq
ZMacGetReq          SYMBOL "ZMacGetReq"
??ZMacGetReq?relay  SYMBOL "?relay", ZMacGetReq
ZMacInit            SYMBOL "ZMacInit"
??ZMacInit?relay    SYMBOL "?relay", ZMacInit
ZMacOrphanRsp       SYMBOL "ZMacOrphanRsp"
??ZMacOrphanRsp?relay SYMBOL "?relay", ZMacOrphanRsp
ZMacPollReq         SYMBOL "ZMacPollReq"
??ZMacPollReq?relay SYMBOL "?relay", ZMacPollReq
ZMacPurgeReq        SYMBOL "ZMacPurgeReq"
??ZMacPurgeReq?relay SYMBOL "?relay", ZMacPurgeReq
ZMacPwrOnReq        SYMBOL "ZMacPwrOnReq"
??ZMacPwrOnReq?relay SYMBOL "?relay", ZMacPwrOnReq
ZMacReset           SYMBOL "ZMacReset"
??ZMacReset?relay   SYMBOL "?relay", ZMacReset
ZMacScanReq         SYMBOL "ZMacScanReq"
??ZMacScanReq?relay SYMBOL "?relay", ZMacScanReq
ZMacSendNoData      SYMBOL "ZMacSendNoData"
??ZMacSendNoData?relay SYMBOL "?relay", ZMacSendNoData
ZMacSetReq          SYMBOL "ZMacSetReq"
??ZMacSetReq?relay  SYMBOL "?relay", ZMacSetReq
ZMacSetTransmitPower SYMBOL "ZMacSetTransmitPower"
??ZMacSetTransmitPower?relay SYMBOL "?relay", ZMacSetTransmitPower
ZMacSrcMatchAckAllPending SYMBOL "ZMacSrcMatchAckAllPending"
??ZMacSrcMatchAckAllPending?relay SYMBOL "?relay", ZMacSrcMatchAckAllPending
ZMacSrcMatchAddEntry SYMBOL "ZMacSrcMatchAddEntry"
??ZMacSrcMatchAddEntry?relay SYMBOL "?relay", ZMacSrcMatchAddEntry
ZMacSrcMatchCheckAllPending SYMBOL "ZMacSrcMatchCheckAllPending"
??ZMacSrcMatchCheckAllPending?relay SYMBOL "?relay", ZMacSrcMatchCheckAllPending
ZMacSrcMatchDeleteEntry SYMBOL "ZMacSrcMatchDeleteEntry"
??ZMacSrcMatchDeleteEntry?relay SYMBOL "?relay", ZMacSrcMatchDeleteEntry
ZMacSrcMatchEnable  SYMBOL "ZMacSrcMatchEnable"
??ZMacSrcMatchEnable?relay SYMBOL "?relay", ZMacSrcMatchEnable
ZMacStartReq        SYMBOL "ZMacStartReq"
??ZMacStartReq?relay SYMBOL "?relay", ZMacStartReq
ZMacStateIdle       SYMBOL "ZMacStateIdle"
??ZMacStateIdle?relay SYMBOL "?relay", ZMacStateIdle
ZMacSyncReq         SYMBOL "ZMacSyncReq"
??ZMacSyncReq?relay SYMBOL "?relay", ZMacSyncReq
ZMac_PwrMode        SYMBOL "ZMac_PwrMode"
??ZMac_PwrMode?relay SYMBOL "?relay", ZMac_PwrMode

        EXTERN ??MAC_Init?relay
        FUNCTION ??MAC_Init?relay,00H
        EXTERN ??MAC_InitCoord?relay
        FUNCTION ??MAC_InitCoord?relay,00H
        EXTERN ??MAC_InitDevice?relay
        FUNCTION ??MAC_InitDevice?relay,00H
        EXTERN ??MAC_McpsDataAlloc?relay
        FUNCTION ??MAC_McpsDataAlloc?relay,00H
        EXTERN ??MAC_McpsDataReq?relay
        FUNCTION ??MAC_McpsDataReq?relay,00H
        EXTERN ??MAC_McpsPurgeReq?relay
        FUNCTION ??MAC_McpsPurgeReq?relay,00H
        EXTERN ??MAC_MlmeAssociateReq?relay
        FUNCTION ??MAC_MlmeAssociateReq?relay,00H
        EXTERN ??MAC_MlmeAssociateRsp?relay
        FUNCTION ??MAC_MlmeAssociateRsp?relay,00H
        EXTERN ??MAC_MlmeDisassociateReq?relay
        FUNCTION ??MAC_MlmeDisassociateReq?relay,00H
        EXTERN ??MAC_MlmeGetReq?relay
        FUNCTION ??MAC_MlmeGetReq?relay,00H
        EXTERN ??MAC_MlmeOrphanRsp?relay
        FUNCTION ??MAC_MlmeOrphanRsp?relay,00H
        EXTERN ??MAC_MlmePollReq?relay
        FUNCTION ??MAC_MlmePollReq?relay,00H
        EXTERN ??MAC_MlmeResetReq?relay
        FUNCTION ??MAC_MlmeResetReq?relay,00H
        EXTERN ??MAC_MlmeScanReq?relay
        FUNCTION ??MAC_MlmeScanReq?relay,00H
        EXTERN ??MAC_MlmeSetReq?relay
        FUNCTION ??MAC_MlmeSetReq?relay,00H
        EXTERN ??MAC_MlmeStartReq?relay
        FUNCTION ??MAC_MlmeStartReq?relay,00H
        EXTERN ??MAC_MlmeSyncReq?relay
        FUNCTION ??MAC_MlmeSyncReq?relay,00H
        EXTERN ??MAC_PwrMode?relay
        FUNCTION ??MAC_PwrMode?relay,00H
        EXTERN ??MAC_PwrOnReq?relay
        FUNCTION ??MAC_PwrOnReq?relay,00H
        EXTERN ??MAC_SrcMatchAckAllPending?relay
        FUNCTION ??MAC_SrcMatchAckAllPending?relay,00H
        EXTERN ??MAC_SrcMatchAddEntry?relay
        FUNCTION ??MAC_SrcMatchAddEntry?relay,00H
        EXTERN ??MAC_SrcMatchCheckAllPending?relay
        FUNCTION ??MAC_SrcMatchCheckAllPending?relay,00H
        EXTERN ??MAC_SrcMatchDeleteEntry?relay
        FUNCTION ??MAC_SrcMatchDeleteEntry?relay,00H
        EXTERN ??MAC_SrcMatchEnable?relay
        FUNCTION ??MAC_SrcMatchEnable?relay,00H
        EXTERN ??macStateIdle?relay
        FUNCTION ??macStateIdle?relay,00H
        EXTERN ??osal_int_disable?relay
        FUNCTION ??osal_int_disable?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_memset?relay
        FUNCTION ??osal_memset?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??sAddrExtCpy?relay
        FUNCTION ??sAddrExtCpy?relay,00H
        EXTERN MAC_Init
        FUNCTION MAC_Init,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_InitCoord
        FUNCTION MAC_InitCoord,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_InitDevice
        FUNCTION MAC_InitDevice,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_McpsDataAlloc
        FUNCTION MAC_McpsDataAlloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_McpsDataReq
        FUNCTION MAC_McpsDataReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_McpsPurgeReq
        FUNCTION MAC_McpsPurgeReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeAssociateReq
        FUNCTION MAC_MlmeAssociateReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeAssociateRsp
        FUNCTION MAC_MlmeAssociateRsp,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeDisassociateReq
        FUNCTION MAC_MlmeDisassociateReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeGetReq
        FUNCTION MAC_MlmeGetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeOrphanRsp
        FUNCTION MAC_MlmeOrphanRsp,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmePollReq
        FUNCTION MAC_MlmePollReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeResetReq
        FUNCTION MAC_MlmeResetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeScanReq
        FUNCTION MAC_MlmeScanReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeSetReq
        FUNCTION MAC_MlmeSetReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeStartReq
        FUNCTION MAC_MlmeStartReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_MlmeSyncReq
        FUNCTION MAC_MlmeSyncReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_PwrMode
        FUNCTION MAC_PwrMode,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_PwrOnReq
        FUNCTION MAC_PwrOnReq,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_SrcMatchAckAllPending
        FUNCTION MAC_SrcMatchAckAllPending,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_SrcMatchAddEntry
        FUNCTION MAC_SrcMatchAddEntry,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_SrcMatchCheckAllPending
        FUNCTION MAC_SrcMatchCheckAllPending,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_SrcMatchDeleteEntry
        FUNCTION MAC_SrcMatchDeleteEntry,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN MAC_SrcMatchEnable
        FUNCTION MAC_SrcMatchEnable,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN aExtendedAddress
        EXTERN macStateIdle
        FUNCTION macStateIdle,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_int_disable
        FUNCTION osal_int_disable,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memset
        FUNCTION osal_memset,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN sAddrExtCpy
        FUNCTION sAddrExtCpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\Texas Instruments\Z-Stack Lighting 1.0.2\Components\zmac\f8w\zmac.c
//    1 /**************************************************************************************************
//    2   Filename:       zmac.c
//    3   Revised:        $Date: 2013-06-13 11:38:32 -0700 (Thu, 13 Jun 2013) $
//    4   Revision:       $Revision: 34581 $
//    5 
//    6 
//    7   Description:    This file contains the ZStack MAC Porting Layer
//    8 
//    9 
//   10   Copyright 2005-2013 Texas Instruments Incorporated. All rights reserved.
//   11 
//   12   IMPORTANT: Your use of this Software is limited to those specific rights
//   13   granted under the terms of a software license agreement between the user
//   14   who downloaded the software, his/her employer (which must be your employer)
//   15   and Texas Instruments Incorporated (the "License").  You may not use this
//   16   Software unless you agree to abide by the terms of the License. The License
//   17   limits your use, and you acknowledge, that the Software may not be modified,
//   18   copied or distributed unless embedded on a Texas Instruments microcontroller
//   19   or used solely and exclusively in conjunction with a Texas Instruments radio
//   20   frequency transceiver, which is integrated into your product.  Other than for
//   21   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   22   works of, modify, distribute, perform, display or sell this Software and/or
//   23   its documentation for any purpose.
//   24 
//   25   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   26   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   27   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   28   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   29   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   30   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   31   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   32   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   33   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   34   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   35   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   36 
//   37   Should you have any questions regarding your right to use this Software,
//   38   contact Texas Instruments Incorporated at www.TI.com.
//   39 **************************************************************************************************/
//   40 
//   41 /********************************************************************************************************
//   42  *                                               INCLUDES
//   43  ********************************************************************************************************/
//   44 
//   45 #include "ZComDef.h"
//   46 #include "OSAL.h"
//   47 #include "ZMAC.h"
//   48 #include "mac_main.h"
//   49 
//   50 #if !defined NONWK
//   51   #include "ZGlobals.h"
//   52 #endif
//   53 
//   54 #if defined( ZCL_KEY_ESTABLISH )
//   55   #include "ssp.h"
//   56 #endif
//   57 
//   58 /********************************************************************************************************
//   59  *                                                 MACROS
//   60  ********************************************************************************************************/
//   61 
//   62 /********************************************************************************************************
//   63  *                                               CONSTANTS
//   64  ********************************************************************************************************/
//   65 #define MAX_SECURITY_PIB_SET_ENTRY  sizeof(deviceDescriptor_t)
//   66 
//   67 /********************************************************************************************************
//   68  *                                               GLOBALS
//   69  ********************************************************************************************************/

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA32
//   70 uint32 _ScanChannels;
_ScanChannels:
        DS 4
        REQUIRE __INIT_XDATA_Z
//   71 
//   72 extern uint8 aExtendedAddress[];
//   73 
//   74 /**************************************************************************************************
//   75  * @fn          MAC_SetRandomSeedCB
//   76  *
//   77  * @brief       MAC function: Set the function pointer for the random seed callback.
//   78  *
//   79  * input parameters
//   80  *
//   81  * @param       pCBFcn - function pointer of the random seed callback
//   82  *
//   83  * output parameters
//   84  *
//   85  * None.
//   86  *
//   87  * @return      none
//   88  **************************************************************************************************
//   89  */
//   90 extern void MAC_SetRandomSeedCB(macRNGFcn_t pCBFcn);
//   91 /********************************************************************************************************
//   92  *                                               LOCALS
//   93  ********************************************************************************************************/
//   94 
//   95 /* Pointer to scan result buffer */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   96 void *ZMac_ScanBuf = NULL;
ZMac_ScanBuf:
        DS 2
        REQUIRE __INIT_XDATA_Z
//   97 
//   98 /********************************************************************************************************
//   99  * LOCAL FUNCTION PROTOTYPES
//  100  ********************************************************************************************************/
//  101 
//  102 /********************************************************************************************************
//  103  *                                                TYPEDEFS
//  104  ********************************************************************************************************/
//  105 
//  106 
//  107 /********************************************************************************************************
//  108  *                                                FUNCTIONS
//  109  ********************************************************************************************************/
//  110 
//  111 /********************************************************************************************************
//  112  * @fn      ZMacInit
//  113  *
//  114  * @brief   Initialize MAC.
//  115  *
//  116  * @param   none.
//  117  *
//  118  * @return  status.
//  119  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  120 uint8 ZMacInit( void )
ZMacInit:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ZMacInit
        CODE
//  121 {
        FUNCALL ZMacInit, MAC_Init
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacInit, MAC_InitDevice
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacInit, MAC_InitCoord
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacInit, ZMacReset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacInit, osal_int_disable
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  122   uint8 stat;
//  123 
//  124 #if defined( ZCL_KEY_ESTABLISH )
//  125   /* Set the callback function for 16 byte random seed */
//  126   MAC_SetRandomSeedCB( SSP_StoreRandomSeedNV);
//  127 #endif
//  128 
//  129   MAC_Init();
        ; Setup parameters for call to function MAC_Init
        LCALL   ??MAC_Init?relay
//  130   MAC_InitDevice();
        ; Setup parameters for call to function MAC_InitDevice
        LCALL   ??MAC_InitDevice?relay
//  131 
//  132 #if !defined NONWK
//  133   if ( ZG_BUILD_RTR_TYPE )
//  134   {
//  135     MAC_InitCoord();
        ; Setup parameters for call to function MAC_InitCoord
        LCALL   ??MAC_InitCoord?relay
//  136   }
//  137 #endif
//  138 
//  139   // If OK, initialize the MAC
//  140   stat = ZMacReset( TRUE );
        ; Setup parameters for call to function ZMacReset
        MOV     R1,#0x1
        LCALL   ??ZMacReset?relay
        MOV     A,R1
        MOV     R6,A
//  141 
//  142   // Turn off interrupts
//  143   osal_int_disable( INTS_ALL );
        ; Setup parameters for call to function osal_int_disable
        MOV     R1,#-0x1
        LCALL   ??osal_int_disable?relay
//  144 
//  145   return ( stat );
        MOV     A,R6
        MOV     R1,A
        SJMP    ??Subroutine12_0
          CFI EndBlock cfiBlock0
//  146 }
//  147 
//  148 /********************************************************************************************************
//  149  * @fn      ZMacReset
//  150  *
//  151  * @brief   Reset the MAC.
//  152  *
//  153  * @param   Default to PIB defaults.
//  154  *
//  155  * @return  status.
//  156  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  157 uint8 ZMacReset( uint8 SetDefaultPIB )
ZMacReset:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function ZMacReset
        CODE
//  158 {
        FUNCALL ZMacReset, MAC_MlmeResetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacReset, MAC_MlmeSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacReset, MAC_MlmeSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacReset, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
//  159   byte stat;
//  160   byte value;
//  161 
//  162   stat = MAC_MlmeResetReq( SetDefaultPIB );
        ; Setup parameters for call to function MAC_MlmeResetReq
        LCALL   ??MAC_MlmeResetReq?relay
        MOV     A,R1
        MOV     R6,A
//  163 
//  164   // Don't send PAN ID conflict
//  165   value = FALSE;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
//  166   MAC_MlmeSetReq( MAC_ASSOCIATED_PAN_COORD, &value );
        ; Setup parameters for call to function MAC_MlmeSetReq
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x56
        LCALL   ??MAC_MlmeSetReq?relay
//  167   MAC_MlmeSetReq( MAC_EXTENDED_ADDRESS, &aExtendedAddress );
        ; Setup parameters for call to function MAC_MlmeSetReq
        MOV     R2,#aExtendedAddress & 0xff
        MOV     R3,#(aExtendedAddress >> 8) & 0xff
        MOV     R1,#-0x1e
        LCALL   ??MAC_MlmeSetReq?relay
//  168 
//  169   if (ZMac_ScanBuf)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_4:
        JZ      ??ZMacReset_0
//  170   {
//  171     osal_mem_free(ZMac_ScanBuf);
        ; Setup parameters for call to function osal_mem_free
        MOV     DPTR,#ZMac_ScanBuf
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
//  172     ZMac_ScanBuf = NULL;
        MOV     DPTR,#ZMac_ScanBuf
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  173   }
//  174 
//  175   return ( stat );
??ZMacReset_0:
        MOV     A,R6
        MOV     R1,A
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock1
//  176 }
//  177 
//  178 
//  179 /********************************************************************************************************
//  180  * @fn      ZMacGetReq
//  181  *
//  182  * @brief   Read a MAC PIB attribute.
//  183  *
//  184  * @param   attr - PIB attribute to get
//  185  * @param   value - pointer to the buffer to store the attribute
//  186  *
//  187  * @return  status
//  188  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  189 uint8 ZMacGetReq( uint8 attr, uint8 *value )
ZMacGetReq:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function ZMacGetReq
        CODE
//  190 {
        FUNCALL ZMacGetReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacGetReq, MAC_MlmeGetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
//  191   if ( attr == ZMacExtAddr )
        MOV     A,#-0x1e
        XRL     A,R6
        JNZ     ??ZMacGetReq_0
//  192   {
//  193     osal_cpyExtAddr( value, &aExtendedAddress );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     R4,#aExtendedAddress & 0xff
        MOV     R5,#(aExtendedAddress >> 8) & 0xff
        LCALL   ??sAddrExtCpy?relay
//  194     return ZMacSuccess;
        MOV     R1,#0x0
        SJMP    ??ZMacGetReq_1
//  195   }
//  196 
//  197   return (ZMacStatus_t) MAC_MlmeGetReq( attr, value );
??ZMacGetReq_0:
        ; Setup parameters for call to function MAC_MlmeGetReq
        LCALL   ??MAC_MlmeGetReq?relay
??ZMacGetReq_1:
        SJMP    ??Subroutine12_0
          CFI EndBlock cfiBlock2
//  198 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock3
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine12_0:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4
//  199 
//  200 
//  201 /********************************************************************************************************
//  202  * @fn      ZMacSetReq
//  203  *
//  204  * @brief   Write a MAC PIB attribute.
//  205  *
//  206  * @param   attr - PIB attribute to Set
//  207  * @param   value - pointer to the data
//  208  *
//  209  * @return  status
//  210  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  211 uint8 ZMacSetReq( uint8 attr, byte *value )
ZMacSetReq:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function ZMacSetReq
        CODE
//  212 {
        FUNCALL ZMacSetReq, sAddrExtCpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacSetReq, MAC_MlmeSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     ?V0 + 0,R1
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  213   if ( attr == ZMacExtAddr )
        MOV     A,#-0x1e
        XRL     A,?V0 + 0
        JNZ     ??ZMacSetReq_0
//  214   {
//  215     osal_cpyExtAddr( aExtendedAddress, value );
        ; Setup parameters for call to function sAddrExtCpy
        MOV     A,R6
        MOV     R4,A
        MOV     A,R7
        MOV     R5,A
        MOV     R2,#aExtendedAddress & 0xff
        MOV     R3,#(aExtendedAddress >> 8) & 0xff
        LCALL   ??sAddrExtCpy?relay
//  216   }
//  217 
//  218   return (ZMacStatus_t) MAC_MlmeSetReq( attr, value );
??ZMacSetReq_0:
        ; Setup parameters for call to function MAC_MlmeSetReq
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     R1,?V0 + 0
        LCALL   ??MAC_MlmeSetReq?relay
        SJMP    ??Subroutine12_0
          CFI EndBlock cfiBlock5
//  219 }
//  220 
//  221 #ifdef FEATURE_MAC_SECURITY
//  222 /********************************************************************************************************
//  223  * @fn      ZMacSecurityGetReq
//  224  *
//  225  * @brief   Read a MAC Security PIB attribute.
//  226  *
//  227  * @param   attr - PIB attribute to get
//  228  * @param   value - pointer to the buffer to store the attribute
//  229  *
//  230  * @return  status
//  231  ********************************************************************************************************/
//  232 uint8 ZMacSecurityGetReq( uint8 attr, uint8 *value )
//  233 {
//  234   uint8         keyIndex, entry, status;
//  235   uint8        *ptr;
//  236 
//  237   ptr = (uint8 *) value;
//  238   switch (attr)
//  239   {
//  240     case ZMacKeyIdLookupEntry:
//  241       keyIndex = *ptr++; /* key_index */
//  242       entry    = *ptr++; /* key_id_lookup_index */
//  243       
//  244       /* Transform byte array to propriety PIB struct */
//  245       ((macSecurityPibKeyIdLookupEntry_t *)value)->key_id_lookup_index = entry;
//  246       ((macSecurityPibKeyIdLookupEntry_t *)value)->key_index = keyIndex;
//  247       break;
//  248       
//  249     case ZMacKeyDeviceEntry:
//  250       keyIndex = *ptr++; /* key_index */
//  251       entry    = *ptr++; /* key_device_index */
//  252       
//  253       /* Transform byte array to propriety PIB struct */
//  254       ((macSecurityPibKeyDeviceEntry_t *)value)->key_device_index = entry;
//  255       ((macSecurityPibKeyDeviceEntry_t *)value)->key_index = keyIndex;
//  256       break;
//  257       
//  258     case ZMacKeyUsageEntry:
//  259       keyIndex = *ptr++; /* key_index */
//  260       entry    = *ptr++; /* key_key_usage_index */
//  261       
//  262       /* Transform byte array to propriety PIB struct */
//  263       ((macSecurityPibKeyUsageEntry_t *)value)->key_key_usage_index = entry;
//  264       ((macSecurityPibKeyUsageEntry_t *)value)->key_index = keyIndex;
//  265       break;
//  266       
//  267     case ZMacKeyEntry:
//  268       keyIndex = *ptr++; /* key_index */
//  269       
//  270       /* Transform byte array to propriety PIB struct */
//  271       ((macSecurityPibKeyEntry_t *)value)->key_index = keyIndex;
//  272       break;
//  273       
//  274     case ZMacDeviceEntry:
//  275       entry = *ptr++; /* device_index */
//  276       
//  277       /* Transform byte array to propriety PIB struct */
//  278       ((macSecurityPibDeviceEntry_t *)value)->device_index = entry;
//  279       break;
//  280 
//  281     case ZMacSecurityLevelEntry:
//  282       entry = *ptr++; /* security_level_index */
//  283       
//  284       /* Transform byte array to propriety PIB struct */
//  285       ((macSecurityPibSecurityLevelEntry_t *)value)->security_level_index = entry;
//  286       break;
//  287   }
//  288 
//  289   status = (ZMacStatus_t) MAC_MlmeGetSecurityReq( attr, value );
//  290   
//  291   ptr = (uint8 *) value;
//  292   switch (attr)
//  293   {
//  294     case ZMacKeyIdLookupEntry:
//  295       *ptr++ = keyIndex; /* key_index */
//  296       *ptr++ = entry;    /* key_id_lookup_index */
//  297       
//  298       /* Transform propriety PIB struct to byte array */
//  299       osal_memcpy(ptr, &((macSecurityPibKeyIdLookupEntry_t *)value)->macKeyIdLookupEntry, sizeof(keyIdLookupDescriptor_t));
//  300       break;
//  301       
//  302     case ZMacKeyDeviceEntry:
//  303       *ptr++ = keyIndex; /* key_index */
//  304       *ptr++ = entry;    /* key_device_index */
//  305       
//  306       /* Transform propriety PIB struct to byte array */
//  307       osal_memcpy(ptr, &((macSecurityPibKeyDeviceEntry_t *)value)->macKeyDeviceEntry, sizeof(keyDeviceDescriptor_t));
//  308       break;
//  309       
//  310     case ZMacKeyUsageEntry:
//  311       *ptr++ = keyIndex; /* key_index */
//  312       *ptr++ = entry;    /* key_key_usage_index */
//  313       
//  314       /* Transform propriety PIB struct to byte array */
//  315       osal_memcpy(ptr, &((macSecurityPibKeyUsageEntry_t *)value)->macKeyUsageEntry, sizeof(keyUsageDescriptor_t));
//  316       break;
//  317       
//  318     case ZMacKeyEntry:
//  319       *ptr++ = keyIndex; /* key_index */
//  320       
//  321       /* Transform propriety PIB struct to byte array */
//  322       osal_memcpy(ptr, &((macSecurityPibKeyEntry_t *)value)->keyEntry, MAC_KEY_MAX_LEN);
//  323       break;
//  324       
//  325     case ZMacDeviceEntry:
//  326       *ptr++ = entry; /* device_index */
//  327       
//  328       /* Transform propriety PIB struct to byte array */
//  329       osal_memcpy(ptr, &((macSecurityPibDeviceEntry_t *)value)->macDeviceEntry, sizeof(deviceDescriptor_t));
//  330       break;
//  331 
//  332     case ZMacSecurityLevelEntry:
//  333       *ptr++ = entry; /* security_level_index */
//  334       
//  335       /* Transform propriety PIB struct to byte array */
//  336       osal_memcpy(ptr, &((macSecurityPibSecurityLevelEntry_t *)value)->macSecurityLevelEntry, sizeof(securityLevelDescriptor_t));
//  337       break;
//  338   }
//  339   
//  340   return status;
//  341 }
//  342 
//  343 
//  344 /********************************************************************************************************
//  345  * @fn      ZMacSecuritySetReq
//  346  *
//  347  * @brief   Write a MAC Security PIB attribute.
//  348  *
//  349  * @param   attr - PIB attribute to Set
//  350  * @param   value - pointer to the data
//  351  *
//  352  * @return  status
//  353  ********************************************************************************************************/
//  354 uint8 ZMacSecuritySetReq( uint8 attr, byte *value )
//  355 {
//  356   uint8         keyIndex, entry;
//  357   uint32        frameCounter;
//  358   uint8        *ptr;
//  359   uint8         tmp[MAX_SECURITY_PIB_SET_ENTRY]; /* This must cover the largest single PIB entry */
//  360   uint8         temp[MAX_SECURITY_PIB_SET_ENTRY]; /* This must cover the largest single PIB entry */
//  361 
//  362   /* Note that the Transform byte array to propriety PIB struct below works 
//  363    * because the members of the structures are all defined manually in a way, 
//  364    * where memcpy would work, without usage of explicit 'pack', they fit 
//  365    * such that memcpy would work
//  366    */
//  367   ptr = (uint8 *) value;
//  368   switch (attr)
//  369   {
//  370     case ZMacKeyIdLookupEntry:
//  371       keyIndex = *ptr++; /* key_index */
//  372       entry    = *ptr++; /* key_id_lookup_index */
//  373       
//  374       /* Transform byte array to propriety PIB struct */
//  375       osal_memcpy(tmp, ptr, sizeof(keyIdLookupDescriptor_t));
//  376       osal_memcpy(&((macSecurityPibKeyIdLookupEntry_t *)temp)->macKeyIdLookupEntry, tmp, sizeof(keyIdLookupDescriptor_t));
//  377       ((macSecurityPibKeyIdLookupEntry_t *)temp)->key_id_lookup_index = entry;
//  378       ((macSecurityPibKeyIdLookupEntry_t *)temp)->key_index = keyIndex;
//  379       return (ZMacStatus_t) MAC_MlmeSetSecurityReq( attr, temp );
//  380       break;
//  381       
//  382     case ZMacKeyDeviceEntry:
//  383       keyIndex = *ptr++; /* key_index */
//  384       entry    = *ptr++; /* key_device_index */
//  385       
//  386       /* Transform byte array to propriety PIB struct */
//  387       osal_memcpy(tmp, ptr, sizeof(keyDeviceDescriptor_t));
//  388       osal_memcpy(&((macSecurityPibKeyDeviceEntry_t *)temp)->macKeyDeviceEntry, tmp, sizeof(keyDeviceDescriptor_t));
//  389       ((macSecurityPibKeyDeviceEntry_t *)temp)->key_device_index = entry;
//  390       ((macSecurityPibKeyDeviceEntry_t *)temp)->key_index = keyIndex;
//  391       return (ZMacStatus_t) MAC_MlmeSetSecurityReq( attr, temp );
//  392       break;
//  393       
//  394     case ZMacKeyUsageEntry:
//  395       keyIndex = *ptr++; /* key_index */
//  396       entry    = *ptr++; /* key_key_usage_index */
//  397       
//  398       /* Transform byte array to propriety PIB struct */
//  399       osal_memcpy(tmp, ptr, sizeof(keyUsageDescriptor_t));
//  400       osal_memcpy(&((macSecurityPibKeyUsageEntry_t *)temp)->macKeyUsageEntry, tmp, sizeof(keyUsageDescriptor_t));
//  401       ((macSecurityPibKeyUsageEntry_t *)temp)->key_key_usage_index = entry;
//  402       ((macSecurityPibKeyUsageEntry_t *)temp)->key_index = keyIndex;
//  403       return (ZMacStatus_t) MAC_MlmeSetSecurityReq( attr, temp );
//  404       break;
//  405       
//  406     case ZMacKeyEntry:
//  407       keyIndex = *ptr++; /* key_index */
//  408       
//  409       /* Transform byte array to propriety PIB struct */
//  410       osal_memcpy(tmp, ptr, MAC_KEY_MAX_LEN);
//  411       osal_memcpy(&((macSecurityPibKeyEntry_t *)temp)->keyEntry, tmp, MAC_KEY_MAX_LEN);
//  412       ptr+=MAC_KEY_MAX_LEN;
//  413       
//  414       osal_memcpy(&frameCounter, ptr, sizeof(frameCounter));
//  415       
//  416       ((macSecurityPibKeyEntry_t *)temp)->frameCounter = frameCounter;
//  417       ((macSecurityPibKeyEntry_t *)temp)->key_index = keyIndex;
//  418       return (ZMacStatus_t) MAC_MlmeSetSecurityReq( attr, temp );
//  419       break;
//  420       
//  421     case ZMacDeviceEntry:
//  422        entry = *ptr++;
//  423        
//  424        /* Transform byte array to propriety PIB struct */
//  425        osal_memcpy(tmp, ptr, sizeof(deviceDescriptor_t));
//  426        osal_memcpy(&((macSecurityPibDeviceEntry_t *)temp)->macDeviceEntry, tmp, sizeof(deviceDescriptor_t));
//  427    
//  428       ((macSecurityPibDeviceEntry_t *)temp)->device_index = entry;
//  429       return (ZMacStatus_t) MAC_MlmeSetSecurityReq( attr, temp );
//  430       break;
//  431 
//  432     case ZMacSecurityLevelEntry:
//  433       entry = *ptr++; /* security_level_index */
//  434       
//  435       /* Transform byte array to propriety PIB struct */
//  436       osal_memcpy(tmp, ptr, sizeof(securityLevelDescriptor_t));
//  437       osal_memcpy(&((macSecurityPibSecurityLevelEntry_t *)temp)->macSecurityLevelEntry, tmp, sizeof(securityLevelDescriptor_t));
//  438       
//  439       ((macSecurityPibSecurityLevelEntry_t *)temp)->security_level_index = entry;
//  440       return (ZMacStatus_t) MAC_MlmeSetSecurityReq( attr, temp );
//  441       break;
//  442   }
//  443 
//  444   return (ZMacStatus_t) MAC_MlmeSetSecurityReq( attr, value );
//  445 }
//  446 #endif /* FEATURE_MAC_SECURITY */
//  447 
//  448 /********************************************************************************************************
//  449  * @fn      ZMacAssociateReq
//  450  *
//  451  * @brief   Request an association with a coordinator.
//  452  *
//  453  * @param   structure with info need to associate.
//  454  *
//  455  * @return  status
//  456  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  457 uint8 ZMacAssociateReq( ZMacAssociateReq_t *pData )
ZMacAssociateReq:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function ZMacAssociateReq
        CODE
//  458 {
        FUNCALL ZMacAssociateReq, MAC_MlmeAssociateReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  459   /* Right now, set security to zero */
//  460   pData->Sec.SecurityLevel = false;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  461 
//  462   MAC_MlmeAssociateReq ( (macMlmeAssociateReq_t *)pData);
        ; Setup parameters for call to function MAC_MlmeAssociateReq
        LCALL   ??MAC_MlmeAssociateReq?relay
//  463   return ( ZMacSuccess );
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock6
//  464 }
//  465 
//  466 /********************************************************************************************************
//  467  * @fn      ZMacAssociateRsp
//  468  *
//  469  * @brief   Request to send an association response message.
//  470  *
//  471  * @param   structure with associate response and info needed to send it.
//  472  *
//  473  * @return  MAC_SUCCESS or MAC error code
//  474  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  475 uint8 ZMacAssociateRsp( ZMacAssociateRsp_t *pData )
ZMacAssociateRsp:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function ZMacAssociateRsp
        CODE
//  476 {
        FUNCALL ZMacAssociateRsp, MAC_MlmeAssociateRsp
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  477   /* TBD: set security to zero for now. Require Ztool change */
//  478   pData->Sec.SecurityLevel = false;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  479 
//  480   return ( MAC_MlmeAssociateRsp( (macMlmeAssociateRsp_t *) pData ) );
        ; Setup parameters for call to function MAC_MlmeAssociateRsp
        LCALL   ??MAC_MlmeAssociateRsp?relay
        LJMP    ??Subroutine15_0 & 0xFFFF
          CFI EndBlock cfiBlock7
//  481 }
//  482 
//  483 /********************************************************************************************************
//  484  * @fn      ZMacDisassociateReq
//  485  *
//  486  * @brief   Request to send a disassociate request message.
//  487  *
//  488  * @param   structure with info need send it.
//  489  *
//  490  * @return  status
//  491  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  492 uint8 ZMacDisassociateReq( ZMacDisassociateReq_t *pData )
ZMacDisassociateReq:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function ZMacDisassociateReq
        CODE
//  493 {
        FUNCALL ZMacDisassociateReq, MAC_MlmeDisassociateReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  494   /* Right now, set security to zero */
//  495   pData->Sec.SecurityLevel = false;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  496 
//  497   MAC_MlmeDisassociateReq( (macMlmeDisassociateReq_t *)pData);
        ; Setup parameters for call to function MAC_MlmeDisassociateReq
        LCALL   ??MAC_MlmeDisassociateReq?relay
//  498   return ( ZMacSuccess );
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock8
//  499 }
//  500 
//  501 /********************************************************************************************************
//  502  * @fn      ZMacOrphanRsp
//  503  *
//  504  * @brief   Allows next higher layer to respond to an orphan indication message.
//  505  *
//  506  * @param   structure with info need send it.
//  507  *
//  508  * @return  status
//  509  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  510 uint8 ZMacOrphanRsp( ZMacOrphanRsp_t *pData )
ZMacOrphanRsp:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function ZMacOrphanRsp
        CODE
//  511 {
        FUNCALL ZMacOrphanRsp, MAC_MlmeOrphanRsp
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  512   /* Right now, set security to zero */
//  513   pData->Sec.SecurityLevel = false;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  514 
//  515   MAC_MlmeOrphanRsp( (macMlmeOrphanRsp_t *)pData);
        ; Setup parameters for call to function MAC_MlmeOrphanRsp
        LCALL   ??MAC_MlmeOrphanRsp?relay
//  516   return ( ZMacSuccess );
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock9
//  517 }
//  518 
//  519 /********************************************************************************************************
//  520  * @fn      ZMacScanReq
//  521  *
//  522  * @brief   This function is called to perform a network scan.
//  523  *
//  524  * @param   param - structure with info need send it.
//  525  *
//  526  * @return  status
//  527  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  528 uint8 ZMacScanReq( ZMacScanReq_t *pData )
ZMacScanReq:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function ZMacScanReq
        CODE
//  529 {
        FUNCALL ZMacScanReq, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacScanReq, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacScanReq, MAC_MlmeScanReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacScanReq, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  530   _ScanChannels = pData->ScanChannels;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?XLOAD_R2345
        MOV     DPTR,#_ScanChannels
        LCALL   ?XSTORE_R2345
//  531 
//  532   /* scan in progress */
//  533   if (ZMac_ScanBuf != NULL)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        JZ      ??ZMacScanReq_0
//  534   {
//  535     return MAC_SCAN_IN_PROGRESS;
        MOV     R1,#-0x4
        SJMP    ??ZMacScanReq_1
//  536   }
//  537 
//  538   if (pData->ScanType != ZMAC_ORPHAN_SCAN)
??ZMacScanReq_0:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x3
        XRL     A,R0
        JZ      ??CrossCallReturnLabel_2
//  539   {
//  540     /* Allocate memory depends on the scan type */
//  541     if (pData->ScanType == ZMAC_ED_SCAN)
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_7:
        JNZ     ??ZMacScanReq_2
//  542     {
//  543       if ((ZMac_ScanBuf = osal_mem_alloc(ZMAC_ED_SCAN_MAXCHANNELS)) == NULL)
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x1b
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_12:
        JZ      ??ZMacScanReq_3
//  544       {
//  545         return MAC_NO_RESOURCES;
//  546       }
//  547       osal_memset(ZMac_ScanBuf, 0, ZMAC_ED_SCAN_MAXCHANNELS);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x1b
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   ??osal_memset?relay
//  548       pData->Result.pEnergyDetect = ((uint8*)ZMac_ScanBuf) + MAC_CHAN_11;
        LCALL   ?Subroutine5 & 0xFFFF
//  549     }
//  550     else if (pData->MaxResults > 0)
//  551     {
//  552       if ((ZMac_ScanBuf = pData->Result.pPanDescriptor =
//  553            osal_mem_alloc( sizeof( ZMacPanDesc_t ) * pData->MaxResults )) == NULL)
//  554       {
//  555         return MAC_NO_RESOURCES;
//  556       }
//  557     }
//  558   }
//  559 
//  560   /* Channel Page */
//  561   pData->ChannelPage = 0x00;
??CrossCallReturnLabel_2:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  562 
//  563   MAC_MlmeScanReq ((macMlmeScanReq_t *)pData);
        ; Setup parameters for call to function MAC_MlmeScanReq
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??MAC_MlmeScanReq?relay
//  564 
//  565   return ZMacSuccess;
        MOV     R1,#0x0
??ZMacScanReq_1:
        LJMP    ?Subroutine2 & 0xFFFF
??ZMacScanReq_2:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??CrossCallReturnLabel_2
        ; Setup parameters for call to function osal_mem_alloc
        MOV     B,#0x21
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        LCALL   ??osal_mem_alloc?relay
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_0:
        JNZ     ??CrossCallReturnLabel_2
??ZMacScanReq_3:
        MOV     R1,#0x1a
        SJMP    ??ZMacScanReq_1
          CFI EndBlock cfiBlock10
//  566 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine11:
          CFI Block cfiCond11 Using cfiCommon0
          CFI Function ZMacScanReq
          CFI Conditional ??CrossCallReturnLabel_12
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond12 Using cfiCommon0
          CFI (cfiCond12) Function ZMacEnhancedActiveScanReq
          CFI (cfiCond12) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond12) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond12) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond12) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond12) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond12) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond12) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond12) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond12) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond12) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond12) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond12) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond12) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond12) CFA_SP SP+0
          CFI (cfiCond12) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker13 Using cfiCommon1
          CFI (cfiPicker13) NoFunction
          CFI (cfiPicker13) Picker
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R0,?V0 + 2
        MOV     R1,?V0 + 3
          CFI EndBlock cfiCond11
          CFI EndBlock cfiCond12
          CFI EndBlock cfiPicker13
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine13_0:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function ZMacScanReq
          CFI Conditional ??CrossCallReturnLabel_11, ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function ZMacEnhancedActiveScanReq
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_11, ??CrossCallReturnLabel_1
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+0
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond16 Using cfiCommon0
          CFI (cfiCond16) Function ZMacScanReq
          CFI (cfiCond16) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond16) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond16) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond16) CFA_SP SP+0
          CFI (cfiCond16) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function ZMacEnhancedActiveScanReq
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+0
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker18 Using cfiCommon1
          CFI (cfiPicker18) NoFunction
          CFI (cfiPicker18) Picker
        MOV     DPTR,#ZMac_ScanBuf
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiPicker18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond19 Using cfiCommon0
          CFI Function ZMacReset
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond20 Using cfiCommon0
          CFI (cfiCond20) Function ZMacScanReq
          CFI (cfiCond20) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond20) CFA_SP SP+0
          CFI (cfiCond20) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function ZMacEnhancedActiveScanReq
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+0
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOV     DPTR,#ZMac_ScanBuf
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R0
        ORL     A,R1
        RET
          CFI EndBlock cfiCond19
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22
//  567 
//  568 
//  569 /********************************************************************************************************
//  570  * @fn      ZMacStartReq
//  571  *
//  572  * @brief   This function is called to tell the MAC to transmit beacons
//  573  *          and become a coordinator.
//  574  *
//  575  * @param   structure with info need send it.
//  576  *
//  577  * @return  status
//  578  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  579 uint8 ZMacStartReq( ZMacStartReq_t *pData )
ZMacStartReq:
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function ZMacStartReq
        CODE
//  580 {
        FUNCALL ZMacStartReq, MAC_MlmeSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacStartReq, MAC_MlmeStartReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 10)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  581   uint8 stat;
//  582 
//  583   // Probably want to keep the receiver on
//  584   stat = true;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  585   MAC_MlmeSetReq( MAC_RX_ON_WHEN_IDLE, &stat );
        ; Setup parameters for call to function MAC_MlmeSetReq
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x52
        LCALL   ??MAC_MlmeSetReq?relay
//  586 
//  587   /* Right now, set security to zero */
//  588   pData->RealignSec.SecurityLevel = false;
        MOV     A,R6
        ADD     A,#0x15
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine14_0 & 0xFFFF
//  589   pData->BeaconSec.SecurityLevel = false;
??CrossCallReturnLabel_14:
        MOV     A,R6
        ADD     A,#0x20
        MOV     DPL,A
        MOV     A,R7
        LCALL   ??Subroutine14_0 & 0xFFFF
//  590 
//  591 
//  592   MAC_MlmeStartReq((macMlmeStartReq_t *) pData);
??CrossCallReturnLabel_15:
        ; Setup parameters for call to function MAC_MlmeStartReq
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??MAC_MlmeStartReq?relay
//  593 
//  594   // MAC does not issue mlmeStartConfirm(), so we have to
//  595   // mlmeStartConfirm( stat );  This needs to be addressed some how
//  596 
//  597   return ZMacSuccess;
        MOV     R1,#0x0
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock23
//  598 }
//  599 
//  600 /********************************************************************************************************
//  601  * @fn      ZMacSyncReq
//  602  *
//  603  * @brief   This function is called to request a sync to the current
//  604  *          networks beacons.
//  605  *
//  606  * @param   LogicalChannel -
//  607  * @param   TrackBeacon - true/false
//  608  *
//  609  * @return  status
//  610  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  611 uint8 ZMacSyncReq( ZMacSyncReq_t *pData )
ZMacSyncReq:
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function ZMacSyncReq
        CODE
//  612 {
        FUNCALL ZMacSyncReq, MAC_MlmeSyncReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  613   MAC_MlmeSyncReq( (macMlmeSyncReq_t *)pData);
        ; Setup parameters for call to function MAC_MlmeSyncReq
        LCALL   ??MAC_MlmeSyncReq?relay
//  614   return ZMacSuccess;
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock24
//  615 }
//  616 
//  617 /********************************************************************************************************
//  618  * @fn      ZMacPollReq
//  619  *
//  620  * @brief   This function is called to request MAC data request poll.
//  621  *
//  622  * @param   coordAddr -
//  623  * @param   coordPanId -
//  624  * @param   SecurityEnable - true or false.
//  625  *
//  626  * @return  status
//  627  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  628 uint8 ZMacPollReq( ZMacPollReq_t *pData )
ZMacPollReq:
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function ZMacPollReq
        CODE
//  629 {
        FUNCALL ZMacPollReq, MAC_MlmePollReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  630   /* Right now, set security to zero */
//  631   pData->Sec.SecurityLevel = false;
        MOV     A,R2
        ADD     A,#0x13
        LCALL   ?Subroutine8 & 0xFFFF
//  632 
//  633   MAC_MlmePollReq ((macMlmePollReq_t *)pData);
??CrossCallReturnLabel_16:
        ; Setup parameters for call to function MAC_MlmePollReq
        LCALL   ??MAC_MlmePollReq?relay
//  634   return ( ZMacSuccess );
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock25
//  635 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond26 Using cfiCommon0
          CFI Function ZMacPollReq
          CFI Conditional ??CrossCallReturnLabel_16
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function ZMacSendNoData
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+0
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function ZMacSendNoData
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+0
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker29 Using cfiCommon1
          CFI (cfiPicker29) NoFunction
          CFI (cfiPicker29) Picker
        MOV     DPL,A
        MOV     A,R3
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiPicker29
        REQUIRE ??Subroutine14_0
        ; // Fall through to label ??Subroutine14_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine14_0:
          CFI Block cfiCond30 Using cfiCommon0
          CFI Function ZMacStartReq
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function ZMacStartReq
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+0
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function ZMacPollReq
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond32) DPL0 Frame(CFA_SP, 4)
          CFI (cfiCond32) DPH0 Frame(CFA_SP, 5)
          CFI (cfiCond32) CFA_SP SP+-5
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function ZMacSendNoData
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+0
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function ZMacSendNoData
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_18
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+0
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker35 Using cfiCommon1
          CFI (cfiPicker35) NoFunction
          CFI (cfiPicker35) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        CLR     A
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiPicker35
//  636 
//  637 /********************************************************************************************************
//  638  * @fn      ZMacDataReqSec
//  639  *
//  640  * @brief   Send a MAC Data Frame packet, calls the passed in function to apply non-MAC security
//  641  *          on the MAC data field after the MAC buffer allocation.
//  642  *
//  643  * @param   pData - structure containing data and where to send it.
//  644  * @param   secCB - callback function to apply security, NULL indicates no security
//  645  *
//  646  * @return  status
//  647  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  648 uint8 ZMacDataReqSec( ZMacDataReq_t *pData, applySecCB_t secCB )
ZMacDataReqSec:
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function ZMacDataReqSec
        CODE
//  649 {
        FUNCALL ZMacDataReqSec, MAC_McpsDataAlloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacDataReqSec, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacDataReqSec, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacDataReqSec, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 23, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 23, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacDataReqSec, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacDataReqSec, MAC_McpsDataReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     ?V0 + 10,R4
        MOV     ?V0 + 11,R5
//  650   macMcpsDataReq_t *pBuf;
//  651 
//  652   /* Allocate memory */
//  653   pBuf = MAC_McpsDataAlloc( pData->msduLength, pData->Sec.SecurityLevel, pData->Sec.KeyIdMode );
        MOV     A,R2
        ADD     A,#0x1e
        MOV     ?V0 + 8,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     ?V0 + 9,A
        ; Setup parameters for call to function MAC_McpsDataAlloc
        MOV     A,R2
        ADD     A,#0x1c
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_21:
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ADD     A,#0x1b
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_19:
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??MAC_McpsDataAlloc?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
//  654 
//  655   if ( pBuf )
        MOV     A,R6
        ORL     A,R7
        JNZ     $+5
        LJMP    ??ZMacDataReqSec_0 & 0xFFFF
//  656   {
//  657     /* Copy the addresses */
//  658     osal_memcpy( &pBuf->mac, pData, sizeof (macDataReq_t) );
        ; Setup parameters for call to function osal_memcpy
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,?V0 + 1
        MOV     ?V0 + 6,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0x13
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x26
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  659 
//  660     /* Copy data */
//  661     osal_memcpy( pBuf->msdu.p, pData->msdu, pData->msduLength );
        MOV     A,R6
        ADD     A,#0x2
        MOV     ?V0 + 2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 3,A
        ; Setup parameters for call to function osal_memcpy
        MOV     A,?V0 + 0
        ADD     A,#0x1f
        MOV     DPL,A
        MOV     A,?V0 + 1
        LCALL   ??Subroutine16_0 & 0xFFFF
??CrossCallReturnLabel_20:
        MOVX    A,@DPTR
        MOV     ?V0 + 4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 5,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     DPL,?V0 + 8
        MOV     DPH,?V0 + 9
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  662 
//  663     /* Copy Security parameters */
//  664     osal_memcpy( &pBuf->sec, &pData->Sec, sizeof (macSec_t));
        ; Setup parameters for call to function osal_memcpy
        MOV     A,?V0 + 0
        ADD     A,#0x13
        MOV     ?V0 + 0,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     ?V0 + 4,?V0 + 0
        MOV     ?V0 + 5,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R4,#0xb
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x1b
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  665 
//  666     /* Encrypt in place */
//  667     if ( secCB && pBuf->msdu.len && pBuf->msdu.p )
        MOV     A,?V0 + 10
        ORL     A,?V0 + 11
        JZ      ??ZMacDataReqSec_1
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        JZ      ??ZMacDataReqSec_1
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     A,R2
        ORL     A,R3
        JZ      ??ZMacDataReqSec_1
//  668     {
//  669       if ( secCB( pBuf->msdu.len, pBuf->msdu.p ) != ZSuccess )
        ; Setup parameters for indirect call
        MOV     DPL,?V0 + 10
        MOV     DPH,?V0 + 11
        LCALL   ?CALL_IND
        MOV     A,R1
        JZ      ??ZMacDataReqSec_1
//  670       {
//  671         // Deallocate the buffer.  MAC_McpsDataAlloc() calls osal_msg_allocate() and
//  672         // returns the same pointer.
//  673         osal_msg_deallocate( (uint8 *)pBuf );
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  674 
//  675         return ( MAC_NO_RESOURCES );
        SJMP    ??ZMacDataReqSec_0
//  676       }
//  677     }
//  678 
//  679     /* Call Mac Data Request */
//  680     MAC_McpsDataReq( pBuf );
??ZMacDataReqSec_1:
        ; Setup parameters for call to function MAC_McpsDataReq
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??MAC_McpsDataReq?relay
//  681 
//  682     return ( ZMacSuccess );
        MOV     R1,#0x0
        SJMP    ??ZMacDataReqSec_2
//  683   }
//  684 
//  685   return ( MAC_NO_RESOURCES );
??ZMacDataReqSec_0:
        MOV     R1,#0x1a
??ZMacDataReqSec_2:
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock36
//  686 }
//  687 
//  688 /********************************************************************************************************
//  689  * @fn      ZMacDataReq
//  690  *
//  691  * @brief   Send a MAC Data Frame packet.
//  692  *
//  693  * @param   structure containing data and where to send it.
//  694  *
//  695  * @return  status
//  696  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  697 uint8 ZMacDataReq( ZMacDataReq_t *pData )
ZMacDataReq:
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function ZMacDataReq
        CODE
//  698 {
        FUNCALL ZMacDataReq, ZMacDataReqSec
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  699   return ZMacDataReqSec( pData, NULL );
        ; Setup parameters for call to function ZMacDataReqSec
        MOV     R4,#0x0
        MOV     R5,#0x0
        LCALL   ??ZMacDataReqSec?relay
        SJMP    ??Subroutine15_0
          CFI EndBlock cfiBlock37
//  700 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock38 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV     R1,#0x0
          CFI EndBlock cfiBlock38
        REQUIRE ??Subroutine15_0
        ; // Fall through to label ??Subroutine15_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine15_0:
          CFI Block cfiBlock39 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock39
//  701 
//  702 /********************************************************************************************************
//  703  * @fn      ZMacPurgeReq
//  704  *
//  705  * @brief   Purge a MAC Data Frame packet.
//  706  *
//  707  * @param   MSDU data handle.
//  708  *
//  709  * @return  status
//  710  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  711 uint8 ZMacPurgeReq( byte Handle )
ZMacPurgeReq:
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function ZMacPurgeReq
        CODE
//  712 {
        FUNCALL ZMacPurgeReq, MAC_McpsPurgeReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  713   MAC_McpsPurgeReq( Handle );
        ; Setup parameters for call to function MAC_McpsPurgeReq
        LCALL   ??MAC_McpsPurgeReq?relay
          CFI EndBlock cfiBlock40
//  714   return ZMacSuccess;
        REQUIRE ?Subroutine3
        ; // Fall through to label ?Subroutine3
//  715 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiBlock41 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R1,#0x0
        LJMP    ??Subroutine12_0 & 0xFFFF
          CFI EndBlock cfiBlock41
//  716 
//  717 /********************************************************************************************************
//  718  * @fn      ZMacSrcMatchEnable
//  719  *
//  720  * @brief   This function is call to enable AUTOPEND and source address matching.
//  721  *
//  722  * @param   addressType - address type that the application uses
//  723  *                        SADDR_MODE_SHORT or SADDR_MODE_EXT.
//  724  *          numEntries  - number of source address table entries to be used
//  725  *
//  726  * @return  status
//  727  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  728 ZMacStatus_t ZMacSrcMatchEnable (void)
ZMacSrcMatchEnable:
          CFI Block cfiBlock42 Using cfiCommon0
          CFI Function ZMacSrcMatchEnable
        CODE
//  729 {
        FUNCALL ZMacSrcMatchEnable, MAC_SrcMatchEnable
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  730   MAC_SrcMatchEnable();
        ; Setup parameters for call to function MAC_SrcMatchEnable
        LCALL   ??MAC_SrcMatchEnable?relay
//  731   return ZMacSuccess;
        SJMP    ?Subroutine1
          CFI EndBlock cfiBlock42
//  732 }
//  733 
//  734 /********************************************************************************************************
//  735  * @fn      ZMacSrcMatchAddEntry
//  736  *
//  737  * @brief   This function is called to add a short or extended address to source address table.
//  738  *
//  739  * @param   addr - a pointer to sAddr_t which contains addrMode
//  740  *                     and a union of a short 16-bit MAC address or an extended
//  741  *                     64-bit MAC address to be added to the source address table.
//  742  *          panID - the device PAN ID. It is only used when the addr is
//  743  *                      using short address
//  744  *
//  745  * @return  status
//  746  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  747 ZMacStatus_t ZMacSrcMatchAddEntry (zAddrType_t *addr, uint16 panID)
ZMacSrcMatchAddEntry:
          CFI Block cfiBlock43 Using cfiCommon0
          CFI Function ZMacSrcMatchAddEntry
        CODE
//  748 {
        FUNCALL ZMacSrcMatchAddEntry, MAC_SrcMatchAddEntry
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  749   return (MAC_SrcMatchAddEntry ((sAddr_t*)addr, panID));
        ; Setup parameters for call to function MAC_SrcMatchAddEntry
        LCALL   ??MAC_SrcMatchAddEntry?relay
        SJMP    ??Subroutine15_0
          CFI EndBlock cfiBlock43
//  750 }
//  751 
//  752 /********************************************************************************************************
//  753  * @fn      ZMacSrcMatchDeleteEntry
//  754  *
//  755  * @brief   This function is called to delete a short or extended address from source address table.
//  756  *
//  757  * @param   addr - a pointer to sAddr_t which contains addrMode
//  758  *                     and a union of a short 16-bit MAC address or an extended
//  759  *                     64-bit MAC address to be added to the source address table.
//  760  *          panID - the device PAN ID. It is only used when the addr is
//  761  *                      using short address
//  762  *
//  763  * @return  status
//  764  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  765 ZMacStatus_t ZMacSrcMatchDeleteEntry (zAddrType_t *addr, uint16 panID)
ZMacSrcMatchDeleteEntry:
          CFI Block cfiBlock44 Using cfiCommon0
          CFI Function ZMacSrcMatchDeleteEntry
        CODE
//  766 {
        FUNCALL ZMacSrcMatchDeleteEntry, MAC_SrcMatchDeleteEntry
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  767   return (MAC_SrcMatchDeleteEntry ((sAddr_t*)addr, panID));
        ; Setup parameters for call to function MAC_SrcMatchDeleteEntry
        LCALL   ??MAC_SrcMatchDeleteEntry?relay
        SJMP    ??Subroutine15_0
          CFI EndBlock cfiBlock44
//  768 }
//  769 
//  770 /********************************************************************************************************
//  771  * @fn       ZMacSrcMatchAckAllPending
//  772  *
//  773  * @brief    Enabled/disable acknowledging all packets with pending bit set
//  774  *           It is normally enabled when adding new entries to
//  775  *           the source address table fails due to the table is full, or
//  776  *           disabled when more entries are deleted and the table has
//  777  *           empty slots.
//  778  *
//  779  * @param    option - true (acknowledging all packets with pending field set)
//  780  *                    false (acknowledging all packets with pending field cleared)
//  781  *
//  782  * @return   status
//  783  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  784 ZMacStatus_t ZMacSrcMatchAckAllPending (uint8 option)
ZMacSrcMatchAckAllPending:
          CFI Block cfiBlock45 Using cfiCommon0
          CFI Function ZMacSrcMatchAckAllPending
        CODE
//  785 {
        FUNCALL ZMacSrcMatchAckAllPending, MAC_SrcMatchAckAllPending
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//  786   MAC_SrcMatchAckAllPending (option);
        ; Setup parameters for call to function MAC_SrcMatchAckAllPending
        LCALL   ??MAC_SrcMatchAckAllPending?relay
//  787 
//  788   return ZMacSuccess;
        SJMP    ?Subroutine3
          CFI EndBlock cfiBlock45
//  789 }
//  790 
//  791 /********************************************************************************************************
//  792  * @fn       ZMacSrcMatchCheckAllPending
//  793  *
//  794  * @brief    This function is called to check if acknowledging all packets with pending bit set is enabled.
//  795  *
//  796  * @param    none
//  797  *
//  798  * @return   status
//  799  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  800 ZMacStatus_t ZMacSrcMatchCheckAllPending (void)
ZMacSrcMatchCheckAllPending:
          CFI Block cfiBlock46 Using cfiCommon0
          CFI Function ZMacSrcMatchCheckAllPending
        CODE
//  801 {
        FUNCALL ZMacSrcMatchCheckAllPending, MAC_SrcMatchCheckAllPending
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  802   return (MAC_SrcMatchCheckAllPending ());
        ; Setup parameters for call to function MAC_SrcMatchCheckAllPending
        LCALL   ??MAC_SrcMatchCheckAllPending?relay
        SJMP    ??Subroutine15_0
          CFI EndBlock cfiBlock46
//  803 }
//  804 
//  805 /********************************************************************************************************
//  806  * @fn      - ZMACPwrOnReq
//  807  *
//  808  * @brief   - This function requests the MAC to power on the radio hardware
//  809  *            and wake up.  When the power on procedure is complete the MAC
//  810  *            will send a MAC_PWR_ON_CNF to the application.
//  811  *
//  812  * @input   - None.
//  813  *
//  814  * @output  - None.
//  815  *
//  816  * @return  - None.
//  817  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  818 void ZMacPwrOnReq ( void )
ZMacPwrOnReq:
          CFI Block cfiBlock47 Using cfiCommon0
          CFI Function ZMacPwrOnReq
        CODE
//  819 {
        FUNCALL ZMacPwrOnReq, MAC_PwrOnReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  820   MAC_PwrOnReq();
        ; Setup parameters for call to function MAC_PwrOnReq
        LCALL   ??MAC_PwrOnReq?relay
//  821 }
        SJMP    ??Subroutine15_0
          CFI EndBlock cfiBlock47
//  822 
//  823 /********************************************************************************************************
//  824  * @fn          MAC_PwrMode
//  825  *
//  826  * @brief       This function returns the current power mode of the MAC.
//  827  *
//  828  * input parameters
//  829  *
//  830  * None.
//  831  *
//  832  * output parameters
//  833  *
//  834  * None.
//  835  *
//  836  * @return      The current power mode of the MAC.
//  837  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  838 uint8 ZMac_PwrMode(void)
ZMac_PwrMode:
          CFI Block cfiBlock48 Using cfiCommon0
          CFI Function ZMac_PwrMode
        CODE
//  839 {
        FUNCALL ZMac_PwrMode, MAC_PwrMode
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  840   return (MAC_PwrMode());
        ; Setup parameters for call to function MAC_PwrMode
        LCALL   ??MAC_PwrMode?relay
        SJMP    ??Subroutine15_0
          CFI EndBlock cfiBlock48
//  841 }
//  842 
//  843 /********************************************************************************************************
//  844  * @fn      ZMacSetTransmitPower
//  845  *
//  846  * @brief   Set the transmitter power according to the level setting param.
//  847  *
//  848  * @param   Valid power level setting as defined in ZMAC.h.
//  849  *
//  850  * @return  ZMacSuccess if PHY_TRANSMIT_POWER found or ZMacUnsupportedAttribute.
//  851  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  852 uint8 ZMacSetTransmitPower( ZMacTransmitPower_t level )
ZMacSetTransmitPower:
          CFI Block cfiBlock49 Using cfiCommon0
          CFI Function ZMacSetTransmitPower
        CODE
//  853 {
        FUNCALL ZMacSetTransmitPower, MAC_MlmeSetReq
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 1, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 1, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 1
        MOV     A,#-0x1
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 1)
        MOV     A,R1
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    @DPTR,A
//  854   return MAC_MlmeSetReq( ZMacPhyTransmitPowerSigned, &level );
        ; Setup parameters for call to function MAC_MlmeSetReq
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#-0x20
        LCALL   ??MAC_MlmeSetReq?relay
        MOV     A,#0x1
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 XSP16+0
        SJMP    ??Subroutine15_0
          CFI EndBlock cfiBlock49
//  855 }
//  856 
//  857 /********************************************************************************************************
//  858  * @fn      ZMacSendNoData
//  859  *
//  860  * @brief   This function sends an empty msg
//  861  *
//  862  * @param   DstAddr   - destination short address
//  863  *          DstPANId  - destination pan id
//  864  *
//  865  * @return  None
//  866  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  867 void ZMacSendNoData ( uint16 DstAddr, uint16 DstPANId )
ZMacSendNoData:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI Function ZMacSendNoData
        CODE
//  868 {
        FUNCALL ZMacSendNoData, MAC_McpsDataAlloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacSendNoData, MAC_McpsDataReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
//  869   macMcpsDataReq_t *pBuf;
//  870 
//  871   /* Allocate memory */
//  872   pBuf = MAC_McpsDataAlloc(0, MAC_SEC_LEVEL_NONE, MAC_KEY_ID_MODE_NONE);
        ; Setup parameters for call to function MAC_McpsDataAlloc
        MOV     R3,#0x0
        MOV     R2,#0x0
        MOV     R1,#0x0
        LCALL   ??MAC_McpsDataAlloc?relay
//  873 
//  874   if (pBuf)
        MOV     A,R2
        ORL     A,R3
        JZ      ??ZMacSendNoData_0
//  875   {
//  876     /* Fill in src information */
//  877     pBuf->mac.srcAddrMode              = SADDR_MODE_SHORT;
        MOV     A,R2
        ADD     A,#0x31
        LCALL   ?Subroutine9 & 0xFFFF
//  878 
//  879     /* Fill in dst information */
//  880     pBuf->mac.dstAddr.addr.shortAddr   = DstAddr;
??CrossCallReturnLabel_9:
        ADD     A,#0x26
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
//  881     pBuf->mac.dstAddr.addrMode         = SADDR_MODE_SHORT;
        MOV     A,R2
        ADD     A,#0x2e
        LCALL   ?Subroutine9 & 0xFFFF
//  882     pBuf->mac.dstPanId                 = DstPANId;
??CrossCallReturnLabel_10:
        ADD     A,#0x2f
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_23:
        MOV     A,R6
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R7
        MOVX    @DPTR,A
//  883 
//  884     /* Misc information */
//  885     pBuf->mac.msduHandle               = 0;
        MOV     A,R2
        ADD     A,#0x32
        LCALL   ?Subroutine8 & 0xFFFF
//  886     pBuf->mac.txOptions                = ZMAC_TXOPTION_ACK | ZMAC_TXOPTION_NO_RETRANS | ZMAC_TXOPTION_NO_CNF;
??CrossCallReturnLabel_17:
        MOV     A,R2
        ADD     A,#0x33
        LCALL   ?Subroutine10 & 0xFFFF
??CrossCallReturnLabel_24:
        MOV     A,#0x31
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  887 
//  888     /* Right now, set security to zero */
//  889     pBuf->sec.securityLevel = false;
        MOV     A,R2
        ADD     A,#0x23
        LCALL   ?Subroutine8 & 0xFFFF
//  890 
//  891     /* Call Mac Data Request */
//  892     MAC_McpsDataReq(pBuf);
??CrossCallReturnLabel_18:
        ; Setup parameters for call to function MAC_McpsDataReq
        LCALL   ??MAC_McpsDataReq?relay
          CFI EndBlock cfiBlock50
//  893   }
//  894 
//  895 }
??ZMacSendNoData_0:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock51 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock51

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine10:
          CFI Block cfiCond52 Using cfiCommon0
          CFI Function ZMacDataReqSec
          CFI Conditional ??CrossCallReturnLabel_21
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond53 Using cfiCommon0
          CFI (cfiCond53) Function ZMacSendNoData
          CFI (cfiCond53) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond53) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond53) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond53) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond53) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond53) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond53) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond53) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond53) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond53) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond53) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond53) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond53) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond53) CFA_SP SP+0
          CFI (cfiCond53) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond54 Using cfiCommon0
          CFI (cfiCond54) Function ZMacSendNoData
          CFI (cfiCond54) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond54) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond54) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond54) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond54) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond54) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond54) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond54) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond54) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond54) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond54) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond54) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond54) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond54) CFA_SP SP+0
          CFI (cfiCond54) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function ZMacSendNoData
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+0
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker56 Using cfiCommon1
          CFI (cfiPicker56) NoFunction
          CFI (cfiPicker56) Picker
        MOV     DPL,A
        MOV     A,R3
          CFI EndBlock cfiCond52
          CFI EndBlock cfiCond53
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiPicker56
        REQUIRE ??Subroutine16_0
        ; // Fall through to label ??Subroutine16_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine16_0:
          CFI Block cfiCond57 Using cfiCommon0
          CFI Function ZMacDataReqSec
          CFI Conditional ??CrossCallReturnLabel_19
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function ZMacDataReqSec
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond58) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond58) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond58) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond58) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond58) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond58) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond58) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond58) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond58) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond58) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond58) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond58) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond58) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond58) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond58) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond58) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond58) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond58) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond58) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond58) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond58) CFA_SP SP+0
          CFI (cfiCond58) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function ZMacDataReqSec
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond59) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond59) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond59) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond59) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond59) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond59) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond59) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond59) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond59) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond59) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond59) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond59) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond59) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond59) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond59) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond59) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond59) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond59) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond59) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond59) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond59) CFA_SP SP+0
          CFI (cfiCond59) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function ZMacSendNoData
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_22
          CFI (cfiCond60) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond60) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond60) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond60) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond60) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond60) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond60) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond60) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond60) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond60) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond60) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond60) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond60) CFA_SP SP+0
          CFI (cfiCond60) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function ZMacSendNoData
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond61) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond61) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond61) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond61) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond61) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond61) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond61) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond61) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond61) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond61) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond61) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond61) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond61) CFA_SP SP+0
          CFI (cfiCond61) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond62 Using cfiCommon0
          CFI (cfiCond62) Function ZMacSendNoData
          CFI (cfiCond62) Conditional ??CrossCallReturnLabel_24
          CFI (cfiCond62) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond62) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond62) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond62) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond62) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond62) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond62) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond62) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond62) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond62) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond62) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond62) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond62) CFA_SP SP+0
          CFI (cfiCond62) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker63 Using cfiCommon1
          CFI (cfiPicker63) NoFunction
          CFI (cfiPicker63) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiCond62
          CFI EndBlock cfiPicker63

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond64 Using cfiCommon0
          CFI Function ZMacSendNoData
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond65 Using cfiCommon0
          CFI (cfiCond65) Function ZMacSendNoData
          CFI (cfiCond65) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond65) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond65) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond65) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond65) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond65) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond65) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond65) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond65) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond65) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond65) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond65) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond65) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond65) CFA_SP SP+0
          CFI (cfiCond65) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker66 Using cfiCommon1
          CFI (cfiPicker66) NoFunction
          CFI (cfiPicker66) Picker
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOV     A,#0x2
        MOVX    @DPTR,A
        MOV     A,R2
        RET
          CFI EndBlock cfiCond64
          CFI EndBlock cfiCond65
          CFI EndBlock cfiPicker66
//  896 
//  897 /********************************************************************************************************
//  898  * @fn      ZMacStateIdle
//  899  *
//  900  * @brief   This function returns true if the MAC state is idle.
//  901  *
//  902  * @param   none
//  903  *
//  904  * @return  TRUE if the MAC state is idle, FALSE otherwise.
//  905  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  906 uint8 ZMacStateIdle( void )
ZMacStateIdle:
          CFI Block cfiBlock67 Using cfiCommon0
          CFI Function ZMacStateIdle
        CODE
//  907 {
        FUNCALL ZMacStateIdle, macStateIdle
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  908   return macStateIdle();
        ; Setup parameters for call to function macStateIdle
        LCALL   ??macStateIdle?relay
        LJMP    ??Subroutine15_0 & 0xFFFF
          CFI EndBlock cfiBlock67
//  909 }
//  910 
//  911 /********************************************************************************************************
//  912  * @fn      ZMacEnhancedActiveScanReq
//  913  *
//  914  * @brief   This function is called to perform a network scan.
//  915  *
//  916  * @param   param - structure with info need send it.
//  917  *
//  918  * @return  status
//  919  ********************************************************************************************************/

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  920 uint8 ZMacEnhancedActiveScanReq( ZMacScanReq_t *pData )
ZMacEnhancedActiveScanReq:
          CFI Block cfiBlock68 Using cfiCommon0
          CFI Function ZMacEnhancedActiveScanReq
        CODE
//  921 {
        FUNCALL ZMacEnhancedActiveScanReq, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacEnhancedActiveScanReq, osal_memset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacEnhancedActiveScanReq, MAC_MlmeScanReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZMacEnhancedActiveScanReq, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  922   _ScanChannels = pData->ScanChannels;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?XLOAD_R2345
        MOV     DPTR,#_ScanChannels
        LCALL   ?XSTORE_R2345
//  923 
//  924   /* scan in progress */
//  925   if (ZMac_ScanBuf != NULL)
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_6:
        JZ      ??ZMacEnhancedActiveScanReq_0
//  926   {
//  927     return MAC_SCAN_IN_PROGRESS;
        MOV     R1,#-0x4
        SJMP    ??ZMacEnhancedActiveScanReq_1
//  928   }
//  929 
//  930   if (pData->ScanType != ZMAC_ORPHAN_SCAN)
??ZMacEnhancedActiveScanReq_0:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x3
        XRL     A,R0
        JZ      ??CrossCallReturnLabel_3
//  931   {
//  932     /* Allocate memory depends on the scan type */
//  933     if (pData->ScanType == ZMAC_ED_SCAN)
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_8:
        JNZ     ??ZMacEnhancedActiveScanReq_2
//  934     {
//  935       if ((ZMac_ScanBuf = osal_mem_alloc(ZMAC_ED_SCAN_MAXCHANNELS)) == NULL)
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,#0x1b
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        LCALL   ?Subroutine11 & 0xFFFF
??CrossCallReturnLabel_13:
        JZ      ??ZMacEnhancedActiveScanReq_3
//  936       {
//  937         return MAC_NO_RESOURCES;
//  938       }
//  939       osal_memset(ZMac_ScanBuf, 0, ZMAC_ED_SCAN_MAXCHANNELS);
        ; Setup parameters for call to function osal_memset
        MOV     R4,#0x1b
        MOV     R5,#0x0
        MOV     R1,#0x0
        LCALL   ??osal_memset?relay
//  940       pData->Result.pEnergyDetect = ((uint8*)ZMac_ScanBuf) + MAC_CHAN_11;
        LCALL   ?Subroutine5 & 0xFFFF
//  941     }
//  942     else if (pData->MaxResults > 0)
//  943     {
//  944       if ((ZMac_ScanBuf = pData->Result.pPanDescriptor =
//  945            osal_mem_alloc( sizeof( ZMacPanDesc_t ) * pData->MaxResults )) == NULL)
//  946       {
//  947         return MAC_NO_RESOURCES;
//  948       }
//  949     }
//  950   }
//  951 
//  952   /* Channel Page */
//  953   pData->ChannelPage = 0x00; 
??CrossCallReturnLabel_3:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  954 
//  955   MAC_MlmeScanReq ((macMlmeScanReq_t *)pData);
        ; Setup parameters for call to function MAC_MlmeScanReq
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??MAC_MlmeScanReq?relay
//  956 
//  957   return ZMacSuccess;
        MOV     R1,#0x0
??ZMacEnhancedActiveScanReq_1:
        LJMP    ?Subroutine2 & 0xFFFF
??ZMacEnhancedActiveScanReq_2:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??CrossCallReturnLabel_3
        ; Setup parameters for call to function osal_mem_alloc
        MOV     B,#0x21
        MUL     AB
        MOV     R2,A
        MOV     R3,B
        LCALL   ??osal_mem_alloc?relay
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_1:
        JNZ     ??CrossCallReturnLabel_3
??ZMacEnhancedActiveScanReq_3:
        MOV     R1,#0x1a
        SJMP    ??ZMacEnhancedActiveScanReq_1
          CFI EndBlock cfiBlock68
//  958 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond69 Using cfiCommon0
          CFI Function ZMacScanReq
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond70 Using cfiCommon0
          CFI (cfiCond70) Function ZMacEnhancedActiveScanReq
          CFI (cfiCond70) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond70) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond70) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond70) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond70) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond70) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond70) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond70) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond70) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond70) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond70) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond70) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond70) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond70) CFA_SP SP+0
          CFI (cfiCond70) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker71 Using cfiCommon1
          CFI (cfiPicker71) NoFunction
          CFI (cfiPicker71) Picker
        MOV     A,R6
        ADD     A,#0x16
        MOV     ?V0 + 0,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     ?V0 + 1,A
        MOV     A,R0
        RET
          CFI EndBlock cfiCond69
          CFI EndBlock cfiCond70
          CFI EndBlock cfiPicker71

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond72 Using cfiCommon0
          CFI Function ZMacScanReq
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond73 Using cfiCommon0
          CFI (cfiCond73) Function ZMacEnhancedActiveScanReq
          CFI (cfiCond73) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond73) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond73) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond73) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond73) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond73) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond73) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond73) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond73) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond73) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond73) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond73) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond73) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond73) CFA_SP SP+0
          CFI (cfiCond73) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker74 Using cfiCommon1
          CFI (cfiPicker74) NoFunction
          CFI (cfiPicker74) Picker
        MOV     DPTR,#ZMac_ScanBuf
        MOVX    A,@DPTR
        ADD     A,#0xb
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#0x0
        MOV     R1,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond72
          CFI EndBlock cfiCond73
          CFI EndBlock cfiPicker74

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond75 Using cfiCommon0
          CFI Function ZMacScanReq
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function ZMacEnhancedActiveScanReq
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond76) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond76) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond76) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond76) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond76) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond76) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond76) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond76) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond76) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond76) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond76) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond76) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond76) CFA_SP SP+0
          CFI (cfiCond76) CFA_XSP16 add(XSP16, 12)
          CFI Block cfiPicker77 Using cfiCommon1
          CFI (cfiPicker77) NoFunction
          CFI (cfiPicker77) Picker
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_11:
        RET
          CFI EndBlock cfiCond75
          CFI EndBlock cfiCond76
          CFI EndBlock cfiPicker77

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacInit?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacInit

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacReset?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacReset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacGetReq?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacGetReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacSetReq?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacSetReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacAssociateReq?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacAssociateReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacAssociateRsp?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacAssociateRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacDisassociateReq?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacDisassociateReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacOrphanRsp?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacOrphanRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacScanReq?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacScanReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacStartReq?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacStartReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacSyncReq?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacSyncReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacPollReq?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacPollReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacDataReqSec?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacDataReqSec

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacDataReq?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacDataReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacPurgeReq?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacPurgeReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacSrcMatchEnable?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacSrcMatchEnable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacSrcMatchAddEntry?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacSrcMatchAddEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacSrcMatchDeleteEntry?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacSrcMatchDeleteEntry

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacSrcMatchAckAllPending?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacSrcMatchAckAllPending

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacSrcMatchCheckAllPending?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacSrcMatchCheckAllPending

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacPwrOnReq?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacPwrOnReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMac_PwrMode?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMac_PwrMode

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacSetTransmitPower?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacSetTransmitPower

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacSendNoData?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacSendNoData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacStateIdle?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacStateIdle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZMacEnhancedActiveScanReq?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZMacEnhancedActiveScanReq

        END
// 
// 1 256 bytes in segment BANKED_CODE
//   156 bytes in segment BANK_RELAYS
//     6 bytes in segment XDATA_Z
// 
// 1 412 bytes of CODE  memory
//     6 bytes of XDATA memory
//
//Errors: none
//Warnings: none
