###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             27/May/2014  19:13:47 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Components\mt\MT_TASK.c                      #
#    Command line       =  -f "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f "D:\Texas         #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO       #
#                          -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f "D:\Texas               #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wZCL.cfg" "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Components\mt\MT_TASK.c" -D                  #
#                          FEATURE_GREEN_POWER -D SECURE=1 -D                 #
#                          TC_LINKKEY_JOIN -D ZDSECMGR_TC_DEVICE_MAX=2 -D     #
#                          NV_RESTORE -D HOLD_AUTO_START -D INTER_PAN -D      #
#                          LCD_SUPPORTED=DEBUG -D ZCL_BASIC -D ZCL_READ -D    #
#                          ZCL_WRITE -D ZCL_IDENTIFY -D ZCL_ON_OFF -D         #
#                          ZCL_SCENES -D ZCL_GROUPS -D                        #
#                          ZCL_LIGHT_LINK_ENHANCE -D ZCL_LEVEL_CTRL -D        #
#                          ZCL_COLOR_CTRL -D MAX_CHANNELS_24GHZ=0x02108800    #
#                          -D xPWM_ALT2 -D xTHERMAL_SHUTDOWN -D               #
#                          ZLL_1_0_HUB_COMPATIBILITY -D DALI_LIGHT -lC        #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Zlight  #
#                          - Router\List\" -lA "D:\Texas Instruments\Z-Stack  #
#                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC253 #
#                          x\Zlight - Router\List\" --diag_suppress           #
#                          Pe001,Pa010 -o "D:\Texas Instruments\Z-Stack       #
#                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC253 #
#                          x\Zlight - Router\Obj\" -e --debug --core=plain    #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\Texas                  #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\" -I    #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\Sour #
#                          ce\" -I "D:\Texas Instruments\Z-Stack Lighting     #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\S #
#                          ource\" -I "D:\Texas Instruments\Z-Stack Lighting  #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\HomeAutomation\Source\" -I "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\HomeAutomation\SampleLight\Source\" -I           #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\ZMain\TI2530DB\" -I "D:\Texas                    #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\hal\include\" -I "D:\Texas      #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\hal\target\CC2530PMP4712\" -I   #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\include\" -I "D:\Texas      #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\high_level\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\" -I        #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\single_chip #
#                          \" -I "D:\Texas Instruments\Z-Stack Lighting       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mt\" -I "D:\Texas               #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\osal\include\" -I "D:\Texas     #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\services\saddr\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\services\sdata\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\af\" -I "D:\Texas         #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\nwk\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sapi\" -I "D:\Texas       #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sec\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sys\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\zcl\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\zdo\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\zmac\" -I "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\zmac\f8w\" -Ohz                 #
#                          --require_prototypes                               #
#    List file          =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Zlight  #
#                          - Router\List\MT_TASK.lst                          #
#    Object file        =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Zlight  #
#                          - Router\Obj\MT_TASK.r51                           #
#                                                                             #
#                                                                             #
###############################################################################

D:\Texas Instruments\Z-Stack Lighting 1.0.2\Components\mt\MT_TASK.c
      1          /***************************************************************************************************
      2            Filename:       MT_TASK.c
      3            Revised:        $Date: 2013-11-11 17:57:41 -0800 (Mon, 11 Nov 2013) $
      4            Revision:       $Revision: 36025 $
      5          
      6            Description:    MonitorTest Task handling routines
      7          
      8            Copyright 2007-2013 Texas Instruments Incorporated. All rights reserved.
      9          
     10            IMPORTANT: Your use of this Software is limited to those specific rights
     11            granted under the terms of a software license agreement between the user
     12            who downloaded the software, his/her employer (which must be your employer)
     13            and Texas Instruments Incorporated (the "License").  You may not use this
     14            Software unless you agree to abide by the terms of the License. The License
     15            limits your use, and you acknowledge, that the Software may not be modified,
     16            copied or distributed unless embedded on a Texas Instruments microcontroller
     17            or used solely and exclusively in conjunction with a Texas Instruments radio
     18            frequency transceiver, which is integrated into your product.  Other than for
     19            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     20            works of, modify, distribute, perform, display or sell this Software and/or
     21            its documentation for any purpose.
     22          
     23            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     24            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     25            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     26            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     27            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     28            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     29            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     30            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     31            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     32            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     33            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     34          
     35            Should you have any questions regarding your right to use this Software,
     36            contact Texas Instruments Incorporated at www.TI.com.
     37          
     38           ***************************************************************************************************/
     39          
     40          /***************************************************************************************************
     41           * INCLUDES
     42           ***************************************************************************************************/
     43          #include "ZComDef.h"
     44          #include "MT_TASK.h"
     45          #include "MT.h"
     46          #include "MT_DEBUG.h"
     47          #include "MT_UART.h"
     48          #include "MT_UTIL.h"
     49          #include "MT_SYS.h"
     50          
     51          #if !defined( NONWK )
     52          #include "MT_ZDO.h"
     53          #include "MT_AF.h"
     54          #endif  /* NONWK */
     55          
     56          #include "hal_uart.h"
     57          #include "OSAL_Memory.h"
     58          
     59          /***************************************************************************************************
     60           * LOCAL FUNCTIONS
     61           ***************************************************************************************************/
     62          
     63          static void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg );
     64          #ifdef MT_SRNG
     65          void MT_ProcessSrngEvent(void); 
     66          #endif
     67          
     68          /***************************************************************************************************
     69           * GLOBALS
     70           ***************************************************************************************************/
     71          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     72          uint8 MT_TaskID;
   \                     MT_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     73          
     74          /***************************************************************************************************
     75           * @fn      MT_TaskInit
     76           *
     77           * @brief  MonitorTest Task Initialization.  This function is put into the
     78           *         task table.
     79           *
     80           * @param   task_id - task ID of the MT Task
     81           *
     82           * @return  void
     83           ***************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     84          void MT_TaskInit(uint8 task_id)
   \                     MT_TaskInit:
     85          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
     86            MT_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#MT_TaskID
   \   00000A   F0           MOVX    @DPTR,A
     87          
     88            /* Initialize the Serial port */
     89            MT_UartInit();
   \   00000B                ; Setup parameters for call to function MT_UartInit
   \   00000B   12....       LCALL   ??MT_UartInit?relay
     90          
     91            /* Register taskID - Do this after UartInit() because it will reset the taskID */
     92            MT_UartRegisterTaskID(task_id);
   \   00000E                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   00000E   EE           MOV     A,R6
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   ??MT_UartRegisterTaskID?relay
     93          
     94            osal_set_event(task_id, MT_SECONDARY_INIT_EVENT);
   \   000013                ; Setup parameters for call to function osal_set_event
   \   000013   7A10         MOV     R2,#0x10
   \   000015   7B00         MOV     R3,#0x0
   \   000017   EE           MOV     A,R6
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   ??osal_set_event?relay
     95          }
   \   00001C   7F01         MOV     R7,#0x1
   \   00001E   02....       LJMP    ?BANKED_LEAVE_XDATA
     96          
     97          /**************************************************************************************************
     98           * @fn      MT_ProcessEvent
     99           *
    100           * @brief   MonitorTest Task Event Processor.  This task is put into the task table.
    101           *
    102           * @param   task_id - task ID of the MT Task
    103           * @param   events - event(s) for the MT Task
    104           *
    105           * @return  Bit mask of the unprocessed MT Task events.
    106           **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    107          UINT16 MT_ProcessEvent(uint8 task_id, uint16 events)
   \                     MT_ProcessEvent:
    108          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 2,R2
   \   000007   8B..         MOV     ?V0 + 3,R3
    109            /* Could be multiple events, so switch won't work */
    110            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   7003         JNZ     $+5
   \   00000E   02....       LJMP    ??MT_ProcessEvent_0 & 0xFFFF
    111            {
    112              uint8 *msg_ptr = osal_msg_receive(task_id);
   \   000011                ; Setup parameters for call to function osal_msg_receive
   \   000011   12....       LCALL   ??osal_msg_receive?relay
   \   000014   8A..         MOV     ?V0 + 0,R2
   \   000016   8B..         MOV     ?V0 + 1,R3
   \   000018   AE..         MOV     R6,?V0 + 0
   \   00001A   AF..         MOV     R7,?V0 + 1
    113          
    114              if (msg_ptr != NULL)
   \   00001C   EE           MOV     A,R6
   \   00001D   4F           ORL     A,R7
   \   00001E   7003         JNZ     $+5
   \   000020   02....       LJMP    ??MT_ProcessEvent_1 & 0xFFFF
    115              {
    116                MT_ProcessIncomingCommand((mtOSALSerialData_t *)msg_ptr);
   \   000023   8E82         MOV     DPL,R6
   \   000025   8F83         MOV     DPH,R7
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   F5..         MOV     ?V0 + 0,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   F5..         MOV     ?V0 + 1,A
   \   000030   8E82         MOV     DPL,R6
   \   000032   8F83         MOV     DPH,R7
   \   000034   E0           MOVX    A,@DPTR
   \   000035   14           DEC     A
   \   000036   606C         JZ      ??MT_ProcessEvent_2
   \   000038   14           DEC     A
   \   000039   6064         JZ      ??MT_ProcessEvent_3
   \   00003B   24FE         ADD     A,#-0x2
   \   00003D   6023         JZ      ??MT_ProcessEvent_4
   \   00003F   24FE         ADD     A,#-0x2
   \   000041   601A         JZ      ??MT_ProcessEvent_5
   \   000043   24E2         ADD     A,#-0x1e
   \   000045   7064         JNZ     ??MT_ProcessEvent_6
   \   000047                ; Setup parameters for call to function MTProcessAppRspMsg
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   2405         ADD     A,#0x5
   \   000053   F9           MOV     R1,A
   \   000054   AA..         MOV     R2,?V0 + 0
   \   000056   AB..         MOV     R3,?V0 + 1
   \   000058   12....       LCALL   ??MTProcessAppRspMsg?relay
   \   00005B   804E         SJMP    ??MT_ProcessEvent_6
   \                     ??MT_ProcessEvent_5:
   \   00005D                ; Setup parameters for call to function MT_ProcessDebugStr
   \   00005D   12....       LCALL   ??MT_ProcessDebugStr?relay
   \   000060   8049         SJMP    ??MT_ProcessEvent_6
   \                     ??MT_ProcessEvent_4:
   \   000062   85..82       MOV     DPL,?V0 + 0
   \   000065   85..83       MOV     DPH,?V0 + 1
   \   000068   A3           INC     DPTR
   \   000069   A3           INC     DPTR
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   2405         ADD     A,#0x5
   \   00006E   F5..         MOV     ?V0 + 6,A
   \   000070                ; Setup parameters for call to function MT_UartCalcFCS
   \   000070   74FE         MOV     A,#-0x2
   \   000072   25..         ADD     A,?V0 + 6
   \   000074   F9           MOV     R1,A
   \   000075   85..82       MOV     DPL,?V0 + 0
   \   000078   85..83       MOV     DPH,?V0 + 1
   \   00007B   A3           INC     DPTR
   \   00007C   AA82         MOV     R2,DPL
   \   00007E   AB83         MOV     R3,DPH
   \   000080   12....       LCALL   ??MT_UartCalcFCS?relay
   \   000083   E9           MOV     A,R1
   \   000084   C0E0         PUSH    A
   \   000086   E5..         MOV     A,?V0 + 0
   \   000088   25..         ADD     A,?V0 + 6
   \   00008A   F8           MOV     R0,A
   \   00008B   E5..         MOV     A,?V0 + 1
   \   00008D   3400         ADDC    A,#0x0
   \   00008F   F9           MOV     R1,A
   \   000090   E8           MOV     A,R0
   \   000091   24FF         ADD     A,#-0x1
   \   000093   F582         MOV     DPL,A
   \   000095   E9           MOV     A,R1
   \   000096   34FF         ADDC    A,#-0x1
   \   000098   F583         MOV     DPH,A
   \   00009A   D0E0         POP     A
   \   00009C   F0           MOVX    @DPTR,A
   \   00009D   800C         SJMP    ??MT_ProcessEvent_6
   \                     ??MT_ProcessEvent_3:
   \   00009F                ; Setup parameters for call to function MT_ProcessDebugMsg
   \   00009F   12....       LCALL   ??MT_ProcessDebugMsg?relay
   \   0000A2   8007         SJMP    ??MT_ProcessEvent_6
   \                     ??MT_ProcessEvent_2:
   \   0000A4                ; Setup parameters for call to function MT_ProcessIncoming
   \   0000A4   AA..         MOV     R2,?V0 + 0
   \   0000A6   AB..         MOV     R3,?V0 + 1
   \   0000A8   12....       LCALL   ??MT_ProcessIncoming?relay
    117          
    118                osal_msg_deallocate(msg_ptr);
   \                     ??MT_ProcessEvent_6:
   \   0000AB                ; Setup parameters for call to function osal_msg_deallocate
   \   0000AB   EE           MOV     A,R6
   \   0000AC   FA           MOV     R2,A
   \   0000AD   EF           MOV     A,R7
   \   0000AE   FB           MOV     R3,A
   \   0000AF   12....       LCALL   ??osal_msg_deallocate?relay
    119              }
    120          
    121              /* Return unproccessed events */
    122              return (events ^ SYS_EVENT_MSG);
   \                     ??MT_ProcessEvent_1:
   \   0000B2   AA..         MOV     R2,?V0 + 2
   \   0000B4   E5..         MOV     A,?V0 + 3
   \   0000B6   6480         XRL     A,#0x80
   \   0000B8   FB           MOV     R3,A
   \   0000B9   802E         SJMP    ??MT_ProcessEvent_7
    123            }
    124          
    125            if ( events & MT_SECONDARY_INIT_EVENT )
   \                     ??MT_ProcessEvent_0:
   \   0000BB   EA           MOV     A,R2
   \   0000BC   5410         ANL     A,#0x10
   \   0000BE   6009         JZ      ??MT_ProcessEvent_8
    126            {
    127              MT_Init(task_id);
   \   0000C0                ; Setup parameters for call to function MT_Init
   \   0000C0   12....       LCALL   ??MT_Init?relay
    128              /* Return unproccessed events */
    129              return (events ^ MT_SECONDARY_INIT_EVENT);
   \   0000C3   E5..         MOV     A,?V0 + 2
   \   0000C5   6410         XRL     A,#0x10
   \   0000C7   8017         SJMP    ??MT_ProcessEvent_9
    130            }
    131          
    132            if ( events & MT_ZTOOL_SERIAL_RCV_BUFFER_FULL )
   \                     ??MT_ProcessEvent_8:
   \   0000C9   EA           MOV     A,R2
   \   0000CA   5402         ANL     A,#0x2
   \   0000CC   6006         JZ      ??MT_ProcessEvent_10
    133            {
    134              /* Return unproccessed events */
    135              return (events ^ MT_ZTOOL_SERIAL_RCV_BUFFER_FULL);
   \   0000CE   EA           MOV     A,R2
   \   0000CF   6402         XRL     A,#0x2
   \   0000D1   FA           MOV     R2,A
   \   0000D2   8015         SJMP    ??MT_ProcessEvent_7
    136            }
    137          
    138          #if !defined( NONWK )
    139            if ( events & MT_AF_EXEC_EVT )
   \                     ??MT_ProcessEvent_10:
   \   0000D4   EA           MOV     A,R2
   \   0000D5   5408         ANL     A,#0x8
   \   0000D7   600C         JZ      ??MT_ProcessEvent_11
    140            {
    141              MT_AfExec();
   \   0000D9                ; Setup parameters for call to function MT_AfExec
   \   0000D9   12....       LCALL   ??MT_AfExec?relay
    142              return (events ^ MT_AF_EXEC_EVT);
   \   0000DC   E5..         MOV     A,?V0 + 2
   \   0000DE   6408         XRL     A,#0x8
   \                     ??MT_ProcessEvent_9:
   \   0000E0   FA           MOV     R2,A
   \   0000E1   AB..         MOV     R3,?V0 + 3
   \   0000E3   8004         SJMP    ??MT_ProcessEvent_7
    143            }
    144          #endif  /* NONWK */
    145          
    146            /* Handle MT_SYS_OSAL_START_TIMER callbacks */
    147          #if defined MT_SYS_FUNC
    148            if ( events & (MT_SYS_OSAL_EVENT_MASK))
    149            {
    150              if (events & MT_SYS_OSAL_EVENT_0)
    151              {
    152                MT_SysOsalTimerExpired(0x00);
    153                events ^= MT_SYS_OSAL_EVENT_0;
    154              }
    155          
    156              if (events & MT_SYS_OSAL_EVENT_1)
    157              {
    158                MT_SysOsalTimerExpired(0x01);
    159                events ^= MT_SYS_OSAL_EVENT_1;
    160              }
    161          
    162              if (events & MT_SYS_OSAL_EVENT_2)
    163              {
    164                MT_SysOsalTimerExpired(0x02);
    165                events ^= MT_SYS_OSAL_EVENT_2;
    166              }
    167          
    168              if (events & MT_SYS_OSAL_EVENT_3)
    169              {
    170                MT_SysOsalTimerExpired(0x03);
    171                events ^= MT_SYS_OSAL_EVENT_3;
    172              }
    173          
    174              return events;
    175            }
    176          #endif
    177          
    178          #ifdef MT_SRNG
    179            if(events & MT_SRNG_EVENT)
    180            {
    181              MT_ProcessSrngEvent(); 
    182              return (events ^ MT_SRNG_EVENT);
    183            }
    184          #endif  
    185          
    186            /* Discard or make more handlers */
    187            return 0;
   \                     ??MT_ProcessEvent_11:
   \   0000E5   7A00         MOV     R2,#0x0
   \   0000E7   7B00         MOV     R3,#0x0
   \                     ??MT_ProcessEvent_7:
   \   0000E9   7F08         MOV     R7,#0x8
   \   0000EB   02....       LJMP    ?BANKED_LEAVE_XDATA
    188          
    189          } /* MT_ProcessEvent() */

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_TaskInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_TaskInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??MT_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    MT_ProcessEvent
    190          
    191          #ifdef MT_SRNG
    192          /***************************************************************************************************
    193           * @fn      MT_ProcessSrngEvent
    194           *
    195           * @brief
    196           *
    197           *   Process SRNG Event Messages.
    198           *
    199           * @param   None
    200           *
    201           * @return  None
    202           ***************************************************************************************************/
    203          void MT_ProcessSrngEvent(void)
    204          {
    205            uint8 * msg;
    206            osal_event_hdr_t * msg_ptr;
    207            
    208            msg_ptr = (osal_event_hdr_t *)osal_msg_allocate( MT_RPC_FRAME_HDR_SZ + 4 + sizeof(osal_event_hdr_t) );
    209            msg = msg_ptr + sizeof(osal_event_hdr_t) + 4;
    210            
    211            if ( msg_ptr )
    212            {
    213              msg_ptr->event = CMD_SERIAL_MSG;
    214              msg_ptr->status = 4;
    215              if(msg)
    216              {
    217                msg[MT_RPC_POS_LEN] = 4 + MT_RPC_FRAME_HDR_SZ;
    218                msg[MT_RPC_POS_CMD0] = MT_RPC_SYS_UTIL;
    219                msg[MT_RPC_POS_CMD1] = MT_UTIL_SRNG_GENERATE;
    220              } 
    221              osal_memcpy(msg_ptr + sizeof(osal_event_hdr_t), &msg, 4); 
    222            }
    223            osal_msg_send( MT_TaskID, (uint8 *)msg_ptr );
    224          }
    225          #endif
    226          
    227          /***************************************************************************************************
    228           * @fn      MT_ProcessIncomingCommand
    229           *
    230           * @brief
    231           *
    232           *   Process Event Messages.
    233           *
    234           * @param   *msg - pointer to event message
    235           *
    236           * @return
    237           ***************************************************************************************************/
    238          static void MT_ProcessIncomingCommand( mtOSALSerialData_t *msg )
    239          {
    240            uint8 len, *msg_ptr = msg->msg;
    241          
    242            /* Use the first byte of the message as the command ID */
    243            switch ( msg->hdr.event )
    244            {
    245              case CMD_SERIAL_MSG:
    246                MT_ProcessIncoming(msg_ptr);
    247                break;
    248          
    249              case CMD_DEBUG_MSG:
    250                MT_ProcessDebugMsg( (mtDebugMsg_t *)msg );
    251                break;
    252          
    253              case CB_FUNC:
    254                /*
    255                  Build SPI message here instead of redundantly calling MT_BuildSPIMsg
    256                  because we have copied data already in the allocated message
    257                */
    258          
    259                /* msg_ptr is the beginning of the intended SPI message */
    260                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
    261          
    262                /*
    263                  FCS goes to the last byte in the message and is calculated over all
    264                  the bytes except FCS and SOP
    265                */
    266                msg_ptr[len-1] = MT_UartCalcFCS(msg_ptr + 1, (uint8)(len-2));
    267          
    268          #ifdef MT_UART_DEFAULT_PORT
    269                HalUARTWrite ( MT_UART_DEFAULT_PORT, msg_ptr, len );
    270          #endif
    271                break;
    272          
    273              case CMD_DEBUG_STR:
    274                MT_ProcessDebugStr( (mtDebugStr_t *)msg );
    275                break;
    276          
    277          #if !defined ( NONWK )
    278              case MT_SYS_APP_RSP_MSG:
    279                len = SPI_0DATA_MSG_LEN + msg_ptr[DATALEN_FIELD];
    280                MTProcessAppRspMsg( msg_ptr, len );
    281                break;
    282          #endif  // NONWK
    283          
    284          #if defined (MT_UTIL_FUNC)
    285          #if defined ZCL_KEY_ESTABLISH
    286              case ZCL_KEY_ESTABLISH_IND:
    287                MT_UtilKeyEstablishInd((keyEstablishmentInd_t *)msg);
    288                break;
    289          #endif
    290          #endif
    291          #ifdef MT_ZDO_CB_FUNC
    292              case ZDO_STATE_CHANGE:
    293                MT_ZdoStateChangeCB((osal_event_hdr_t *)msg);
    294                break;
    295          #endif
    296          
    297              default:
    298                break;
    299            }
    300          }
    301          
    302          #ifdef MT_TASK
    303          /***************************************************************************************************
    304           * @fn      MT_TransportAlloc
    305           *
    306           * @brief   Allocate memory for transport msg
    307           *
    308           * @param   uint8 cmd0 - The first byte of the MT command id containing the command type and subsystem.
    309           *          uint8 len - length
    310           *
    311           * @return  pointer the allocated memory or NULL if fail to allocate the memory
    312           ***************************************************************************************************/
    313          uint8 *MT_TransportAlloc(uint8 cmd0, uint8 len)
    314          {
    315            uint8 *p;
    316          
    317            (void)cmd0;  // Intentionally unreferenced parameter
    318          
    319            /* Allocate a buffer of data length + SOP+CMD+FCS (5 bytes) */
    320            p = osal_msg_allocate(len + SPI_0DATA_MSG_LEN);
    321          
    322            if (p)
    323            {
    324              p++; /* Save space for SOP_VALUE, msg structure */
    325              return p;
    326            }
    327            else
    328            {
    329              return NULL;
    330            }
    331          }
    332          
    333          /***************************************************************************************************
    334           * @fn      MT_TransportSend
    335           *
    336           * @brief   Fill in SOP and FCS then send out the msg
    337           *
    338           * @param   uint8 *pBuf - pointer to the message that contains CMD, length, data and FCS
    339           *
    340           * @return  None
    341           ***************************************************************************************************/
    342          void MT_TransportSend(uint8 *pBuf)
    343          {
    344            uint8 *msgPtr;
    345            uint8 dataLen = pBuf[0]; /* Data length is on byte #1 from the pointer */
    346          
    347            /* Move back to the SOP */
    348            msgPtr = pBuf-1;
    349          
    350            /* Insert SOP */
    351            msgPtr[0] = MT_UART_SOF;
    352          
    353            /* Insert FCS */
    354            msgPtr[SPI_0DATA_MSG_LEN - 1 + dataLen] = MT_UartCalcFCS (pBuf, (3 + dataLen));
    355          
    356            /* Send to UART */
    357          #ifdef MT_UART_DEFAULT_PORT
    358            HalUARTWrite(MT_UART_DEFAULT_PORT, msgPtr, dataLen + SPI_0DATA_MSG_LEN);
    359          #endif
    360          
    361            /* Deallocate */
    362            osal_msg_deallocate(msgPtr);
    363          }
    364          #endif /* MT_TASK */
    365          /***************************************************************************************************
    366           ***************************************************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       1      0     16  MT_ProcessEvent
                          0 0 16 -> MTProcessAppRspMsg
                          0 0 16 -> MT_AfExec
                          0 0 16 -> MT_Init
                          0 0 16 -> MT_ProcessDebugMsg
                          0 0 16 -> MT_ProcessDebugStr
                          0 0 16 -> MT_ProcessIncoming
                          0 0 16 -> MT_UartCalcFCS
                          0 0 16 -> osal_msg_deallocate
                          0 0 16 -> osal_msg_receive
       0      0      9  MT_TaskInit
                          0 0  9 -> MT_UartInit
                          0 0  9 -> MT_UartRegisterTaskID
                          0 0  9 -> osal_set_event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??MT_ProcessEvent?relay
       6  ??MT_TaskInit?relay
     238  MT_ProcessEvent
       1  MT_TaskID
      33  MT_TaskInit

 
 271 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
   1 byte  in segment XDATA_Z
 
 283 bytes of CODE  memory
   1 byte  of XDATA memory

Errors: none
Warnings: none
