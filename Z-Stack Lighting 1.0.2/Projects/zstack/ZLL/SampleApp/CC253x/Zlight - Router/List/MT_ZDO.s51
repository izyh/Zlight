///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            27/May/2014  19:13:49 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\Texas Instruments\Z-Stack Lighting             /
//                          1.0.2\Components\mt\MT_ZDO.c                      /
//    Command line       =  -f "D:\Texas Instruments\Z-Stack Lighting         /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ      /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f "D:\Texas        /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO     /
//                          -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f "D:\Texas              /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wZCL.cfg" "D:\Texas           /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Components\mt\MT_ZDO.c" -D                  /
//                          FEATURE_GREEN_POWER -D SECURE=1 -D                /
//                          TC_LINKKEY_JOIN -D ZDSECMGR_TC_DEVICE_MAX=2 -D    /
//                          NV_RESTORE -D HOLD_AUTO_START -D INTER_PAN -D     /
//                          LCD_SUPPORTED=DEBUG -D ZCL_BASIC -D ZCL_READ -D   /
//                          ZCL_WRITE -D ZCL_IDENTIFY -D ZCL_ON_OFF -D        /
//                          ZCL_SCENES -D ZCL_GROUPS -D                       /
//                          ZCL_LIGHT_LINK_ENHANCE -D ZCL_LEVEL_CTRL -D       /
//                          ZCL_COLOR_CTRL -D MAX_CHANNELS_24GHZ=0x02108800   /
//                          -D xPWM_ALT2 -D xTHERMAL_SHUTDOWN -D              /
//                          ZLL_1_0_HUB_COMPATIBILITY -D DALI_LIGHT -lC       /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Zlight /
//                           - Router\List\" -lA "D:\Texas                    /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Zlight /
//                           - Router\List\" --diag_suppress Pe001,Pa010 -o   /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Zlight /
//                           - Router\Obj\" -e --debug --core=plain           /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "D:\Texas                 /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\" -I   /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\Sou /
//                          rce\" -I "D:\Texas Instruments\Z-Stack Lighting   /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          Source\" -I "D:\Texas Instruments\Z-Stack         /
//                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC25 /
//                          3x\..\..\..\HomeAutomation\Source\" -I "D:\Texas  /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\HomeAutomation\SampleLight\Source\" -I         /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\ZMain\TI2530DB\" -I "D:\Texas                  /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\hal\include\" -I "D:\Texas    /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\hal\target\CC2530PMP4712\"    /
//                          -I "D:\Texas Instruments\Z-Stack Lighting         /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\include\" -I "D:\Texas    /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\high_level\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\low_level\srf04\" -I      /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\low_level\srf04\single_ch /
//                          ip\" -I "D:\Texas Instruments\Z-Stack Lighting    /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mt\" -I "D:\Texas             /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\osal\include\" -I "D:\Texas   /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\services\saddr\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\services\sdata\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\af\" -I "D:\Texas       /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\nwk\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sapi\" -I "D:\Texas     /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sec\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sys\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\zcl\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\zdo\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\zmac\" -I "D:\Texas           /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\zmac\f8w\" -Ohz               /
//                          --require_prototypes                              /
//    List file          =  D:\Texas Instruments\Z-Stack Lighting             /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Zlight /
//                           - Router\List\MT_ZDO.s51                         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME MT_ZDO

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)


        END
// D:\Texas Instruments\Z-Stack Lighting 1.0.2\Components\mt\MT_ZDO.c
//    1 /**************************************************************************************************
//    2   Filename:       MT_ZDO.c
//    3   Revised:        $Date: 2013-11-13 13:09:12 -0800 (Wed, 13 Nov 2013) $
//    4   Revision:       $Revision: 36079 $
//    5 
//    6   Description:    MonitorTest functions for the ZDO layer.
//    7 
//    8 
//    9   Copyright 2004-2013 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License"). You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product. Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com.
//   38 **************************************************************************************************/
//   39 
//   40 #ifdef MT_ZDO_FUNC
//   41 
//   42 /**************************************************************************************************
//   43  * INCLUDES
//   44  **************************************************************************************************/
//   45 #include "ZComDef.h"
//   46 #include "OSAL.h"
//   47 #include "OSAL_Nv.h"
//   48 #include "MT.h"
//   49 #include "MT_ZDO.h"
//   50 #include "APSMEDE.h"
//   51 #include "ZDConfig.h"
//   52 #include "ZDProfile.h"
//   53 #include "ZDObject.h"
//   54 #include "ZDApp.h"
//   55 #include "OnBoard.h"
//   56 #include "aps_groups.h"
//   57 
//   58 #if defined ( MT_ZDO_EXTENSIONS )
//   59   #include "rtg.h"
//   60 #endif
//   61 #if defined ( MT_SYS_KEY_MANAGEMENT ) || defined ( MT_ZDO_EXTENSIONS )
//   62   #include "ZDSecMgr.h"
//   63 #endif
//   64 
//   65 #include "nwk_util.h"
//   66 
//   67 /**************************************************************************************************
//   68  * CONSTANTS
//   69  **************************************************************************************************/
//   70 #define MT_ZDO_END_DEVICE_ANNCE_IND_LEN   0x0D
//   71 #define MT_ZDO_ADDR_RSP_LEN               0x0D
//   72 #define MT_ZDO_BIND_UNBIND_RSP_LEN        0x03
//   73 #define MT_ZDO_BEACON_IND_LEN             21
//   74 #define MT_ZDO_BEACON_IND_PACK_LEN        (MT_UART_TX_BUFF_MAX - SPI_0DATA_MSG_LEN)
//   75 #define MT_ZDO_JOIN_CNF_LEN               5
//   76 
//   77 // Message must pack nwk addr, entire (not just pointer to) ieee addr, and packet cost, so the
//   78 // sizeof(zdoConcentratorInd_t) is not usable.
//   79 #define MT_ZDO_CONCENTRATOR_IND_LEN      (2 + Z_EXTADDR_LEN + 1)
//   80 
//   81 #define MTZDO_RESPONSE_BUFFER_LEN   100
//   82 
//   83 #define MTZDO_MAX_MATCH_CLUSTERS    16
//   84 #define MTZDO_MAX_ED_BIND_CLUSTERS  15
//   85 
//   86 // Conversion from ZDO Cluster Id to the RPC AREQ Id is direct as follows:
//   87 #define MT_ZDO_CID_TO_AREQ_ID(CId)  ((uint8)(CId) | 0x80)
//   88 
//   89 #define MT_ZDO_STATUS_LEN   1
//   90 
//   91 #if defined ( MT_ZDO_EXTENSIONS )
//   92 typedef struct
//   93 {
//   94   uint16            ami;
//   95   uint16            keyNvId;   // index to the Link Key table in NV
//   96   ZDSecMgr_Authentication_Option authenticateOption;
//   97 } ZDSecMgrEntry_t;
//   98 #endif  // MT_ZDO_EXTENSIONS
//   99 
//  100 /**************************************************************************************************
//  101  * GLOBAL VARIABLES
//  102  **************************************************************************************************/
//  103 uint32 _zdoCallbackSub;
//  104 uint8 *pBeaconIndBuf = NULL;
//  105 
//  106 /**************************************************************************************************
//  107  * LOCAL VARIABLES
//  108  **************************************************************************************************/
//  109 
//  110 /**************************************************************************************************
//  111  * LOCAL FUNCTIONS
//  112  **************************************************************************************************/
//  113 #if defined (MT_ZDO_FUNC)
//  114 void MT_ZdoNWKAddressRequest(uint8 *pBuf);
//  115 void MT_ZdoIEEEAddrRequest(uint8 *pBuf);
//  116 void MT_ZdoNodeDescRequest(uint8 *pBuf);
//  117 void MT_ZdoPowerDescRequest(uint8 *pBuf);
//  118 void MT_ZdoSimpleDescRequest(uint8 *pBuf);
//  119 void MT_ZdoActiveEpRequest(uint8 *pBuf);
//  120 void MT_ZdoMatchDescRequest(uint8 *pBuf);
//  121 void MT_ZdoComplexDescRequest(uint8 *pBuf);
//  122 void MT_ZdoUserDescRequest(uint8 *pBuf);
//  123 void MT_ZdoEndDevAnnce(uint8 *pBuf);
//  124 void MT_ZdoUserDescSet(uint8 *pBuf);
//  125 void MT_ZdoServiceDiscRequest(uint8 *pBuf);
//  126 #if defined ( ZIGBEE_CHILD_AGING )
//  127 void MT_ZdoEndDeviceTimeoutRequest(uint8 *pBuf);
//  128 #endif // ZIGBEE_CHILD_AGING
//  129 void MT_ZdoEndDevBindRequest(uint8 *pBuf);
//  130 void MT_ZdoBindRequest(uint8 *pBuf);
//  131 void MT_ZdoUnbindRequest(uint8 *pBuf);
//  132 void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf);
//  133 #if defined ( MT_SYS_KEY_MANAGEMENT )
//  134 void MT_ZdoSetLinkKey(uint8 *pBuf);
//  135 void MT_ZdoRemoveLinkKey(uint8 *pBuf);
//  136 void MT_ZdoGetLinkKey(uint8 *pBuf);
//  137 #endif /* MT_SYS_KEY_MANAGEMENT */
//  138 void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf);
//  139 void MT_ZdoJoinReq(uint8 *pBuf);
//  140 /* Call back function */
//  141 void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr );
//  142 void *MT_ZdoBeaconIndCB ( void *pStr );
//  143 void *MT_ZdoJoinCnfCB ( void *pStr );
//  144 #if defined (MT_ZDO_MGMT)
//  145 void MT_ZdoMgmtLqiRequest(uint8 *pBuf);
//  146 void MT_ZdoMgmtRtgRequest(uint8 *pBuf);
//  147 void MT_ZdoMgmtBindRequest(uint8 *pBuf);
//  148 void MT_ZdoMgmtLeaveRequest(uint8 *pBuf);
//  149 void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf);
//  150 void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf);
//  151 void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf);
//  152 #endif /* MT_ZDO_MGMT */
//  153 void MT_ZdoSendData( uint8 *pBuf );
//  154 void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf );
//  155 void MT_ZdoStartupFromApp(uint8 *pBuf);
//  156 void MT_ZdoRegisterForZDOMsg(uint8 *pBuf);
//  157 void MT_ZdoRemoveRegisteredCB(uint8 *pBuf);
//  158 #endif /* MT_ZDO_FUNC */
//  159 
//  160 #if defined (MT_ZDO_CB_FUNC)
//  161 uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg );
//  162 void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID );
//  163 void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr );
//  164 void MT_ZdoBindUnbindRspCB( uint16 clusterID, uint16 srcAddr, uint8 status );
//  165 void* MT_ZdoSrcRtgCB( void *pStr );
//  166 static void *MT_ZdoConcentratorIndCB(void *pStr);
//  167 static void *MT_ZdoLeaveInd(void *vPtr);
//  168 #endif /* MT_ZDO_CB_FUNC */
//  169 
//  170 #if defined ( MT_ZDO_EXTENSIONS )
//  171 void MT_ZdoSecAddLinkKey( uint8 *pBuf );
//  172 void MT_ZdoSecEntryLookupExt( uint8 *pBuf );
//  173 void MT_ZdoSecDeviceRemove( uint8 *pBuf );
//  174 void MT_ZdoExtRouteDisc( uint8 *pBuf );
//  175 void MT_ZdoExtRouteCheck( uint8 *pBuf );
//  176 static void MT_ZdoExtRemoveGroup( uint8 *pBuf );
//  177 static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf );
//  178 static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf );
//  179 static void MT_ZdoExtFindGroup( uint8 *pBuf );
//  180 static void MT_ZdoExtAddGroup( uint8 *pBuf );
//  181 static void MT_ZdoExtCountAllGroups( uint8 *pBuf );
//  182 extern ZStatus_t ZDSecMgrEntryLookupExt( uint8* extAddr, ZDSecMgrEntry_t** entry );
//  183 #endif // MT_ZDO_EXTENSIONS
//  184 
//  185 #if defined (MT_ZDO_FUNC)
//  186 /***************************************************************************************************
//  187  * @fn      MT_ZdoInit
//  188  *
//  189  * @brief   MT ZDO initialization
//  190  *
//  191  * @param   none
//  192  *
//  193  * @return  none
//  194  ***************************************************************************************************/
//  195 void MT_ZdoInit(void)
//  196 {
//  197 #ifdef MT_ZDO_CB_FUNC
//  198   /* Register with ZDO for indication callbacks */
//  199   ZDO_RegisterForZdoCB(ZDO_SRC_RTG_IND_CBID, &MT_ZdoSrcRtgCB);
//  200   ZDO_RegisterForZdoCB(ZDO_CONCENTRATOR_IND_CBID, &MT_ZdoConcentratorIndCB);
//  201   ZDO_RegisterForZdoCB(ZDO_LEAVE_IND_CBID, &MT_ZdoLeaveInd);
//  202 #endif
//  203 }
//  204 
//  205 /***************************************************************************************************
//  206  * @fn      MT_ZdoCommandProcessing
//  207  *
//  208  * @brief
//  209  *
//  210  *   Process all the ZDO commands that are issued by test tool
//  211  *
//  212  * @param   pBuf - pointer to the msg buffer
//  213  *
//  214  *          | LEN  | CMD0  | CMD1  |  DATA  |
//  215  *          |  1   |   1   |   1   |  0-255 |
//  216  *
//  217  * @return  status
//  218  ***************************************************************************************************/
//  219 uint8 MT_ZdoCommandProcessing(uint8* pBuf)
//  220 {
//  221   uint8 status = MT_RPC_SUCCESS;
//  222 
//  223   switch (pBuf[MT_RPC_POS_CMD1])
//  224   {
//  225 #if defined ( ZDO_NWKADDR_REQUEST )
//  226     case MT_ZDO_NWK_ADDR_REQ:
//  227       MT_ZdoNWKAddressRequest(pBuf);
//  228       break;
//  229 #endif
//  230 
//  231 #if defined ( ZDO_IEEEADDR_REQUEST )
//  232     case MT_ZDO_IEEE_ADDR_REQ:
//  233       MT_ZdoIEEEAddrRequest(pBuf);
//  234       break;
//  235 #endif
//  236 
//  237 #if defined ( ZDO_NODEDESC_REQUEST )
//  238     case MT_ZDO_NODE_DESC_REQ:
//  239       MT_ZdoNodeDescRequest(pBuf);
//  240       break;
//  241 #endif
//  242 
//  243 #if defined ( ZDO_POWERDESC_REQUEST )
//  244     case MT_ZDO_POWER_DESC_REQ:
//  245       MT_ZdoPowerDescRequest(pBuf);
//  246       break;
//  247 #endif
//  248 
//  249 #if defined ( ZDO_SIMPLEDESC_REQUEST )
//  250     case MT_ZDO_SIMPLE_DESC_REQ:
//  251       MT_ZdoSimpleDescRequest(pBuf);
//  252       break;
//  253 #endif
//  254 
//  255 #if defined ( ZDO_ACTIVEEP_REQUEST )
//  256     case MT_ZDO_ACTIVE_EP_REQ:
//  257       MT_ZdoActiveEpRequest(pBuf);
//  258       break;
//  259 #endif
//  260 
//  261 #if defined ( ZDO_MATCH_REQUEST )
//  262     case MT_ZDO_MATCH_DESC_REQ:
//  263       MT_ZdoMatchDescRequest(pBuf);
//  264       break;
//  265 #endif
//  266 
//  267 #if defined ( ZDO_COMPLEXDESC_REQUEST )
//  268     case MT_ZDO_COMPLEX_DESC_REQ:
//  269       MT_ZdoComplexDescRequest(pBuf);
//  270       break;
//  271 #endif
//  272 
//  273 #if defined ( ZDO_USERDESC_REQUEST )
//  274     case MT_ZDO_USER_DESC_REQ:
//  275       MT_ZdoUserDescRequest(pBuf);
//  276       break;
//  277 #endif
//  278 
//  279 #if defined ( ZDO_ENDDEVICE_ANNCE )
//  280     case MT_ZDO_END_DEV_ANNCE:
//  281       MT_ZdoEndDevAnnce(pBuf);
//  282       break;
//  283 #endif
//  284 
//  285 #if defined ( ZDO_USERDESCSET_REQUEST )
//  286     case MT_ZDO_USER_DESC_SET:
//  287       MT_ZdoUserDescSet(pBuf);
//  288       break;
//  289 #endif
//  290 
//  291 #if defined ( ZDO_SERVERDISC_REQUEST )
//  292     case MT_ZDO_SERVICE_DISC_REQ:
//  293       MT_ZdoServiceDiscRequest(pBuf);
//  294       break;
//  295 #endif
//  296 
//  297 #if defined ( ZIGBEE_CHILD_AGING )
//  298 #if defined ( ZDO_ENDDEVICETIMEOUT_REQUEST )
//  299     case MT_ZDO_END_DEVICE_TIMEOUT_REQ:
//  300       MT_ZdoEndDeviceTimeoutRequest(pBuf);
//  301       break;
//  302 #endif
//  303 #endif // ZIGBEE_CHILD_AGING
//  304 
//  305 #if defined ( ZDO_ENDDEVICEBIND_REQUEST )
//  306     case MT_ZDO_END_DEV_BIND_REQ:
//  307       MT_ZdoEndDevBindRequest(pBuf);
//  308       break;
//  309 #endif
//  310 
//  311 #if defined ( ZDO_BIND_UNBIND_REQUEST )
//  312     case MT_ZDO_BIND_REQ:
//  313       MT_ZdoBindRequest(pBuf);
//  314       break;
//  315 #endif
//  316 
//  317 #if defined ( ZDO_BIND_UNBIND_REQUEST )
//  318     case MT_ZDO_UNBIND_REQ:
//  319       MT_ZdoUnbindRequest(pBuf);
//  320       break;
//  321 #endif
//  322 
//  323 #if defined ( MT_SYS_KEY_MANAGEMENT )
//  324     case MT_ZDO_SET_LINK_KEY:
//  325       MT_ZdoSetLinkKey(pBuf);
//  326       break;
//  327 
//  328     case MT_ZDO_REMOVE_LINK_KEY:
//  329       MT_ZdoRemoveLinkKey(pBuf);
//  330       break;
//  331 
//  332     case MT_ZDO_GET_LINK_KEY:
//  333       MT_ZdoGetLinkKey(pBuf);
//  334       break;
//  335 #endif // MT_SYS_KEY_MANAGEMENT
//  336 
//  337 #if defined ( ZDO_MANUAL_JOIN )
//  338     case MT_ZDO_NWK_DISCOVERY_REQ:
//  339       MT_ZdoNetworkDiscoveryReq(pBuf);
//  340       break;
//  341 
//  342     case MT_ZDO_JOIN_REQ:
//  343       MT_ZdoJoinReq(pBuf);
//  344       break;
//  345 #endif
//  346 
//  347 #if defined ( ZDO_MGMT_NWKDISC_REQUEST )
//  348     case MT_ZDO_MGMT_NWKDISC_REQ:
//  349       MT_ZdoMgmtNwkDiscRequest(pBuf);
//  350       break;
//  351 #endif
//  352 
//  353 #if defined ( ZDO_MGMT_LQI_REQUEST )
//  354     case MT_ZDO_MGMT_LQI_REQ:
//  355       MT_ZdoMgmtLqiRequest(pBuf);
//  356       break;
//  357 #endif
//  358 
//  359 #if defined ( ZDO_MGMT_RTG_REQUEST )
//  360     case MT_ZDO_MGMT_RTG_REQ:
//  361       MT_ZdoMgmtRtgRequest(pBuf);
//  362       break;
//  363 #endif
//  364 
//  365 #if defined ( ZDO_MGMT_BIND_REQUEST )
//  366     case MT_ZDO_MGMT_BIND_REQ:
//  367       MT_ZdoMgmtBindRequest(pBuf);
//  368       break;
//  369 #endif
//  370 
//  371 #if defined ( ZDO_MGMT_LEAVE_REQUEST )
//  372     case MT_ZDO_MGMT_LEAVE_REQ:
//  373       MT_ZdoMgmtLeaveRequest(pBuf);
//  374       break;
//  375 #endif
//  376 
//  377 #if defined ( ZDO_MGMT_JOINDIRECT_REQUEST )
//  378     case MT_ZDO_MGMT_DIRECT_JOIN_REQ:
//  379       MT_ZdoMgmtDirectJoinRequest(pBuf);
//  380       break;
//  381 #endif
//  382 
//  383 #if defined ( ZDO_MGMT_PERMIT_JOIN_REQUEST )
//  384     case MT_ZDO_MGMT_PERMIT_JOIN_REQ:
//  385       MT_ZdoMgmtPermitJoinRequest(pBuf);
//  386       break;
//  387 #endif
//  388 
//  389 #if defined ( ZDO_MGMT_NWKUPDATE_REQUEST )
//  390     case MT_ZDO_MGMT_NWK_UPDATE_REQ:
//  391       MT_ZdoMgmtNwkUpdateRequest(pBuf);
//  392       break;
//  393 #endif
//  394 
//  395 #if defined ( ZDO_NETWORKSTART_REQUEST )
//  396     case MT_ZDO_STARTUP_FROM_APP:
//  397       MT_ZdoStartupFromApp(pBuf);
//  398       break;
//  399 #endif
//  400 
//  401     case MT_ZDO_SEND_DATA:
//  402       MT_ZdoSendData( pBuf );
//  403       break;
//  404 
//  405     case MT_ZDO_NWK_ADDR_OF_INTEREST_REQ:
//  406       MT_ZdoNwkAddrOfInterestReq( pBuf );
//  407       break;
//  408 
//  409     case MT_ZDO_MSG_CB_REGISTER:
//  410       MT_ZdoRegisterForZDOMsg(pBuf);
//  411       break;
//  412 
//  413     case MT_ZDO_MSG_CB_REMOVE:
//  414       MT_ZdoRemoveRegisteredCB(pBuf);
//  415       break;
//  416 
//  417 #if defined ( MT_ZDO_EXTENSIONS )
//  418     case MT_ZDO_SEC_ADD_LINK_KEY:
//  419       MT_ZdoSecAddLinkKey( pBuf );
//  420       break;
//  421 
//  422     case MT_ZDO_SEC_ENTRY_LOOKUP_EXT:
//  423       MT_ZdoSecEntryLookupExt( pBuf );
//  424       break;
//  425 
//  426     case MT_ZDO_SEC_DEVICE_REMOVE:
//  427        MT_ZdoSecDeviceRemove( pBuf );
//  428        break;
//  429 
//  430     case MT_ZDO_EXT_ROUTE_DISC:
//  431        MT_ZdoExtRouteDisc( pBuf );
//  432        break;
//  433 
//  434     case MT_ZDO_EXT_ROUTE_CHECK:
//  435        MT_ZdoExtRouteCheck( pBuf );
//  436        break;
//  437 
//  438     case MT_ZDO_EXT_REMOVE_GROUP:
//  439       MT_ZdoExtRemoveGroup( pBuf );
//  440       break;
//  441 
//  442     case MT_ZDO_EXT_REMOVE_ALL_GROUP:
//  443       MT_ZdoExtRemoveAllGroup( pBuf );
//  444       break;
//  445 
//  446     case MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT:
//  447       MT_ZdoExtFindAllGroupsEndpoint( pBuf );
//  448       break;
//  449 
//  450     case MT_ZDO_EXT_FIND_GROUP:
//  451       MT_ZdoExtFindGroup( pBuf );
//  452       break;
//  453 
//  454     case MT_ZDO_EXT_ADD_GROUP:
//  455       MT_ZdoExtAddGroup( pBuf );
//  456       break;
//  457 
//  458     case MT_ZDO_EXT_COUNT_ALL_GROUPS:
//  459       MT_ZdoExtCountAllGroups( pBuf );
//  460       break;
//  461 #endif  // MT_ZDO_EXTENSIONS
//  462 
//  463     default:
//  464       status = MT_RPC_ERR_COMMAND_ID;
//  465       break;
//  466   }
//  467 
//  468   return status;
//  469 }
//  470 
//  471 /***************************************************************************************************
//  472  * @fn      MT_ZdoNwkAddrReq
//  473  *
//  474  * @brief   Handle a nwk address request.
//  475  *
//  476  * @param   pData  - MT message data
//  477  *
//  478  * @return  void
//  479  ***************************************************************************************************/
//  480 void MT_ZdoNWKAddressRequest(uint8 *pBuf)
//  481 {
//  482   uint8 cmdId;
//  483   uint8 retValue;
//  484   uint8 reqType;
//  485   uint8 startIndex;
//  486   uint8 *pExtAddr;
//  487 
//  488   /* parse header */
//  489   cmdId = pBuf[MT_RPC_POS_CMD1];
//  490   pBuf += MT_RPC_FRAME_HDR_SZ;
//  491 
//  492   /* parse parameters */
//  493   pExtAddr = pBuf;
//  494   pBuf += Z_EXTADDR_LEN;
//  495 
//  496   /* Request type */
//  497   reqType = *pBuf++;
//  498 
//  499   /* Start index */
//  500   startIndex = *pBuf;
//  501 
//  502   retValue = (uint8)ZDP_NwkAddrReq(pExtAddr, reqType, startIndex, 0);
//  503 
//  504   /* Build and send back the response */
//  505   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  506 }
//  507 
//  508 /***************************************************************************************************
//  509  * @fn      MT_ZdoIEEEAddrRequest
//  510  *
//  511  * @brief   Handle a IEEE address request.
//  512  *
//  513  * @param   pData  - MT message data
//  514  *
//  515  * @return  void
//  516  ***************************************************************************************************/
//  517 void MT_ZdoIEEEAddrRequest (uint8 *pBuf)
//  518 {
//  519   uint8 cmdId;
//  520   uint8 retValue;
//  521   uint16 shortAddr;
//  522   uint8 reqType;
//  523   uint8 startIndex;
//  524 
//  525   /* parse header */
//  526   cmdId = pBuf[MT_RPC_POS_CMD1];
//  527   pBuf += MT_RPC_FRAME_HDR_SZ;
//  528 
//  529   /* Dev address */
//  530   shortAddr = BUILD_UINT16(pBuf[0], pBuf[1]);
//  531   pBuf += 2;
//  532 
//  533   /* request type */
//  534   reqType = *pBuf++;
//  535 
//  536   /* start index */
//  537   startIndex = *pBuf;
//  538 
//  539   retValue = (uint8)ZDP_IEEEAddrReq(shortAddr, reqType, startIndex, 0);
//  540 
//  541   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  542 }
//  543 
//  544 /***************************************************************************************************
//  545  * @fn      MT_ZdoNodeDescRequest
//  546  *
//  547  * @brief   Handle a Node Descriptor request.
//  548  *
//  549  * @param   pData  - MT message data
//  550  *
//  551  * @return  void
//  552  ***************************************************************************************************/
//  553 void MT_ZdoNodeDescRequest (uint8 *pBuf)
//  554 {
//  555   uint8 cmdId;
//  556   uint8 retValue;
//  557   zAddrType_t destAddr;
//  558   uint16 shortAddr;
//  559 
//  560   /* parse header */
//  561   cmdId = pBuf[MT_RPC_POS_CMD1];
//  562   pBuf += MT_RPC_FRAME_HDR_SZ;
//  563 
//  564   /* Destination address */
//  565   destAddr.addrMode = Addr16Bit;
//  566   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  567   pBuf += 2;
//  568 
//  569   /* Network address of interest */
//  570   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  571   pBuf += 2;
//  572 
//  573   retValue = (uint8)ZDP_NodeDescReq( &destAddr, shortAddr, 0);
//  574 
//  575   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  576 }
//  577 
//  578 /***************************************************************************************************
//  579  * @fn      MT_ZdoPowerDescRequest
//  580  *
//  581  * @brief   Handle a Power Descriptor request.
//  582  *
//  583  * @param   pData  - MT message data
//  584  *
//  585  * @return  void
//  586  ***************************************************************************************************/
//  587 void MT_ZdoPowerDescRequest(uint8 *pBuf)
//  588 {
//  589   uint8 cmdId;
//  590   uint8 retValue;
//  591   zAddrType_t destAddr;
//  592   uint16 shortAddr;
//  593 
//  594   /* parse header */
//  595   cmdId = pBuf[MT_RPC_POS_CMD1];
//  596   pBuf += MT_RPC_FRAME_HDR_SZ;
//  597 
//  598   /* Dev address */
//  599   destAddr.addrMode = Addr16Bit;
//  600   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  601   pBuf += 2;
//  602 
//  603   /* Network address of interest */
//  604   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  605   pBuf += 2;
//  606 
//  607   retValue = (uint8)ZDP_PowerDescReq( &destAddr, shortAddr, 0);
//  608 
//  609   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  610 }
//  611 
//  612 /***************************************************************************************************
//  613  * @fn      MT_ZdoSimpleDescRequest
//  614  *
//  615  * @brief   Handle a Simple Descriptor request.
//  616  *
//  617  * @param   pBuf  - MT message data
//  618  *
//  619  * @return  void
//  620  ***************************************************************************************************/
//  621 void MT_ZdoSimpleDescRequest(uint8 *pBuf)
//  622 {
//  623   uint8 cmdId;
//  624   uint8 retValue;
//  625   uint8 epInt;
//  626   zAddrType_t destAddr;
//  627   uint16 shortAddr;
//  628 
//  629   /* parse header */
//  630   cmdId = pBuf[MT_RPC_POS_CMD1];
//  631   pBuf += MT_RPC_FRAME_HDR_SZ;
//  632 
//  633   /* Dev address */
//  634   destAddr.addrMode = Addr16Bit;
//  635   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  636   pBuf += 2;
//  637 
//  638   /* Network address of interest */
//  639   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  640   pBuf += 2;
//  641 
//  642   /* endpoint/interface */
//  643   epInt = *pBuf++;
//  644 
//  645   retValue = (uint8)ZDP_SimpleDescReq( &destAddr, shortAddr, epInt, 0);
//  646 
//  647   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  648 }
//  649 
//  650 /***************************************************************************************************
//  651  * @fn      MT_ZdoActiveEpRequest
//  652  *
//  653  * @brief   Handle a Active EP request.
//  654  *
//  655  * @param   pBuf  - MT message data
//  656  *
//  657  * @return  void
//  658  ***************************************************************************************************/
//  659 void MT_ZdoActiveEpRequest(uint8 *pBuf)
//  660 {
//  661   uint8 cmdId;
//  662   uint8 retValue;
//  663   zAddrType_t destAddr;
//  664   uint16 shortAddr;
//  665 
//  666   /* parse header */
//  667   cmdId = pBuf[MT_RPC_POS_CMD1];
//  668   pBuf += MT_RPC_FRAME_HDR_SZ;
//  669 
//  670   /* Dev address */
//  671   destAddr.addrMode = Addr16Bit;
//  672   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  673   pBuf += 2;
//  674 
//  675   /* Network address of interest */
//  676   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  677   pBuf += 2;
//  678 
//  679   retValue = (uint8)ZDP_ActiveEPReq( &destAddr, shortAddr, 0);
//  680 
//  681   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  682 }
//  683 
//  684 /***************************************************************************************************
//  685  * @fn      MT_ZdoMatchDescRequest
//  686  *
//  687  * @brief   Handle a Match Descriptor request.
//  688  *
//  689  * @param   pBuf  - MT message data
//  690  *
//  691  * @return  void
//  692  ***************************************************************************************************/
//  693 void MT_ZdoMatchDescRequest(uint8 *pBuf)
//  694 {
//  695   uint8 cmdId;
//  696   uint8 retValue = 0;
//  697   uint8 i, numInClusters, numOutClusters;
//  698   uint16 profileId;
//  699   zAddrType_t destAddr;
//  700   uint16 shortAddr;
//  701   uint16 inClusters[MTZDO_MAX_MATCH_CLUSTERS], outClusters[MTZDO_MAX_MATCH_CLUSTERS];
//  702 
//  703   /* parse header */
//  704   cmdId = pBuf[MT_RPC_POS_CMD1];
//  705   pBuf += MT_RPC_FRAME_HDR_SZ;
//  706 
//  707   /* Dev address */
//  708   destAddr.addrMode = Addr16Bit;
//  709   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  710   pBuf += 2;
//  711 
//  712   /* Network address of interest */
//  713   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  714   pBuf += 2;
//  715 
//  716   /* Profile ID */
//  717   profileId = BUILD_UINT16( pBuf[0], pBuf[1] );
//  718   pBuf += 2;
//  719 
//  720   /* NumInClusters */
//  721   numInClusters = *pBuf++;
//  722   if ( numInClusters <= MTZDO_MAX_MATCH_CLUSTERS )
//  723   {
//  724     /* IN clusters */
//  725     for ( i = 0; i < numInClusters; i++ )
//  726     {
//  727       inClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
//  728       pBuf += 2;
//  729     }
//  730   }
//  731   else
//  732   {
//  733     retValue = ZDP_INVALID_REQTYPE;
//  734   }
//  735 
//  736   /* NumOutClusters */
//  737   numOutClusters = *pBuf++;
//  738   if ( numOutClusters <= MTZDO_MAX_MATCH_CLUSTERS )
//  739   {
//  740     /* OUT Clusters */
//  741     for ( i = 0; i < numOutClusters; i++ )
//  742     {
//  743       outClusters[i] = BUILD_UINT16( pBuf[0], pBuf[1]);
//  744       pBuf += 2;
//  745     }
//  746   }
//  747   else
//  748   {
//  749     retValue = ZDP_INVALID_REQTYPE;
//  750   }
//  751 
//  752   if ( retValue == 0 )
//  753   {
//  754     retValue = (uint8)ZDP_MatchDescReq( &destAddr, shortAddr, profileId, numInClusters,
//  755                                        inClusters, numOutClusters, outClusters, 0);
//  756   }
//  757 
//  758   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  759 }
//  760 
//  761 /***************************************************************************************************
//  762  * @fn      MT_ZdoComplexDescRequest
//  763  *
//  764  * @brief   Handle a Complex Descriptor request.
//  765  *
//  766  * @param   pBuf  - MT message data
//  767  *
//  768  * @return  void
//  769  ***************************************************************************************************/
//  770 void MT_ZdoComplexDescRequest(uint8 *pBuf)
//  771 {
//  772   uint8 cmdId;
//  773   uint8 retValue;
//  774   zAddrType_t destAddr;
//  775   uint16 shortAddr;
//  776 
//  777   /* parse header */
//  778   cmdId = pBuf[MT_RPC_POS_CMD1];
//  779   pBuf += MT_RPC_FRAME_HDR_SZ;
//  780 
//  781   /* Dev address */
//  782   destAddr.addrMode = Addr16Bit;
//  783   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  784   pBuf += 2;
//  785 
//  786   /* Network address of interest */
//  787   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  788   pBuf += 2;
//  789 
//  790   retValue = (uint8)ZDP_ComplexDescReq( &destAddr, shortAddr, 0);
//  791 
//  792   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  793 }
//  794 
//  795 /***************************************************************************************************
//  796  * @fn      MT_ZdoUserDescRequest
//  797  *
//  798  * @brief   Handle a User Descriptor request.
//  799  *
//  800  * @param   pBuf  - MT message data
//  801  *
//  802  * @return  void
//  803  ***************************************************************************************************/
//  804 void MT_ZdoUserDescRequest(uint8 *pBuf)
//  805 {
//  806   uint8 cmdId;
//  807   uint8 retValue;
//  808   zAddrType_t destAddr;
//  809   uint16 shortAddr;
//  810 
//  811   /* parse header */
//  812   cmdId = pBuf[MT_RPC_POS_CMD1];
//  813   pBuf += MT_RPC_FRAME_HDR_SZ;
//  814 
//  815   /* Dev address */
//  816   destAddr.addrMode = Addr16Bit;
//  817   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
//  818   pBuf += 2;
//  819 
//  820   /* Network address of interest */
//  821   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
//  822   pBuf += 2;
//  823 
//  824   retValue = (uint8)ZDP_UserDescReq( &destAddr, shortAddr, 0);
//  825 
//  826   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  827 }
//  828 
//  829 /***************************************************************************************************
//  830  * @fn      MT_ZdoEndDevAnnce
//  831  *
//  832  * @brief   Handle a End Device Announce Descriptor request.
//  833  *
//  834  * @param   pBuf  - MT message data
//  835  *
//  836  * @return  void
//  837  ***************************************************************************************************/
//  838 void MT_ZdoEndDevAnnce(uint8 *pBuf)
//  839 {
//  840   uint8 cmdId;
//  841   uint8 retValue;
//  842   uint16 shortAddr;
//  843   uint8 *pIEEEAddr;
//  844 
//  845   /* parse header */
//  846   cmdId = pBuf[MT_RPC_POS_CMD1];
//  847   pBuf += MT_RPC_FRAME_HDR_SZ;
//  848 
//  849   /* network address */
//  850   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  851   pBuf += 2;
//  852 
//  853   /* extended address */
//  854   pIEEEAddr = pBuf;
//  855   pBuf += Z_EXTADDR_LEN;
//  856 
//  857   retValue = (uint8)ZDP_DeviceAnnce( shortAddr, pIEEEAddr, *pBuf, 0);
//  858 
//  859   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  860 }
//  861 
//  862 /***************************************************************************************************
//  863  * @fn      MT_ZdoUserDescSet
//  864  *
//  865  * @brief   Handle a User Descriptor Set.
//  866  *
//  867  * @param   pBuf  - MT message data
//  868  *
//  869  * @return  void
//  870  ***************************************************************************************************/
//  871 void MT_ZdoUserDescSet(uint8 *pBuf)
//  872 {
//  873   uint8 cmdId;
//  874   uint8 retValue;
//  875   zAddrType_t destAddr;
//  876   uint16 shortAddr;
//  877   UserDescriptorFormat_t userDesc;
//  878 
//  879   /* parse header */
//  880   cmdId = pBuf[MT_RPC_POS_CMD1];
//  881   pBuf += MT_RPC_FRAME_HDR_SZ;
//  882 
//  883   /* Dev address */
//  884   destAddr.addrMode = Addr16Bit;
//  885   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  886   pBuf += 2;
//  887 
//  888   /* Network address of interest */
//  889   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  890   pBuf += 2;
//  891 
//  892   /* User descriptor */
//  893   userDesc.len = *pBuf++;
//  894   osal_memcpy( userDesc.desc, pBuf, userDesc.len );
//  895   pBuf += 16;
//  896 
//  897   retValue = (uint8)ZDP_UserDescSet( &destAddr, shortAddr, &userDesc, 0);
//  898 
//  899   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  900 }
//  901 
//  902 /***************************************************************************************************
//  903  * @fn      MT_ZdoServiceDiscRequest
//  904  *
//  905  * @brief   Handle a Server Discovery request.
//  906  *
//  907  * @param   pBuf  - MT message data
//  908  *
//  909  * @return  void
//  910  ***************************************************************************************************/
//  911 void MT_ZdoServiceDiscRequest(uint8 *pBuf)
//  912 {
//  913   uint8 cmdId;
//  914   uint8 retValue;
//  915   uint16 serviceMask;
//  916 
//  917   /* parse header */
//  918   cmdId = pBuf[MT_RPC_POS_CMD1];
//  919   pBuf += MT_RPC_FRAME_HDR_SZ;
//  920 
//  921   /* Service Mask */
//  922   serviceMask = BUILD_UINT16( pBuf[0], pBuf[1]);
//  923   pBuf += 2;
//  924 
//  925   retValue = (uint8)ZDP_ServerDiscReq( serviceMask, 0);
//  926 
//  927   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  928 }
//  929 
//  930 #if defined ( ZIGBEE_CHILD_AGING )
//  931 /***************************************************************************************************
//  932  * @fn      MT_ZdoEndDeviceTimeoutRequest
//  933  *
//  934  * @brief   Handle an End Device Timeout request.
//  935  *
//  936  * @param   pBuf  - MT message data
//  937  *
//  938  * @return  void
//  939  ***************************************************************************************************/
//  940 void MT_ZdoEndDeviceTimeoutRequest(uint8 *pBuf)
//  941 {
//  942   uint8 cmdId;
//  943   uint8 retValue;
//  944   uint16 parentAddr;
//  945   uint16 reqTimeout;
//  946 
//  947   /* parse header */
//  948   cmdId = pBuf[MT_RPC_POS_CMD1];
//  949   pBuf += MT_RPC_FRAME_HDR_SZ;
//  950 
//  951   /* Parent address */
//  952   parentAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  953   pBuf += 2;
//  954 
//  955   /* Requested Timeout */
//  956   reqTimeout = BUILD_UINT16( pBuf[0], pBuf[1] );
//  957   pBuf += 2;
//  958 
//  959   retValue = (uint8)ZDP_EndDeviceTimeoutReq( parentAddr, reqTimeout, 0 );
//  960 
//  961   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
//  962 }
//  963 #endif // ZIGBEE_CHILD_AGING
//  964 
//  965 /***************************************************************************************************
//  966  * @fn      MT_ZdoEndDevBindRequest
//  967  *
//  968  * @brief   Handle a End Device Bind request.
//  969  *
//  970  * @param   pBuf  - MT message data
//  971  *
//  972  * @return  void
//  973  ***************************************************************************************************/
//  974 void MT_ZdoEndDevBindRequest(uint8 *pBuf)
//  975 {
//  976   uint8 cmdId;
//  977   uint8 retValue = 0;
//  978   uint8 i, epInt, numInClusters, numOutClusters;
//  979   zAddrType_t destAddr;
//  980   uint16 shortAddr;
//  981   uint16 profileID, inClusters[MTZDO_MAX_ED_BIND_CLUSTERS], outClusters[MTZDO_MAX_ED_BIND_CLUSTERS];
//  982 
//  983   /* parse header */
//  984   cmdId = pBuf[MT_RPC_POS_CMD1];
//  985   pBuf += MT_RPC_FRAME_HDR_SZ;
//  986 
//  987   /* Dev address */
//  988   destAddr.addrMode = Addr16Bit;
//  989   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  990   pBuf += 2;
//  991 
//  992   /* Local coordinator of the binding */
//  993   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
//  994   pBuf += 2;
//  995 
//  996   /* For now, skip past the extended address */
//  997   pBuf += Z_EXTADDR_LEN;
//  998 
//  999   /* Endpoint */
// 1000   epInt = *pBuf++;
// 1001 
// 1002   /* Profile ID */
// 1003   profileID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1004   pBuf += 2;
// 1005 
// 1006   /* NumInClusters */
// 1007   numInClusters = *pBuf++;
// 1008   if ( numInClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
// 1009   {
// 1010     for ( i = 0; i < numInClusters; i++ )
// 1011     {
// 1012       inClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
// 1013       pBuf += 2;
// 1014     }
// 1015   }
// 1016   else
// 1017   {
// 1018     retValue = ZDP_INVALID_REQTYPE;
// 1019   }
// 1020 
// 1021   /* NumOutClusters */
// 1022   numOutClusters = *pBuf++;
// 1023   if ( numOutClusters <= MTZDO_MAX_ED_BIND_CLUSTERS )
// 1024   {
// 1025     for ( i = 0; i < numOutClusters; i++ )
// 1026     {
// 1027       outClusters[i] = BUILD_UINT16(pBuf[0], pBuf[1]);
// 1028       pBuf += 2;
// 1029     }
// 1030   }
// 1031   else
// 1032   {
// 1033     retValue = ZDP_INVALID_REQTYPE;
// 1034   }
// 1035 
// 1036   if ( retValue == 0 )
// 1037   {
// 1038     retValue = (uint8)ZDP_EndDeviceBindReq( &destAddr, shortAddr, epInt, profileID,
// 1039                                           numInClusters, inClusters, numOutClusters, outClusters, 0);
// 1040   }
// 1041 
// 1042   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1043 }
// 1044 
// 1045 /***************************************************************************************************
// 1046  * @fn      MT_ZdoBindRequest
// 1047  *
// 1048  * @brief   Handle a Bind request.
// 1049  *
// 1050  * @param   pBuf  - MT message data
// 1051  *
// 1052  * @return  void
// 1053  ***************************************************************************************************/
// 1054 void MT_ZdoBindRequest(uint8 *pBuf)
// 1055 {
// 1056   uint8 cmdId;
// 1057   uint8 retValue;
// 1058   zAddrType_t destAddr, devAddr;
// 1059   uint8 *pSrcAddr, *ptr;
// 1060   uint8 srcEPInt, dstEPInt;
// 1061   uint16 clusterID;
// 1062 
// 1063   /* parse header */
// 1064   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1065   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1066 
// 1067   /* Dev address */
// 1068   destAddr.addrMode = Addr16Bit;
// 1069   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1070   pBuf += 2;
// 1071 
// 1072   /* SrcAddress */
// 1073   pSrcAddr = pBuf;
// 1074   pBuf += Z_EXTADDR_LEN;
// 1075 
// 1076   /* SrcEPInt */
// 1077   srcEPInt = *pBuf++;
// 1078 
// 1079   /* ClusterID */
// 1080   clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
// 1081   pBuf += 2;
// 1082 
// 1083   /* Destination Address mode */
// 1084   devAddr.addrMode = *pBuf++;
// 1085 
// 1086   /* Destination Address */
// 1087   if ( devAddr.addrMode == Addr64Bit )
// 1088   {
// 1089     ptr = pBuf;
// 1090     osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
// 1091   }
// 1092   else
// 1093   {
// 1094     devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1095   }
// 1096   /* The short address occupies LSB two bytes */
// 1097   pBuf += Z_EXTADDR_LEN;
// 1098 
// 1099   /* DstEPInt */
// 1100   dstEPInt = *pBuf;
// 1101 
// 1102   retValue = (uint8)ZDP_BindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
// 1103 
// 1104   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1105 }
// 1106 
// 1107 /***************************************************************************************************
// 1108  * @fn      MT_ZdoUnbindRequest
// 1109  *
// 1110  * @brief   Handle a Unbind request.
// 1111  *
// 1112  * @param   pBuf  - MT message data
// 1113  *
// 1114  * @return  void
// 1115  ***************************************************************************************************/
// 1116 void MT_ZdoUnbindRequest(uint8 *pBuf)
// 1117 {
// 1118   uint8 cmdId;
// 1119   uint8 retValue;
// 1120   zAddrType_t destAddr, devAddr;
// 1121   uint8 *pSrcAddr, *ptr;
// 1122   uint8 srcEPInt, dstEPInt;
// 1123   uint16 clusterID;
// 1124 
// 1125   /* parse header */
// 1126   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1127   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1128 
// 1129   /* dev address */
// 1130   destAddr.addrMode = Addr16Bit;
// 1131   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1132   pBuf += 2;
// 1133 
// 1134   /* SrcAddress */
// 1135   pSrcAddr = pBuf;
// 1136   pBuf += Z_EXTADDR_LEN;
// 1137 
// 1138   /* SrcEPInt */
// 1139   srcEPInt = *pBuf++;
// 1140 
// 1141   /* ClusterID */
// 1142   clusterID = BUILD_UINT16( pBuf[0], pBuf[1]);
// 1143   pBuf += 2;
// 1144 
// 1145   /* Destination Address mode */
// 1146   devAddr.addrMode = *pBuf++;
// 1147 
// 1148   /* Destination Address */
// 1149   if ( devAddr.addrMode == Addr64Bit )
// 1150   {
// 1151     ptr = pBuf;
// 1152     osal_cpyExtAddr( devAddr.addr.extAddr, ptr );
// 1153   }
// 1154   else
// 1155   {
// 1156     devAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1157   }
// 1158   /* The short address occupies LSB two bytes */
// 1159   pBuf += Z_EXTADDR_LEN;
// 1160 
// 1161   /* dstEPInt */
// 1162   dstEPInt = *pBuf;
// 1163 
// 1164   retValue = (uint8)ZDP_UnbindReq( &destAddr, pSrcAddr, srcEPInt, clusterID, &devAddr, dstEPInt, 0);
// 1165 
// 1166   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1167 }
// 1168 
// 1169 #if defined (MT_SYS_KEY_MANAGEMENT)
// 1170 /***************************************************************************************************
// 1171  * @fn      MT_ZdoSetLinkKey
// 1172  *
// 1173  * @brief   Set an application or trust center link key.
// 1174  *
// 1175  * @param   pBuf  - MT message data
// 1176  *
// 1177  * @return  void
// 1178  ***************************************************************************************************/
// 1179 void MT_ZdoSetLinkKey(uint8 *pBuf)
// 1180 {
// 1181   uint8 cmdId;
// 1182   uint8 retValue;
// 1183   uint8 *pExtAddr;
// 1184   uint8 *pKey;
// 1185   uint16 shortAddr;
// 1186 
// 1187   /* parse header */
// 1188   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1189   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1190 
// 1191   /* ShortAddr */
// 1192   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1193   pBuf += 2;
// 1194 
// 1195   /* Extended Addr */
// 1196   pExtAddr = pBuf;
// 1197   pBuf += Z_EXTADDR_LEN;
// 1198 
// 1199   /* Key data */
// 1200   pKey = pBuf;
// 1201 
// 1202   retValue = (uint8)ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pKey);
// 1203 
// 1204   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1205 }
// 1206 
// 1207 /***************************************************************************************************
// 1208  * @fn      MT_ZdoRemoveLinkKey
// 1209  *
// 1210  * @brief   Remove an application or trust center link key.
// 1211  *
// 1212  * @param   pBuf  - MT message data
// 1213  *
// 1214  * @return  void
// 1215  ***************************************************************************************************/
// 1216 void MT_ZdoRemoveLinkKey(uint8 *pBuf)
// 1217 {
// 1218   uint8 cmdId;
// 1219   uint8 retValue;
// 1220   uint8 *pExtAddr;
// 1221 
// 1222   /* parse header */
// 1223   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1224   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1225 
// 1226   /* ShortAddr */
// 1227   pExtAddr = pBuf;
// 1228 
// 1229   retValue = ZDSecMgrDeviceRemoveByExtAddr( pExtAddr );
// 1230 
// 1231   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1232 }
// 1233 
// 1234 /***************************************************************************************************
// 1235  * @fn      MT_ZdoGetLinkKey
// 1236  *
// 1237  * @brief   Get the application link key.
// 1238  *
// 1239  * @param   pBuf  - MT message data
// 1240  *
// 1241  * @return  void
// 1242  ***************************************************************************************************/
// 1243 void MT_ZdoGetLinkKey(uint8 *pBuf)
// 1244 {
// 1245   uint8 cmdId;
// 1246   uint8 retValue;
// 1247   uint8 *pExtAddr;
// 1248   uint8 *retBuf = NULL;
// 1249   uint8 len;
// 1250   APSME_LinkKeyData_t *pApsLinkKey = NULL;
// 1251   uint16 apsLinkKeyNvId;
// 1252 
// 1253   // parse header
// 1254   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1255   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1256 
// 1257   // Extended Address
// 1258   pExtAddr = pBuf;
// 1259 
// 1260   // Fetch the key NV ID
// 1261   retValue = APSME_LinkKeyNVIdGet( pExtAddr, &apsLinkKeyNvId );
// 1262 
// 1263   if (retValue == ZSuccess)
// 1264   {
// 1265     if ((pApsLinkKey = (APSME_LinkKeyData_t *)osal_mem_alloc(sizeof(APSME_LinkKeyData_t))) != NULL)
// 1266     {
// 1267       // retrieve key from NV
// 1268       if (osal_nv_read( apsLinkKeyNvId, 0,
// 1269                        sizeof(APSME_LinkKeyData_t), pApsLinkKey) != SUCCESS)
// 1270       {
// 1271         retValue = ZNwkUnknownDevice;
// 1272       }
// 1273     }
// 1274     else
// 1275     {
// 1276       retValue = ZNwkUnknownDevice;
// 1277     }
// 1278   }
// 1279 
// 1280   // Construct the response message
// 1281   len = MT_ZDO_STATUS_LEN + Z_EXTADDR_LEN + SEC_KEY_LEN; // status + extAddr + key
// 1282   if ((retBuf = (uint8 *)osal_mem_alloc(len)) != NULL)
// 1283   {
// 1284     if (retValue == ZSuccess)
// 1285     {
// 1286       // Extended Address
// 1287       osal_memcpy( &(retBuf[1]), pExtAddr, Z_EXTADDR_LEN );
// 1288 
// 1289       // Key data
// 1290       osal_memcpy( &(retBuf[1 + Z_EXTADDR_LEN]), pApsLinkKey->key, SEC_KEY_LEN );
// 1291     }
// 1292     else
// 1293     {
// 1294       // Failed case - set the rest fields to all FF
// 1295       osal_memset( &(retBuf[1]), 0xFF, Z_EXTADDR_LEN + SEC_KEY_LEN );
// 1296     }
// 1297 
// 1298     retBuf[0] = retValue;  // Status
// 1299 
// 1300     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, len, retBuf);
// 1301 
// 1302     // clear retBuf because it contains key data and free allocated memory
// 1303     osal_memset(retBuf, 0x00, len);
// 1304 
// 1305     osal_mem_free(retBuf);
// 1306   }
// 1307 
// 1308   // clear copy of key in RAM
// 1309   if (pApsLinkKey != NULL)
// 1310   {
// 1311     osal_memset(pApsLinkKey, 0x00, sizeof(APSME_LinkKeyData_t));
// 1312 
// 1313     osal_mem_free(pApsLinkKey);
// 1314   }
// 1315 
// 1316   return;
// 1317 }
// 1318 #endif // MT_SYS_KEY_MANAGEMENT
// 1319 
// 1320 #if defined (MT_ZDO_MGMT)
// 1321 /***************************************************************************************************
// 1322  * @fn      MT_ZdoMgmtNwkDiscRequest
// 1323  *
// 1324  * @brief   Handle a Mgmt Nwk Discovery request.
// 1325  *
// 1326  * @param   pBuf  - MT message data
// 1327  *
// 1328  * @return  void
// 1329  ***************************************************************************************************/
// 1330 void MT_ZdoMgmtNwkDiscRequest(uint8 *pBuf)
// 1331 {
// 1332   uint8 cmdId;
// 1333   uint8 retValue;
// 1334   zAddrType_t destAddr;
// 1335   uint32 scanChannels;
// 1336   uint8 scanDuration, startIndex;
// 1337 
// 1338   /* parse header */
// 1339   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1340   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1341 
// 1342   /* Dev address */
// 1343   destAddr.addrMode = Addr16Bit;
// 1344   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1345   pBuf += 2;
// 1346 
// 1347   /* Scan Channels */
// 1348   scanChannels = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3] );
// 1349   pBuf += 4;
// 1350 
// 1351   /* Scan Duration */
// 1352   scanDuration = *pBuf++;
// 1353 
// 1354   /* Start Index */
// 1355   startIndex = *pBuf;
// 1356 
// 1357   retValue = (uint8)ZDP_MgmtNwkDiscReq( &destAddr, scanChannels, scanDuration, startIndex, 0);
// 1358 
// 1359   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1360 }
// 1361 
// 1362 /***************************************************************************************************
// 1363  * @fn      MT_ZdoMgmtLqiRequest
// 1364  *
// 1365  * @brief   Handle a Mgmt Lqi request.
// 1366  *
// 1367  * @param   pBuf  - MT message data
// 1368  *
// 1369  * @return  void
// 1370  ***************************************************************************************************/
// 1371 void MT_ZdoMgmtLqiRequest(uint8 *pBuf)
// 1372 {
// 1373   uint8 cmdId;
// 1374   uint8 retValue;
// 1375   zAddrType_t destAddr;
// 1376   uint8 startIndex;
// 1377 
// 1378   /* parse header */
// 1379   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1380   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1381 
// 1382   /* Dev address */
// 1383   destAddr.addrMode = Addr16Bit;
// 1384   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1385   pBuf += 2;
// 1386 
// 1387   /* Start Index */
// 1388   startIndex = *pBuf;
// 1389 
// 1390   retValue = (uint8)ZDP_MgmtLqiReq( &destAddr, startIndex, 0);
// 1391 
// 1392   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1393 }
// 1394 
// 1395 /***************************************************************************************************
// 1396  * @fn      MT_ZdoMgmtRtgRequest
// 1397  *
// 1398  * @brief   Handle a Mgmt Rtg request.
// 1399  *
// 1400  * @param   pBuf  - MT message data
// 1401  *
// 1402  * @return  void
// 1403  ***************************************************************************************************/
// 1404 void MT_ZdoMgmtRtgRequest(uint8 *pBuf)
// 1405 {
// 1406   uint8 cmdId;
// 1407   uint8 retValue;
// 1408   zAddrType_t destAddr;
// 1409   uint8 startIndex;
// 1410 
// 1411   /* parse header */
// 1412   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1413   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1414 
// 1415   /* Dev Address */
// 1416   destAddr.addrMode = Addr16Bit;
// 1417   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1]);
// 1418   pBuf += 2;
// 1419 
// 1420   /* Start Index */
// 1421   startIndex = *pBuf;
// 1422 
// 1423   retValue = (byte)ZDP_MgmtRtgReq( &destAddr, startIndex, 0);
// 1424 
// 1425   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1426 }
// 1427 
// 1428 /***************************************************************************************************
// 1429  * @fn      MT_ZdoMgmtBindRequest
// 1430  *
// 1431  * @brief   Handle a Mgmt Bind request.
// 1432  *
// 1433  * @param   pBuf  - MT message data
// 1434  *
// 1435  * @return  void
// 1436  ***************************************************************************************************/
// 1437 void MT_ZdoMgmtBindRequest(uint8 *pBuf)
// 1438 {
// 1439   uint8 cmdId;
// 1440   uint8 retValue;
// 1441   zAddrType_t destAddr;
// 1442   uint8 startIndex;
// 1443 
// 1444   /* parse header */
// 1445   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1446   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1447 
// 1448   /* Dev Address */
// 1449   destAddr.addrMode = Addr16Bit;
// 1450   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1451   pBuf += 2;
// 1452 
// 1453   /* Start Index */
// 1454   startIndex = *pBuf;
// 1455 
// 1456   retValue = (uint8)ZDP_MgmtBindReq( &destAddr, startIndex, 0);
// 1457 
// 1458   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1459 }
// 1460 
// 1461 /***************************************************************************************************
// 1462  * @fn      MT_ZdoMgmtLeaveRequest
// 1463  *
// 1464  * @brief   Handle a Mgmt Leave request.
// 1465  *
// 1466  * @param   pBuf  - MT message data
// 1467  *
// 1468  * @return  void
// 1469  ***************************************************************************************************/
// 1470 void MT_ZdoMgmtLeaveRequest(uint8 *pBuf)
// 1471 {
// 1472   uint8 cmdId;
// 1473   uint8 retValue;
// 1474   zAddrType_t destAddr;
// 1475   uint8 *pIEEEAddr;
// 1476   uint8 removeChildren;
// 1477   uint8 rejoin;
// 1478 
// 1479   /* parse header */
// 1480   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1481   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1482 
// 1483   /* Destination Address */
// 1484   destAddr.addrMode = Addr16Bit;
// 1485   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1486   pBuf += 2;
// 1487 
// 1488   /* IEEE address */
// 1489   pIEEEAddr = pBuf;
// 1490   pBuf += Z_EXTADDR_LEN;
// 1491 
// 1492   /* Rejoin if bit0 is set */
// 1493   rejoin = ( *pBuf & 0x01 ) ? TRUE : FALSE;
// 1494 
// 1495   /* Remove Children if bit1 is set */
// 1496   removeChildren = ( *pBuf & 0x02 ) ? TRUE : FALSE;
// 1497 
// 1498   retValue = (byte)ZDP_MgmtLeaveReq( &destAddr, pIEEEAddr, removeChildren, rejoin, 0);
// 1499 
// 1500   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1501 }
// 1502 
// 1503 /***************************************************************************************************
// 1504  * @fn      MT_ZdoMgmtDirectJoinRequest
// 1505  *
// 1506  * @brief   Handle a Mgmt Direct Join request.
// 1507  *
// 1508  * @param   pBuf  - MT message data
// 1509  *
// 1510  * @return  void
// 1511  ***************************************************************************************************/
// 1512 void MT_ZdoMgmtDirectJoinRequest(uint8 *pBuf)
// 1513 {
// 1514   uint8 cmdId;
// 1515   uint8 retValue;
// 1516   zAddrType_t destAddr;
// 1517   uint8 *deviceAddr;
// 1518   uint8 capInfo;
// 1519 
// 1520   /* parse header */
// 1521   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1522   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1523 
// 1524   /* Destination Address */
// 1525   destAddr.addrMode = Addr16Bit;
// 1526   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1527   pBuf += 2;
// 1528 
// 1529   /* Device Address */
// 1530   deviceAddr = pBuf;
// 1531   pBuf += Z_EXTADDR_LEN;
// 1532 
// 1533   /* Capability information */
// 1534   capInfo = *pBuf;
// 1535 
// 1536   retValue = (uint8)ZDP_MgmtDirectJoinReq( &destAddr, deviceAddr, capInfo, 0);
// 1537 
// 1538   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1539 }
// 1540 
// 1541 /***************************************************************************************************
// 1542  * @fn      MT_ZdoMgmtPermitJoinRequest
// 1543  *
// 1544  * @brief   Handle a Mgmt Permit Join request.
// 1545  *
// 1546  * @param   pBuf  - MT message data
// 1547  *
// 1548  * @return  void
// 1549  ***************************************************************************************************/
// 1550 void MT_ZdoMgmtPermitJoinRequest(uint8 *pBuf)
// 1551 {
// 1552   uint8 cmdId;
// 1553   uint8 retValue;
// 1554   zAddrType_t destAddr;
// 1555   uint8 duration, tcSignificance;
// 1556 
// 1557   /* parse header */
// 1558   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1559   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1560 
// 1561   /* Destination Address */
// 1562   destAddr.addrMode = *pBuf++;
// 1563   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1564   pBuf += 2;
// 1565 
// 1566   /* Duration */
// 1567   duration = *pBuf++;
// 1568 
// 1569   /* Trust center significance */
// 1570   tcSignificance = *pBuf;
// 1571 
// 1572   retValue = (byte)ZDP_MgmtPermitJoinReq( &destAddr, duration, tcSignificance, 0);
// 1573 
// 1574   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1575 }
// 1576 
// 1577 /***************************************************************************************************
// 1578  * @fn      MT_ZdoMgmtNwkUpdateRequest
// 1579  *
// 1580  * @brief   Handle a Mgmt Nwk Update request.
// 1581  *
// 1582  * @param   pBuf  - MT message data
// 1583  *
// 1584  * @return  void
// 1585  ***************************************************************************************************/
// 1586 void MT_ZdoMgmtNwkUpdateRequest(uint8 *pBuf)
// 1587 {
// 1588   uint8 cmdId;
// 1589   uint8 retValue;
// 1590   zAddrType_t destAddr;
// 1591   uint32 channelMask;
// 1592   uint8 scanDuration, scanCount;
// 1593   uint16 nwkManagerAddr;
// 1594 
// 1595     /* parse header */
// 1596   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1597   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1598 
// 1599   /* Destination address */
// 1600   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1601   pBuf += 2;
// 1602 
// 1603   /* Destination address mode */
// 1604   destAddr.addrMode = *pBuf++;
// 1605 
// 1606   channelMask = BUILD_UINT32( pBuf[0], pBuf[1], pBuf[2], pBuf[3]);
// 1607   pBuf += 4;
// 1608 
// 1609   /* Scan duration */
// 1610   scanDuration = *pBuf++;
// 1611 
// 1612   /* Scan count */
// 1613   scanCount = *pBuf++;
// 1614 
// 1615   /* NWK manager address */
// 1616   nwkManagerAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1617 
// 1618   /* Send the Management Network Update request */
// 1619   retValue = (uint8)ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
// 1620                                           scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
// 1621 
// 1622   /*
// 1623     Since we don't recevied our own broadcast messages, we should
// 1624     send a unicast copy of the message to ourself.
// 1625   */
// 1626   if ( destAddr.addrMode == AddrBroadcast )
// 1627   {
// 1628     destAddr.addrMode = Addr16Bit;
// 1629     destAddr.addr.shortAddr = _NIB.nwkDevAddress;
// 1630     retValue = (uint8) ZDP_MgmtNwkUpdateReq( &destAddr, channelMask, scanDuration,
// 1631                                              scanCount, _NIB.nwkUpdateId+1, nwkManagerAddr );
// 1632   }
// 1633 
// 1634   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1635 }
// 1636 #endif /* MT_ZDO_MGMT */
// 1637 
// 1638 /***************************************************************************************************
// 1639  * @fn      MT_ZdoSendData
// 1640  *
// 1641  * @brief   Handle a ZDO Send Data request.
// 1642  *
// 1643  * @param   pBuf  - MT message data
// 1644  *
// 1645  * @return  void
// 1646  ***************************************************************************************************/
// 1647 void MT_ZdoSendData( uint8 *pBuf )
// 1648 {
// 1649   uint8 cmdId;
// 1650   uint8 retValue;
// 1651   zAddrType_t destAddr;
// 1652   uint8 transSeq;
// 1653   uint8 len;
// 1654   uint16 cmd;
// 1655 
// 1656     /* parse header */
// 1657   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1658   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1659 
// 1660   /* Destination address */
// 1661   destAddr.addrMode = Addr16Bit;
// 1662   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1663   pBuf += 2;
// 1664 
// 1665   /* Destination address mode */
// 1666   transSeq = *pBuf++;
// 1667 
// 1668   /* cmd */
// 1669   cmd = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1670   pBuf += 2;
// 1671   len = *pBuf++;
// 1672 
// 1673   /* Send the Generic ZDO message request */
// 1674   retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
// 1675   /*
// 1676     Since we don't recevied our own broadcast messages, we should
// 1677     send a unicast copy of the message to ourself.
// 1678   */
// 1679   if ( destAddr.addrMode == AddrBroadcast )
// 1680   {
// 1681     destAddr.addrMode = Addr16Bit;
// 1682     destAddr.addr.shortAddr = _NIB.nwkDevAddress;
// 1683     retValue = (uint8)ZDP_SendData( &transSeq, &destAddr, cmd, len, pBuf, 0 );
// 1684   }
// 1685 
// 1686   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1687 }
// 1688 
// 1689 /***************************************************************************************************
// 1690  * @fn      MT_ZdoNwkAddrOfInterestReq
// 1691  *
// 1692  * @brief   Handle a ZDO Network Address of Interest request.
// 1693  *
// 1694  * @param   pBuf  - MT message data
// 1695  *
// 1696  * @return  void
// 1697  ***************************************************************************************************/
// 1698 void MT_ZdoNwkAddrOfInterestReq( uint8 *pBuf )
// 1699 {
// 1700   uint8 cmdId;
// 1701   uint8 retValue;
// 1702   zAddrType_t destAddr;
// 1703   uint16 nwkAddr;
// 1704   uint8 cmd;
// 1705 
// 1706     /* parse header */
// 1707   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1708   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1709 
// 1710   /* Destination address */
// 1711   destAddr.addrMode = Addr16Bit;
// 1712   destAddr.addr.shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1713   pBuf += 2;
// 1714 
// 1715   /* Network Address of Interest */
// 1716   nwkAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 1717   pBuf += 2;
// 1718 
// 1719   cmd = *pBuf++;
// 1720 
// 1721   /* Send the Generic ZDO message request */
// 1722   retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
// 1723 
// 1724 
// 1725   /*
// 1726     Since we don't recevied our own broadcast messages, we should
// 1727     send a unicast copy of the message to ourself.
// 1728   */
// 1729   if ( destAddr.addrMode == AddrBroadcast )
// 1730   {
// 1731     destAddr.addrMode = Addr16Bit;
// 1732     destAddr.addr.shortAddr = _NIB.nwkDevAddress;
// 1733     retValue = (uint8)ZDP_NWKAddrOfInterestReq( &destAddr, nwkAddr, cmd, 0 );
// 1734   }
// 1735 
// 1736   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue);
// 1737 }
// 1738 
// 1739 /***************************************************************************************************
// 1740  * @fn      MT_ZdoStartupFromApp
// 1741  *
// 1742  * @brief   Handle a Startup from App request.
// 1743  *
// 1744  * @param   pBuf  - MT message data
// 1745  *
// 1746  * @return  void
// 1747  ***************************************************************************************************/
// 1748 void MT_ZdoStartupFromApp(uint8 *pBuf)
// 1749 {
// 1750   uint8 cmd0, cmd1, retValue;
// 1751 
// 1752   /* parse header */
// 1753   cmd0 = pBuf[MT_RPC_POS_CMD0];
// 1754   cmd1 = pBuf[MT_RPC_POS_CMD1];
// 1755   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1756 
// 1757   retValue = ZDOInitDevice(100);
// 1758 
// 1759   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
// 1760   {
// 1761     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1,1, &retValue);
// 1762   }
// 1763 }
// 1764 
// 1765 
// 1766 /***************************************************************************************************
// 1767  * @fn      MT_ZdoNetworkDiscoveryReq
// 1768  *
// 1769  * @brief   Handle a ZDO Network Discovery request.
// 1770  *
// 1771  * @param   pBuf  - MT message data
// 1772  *
// 1773  * @return  void
// 1774  ***************************************************************************************************/
// 1775 void MT_ZdoNetworkDiscoveryReq(uint8 *pBuf)
// 1776 {
// 1777   uint8  retValue = ZFailure;
// 1778   uint8  cmdId;
// 1779   uint32 scanChannels;
// 1780 
// 1781   /* parse header */
// 1782   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1783   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1784 
// 1785   /* Packet format */
// 1786   /* scan channels (4) | scan duration (1) */
// 1787 
// 1788   /* Scan channels */
// 1789   scanChannels = osal_build_uint32(pBuf, 4);
// 1790   pBuf += 4;
// 1791 
// 1792   retValue = ZDApp_NetworkDiscoveryReq(scanChannels, *pBuf);
// 1793 
// 1794   // Register ZDO callback for MT to handle the network discovery confirm
// 1795   // and beacon notification confirm
// 1796   ZDO_RegisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID, &MT_ZdoNwkDiscoveryCnfCB );
// 1797   ZDO_RegisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID, &MT_ZdoBeaconIndCB );
// 1798 
// 1799   /* Build and send back the response */
// 1800   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
// 1801 }
// 1802 
// 1803 
// 1804 /***************************************************************************************************
// 1805  * @fn      MT_ZdoJoinReq
// 1806  *
// 1807  * @brief   Handle a ZDO Join request.
// 1808  *
// 1809  * @param   pBuf  - MT message data
// 1810  *
// 1811  * @return  void
// 1812  ***************************************************************************************************/
// 1813 void MT_ZdoJoinReq(uint8 *pBuf)
// 1814 {
// 1815   uint8  retValue = ZFailure;
// 1816   uint8  cmdId;
// 1817   uint16 panId;
// 1818   uint16 chosenParent;
// 1819 
// 1820   /* parse header */
// 1821   cmdId = pBuf[MT_RPC_POS_CMD1];
// 1822   pBuf += MT_RPC_FRAME_HDR_SZ;
// 1823 
// 1824   /* Packet format */
// 1825   /* channel     (1) | panID (2) | extendedPanID (8) | chosenParent (2) |
// 1826    * parentDepth (1) | stackProfile  (1)
// 1827    */
// 1828 
// 1829   panId        = BUILD_UINT16(pBuf[1], pBuf[2]);
// 1830   chosenParent = BUILD_UINT16(pBuf[11], pBuf[12]);
// 1831 
// 1832   retValue = ZDApp_JoinReq(pBuf[0], panId, &(pBuf[3]), chosenParent, pBuf[13], pBuf[14]);
// 1833 
// 1834   /* Register for MT to receive Join Confirm */
// 1835   ZDO_RegisterForZdoCB( ZDO_JOIN_CNF_CBID, &MT_ZdoJoinCnfCB );
// 1836 
// 1837   /* Build and send back the response */
// 1838   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP | (uint8)MT_RPC_SYS_ZDO), cmdId, 1, &retValue );
// 1839 
// 1840 }
// 1841 
// 1842 
// 1843 /***************************************************************************************************
// 1844  * @fn          MT_ZdoNwkDiscoveryCnfCB
// 1845  *
// 1846  * @brief       Send an indication to inform host device the completion of
// 1847  *              network discovery scan
// 1848  *
// 1849  * @param       pStr - pointer to a parameter and a structure of parameters
// 1850  *
// 1851  * @return      void
// 1852  ***************************************************************************************************/
// 1853 void *MT_ZdoNwkDiscoveryCnfCB ( void *pStr )
// 1854 {
// 1855   /* pStr: status (uint8) */
// 1856   /* Packet Format */
// 1857   /* Status (1) */
// 1858 
// 1859   // Scan completed. De-register the callback with ZDO
// 1860   ZDO_DeregisterForZdoCB( ZDO_NWK_DISCOVERY_CNF_CBID );
// 1861   ZDO_DeregisterForZdoCB( ZDO_BEACON_NOTIFY_IND_CBID );
// 1862 
// 1863   // Send the buffered beacon indication
// 1864   MT_ZdoBeaconIndCB ( NULL );
// 1865 
// 1866   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1867                                          MT_ZDO_NWK_DISCOVERY_CNF, 1, pStr);
// 1868   return NULL;
// 1869 }
// 1870 
// 1871 /***************************************************************************************************
// 1872  * @fn          MT_ZdoBeaconIndCB
// 1873  *
// 1874  * @brief       Send an indication to host device of a beacon notification
// 1875  *
// 1876  * @param       pStr -  pointer to a parameter and a structure of parameters
// 1877  *
// 1878  * @return      void
// 1879  ***************************************************************************************************/
// 1880 void *MT_ZdoBeaconIndCB ( void *pStr )
// 1881 {
// 1882   zdoBeaconInd_t *pBeacon = pStr;
// 1883   uint8 *pTmp;
// 1884 
// 1885   /* Packet Format */
// 1886   /* devCnt (1) | device #1 (21) | device #2 (21) |... | device #n (21) */
// 1887 
// 1888   if( pStr != NULL)
// 1889   {
// 1890     if( pBeaconIndBuf == NULL )
// 1891     {
// 1892       // If pBeaconIndBuf has not been allocated yet
// 1893       // allocate memory now with MAX_UART_TX_BUFF
// 1894       if( NULL == (pBeaconIndBuf = (uint8 *)osal_mem_alloc(MT_ZDO_BEACON_IND_PACK_LEN)))
// 1895       {
// 1896         // Memory failure
// 1897         return NULL;
// 1898       }
// 1899       pBeaconIndBuf[0] = 0; // First byte is devCnt. Initialize to 0.
// 1900     }
// 1901 
// 1902     // Fill in the buffer with the beacon indication
// 1903     pTmp = pBeaconIndBuf + (1 + pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN);
// 1904     *pTmp++ = LO_UINT16(pBeacon->sourceAddr);
// 1905     *pTmp++ = HI_UINT16(pBeacon->sourceAddr);
// 1906     *pTmp++ = LO_UINT16(pBeacon->panID);
// 1907     *pTmp++ = HI_UINT16(pBeacon->panID);
// 1908     *pTmp++ = pBeacon->logicalChannel;
// 1909     *pTmp++ = pBeacon->permitJoining;
// 1910     *pTmp++ = pBeacon->routerCapacity;
// 1911     *pTmp++ = pBeacon->deviceCapacity;
// 1912     *pTmp++ = pBeacon->protocolVersion;
// 1913     *pTmp++ = pBeacon->stackProfile;
// 1914     *pTmp++ = pBeacon->LQI;
// 1915     *pTmp++ = pBeacon->depth;
// 1916     *pTmp++ = pBeacon->updateID;
// 1917     osal_memcpy( pTmp, pBeacon->extendedPanID, Z_EXTADDR_LEN);
// 1918 
// 1919     pBeaconIndBuf[0] += 1; // Increment the devCnt
// 1920 
// 1921     // Check if the buffer can fit in another beacon
// 1922     if( ((pBeaconIndBuf[0] + 1) * MT_ZDO_BEACON_IND_LEN + 1) > MT_ZDO_BEACON_IND_PACK_LEN )
// 1923     {
// 1924       // Packet full, send the packet over MT
// 1925       MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1926                                    MT_ZDO_BEACON_NOTIFY_IND,
// 1927                                    (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
// 1928       pBeaconIndBuf[0] = 0; // Reset the devCnt back to zero
// 1929     }
// 1930   }
// 1931   else
// 1932   {
// 1933     if( (pBeaconIndBuf != NULL) && (pBeaconIndBuf[0] != 0) )
// 1934     {
// 1935       // End of beacon indication, send the packet over MT
// 1936       MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1937                                    MT_ZDO_BEACON_NOTIFY_IND,
// 1938                                    (pBeaconIndBuf[0] * MT_ZDO_BEACON_IND_LEN + 1), pBeaconIndBuf);
// 1939     }
// 1940     // Free the allocated memory
// 1941     if(pBeaconIndBuf != NULL)
// 1942     {
// 1943       osal_mem_free(pBeaconIndBuf);
// 1944       pBeaconIndBuf = NULL;
// 1945     }
// 1946   }
// 1947 
// 1948   return NULL;
// 1949 }
// 1950 
// 1951 
// 1952 
// 1953 /***************************************************************************************************
// 1954  * @fn          MT_ZdoJoinCnfCB
// 1955  *
// 1956  * @brief       Handle the ZDO Join Confirm from ZDO
// 1957  *
// 1958  * @param       pStr - pointer to a parameter and a structure of parameters
// 1959  *
// 1960  * @return      void
// 1961  ***************************************************************************************************/
// 1962 void *MT_ZdoJoinCnfCB ( void *pStr )
// 1963 {
// 1964   /* pStr: zdoJoinCnf_t* */
// 1965   /* Packet Format */
// 1966   /* Status (1) | device addr (2) | parent addr (2) */
// 1967 
// 1968   uint8 buf[MT_ZDO_JOIN_CNF_LEN];
// 1969   zdoJoinCnf_t *joinCnf = pStr;
// 1970 
// 1971   /* Join Complete. De-register the callback with ZDO */
// 1972   ZDO_DeregisterForZdoCB( ZDO_JOIN_CNF_CBID );
// 1973 
// 1974   buf[0] = joinCnf->status;
// 1975   buf[1] = LO_UINT16( joinCnf->deviceAddr );
// 1976   buf[2] = HI_UINT16( joinCnf->deviceAddr );
// 1977   buf[3] = LO_UINT16( joinCnf->parentAddr );
// 1978   buf[4] = HI_UINT16( joinCnf->parentAddr );
// 1979 
// 1980   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 1981                                MT_ZDO_JOIN_CNF, MT_ZDO_JOIN_CNF_LEN, buf);
// 1982 
// 1983   return NULL;
// 1984 }
// 1985 
// 1986 /*************************************************************************************************
// 1987  * @fn      MT_ZdoRegisterForZDOMsg(pBuf);
// 1988  *
// 1989  * @brief   MT proxy for ZDO_RegisterForZDOMsg.
// 1990  *
// 1991  * @param   pBuf  - MT message data
// 1992  *
// 1993  * @return  void
// 1994  *************************************************************************************************/
// 1995 void MT_ZdoRegisterForZDOMsg(uint8 *pBuf)
// 1996 {
// 1997   uint8 cmd0, cmd1, tmp;
// 1998   uint16 cId;
// 1999 
// 2000   /* parse header */
// 2001   cmd0 = pBuf[MT_RPC_POS_CMD0];
// 2002   cmd1 = pBuf[MT_RPC_POS_CMD1];
// 2003   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2004 
// 2005   cId = BUILD_UINT16(pBuf[0], pBuf[1]);
// 2006   tmp = ZDO_RegisterForZDOMsg(MT_TaskID, cId);
// 2007 
// 2008   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
// 2009   {
// 2010     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
// 2011   }
// 2012 }
// 2013 
// 2014 /*************************************************************************************************
// 2015  * @fn      MT_ZdoRemoveRegisteredCB(pBuf);
// 2016  *
// 2017  * @brief   MT proxy for ZDO_RemoveRegisteredCB.
// 2018  *
// 2019  * @param   pBuf  - MT message data
// 2020  *
// 2021  * @return  void
// 2022  *************************************************************************************************/
// 2023 void MT_ZdoRemoveRegisteredCB(uint8 *pBuf)
// 2024 {
// 2025   uint8 cmd0, cmd1, tmp;
// 2026   uint16 cId;
// 2027 
// 2028   /* parse header */
// 2029   cmd0 = pBuf[MT_RPC_POS_CMD0];
// 2030   cmd1 = pBuf[MT_RPC_POS_CMD1];
// 2031   pBuf += MT_RPC_FRAME_HDR_SZ;
// 2032 
// 2033   cId = BUILD_UINT16(pBuf[0], pBuf[1]);
// 2034   tmp = ZDO_RemoveRegisteredCB(MT_TaskID, cId);
// 2035 
// 2036   if (MT_RPC_CMD_SREQ == (cmd0 & MT_RPC_CMD_TYPE_MASK))
// 2037   {
// 2038     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_SRSP|(uint8)MT_RPC_SYS_ZDO), cmd1, 1, &tmp);
// 2039   }
// 2040 }
// 2041 
// 2042 #endif /* MT_ZDO_FUNC */
// 2043 
// 2044 
// 2045 /***************************************************************************************************
// 2046  * Callback handling function
// 2047  ***************************************************************************************************/
// 2048 
// 2049 #if defined (MT_ZDO_CB_FUNC)
// 2050 
// 2051 /***************************************************************************************************
// 2052  * @fn      MT_ZdoStateChangeCB
// 2053  *
// 2054  * @brief   Handle state change OSAL message from ZDO.
// 2055  *
// 2056  * @param   pMsg  - Message data
// 2057  *
// 2058  * @return  void
// 2059  */
// 2060 void MT_ZdoStateChangeCB(osal_event_hdr_t *pMsg)
// 2061 {
// 2062   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2063                                        MT_ZDO_STATE_CHANGE_IND, 1, &pMsg->status);
// 2064 }
// 2065 
// 2066 /***************************************************************************************************
// 2067  * @fn     MT_ZdoDirectCB()
// 2068  *
// 2069  * @brief  ZDO direct callback.  Build an MT message directly from the
// 2070  *         over-the-air ZDO message.
// 2071  *
// 2072  * @param  pData - Incoming AF frame.
// 2073  *
// 2074  * @return  none
// 2075  ***************************************************************************************************/
// 2076 void MT_ZdoDirectCB( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
// 2077 {
// 2078   uint8 len, *pBuf;
// 2079   uint16 origClusterId;
// 2080 
// 2081   // save original value because MT_ZdoHandleExceptions() function could modify pData->clusterId
// 2082   origClusterId = pData->clusterId;
// 2083 
// 2084   // Is the message an exception or not a response?
// 2085   if ( MT_ZdoHandleExceptions( pData, inMsg ) || ( (origClusterId & ZDO_RESPONSE_BIT) == 0 ) )
// 2086   {
// 2087     return;  // Handled somewhere else or not needed.
// 2088   }
// 2089 
// 2090   /* ZDO data starts after one-byte sequence number and the msg buffer length includes
// 2091    * two bytes for srcAddr.
// 2092    */
// 2093   len = pData->cmd.DataLength - 1 + sizeof(uint16);
// 2094 
// 2095   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
// 2096   {
// 2097     uint8 id = MT_ZDO_CID_TO_AREQ_ID(pData->clusterId);
// 2098 
// 2099     pBuf[0] = LO_UINT16(pData->srcAddr.addr.shortAddr);
// 2100     pBuf[1] = HI_UINT16(pData->srcAddr.addr.shortAddr);
// 2101 
// 2102     /* copy ZDO data, skipping one-byte sequence number */
// 2103     osal_memcpy(pBuf+2, (pData->cmd.Data + 1), pData->cmd.DataLength-1);
// 2104 
// 2105     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
// 2106     osal_mem_free(pBuf);
// 2107   }
// 2108 }
// 2109 
// 2110 /***************************************************************************************************
// 2111  * @fn     MT_ZdoHandleExceptions()
// 2112  *
// 2113  * @brief  Handles all messages that are an exception to the generic MT ZDO Response.
// 2114  *
// 2115  * @param  pData - Incoming AF frame.
// 2116  *
// 2117  * @return  TRUE if handled by this function, FALSE if not
// 2118  ***************************************************************************************************/
// 2119 uint8 MT_ZdoHandleExceptions( afIncomingMSGPacket_t *pData, zdoIncomingMsg_t *inMsg )
// 2120 {
// 2121   uint8 ret = TRUE;
// 2122   ZDO_NwkIEEEAddrResp_t *nwkRsp;
// 2123   ZDO_DeviceAnnce_t devAnnce;
// 2124   uint8 doDefault = FALSE;
// 2125 
// 2126   switch ( inMsg->clusterID )
// 2127   {
// 2128     case NWK_addr_rsp:
// 2129     case IEEE_addr_rsp:
// 2130       if ( NULL != (nwkRsp = ZDO_ParseAddrRsp(inMsg)) )
// 2131       {
// 2132         if ( nwkRsp->status == ZDO_SUCCESS )
// 2133         {
// 2134           MT_ZdoAddrRspCB( nwkRsp, inMsg->clusterID );
// 2135         }
// 2136         osal_mem_free( nwkRsp );
// 2137       }
// 2138       break;
// 2139 
// 2140     case Device_annce:
// 2141       ZDO_ParseDeviceAnnce( inMsg, &devAnnce );
// 2142       MT_ZdoEndDevAnnceCB( &devAnnce, inMsg->srcAddr.addr.shortAddr );
// 2143       break;
// 2144 
// 2145     case Simple_Desc_rsp:
// 2146       if ( pData->cmd.DataLength > 5 )
// 2147       {
// 2148         ret = FALSE;
// 2149       }
// 2150       else
// 2151       {
// 2152         doDefault = TRUE;
// 2153       }
// 2154       break;
// 2155 
// 2156     default:
// 2157       ret = FALSE;
// 2158       break;
// 2159   }
// 2160 
// 2161   if ( doDefault )
// 2162   {
// 2163     ret = FALSE;
// 2164     pData->clusterId = MtZdoDef_rsp;
// 2165     pData->cmd.DataLength = 2;
// 2166   }
// 2167 
// 2168   return ( ret );
// 2169 }
// 2170 
// 2171 /***************************************************************************************************
// 2172  * @fn      MT_ZdoAddrRspCB
// 2173  *
// 2174  * @brief   Handle IEEE or nwk address response OSAL message from ZDO.
// 2175  *
// 2176  * @param   pMsg  - Message data
// 2177  *
// 2178  * @return  void
// 2179  */
// 2180 void MT_ZdoAddrRspCB( ZDO_NwkIEEEAddrResp_t *pMsg, uint16 clusterID )
// 2181 {
// 2182   uint8   listLen, len, *pBuf;
// 2183 
// 2184   /* both ZDO_NwkAddrResp_t and ZDO_IEEEAddrResp_t must be the same */
// 2185 
// 2186   /* get length, sanity check length */
// 2187   listLen = pMsg->numAssocDevs;
// 2188 
// 2189   /* calculate msg length */
// 2190   len = MT_ZDO_ADDR_RSP_LEN + (listLen * sizeof(uint16));
// 2191 
// 2192   /* get buffer */
// 2193   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
// 2194   {
// 2195     uint8 id = MT_ZDO_CID_TO_AREQ_ID(clusterID);
// 2196     uint8 *pTmp = pBuf;
// 2197 
// 2198     *pTmp++ = pMsg->status;
// 2199 
// 2200     osal_cpyExtAddr(pTmp, pMsg->extAddr);
// 2201     pTmp += Z_EXTADDR_LEN;
// 2202 
// 2203     *pTmp++ = LO_UINT16(pMsg->nwkAddr);
// 2204     *pTmp++ = HI_UINT16(pMsg->nwkAddr);
// 2205 
// 2206     *pTmp++ = pMsg->startIndex;
// 2207     *pTmp++ = listLen;
// 2208 
// 2209     MT_Word2Buf(pTmp, pMsg->devList, listLen);
// 2210 
// 2211     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO), id, len, pBuf);
// 2212     osal_mem_free(pBuf);
// 2213   }
// 2214 }
// 2215 
// 2216 /***************************************************************************************************
// 2217  * @fn      MT_ZdoEndDevAnnceCB
// 2218  *
// 2219  * @brief   Handle end device announce OSAL message from ZDO.
// 2220  *
// 2221  * @param   pMsg  - Message data
// 2222  *
// 2223  * @return  void
// 2224  */
// 2225 void MT_ZdoEndDevAnnceCB( ZDO_DeviceAnnce_t *pMsg, uint16 srcAddr )
// 2226 {
// 2227   uint8 *pBuf;
// 2228 
// 2229   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(MT_ZDO_END_DEVICE_ANNCE_IND_LEN)))
// 2230   {
// 2231     uint8 *pTmp = pBuf;
// 2232 
// 2233     *pTmp++ = LO_UINT16(srcAddr);
// 2234     *pTmp++ = HI_UINT16(srcAddr);
// 2235 
// 2236     *pTmp++ = LO_UINT16(pMsg->nwkAddr);
// 2237     *pTmp++ = HI_UINT16(pMsg->nwkAddr);
// 2238 
// 2239     osal_cpyExtAddr(pTmp, pMsg->extAddr);
// 2240     pTmp += Z_EXTADDR_LEN;
// 2241 
// 2242     *pTmp = pMsg->capabilities;
// 2243 
// 2244     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2245                                          MT_ZDO_END_DEVICE_ANNCE_IND,
// 2246                                          MT_ZDO_END_DEVICE_ANNCE_IND_LEN, pBuf);
// 2247     osal_mem_free(pBuf);
// 2248   }
// 2249 }
// 2250 
// 2251 /***************************************************************************************************
// 2252  * @fn      MT_ZdoSrcRtgCB
// 2253  *
// 2254  * @brief   Handle Src Route from ZDO.
// 2255  *
// 2256  * @param   pStr  - pointer to the data structure for the src route
// 2257  *
// 2258  * @return  void*
// 2259  */
// 2260 void* MT_ZdoSrcRtgCB( void *pStr )
// 2261 {
// 2262   uint8 len, *pBuf;
// 2263   zdoSrcRtg_t *pSrcRtg = pStr;
// 2264 
// 2265   // srcAddr (2) + relayCnt (1) + relayList( relaycnt * 2 )
// 2266   len = 2 + 1 + pSrcRtg->relayCnt * sizeof(uint16);
// 2267 
// 2268   if (NULL != (pBuf = (uint8 *)osal_mem_alloc(len)))
// 2269   {
// 2270     uint8 idx, *pTmp = pBuf;
// 2271     uint16 *pRelay;
// 2272 
// 2273     // Packet payload
// 2274     *pTmp++ = LO_UINT16(pSrcRtg->srcAddr);
// 2275     *pTmp++ = HI_UINT16(pSrcRtg->srcAddr);
// 2276     *pTmp++ = pSrcRtg->relayCnt;
// 2277 
// 2278     // Relay List
// 2279     if( ( pRelay = pSrcRtg->pRelayList ) != NULL )
// 2280     {
// 2281       for( idx = 0; idx < pSrcRtg->relayCnt; idx ++ )
// 2282       {
// 2283         *pTmp++ = LO_UINT16(*pRelay);
// 2284         *pTmp++ = HI_UINT16(*pRelay);
// 2285         pRelay++;
// 2286       }
// 2287     }
// 2288     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2289                                          MT_ZDO_SRC_RTG_IND, len, pBuf);
// 2290     osal_mem_free(pBuf);
// 2291   }
// 2292 
// 2293   return NULL;
// 2294 }
// 2295 
// 2296 /***************************************************************************************************
// 2297  * @fn          MT_ZdoConcentratorIndCB
// 2298  *
// 2299  * @brief       Handle the ZDO Concentrator Indication callback from the ZDO.
// 2300  *
// 2301  * @param       pStr - pointer to a parameter and a structure of parameters
// 2302  *
// 2303  * @return      NULL
// 2304  ***************************************************************************************************/
// 2305 static void *MT_ZdoConcentratorIndCB(void *pStr)
// 2306 {
// 2307   uint8 buf[MT_ZDO_CONCENTRATOR_IND_LEN], *pTmp = buf;
// 2308   zdoConcentratorInd_t *pInd = (zdoConcentratorInd_t *)pStr;
// 2309 
// 2310   *pTmp++ = LO_UINT16(pInd->nwkAddr);
// 2311   *pTmp++ = HI_UINT16(pInd->nwkAddr);
// 2312   pTmp = osal_memcpy(pTmp, pInd->extAddr, Z_EXTADDR_LEN);
// 2313   *pTmp = pInd->pktCost;
// 2314 
// 2315   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2316                                     MT_ZDO_CONCENTRATOR_IND_CB, MT_ZDO_CONCENTRATOR_IND_LEN, buf);
// 2317   return NULL;
// 2318 }
// 2319 
// 2320 /***************************************************************************************************
// 2321  * @fn          MT_ZdoLeaveInd
// 2322  *
// 2323  * @brief       Handle the ZDO Leave Indication callback from the ZDO.
// 2324  *
// 2325  * @param       vPtr - Pointer to the received Leave Indication message.
// 2326  *
// 2327  * @return      NULL
// 2328  ***************************************************************************************************/
// 2329 static void *MT_ZdoLeaveInd(void *vPtr)
// 2330 {
// 2331   NLME_LeaveInd_t *pInd = (NLME_LeaveInd_t *)vPtr;
// 2332   uint8 buf[sizeof(NLME_LeaveInd_t)];
// 2333 
// 2334   buf[0] = LO_UINT16(pInd->srcAddr);
// 2335   buf[1] = HI_UINT16(pInd->srcAddr);
// 2336   (void)osal_memcpy(buf+2, pInd->extAddr, Z_EXTADDR_LEN);
// 2337   buf[2+Z_EXTADDR_LEN] = pInd->request;
// 2338   buf[3+Z_EXTADDR_LEN] = pInd->removeChildren;
// 2339   buf[4+Z_EXTADDR_LEN] = pInd->rejoin;
// 2340 
// 2341   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2342                                        MT_ZDO_LEAVE_IND, 5+Z_EXTADDR_LEN, buf);
// 2343   return NULL;
// 2344 }
// 2345 #endif // MT_ZDO_CB_FUNC
// 2346 
// 2347 /***************************************************************************************************
// 2348  * @fn      MT_ZdoSendMsgCB
// 2349  *
// 2350  * @brief   Proxy the ZDO_SendMsgCBs one message at a time.
// 2351  *
// 2352  * @param   pMsg  - Message data
// 2353  *
// 2354  * @return  void
// 2355  */
// 2356 void MT_ZdoSendMsgCB(zdoIncomingMsg_t *pMsg)
// 2357 {
// 2358   uint8 len = pMsg->asduLen + 9;
// 2359   uint8 *pBuf = (uint8 *)osal_mem_alloc(len);
// 2360 
// 2361   if (pBuf != NULL)
// 2362   {
// 2363     uint8 *pTmp = pBuf;
// 2364 
// 2365     // Assuming exclusive use of network short addresses.
// 2366     *pTmp++ = LO_UINT16(pMsg->srcAddr.addr.shortAddr);
// 2367     *pTmp++ = HI_UINT16(pMsg->srcAddr.addr.shortAddr);
// 2368     *pTmp++ = pMsg->wasBroadcast;
// 2369     *pTmp++ = LO_UINT16(pMsg->clusterID);
// 2370     *pTmp++ = HI_UINT16(pMsg->clusterID);
// 2371     *pTmp++ = pMsg->SecurityUse;
// 2372     *pTmp++ = pMsg->TransSeq;
// 2373     // Skipping asduLen since it can be deduced from the RPC packet length.
// 2374     *pTmp++ = LO_UINT16(pMsg->macDestAddr);
// 2375     *pTmp++ = HI_UINT16(pMsg->macDestAddr);
// 2376     (void)osal_memcpy(pTmp, pMsg->asdu, pMsg->asduLen);
// 2377 
// 2378     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2379                                          MT_ZDO_MSG_CB_INCOMING, len, pBuf);
// 2380 
// 2381     osal_mem_free(pBuf);
// 2382   }
// 2383 }
// 2384 
// 2385 #if defined ( MT_ZDO_EXTENSIONS )
// 2386 /***************************************************************************************************
// 2387  * @fn          MT_ZdoSecAddLinkKey
// 2388  *
// 2389  * @brief       Handle the ZDO Security Add Link Key extension message
// 2390  *
// 2391  * @param       pBuf - Pointer to the received message data.
// 2392  *
// 2393  * @return      NULL
// 2394  ***************************************************************************************************/
// 2395 static void MT_ZdoSecAddLinkKey( uint8 *pBuf )
// 2396 {
// 2397   uint16 shortAddr;
// 2398   uint8 *pExtAddr;
// 2399   uint8 status;
// 2400 
// 2401   shortAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 2402   pBuf += 2;
// 2403   pExtAddr = pBuf;
// 2404   pBuf += Z_EXTADDR_LEN;
// 2405 
// 2406   status = ZDSecMgrAddLinkKey( shortAddr, pExtAddr, pBuf );
// 2407 
// 2408   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2409                                        MT_ZDO_SEC_ADD_LINK_KEY, 1, &status );
// 2410 }
// 2411 
// 2412 /***************************************************************************************************
// 2413  * @fn          MT_ZdoSecEntryLookupExt
// 2414  *
// 2415  * @brief       Handle the ZDO Security Entry Lookup Extended extension message
// 2416  *
// 2417  * @param       pBuf - Pointer to the received message data.
// 2418  *
// 2419  * @return      NULL
// 2420  ***************************************************************************************************/
// 2421 static void MT_ZdoSecEntryLookupExt( uint8 *pBuf )
// 2422 {
// 2423   ZDSecMgrEntry_t *pEntry = NULL;
// 2424   uint8 buf[6] = {0};
// 2425 
// 2426   // lookup entry index for specified EXT address
// 2427   buf[0] = ZDSecMgrEntryLookupExt( pBuf, &pEntry );
// 2428   if ( pEntry )
// 2429   {
// 2430     buf[1] = LO_UINT16( pEntry->ami );
// 2431     buf[2] = HI_UINT16( pEntry->ami );
// 2432     buf[3] = LO_UINT16( pEntry->keyNvId );
// 2433     buf[4] = HI_UINT16( pEntry->keyNvId );
// 2434     buf[5] = (uint8)pEntry->authenticateOption;
// 2435   }
// 2436 
// 2437   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2438                                        MT_ZDO_SEC_ENTRY_LOOKUP_EXT, 6, buf );
// 2439 }
// 2440 
// 2441 /***************************************************************************************************
// 2442  * @fn          MT_ZdoSecDeviceRemove
// 2443  *
// 2444  * @brief       Handle the ZDO Security Remove Device extension message
// 2445  *
// 2446  * @param       pBuf - Pointer to the received message data.
// 2447  *
// 2448  * @return      NULL
// 2449  ***************************************************************************************************/
// 2450 static void MT_ZdoSecDeviceRemove( uint8 *pBuf )
// 2451 {
// 2452   ZStatus_t status;
// 2453 
// 2454   // lookup entry index for specified EXT address
// 2455   status = ZDSecMgrDeviceRemoveByExtAddr( pBuf );
// 2456 
// 2457   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2458                                        MT_ZDO_SEC_DEVICE_REMOVE, 1, &status );
// 2459 }
// 2460 
// 2461 /***************************************************************************************************
// 2462  * @fn          MT_ZdoExtRouteDisc
// 2463  *
// 2464  * @brief       Handle the ZDO Route Discovery extension message
// 2465  *
// 2466  * @param       pBuf - Pointer to the received message data.
// 2467  *
// 2468  * @return      NULL
// 2469  ***************************************************************************************************/
// 2470 static void MT_ZdoExtRouteDisc( uint8 *pBuf )
// 2471 {
// 2472   ZStatus_t status;
// 2473   uint16 dstAddr;
// 2474 
// 2475   dstAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 2476 
// 2477   // lookup entry index for specified EXT address
// 2478   status = NLME_RouteDiscoveryRequest( dstAddr, pBuf[2], pBuf[3] );
// 2479 
// 2480 
// 2481   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2482                                        MT_ZDO_EXT_ROUTE_DISC, 1, &status );
// 2483 }
// 2484 
// 2485 /***************************************************************************************************
// 2486  * @fn          MT_ZdoExtRouteCheck
// 2487  *
// 2488  * @brief       Handle the ZDO Route Check extension message
// 2489  *
// 2490  * @param       pBuf - Pointer to the received message data.
// 2491  *
// 2492  * @return      NULL
// 2493  ***************************************************************************************************/
// 2494 static void MT_ZdoExtRouteCheck( uint8 *pBuf )
// 2495 {
// 2496   ZStatus_t status;
// 2497   uint16 dstAddr;
// 2498 
// 2499   dstAddr = BUILD_UINT16( pBuf[0], pBuf[1] );
// 2500 
// 2501   // lookup entry index for specified EXT address
// 2502   status = RTG_CheckRtStatus( dstAddr, pBuf[2], pBuf[3] );
// 2503 
// 2504   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2505                                        MT_ZDO_EXT_ROUTE_CHECK, 1, &status );
// 2506 }
// 2507 
// 2508 /***************************************************************************************************
// 2509  * @fn          MT_ZdoExtRemoveGroup
// 2510  *
// 2511  * @brief       Handle the ZDO extension Remove Group message
// 2512  *
// 2513  * @param       pBuf - Pointer to the received message data.
// 2514  *
// 2515  * @return      NULL
// 2516  ***************************************************************************************************/
// 2517 static void MT_ZdoExtRemoveGroup( uint8 *pBuf )
// 2518 {
// 2519   ZStatus_t status;
// 2520   uint8 endpoint;
// 2521   uint16 groupID;
// 2522 
// 2523   endpoint = *pBuf++;
// 2524   groupID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 2525 
// 2526   if ( aps_RemoveGroup( endpoint, groupID ) )
// 2527   {
// 2528     status = ZSuccess;
// 2529   }
// 2530   else
// 2531   {
// 2532     status = ZFailure;
// 2533   }
// 2534 
// 2535   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2536                                        MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
// 2537 }
// 2538 
// 2539 /***************************************************************************************************
// 2540  * @fn          MT_ZdoExtRemoveAllGroup
// 2541  *
// 2542  * @brief       Handle the ZDO extension Remove All Groups message
// 2543  *
// 2544  * @param       pBuf - Pointer to the received message data.
// 2545  *
// 2546  * @return      NULL
// 2547  ***************************************************************************************************/
// 2548 static void MT_ZdoExtRemoveAllGroup( uint8 *pBuf )
// 2549 {
// 2550   ZStatus_t status = ZSuccess;
// 2551 
// 2552   aps_RemoveAllGroup( *pBuf );
// 2553 
// 2554   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2555                                        MT_ZDO_EXT_REMOVE_GROUP, 1, &status );
// 2556 }
// 2557 
// 2558 /***************************************************************************************************
// 2559  * @fn          MT_ZdoExtFindAllGroupsEndpoint
// 2560  *
// 2561  * @brief       Handle the ZDO extension Find All Groups for Endpoint message
// 2562  *
// 2563  * @param       pBuf - Pointer to the received message data.
// 2564  *
// 2565  * @return      NULL
// 2566  ***************************************************************************************************/
// 2567 static void MT_ZdoExtFindAllGroupsEndpoint( uint8 *pBuf )
// 2568 {
// 2569   uint16 groupList[ APS_MAX_GROUPS ];
// 2570   uint8 groups;
// 2571   uint8 msgLen;
// 2572   uint8 *pMsg;
// 2573 
// 2574   groups = aps_FindAllGroupsForEndpoint( *pBuf, groupList );
// 2575 
// 2576   msgLen = 1 + (2 * groups);
// 2577   pMsg = osal_mem_alloc( msgLen );
// 2578   if ( pMsg )
// 2579   {
// 2580     uint8 x;
// 2581     uint8 *pBuf = pMsg;
// 2582 
// 2583     *pBuf++ = groups;
// 2584     for ( x = 0; x < groups; x++ )
// 2585     {
// 2586       *pBuf++ = LO_UINT16( groupList[x] );
// 2587       *pBuf++ = HI_UINT16( groupList[x] );
// 2588     }
// 2589 
// 2590     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2591                                        MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, msgLen, pMsg );
// 2592     osal_mem_free( pMsg );
// 2593   }
// 2594   else
// 2595   {
// 2596     groups = 0;
// 2597     MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2598                                        MT_ZDO_EXT_FIND_ALL_GROUPS_ENDPOINT, 1, &groups );
// 2599   }
// 2600 }
// 2601 
// 2602 /***************************************************************************************************
// 2603  * @fn          MT_ZdoExtFindGroup
// 2604  *
// 2605  * @brief       Handle the ZDO extension Find Group message
// 2606  *
// 2607  * @param       pBuf - Pointer to the received message data.
// 2608  *
// 2609  * @return      NULL
// 2610  ***************************************************************************************************/
// 2611 static void MT_ZdoExtFindGroup( uint8 *pBuf )
// 2612 {
// 2613   uint8 endpoint;
// 2614   uint16 groupID;
// 2615   aps_Group_t *pGroup;
// 2616   uint8 buf[1+2+APS_GROUP_NAME_LEN] = {0};
// 2617 
// 2618   endpoint = *pBuf++;
// 2619   groupID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 2620 
// 2621   pGroup = aps_FindGroup( endpoint, groupID );
// 2622   if ( pGroup  )
// 2623   {
// 2624     buf[0] = ZSuccess;
// 2625     buf[1] = LO_UINT16( pGroup->ID );
// 2626     buf[2] = HI_UINT16( pGroup->ID );
// 2627     buf[3] = pGroup->name[0];
// 2628     osal_memcpy( &buf[4], &pGroup->name[1], buf[3] );
// 2629   }
// 2630   else
// 2631   {
// 2632     buf[0] = ZFailure;
// 2633   }
// 2634 
// 2635   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2636                       MT_ZDO_EXT_FIND_GROUP, (1+2+APS_GROUP_NAME_LEN), buf );
// 2637 }
// 2638 
// 2639 /***************************************************************************************************
// 2640  * @fn          MT_ZdoExtAddGroup
// 2641  *
// 2642  * @brief       Handle the ZDO extension Add Group message
// 2643  *
// 2644  * @param       pBuf - Pointer to the received message data.
// 2645  *
// 2646  * @return      NULL
// 2647  ***************************************************************************************************/
// 2648 static void MT_ZdoExtAddGroup( uint8 *pBuf )
// 2649 {
// 2650   ZStatus_t status = ZSuccess;
// 2651   aps_Group_t group = {0};
// 2652   uint8 endpoint;
// 2653 
// 2654   endpoint = *pBuf++;
// 2655   group.ID = BUILD_UINT16( pBuf[0], pBuf[1] );
// 2656   group.name[0] = pBuf[2];
// 2657   if ( group.name[0] > (APS_GROUP_NAME_LEN-1) )
// 2658   {
// 2659     group.name[0] = (APS_GROUP_NAME_LEN-1);
// 2660   }
// 2661 
// 2662   if (group.name[0] > 0 )
// 2663   {
// 2664     osal_memcpy( &group.name[1], &pBuf[3], group.name[0] );
// 2665   }
// 2666 
// 2667   status = aps_AddGroup( endpoint, &group );
// 2668 
// 2669   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2670                                        MT_ZDO_EXT_ADD_GROUP, 1, &status );
// 2671 }
// 2672 
// 2673 /***************************************************************************************************
// 2674  * @fn          MT_ZdoExtCountAllGroups
// 2675  *
// 2676  * @brief       Handle the ZDO extension Count All Groups message
// 2677  *
// 2678  * @param       pBuf - Pointer to the received message data.
// 2679  *
// 2680  * @return      NULL
// 2681  ***************************************************************************************************/
// 2682 static void MT_ZdoExtCountAllGroups( uint8 *pBuf )
// 2683 {
// 2684   ZStatus_t status = 0;
// 2685 
// 2686   status = (ZStatus_t)aps_CountAllGroups();
// 2687 
// 2688   MT_BuildAndSendZToolResponse(((uint8)MT_RPC_CMD_AREQ | (uint8)MT_RPC_SYS_ZDO),
// 2689                                        MT_ZDO_EXT_COUNT_ALL_GROUPS, 1, &status );
// 2690 }
// 2691 
// 2692 
// 2693 #endif // MT_ZDO_EXTENSIONS
// 2694 
// 2695 #endif   /*ZDO Command Processing in MT*/
// 2696 /***************************************************************************************************
// 2697 ***************************************************************************************************/
// 
//
// 
//
//
//Errors: none
//Warnings: none
