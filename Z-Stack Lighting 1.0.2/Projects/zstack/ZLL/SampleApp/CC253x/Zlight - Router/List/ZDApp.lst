###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             27/May/2014  19:13:55 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Components\stack\zdo\ZDApp.c                 #
#    Command line       =  -f "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f "D:\Texas         #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO       #
#                          -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f "D:\Texas               #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wZCL.cfg" "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Components\stack\zdo\ZDApp.c" -D             #
#                          FEATURE_GREEN_POWER -D SECURE=1 -D                 #
#                          TC_LINKKEY_JOIN -D ZDSECMGR_TC_DEVICE_MAX=2 -D     #
#                          NV_RESTORE -D HOLD_AUTO_START -D INTER_PAN -D      #
#                          LCD_SUPPORTED=DEBUG -D ZCL_BASIC -D ZCL_READ -D    #
#                          ZCL_WRITE -D ZCL_IDENTIFY -D ZCL_ON_OFF -D         #
#                          ZCL_SCENES -D ZCL_GROUPS -D                        #
#                          ZCL_LIGHT_LINK_ENHANCE -D ZCL_LEVEL_CTRL -D        #
#                          ZCL_COLOR_CTRL -D MAX_CHANNELS_24GHZ=0x02108800    #
#                          -D xPWM_ALT2 -D xTHERMAL_SHUTDOWN -D               #
#                          ZLL_1_0_HUB_COMPATIBILITY -D DALI_LIGHT -lC        #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Zlight  #
#                          - Router\List\" -lA "D:\Texas Instruments\Z-Stack  #
#                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC253 #
#                          x\Zlight - Router\List\" --diag_suppress           #
#                          Pe001,Pa010 -o "D:\Texas Instruments\Z-Stack       #
#                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC253 #
#                          x\Zlight - Router\Obj\" -e --debug --core=plain    #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\Texas                  #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\" -I    #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\Sour #
#                          ce\" -I "D:\Texas Instruments\Z-Stack Lighting     #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\S #
#                          ource\" -I "D:\Texas Instruments\Z-Stack Lighting  #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\HomeAutomation\Source\" -I "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\HomeAutomation\SampleLight\Source\" -I           #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\ZMain\TI2530DB\" -I "D:\Texas                    #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\hal\include\" -I "D:\Texas      #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\hal\target\CC2530PMP4712\" -I   #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\include\" -I "D:\Texas      #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\high_level\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\" -I        #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\single_chip #
#                          \" -I "D:\Texas Instruments\Z-Stack Lighting       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mt\" -I "D:\Texas               #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\osal\include\" -I "D:\Texas     #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\services\saddr\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\services\sdata\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\af\" -I "D:\Texas         #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\nwk\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sapi\" -I "D:\Texas       #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sec\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sys\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\zcl\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\zdo\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\zmac\" -I "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\zmac\f8w\" -Ohz                 #
#                          --require_prototypes                               #
#    List file          =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Zlight  #
#                          - Router\List\ZDApp.lst                            #
#    Object file        =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Zlight  #
#                          - Router\Obj\ZDApp.r51                             #
#                                                                             #
#                                                                             #
###############################################################################

D:\Texas Instruments\Z-Stack Lighting 1.0.2\Components\stack\zdo\ZDApp.c
      1          /**************************************************************************************************
      2            Filename:       ZDApp.c
      3            Revised:        $Date: 2013-11-23 16:25:51 -0800 (Sat, 23 Nov 2013) $
      4            Revision:       $Revision: 36244 $
      5          
      6            Description:    This file contains the interface to the Zigbee Device Application. This is the
      7                            Application part that the user can change. This also contains the Task functions.
      8          
      9          
     10            Copyright 2004-2013 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License"). You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product. Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #include "ZComDef.h"
     46          #include "ZMAC.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Tasks.h"
     49          #include "OSAL_PwrMgr.h"
     50          #include "OSAL_Nv.h"
     51          #include "AF.h"
     52          #include "APSMEDE.h"
     53          #include "NLMEDE.h"
     54          #include "AddrMgr.h"
     55          #include "ZDProfile.h"
     56          #include "ZDObject.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "DebugTrace.h"
     61          #include "nwk_util.h"
     62          #include "OnBoard.h"
     63          #include "ZGlobals.h"
     64          #include "ZDNwkMgr.h"
     65          #include "rtg.h"
     66          
     67          #include "ssp.h"
     68          
     69          /* HAL */
     70          #include "hal_led.h"
     71          //#include "hal_lcd.h"
     72          #include "hal_oled.h"
     73          #include "hal_key.h"
     74          
     75          #if defined( MT_MAC_FUNC ) || defined( MT_MAC_CB_FUNC )
     76            #error "ERROR! MT_MAC functionalities should be disabled on ZDO devices"
     77          #endif
     78          
     79          /*********************************************************************
     80           * CONSTANTS
     81           */
     82          
     83          #if !defined( NWK_START_DELAY )
     84            #define NWK_START_DELAY             100   // in milliseconds
     85          #endif
     86          
     87          #if !defined( LEAVE_RESET_DELAY )
     88            #define LEAVE_RESET_DELAY           5000  // in milliseconds
     89          #endif
     90          
     91          // Init ZDO, but hold and wait for application to start the joining or
     92          // forming network
     93          #define ZDO_INIT_HOLD_NWK_START       0xFFFF
     94          
     95          #if !defined( EXTENDED_JOINING_RANDOM_MASK )
     96            #define EXTENDED_JOINING_RANDOM_MASK 0x007F
     97          #endif
     98          
     99          #if !defined( BEACON_REQUEST_DELAY )
    100            #define BEACON_REQUEST_DELAY        100   // in milliseconds
    101          #endif
    102          
    103          #if !defined( BEACON_REQ_DELAY_MASK )
    104            #define BEACON_REQ_DELAY_MASK       0x007F
    105          #endif
    106          
    107          #define MAX_RESUME_RETRY            3
    108          
    109          #define MAX_DEVICE_UNAUTH_TIMEOUT   10000  // 10 seconds
    110          
    111          // Beacon Order Settings (see NLMEDE.h)
    112          #define DEFAULT_BEACON_ORDER        BEACON_ORDER_NO_BEACONS
    113          #define DEFAULT_SUPERFRAME_ORDER    DEFAULT_BEACON_ORDER
    114          
    115          #if !defined( NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA )
    116          // Additional counts to add to the frame counter when restoring from NV
    117          // This amount is in addition to MAX_NWK_FRAMECOUNTER_CHANGES
    118          #define NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA    250
    119          #endif
    120          
    121          // Leave control bits
    122          #define ZDAPP_LEAVE_CTRL_INIT 0
    123          #define ZDAPP_LEAVE_CTRL_SET  1
    124          #define ZDAPP_LEAVE_CTRL_RA   2
    125          
    126          // Address Manager Stub Implementation
    127          #define ZDApp_NwkWriteNVRequest AddrMgrWriteNVRequest
    128          
    129          
    130          #if !defined ZDO_NV_SAVE_RFDs
    131          #define ZDO_NV_SAVE_RFDs  TRUE
    132          #endif
    133          
    134          // Delay time before updating NWK NV data to force fewer writes during high activity.
    135          #if ZDO_NV_SAVE_RFDs
    136          #define ZDAPP_UPDATE_NWK_NV_TIME 700
    137          #else
    138          #define ZDAPP_UPDATE_NWK_NV_TIME 65000
    139          #endif
    140          
    141          // Timeout value to process New Devices
    142          #define ZDAPP_NEW_DEVICE_TIME     600   // in ms
    143          
    144          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    145          #if !defined MAX_PENDING_BIND_REQ
    146          #define MAX_PENDING_BIND_REQ 3
    147          #endif
    148          #endif
    149          
    150          /******************************************************************************
    151           * TYPEDEFS
    152           */
    153          typedef struct
    154          {
    155            void   *next;
    156            uint16 shortAddr;
    157            uint16 timeDelta;
    158          } ZDAppNewDevice_t;
    159          
    160          /*********************************************************************
    161           * GLOBAL VARIABLES
    162           */
    163          
    164          #if defined( LCD_SUPPORTED )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    165            uint8 MatchRsps = 0;
   \                     MatchRsps:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    166          #endif
    167          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    168          uint8 zdoDiscCounter = 1;
   \                     zdoDiscCounter:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for zdoDiscCounter>`
   \   000001                REQUIRE __INIT_XDATA_I
    169          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    170          zAddrType_t ZDAppNwkAddr;
   \                     ZDAppNwkAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z
    171          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    172          uint8 zdappMgmtNwkDiscRspTransSeq;
   \                     zdappMgmtNwkDiscRspTransSeq:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    173          uint8 zdappMgmtNwkDiscReqInProgress = FALSE;
   \                     zdappMgmtNwkDiscReqInProgress:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    174          zAddrType_t zdappMgmtNwkDiscRspAddr;
   \                     zdappMgmtNwkDiscRspAddr:
   \   000000                DS 9
   \   000009                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    175          uint8 zdappMgmtNwkDiscStartIndex;
   \                     zdappMgmtNwkDiscStartIndex:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    176          uint8 zdappMgmtSavedNwkState;
   \                     zdappMgmtSavedNwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    177          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    178          uint8 continueJoining = TRUE;
   \                     continueJoining:
   \   000000                DS 1
   \   000001                REQUIRE `?<Initializer for continueJoining>`
   \   000001                REQUIRE __INIT_XDATA_I
    179          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    180          uint8  _tmpRejoinState;
   \                     _tmpRejoinState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    181          
    182          // The extended PanID used in ZDO layer for rejoin.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    183          uint8 ZDO_UseExtendedPANID[Z_EXTADDR_LEN];
   \                     ZDO_UseExtendedPANID:
   \   000000                DS 8
   \   000008                REQUIRE __INIT_XDATA_Z
    184          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          pfnZdoCb zdoCBFunc[MAX_ZDO_CB_FUNC];
   \                     zdoCBFunc:
   \   000000                DS 14
   \   00000E                REQUIRE __INIT_XDATA_Z
    186          
    187          #if !defined ( ZDP_BIND_SKIP_VALIDATION )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    188          ZDO_PendingBindReq_t *ZDAppPendingBindReq = NULL;
   \                     ZDAppPendingBindReq:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    189          #endif
    190          
    191          /*********************************************************************
    192           * EXTERNAL VARIABLES
    193           */
    194          
    195          /*********************************************************************
    196           * EXTERNAL FUNCTIONS
    197           */
    198          
    199          /*********************************************************************
    200           * LOCAL FUNCTIONS
    201           */
    202          
    203          void ZDApp_NetworkStartEvt( void );
    204          void ZDApp_DeviceAuthEvt( void );
    205          void ZDApp_SaveNetworkStateEvt( void );
    206          
    207          uint8 ZDApp_ReadNetworkRestoreState( void );
    208          uint8 ZDApp_RestoreNetworkState( void );
    209          void ZDAppDetermineDeviceType( void );
    210          void ZDApp_InitUserDesc( void );
    211          void ZDAppCheckForHoldKey( void );
    212          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr );
    213          void ZDApp_ProcessNetworkJoin( void );
    214          void ZDApp_SetCoordAddress( uint8 endPoint, uint8 dstEP );
    215          uint8 ZDApp_RestoreNwkKey( void );
    216          networkDesc_t* ZDApp_NwkDescListProcessing(void);
    217          
    218          void ZDApp_SecInit( uint8 state );
    219          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events );
    220          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr );
    221          
    222          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf );
    223          
    224          void ZDApp_ResetTimerStart( uint16 delay );
    225          void ZDApp_ResetTimerCancel( void );
    226          void ZDApp_LeaveCtrlInit( void );
    227          void ZDApp_LeaveCtrlSet( uint8 ra );
    228          uint8 ZDApp_LeaveCtrlBypass( void );
    229          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay );
    230          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
    231                                  uint8 removeChildren );
    232          void ZDApp_NodeProfileSync( uint8 stackProfile );
    233          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
    234          void ZDApp_RegisterCBs( void );
    235          void ZDApp_InitZdoCBFunc(void);
    236          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    237          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq );
    238          void ZDApp_InitPendingBind( void );
    239          void ZDApp_ProcessPendingBindReq( uint8 *extAddr );
    240          void ZDApp_AgeOutPendingBindEntry( void );
    241          #endif
    242          
    243          /*********************************************************************
    244           * LOCAL VARIABLES
    245           */
    246          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    247          uint8 ZDAppTaskID;
   \                     ZDAppTaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    248          uint8 nwkStatus;
   \                     nwkStatus:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    249          endPointDesc_t *ZDApp_AutoFindMode_epDesc = (endPointDesc_t *)NULL;
   \                     ZDApp_AutoFindMode_epDesc:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    250          uint8 ZDApp_LeaveCtrl;
   \                     ZDApp_LeaveCtrl:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    251          
    252          #if defined( HOLD_AUTO_START )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    253            devStates_t devState = DEV_HOLD;
   \                     devState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    254          #else
    255            devStates_t devState = DEV_INIT;
    256          #endif
    257          
    258          #if ( ZG_BUILD_RTRONLY_TYPE ) || ( ZG_BUILD_ENDDEVICE_TYPE )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    259            devStartModes_t devStartMode = MODE_JOIN;     // Assume joining
   \                     devStartMode:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    260            //devStartModes_t devStartMode = MODE_RESUME; // if already "directly joined"
    261                                  // to parent. Set to make the device do an Orphan scan.
    262          #else
    263            // Set the default to coodinator
    264            devStartModes_t devStartMode = MODE_HARD;
    265          #endif
    266          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    267          uint8 retryCnt;
   \                     retryCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    268          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    269          endPointDesc_t ZDApp_epDesc =
   \                     ZDApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE `?<Initializer for ZDApp_epDesc>`
   \   000006                REQUIRE __INIT_XDATA_I
    270          {
    271            ZDO_EP,
    272            &ZDAppTaskID,
    273            (SimpleDescriptionFormat_t *)NULL,  // No Simple description for ZDO
    274            (afNetworkLatencyReq_t)0            // No Network Latency req
    275          };
    276          

   \                                 In  segment XDATA_I, align 1, keep-with-next
    277          uint16 ZDApp_SavedPollRate = POLL_RATE;
   \                     ZDApp_SavedPollRate:
   \   000000                DS 2
   \   000002                REQUIRE `?<Initializer for ZDApp_SavedPollRate>`
   \   000002                REQUIRE __INIT_XDATA_I
    278          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    279          ZDAppNewDevice_t *ZDApp_NewDeviceList = NULL;
   \                     ZDApp_NewDeviceList:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    280          
    281          /* "Hold Key" status saved during ZDAppCheckForHoldKey() */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    282          static uint8 zdappHoldKeys;
   \                     zdappHoldKeys:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    283          
    284          /*********************************************************************
    285           * @fn      ZDApp_Init
    286           *
    287           * @brief   ZDApp Initialization function.
    288           *
    289           * @param   task_id - ZDApp Task ID
    290           *
    291           * @return  None
    292           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    293          void ZDApp_Init( uint8 task_id )
   \                     ZDApp_Init:
    294          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    295            // Save the task ID
    296            ZDAppTaskID = task_id;
   \   000006   90....       MOV     DPTR,#ZDAppTaskID
   \   000009   F0           MOVX    @DPTR,A
    297          
    298            // Initialize the ZDO global device short address storage
    299            ZDAppNwkAddr.addrMode = Addr16Bit;
   \   00000A   90....       MOV     DPTR,#ZDAppNwkAddr + 8
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    300            ZDAppNwkAddr.addr.shortAddr = INVALID_NODE_ADDR;
   \   000010   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000013   74FE         MOV     A,#-0x2
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   04           INC     A
   \   000018   F0           MOVX    @DPTR,A
    301            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \   000019                ; Setup parameters for call to function NLME_GetExtAddr
   \   000019   12....       LCALL   ??NLME_GetExtAddr?relay
    302          
    303            // Check for manual "Hold Auto Start"
    304            ZDAppCheckForHoldKey();
   \   00001C                ; Setup parameters for call to function ZDAppCheckForHoldKey
   \   00001C   12....       LCALL   ??ZDAppCheckForHoldKey?relay
    305          
    306            // Initialize ZDO items and setup the device - type of device to create.
    307            ZDO_Init();
   \   00001F                ; Setup parameters for call to function ZDO_Init
   \   00001F   12....       LCALL   ??ZDO_Init?relay
    308          
    309            // Register the endpoint description with the AF
    310            // This task doesn't have a Simple description, but we still need
    311            // to register the endpoint.
    312            afRegister( (endPointDesc_t *)&ZDApp_epDesc );
   \   000022                ; Setup parameters for call to function afRegister
   \   000022   7A..         MOV     R2,#ZDApp_epDesc & 0xff
   \   000024   7B..         MOV     R3,#(ZDApp_epDesc >> 8) & 0xff
   \   000026   12....       LCALL   ??afRegister?relay
    313          
    314          #if defined( ZDO_USERDESC_RESPONSE )
    315            ZDApp_InitUserDesc();
    316          #endif // ZDO_USERDESC_RESPONSE
    317          
    318            // Start the device?
    319            if ( devState != DEV_HOLD )
   \   000029   90....       MOV     DPTR,#devState
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6009         JZ      ??ZDApp_Init_0
    320            {
    321              ZDOInitDevice( 0 );
   \   00002F                ; Setup parameters for call to function ZDOInitDevice
   \   00002F   7A00         MOV     R2,#0x0
   \   000031   7B00         MOV     R3,#0x0
   \   000033   12....       LCALL   ??ZDOInitDevice?relay
   \   000036   8014         SJMP    ??ZDApp_Init_1
    322            }
    323            else
    324            {
    325              ZDOInitDevice( ZDO_INIT_HOLD_NWK_START );
   \                     ??ZDApp_Init_0:
   \   000038                ; Setup parameters for call to function ZDOInitDevice
   \   000038   7AFF         MOV     R2,#-0x1
   \   00003A   7BFF         MOV     R3,#-0x1
   \   00003C   12....       LCALL   ??ZDOInitDevice?relay
    326              // Blink LED to indicate HOLD_START
    327              HalLedBlink ( HAL_LED_4, 0, 50, 500 );
   \   00003F                ; Setup parameters for call to function HalLedBlink
   \   00003F   7CF4         MOV     R4,#-0xc
   \   000041   7D01         MOV     R5,#0x1
   \   000043   7B32         MOV     R3,#0x32
   \   000045   7A00         MOV     R2,#0x0
   \   000047   7908         MOV     R1,#0x8
   \   000049   12....       LCALL   ??HalLedBlink?relay
    328            }
    329          
    330            // Initialize the ZDO callback function pointers zdoCBFunc[]
    331            ZDApp_InitZdoCBFunc();
   \                     ??ZDApp_Init_1:
   \   00004C                ; Setup parameters for call to function ZDApp_InitZdoCBFunc
   \   00004C   12....       LCALL   ??ZDApp_InitZdoCBFunc?relay
    332          
    333            ZDApp_RegisterCBs();
   \   00004F                ; Setup parameters for call to function ZDApp_RegisterCBs
   \   00004F   12....       LCALL   ??ZDApp_RegisterCBs?relay
    334          
    335          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    336          #if defined ( REFLECTOR )
    337            ZDApp_InitPendingBind();
   \   000052                ; Setup parameters for call to function ZDApp_InitPendingBind
   \   000052   12....       LCALL   ??ZDApp_InitPendingBind?relay
    338          #endif
    339          #endif
    340          } /* ZDApp_Init() */
   \   000055   02....       LJMP    ??Subroutine44_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine44_0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    341          
    342          /*********************************************************************
    343           * @fn          ZDApp_SecInit
    344           *
    345           * @brief       ZDApp initialize security.
    346           *
    347           * @param       state - device initialization state
    348           *
    349           * @return      none
    350           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    351          void ZDApp_SecInit( uint8 state )
   \                     ZDApp_SecInit:
    352          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 16
   \   000005   74F0         MOV     A,#-0x10
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 0,R1
    353            uint8 zgPreConfigKey[SEC_KEY_LEN];
    354          
    355            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
    356            {
    357              // Set the Trust Center bit
    358              ZDO_Config_Node_Descriptor.ServerMask |= PRIM_TRUST_CENTER;
    359            }
    360          
    361            // Initialize ZigBee Device Security Manager
    362            ZDSecMgrInit(state);
   \   00000C                ; Setup parameters for call to function ZDSecMgrInit
   \   00000C   12....       LCALL   ??ZDSecMgrInit?relay
    363          
    364            if ( ZG_SECURE_ENABLED )
    365            {
    366              if ( state != ZDO_INITDEV_RESTORED_NETWORK_STATE )
   \   00000F   E5..         MOV     A,?V0 + 0
   \   000011   6057         JZ      ??ZDApp_SecInit_0
    367              {
    368                nwkFrameCounter = 0;
   \   000013   90....       MOV     DPTR,#nwkFrameCounter
   \   000016   E4           CLR     A
   \   000017   F0           MOVX    @DPTR,A
   \   000018   A3           INC     DPTR
   \   000019   F0           MOVX    @DPTR,A
   \   00001A   A3           INC     DPTR
   \   00001B   F0           MOVX    @DPTR,A
   \   00001C   A3           INC     DPTR
   \   00001D   F0           MOVX    @DPTR,A
    369          
    370                if( _NIB.nwkKeyLoaded == FALSE )
   \   00001E   90....       MOV     DPTR,#_NIB + 61
   \   000021   E0           MOVX    A,@DPTR
   \   000022   7046         JNZ     ??ZDApp_SecInit_0
    371                {
    372                  if ( ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE          ) ||
    373                       ( ( zgSecurityMode == ZG_SECURITY_RESIDENTIAL ) && zgPreConfigKeys )    )
   \   000024   90....       MOV     DPTR,#zgSecurityMode
   \   000027   E0           MOVX    A,@DPTR
   \   000028   6401         XRL     A,#0x1
   \   00002A   703E         JNZ     ??ZDApp_SecInit_0
   \   00002C   90....       MOV     DPTR,#zgPreConfigKeys
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   6038         JZ      ??ZDApp_SecInit_0
    374                  {
    375                      ZDSecMgrReadKeyFromNv(ZCD_NV_PRECFGKEY, zgPreConfigKey);
   \   000032                ; Setup parameters for call to function ZDSecMgrReadKeyFromNv
   \   000032   85..82       MOV     DPL,?XSP + 0
   \   000035   85..83       MOV     DPH,?XSP + 1
   \   000038   AC82         MOV     R4,DPL
   \   00003A   AD83         MOV     R5,DPH
   \   00003C   7A62         MOV     R2,#0x62
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   ??ZDSecMgrReadKeyFromNv?relay
    376                      SSP_UpdateNwkKey( zgPreConfigKey, 0);
   \   000043                ; Setup parameters for call to function SSP_UpdateNwkKey
   \   000043   7900         MOV     R1,#0x0
   \   000045   85..82       MOV     DPL,?XSP + 0
   \   000048   85..83       MOV     DPH,?XSP + 1
   \   00004B   AA82         MOV     R2,DPL
   \   00004D   AB83         MOV     R3,DPH
   \   00004F   12....       LCALL   ??SSP_UpdateNwkKey?relay
    377                      SSP_SwitchNwkKey( 0 );
   \   000052                ; Setup parameters for call to function SSP_SwitchNwkKey
   \   000052   7900         MOV     R1,#0x0
   \   000054   12....       LCALL   ??SSP_SwitchNwkKey?relay
    378          
    379                      // clear local copy of key
    380                      osal_memset(zgPreConfigKey, 0x00, SEC_KEY_LEN);
   \   000057                ; Setup parameters for call to function osal_memset
   \   000057   7C10         MOV     R4,#0x10
   \   000059   7D00         MOV     R5,#0x0
   \   00005B   7900         MOV     R1,#0x0
   \   00005D   85..82       MOV     DPL,?XSP + 0
   \   000060   85..83       MOV     DPH,?XSP + 1
   \   000063   AA82         MOV     R2,DPL
   \   000065   AB83         MOV     R3,DPH
   \   000067   12....       LCALL   ??osal_memset?relay
    381                  }
    382                }
    383              }
    384          
    385              // clean the new devices list when Security module is initialized
    386              if ( ZDApp_NewDeviceList != NULL )
   \                     ??ZDApp_SecInit_0:
   \   00006A   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00006D   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_59:
   \   000070   6020         JZ      ??ZDApp_SecInit_1
    387              {
    388                ZDAppNewDevice_t *pNewDeviceNext;
    389          
    390                while ( ZDApp_NewDeviceList )
    391                {
    392                  pNewDeviceNext = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \                     ??ZDApp_SecInit_2:
   \   000072   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   000075   FE           MOV     R6,A
   \   000076   A3           INC     DPTR
   \   000077   E0           MOVX    A,@DPTR
   \   000078   FF           MOV     R7,A
    393                  osal_mem_free( ZDApp_NewDeviceList );
   \   000079                ; Setup parameters for call to function osal_mem_free
   \   000079   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00007C   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   00007F   12....       LCALL   ??osal_mem_free?relay
    394                  ZDApp_NewDeviceList = pNewDeviceNext;
   \   000082   EE           MOV     A,R6
   \   000083   F8           MOV     R0,A
   \   000084   EF           MOV     A,R7
   \   000085   F9           MOV     R1,A
   \   000086   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000089   E8           MOV     A,R0
   \   00008A   F0           MOVX    @DPTR,A
   \   00008B   A3           INC     DPTR
   \   00008C   E9           MOV     A,R1
   \   00008D   F0           MOVX    @DPTR,A
    395                }
   \   00008E   E8           MOV     A,R0
   \   00008F   49           ORL     A,R1
   \   000090   70E0         JNZ     ??ZDApp_SecInit_2
    396              }
    397            }
    398          }
   \                     ??ZDApp_SecInit_1:
   \   000092   7410         MOV     A,#0x10
   \   000094   02....       LJMP    ??Subroutine48_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000003                REQUIRE ??Subroutine35_0
   \   000003                ; // Fall through to label ??Subroutine35_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine35_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine42_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine43_0:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_79:
   \   000003   E8           MOV     A,R0
   \   000004   49           ORL     A,R1
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine48_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   02....       LJMP    ??Subroutine44_0 & 0xFFFF
    399          
    400          /*********************************************************************
    401           * @fn      ZDApp_event_loop()
    402           *
    403           * @brief   Main event loop for Zigbee device objects task. This function
    404           *          should be called at periodic intervals.
    405           *
    406           * @param   task_id - Task ID
    407           * @param   events  - Bitmap of events
    408           *
    409           * @return  none
    410           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    411          UINT16 ZDApp_event_loop( uint8 task_id, UINT16 events )
   \                     ZDApp_event_loop:
    412          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 2,R1
   \   000007   EA           MOV     A,R2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   FF           MOV     R7,A
    413            uint8 *msg_ptr;
    414          
    415            if ( events & SYS_EVENT_MSG )
   \   00000B   5480         ANL     A,#0x80
   \   00000D   7033         JNZ     ??ZDApp_event_loop_0
    416            {
    417              while ( (msg_ptr = osal_msg_receive( ZDAppTaskID )) )
    418              {
    419                ZDApp_ProcessOSALMsg( (osal_event_hdr_t *)msg_ptr );
    420          
    421                // Release the memory
    422                osal_msg_deallocate( msg_ptr );
    423              }
    424          
    425              // Return unprocessed events
    426              return (events ^ SYS_EVENT_MSG);
    427            }
    428          
    429            if ( events & ZDO_NETWORK_INIT )
   \   00000F   EE           MOV     A,R6
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5047         JNC     ??ZDApp_event_loop_1
    430            {
    431              // Initialize apps and start the network
    432              devState = DEV_INIT;
   \   000014   90....       MOV     DPTR,#devState
   \   000017   7401         MOV     A,#0x1
   \   000019   12....       LCALL   ??Subroutine37_0 & 0xFFFF
    433              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_40:
   \   00001C   12....       LCALL   ??osal_set_event?relay
    434          
    435              ZDO_StartDevice( (uint8)ZDO_Config_Node_Descriptor.LogicalType, devStartMode,
    436                               DEFAULT_BEACON_ORDER, DEFAULT_SUPERFRAME_ORDER );
   \   00001F                ; Setup parameters for call to function ZDO_StartDevice
   \   00001F   7C0F         MOV     R4,#0xf
   \   000021   7B0F         MOV     R3,#0xf
   \   000023   90....       MOV     DPTR,#devStartMode
   \   000026   E0           MOVX    A,@DPTR
   \   000027   FA           MOV     R2,A
   \   000028   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   5407         ANL     A,#0x7
   \   00002E   F9           MOV     R1,A
   \   00002F   12....       LCALL   ??ZDO_StartDevice?relay
    437          
    438              // Return unprocessed events
    439              return (events ^ ZDO_NETWORK_INIT);
   \   000032   EE           MOV     A,R6
   \   000033   6401         XRL     A,#0x1
   \   000035   02....       LJMP    ??ZDApp_event_loop_2 & 0xFFFF
    440            }
   \                     ??ZDApp_event_loop_3:
   \   000038                ; Setup parameters for call to function ZDApp_ProcessOSALMsg
   \   000038   12....       LCALL   ??ZDApp_ProcessOSALMsg?relay
   \   00003B                ; Setup parameters for call to function osal_msg_deallocate
   \   00003B   AA..         MOV     R2,?V0 + 0
   \   00003D   AB..         MOV     R3,?V0 + 1
   \   00003F   12....       LCALL   ??osal_msg_deallocate?relay
   \                     ??ZDApp_event_loop_0:
   \   000042                ; Setup parameters for call to function osal_msg_receive
   \   000042   90....       MOV     DPTR,#ZDAppTaskID
   \   000045   E0           MOVX    A,@DPTR
   \   000046   F9           MOV     R1,A
   \   000047   12....       LCALL   ??osal_msg_receive?relay
   \   00004A   8A..         MOV     ?V0 + 0,R2
   \   00004C   8B..         MOV     ?V0 + 1,R3
   \   00004E   EA           MOV     A,R2
   \   00004F   45..         ORL     A,?V0 + 1
   \   000051   70E5         JNZ     ??ZDApp_event_loop_3
   \   000053   EE           MOV     A,R6
   \   000054   FA           MOV     R2,A
   \   000055   EF           MOV     A,R7
   \   000056   6480         XRL     A,#0x80
   \   000058   02....       LJMP    ??ZDApp_event_loop_4 & 0xFFFF
    441          
    442            if ( ZSTACK_ROUTER_BUILD )
    443            {
    444              if ( events & ZDO_NETWORK_START )
   \                     ??ZDApp_event_loop_1:
   \   00005B   5402         ANL     A,#0x2
   \   00005D   6008         JZ      ??ZDApp_event_loop_5
    445              {
    446                ZDApp_NetworkStartEvt();
   \   00005F                ; Setup parameters for call to function ZDApp_NetworkStartEvt
   \   00005F   12....       LCALL   ??ZDApp_NetworkStartEvt?relay
    447          
    448                // Return unprocessed events
    449                return (events ^ ZDO_NETWORK_START);
   \   000062   EE           MOV     A,R6
   \   000063   6402         XRL     A,#0x2
   \   000065   805B         SJMP    ??ZDApp_event_loop_2
    450              }
    451          
    452              if ( events & ZDO_ROUTER_START )
   \                     ??ZDApp_event_loop_5:
   \   000067   EE           MOV     A,R6
   \   000068   5420         ANL     A,#0x20
   \   00006A   6027         JZ      ??ZDApp_event_loop_6
    453              {
    454                if ( nwkStatus == ZSuccess )
   \   00006C   90....       MOV     DPTR,#nwkStatus
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   7010         JNZ     ??ZDApp_event_loop_7
    455                {
    456                  if ( devState == DEV_END_DEVICE )
   \   000072   90....       MOV     DPTR,#devState
   \   000075   E0           MOVX    A,@DPTR
   \   000076   6406         XRL     A,#0x6
   \   000078   7003         JNZ     ??ZDApp_event_loop_8
    457                    devState = DEV_ROUTER;
   \   00007A   7407         MOV     A,#0x7
   \   00007C   F0           MOVX    @DPTR,A
    458          
    459                  osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_event_loop_8:
   \   00007D                ; Setup parameters for call to function osal_pwrmgr_device
   \   00007D   7900         MOV     R1,#0x0
   \   00007F   12....       LCALL   ??osal_pwrmgr_device?relay
    460                }
    461                else
    462                {
    463                  // remain as end device
    464                }
    465                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??ZDApp_event_loop_7:
   \   000082                ; Setup parameters for call to function osal_set_event
   \   000082   7A10         MOV     R2,#0x10
   \   000084   7B00         MOV     R3,#0x0
   \   000086   90....       MOV     DPTR,#ZDAppTaskID
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   F9           MOV     R1,A
   \   00008B   12....       LCALL   ??osal_set_event?relay
    466          
    467                // Return unprocessed events
    468                return (events ^ ZDO_ROUTER_START);
   \   00008E   EE           MOV     A,R6
   \   00008F   6420         XRL     A,#0x20
   \   000091   802F         SJMP    ??ZDApp_event_loop_2
    469              }
    470            }
    471          
    472            if ( events & ZDO_STATE_CHANGE_EVT )
   \                     ??ZDApp_event_loop_6:
   \   000093   EE           MOV     A,R6
   \   000094   5410         ANL     A,#0x10
   \   000096   602E         JZ      ??ZDApp_event_loop_9
    473            {
    474              ZDO_UpdateNwkStatus( devState );
   \   000098                ; Setup parameters for call to function ZDO_UpdateNwkStatus
   \   000098   90....       MOV     DPTR,#devState
   \   00009B   E0           MOVX    A,@DPTR
   \   00009C   F9           MOV     R1,A
   \   00009D   12....       LCALL   ??ZDO_UpdateNwkStatus?relay
    475          
    476              // At start up, do one MTO route discovery if the device is a concentrator
    477              if ( zgConcentratorEnable == TRUE )
   \   0000A0   90....       MOV     DPTR,#zgConcentratorEnable
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   6401         XRL     A,#0x1
   \   0000A6   7017         JNZ     ??ZDApp_event_loop_10
    478              {
    479                // Start next event
    480                osal_start_timerEx( NWK_TaskID, NWK_MTO_RTG_REQ_EVT, 100 );
   \   0000A8                ; Setup parameters for call to function osal_start_timerEx
   \   0000A8   90....       MOV     DPTR,#__Constant_64
   \   0000AB   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000AE   7A00         MOV     R2,#0x0
   \   0000B0   7B08         MOV     R3,#0x8
   \   0000B2   90....       MOV     DPTR,#NWK_TaskID
   \   0000B5   E0           MOVX    A,@DPTR
   \   0000B6   F9           MOV     R1,A
   \   0000B7   12....       LCALL   ??osal_start_timerEx?relay
   \   0000BA   7404         MOV     A,#0x4
   \   0000BC   12....       LCALL   ?DEALLOC_XSTACK8
    481              }
    482          
    483              // Return unprocessed events
    484              return (events ^ ZDO_STATE_CHANGE_EVT);
   \                     ??ZDApp_event_loop_10:
   \   0000BF   EE           MOV     A,R6
   \   0000C0   6410         XRL     A,#0x10
   \                     ??ZDApp_event_loop_2:
   \   0000C2   FA           MOV     R2,A
   \   0000C3   EF           MOV     A,R7
   \   0000C4   8036         SJMP    ??ZDApp_event_loop_4
    485            }
    486          
    487            if ( events & ZDO_COMMAND_CNF )
   \                     ??ZDApp_event_loop_9:
   \   0000C6   EE           MOV     A,R6
   \   0000C7   5408         ANL     A,#0x8
   \   0000C9   6006         JZ      ??ZDApp_event_loop_11
    488            {
    489              // User defined logic
    490          
    491              // Return unprocessed events
    492              return (events ^ ZDO_COMMAND_CNF);
   \   0000CB   EE           MOV     A,R6
   \   0000CC   6408         XRL     A,#0x8
   \   0000CE   FA           MOV     R2,A
   \   0000CF   8037         SJMP    ??ZDApp_event_loop_12
    493            }
    494          
    495            if ( events & ZDO_NWK_UPDATE_NV )
   \                     ??ZDApp_event_loop_11:
   \   0000D1   EF           MOV     A,R7
   \   0000D2   5401         ANL     A,#0x1
   \   0000D4   600A         JZ      ??ZDApp_event_loop_13
    496            {
    497              ZDApp_SaveNetworkStateEvt();
   \   0000D6                ; Setup parameters for call to function ZDApp_SaveNetworkStateEvt
   \   0000D6   12....       LCALL   ??ZDApp_SaveNetworkStateEvt?relay
    498          
    499              // Return unprocessed events
    500              return (events ^ ZDO_NWK_UPDATE_NV);
   \   0000D9   EE           MOV     A,R6
   \   0000DA   FA           MOV     R2,A
   \   0000DB   EF           MOV     A,R7
   \   0000DC   6401         XRL     A,#0x1
   \   0000DE   801C         SJMP    ??ZDApp_event_loop_4
    501            }
    502          
    503            if ( events & ZDO_DEVICE_RESET )
   \                     ??ZDApp_event_loop_13:
   \   0000E0   EE           MOV     A,R6
   \   0000E1   5404         ANL     A,#0x4
   \   0000E3   600A         JZ      ??ZDApp_event_loop_14
    504            {
    505          #ifdef ZBA_FALLBACK_NWKKEY
    506              if ( devState == DEV_END_DEVICE_UNAUTH )
    507              {
    508                ZDSecMgrFallbackNwkKey();
    509              }
    510              else
    511          #endif
    512              {
    513                // Set the NV startup option to force a "new" join.
    514                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   0000E5                ; Setup parameters for call to function zgWriteStartupOptions
   \   0000E5   7A02         MOV     R2,#0x2
   \   0000E7   79FF         MOV     R1,#-0x1
   \   0000E9   12....       LCALL   ??zgWriteStartupOptions?relay
    515          
    516                // The device has been in the UNAUTH state, so reset
    517                // Note: there will be no return from this call
    518                SystemResetSoft();
   \   0000EC                ; Setup parameters for call to function Onboard_soft_reset
   \   0000EC   12....       LCALL   Onboard_soft_reset & 0xFFFF
    519              }
    520            }
    521          
    522          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
    523            if ( events & ZDO_PENDING_BIND_REQ_EVT )
   \                     ??ZDApp_event_loop_14:
   \   0000EF   EF           MOV     A,R7
   \   0000F0   5410         ANL     A,#0x10
   \   0000F2   600B         JZ      ??ZDApp_event_loop_15
    524            {
    525          #if defined ( REFLECTOR )
    526              ZDApp_AgeOutPendingBindEntry();
   \   0000F4                ; Setup parameters for call to function ZDApp_AgeOutPendingBindEntry
   \   0000F4   12....       LCALL   ??ZDApp_AgeOutPendingBindEntry?relay
    527          #endif
    528              // Return unprocessed events
    529              return (events ^ ZDO_PENDING_BIND_REQ_EVT);
   \   0000F7   EE           MOV     A,R6
   \   0000F8   FA           MOV     R2,A
   \   0000F9   EF           MOV     A,R7
   \   0000FA   6410         XRL     A,#0x10
   \                     ??ZDApp_event_loop_4:
   \   0000FC   FB           MOV     R3,A
   \   0000FD   8009         SJMP    ??ZDApp_event_loop_12
    530            }
    531          #endif
    532          
    533            if ( ZG_SECURE_ENABLED )
    534            {
    535              return ( ZDApp_ProcessSecEvent( task_id, events ) );
   \                     ??ZDApp_event_loop_15:
   \   0000FF                ; Setup parameters for call to function ZDApp_ProcessSecEvent
   \   0000FF   EE           MOV     A,R6
   \   000100   FA           MOV     R2,A
   \   000101   EF           MOV     A,R7
   \   000102   FB           MOV     R3,A
   \   000103   A9..         MOV     R1,?V0 + 2
   \   000105   12....       LCALL   ??ZDApp_ProcessSecEvent?relay
    536            }
   \                     ??ZDApp_event_loop_12:
   \   000108   80..         SJMP    ??Subroutine36_0
    537            else
    538            {
    539              // Discard or make more handlers
    540              return 0;
    541            }
    542          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine36_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine37_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001                ; Setup parameters for call to function osal_set_event
   \   000001   7A10         MOV     R2,#0x10
   \   000003   7B00         MOV     R3,#0x0
   \   000005   90....       MOV     DPTR,#ZDAppTaskID
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F9           MOV     R1,A
   \   00000A   22           RET
    543          
    544          /*********************************************************************
    545           * @fn      ZDApp_ProcessSecEvent()
    546           *
    547           * @brief   Process incoming security events.
    548           *
    549           * @param   task_id - Task ID
    550           * @param   events  - Bitmap of events
    551           *
    552           * @return  none
    553           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    554          UINT16 ZDApp_ProcessSecEvent( uint8 task_id, UINT16 events )
   \                     ZDApp_ProcessSecEvent:
    555          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    556            (void)task_id;  // Intentionally unreferenced parameter
    557          
    558            if ( ZSTACK_ROUTER_BUILD )
    559            {
    560              if ( events & ZDO_NEW_DEVICE )
   \   000009   EE           MOV     A,R6
   \   00000A   5440         ANL     A,#0x40
   \   00000C   7003         JNZ     $+5
   \   00000E   02....       LJMP    ??ZDApp_ProcessSecEvent_0 & 0xFFFF
    561              {
    562                // process the new device event
    563                if ( ZDApp_NewDeviceList )
   \   000011   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000014   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   000017   607E         JZ      ??ZDApp_ProcessSecEvent_1
    564                {
    565                  ZDAppNewDevice_t *pNewDevice;
    566                  uint16 timeDelta;
    567          
    568                  (void) ZDSecMgrNewDeviceEvent( ZDApp_NewDeviceList->shortAddr );
   \   000019                ; Setup parameters for call to function ZDSecMgrNewDeviceEvent
   \   000019   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   000021   12....       LCALL   ??ZDSecMgrNewDeviceEvent?relay
    569          
    570                  pNewDevice = (ZDAppNewDevice_t *) ZDApp_NewDeviceList->next;
   \   000024   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   000027   F5..         MOV     ?V0 + 0,A
   \   000029   A3           INC     DPTR
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   F5..         MOV     ?V0 + 1,A
    571                  osal_mem_free( ZDApp_NewDeviceList );
   \   00002D                ; Setup parameters for call to function osal_mem_free
   \   00002D   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000030   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000033   12....       LCALL   ??osal_mem_free?relay
    572                  ZDApp_NewDeviceList = pNewDevice;
   \   000036   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000039   12....       LCALL   ??Subroutine47_0 & 0xFFFF
    573          
    574                  if ( pNewDevice )
   \                     ??CrossCallReturnLabel_86:
   \   00003C   E5..         MOV     A,?V0 + 0
   \   00003E   45..         ORL     A,?V0 + 1
   \   000040   6055         JZ      ??ZDApp_ProcessSecEvent_1
    575                  {
    576                    timeDelta = pNewDevice->timeDelta;
   \   000042   85..82       MOV     DPL,?V0 + 0
   \   000045   85..83       MOV     DPH,?V0 + 1
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F5..         MOV     ?V0 + 4,A
   \   00004F   A3           INC     DPTR
   \   000050   E0           MOVX    A,@DPTR
   \   000051   F5..         MOV     ?V0 + 5,A
    577                    pNewDevice = pNewDevice->next;
   \   000053   8014         SJMP    ??ZDApp_ProcessSecEvent_2
    578          
    579                    while ( pNewDevice )
    580                    {
    581                      pNewDevice->timeDelta -= timeDelta;
   \                     ??ZDApp_ProcessSecEvent_3:
   \   000055   85..82       MOV     DPL,?V0 + 0
   \   000058   85..83       MOV     DPH,?V0 + 1
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   A3           INC     DPTR
   \   00005E   A3           INC     DPTR
   \   00005F   C3           CLR     C
   \   000060   E0           MOVX    A,@DPTR
   \   000061   95..         SUBB    A,?V0 + 4
   \   000063   F0           MOVX    @DPTR,A
   \   000064   A3           INC     DPTR
   \   000065   E0           MOVX    A,@DPTR
   \   000066   95..         SUBB    A,?V0 + 5
   \   000068   F0           MOVX    @DPTR,A
    582                      pNewDevice = pNewDevice->next;
   \                     ??ZDApp_ProcessSecEvent_2:
   \   000069   85..82       MOV     DPL,?V0 + 0
   \   00006C   85..83       MOV     DPH,?V0 + 1
   \   00006F   E0           MOVX    A,@DPTR
   \   000070   F5..         MOV     ?V0 + 0,A
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F5..         MOV     ?V0 + 1,A
    583                    }
   \   000076   E5..         MOV     A,?V0 + 0
   \   000078   45..         ORL     A,?V0 + 1
   \   00007A   70D9         JNZ     ??ZDApp_ProcessSecEvent_3
    584          
    585                    osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, timeDelta );
   \   00007C                ; Setup parameters for call to function osal_start_timerEx
   \   00007C   E4           CLR     A
   \   00007D   F5..         MOV     ?V0 + 6,A
   \   00007F   F5..         MOV     ?V0 + 7,A
   \   000081   78..         MOV     R0,#?V0 + 4
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000086   7A40         MOV     R2,#0x40
   \   000088   7B00         MOV     R3,#0x0
   \   00008A   90....       MOV     DPTR,#ZDAppTaskID
   \   00008D   E0           MOVX    A,@DPTR
   \   00008E   F9           MOV     R1,A
   \   00008F   12....       LCALL   ??osal_start_timerEx?relay
   \   000092   7404         MOV     A,#0x4
   \   000094   12....       LCALL   ?DEALLOC_XSTACK8
    586                  }
    587                }
    588          
    589                // Return unprocessed events
    590                return (events ^ ZDO_NEW_DEVICE);
   \                     ??ZDApp_ProcessSecEvent_1:
   \   000097   EE           MOV     A,R6
   \   000098   6440         XRL     A,#0x40
   \   00009A   800B         SJMP    ??ZDApp_ProcessSecEvent_4
    591              }
    592            }
    593          
    594            if ( events & ZDO_DEVICE_AUTH )
   \                     ??ZDApp_ProcessSecEvent_0:
   \   00009C   EE           MOV     A,R6
   \   00009D   5480         ANL     A,#0x80
   \   00009F   600A         JZ      ??ZDApp_ProcessSecEvent_5
    595            {
    596              ZDApp_DeviceAuthEvt();
   \   0000A1                ; Setup parameters for call to function ZDApp_DeviceAuthEvt
   \   0000A1   12....       LCALL   ??ZDApp_DeviceAuthEvt?relay
    597          
    598              // Return unprocessed events
    599              return (events ^ ZDO_DEVICE_AUTH);
   \   0000A4   EE           MOV     A,R6
   \   0000A5   6480         XRL     A,#0x80
   \                     ??ZDApp_ProcessSecEvent_4:
   \   0000A7   FA           MOV     R2,A
   \   0000A8   EF           MOV     A,R7
   \   0000A9   802B         SJMP    ??ZDApp_ProcessSecEvent_6
    600            }
    601          
    602            if ( events & ZDO_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_5:
   \   0000AB   EF           MOV     A,R7
   \   0000AC   5402         ANL     A,#0x2
   \   0000AE   600A         JZ      ??ZDApp_ProcessSecEvent_7
    603            {
    604              ZDApp_SaveNwkKey();
   \   0000B0                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   0000B0   12....       LCALL   ??ZDApp_SaveNwkKey?relay
    605          
    606              // Return unprocessed events
    607              return (events ^ ZDO_FRAMECOUNTER_CHANGE);
   \   0000B3   EE           MOV     A,R6
   \   0000B4   FA           MOV     R2,A
   \   0000B5   EF           MOV     A,R7
   \   0000B6   6402         XRL     A,#0x2
   \   0000B8   801C         SJMP    ??ZDApp_ProcessSecEvent_6
    608            }
    609          
    610            if ( events & ZDO_APS_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_7:
   \   0000BA   EF           MOV     A,R7
   \   0000BB   5408         ANL     A,#0x8
   \   0000BD   600A         JZ      ??ZDApp_ProcessSecEvent_8
    611            {
    612          #if defined (NV_RESTORE)
    613              ZDSecMgrSaveApsLinkKey();
   \   0000BF                ; Setup parameters for call to function ZDSecMgrSaveApsLinkKey
   \   0000BF   12....       LCALL   ??ZDSecMgrSaveApsLinkKey?relay
    614          #endif // (NV_RESTORE)
    615          
    616              // Return unprocessed events
    617              return (events ^ ZDO_APS_FRAMECOUNTER_CHANGE);
   \   0000C2   EE           MOV     A,R6
   \   0000C3   FA           MOV     R2,A
   \   0000C4   EF           MOV     A,R7
   \   0000C5   6408         XRL     A,#0x8
   \   0000C7   800D         SJMP    ??ZDApp_ProcessSecEvent_6
    618            }
    619          
    620            if ( events & ZDO_TCLK_FRAMECOUNTER_CHANGE )
   \                     ??ZDApp_ProcessSecEvent_8:
   \   0000C9   EF           MOV     A,R7
   \   0000CA   5404         ANL     A,#0x4
   \   0000CC   600B         JZ      ??ZDApp_ProcessSecEvent_9
    621            {
    622              ZDSecMgrSaveTCLinkKey();
   \   0000CE                ; Setup parameters for call to function ZDSecMgrSaveTCLinkKey
   \   0000CE   12....       LCALL   ??ZDSecMgrSaveTCLinkKey?relay
    623          
    624              // Return unprocessed events
    625              return (events ^ ZDO_TCLK_FRAMECOUNTER_CHANGE);
   \   0000D1   EE           MOV     A,R6
   \   0000D2   FA           MOV     R2,A
   \   0000D3   EF           MOV     A,R7
   \   0000D4   6404         XRL     A,#0x4
   \                     ??ZDApp_ProcessSecEvent_6:
   \   0000D6   FB           MOV     R3,A
   \   0000D7   8004         SJMP    ??ZDApp_ProcessSecEvent_10
    626            }
    627          
    628            // Discard or make more handlers
    629            return 0;
   \                     ??ZDApp_ProcessSecEvent_9:
   \   0000D9   7A00         MOV     R2,#0x0
   \   0000DB   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessSecEvent_10:
   \   0000DD                REQUIRE ?Subroutine2
   \   0000DD                ; // Fall through to label ?Subroutine2
    630          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine47_0:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   F0           MOVX    @DPTR,A
   \   000003   A3           INC     DPTR
   \   000004   E5..         MOV     A,?V0 + 1
   \   000006   F0           MOVX    @DPTR,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine49_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F583         MOV     DPH,A
   \   000003   8882         MOV     DPL,R0
   \   000005   22           RET
    631          
    632          /*********************************************************************
    633           * Application Functions
    634           */
    635          
    636          /*********************************************************************
    637           * @fn      ZDOInitDevice
    638           *
    639           * @brief   Start the device in the network.  This function will read
    640           *   ZCD_NV_STARTUP_OPTION (NV item) to determine whether or not to
    641           *   restore the network state of the device.
    642           *
    643           * @param   startDelay - timeDelay to start device (in milliseconds).
    644           *                       There is a jitter added to this delay:
    645           *                       ((NWK_START_DELAY + startDelay)
    646           *                       + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK))
    647           *                       When startDelay is set to ZDO_INIT_HOLD_NWK_START
    648           *                       this function will hold the network init. Application
    649           *                       can start the device.
    650           *
    651           * NOTE:    If the application would like to force a "new" join, the
    652           *          application should set the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    653           *          bit in the ZCD_NV_STARTUP_OPTION NV item before calling
    654           *          this function. "new" join means to not restore the network
    655           *          state of the device. Use zgWriteStartupOptions() to set these
    656           *          options.
    657           *
    658           * @return
    659           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    660           *          restored.
    661           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was initialized.
    662           *          This could mean that ZCD_NV_STARTUP_OPTION said to not restore, or
    663           *          it could mean that there was no network state to restore.
    664           *    ZDO_INITDEV_LEAVE_NOT_STARTED - Before the reset, a network leave was issued
    665           *          with the rejoin option set to TRUE.  So, the device was not
    666           *          started in the network (one time only).  The next time this
    667           *          function is called it will start.
    668           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    669          uint8 ZDOInitDevice( uint16 startDelay )
   \                     ZDOInitDevice:
    670          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine12 & 0xFFFF
    671            uint8 networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \                     ??CrossCallReturnLabel_100:
   \   00000D   75..01       MOV     ?V0 + 0,#0x1
    672            uint16 extendedDelay = 0;
   \   000010   7E00         MOV     R6,#0x0
   \   000012   7F00         MOV     R7,#0x0
    673          
    674            if ( devState == DEV_HOLD )
   \   000014   90....       MOV     DPTR,#devState
   \   000017   E0           MOVX    A,@DPTR
   \   000018   7005         JNZ     ??ZDOInitDevice_0
    675            {
    676              // Initialize the RAM items table, in case an NV item has been updated.
    677              zgInitItems( FALSE );
   \   00001A                ; Setup parameters for call to function zgInitItems
   \   00001A   7900         MOV     R1,#0x0
   \   00001C   12....       LCALL   ??zgInitItems?relay
    678            }
    679          
    680            ZDConfig_InitDescriptors();
   \                     ??ZDOInitDevice_0:
   \   00001F                ; Setup parameters for call to function ZDConfig_InitDescriptors
   \   00001F   12....       LCALL   ??ZDConfig_InitDescriptors?relay
    681            //devtag.071807.todo - fix this temporary solution
    682            _NIB.CapabilityFlags = ZDO_Config_Node_Descriptor.CapabilityFlags;
   \   000022   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000025   E0           MOVX    A,@DPTR
   \   000026   90....       MOV     DPTR,#_NIB + 14
   \   000029   F0           MOVX    @DPTR,A
    683          
    684          #if defined ( NV_RESTORE )
    685            // Hold down the SW_BYPASS_NV key (defined in OnBoard.h)
    686            // while booting to skip past NV Restore.
    687            if ( zdappHoldKeys == SW_BYPASS_NV )
   \   00002A   90....       MOV     DPTR,#zdappHoldKeys
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   6404         XRL     A,#0x4
   \   000030   707C         JNZ     ??ZDOInitDevice_1
    688            {
    689              zdappHoldKeys = 0;   // Only once
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
    690              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
    691            }
    692            else
    693            {
    694              // Determine if NV should be restored
    695              networkStateNV = ZDApp_ReadNetworkRestoreState();
    696            }
    697          
    698            if ( networkStateNV == ZDO_INITDEV_RESTORED_NETWORK_STATE )
    699            {
    700              networkStateNV = ZDApp_RestoreNetworkState();
    701            }
    702            else
    703            {
    704              // Wipe out the network state in NV
    705              NLME_InitNV();
   \                     ??ZDOInitDevice_2:
   \   000034                ; Setup parameters for call to function NLME_InitNV
   \   000034   12....       LCALL   ??NLME_InitNV?relay
    706              NLME_SetDefaultNV();
   \   000037                ; Setup parameters for call to function NLME_SetDefaultNV
   \   000037   12....       LCALL   ??NLME_SetDefaultNV?relay
    707              // clear NWK key values
    708              ZDSecMgrClearNVKeyValues();
   \   00003A                ; Setup parameters for call to function ZDSecMgrClearNVKeyValues
   \   00003A   12....       LCALL   ??ZDSecMgrClearNVKeyValues?relay
    709            }
    710          #endif
    711          
    712            if ( networkStateNV == ZDO_INITDEV_NEW_NETWORK_STATE )
   \                     ??ZDOInitDevice_3:
   \   00003D   7401         MOV     A,#0x1
   \   00003F   65..         XRL     A,?V0 + 0
   \   000041   7020         JNZ     ??ZDOInitDevice_4
    713            {
    714              ZDAppDetermineDeviceType();
   \   000043                ; Setup parameters for call to function ZDAppDetermineDeviceType
   \   000043   12....       LCALL   ??ZDAppDetermineDeviceType?relay
    715          
    716              // Only delay if joining network - not restoring network state
    717              extendedDelay = (uint16)((NWK_START_DELAY + startDelay)
    718                        + (osal_rand() & EXTENDED_JOINING_RANDOM_MASK));
   \   000046                ; Setup parameters for call to function osal_rand
   \   000046   12....       LCALL   ??osal_rand?relay
   \   000049   85..82       MOV     DPL,?XSP + 0
   \   00004C   85..83       MOV     DPH,?XSP + 1
   \   00004F   EA           MOV     A,R2
   \   000050   547F         ANL     A,#0x7f
   \   000052   F8           MOV     R0,A
   \   000053   E0           MOVX    A,@DPTR
   \   000054   28           ADD     A,R0
   \   000055   F8           MOV     R0,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   3400         ADDC    A,#0x0
   \   00005A   F9           MOV     R1,A
   \   00005B   E8           MOV     A,R0
   \   00005C   2464         ADD     A,#0x64
   \   00005E   FE           MOV     R6,A
   \   00005F   E9           MOV     A,R1
   \   000060   3400         ADDC    A,#0x0
   \   000062   FF           MOV     R7,A
    719            }
    720          
    721            // Initialize the security for type of device
    722            ZDApp_SecInit( networkStateNV );
   \                     ??ZDOInitDevice_4:
   \   000063                ; Setup parameters for call to function ZDApp_SecInit
   \   000063   A9..         MOV     R1,?V0 + 0
   \   000065   12....       LCALL   ??ZDApp_SecInit?relay
    723          
    724            if( ZDO_INIT_HOLD_NWK_START != startDelay )
   \   000068   85..82       MOV     DPL,?XSP + 0
   \   00006B   85..83       MOV     DPH,?XSP + 1
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F4           CPL     A
   \   000070   7003         JNZ     ??ZDOInitDevice_5
   \   000072   A3           INC     DPTR
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F4           CPL     A
   \                     ??ZDOInitDevice_5:
   \   000075   6052         JZ      ??ZDOInitDevice_6
    725            {
    726              devState = DEV_INIT;    // Remove the Hold state
   \   000077   90....       MOV     DPTR,#devState
   \   00007A   7401         MOV     A,#0x1
   \   00007C   F0           MOVX    @DPTR,A
    727          
    728              // Initialize leave control logic
    729              ZDApp_LeaveCtrlInit();
   \   00007D                ; Setup parameters for call to function ZDApp_LeaveCtrlInit
   \   00007D   12....       LCALL   ??ZDApp_LeaveCtrlInit?relay
    730          
    731              // Check leave control reset settings
    732              ZDApp_LeaveCtrlStartup( &devState, &startDelay );
   \   000080                ; Setup parameters for call to function ZDApp_LeaveCtrlStartup
   \   000080   85..82       MOV     DPL,?XSP + 0
   \   000083   85..83       MOV     DPH,?XSP + 1
   \   000086   AC82         MOV     R4,DPL
   \   000088   AD83         MOV     R5,DPH
   \   00008A   7A..         MOV     R2,#devState & 0xff
   \   00008C   7B..         MOV     R3,#(devState >> 8) & 0xff
   \   00008E   12....       LCALL   ??ZDApp_LeaveCtrlStartup?relay
    733          
    734              // Leave may make the hold state come back
    735              if ( devState == DEV_HOLD )
   \   000091   90....       MOV     DPTR,#devState
   \   000094   E0           MOVX    A,@DPTR
   \   000095   702B         JNZ     ??ZDOInitDevice_7
    736              {
    737                // Set the NV startup option to force a "new" join.
    738                zgWriteStartupOptions( ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000097                ; Setup parameters for call to function zgWriteStartupOptions
   \   000097   7A02         MOV     R2,#0x2
   \   000099   79FF         MOV     R1,#-0x1
   \   00009B   12....       LCALL   ??zgWriteStartupOptions?relay
    739          
    740                // Notify the applications
    741                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00009E                ; Setup parameters for call to function osal_set_event
   \   00009E   7A10         MOV     R2,#0x10
   \   0000A0   7B00         MOV     R3,#0x0
   \   0000A2   90....       MOV     DPTR,#ZDAppTaskID
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   F9           MOV     R1,A
   \   0000A7   12....       LCALL   ??osal_set_event?relay
    742          
    743                return ( ZDO_INITDEV_LEAVE_NOT_STARTED );   // Don't join - (one time).
   \   0000AA   7902         MOV     R1,#0x2
   \   0000AC   8025         SJMP    ??ZDOInitDevice_8
    744              }
   \                     ??ZDOInitDevice_1:
   \   0000AE                ; Setup parameters for call to function ZDApp_ReadNetworkRestoreState
   \   0000AE   12....       LCALL   ??ZDApp_ReadNetworkRestoreState?relay
   \   0000B1   E9           MOV     A,R1
   \   0000B2   F5..         MOV     ?V0 + 0,A
   \   0000B4   6003         JZ      $+5
   \   0000B6   02....       LJMP    ??ZDOInitDevice_2 & 0xFFFF
   \   0000B9                ; Setup parameters for call to function ZDApp_RestoreNetworkState
   \   0000B9   12....       LCALL   ??ZDApp_RestoreNetworkState?relay
   \   0000BC   E9           MOV     A,R1
   \   0000BD   F5..         MOV     ?V0 + 0,A
   \   0000BF   02....       LJMP    ??ZDOInitDevice_3 & 0xFFFF
    745          
    746              // Trigger the network start
    747              ZDApp_NetworkInit( extendedDelay );
   \                     ??ZDOInitDevice_7:
   \   0000C2                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0000C2   EE           MOV     A,R6
   \   0000C3   FA           MOV     R2,A
   \   0000C4   EF           MOV     A,R7
   \   0000C5   FB           MOV     R3,A
   \   0000C6   12....       LCALL   ??ZDApp_NetworkInit?relay
    748            }
    749          
    750            // set broadcast address mask to support broadcast filtering
    751            NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \                     ??ZDOInitDevice_6:
   \   0000C9                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   0000C9   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   F9           MOV     R1,A
   \   0000CE   12....       LCALL   ??NLME_SetBroadcastFilter?relay
    752          
    753            return ( networkStateNV );
   \   0000D1   A9..         MOV     R1,?V0 + 0
   \                     ??ZDOInitDevice_8:
   \   0000D3   7402         MOV     A,#0x2
   \   0000D5   02....       LJMP    ?Subroutine3 & 0xFFFF
    754          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine50_0
   \   000006                ; // Fall through to label ??Subroutine50_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine50_0:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine51_0
   \   000003                ; // Fall through to label ??Subroutine51_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine51_0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    755          
    756          /*********************************************************************
    757           * @fn      ZDApp_ReadNetworkRestoreState
    758           *
    759           * @brief   Read the ZCD_NV_STARTUP_OPTION NV Item to state whether
    760           *          or not to restore the network state.
    761           *          If the read value has the ZCD_STARTOPT_DEFAULT_NETWORK_STATE
    762           *          bit set return the ZDO_INITDEV_NEW_NETWORK_STATE.
    763           *
    764           * @param   none
    765           *
    766           * @return  ZDO_INITDEV_NEW_NETWORK_STATE
    767           *          or ZDO_INITDEV_RESTORED_NETWORK_STATE based on whether or
    768           *          not ZCD_STARTOPT_DEFAULT_NETWORK_STATE bit is set in
    769           *          ZCD_NV_STARTUP_OPTION
    770           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    771          uint8 ZDApp_ReadNetworkRestoreState( void )
   \                     ZDApp_ReadNetworkRestoreState:
    772          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    773            uint8 networkStateNV = ZDO_INITDEV_RESTORED_NETWORK_STATE;
   \   000005   7E00         MOV     R6,#0x0
    774          
    775            // Look for the New Network State option.
    776            if ( zgReadStartupOptions() & ZCD_STARTOPT_DEFAULT_NETWORK_STATE )
   \   000007                ; Setup parameters for call to function zgReadStartupOptions
   \   000007   12....       LCALL   ??zgReadStartupOptions?relay
   \   00000A   E9           MOV     A,R1
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   5001         JNC     ??ZDApp_ReadNetworkRestoreState_0
    777            {
    778              networkStateNV = ZDO_INITDEV_NEW_NETWORK_STATE;
   \   00000F   0E           INC     R6
    779            }
    780          
    781            return ( networkStateNV );
   \                     ??ZDApp_ReadNetworkRestoreState_0:
   \   000010   EE           MOV     A,R6
   \   000011   F9           MOV     R1,A
   \   000012   02....       LJMP    ??Subroutine44_0 & 0xFFFF
    782          }
    783          
    784          /*********************************************************************
    785           * @fn      ZDAppDetermineDeviceType()
    786           *
    787           * @brief   Determines the type of device to start.
    788           *
    789           *          Looks at zgDeviceLogicalType and determines what type of
    790           *          device to start.  The types are:
    791           *            ZG_DEVICETYPE_COORDINATOR
    792           *            ZG_DEVICETYPE_ROUTER
    793           *            ZG_DEVICETYPE_ENDDEVICE
    794           *
    795           * @param   none
    796           *
    797           * @return  none
    798           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    799          void ZDAppDetermineDeviceType( void )
   \                     ZDAppDetermineDeviceType:
    800          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    801            if ( zgDeviceLogicalType == ZG_DEVICETYPE_COORDINATOR )
   \   000004   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000007   E0           MOVX    A,@DPTR
   \   000008   700E         JNZ     ??ZDAppDetermineDeviceType_0
    802            {
    803              devStartMode = MODE_HARD;     // Start as a coordinator
   \   00000A   90....       MOV     DPTR,#devStartMode
   \   00000D   7402         MOV     A,#0x2
   \   00000F   F0           MOVX    @DPTR,A
    804              ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000010   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000013   E0           MOVX    A,@DPTR
   \   000014   54F8         ANL     A,#0xf8
   \   000016   8031         SJMP    ??ZDAppDetermineDeviceType_1
    805            }
    806            else
    807            {
    808              if ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER  )
   \                     ??ZDAppDetermineDeviceType_0:
   \   000018   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   54F8         ANL     A,#0xf8
   \   00001E   F8           MOV     R0,A
   \   00001F   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000022   E0           MOVX    A,@DPTR
   \   000023   6401         XRL     A,#0x1
   \   000025   7004         JNZ     ??ZDAppDetermineDeviceType_2
    809                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_ROUTER;
   \   000027   7401         MOV     A,#0x1
   \   000029   8007         SJMP    ??ZDAppDetermineDeviceType_3
    810              else if ( zgDeviceLogicalType == ZG_DEVICETYPE_ENDDEVICE )
   \                     ??ZDAppDetermineDeviceType_2:
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   6402         XRL     A,#0x2
   \   00002E   7007         JNZ     ??ZDAppDetermineDeviceType_4
    811                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000030   7402         MOV     A,#0x2
   \                     ??ZDAppDetermineDeviceType_3:
   \   000032   48           ORL     A,R0
   \   000033   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000036   F0           MOVX    @DPTR,A
    812          
    813              // If AIB_apsUseExtendedPANID is set to a non-zero value by commissioning
    814              // The device shall do rejoin the network. Otherwise, do normal join
    815              if ( nwk_ExtPANIDValid( AIB_apsUseExtendedPANID ) == false )
   \                     ??ZDAppDetermineDeviceType_4:
   \   000037                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000037   7A..         MOV     R2,#AIB_apsUseExtendedPANID & 0xff
   \   000039   7B..         MOV     R3,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00003B   12....       LCALL   ??nwk_ExtPANIDValid?relay
   \   00003E   E9           MOV     A,R1
   \   00003F   90....       MOV     DPTR,#devStartMode
   \   000042   7003         JNZ     ??ZDAppDetermineDeviceType_5
    816              {
    817                devStartMode = MODE_JOIN;     // Assume joining
   \   000044   E4           CLR     A
   \   000045   8002         SJMP    ??ZDAppDetermineDeviceType_1
    818              }
    819              else
    820              {
    821                devStartMode = MODE_REJOIN;
   \                     ??ZDAppDetermineDeviceType_5:
   \   000047   7403         MOV     A,#0x3
   \                     ??ZDAppDetermineDeviceType_1:
   \   000049   F0           MOVX    @DPTR,A
    822              }
    823            }
    824          }
   \   00004A   02....       LJMP    ??Subroutine40_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine40_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    825          
    826          /*********************************************************************
    827           * @fn      ZDApp_NetworkStartEvt()
    828           *
    829           * @brief   Process the Network Start Event
    830           *
    831           * @param   none
    832           *
    833           * @return  none
    834           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    835          void ZDApp_NetworkStartEvt( void )
   \                     ZDApp_NetworkStartEvt:
    836          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    837            if ( nwkStatus == ZSuccess )
   \   000004   90....       MOV     DPTR,#nwkStatus
   \   000007   E0           MOVX    A,@DPTR
   \   000008   7012         JNZ     ??ZDApp_NetworkStartEvt_0
    838            {
    839              // Successfully started a ZigBee network
    840              if ( devState == DEV_COORD_STARTING )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6408         XRL     A,#0x8
   \   000010   7003         JNZ     ??ZDApp_NetworkStartEvt_1
    841              {
    842                devState = DEV_ZB_COORD;
   \   000012   7409         MOV     A,#0x9
   \   000014   F0           MOVX    @DPTR,A
    843              }
    844          
    845              osal_pwrmgr_device( PWRMGR_ALWAYS_ON );
   \                     ??ZDApp_NetworkStartEvt_1:
   \   000015                ; Setup parameters for call to function osal_pwrmgr_device
   \   000015   7900         MOV     R1,#0x0
   \   000017   12....       LCALL   ??osal_pwrmgr_device?relay
    846              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00001A                ; Setup parameters for call to function osal_set_event
   \   00001A   802B         SJMP    ??ZDApp_NetworkStartEvt_2
    847            }
    848            else
    849            {
    850              // Try again with a higher energy threshold
    851              if ( ( NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT ) < 0xff )
   \                     ??ZDApp_NetworkStartEvt_0:
   \   00001C                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   00001C   12....       LCALL   ??NLME_GetEnergyThreshold?relay
   \   00001F   E9           MOV     A,R1
   \   000020   2410         ADD     A,#0x10
   \   000022   F8           MOV     R0,A
   \   000023   E4           CLR     A
   \   000024   3400         ADDC    A,#0x0
   \   000026   F9           MOV     R1,A
   \   000027   E8           MOV     A,R0
   \   000028   94FF         SUBB    A,#-0x1
   \   00002A   E9           MOV     A,R1
   \   00002B   9400         SUBB    A,#0x0
   \   00002D   C3           CLR     C
   \   00002E   65D0         XRL     A,PSW
   \   000030   33           RLC     A
   \   000031   500E         JNC     ??ZDApp_NetworkStartEvt_3
    852              {
    853                NLME_SetEnergyThreshold( (uint8)(NLME_GetEnergyThreshold() + ENERGY_SCAN_INCREMENT) );
   \   000033                ; Setup parameters for call to function NLME_SetEnergyThreshold
   \   000033                ; Setup parameters for call to function NLME_GetEnergyThreshold
   \   000033   12....       LCALL   ??NLME_GetEnergyThreshold?relay
   \   000036   E9           MOV     A,R1
   \   000037   2410         ADD     A,#0x10
   \   000039   F9           MOV     R1,A
   \   00003A   12....       LCALL   ??NLME_SetEnergyThreshold?relay
    854                osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \   00003D                ; Setup parameters for call to function osal_set_event
   \   00003D   7A01         MOV     R2,#0x1
   \   00003F   8008         SJMP    ??ZDApp_NetworkStartEvt_4
    855              }
    856              else
    857              {
    858                // Failed to start network. Enter a dormant state (until user intervenes)
    859                devState = DEV_INIT;
   \                     ??ZDApp_NetworkStartEvt_3:
   \   000041   90....       MOV     DPTR,#devState
   \   000044   7401         MOV     A,#0x1
   \   000046   F0           MOVX    @DPTR,A
    860                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000047                ; Setup parameters for call to function osal_set_event
   \                     ??ZDApp_NetworkStartEvt_2:
   \   000047   7A10         MOV     R2,#0x10
   \                     ??ZDApp_NetworkStartEvt_4:
   \   000049   7B00         MOV     R3,#0x0
   \   00004B   90....       MOV     DPTR,#ZDAppTaskID
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   12....       LCALL   ??osal_set_event?relay
    861              }
    862            }
    863          }
   \   000053   02....       LJMP    ??Subroutine40_0 & 0xFFFF
    864          
    865          /*********************************************************************
    866           * @fn      ZDApp_DeviceAuthEvt()
    867           *
    868           * @brief   Process the Device Authentic Event
    869           *
    870           * @param   none
    871           *
    872           * @return  none
    873           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    874          void ZDApp_DeviceAuthEvt( void )
   \                     ZDApp_DeviceAuthEvt:
    875          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    876            // received authentication from trust center
    877            if ( devState == DEV_END_DEVICE_UNAUTH )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6405         XRL     A,#0x5
   \   00000A   703B         JNZ     ??ZDApp_DeviceAuthEvt_0
    878            {
    879              // Stop the reset timer so it doesn't reset
    880              ZDApp_ResetTimerCancel();
   \   00000C                ; Setup parameters for call to function ZDApp_ResetTimerCancel
   \   00000C   12....       LCALL   ??ZDApp_ResetTimerCancel?relay
    881          
    882              devState = DEV_END_DEVICE;
   \   00000F   12....       LCALL   ?Subroutine11 & 0xFFFF
    883              osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_38:
   \   000012   12....       LCALL   ??osal_set_event?relay
    884          
    885              // Set the Power Manager Device
    886          #if defined ( POWER_SAVING )
    887              osal_pwrmgr_device( PWRMGR_BATTERY );
    888          #endif
    889          
    890              if ( ZSTACK_ROUTER_BUILD )
    891              {
    892                if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \   000015   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000018   6009         JZ      ??ZDApp_DeviceAuthEvt_1
    893                {
    894                  // NOTE: first two parameters are not used, see NLMEDE.h for details
    895                  NLME_StartRouterRequest( 0, 0, false );
   \   00001A                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00001A   7B00         MOV     R3,#0x0
   \   00001C   7A00         MOV     R2,#0x0
   \   00001E   7900         MOV     R1,#0x0
   \   000020   12....       LCALL   ??NLME_StartRouterRequest?relay
    896                }
    897              }
    898          
    899              // Notify to save info into NV
    900              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_1:
   \   000023                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000023   12....       LCALL   ??ZDApp_NVUpdate?relay
    901          
    902              // Save off the security
    903              ZDApp_SaveNwkKey();
   \   000026                ; Setup parameters for call to function ZDApp_SaveNwkKey
   \   000026   12....       LCALL   ??ZDApp_SaveNwkKey?relay
    904          
    905              ZDApp_AnnounceNewAddress();
   \   000029                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000029   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
    906          
    907              if ( ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE) == 0 )
    908                  || ( (ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE)
    909          #if defined ( ZIGBEE_CHILD_AGING )
    910                    && (zgChildAgingEnable == TRUE)
    911          #endif // ZIGBEE_CHILD_AGING
    912                       ) )
   \   00002C   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   A2E3         MOV     C,0xE0 /* A   */.3
   \   000032   5008         JNC     ??ZDApp_DeviceAuthEvt_2
   \   000034   90....       MOV     DPTR,#zgChildAgingEnable
   \   000037   E0           MOVX    A,@DPTR
   \   000038   6401         XRL     A,#0x1
   \   00003A   700E         JNZ     ??ZDApp_DeviceAuthEvt_3
    913              {
    914                NLME_SetPollRate( ZDApp_SavedPollRate );
   \                     ??ZDApp_DeviceAuthEvt_2:
   \   00003C                ; Setup parameters for call to function NLME_SetPollRate
   \   00003C   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   00003F   12....       LCALL   ??Subroutine42_0 & 0xFFFF
    915              }
    916            }
   \                     ??CrossCallReturnLabel_50:
   \   000042   12....       LCALL   ??NLME_SetPollRate?relay
   \   000045   8003         SJMP    ??ZDApp_DeviceAuthEvt_3
    917            else
    918            {
    919              ZDApp_NVUpdate();
   \                     ??ZDApp_DeviceAuthEvt_0:
   \   000047                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000047   12....       LCALL   ??ZDApp_NVUpdate?relay
    920            }
    921          }
   \                     ??ZDApp_DeviceAuthEvt_3:
   \   00004A   02....       LJMP    ??Subroutine40_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   90....       MOV     DPTR,#devState
   \   000003   7406         MOV     A,#0x6
   \   000005                REQUIRE ??Subroutine37_0
   \   000005                ; // Fall through to label ??Subroutine37_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000003   E0           MOVX    A,@DPTR
   \   000004   5407         ANL     A,#0x7
   \   000006   6402         XRL     A,#0x2
   \   000008   22           RET
    922          
    923          /*********************************************************************
    924           * @fn      ZDApp_SaveNetworkStateEvt()
    925           *
    926           * @brief   Process the Save the Network State Event
    927           *
    928           * @param   none
    929           *
    930           * @return  none
    931           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    932          void ZDApp_SaveNetworkStateEvt( void )
   \                     ZDApp_SaveNetworkStateEvt:
    933          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    934          #if defined ( NV_RESTORE )
    935           #if defined ( NV_TURN_OFF_RADIO )
    936            // Turn off the radio's receiver during an NV update
    937            uint8 RxOnIdle;
    938            uint8 x = false;
    939            ZMacGetReq( ZMacRxOnIdle, &RxOnIdle );
    940            ZMacSetReq( ZMacRxOnIdle, &x );
    941           #endif
    942          
    943            // Update the Network State in NV
    944            NLME_UpdateNV( NWK_NV_NIB_ENABLE        |
    945                           NWK_NV_DEVICELIST_ENABLE |
    946                           NWK_NV_BINDING_ENABLE    |
    947                           NWK_NV_ADDRMGR_ENABLE );
   \   000004                ; Setup parameters for call to function NLME_UpdateNV
   \   000004   790F         MOV     R1,#0xf
   \   000006   12....       LCALL   ??NLME_UpdateNV?relay
    948          
    949            // Reset the NV startup option to resume from NV by
    950            // clearing the "New" join option.
    951            zgWriteStartupOptions( FALSE, ZCD_STARTOPT_DEFAULT_NETWORK_STATE );
   \   000009                ; Setup parameters for call to function zgWriteStartupOptions
   \   000009   7A02         MOV     R2,#0x2
   \   00000B   7900         MOV     R1,#0x0
   \   00000D   12....       LCALL   ??zgWriteStartupOptions?relay
    952          
    953           #if defined ( NV_TURN_OFF_RADIO )
    954            ZMacSetReq( ZMacRxOnIdle, &RxOnIdle );
    955           #endif
    956          #endif // NV_RESTORE
    957          }
   \   000010   02....       LJMP    ??Subroutine40_0 & 0xFFFF
    958          
    959          #if defined ( NV_RESTORE )
    960          /*********************************************************************
    961           * @fn      ZDApp_RestoreNetworkState()
    962           *
    963           * @brief   This function will restore the network state of the
    964           *          device if the network state is stored in NV.
    965           *
    966           * @param   none
    967           *
    968           * @return
    969           *    ZDO_INITDEV_RESTORED_NETWORK_STATE  - The device's network state was
    970           *          restored.
    971           *    ZDO_INITDEV_NEW_NETWORK_STATE - The network state was not used.
    972           *          This could mean that zgStartupOption said to not restore, or
    973           *          it could mean that there was no network state to restore.
    974           *
    975           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    976          uint8 ZDApp_RestoreNetworkState( void )
   \                     ZDApp_RestoreNetworkState:
    977          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    978            uint8 nvStat;
    979          
    980            // Initialize NWK NV items
    981            nvStat = NLME_InitNV();
   \   000005                ; Setup parameters for call to function NLME_InitNV
   \   000005   12....       LCALL   ??NLME_InitNV?relay
   \   000008   E9           MOV     A,R1
   \   000009   FE           MOV     R6,A
    982          
    983            if ( nvStat != NV_OPER_FAILED )
   \   00000A   740A         MOV     A,#0xa
   \   00000C   6E           XRL     A,R6
   \   00000D   603B         JZ      ??ZDApp_RestoreNetworkState_0
    984            {
    985              if ( NLME_RestoreFromNV() )
   \   00000F                ; Setup parameters for call to function NLME_RestoreFromNV
   \   00000F   12....       LCALL   ??NLME_RestoreFromNV?relay
   \   000012   E9           MOV     A,R1
   \   000013   6025         JZ      ??ZDApp_RestoreNetworkState_1
    986              {
    987                // Are we a coordinator
    988                ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000018   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001B   12....       LCALL   ??Subroutine50_0 & 0xFFFF
    989                if ( ZDAppNwkAddr.addr.shortAddr == 0 )
   \                     ??CrossCallReturnLabel_95:
   \   00001E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000021   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_61:
   \   000024   7007         JNZ     ??ZDApp_RestoreNetworkState_2
    990                  ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_COORDINATOR;
   \   000026   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   54F8         ANL     A,#0xf8
   \   00002C   F0           MOVX    @DPTR,A
    991                devStartMode = MODE_RESUME;
   \                     ??ZDApp_RestoreNetworkState_2:
   \   00002D   90....       MOV     DPTR,#devStartMode
   \   000030   7401         MOV     A,#0x1
   \   000032   12....       LCALL   ?Subroutine14 & 0xFFFF
    992                osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
    993              }
   \                     ??CrossCallReturnLabel_4:
   \   000035   12....       LCALL   ??sAddrExtCpy?relay
   \   000038   8002         SJMP    ??ZDApp_RestoreNetworkState_3
    994              else
    995                nvStat = NV_ITEM_UNINIT;
   \                     ??ZDApp_RestoreNetworkState_1:
   \   00003A   7E09         MOV     R6,#0x9
    996          
    997              if ( ZG_SECURE_ENABLED )
    998              {
    999                nwkFrameCounterChanges = 0;
   \                     ??ZDApp_RestoreNetworkState_3:
   \   00003C   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   00003F   E4           CLR     A
   \   000040   F0           MOVX    @DPTR,A
   \   000041   A3           INC     DPTR
   \   000042   F0           MOVX    @DPTR,A
   1000          
   1001                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1002                {
   1003                  ZDApp_RestoreNwkKey();
   1004                }
   1005              }
   1006          
   1007              // The default for RxOnWhenIdle is true for Routers and false for end devices
   1008              // [setup in the NLME_RestoreFromNV()].  Change it here if you want something
   1009              // other than default.
   1010            }
   1011          
   1012            if ( nvStat == ZSUCCESS )
   \   000043   EE           MOV     A,R6
   \   000044   7004         JNZ     ??ZDApp_RestoreNetworkState_0
   1013              return ( ZDO_INITDEV_RESTORED_NETWORK_STATE );
   \   000046   7900         MOV     R1,#0x0
   \   000048   8002         SJMP    ??ZDApp_RestoreNetworkState_4
   1014            else
   1015              return ( ZDO_INITDEV_NEW_NETWORK_STATE );
   \                     ??ZDApp_RestoreNetworkState_0:
   \   00004A   7901         MOV     R1,#0x1
   \                     ??ZDApp_RestoreNetworkState_4:
   \   00004C   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   1016          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001                ; Setup parameters for call to function sAddrExtCpy
   \   000001   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   000003   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000005   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000007   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000009   22           RET
   1017          #endif // NV_RESTORE
   1018          
   1019          /*********************************************************************
   1020           * @fn      ZDApp_InitUserDesc()
   1021           *
   1022           * @brief   Initialize the User Descriptor, the descriptor is read from NV
   1023           *          when needed.  If you want to initialize the User descriptor to
   1024           *          something other than all zero, do it here.
   1025           *
   1026           * @param   none
   1027           *
   1028           * @return  none
   1029           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1030          void ZDApp_InitUserDesc( void )
   \                     ZDApp_InitUserDesc:
   1031          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1032            UserDescriptorFormat_t ZDO_DefaultUserDescriptor;
   1033          
   1034            // Initialize the User Descriptor, the descriptor is read from NV
   1035            // when needed.  If you want to initialize the User descriptor to something
   1036            // other than all zero, do it here.
   1037            osal_memset( &ZDO_DefaultUserDescriptor, 0, sizeof( UserDescriptorFormat_t ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C11         MOV     R4,#0x11
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   AA82         MOV     R2,DPL
   \   000018   AB83         MOV     R3,DPH
   \   00001A   12....       LCALL   ??osal_memset?relay
   1038            if ( ZSUCCESS == osal_nv_item_init( ZCD_NV_USERDESC,
   1039                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   00001D                ; Setup parameters for call to function osal_nv_item_init
   \   00001D   85..82       MOV     DPL,?XSP + 0
   \   000020   85..83       MOV     DPH,?XSP + 1
   \   000023   8582..       MOV     ?V0 + 0,DPL
   \   000026   8583..       MOV     ?V0 + 1,DPH
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   7C11         MOV     R4,#0x11
   \   000030   7D00         MOV     R5,#0x0
   \   000032   7A81         MOV     R2,#-0x7f
   \   000034   7B00         MOV     R3,#0x0
   \   000036   12....       LCALL   ??osal_nv_item_init?relay
   \   000039   7402         MOV     A,#0x2
   \   00003B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00003E   E9           MOV     A,R1
   \   00003F   7033         JNZ     ??ZDApp_InitUserDesc_0
   1040            {
   1041              if ( ZSUCCESS == osal_nv_read( ZCD_NV_USERDESC, 0,
   1042                   sizeof(UserDescriptorFormat_t), (void*)&ZDO_DefaultUserDescriptor ) )
   \   000041                ; Setup parameters for call to function osal_nv_read
   \   000041   78..         MOV     R0,#?V0 + 0
   \   000043   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000046   75..11       MOV     ?V0 + 0,#0x11
   \   000049   75..00       MOV     ?V0 + 1,#0x0
   \   00004C   78..         MOV     R0,#?V0 + 0
   \   00004E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000051   7C00         MOV     R4,#0x0
   \   000053   7D00         MOV     R5,#0x0
   \   000055   7A81         MOV     R2,#-0x7f
   \   000057   7B00         MOV     R3,#0x0
   \   000059   12....       LCALL   ??osal_nv_read?relay
   \   00005C   7404         MOV     A,#0x4
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
   \   000061   E9           MOV     A,R1
   \   000062   7010         JNZ     ??ZDApp_InitUserDesc_0
   1043              {
   1044                if ( ZDO_DefaultUserDescriptor.len != 0 )
   \   000064   85..82       MOV     DPL,?XSP + 0
   \   000067   85..83       MOV     DPH,?XSP + 1
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   6007         JZ      ??ZDApp_InitUserDesc_0
   1045                {
   1046                  ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   00006D   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000070   E0           MOVX    A,@DPTR
   \   000071   D2E4         SETB    0xE0 /* A   */.4
   \   000073   F0           MOVX    @DPTR,A
   1047                }
   1048              }
   1049            }
   1050          }
   \                     ??ZDApp_InitUserDesc_0:
   \   000074   7411         MOV     A,#0x11
   \   000076   02....       LJMP    ??Subroutine38_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine38_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine39_0
   \   000003                ; // Fall through to label ??Subroutine39_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine39_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1051          
   1052          /*********************************************************************
   1053           * @fn      ZDAppCheckForHoldKey()
   1054           *
   1055           * @brief   Check for key to set the device into Hold Auto Start
   1056           *
   1057           * @param   none
   1058           *
   1059           * @return  none
   1060           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1061          void ZDAppCheckForHoldKey( void )
   \                     ZDAppCheckForHoldKey:
   1062          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1063          #if (defined HAL_KEY) && (HAL_KEY == TRUE)
   1064            
   1065            // Get Keypad directly to see if a HOLD is needed
   1066            zdappHoldKeys = HalKeyRead();
   \   000004                ; Setup parameters for call to function HalKeyRead
   \   000004   12....       LCALL   ??HalKeyRead?relay
   \   000007   E9           MOV     A,R1
   \   000008   90....       MOV     DPTR,#zdappHoldKeys
   \   00000B   F0           MOVX    @DPTR,A
   1067            
   1068            // Hold down the SW_BYPASS_START key (see OnBoard.h)
   1069            // while booting to avoid starting up the device.
   1070            if ( zdappHoldKeys == SW_BYPASS_START )
   \   00000C   6401         XRL     A,#0x1
   \   00000E   7005         JNZ     ??ZDAppCheckForHoldKey_0
   1071            {
   1072              // Change the device state to HOLD on start up
   1073              devState = DEV_HOLD;
   \   000010   90....       MOV     DPTR,#devState
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
   1074            }
   1075          #endif // HAL_KEY
   1076          }
   \                     ??ZDAppCheckForHoldKey_0:
   \   000015   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   1077          
   1078          /*********************************************************************
   1079           * @fn      ZDApp_ProcessOSALMsg()
   1080           *
   1081           * @brief   Process the incoming task message.
   1082           *
   1083           * @param   msgPtr - message to process
   1084           *
   1085           * @return  none
   1086           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1087          void ZDApp_ProcessOSALMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessOSALMsg:
   1088          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1089            // Data Confirmation message fields
   1090            uint8 sentEP;       // This should always be 0
   1091            uint8 sentStatus;
   1092            afDataConfirm_t *afDataConfirm;
   1093            uint8 tmp;
   1094          
   1095            switch ( msgPtr->event )
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   14           DEC     A
   \   000010   603B         JZ      ??ZDApp_ProcessOSALMsg_0
   \   000012   14           DEC     A
   \   000013   7003         JNZ     $+5
   \   000015   02....       LJMP    ??ZDApp_ProcessOSALMsg_1 & 0xFFFF
   \   000018   14           DEC     A
   \   000019   7003         JNZ     $+5
   \   00001B   02....       LJMP    ??ZDApp_ProcessOSALMsg_2 & 0xFFFF
   \   00001E   24E9         ADD     A,#-0x17
   \   000020   600B         JZ      ??ZDApp_ProcessOSALMsg_3
   \   000022   2447         ADD     A,#0x47
   \   000024   600D         JZ      ??ZDApp_ProcessOSALMsg_4
   \   000026   24D6         ADD     A,#-0x2a
   \   000028   600F         JZ      ??ZDApp_ProcessOSALMsg_5
   \   00002A   02....       LJMP    ??ZDApp_ProcessOSALMsg_6 & 0xFFFF
   1096            {
   1097              // Incoming ZDO Message
   1098              case AF_INCOMING_MSG_CMD:
   1099                ZDP_IncomingData( (afIncomingMSGPacket_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_3:
   \   00002D                ; Setup parameters for call to function ZDP_IncomingData
   \   00002D   12....       LCALL   ??ZDP_IncomingData?relay
   1100                break;
   \   000030   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1101          
   1102              case ZDO_CB_MSG:
   1103                ZDApp_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_4:
   \   000033                ; Setup parameters for call to function ZDApp_ProcessMsgCBs
   \   000033   12....       LCALL   ??ZDApp_ProcessMsgCBs?relay
   1104                break;
   \   000036   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1105          
   1106              case AF_DATA_CONFIRM_CMD:
   1107                // This message is received as a confirmation of a data packet sent.
   1108                // The status is of ZStatus_t type [defined in NLMEDE.h]
   1109                // The message fields are defined in AF.h
   1110                afDataConfirm = (afDataConfirm_t *)msgPtr;
   1111                sentEP = afDataConfirm->endpoint;
   1112                sentStatus = afDataConfirm->hdr.status;
   1113          
   1114                // Action taken when confirmation is received.
   1115          #if defined ( ZIGBEE_FREQ_AGILITY )
   1116                if ( pZDNwkMgr_ProcessDataConfirm )
   \                     ??ZDApp_ProcessOSALMsg_5:
   \   000039   90....       MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
   \   00003C   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00003F   7003         JNZ     $+5
   \   000041   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1117                  pZDNwkMgr_ProcessDataConfirm( afDataConfirm );
   \   000044                ; Setup parameters for indirect call
   \   000044   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000047   12....       LCALL   ?CALL_IND
   \   00004A   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1118          #endif
   1119                (void)sentEP;
   1120                (void)sentStatus;
   1121                break;
   1122          
   1123              case ZDO_NWK_DISC_CNF:
   1124                if (devState != DEV_NWK_DISC)
   \                     ??ZDApp_ProcessOSALMsg_0:
   \   00004D   90....       MOV     DPTR,#devState
   \   000050   E0           MOVX    A,@DPTR
   \   000051   6402         XRL     A,#0x2
   \   000053   6003         JZ      $+5
   \   000055   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1125                  break;
   1126          
   1127                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \   000058   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00005B   E0           MOVX    A,@DPTR
   \   00005C   6401         XRL     A,#0x1
   \   00005E   6008         JZ      ??ZDApp_ProcessOSALMsg_8
   \   000060   E0           MOVX    A,@DPTR
   \   000061   6402         XRL     A,#0x2
   \   000063   6003         JZ      $+5
   \   000065   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1128                {
   1129                  // Process the network discovery scan results and choose a parent
   1130                  // device to join/rejoin itself
   1131                  networkDesc_t *pChosenNwk;
   1132                  if ( ( (pChosenNwk = ZDApp_NwkDescListProcessing()) != NULL ) && (zdoDiscCounter > NUM_DISC_ATTEMPTS) )
   \                     ??ZDApp_ProcessOSALMsg_8:
   \   000068                ; Setup parameters for call to function ZDApp_NwkDescListProcessing
   \   000068   12....       LCALL   ??ZDApp_NwkDescListProcessing?relay
   \   00006B   8A..         MOV     ?V0 + 0,R2
   \   00006D   8B..         MOV     ?V0 + 1,R3
   \   00006F   EA           MOV     A,R2
   \   000070   45..         ORL     A,?V0 + 1
   \   000072   7003         JNZ     $+5
   \   000074   02....       LJMP    ??ZDApp_ProcessOSALMsg_9 & 0xFFFF
   \   000077   90....       MOV     DPTR,#zdoDiscCounter
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   C3           CLR     C
   \   00007C   9403         SUBB    A,#0x3
   \   00007E   5003         JNC     $+5
   \   000080   02....       LJMP    ??ZDApp_ProcessOSALMsg_9 & 0xFFFF
   1133                  {
   1134                    if ( devStartMode == MODE_JOIN )
   \   000083   EA           MOV     A,R2
   \   000084   2402         ADD     A,#0x2
   \   000086   F8           MOV     R0,A
   \   000087   EB           MOV     A,R3
   \   000088   3400         ADDC    A,#0x0
   \   00008A   F9           MOV     R1,A
   \   00008B   E8           MOV     A,R0
   \   00008C   FE           MOV     R6,A
   \   00008D   E9           MOV     A,R1
   \   00008E   FF           MOV     R7,A
   \   00008F   90....       MOV     DPTR,#devStartMode
   \   000092   E0           MOVX    A,@DPTR
   \   000093   706E         JNZ     ??ZDApp_ProcessOSALMsg_10
   1135                    {
   1136                      devState = DEV_NWK_JOINING;
   \   000095   90....       MOV     DPTR,#devState
   \   000098   7403         MOV     A,#0x3
   \   00009A   F0           MOVX    @DPTR,A
   1137          
   1138                      ZDApp_NodeProfileSync( pChosenNwk->stackProfile);
   \   00009B                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   00009B   8A82         MOV     DPL,R2
   \   00009D   8B83         MOV     DPH,R3
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   E0           MOVX    A,@DPTR
   \   0000A6   F9           MOV     R1,A
   \   0000A7   12....       LCALL   ??ZDApp_NodeProfileSync?relay
   1139          
   1140                      if ( NLME_JoinRequest( pChosenNwk->extendedPANID, pChosenNwk->panId,
   1141                                            pChosenNwk->logicalChannel,
   1142                                            ZDO_Config_Node_Descriptor.CapabilityFlags,
   1143                                            pChosenNwk->chosenRouter, pChosenNwk->chosenRouterDepth ) != ZSuccess )
   \   0000AA                ; Setup parameters for call to function NLME_JoinRequest
   \   0000AA   85..82       MOV     DPL,?V0 + 0
   \   0000AD   85..83       MOV     DPH,?V0 + 1
   \   0000B0   A3           INC     DPTR
   \   0000B1   A3           INC     DPTR
   \   0000B2   A3           INC     DPTR
   \   0000B3   A3           INC     DPTR
   \   0000B4   A3           INC     DPTR
   \   0000B5   A3           INC     DPTR
   \   0000B6   A3           INC     DPTR
   \   0000B7   A3           INC     DPTR
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   E0           MOVX    A,@DPTR
   \   0000BB   F5..         MOV     ?V0 + 2,A
   \   0000BD   78..         MOV     R0,#?V0 + 2
   \   0000BF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C2   85..82       MOV     DPL,?V0 + 0
   \   0000C5   85..83       MOV     DPH,?V0 + 1
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000D2   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   F5..         MOV     ?V0 + 2,A
   \   0000D8   78..         MOV     R0,#?V0 + 2
   \   0000DA   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000DD   8E82         MOV     DPL,R6
   \   0000DF   8F83         MOV     DPH,R7
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   F9           MOV     R1,A
   \   0000E3   85..82       MOV     DPL,?V0 + 0
   \   0000E6   85..83       MOV     DPH,?V0 + 1
   \   0000E9   E0           MOVX    A,@DPTR
   \   0000EA   FC           MOV     R4,A
   \   0000EB   A3           INC     DPTR
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   FD           MOV     R5,A
   \   0000EE   E5..         MOV     A,?V0 + 0
   \   0000F0   240B         ADD     A,#0xb
   \   0000F2   FA           MOV     R2,A
   \   0000F3   E5..         MOV     A,?V0 + 1
   \   0000F5   3400         ADDC    A,#0x0
   \   0000F7   FB           MOV     R3,A
   \   0000F8   12....       LCALL   ??NLME_JoinRequest?relay
   \   0000FB   7404         MOV     A,#0x4
   \   0000FD   12....       LCALL   ?DEALLOC_XSTACK8
   \   000100   02....       LJMP    ??ZDApp_ProcessOSALMsg_11 & 0xFFFF
   1144                      {
   1145                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1146                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   1147                      }
   1148                    } // if ( devStartMode == MODE_JOIN )
   1149                    else if ( devStartMode == MODE_REJOIN )
   \                     ??ZDApp_ProcessOSALMsg_10:
   \   000103   6403         XRL     A,#0x3
   \   000105   6003         JZ      $+5
   \   000107   02....       LJMP    ??ZDApp_ProcessOSALMsg_12 & 0xFFFF
   1150                    {
   1151                      ZStatus_t rejoinStatus;
   1152          
   1153                      devState = DEV_NWK_REJOIN;
   \   00010A   90....       MOV     DPTR,#devState
   \   00010D   7404         MOV     A,#0x4
   \   00010F   F0           MOVX    @DPTR,A
   1154          
   1155                      // Before trying to do rejoin, check if the device has a valid short address
   1156                      // If not, generate a random short address for itself
   1157                      if ( _NIB.nwkDevAddress == INVALID_NODE_ADDR )
   \   000110   90....       MOV     DPTR,#_NIB + 20
   \   000113   E0           MOVX    A,@DPTR
   \   000114   64FE         XRL     A,#0xfe
   \   000116   7003         JNZ     ??ZDApp_ProcessOSALMsg_13
   \   000118   A3           INC     DPTR
   \   000119   E0           MOVX    A,@DPTR
   \   00011A   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_13:
   \   00011B   7069         JNZ     ??ZDApp_ProcessOSALMsg_14
   1158                      {
   1159                        uint16 commNwkAddr;
   1160          
   1161                        // Verify if the Network address has been commissioned by external tool
   1162                        if ( ( osal_nv_read( ZCD_NV_COMMISSIONED_NWK_ADDR, 0,
   1163                                           sizeof(commNwkAddr),
   1164                                           (void*)&commNwkAddr ) == ZSUCCESS )   &&
   1165                             ( commNwkAddr != INVALID_NODE_ADDR ) )
   \   00011D                ; Setup parameters for call to function osal_nv_read
   \   00011D   7401         MOV     A,#0x1
   \   00011F   12....       LCALL   ?XSTACK_DISP0_8
   \   000122   8582..       MOV     ?V0 + 2,DPL
   \   000125   8583..       MOV     ?V0 + 3,DPH
   \   000128   78..         MOV     R0,#?V0 + 2
   \   00012A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012D   75..02       MOV     ?V0 + 2,#0x2
   \   000130   75..00       MOV     ?V0 + 3,#0x0
   \   000133   78..         MOV     R0,#?V0 + 2
   \   000135   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000138   7C00         MOV     R4,#0x0
   \   00013A   7D00         MOV     R5,#0x0
   \   00013C   7A49         MOV     R2,#0x49
   \   00013E   7B00         MOV     R3,#0x0
   \   000140   12....       LCALL   ??osal_nv_read?relay
   \   000143   7404         MOV     A,#0x4
   \   000145   12....       LCALL   ?DEALLOC_XSTACK8
   \   000148   E9           MOV     A,R1
   \   000149   7027         JNZ     ??ZDApp_ProcessOSALMsg_15
   \   00014B   7401         MOV     A,#0x1
   \   00014D   12....       LCALL   ?XSTACK_DISP0_8
   \   000150   E0           MOVX    A,@DPTR
   \   000151   64FE         XRL     A,#0xfe
   \   000153   7003         JNZ     ??ZDApp_ProcessOSALMsg_16
   \   000155   A3           INC     DPTR
   \   000156   E0           MOVX    A,@DPTR
   \   000157   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_16:
   \   000158   6018         JZ      ??ZDApp_ProcessOSALMsg_15
   1166                        {
   1167                          _NIB.nwkDevAddress = commNwkAddr;
   \   00015A   7401         MOV     A,#0x1
   \   00015C   12....       LCALL   ?XSTACK_DISP0_8
   \   00015F   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_41:
   \   000162   90....       MOV     DPTR,#_NIB + 20
   \   000165   E8           MOV     A,R0
   \   000166   F0           MOVX    @DPTR,A
   \   000167   A3           INC     DPTR
   \   000168   E9           MOV     A,R1
   \   000169   F0           MOVX    @DPTR,A
   1168          
   1169                          // clear Allocate address bit because device has a commissioned address
   1170                          _NIB.CapabilityFlags &= ~CAPINFO_ALLOC_ADDR;
   \   00016A   90....       MOV     DPTR,#_NIB + 14
   \   00016D   E0           MOVX    A,@DPTR
   \   00016E   C2E7         CLR     0xE0 /* A   */.7
   \   000170   800A         SJMP    ??ZDApp_ProcessOSALMsg_17
   1171                        }
   1172                        else
   1173                        {
   1174                          _NIB.nwkDevAddress = osal_rand();
   \                     ??ZDApp_ProcessOSALMsg_15:
   \   000172                ; Setup parameters for call to function osal_rand
   \   000172   12....       LCALL   ??osal_rand?relay
   \   000175   90....       MOV     DPTR,#_NIB + 20
   \   000178   EA           MOV     A,R2
   \   000179   F0           MOVX    @DPTR,A
   \   00017A   A3           INC     DPTR
   \   00017B   EB           MOV     A,R3
   \                     ??ZDApp_ProcessOSALMsg_17:
   \   00017C   F0           MOVX    @DPTR,A
   1175                        }
   1176          
   1177                        ZMacSetReq( ZMacShortAddress, (byte*)&_NIB.nwkDevAddress );
   \   00017D                ; Setup parameters for call to function ZMacSetReq
   \   00017D   7A..         MOV     R2,#(_NIB + 20) & 0xff
   \   00017F   7B..         MOV     R3,#((_NIB + 20) >> 8) & 0xff
   \   000181   7953         MOV     R1,#0x53
   \   000183   12....       LCALL   ??ZMacSetReq?relay
   1178                      }
   1179          
   1180                      // Check if the device has a valid PanID, if not, set it to the discovered Pan
   1181                      if ( _NIB.nwkPanId == INVALID_PAN_ID )
   \                     ??ZDApp_ProcessOSALMsg_14:
   \   000186   90....       MOV     DPTR,#_NIB + 33
   \   000189   E0           MOVX    A,@DPTR
   \   00018A   64FE         XRL     A,#0xfe
   \   00018C   7003         JNZ     ??ZDApp_ProcessOSALMsg_18
   \   00018E   A3           INC     DPTR
   \   00018F   E0           MOVX    A,@DPTR
   \   000190   F4           CPL     A
   \                     ??ZDApp_ProcessOSALMsg_18:
   \   000191   701A         JNZ     ??ZDApp_ProcessOSALMsg_19
   1182                      {
   1183                        _NIB.nwkPanId = pChosenNwk->panId;
   \   000193   85..82       MOV     DPL,?V0 + 0
   \   000196   85..83       MOV     DPH,?V0 + 1
   \   000199   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_42:
   \   00019C   90....       MOV     DPTR,#_NIB + 33
   \   00019F   E8           MOV     A,R0
   \   0001A0   F0           MOVX    @DPTR,A
   \   0001A1   A3           INC     DPTR
   \   0001A2   E9           MOV     A,R1
   \   0001A3   F0           MOVX    @DPTR,A
   1184                        ZMacSetReq( ZMacPanId, (byte*)&(_NIB.nwkPanId) );
   \   0001A4                ; Setup parameters for call to function ZMacSetReq
   \   0001A4   7A..         MOV     R2,#(_NIB + 33) & 0xff
   \   0001A6   7B..         MOV     R3,#((_NIB + 33) >> 8) & 0xff
   \   0001A8   7950         MOV     R1,#0x50
   \   0001AA   12....       LCALL   ??ZMacSetReq?relay
   1185                      }
   1186          
   1187                      tmp = true;
   \                     ??ZDApp_ProcessOSALMsg_19:
   \   0001AD   85..82       MOV     DPL,?XSP + 0
   \   0001B0   85..83       MOV     DPH,?XSP + 1
   \   0001B3   7401         MOV     A,#0x1
   \   0001B5   F0           MOVX    @DPTR,A
   1188                      ZMacSetReq( ZMacRxOnIdle, &tmp ); // Set receiver always on during rejoin
   \   0001B6                ; Setup parameters for call to function ZMacSetReq
   \   0001B6   AA82         MOV     R2,DPL
   \   0001B8   AB83         MOV     R3,DPH
   \   0001BA   7952         MOV     R1,#0x52
   \   0001BC   12....       LCALL   ??ZMacSetReq?relay
   1189          
   1190                      // Perform Secure or Unsecure Rejoin depending on available configuration
   1191                      if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == TRUE ) )
   \   0001BF                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   0001BF   12....       LCALL   ??ZDApp_RestoreNwkKey?relay
   \   0001C2   E9           MOV     A,R1
   \   0001C3   6401         XRL     A,#0x1
   \   0001C5   8E82         MOV     DPL,R6
   \   0001C7   8F83         MOV     DPH,R7
   \   0001C9   700B         JNZ     ??ZDApp_ProcessOSALMsg_20
   1192                      {
   1193                        rejoinStatus = NLME_ReJoinRequest( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   \   0001CB                ; Setup parameters for call to function NLME_ReJoinRequest
   \   0001CB   E0           MOVX    A,@DPTR
   \   0001CC   F9           MOV     R1,A
   \   0001CD   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   0001CF   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0001D1   12....       LCALL   ??NLME_ReJoinRequest?relay
   \   0001D4   8009         SJMP    ??ZDApp_ProcessOSALMsg_11
   1194                      }
   1195                      else
   1196                      {
   1197                        rejoinStatus = NLME_ReJoinRequestUnsecure( ZDO_UseExtendedPANID, pChosenNwk->logicalChannel);
   \                     ??ZDApp_ProcessOSALMsg_20:
   \   0001D6                ; Setup parameters for call to function NLME_ReJoinRequestUnsecure
   \   0001D6   E0           MOVX    A,@DPTR
   \   0001D7   F9           MOV     R1,A
   \   0001D8   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   0001DA   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   0001DC   12....       LCALL   ??NLME_ReJoinRequestUnsecure?relay
   \                     ??ZDApp_ProcessOSALMsg_11:
   \   0001DF   E9           MOV     A,R1
   1198                      }
   1199          
   1200                      if ( rejoinStatus != ZSuccess )
   \   0001E0   600E         JZ      ??ZDApp_ProcessOSALMsg_12
   1201                      {
   1202                        ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1203                                                    + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0001E2                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0001E2                ; Setup parameters for call to function osal_rand
   \   0001E2   12....       LCALL   ??osal_rand?relay
   \   0001E5   EA           MOV     A,R2
   \   0001E6   547F         ANL     A,#0x7f
   \   0001E8   2464         ADD     A,#0x64
   \   0001EA   FA           MOV     R2,A
   \   0001EB   7B00         MOV     R3,#0x0
   \   0001ED   12....       LCALL   ??ZDApp_NetworkInit?relay
   1204                      }
   1205                    } // else if ( devStartMode == MODE_REJOIN )
   1206          
   1207                    // The receiver is on, turn network layer polling off.
   1208                    if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \                     ??ZDApp_ProcessOSALMsg_12:
   \   0001F0   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   0001F3   E0           MOVX    A,@DPTR
   \   0001F4   A2E3         MOV     C,0xE0 /* A   */.3
   \   0001F6   5032         JNC     ??ZDApp_ProcessOSALMsg_21
   1209                    {
   1210                      // for an End Device with NO Child Table Management process or for a Router
   1211                      if ( ( ZG_DEVICE_RTR_TYPE )  ||
   1212          #if defined ( ZIGBEE_CHILD_AGING )
   1213                           ( (ZG_DEVICE_ENDDEVICE_TYPE) && ( zgChildAgingEnable == FALSE ) ) )
   \   0001F8   90....       MOV     DPTR,#zgDeviceLogicalType
   \   0001FB   E0           MOVX    A,@DPTR
   \   0001FC   6015         JZ      ??ZDApp_ProcessOSALMsg_22
   \   0001FE   6401         XRL     A,#0x1
   \   000200   6011         JZ      ??ZDApp_ProcessOSALMsg_22
   \   000202   E0           MOVX    A,@DPTR
   \   000203   6402         XRL     A,#0x2
   \   000205   6003         JZ      $+5
   \   000207   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   \   00020A   90....       MOV     DPTR,#zgChildAgingEnable
   \   00020D   E0           MOVX    A,@DPTR
   \   00020E   6003         JZ      $+5
   \   000210   02....       LJMP    ??ZDApp_ProcessOSALMsg_7 & 0xFFFF
   1214          #else
   1215                           (ZG_DEVICE_ENDDEVICE_TYPE) )
   1216          #endif // ZIGBEE_CHILD_AGING
   1217                      {
   1218                        NLME_SetPollRate( 0 );
   \                     ??ZDApp_ProcessOSALMsg_22:
   \   000213                ; Setup parameters for call to function NLME_SetPollRate
   \   000213   7A00         MOV     R2,#0x0
   \   000215   7B00         MOV     R3,#0x0
   \   000217   12....       LCALL   ??NLME_SetPollRate?relay
   1219                        NLME_SetQueuedPollRate( 0 );
   \   00021A                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   00021A   7A00         MOV     R2,#0x0
   \   00021C   7B00         MOV     R3,#0x0
   \   00021E   12....       LCALL   ??NLME_SetQueuedPollRate?relay
   1220                        NLME_SetResponseRate( 0 );
   \   000221                ; Setup parameters for call to function NLME_SetResponseRate
   \   000221   7A00         MOV     R2,#0x0
   \   000223   7B00         MOV     R3,#0x0
   \   000225   12....       LCALL   ??NLME_SetResponseRate?relay
   \   000228   807C         SJMP    ??ZDApp_ProcessOSALMsg_7
   1221                      }
   1222                    }
   1223                    else
   1224                    {
   1225                      if ( (ZG_SECURE_ENABLED) && (devStartMode == MODE_JOIN) )
   \                     ??ZDApp_ProcessOSALMsg_21:
   \   00022A   90....       MOV     DPTR,#devStartMode
   \   00022D   E0           MOVX    A,@DPTR
   \   00022E   7076         JNZ     ??ZDApp_ProcessOSALMsg_7
   1226                      {
   1227                        ZDApp_SavedPollRate = zgPollRate;
   \   000230   90....       MOV     DPTR,#zgPollRate
   \   000233   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_43:
   \   000236   90....       MOV     DPTR,#ZDApp_SavedPollRate
   \   000239   E8           MOV     A,R0
   \   00023A   F0           MOVX    @DPTR,A
   \   00023B   A3           INC     DPTR
   \   00023C   E9           MOV     A,R1
   \   00023D   F0           MOVX    @DPTR,A
   1228                        NLME_SetPollRate( zgRejoinPollRate );
   \   00023E                ; Setup parameters for call to function NLME_SetPollRate
   \   00023E   90....       MOV     DPTR,#zgRejoinPollRate
   \   000241   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   1229                      }
   1230                    }
   1231                  }
   \                     ??CrossCallReturnLabel_51:
   \   000244   12....       LCALL   ??NLME_SetPollRate?relay
   \   000247   805D         SJMP    ??ZDApp_ProcessOSALMsg_7
   1232                  else
   1233                  {
   1234                    if ( continueJoining )
   \                     ??ZDApp_ProcessOSALMsg_9:
   \   000249   90....       MOV     DPTR,#continueJoining
   \   00024C   E0           MOVX    A,@DPTR
   \   00024D   6057         JZ      ??ZDApp_ProcessOSALMsg_7
   1235                    {
   1236              #if defined ( MANAGED_SCAN )
   1237                      ZDApp_NetworkInit( MANAGEDSCAN_DELAY_BETWEEN_SCANS );
   1238              #else
   1239                      zdoDiscCounter++;
   \   00024F   90....       MOV     DPTR,#zdoDiscCounter
   \   000252   E0           MOVX    A,@DPTR
   \   000253   04           INC     A
   \   000254   F0           MOVX    @DPTR,A
   1240                      ZDApp_NetworkInit( (uint16)(BEACON_REQUEST_DELAY
   1241                            + ((uint16)(osal_rand()& BEACON_REQ_DELAY_MASK))) );
   \   000255                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000255                ; Setup parameters for call to function osal_rand
   \   000255   12....       LCALL   ??osal_rand?relay
   \   000258   EA           MOV     A,R2
   \   000259   2464         ADD     A,#0x64
   \   00025B   FA           MOV     R2,A
   \   00025C   E4           CLR     A
   \   00025D   3400         ADDC    A,#0x0
   \   00025F   FB           MOV     R3,A
   \   000260   803C         SJMP    ??ZDApp_ProcessOSALMsg_23
   1242              #endif
   1243                    }
   1244                  }
   1245                }
   1246                break;
   1247          
   1248              case ZDO_NWK_JOIN_IND:
   1249                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_1:
   \   000262   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000265   E0           MOVX    A,@DPTR
   \   000266   6401         XRL     A,#0x1
   \   000268   6005         JZ      ??ZDApp_ProcessOSALMsg_24
   \   00026A   E0           MOVX    A,@DPTR
   \   00026B   6402         XRL     A,#0x2
   \   00026D   7037         JNZ     ??ZDApp_ProcessOSALMsg_7
   1250                {
   1251                  ZDApp_ProcessNetworkJoin();
   \                     ??ZDApp_ProcessOSALMsg_24:
   \   00026F                ; Setup parameters for call to function ZDApp_ProcessNetworkJoin
   \   00026F   12....       LCALL   ??ZDApp_ProcessNetworkJoin?relay
   \   000272   8032         SJMP    ??ZDApp_ProcessOSALMsg_7
   1252                }
   1253                break;
   1254          
   1255              case ZDO_NWK_JOIN_REQ:
   1256                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessOSALMsg_2:
   \   000274   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000277   E0           MOVX    A,@DPTR
   \   000278   6401         XRL     A,#0x1
   \   00027A   6005         JZ      ??ZDApp_ProcessOSALMsg_25
   \   00027C   E0           MOVX    A,@DPTR
   \   00027D   6402         XRL     A,#0x2
   \   00027F   7025         JNZ     ??ZDApp_ProcessOSALMsg_7
   1257                {
   1258                  retryCnt = 0;
   \                     ??ZDApp_ProcessOSALMsg_25:
   \   000281   90....       MOV     DPTR,#retryCnt
   \   000284   E4           CLR     A
   \   000285   F0           MOVX    @DPTR,A
   1259                  devStartMode = MODE_RESUME;
   \   000286   90....       MOV     DPTR,#devStartMode
   \   000289   04           INC     A
   \   00028A   F0           MOVX    @DPTR,A
   1260                  _tmpRejoinState = true;
   \   00028B   90....       MOV     DPTR,#_tmpRejoinState
   \   00028E   12....       LCALL   ?Subroutine14 & 0xFFFF
   1261                  osal_cpyExtAddr( ZDO_UseExtendedPANID, _NIB.extendedPANID );
   \                     ??CrossCallReturnLabel_5:
   \   000291   12....       LCALL   ??sAddrExtCpy?relay
   1262                  zgDefaultStartingScanDuration = BEACON_ORDER_60_MSEC;
   \   000294   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000297   7402         MOV     A,#0x2
   \   000299   F0           MOVX    @DPTR,A
   1263                  ZDApp_NetworkInit( 0 );
   \   00029A                ; Setup parameters for call to function ZDApp_NetworkInit
   \   00029A   7A00         MOV     R2,#0x0
   \   00029C   7B00         MOV     R3,#0x0
   \                     ??ZDApp_ProcessOSALMsg_23:
   \   00029E   12....       LCALL   ??ZDApp_NetworkInit?relay
   \   0002A1   8003         SJMP    ??ZDApp_ProcessOSALMsg_7
   1264                }
   1265                break;
   1266          
   1267              default:
   1268                if ( ZG_SECURE_ENABLED )
   1269                  ZDApp_ProcessSecMsg( msgPtr );
   \                     ??ZDApp_ProcessOSALMsg_6:
   \   0002A3                ; Setup parameters for call to function ZDApp_ProcessSecMsg
   \   0002A3   12....       LCALL   ??ZDApp_ProcessSecMsg?relay
   1270                break;
   1271            }
   1272          
   1273          }
   \                     ??ZDApp_ProcessOSALMsg_7:
   \   0002A6   7403         MOV     A,#0x3
   \   0002A8   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine41_0:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_78:
   \   000003   22           RET
   1274          
   1275          /*********************************************************************
   1276           * @fn      ZDApp_ProcessMsgCBs()
   1277           *
   1278           * @brief   Process response messages
   1279           *
   1280           * @param   none
   1281           *
   1282           * @return  none
   1283           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine36_0
   \   000003                ; // Fall through to label ??Subroutine36_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1284          void ZDApp_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_ProcessMsgCBs:
   1285          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1286            switch ( inMsg->clusterID )
   \   00000E   EE           MOV     A,R6
   \   00000F   240C         ADD     A,#0xc
   \   000011   F5..         MOV     ?V0 + 0,A
   \   000013   EF           MOV     A,R7
   \   000014   3400         ADDC    A,#0x0
   \   000016   F5..         MOV     ?V0 + 1,A
   \   000018   85..82       MOV     DPL,?V0 + 0
   \   00001B   F583         MOV     DPH,A
   \   00001D   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000020   78..         MOV     R0,#?V0 + 2
   \   000022   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for ZDApp_ProcessMsgCBs>_0`:
   \   000025   0200         DW        2
   \   000027   2100         DW        33
   \   000029   2200         DW        34
   \   00002B   ....         DW        ??ZDApp_ProcessMsgCBs_0
   \   00002D   0080         DW        32768
   \   00002F   0180         DW        32769
   \   000031   ....         DW        ??ZDApp_ProcessMsgCBs_1
   \   000033   0000         DW        0
   \   000035   ....         DW        ??ZDApp_ProcessMsgCBs_2
   1287            {
   1288          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1289              case NWK_addr_rsp:
   1290              case IEEE_addr_rsp:
   1291                {
   1292                  ZDO_NwkIEEEAddrResp_t *pAddrRsp;
   1293          
   1294                  pAddrRsp = ZDO_ParseAddrRsp( inMsg );
   \                     ??ZDApp_ProcessMsgCBs_1:
   \   000037                ; Setup parameters for call to function ZDO_ParseAddrRsp
   \   000037   12....       LCALL   ??ZDO_ParseAddrRsp?relay
   \   00003A   8A..         MOV     ?V0 + 2,R2
   \   00003C   8B..         MOV     ?V0 + 3,R3
   1295                  if ( pAddrRsp )
   \   00003E   EA           MOV     A,R2
   \   00003F   45..         ORL     A,?V0 + 3
   \   000041   6057         JZ      ??ZDApp_ProcessMsgCBs_2
   1296                  {
   1297                    if ( pAddrRsp->status == ZSuccess )
   \   000043   EA           MOV     A,R2
   \   000044   2403         ADD     A,#0x3
   \   000046   FE           MOV     R6,A
   \   000047   EB           MOV     A,R3
   \   000048   3400         ADDC    A,#0x0
   \   00004A   FF           MOV     R7,A
   \   00004B   8A82         MOV     DPL,R2
   \   00004D   8B83         MOV     DPH,R3
   \   00004F   E0           MOVX    A,@DPTR
   \   000050   700B         JNZ     ??ZDApp_ProcessMsgCBs_3
   1298                    {
   1299                      ZDO_UpdateAddrManager( pAddrRsp->nwkAddr, pAddrRsp->extAddr );
   \   000052                ; Setup parameters for call to function ZDO_UpdateAddrManager
   \   000052   EE           MOV     A,R6
   \   000053   FC           MOV     R4,A
   \   000054   EF           MOV     A,R7
   \   000055   FD           MOV     R5,A
   \   000056   A3           INC     DPTR
   \   000057   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   1300                    }
   \                     ??CrossCallReturnLabel_52:
   \   00005A   12....       LCALL   ??ZDO_UpdateAddrManager?relay
   1301          
   1302          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   1303                    // look for pending bind entry for NWK_addr_rsp Only
   1304                    if ( inMsg->clusterID == NWK_addr_rsp )
   \                     ??ZDApp_ProcessMsgCBs_3:
   \   00005D   85..82       MOV     DPL,?V0 + 0
   \   000060   85..83       MOV     DPH,?V0 + 1
   \   000063   E0           MOVX    A,@DPTR
   \   000064   7004         JNZ     ??ZDApp_ProcessMsgCBs_4
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   6480         XRL     A,#0x80
   \                     ??ZDApp_ProcessMsgCBs_4:
   \   00006A   7007         JNZ     ??ZDApp_ProcessMsgCBs_5
   1305                    {
   1306          #if defined ( REFLECTOR )
   1307                      ZDApp_ProcessPendingBindReq( pAddrRsp->extAddr );
   \   00006C                ; Setup parameters for call to function ZDApp_ProcessPendingBindReq
   \   00006C   EE           MOV     A,R6
   \   00006D   FA           MOV     R2,A
   \   00006E   EF           MOV     A,R7
   \   00006F   FB           MOV     R3,A
   \   000070   12....       LCALL   ??ZDApp_ProcessPendingBindReq?relay
   1308          #endif
   1309                    }
   1310          #endif
   1311          
   1312                    osal_mem_free( pAddrRsp );
   \                     ??ZDApp_ProcessMsgCBs_5:
   \   000073                ; Setup parameters for call to function osal_mem_free
   \   000073   AA..         MOV     R2,?V0 + 2
   \   000075   AB..         MOV     R3,?V0 + 3
   \   000077   12....       LCALL   ??osal_mem_free?relay
   \   00007A   801E         SJMP    ??ZDApp_ProcessMsgCBs_2
   1313                  }
   1314                }
   1315                break;
   1316          #endif
   1317          
   1318          #if defined ( REFLECTOR )
   1319              case Bind_req:
   1320              case Unbind_req:
   1321                {
   1322                  ZDO_BindUnbindReq_t bindReq;
   1323                  ZDO_ParseBindUnbindReq( inMsg, &bindReq );
   \                     ??ZDApp_ProcessMsgCBs_0:
   \   00007C                ; Setup parameters for call to function ZDO_ParseBindUnbindReq
   \   00007C   85..82       MOV     DPL,?XSP + 0
   \   00007F   85..83       MOV     DPH,?XSP + 1
   \   000082   AC82         MOV     R4,DPL
   \   000084   AD83         MOV     R5,DPH
   \   000086   12....       LCALL   ??ZDO_ParseBindUnbindReq?relay
   1324                  ZDO_ProcessBindUnbindReq( inMsg, &bindReq );
   \   000089                ; Setup parameters for call to function ZDO_ProcessBindUnbindReq
   \   000089   85..82       MOV     DPL,?XSP + 0
   \   00008C   85..83       MOV     DPH,?XSP + 1
   \   00008F   AC82         MOV     R4,DPL
   \   000091   AD83         MOV     R5,DPH
   \   000093   EE           MOV     A,R6
   \   000094   FA           MOV     R2,A
   \   000095   EF           MOV     A,R7
   \   000096   FB           MOV     R3,A
   \   000097   12....       LCALL   ??ZDO_ProcessBindUnbindReq?relay
   1325                }
   1326                break;
   1327          #endif
   1328          
   1329          #if ( ZG_BUILD_COORDINATOR_TYPE )
   1330              case Bind_rsp:
   1331              case Unbind_rsp:
   1332                if (ZG_DEVICE_COORDINATOR_TYPE && matchED)
   1333                {
   1334                  ZDMatchSendState(
   1335                       (uint8)((inMsg->clusterID == Bind_rsp) ? ZDMATCH_REASON_BIND_RSP : ZDMATCH_REASON_UNBIND_RSP),
   1336                       ZDO_ParseBindRsp(inMsg), inMsg->TransSeq );
   1337                }
   1338                break;
   1339          
   1340              case End_Device_Bind_req:
   1341                if (ZG_DEVICE_COORDINATOR_TYPE)
   1342                {
   1343                  ZDEndDeviceBind_t bindReq;
   1344                  ZDO_ParseEndDeviceBindReq( inMsg, &bindReq );
   1345                  ZDO_MatchEndDeviceBind( &bindReq );
   1346          
   1347                  // Freeing the cluster lists - if allocated.
   1348                  if ( bindReq.numInClusters )
   1349                    osal_mem_free( bindReq.inClusters );
   1350                  if ( bindReq.numOutClusters )
   1351                    osal_mem_free( bindReq.outClusters );
   1352                }
   1353                break;
   1354          #endif
   1355            }
   1356          }
   \                     ??ZDApp_ProcessMsgCBs_2:
   \   00009A   7415         MOV     A,#0x15
   \   00009C   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 3,A
   \   000007   22           RET
   1357          
   1358          /*********************************************************************
   1359           * @fn      ZDApp_RegisterCBs()
   1360           *
   1361           * @brief   Process response messages
   1362           *
   1363           * @param   none
   1364           *
   1365           * @return  none
   1366           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1367          void ZDApp_RegisterCBs( void )
   \                     ZDApp_RegisterCBs:
   1368          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1369          #if defined ( ZDO_IEEEADDR_REQUEST ) || defined ( REFLECTOR )
   1370            ZDO_RegisterForZDOMsg( ZDAppTaskID, IEEE_addr_rsp );
   \   000004                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000004   7A01         MOV     R2,#0x1
   \   000006   7B80         MOV     R3,#-0x80
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
   1371          #endif
   1372          #if defined ( ZDO_NWKADDR_REQUEST ) || defined ( REFLECTOR )
   1373            ZDO_RegisterForZDOMsg( ZDAppTaskID, NWK_addr_rsp );
   \   000010                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000010   7A00         MOV     R2,#0x0
   \   000012   7B80         MOV     R3,#-0x80
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
   1374          #endif
   1375          #if ZG_BUILD_COORDINATOR_TYPE
   1376            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_rsp );
   1377            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_rsp );
   1378            ZDO_RegisterForZDOMsg( ZDAppTaskID, End_Device_Bind_req );
   1379          #endif
   1380          #if defined ( REFLECTOR )
   1381            ZDO_RegisterForZDOMsg( ZDAppTaskID, Bind_req );
   \   00001C                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   00001C   7A21         MOV     R2,#0x21
   \   00001E   7B00         MOV     R3,#0x0
   \   000020   90....       MOV     DPTR,#ZDAppTaskID
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
   1382            ZDO_RegisterForZDOMsg( ZDAppTaskID, Unbind_req );
   \   000028                ; Setup parameters for call to function ZDO_RegisterForZDOMsg
   \   000028   7A22         MOV     R2,#0x22
   \   00002A   7B00         MOV     R3,#0x0
   \   00002C   90....       MOV     DPTR,#ZDAppTaskID
   \   00002F   E0           MOVX    A,@DPTR
   \   000030   F9           MOV     R1,A
   \   000031   12....       LCALL   ??ZDO_RegisterForZDOMsg?relay
   1383          #endif
   1384          }
   \   000034   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   1385          
   1386          /*********************************************************************
   1387           * @fn      ZDApp_ProcessSecMsg()
   1388           *
   1389           * @brief   Process the incoming security message.
   1390           *
   1391           * @param   msgPtr - message to process
   1392           *
   1393           * @return  none
   1394           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1395          void ZDApp_ProcessSecMsg( osal_event_hdr_t *msgPtr )
   \                     ZDApp_ProcessSecMsg:
   1396          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1397            switch ( msgPtr->event )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   E0           MOVX    A,@DPTR
   \   000009   24FC         ADD     A,#-0x4
   \   00000B   600A         JZ      ??ZDApp_ProcessSecMsg_0
   \   00000D   24FE         ADD     A,#-0x2
   \   00000F   6018         JZ      ??ZDApp_ProcessSecMsg_1
   \   000011   24FE         ADD     A,#-0x2
   \   000013   6021         JZ      ??ZDApp_ProcessSecMsg_2
   \   000015   802F         SJMP    ??ZDApp_ProcessSecMsg_3
   1398            {
   1399              case ZDO_TRANSPORT_KEY_IND:
   1400                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_0:
   \   000017   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   6401         XRL     A,#0x1
   \   00001D   6005         JZ      ??ZDApp_ProcessSecMsg_4
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6402         XRL     A,#0x2
   \   000022   7022         JNZ     ??ZDApp_ProcessSecMsg_3
   1401                {
   1402                  ZDSecMgrTransportKeyInd( (ZDO_TransportKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_4:
   \   000024                ; Setup parameters for call to function ZDSecMgrTransportKeyInd
   \   000024   12....       LCALL   ??ZDSecMgrTransportKeyInd?relay
   \   000027   801D         SJMP    ??ZDApp_ProcessSecMsg_3
   1403                }
   1404                break;
   1405          
   1406              case ZDO_UPDATE_DEVICE_IND:
   1407                if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1408                {
   1409                  ZDSecMgrUpdateDeviceInd( (ZDO_UpdateDeviceInd_t*)msgPtr );
   1410                }
   1411                break;
   1412          
   1413              case ZDO_REMOVE_DEVICE_IND:
   1414                if ( ZG_BUILD_RTRONLY_TYPE && ( zgDeviceLogicalType == ZG_DEVICETYPE_ROUTER ) )
   \                     ??ZDApp_ProcessSecMsg_1:
   \   000029   90....       MOV     DPTR,#zgDeviceLogicalType
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   6401         XRL     A,#0x1
   \   00002F   7015         JNZ     ??ZDApp_ProcessSecMsg_3
   1415                {
   1416                  ZDSecMgrRemoveDeviceInd( (ZDO_RemoveDeviceInd_t*)msgPtr );
   \   000031                ; Setup parameters for call to function ZDSecMgrRemoveDeviceInd
   \   000031   12....       LCALL   ??ZDSecMgrRemoveDeviceInd?relay
   \   000034   8010         SJMP    ??ZDApp_ProcessSecMsg_3
   1417                }
   1418                break;
   1419          
   1420              case ZDO_REQUEST_KEY_IND:
   1421                if ( ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD ) )
   1422                {
   1423                  if ( ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1424                  {
   1425                    ZDSecMgrRequestKeyInd( (ZDO_RequestKeyInd_t*)msgPtr );
   1426                  }
   1427                }
   1428                break;
   1429          
   1430              case ZDO_SWITCH_KEY_IND:
   1431                if ( ZG_BUILD_JOINING_TYPE && ZG_DEVICE_JOINING_TYPE )
   \                     ??ZDApp_ProcessSecMsg_2:
   \   000036   90....       MOV     DPTR,#zgDeviceLogicalType
   \   000039   E0           MOVX    A,@DPTR
   \   00003A   6401         XRL     A,#0x1
   \   00003C   6005         JZ      ??ZDApp_ProcessSecMsg_5
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   6402         XRL     A,#0x2
   \   000041   7003         JNZ     ??ZDApp_ProcessSecMsg_3
   1432                {
   1433                  ZDSecMgrSwitchKeyInd( (ZDO_SwitchKeyInd_t*)msgPtr );
   \                     ??ZDApp_ProcessSecMsg_5:
   \   000043                ; Setup parameters for call to function ZDSecMgrSwitchKeyInd
   \   000043   12....       LCALL   ??ZDSecMgrSwitchKeyInd?relay
   1434                }
   1435                break;
   1436          
   1437              default:
   1438                // Unsupported messages
   1439                break;
   1440            }
   1441          }
   \                     ??ZDApp_ProcessSecMsg_3:
   \   000046   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   1442          
   1443          /*********************************************************************
   1444           * @fn      ZDApp_ProcessNetworkJoin()
   1445           *
   1446           * @brief
   1447           *
   1448           *   Save off the Network key information.
   1449           *
   1450           * @param   none
   1451           *
   1452           * @return  none
   1453           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1454          void ZDApp_ProcessNetworkJoin( void )
   \                     ZDApp_ProcessNetworkJoin:
   1455          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1456            if ( (devState == DEV_NWK_JOINING) ||
   1457                ((devState == DEV_NWK_ORPHAN)  &&
   1458                 (ZDO_Config_Node_Descriptor.LogicalType == NODETYPE_ROUTER)) )
   \   00000A   90....       MOV     DPTR,#devState
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   6403         XRL     A,#0x3
   \   000010   6015         JZ      ??ZDApp_ProcessNetworkJoin_0
   \   000012   E0           MOVX    A,@DPTR
   \   000013   640A         XRL     A,#0xa
   \   000015   6003         JZ      $+5
   \   000017   02....       LJMP    ??ZDApp_ProcessNetworkJoin_1 & 0xFFFF
   \   00001A   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   5407         ANL     A,#0x7
   \   000020   6401         XRL     A,#0x1
   \   000022   6003         JZ      $+5
   \   000024   02....       LJMP    ??ZDApp_ProcessNetworkJoin_2 & 0xFFFF
   1459            {
   1460              // Result of a Join attempt by this device.
   1461              if ( nwkStatus == ZSuccess )
   \                     ??ZDApp_ProcessNetworkJoin_0:
   \   000027   90....       MOV     DPTR,#nwkStatus
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   704C         JNZ     ??ZDApp_ProcessNetworkJoin_3
   1462              {
   1463                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   00002D                ; Setup parameters for call to function osal_set_event
   \   00002D   7A10         MOV     R2,#0x10
   \   00002F   7B00         MOV     R3,#0x0
   \   000031   90....       MOV     DPTR,#ZDAppTaskID
   \   000034   E0           MOVX    A,@DPTR
   \   000035   F9           MOV     R1,A
   \   000036   12....       LCALL   ??osal_set_event?relay
   1464          
   1465          #if defined ( POWER_SAVING )
   1466                osal_pwrmgr_device( PWRMGR_BATTERY );
   1467          #endif
   1468          
   1469                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   \   000039                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   000039   12....       LCALL   ??ZDApp_RestoreNwkKey?relay
   \   00003C   E9           MOV     A,R1
   \   00003D   7003         JNZ     $+5
   \   00003F   02....       LJMP    ??ZDApp_ProcessNetworkJoin_4 & 0xFFFF
   1470                {
   1471                  // wait for auth from trust center
   1472                  devState = DEV_END_DEVICE_UNAUTH;
   1473          
   1474                  // Start the reset timer for MAX UNAUTH time
   1475                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   1476                }
   1477                else
   1478                {
   1479                  if ( ZSTACK_ROUTER_BUILD )
   1480                  {
   1481                    if ( devState == DEV_NWK_ORPHAN
   1482                      && ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \   000042   90....       MOV     DPTR,#devState
   \   000045   E0           MOVX    A,@DPTR
   \   000046   640A         XRL     A,#0xa
   \   000048   700D         JNZ     ??ZDApp_ProcessNetworkJoin_5
   \   00004A   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00004D   6010         JZ      ??ZDApp_ProcessNetworkJoin_6
   1483                    {
   1484                      // Change NIB state to router for restore
   1485                      _NIB.nwkState = NWK_ROUTER;
   \   00004F   90....       MOV     DPTR,#_NIB + 35
   \   000052   7408         MOV     A,#0x8
   \   000054   F0           MOVX    @DPTR,A
   \   000055   8008         SJMP    ??ZDApp_ProcessNetworkJoin_6
   1486                    }
   1487                  }
   1488          
   1489                  if ( devState == DEV_NWK_JOINING )
   \                     ??ZDApp_ProcessNetworkJoin_5:
   \   000057   E0           MOVX    A,@DPTR
   \   000058   6403         XRL     A,#0x3
   \   00005A   7003         JNZ     ??ZDApp_ProcessNetworkJoin_6
   1490                  {
   1491                    ZDApp_AnnounceNewAddress();
   \   00005C                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   00005C   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   1492                  }
   1493          
   1494                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_6:
   \   00005F   90....       MOV     DPTR,#devState
   \   000062   7406         MOV     A,#0x6
   \   000064   F0           MOVX    @DPTR,A
   1495                  if ( ZSTACK_ROUTER_BUILD )
   1496                  {
   1497                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1498                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \   000065   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   000068   7003         JNZ     $+5
   \   00006A   02....       LJMP    ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
   1499                    {
   1500                      NLME_StartRouterRequest( 0, 0, false );
   \   00006D                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00006D   7B00         MOV     R3,#0x0
   \   00006F   7A00         MOV     R2,#0x0
   \   000071   7900         MOV     R1,#0x0
   \   000073   12....       LCALL   ??NLME_StartRouterRequest?relay
   \   000076   02....       LJMP    ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
   1501                    }
   1502                  }
   1503                }
   1504              }
   1505              else
   1506              {
   1507                if ( (devStartMode == MODE_RESUME) && (++retryCnt >= MAX_RESUME_RETRY) )
   \                     ??ZDApp_ProcessNetworkJoin_3:
   \   000079   90....       MOV     DPTR,#devStartMode
   \   00007C   E0           MOVX    A,@DPTR
   \   00007D   6401         XRL     A,#0x1
   \   00007F   7031         JNZ     ??ZDApp_ProcessNetworkJoin_8
   \   000081   90....       MOV     DPTR,#retryCnt
   \   000084   E0           MOVX    A,@DPTR
   \   000085   04           INC     A
   \   000086   F0           MOVX    @DPTR,A
   \   000087   C3           CLR     C
   \   000088   9403         SUBB    A,#0x3
   \   00008A   4026         JC      ??ZDApp_ProcessNetworkJoin_8
   1508                {
   1509                  if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   00008C   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   00008F   7003         JNZ     ??ZDApp_ProcessNetworkJoin_9
   \   000091   74FF         MOV     A,#-0x1
   \   000093   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_9:
   \   000094   600A         JZ      ??ZDApp_ProcessNetworkJoin_10
   \   000096   74FE         MOV     A,#-0x2
   \   000098   68           XRL     A,R0
   \   000099   7003         JNZ     ??ZDApp_ProcessNetworkJoin_11
   \   00009B   74FF         MOV     A,#-0x1
   \   00009D   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_11:
   \   00009E   7006         JNZ     ??ZDApp_ProcessNetworkJoin_12
   1510                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_10:
   \   0000A0   90....       MOV     DPTR,#devStartMode
   \   0000A3   E4           CLR     A
   \   0000A4   800B         SJMP    ??ZDApp_ProcessNetworkJoin_13
   1511                  else
   1512                  {
   1513                    devStartMode = MODE_REJOIN;
   \                     ??ZDApp_ProcessNetworkJoin_12:
   \   0000A6   90....       MOV     DPTR,#devStartMode
   \   0000A9   7403         MOV     A,#0x3
   \   0000AB   F0           MOVX    @DPTR,A
   1514                    _tmpRejoinState = true;
   \   0000AC   90....       MOV     DPTR,#_tmpRejoinState
   \   0000AF   7401         MOV     A,#0x1
   \                     ??ZDApp_ProcessNetworkJoin_13:
   \   0000B1   F0           MOVX    @DPTR,A
   1515                  }
   1516                }
   1517          
   1518                if ( (NLME_GetShortAddr() != INVALID_NODE_ADDR) ||
   1519                     (_NIB.nwkDevAddress != INVALID_NODE_ADDR) )
   \                     ??ZDApp_ProcessNetworkJoin_8:
   \   0000B2                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000B2   12....       LCALL   ??NLME_GetShortAddr?relay
   \   0000B5   8A..         MOV     ?V0 + 0,R2
   \   0000B7   8B..         MOV     ?V0 + 1,R3
   \   0000B9   74FE         MOV     A,#-0x2
   \   0000BB   65..         XRL     A,?V0 + 0
   \   0000BD   7004         JNZ     ??ZDApp_ProcessNetworkJoin_14
   \   0000BF   74FF         MOV     A,#-0x1
   \   0000C1   65..         XRL     A,?V0 + 1
   \                     ??ZDApp_ProcessNetworkJoin_14:
   \   0000C3   700D         JNZ     ??ZDApp_ProcessNetworkJoin_15
   \   0000C5   90....       MOV     DPTR,#_NIB + 20
   \   0000C8   E0           MOVX    A,@DPTR
   \   0000C9   64FE         XRL     A,#0xfe
   \   0000CB   7003         JNZ     ??ZDApp_ProcessNetworkJoin_16
   \   0000CD   A3           INC     DPTR
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   F4           CPL     A
   \                     ??ZDApp_ProcessNetworkJoin_16:
   \   0000D0   601B         JZ      ??ZDApp_ProcessNetworkJoin_17
   1520                {
   1521                  uint16 addr = INVALID_NODE_ADDR;
   \                     ??ZDApp_ProcessNetworkJoin_15:
   \   0000D2   85..82       MOV     DPL,?XSP + 0
   \   0000D5   85..83       MOV     DPH,?XSP + 1
   \   0000D8   74FE         MOV     A,#-0x2
   \   0000DA   F0           MOVX    @DPTR,A
   \   0000DB   A3           INC     DPTR
   \   0000DC   04           INC     A
   \   0000DD   F0           MOVX    @DPTR,A
   1522                  // Invalidate nwk addr so end device does not use in its data reqs.
   1523                  _NIB.nwkDevAddress = INVALID_NODE_ADDR;
   \   0000DE   90....       MOV     DPTR,#_NIB + 20
   \   0000E1   14           DEC     A
   \   0000E2   F0           MOVX    @DPTR,A
   \   0000E3   A3           INC     DPTR
   \   0000E4   04           INC     A
   \   0000E5   12....       LCALL   ?Subroutine10 & 0xFFFF
   1524                  ZMacSetReq( ZMacShortAddress, (uint8 *)&addr );
   1525                }
   \                     ??CrossCallReturnLabel_0:
   \   0000E8   7953         MOV     R1,#0x53
   \   0000EA   12....       LCALL   ??ZMacSetReq?relay
   1526          
   1527                // Clear the neighbor Table and network discovery tables.
   1528                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_17:
   \   0000ED                ; Setup parameters for call to function nwkNeighborInitTable
   \   0000ED   12....       LCALL   ??nwkNeighborInitTable?relay
   1529                NLME_NwkDiscTerm();
   \   0000F0                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0000F0   12....       LCALL   ??NLME_NwkDiscTerm?relay
   1530          
   1531                zdoDiscCounter = 1;
   \   0000F3   90....       MOV     DPTR,#zdoDiscCounter
   \   0000F6   7401         MOV     A,#0x1
   \   0000F8   F0           MOVX    @DPTR,A
   1532          
   1533          //      ZDApp_NetworkInit( (uint16)
   1534          //                         ((NWK_START_DELAY * (osal_rand() & 0x0F)) +
   1535          //                          (NWK_START_DELAY * 5)) );
   1536                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1537                     + ((uint16)(osal_rand()& EXTENDED_JOINING_RANDOM_MASK))) );
   \   0000F9                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0000F9                ; Setup parameters for call to function osal_rand
   \   0000F9   02....       LJMP    ??ZDApp_ProcessNetworkJoin_18 & 0xFFFF
   1538              }
   1539            }
   1540            else if ( devState == DEV_NWK_ORPHAN || devState == DEV_NWK_REJOIN )
   \                     ??ZDApp_ProcessNetworkJoin_1:
   \   0000FC   E0           MOVX    A,@DPTR
   \   0000FD   6404         XRL     A,#0x4
   \   0000FF   6003         JZ      $+5
   \   000101   02....       LJMP    ??ZDApp_ProcessNetworkJoin_19 & 0xFFFF
   1541            {
   1542              // results of an orphaning attempt by this device
   1543              if (nwkStatus == ZSuccess)
   \                     ??ZDApp_ProcessNetworkJoin_2:
   \   000104   90....       MOV     DPTR,#nwkStatus
   \   000107   E0           MOVX    A,@DPTR
   \   000108   705E         JNZ     ??ZDApp_ProcessNetworkJoin_20
   1544              {
   1545                // Verify NWK key is available before sending Device_annce
   1546                if ( ZG_SECURE_ENABLED && ( ZDApp_RestoreNwkKey() == false ) )
   \   00010A                ; Setup parameters for call to function ZDApp_RestoreNwkKey
   \   00010A   12....       LCALL   ??ZDApp_RestoreNwkKey?relay
   \   00010D   E9           MOV     A,R1
   \   00010E   701C         JNZ     ??ZDApp_ProcessNetworkJoin_21
   1547                {
   1548                  osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000110                ; Setup parameters for call to function osal_set_event
   \   000110   7A10         MOV     R2,#0x10
   \   000112   7B00         MOV     R3,#0x0
   \   000114   90....       MOV     DPTR,#ZDAppTaskID
   \   000117   E0           MOVX    A,@DPTR
   \   000118   F9           MOV     R1,A
   \   000119   12....       LCALL   ??osal_set_event?relay
   1549          
   1550                  // wait for auth from trust center
   1551                  devState = DEV_END_DEVICE_UNAUTH;
   \                     ??ZDApp_ProcessNetworkJoin_4:
   \   00011C   90....       MOV     DPTR,#devState
   \   00011F   7405         MOV     A,#0x5
   \   000121   F0           MOVX    @DPTR,A
   1552          
   1553                  // Start the reset timer for MAX UNAUTH time
   1554                  ZDApp_ResetTimerStart( MAX_DEVICE_UNAUTH_TIMEOUT );
   \   000122                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000122   7A10         MOV     R2,#0x10
   \   000124   7B27         MOV     R3,#0x27
   \   000126   12....       LCALL   ??ZDApp_ResetTimerStart?relay
   \   000129   02....       LJMP    ??ZDApp_ProcessNetworkJoin_7 & 0xFFFF
   1555                }
   1556                else
   1557                {
   1558          
   1559                  devState = DEV_END_DEVICE;
   \                     ??ZDApp_ProcessNetworkJoin_21:
   \   00012C   12....       LCALL   ?Subroutine11 & 0xFFFF
   1560                  osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \                     ??CrossCallReturnLabel_39:
   \   00012F   12....       LCALL   ??osal_set_event?relay
   1561                  // setup Power Manager Device
   1562          #if defined ( POWER_SAVING )
   1563                  osal_pwrmgr_device( PWRMGR_BATTERY );
   1564          #endif
   1565          
   1566                  // The receiver is on, turn network layer polling off.
   1567                  if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE )
   \   000132   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000135   E0           MOVX    A,@DPTR
   \   000136   A2E3         MOV     C,0xE0 /* A   */.3
   \   000138   501B         JNC     ??ZDApp_ProcessNetworkJoin_22
   1568                  {
   1569          #if defined ( ZIGBEE_CHILD_AGING )
   1570                    // if Child Table Management process is not enabled
   1571                    if ( zgChildAgingEnable == FALSE )
   \   00013A   90....       MOV     DPTR,#zgChildAgingEnable
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   7015         JNZ     ??ZDApp_ProcessNetworkJoin_22
   1572          #endif // ZIGBEE_CHILD_AGING
   1573                    {
   1574                      NLME_SetPollRate( 0 );
   \   000140                ; Setup parameters for call to function NLME_SetPollRate
   \   000140   7A00         MOV     R2,#0x0
   \   000142   7B00         MOV     R3,#0x0
   \   000144   12....       LCALL   ??NLME_SetPollRate?relay
   1575                      NLME_SetQueuedPollRate( 0 );
   \   000147                ; Setup parameters for call to function NLME_SetQueuedPollRate
   \   000147   7A00         MOV     R2,#0x0
   \   000149   7B00         MOV     R3,#0x0
   \   00014B   12....       LCALL   ??NLME_SetQueuedPollRate?relay
   1576                      NLME_SetResponseRate( 0 );
   \   00014E                ; Setup parameters for call to function NLME_SetResponseRate
   \   00014E   7A00         MOV     R2,#0x0
   \   000150   7B00         MOV     R3,#0x0
   \   000152   12....       LCALL   ??NLME_SetResponseRate?relay
   1577                    }
   1578                  }
   1579          
   1580                  if ( ZSTACK_ROUTER_BUILD )
   1581                  {
   1582                    // NOTE: first two parameters are not used, see NLMEDE.h for details
   1583                    if ( ZDO_Config_Node_Descriptor.LogicalType != NODETYPE_DEVICE )
   \                     ??ZDApp_ProcessNetworkJoin_22:
   \   000155   12....       LCALL   ?Subroutine21 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000158   6009         JZ      ??ZDApp_ProcessNetworkJoin_23
   1584                    {
   1585                      NLME_StartRouterRequest( 0, 0, false );
   \   00015A                ; Setup parameters for call to function NLME_StartRouterRequest
   \   00015A   7B00         MOV     R3,#0x0
   \   00015C   7A00         MOV     R2,#0x0
   \   00015E   7900         MOV     R1,#0x0
   \   000160   12....       LCALL   ??NLME_StartRouterRequest?relay
   1586                    }
   1587                  }
   1588          
   1589                  ZDApp_AnnounceNewAddress();
   \                     ??ZDApp_ProcessNetworkJoin_23:
   \   000163                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000163   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   \   000166   806E         SJMP    ??ZDApp_ProcessNetworkJoin_7
   1590                }
   1591              }
   1592              else
   1593              {
   1594                if ( devStartMode == MODE_RESUME )
   \                     ??ZDApp_ProcessNetworkJoin_20:
   \   000168   90....       MOV     DPTR,#devStartMode
   \   00016B   E0           MOVX    A,@DPTR
   \   00016C   6401         XRL     A,#0x1
   \   00016E   7039         JNZ     ??ZDApp_ProcessNetworkJoin_24
   1595                {
   1596                  if ( ++retryCnt <= MAX_RESUME_RETRY )
   \   000170   90....       MOV     DPTR,#retryCnt
   \   000173   E0           MOVX    A,@DPTR
   \   000174   04           INC     A
   \   000175   F0           MOVX    @DPTR,A
   \   000176   C3           CLR     C
   \   000177   9404         SUBB    A,#0x4
   \   000179   5021         JNC     ??ZDApp_ProcessNetworkJoin_25
   1597                  {
   1598                    if ( _NIB.nwkPanId == 0xFFFF || _NIB.nwkPanId == INVALID_PAN_ID )
   \   00017B   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00017E   7003         JNZ     ??ZDApp_ProcessNetworkJoin_26
   \   000180   74FF         MOV     A,#-0x1
   \   000182   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_26:
   \   000183   601F         JZ      ??ZDApp_ProcessNetworkJoin_27
   \   000185   74FE         MOV     A,#-0x2
   \   000187   68           XRL     A,R0
   \   000188   7003         JNZ     ??ZDApp_ProcessNetworkJoin_28
   \   00018A   74FF         MOV     A,#-0x1
   \   00018C   69           XRL     A,R1
   \                     ??ZDApp_ProcessNetworkJoin_28:
   \   00018D   6015         JZ      ??ZDApp_ProcessNetworkJoin_27
   1599                      devStartMode = MODE_JOIN;
   1600                    else
   1601                    {
   1602                      devStartMode = MODE_REJOIN;
   \   00018F   90....       MOV     DPTR,#devStartMode
   \   000192   7403         MOV     A,#0x3
   \   000194   F0           MOVX    @DPTR,A
   1603                      _tmpRejoinState = true;
   \   000195   90....       MOV     DPTR,#_tmpRejoinState
   \   000198   7401         MOV     A,#0x1
   \   00019A   800C         SJMP    ??ZDApp_ProcessNetworkJoin_29
   1604                    }
   1605                  }
   1606                  // Do a normal join to the network after certain times of rejoin retries
   1607                  else if( AIB_apsUseInsecureJoin == true )
   \                     ??ZDApp_ProcessNetworkJoin_25:
   \   00019C   90....       MOV     DPTR,#AIB_apsUseInsecureJoin
   \   00019F   E0           MOVX    A,@DPTR
   \   0001A0   6401         XRL     A,#0x1
   \   0001A2   7005         JNZ     ??ZDApp_ProcessNetworkJoin_24
   1608                  {
   1609                    devStartMode = MODE_JOIN;
   \                     ??ZDApp_ProcessNetworkJoin_27:
   \   0001A4   90....       MOV     DPTR,#devStartMode
   \   0001A7   E4           CLR     A
   \                     ??ZDApp_ProcessNetworkJoin_29:
   \   0001A8   F0           MOVX    @DPTR,A
   1610                  }
   1611                }
   1612          
   1613                // Clear the neighbor Table and network discovery tables.
   1614                nwkNeighborInitTable();
   \                     ??ZDApp_ProcessNetworkJoin_24:
   \   0001A9                ; Setup parameters for call to function nwkNeighborInitTable
   \   0001A9   12....       LCALL   ??nwkNeighborInitTable?relay
   1615                NLME_NwkDiscTerm();
   \   0001AC                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   0001AC   12....       LCALL   ??NLME_NwkDiscTerm?relay
   1616          
   1617                // setup a retry for later...
   1618                ZDApp_NetworkInit( (uint16)(NWK_START_DELAY
   1619                     + (osal_rand()& EXTENDED_JOINING_RANDOM_MASK)) );
   \   0001AF                ; Setup parameters for call to function ZDApp_NetworkInit
   \   0001AF                ; Setup parameters for call to function osal_rand
   \                     ??ZDApp_ProcessNetworkJoin_18:
   \   0001AF   12....       LCALL   ??osal_rand?relay
   \   0001B2   EA           MOV     A,R2
   \   0001B3   547F         ANL     A,#0x7f
   \   0001B5   2464         ADD     A,#0x64
   \   0001B7   FA           MOV     R2,A
   \   0001B8   7B00         MOV     R3,#0x0
   \   0001BA   12....       LCALL   ??ZDApp_NetworkInit?relay
   \   0001BD   8017         SJMP    ??ZDApp_ProcessNetworkJoin_7
   1620              }
   1621            }
   1622          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   1623            else
   1624            {
   1625              // Assume from address conflict
   1626              if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \                     ??ZDApp_ProcessNetworkJoin_19:
   \   0001BF   90....       MOV     DPTR,#_NIB + 96
   \   0001C2   E0           MOVX    A,@DPTR
   \   0001C3   6402         XRL     A,#0x2
   \   0001C5   700F         JNZ     ??ZDApp_ProcessNetworkJoin_7
   1627              {
   1628                // Notify the network
   1629                ZDApp_AnnounceNewAddress();
   \   0001C7                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   0001C7   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   1630          
   1631                // Notify apps
   1632                osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   0001CA                ; Setup parameters for call to function osal_set_event
   \   0001CA   7A10         MOV     R2,#0x10
   \   0001CC   7B00         MOV     R3,#0x0
   \   0001CE   90....       MOV     DPTR,#ZDAppTaskID
   \   0001D1   E0           MOVX    A,@DPTR
   \   0001D2   F9           MOV     R1,A
   \   0001D3   12....       LCALL   ??osal_set_event?relay
   1633              }
   1634            }
   1635          #endif
   1636          }
   \                     ??ZDApp_ProcessNetworkJoin_7:
   \   0001D6                REQUIRE ?Subroutine8
   \   0001D6                ; // Fall through to label ?Subroutine8

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7402         MOV     A,#0x2
   \   000002   02....       LJMP    ??Subroutine38_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   90....       MOV     DPTR,#_NIB + 33
   \   000003   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   000006   74FF         MOV     A,#-0x1
   \   000008   68           XRL     A,R0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZMacSetReq
   \   000001                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   000001                ; Setup parameters for call to function APSME_UpdateDeviceReq
   \   000001                ; Setup parameters for indirect call
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   AA82         MOV     R2,DPL
   \   000009   AB83         MOV     R3,DPH
   \   00000B   22           RET
   1637          
   1638          /*********************************************************************
   1639           * @fn      ZDApp_SaveNwkKey()
   1640           *
   1641           * @brief   Save off the Network key information.
   1642           *
   1643           * @param   none
   1644           *
   1645           * @return  none
   1646           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1647          void ZDApp_SaveNwkKey( void )
   \                     ZDApp_SaveNwkKey:
   1648          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1649            nwkActiveKeyItems keyItems;
   1650          
   1651            SSP_ReadNwkActiveKey( &keyItems );
   \   00000A                ; Setup parameters for call to function SSP_ReadNwkActiveKey
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   AA82         MOV     R2,DPL
   \   000012   AB83         MOV     R3,DPH
   \   000014   12....       LCALL   ??SSP_ReadNwkActiveKey?relay
   1652          
   1653            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1654                          (void *)&keyItems );
   \   000017                ; Setup parameters for call to function osal_nv_write
   \   000017   85..82       MOV     DPL,?XSP + 0
   \   00001A   85..83       MOV     DPH,?XSP + 1
   \   00001D   8582..       MOV     ?V0 + 0,DPL
   \   000020   8583..       MOV     ?V0 + 1,DPH
   \   000023   78..         MOV     R0,#?V0 + 0
   \   000025   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000028   75..15       MOV     ?V0 + 0,#0x15
   \   00002B   75..00       MOV     ?V0 + 1,#0x0
   \   00002E   78..         MOV     R0,#?V0 + 0
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   7C00         MOV     R4,#0x0
   \   000035   7D00         MOV     R5,#0x0
   \   000037   7A82         MOV     R2,#-0x7e
   \   000039   7B00         MOV     R3,#0x0
   \   00003B   12....       LCALL   ??osal_nv_write?relay
   \   00003E   7404         MOV     A,#0x4
   \   000040   12....       LCALL   ?DEALLOC_XSTACK8
   1655          
   1656            nwkFrameCounterChanges = 0;
   \   000043   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   000046   E4           CLR     A
   \   000047   F0           MOVX    @DPTR,A
   \   000048   A3           INC     DPTR
   \   000049   F0           MOVX    @DPTR,A
   1657          
   1658            // Clear copy in RAM before return.
   1659            osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   00004A                ; Setup parameters for call to function osal_memset
   \   00004A   7C15         MOV     R4,#0x15
   \   00004C   FD           MOV     R5,A
   \   00004D   F9           MOV     R1,A
   \   00004E   85..82       MOV     DPL,?XSP + 0
   \   000051   85..83       MOV     DPH,?XSP + 1
   \   000054   AA82         MOV     R2,DPL
   \   000056   AB83         MOV     R3,DPH
   \   000058   12....       LCALL   ??osal_memset?relay
   1660          
   1661          }
   \   00005B                REQUIRE ?Subroutine9
   \   00005B                ; // Fall through to label ?Subroutine9

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   7415         MOV     A,#0x15
   \   000002   80..         SJMP    ??Subroutine38_0
   1662          
   1663          /*********************************************************************
   1664           * @fn      ZDApp_ResetNwkKey()
   1665           *
   1666           * @brief   Reset the Network key information in NV.
   1667           *
   1668           * @param   none
   1669           *
   1670           * @return  none
   1671           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1672          void ZDApp_ResetNwkKey( void )
   \                     ZDApp_ResetNwkKey:
   1673          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1674            nwkActiveKeyItems keyItems;
   1675          
   1676            osal_memset( &keyItems, 0, sizeof( nwkActiveKeyItems ) );
   \   00000A                ; Setup parameters for call to function osal_memset
   \   00000A   7C15         MOV     R4,#0x15
   \   00000C   7D00         MOV     R5,#0x0
   \   00000E   7900         MOV     R1,#0x0
   \   000010   85..82       MOV     DPL,?XSP + 0
   \   000013   85..83       MOV     DPH,?XSP + 1
   \   000016   AA82         MOV     R2,DPL
   \   000018   AB83         MOV     R3,DPH
   \   00001A   12....       LCALL   ??osal_memset?relay
   1677            osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1678                          (void *)&keyItems );
   \   00001D                ; Setup parameters for call to function osal_nv_write
   \   00001D   85..82       MOV     DPL,?XSP + 0
   \   000020   85..83       MOV     DPH,?XSP + 1
   \   000023   8582..       MOV     ?V0 + 0,DPL
   \   000026   8583..       MOV     ?V0 + 1,DPH
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002E   75..15       MOV     ?V0 + 0,#0x15
   \   000031   75..00       MOV     ?V0 + 1,#0x0
   \   000034   78..         MOV     R0,#?V0 + 0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   7C00         MOV     R4,#0x0
   \   00003B   7D00         MOV     R5,#0x0
   \   00003D   7A82         MOV     R2,#-0x7e
   \   00003F   7B00         MOV     R3,#0x0
   \   000041   12....       LCALL   ??osal_nv_write?relay
   \   000044   7404         MOV     A,#0x4
   \   000046   12....       LCALL   ?DEALLOC_XSTACK8
   1679          }
   \   000049   80..         SJMP    ?Subroutine9
   1680          
   1681          /*********************************************************************
   1682           * @fn      ZDApp_RestoreNwkKey()
   1683           *
   1684           * @brief
   1685           *
   1686           *   Save off the Network key information.
   1687           *
   1688           * @param   none
   1689           *
   1690           * @return  true if restored from NV, false if not
   1691           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1692          uint8 ZDApp_RestoreNwkKey( void )
   \                     ZDApp_RestoreNwkKey:
   1693          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1694            nwkActiveKeyItems keyItems;
   1695            uint8 ret = FALSE;
   \   00000A   7E00         MOV     R6,#0x0
   1696          
   1697            // Restore the key information
   1698            if ( osal_nv_read( ZCD_NV_NWKKEY, 0, sizeof(nwkActiveKeyItems), (void*)&keyItems )
   1699                == ZSUCCESS )
   \   00000C                ; Setup parameters for call to function osal_nv_read
   \   00000C   85..82       MOV     DPL,?XSP + 0
   \   00000F   85..83       MOV     DPH,?XSP + 1
   \   000012   8582..       MOV     ?V0 + 0,DPL
   \   000015   8583..       MOV     ?V0 + 1,DPH
   \   000018   78..         MOV     R0,#?V0 + 0
   \   00001A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001D   75..15       MOV     ?V0 + 0,#0x15
   \   000020   8E..         MOV     ?V0 + 1,R6
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   7C00         MOV     R4,#0x0
   \   000029   7D00         MOV     R5,#0x0
   \   00002B   7A82         MOV     R2,#-0x7e
   \   00002D   7B00         MOV     R3,#0x0
   \   00002F   12....       LCALL   ??osal_nv_read?relay
   \   000032   7404         MOV     A,#0x4
   \   000034   12....       LCALL   ?DEALLOC_XSTACK8
   \   000037   E9           MOV     A,R1
   \   000038   6003         JZ      $+5
   \   00003A   02....       LJMP    ??ZDApp_RestoreNwkKey_0 & 0xFFFF
   1700            {
   1701              uint8 nullKey[SEC_KEY_LEN];
   1702          
   1703              // initialize default value to compare to
   1704              osal_memset( nullKey, 0x00, SEC_KEY_LEN );
   \   00003D                ; Setup parameters for call to function osal_memset
   \   00003D   7C10         MOV     R4,#0x10
   \   00003F   7D00         MOV     R5,#0x0
   \   000041   7900         MOV     R1,#0x0
   \   000043   7415         MOV     A,#0x15
   \   000045   12....       LCALL   ?XSTACK_DISP0_8
   \   000048   AA82         MOV     R2,DPL
   \   00004A   AB83         MOV     R3,DPH
   \   00004C   12....       LCALL   ??osal_memset?relay
   1705          
   1706              // if stored key is different than default value, then a key has been established
   1707              if ( !osal_memcmp( keyItems.active.key, nullKey, SEC_KEY_LEN ) )
   \   00004F                ; Setup parameters for call to function osal_memcmp
   \   00004F   7415         MOV     A,#0x15
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   A982         MOV     R1,DPL
   \   000056   AA83         MOV     R2,DPH
   \   000058   89..         MOV     ?V0 + 0,R1
   \   00005A   8A..         MOV     ?V0 + 1,R2
   \   00005C   8E..         MOV     ?V0 + 2,R6
   \   00005E   78..         MOV     R0,#?V0 + 0
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000063   7C10         MOV     R4,#0x10
   \   000065   7D00         MOV     R5,#0x0
   \   000067   7404         MOV     A,#0x4
   \   000069   12....       LCALL   ?XSTACK_DISP0_8
   \   00006C   A982         MOV     R1,DPL
   \   00006E   AA83         MOV     R2,DPH
   \   000070   7B00         MOV     R3,#0x0
   \   000072   12....       LCALL   ??osal_memcmp?relay
   \   000075   7403         MOV     A,#0x3
   \   000077   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007A   E9           MOV     A,R1
   \   00007B   7064         JNZ     ??ZDApp_RestoreNwkKey_0
   1708              {
   1709                // Increment the frame counter stored in NV
   1710                keyItems.frameCounter += ( MAX_NWK_FRAMECOUNTER_CHANGES +
   1711                                           NWK_FRAMECOUNTER_CHANGES_RESTORE_DELTA );
   \   00007D   90....       MOV     DPTR,#__Constant_4e2
   \   000080   78..         MOV     R0,#?V0 + 0
   \   000082   12....       LCALL   ?L_MOV_X
   \   000085   7411         MOV     A,#0x11
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   78..         MOV     R0,#?V0 + 0
   \   00008C   12....       LCALL   ?L_ADD_TO_X
   1712          
   1713                nwkFrameCounter = keyItems.frameCounter;
   \   00008F   7411         MOV     A,#0x11
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   12....       LCALL   ?XLOAD_R2345
   \   000097   90....       MOV     DPTR,#nwkFrameCounter
   \   00009A   12....       LCALL   ?XSTORE_R2345
   1714          
   1715                // Save the updated Frame Counter right away
   1716                osal_nv_write( ZCD_NV_NWKKEY, 0, sizeof( nwkActiveKeyItems ),
   1717                               (void *)&keyItems );
   \   00009D                ; Setup parameters for call to function osal_nv_write
   \   00009D   85..82       MOV     DPL,?XSP + 0
   \   0000A0   85..83       MOV     DPH,?XSP + 1
   \   0000A3   8582..       MOV     ?V0 + 0,DPL
   \   0000A6   8583..       MOV     ?V0 + 1,DPH
   \   0000A9   78..         MOV     R0,#?V0 + 0
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AE   75..15       MOV     ?V0 + 0,#0x15
   \   0000B1   8E..         MOV     ?V0 + 1,R6
   \   0000B3   78..         MOV     R0,#?V0 + 0
   \   0000B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B8   7C00         MOV     R4,#0x0
   \   0000BA   7D00         MOV     R5,#0x0
   \   0000BC   7A82         MOV     R2,#-0x7e
   \   0000BE   7B00         MOV     R3,#0x0
   \   0000C0   12....       LCALL   ??osal_nv_write?relay
   \   0000C3   7404         MOV     A,#0x4
   \   0000C5   12....       LCALL   ?DEALLOC_XSTACK8
   1718          
   1719                nwkFrameCounterChanges = 0;
   \   0000C8   90....       MOV     DPTR,#nwkFrameCounterChanges
   \   0000CB   E4           CLR     A
   \   0000CC   F0           MOVX    @DPTR,A
   \   0000CD   A3           INC     DPTR
   \   0000CE   F0           MOVX    @DPTR,A
   1720          
   1721                ret = TRUE;
   \   0000CF   0E           INC     R6
   1722          
   1723                // Clear copy in RAM before return.
   1724                osal_memset( &keyItems, 0x00, sizeof(keyItems) );
   \   0000D0                ; Setup parameters for call to function osal_memset
   \   0000D0   7C15         MOV     R4,#0x15
   \   0000D2   FD           MOV     R5,A
   \   0000D3   F9           MOV     R1,A
   \   0000D4   85..82       MOV     DPL,?XSP + 0
   \   0000D7   85..83       MOV     DPH,?XSP + 1
   \   0000DA   AA82         MOV     R2,DPL
   \   0000DC   AB83         MOV     R3,DPH
   \   0000DE   12....       LCALL   ??osal_memset?relay
   1725              }
   1726            }
   1727          
   1728            return ( ret );
   \                     ??ZDApp_RestoreNwkKey_0:
   \   0000E1   EE           MOV     A,R6
   \   0000E2   F9           MOV     R1,A
   \   0000E3   7425         MOV     A,#0x25
   \   0000E5   02....       LJMP    ?Subroutine3 & 0xFFFF
   1729          }
   1730          
   1731          /*********************************************************************
   1732           * @fn      ZDApp_ResetTimerStart
   1733           *
   1734           * @brief   Start the reset timer.
   1735           *
   1736           * @param   delay - delay time(ms) before reset
   1737           *
   1738           * @return  none
   1739           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1740          void ZDApp_ResetTimerStart( uint16 delay )
   \                     ZDApp_ResetTimerStart:
   1741          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   1742            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_DEVICE_RESET ) )
   \   000009                ; Setup parameters for call to function osal_get_timeoutEx
   \   000009   7A04         MOV     R2,#0x4
   \   00000B   7B00         MOV     R3,#0x0
   \   00000D   90....       MOV     DPTR,#ZDAppTaskID
   \   000010   E0           MOVX    A,@DPTR
   \   000011   F9           MOV     R1,A
   \   000012   12....       LCALL   ??osal_get_timeoutEx?relay
   \   000015   EA           MOV     A,R2
   \   000016   4B           ORL     A,R3
   \   000017   4C           ORL     A,R4
   \   000018   4D           ORL     A,R5
   \   000019   701B         JNZ     ??ZDApp_ResetTimerStart_0
   1743            {
   1744              // Start the rest timer
   1745              osal_start_timerEx( ZDAppTaskID, ZDO_DEVICE_RESET, delay );
   \   00001B                ; Setup parameters for call to function osal_start_timerEx
   \   00001B   E4           CLR     A
   \   00001C   F5..         MOV     ?V0 + 2,A
   \   00001E   F5..         MOV     ?V0 + 3,A
   \   000020   78..         MOV     R0,#?V0 + 0
   \   000022   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000025   7A04         MOV     R2,#0x4
   \   000027   7B00         MOV     R3,#0x0
   \   000029   90....       MOV     DPTR,#ZDAppTaskID
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   F9           MOV     R1,A
   \   00002E   12....       LCALL   ??osal_start_timerEx?relay
   \   000031   7404         MOV     A,#0x4
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   1746            }
   1747          }
   \                     ??ZDApp_ResetTimerStart_0:
   \   000036   02....       LJMP    ??Subroutine51_0 & 0xFFFF
   1748          
   1749          /*********************************************************************
   1750           * @fn      ZDApp_ResetTimerCancel
   1751           *
   1752           * @brief   Cancel the reset timer.
   1753           *
   1754           * @param   none
   1755           *
   1756           * @return  none
   1757           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1758          void ZDApp_ResetTimerCancel( void )
   \                     ZDApp_ResetTimerCancel:
   1759          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1760            (void)osal_stop_timerEx(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000004                ; Setup parameters for call to function osal_stop_timerEx
   \   000004   7A04         MOV     R2,#0x4
   \   000006   7B00         MOV     R3,#0x0
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_stop_timerEx?relay
   1761            (void)osal_clear_event(ZDAppTaskID, ZDO_DEVICE_RESET);
   \   000010                ; Setup parameters for call to function osal_clear_event
   \   000010   7A04         MOV     R2,#0x4
   \   000012   7B00         MOV     R3,#0x0
   \   000014   90....       MOV     DPTR,#ZDAppTaskID
   \   000017   E0           MOVX    A,@DPTR
   \   000018   F9           MOV     R1,A
   \   000019   12....       LCALL   ??osal_clear_event?relay
   1762          }
   \   00001C   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   1763          
   1764          /*********************************************************************
   1765           * @fn      ZDApp_LeaveCtrlInit
   1766           *
   1767           * @brief   Initialize the leave control logic.
   1768           *
   1769           * @param   none
   1770           *
   1771           * @return  none
   1772           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1773          void ZDApp_LeaveCtrlInit( void )
   \                     ZDApp_LeaveCtrlInit:
   1774          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1775            uint8 status;
   1776          
   1777          
   1778            // Initialize control state
   1779            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1780          
   1781            status = osal_nv_item_init( ZCD_NV_LEAVE_CTRL,
   1782                                        sizeof(ZDApp_LeaveCtrl),
   1783                                        &ZDApp_LeaveCtrl );
   1784          
   1785            if ( status == ZSUCCESS )
   \   00000A                ; Setup parameters for call to function osal_nv_item_init
   \   00000A   75....       MOV     ?V0 + 0,#ZDApp_LeaveCtrl & 0xff
   \   00000D   75....       MOV     ?V0 + 1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000010   78..         MOV     R0,#?V0 + 0
   \   000012   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000015   7C01         MOV     R4,#0x1
   \   000017   7D00         MOV     R5,#0x0
   \   000019   7A85         MOV     R2,#-0x7b
   \   00001B   7B00         MOV     R3,#0x0
   \   00001D   12....       LCALL   ??osal_nv_item_init?relay
   \   000020   7402         MOV     A,#0x2
   \   000022   12....       LCALL   ?DEALLOC_XSTACK8
   \   000025   E9           MOV     A,R1
   \   000026   7020         JNZ     ??ZDApp_LeaveCtrlInit_0
   1786            {
   1787              // Read saved control
   1788              osal_nv_read( ZCD_NV_LEAVE_CTRL,
   1789                            0,
   1790                            sizeof( uint8 ),
   1791                            &ZDApp_LeaveCtrl);
   \   000028                ; Setup parameters for call to function osal_nv_read
   \   000028   78..         MOV     R0,#?V0 + 0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002D   75..01       MOV     ?V0 + 0,#0x1
   \   000030   75..00       MOV     ?V0 + 1,#0x0
   \   000033   78..         MOV     R0,#?V0 + 0
   \   000035   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000038   7C00         MOV     R4,#0x0
   \   00003A   7D00         MOV     R5,#0x0
   \   00003C   7A85         MOV     R2,#-0x7b
   \   00003E   7B00         MOV     R3,#0x0
   \   000040   12....       LCALL   ??osal_nv_read?relay
   \   000043   7404         MOV     A,#0x4
   \   000045   12....       LCALL   ?DEALLOC_XSTACK8
   1792            }
   1793          }
   \                     ??ZDApp_LeaveCtrlInit_0:
   \   000048   02....       LJMP    ??Subroutine39_0 & 0xFFFF
   1794          
   1795          /*********************************************************************
   1796           * @fn      ZDApp_LeaveCtrlSet
   1797           *
   1798           * @brief   Set the leave control logic.
   1799           *
   1800           * @param   ra - reassociate flag
   1801           *
   1802           * @return  none
   1803           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   75....       MOV     ?V0 + 0,#ZDApp_LeaveCtrl & 0xff
   \   000003   75....       MOV     ?V0 + 1,#(ZDApp_LeaveCtrl >> 8) & 0xff
   \   000006   78..         MOV     R0,#?V0 + 0
   \   000008   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00000B   75..01       MOV     ?V0 + 0,#0x1
   \   00000E   75..00       MOV     ?V0 + 1,#0x0
   \   000011   78..         MOV     R0,#?V0 + 0
   \   000013   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000016   7C00         MOV     R4,#0x0
   \   000018   7D00         MOV     R5,#0x0
   \   00001A   7A85         MOV     R2,#-0x7b
   \   00001C   7B00         MOV     R3,#0x0
   \   00001E   12....       LCALL   ??osal_nv_write?relay
   \   000021   7404         MOV     A,#0x4
   \   000023                REQUIRE ??Subroutine38_0
   \   000023                ; // Fall through to label ??Subroutine38_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1804          void ZDApp_LeaveCtrlSet( uint8 ra )
   \                     ZDApp_LeaveCtrlSet:
   1805          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   1806            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_SET;
   \   000007   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000A   7401         MOV     A,#0x1
   \   00000C   F0           MOVX    @DPTR,A
   1807          
   1808            if ( ra == TRUE )
   \   00000D   6E           XRL     A,R6
   \   00000E   7003         JNZ     ??ZDApp_LeaveCtrlSet_0
   1809            {
   1810              ZDApp_LeaveCtrl |= ZDAPP_LEAVE_CTRL_RA;
   \   000010   7403         MOV     A,#0x3
   \   000012   F0           MOVX    @DPTR,A
   1811            }
   1812          
   1813            // Write the leave control
   1814            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1815                           0,
   1816                           sizeof( uint8 ),
   1817                           &ZDApp_LeaveCtrl);
   \                     ??ZDApp_LeaveCtrlSet_0:
   \   000013                ; Setup parameters for call to function osal_nv_write
   \   000013   02....       LJMP    ?Subroutine5 & 0xFFFF
   1818          }
   1819          
   1820          /*********************************************************************
   1821           * @fn      ZDApp_LeaveCtrlReset
   1822           *
   1823           * @brief   Re-initialize the leave control logic.
   1824           *
   1825           * @param   none
   1826           *
   1827           * @return  none
   1828           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1829          void ZDApp_LeaveCtrlReset( void )
   \                     ZDApp_LeaveCtrlReset:
   1830          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   1831            // Set leave control to initialized state
   1832            ZDApp_LeaveCtrl = ZDAPP_LEAVE_CTRL_INIT;
   \   000005   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   1833          
   1834            // Write initialized control
   1835            osal_nv_write( ZCD_NV_LEAVE_CTRL,
   1836                          0,
   1837                          sizeof( uint8 ),
   1838                          &ZDApp_LeaveCtrl);
   \   00000A                ; Setup parameters for call to function osal_nv_write
   \   00000A   02....       LJMP    ?Subroutine5 & 0xFFFF
   1839          }
   1840          
   1841          /*********************************************************************
   1842           * @fn      ZDApp_LeaveCtrlBypass
   1843           *
   1844           * @brief   Check if NV restore should be skipped during a leave reset.
   1845           *
   1846           * @param   none
   1847           *
   1848           * @return  uint8 - (TRUE bypass:FALSE do not bypass)
   1849           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1850          uint8 ZDApp_LeaveCtrlBypass( void )
   \                     ZDApp_LeaveCtrlBypass:
   1851          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1852            uint8 bypass;
   1853          
   1854            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   1855            {
   1856              bypass = TRUE;
   1857            }
   1858            else
   1859            {
   1860              bypass = FALSE;
   1861            }
   1862          
   1863            return bypass;
   \   000004   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   000007   E0           MOVX    A,@DPTR
   \   000008   A2E0         MOV     C,0xE0 /* A   */.0
   \   00000A   E4           CLR     A
   \   00000B   33           RLC     A
   \   00000C   F9           MOV     R1,A
   \   00000D   80..         SJMP    ??Subroutine40_0
   1864          }
   1865          
   1866          /*********************************************************************
   1867           * @fn      ZDApp_LeaveCtrlStartup
   1868           *
   1869           * @brief   Check for startup conditions during a leave reset.
   1870           *
   1871           * @param   state      - devState_t determined by leave control logic
   1872           * @param   startDelay - startup delay
   1873           *
   1874           * @return  none
   1875           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1876          void ZDApp_LeaveCtrlStartup( devStates_t* state, uint16* startDelay )
   \                     ZDApp_LeaveCtrlStartup:
   1877          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1878            *startDelay = 0;
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   E4           CLR     A
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   F0           MOVX    @DPTR,A
   1879          
   1880            if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_SET )
   \   00000C   90....       MOV     DPTR,#ZDApp_LeaveCtrl
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   A2E0         MOV     C,0xE0 /* A   */.0
   \   000012   5019         JNC     ??ZDApp_LeaveCtrlStartup_0
   1881            {
   1882              if ( ZDApp_LeaveCtrl & ZDAPP_LEAVE_CTRL_RA )
   \   000014   A2E1         MOV     C,0xE0 /* A   */.1
   \   000016   500C         JNC     ??ZDApp_LeaveCtrlStartup_1
   1883              {
   1884                *startDelay = LEAVE_RESET_DELAY;
   \   000018   8C82         MOV     DPL,R4
   \   00001A   8D83         MOV     DPH,R5
   \   00001C   7488         MOV     A,#-0x78
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   7413         MOV     A,#0x13
   \   000022   8005         SJMP    ??ZDApp_LeaveCtrlStartup_2
   1885              }
   1886              else
   1887              {
   1888                *state = DEV_HOLD;
   \                     ??ZDApp_LeaveCtrlStartup_1:
   \   000024   8A82         MOV     DPL,R2
   \   000026   8B83         MOV     DPH,R3
   \   000028   E4           CLR     A
   \                     ??ZDApp_LeaveCtrlStartup_2:
   \   000029   F0           MOVX    @DPTR,A
   1889              }
   1890          
   1891              // Reset leave control logic
   1892              ZDApp_LeaveCtrlReset();
   \   00002A                ; Setup parameters for call to function ZDApp_LeaveCtrlReset
   \   00002A   12....       LCALL   ??ZDApp_LeaveCtrlReset?relay
   1893            }
   1894          }
   \                     ??ZDApp_LeaveCtrlStartup_0:
   \   00002D   80..         SJMP    ??Subroutine40_0
   1895          
   1896          /*********************************************************************
   1897           * @fn      ZDApp_LeaveReset
   1898           *
   1899           * @brief   Setup a device reset due to a leave indication/confirm.
   1900           *
   1901           * @param   ra - reassociate flag
   1902           *
   1903           * @return  none
   1904           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1905          void ZDApp_LeaveReset( uint8 ra )
   \                     ZDApp_LeaveReset:
   1906          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   1907            ZDApp_LeaveCtrlSet( ra );
   \   000005                ; Setup parameters for call to function ZDApp_LeaveCtrlSet
   \   000005   12....       LCALL   ??ZDApp_LeaveCtrlSet?relay
   1908          
   1909            ZDApp_ResetTimerStart( LEAVE_RESET_DELAY );
   \   000008                ; Setup parameters for call to function ZDApp_ResetTimerStart
   \   000008   7A88         MOV     R2,#-0x78
   \   00000A   7B13         MOV     R3,#0x13
   \   00000C   12....       LCALL   ??ZDApp_ResetTimerStart?relay
   1910          }
   \   00000F   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   1911          
   1912          /*********************************************************************
   1913           * @fn      ZDApp_LeaveUpdate
   1914           *
   1915           * @brief   Update local device data related to leaving device.
   1916           *
   1917           * @param   nwkAddr        - NWK address of leaving device
   1918           * @param   extAddr        - EXT address of leaving device
   1919           * @param   removeChildren - remove children of leaving device
   1920           *
   1921           * @return  none
   1922           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1923          void ZDApp_LeaveUpdate( uint16 nwkAddr, uint8* extAddr,
   \                     ZDApp_LeaveUpdate:
   1924                                  uint8 removeChildren )
   1925          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   \   00000E   EC           MOV     A,R4
   \   00000F   FE           MOV     R6,A
   \   000010   ED           MOV     A,R5
   \   000011   FF           MOV     R7,A
   \   000012   89..         MOV     ?V0 + 2,R1
   1926            // Remove Apps Key for leaving device
   1927            ZDSecMgrDeviceRemoveByExtAddr(extAddr);
   \   000014                ; Setup parameters for call to function ZDSecMgrDeviceRemoveByExtAddr
   \   000014   EE           MOV     A,R6
   \   000015   FA           MOV     R2,A
   \   000016   EF           MOV     A,R7
   \   000017   FB           MOV     R3,A
   \   000018   12....       LCALL   ??ZDSecMgrDeviceRemoveByExtAddr?relay
   1928          
   1929            // Clear SECURITY bit from Address Manager
   1930            ZDSecMgrAddrClear( extAddr );
   \   00001B                ; Setup parameters for call to function ZDSecMgrAddrClear
   \   00001B   EE           MOV     A,R6
   \   00001C   FA           MOV     R2,A
   \   00001D   EF           MOV     A,R7
   \   00001E   FB           MOV     R3,A
   \   00001F   12....       LCALL   ??ZDSecMgrAddrClear?relay
   1931          
   1932            if ( pbindRemoveDev )
   \   000022   90....       MOV     DPTR,#pbindRemoveDev
   \   000025   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   000028   603B         JZ      ??ZDApp_LeaveUpdate_0
   1933            {
   1934              zAddrType_t devAddr;
   1935          
   1936              // Remove bind entry and all related data
   1937              devAddr.addrMode = Addr64Bit;
   \   00002A   7410         MOV     A,#0x10
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   7403         MOV     A,#0x3
   \   000031   F0           MOVX    @DPTR,A
   1938              osal_memcpy(devAddr.addr.extAddr, extAddr, Z_EXTADDR_LEN);
   \   000032                ; Setup parameters for call to function osal_memcpy
   \   000032   8E..         MOV     ?V0 + 4,R6
   \   000034   8F..         MOV     ?V0 + 5,R7
   \   000036   75..00       MOV     ?V0 + 6,#0x0
   \   000039   78..         MOV     R0,#?V0 + 4
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003E   7C08         MOV     R4,#0x8
   \   000040   7D00         MOV     R5,#0x0
   \   000042   740B         MOV     A,#0xb
   \   000044   12....       LCALL   ?XSTACK_DISP0_8
   \   000047   AA82         MOV     R2,DPL
   \   000049   AB83         MOV     R3,DPH
   \   00004B   12....       LCALL   ??osal_memcpy?relay
   \   00004E   7403         MOV     A,#0x3
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
   1939          
   1940              pbindRemoveDev(&devAddr);
   \   000053                ; Setup parameters for indirect call
   \   000053   7408         MOV     A,#0x8
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   AA82         MOV     R2,DPL
   \   00005A   AB83         MOV     R3,DPH
   \   00005C   90....       MOV     DPTR,#pbindRemoveDev
   \   00005F   12....       LCALL   ?Subroutine22 & 0xFFFF
   1941            }
   \                     ??CrossCallReturnLabel_93:
   \   000062   12....       LCALL   ?CALL_IND
   1942          
   1943            // Remove if child
   1944            if ( ZSTACK_ROUTER_BUILD )
   1945            {
   1946              // Router shall notify the Trust Center that a child device has left the network
   1947              if ( AssocIsChild( nwkAddr ) == TRUE )
   \                     ??ZDApp_LeaveUpdate_0:
   \   000065                ; Setup parameters for call to function AssocIsChild
   \   000065   AA..         MOV     R2,?V0 + 0
   \   000067   AB..         MOV     R3,?V0 + 1
   \   000069   12....       LCALL   ??AssocIsChild?relay
   \   00006C   E9           MOV     A,R1
   \   00006D   6401         XRL     A,#0x1
   \   00006F   7045         JNZ     ??ZDApp_LeaveUpdate_1
   1948              {
   1949                  APSME_UpdateDeviceReq_t req;
   1950          
   1951                  // forward authorization to the Trust Center
   1952                  req.dstAddr    = APSME_TRUSTCENTER_NWKADDR;
   \   000071   85..82       MOV     DPL,?XSP + 0
   \   000074   85..83       MOV     DPH,?XSP + 1
   \   000077   E4           CLR     A
   \   000078   F0           MOVX    @DPTR,A
   \   000079   A3           INC     DPTR
   \   00007A   F0           MOVX    @DPTR,A
   1953                  req.devAddr    = nwkAddr;
   \   00007B   7402         MOV     A,#0x2
   \   00007D   12....       LCALL   ?XSTACK_DISP0_8
   \   000080   12....       LCALL   ??Subroutine47_0 & 0xFFFF
   1954                  req.devExtAddr = extAddr;
   \                     ??CrossCallReturnLabel_87:
   \   000083   7404         MOV     A,#0x4
   \   000085   12....       LCALL   ?XSTACK_DISP0_8
   \   000088   EE           MOV     A,R6
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   EF           MOV     A,R7
   \   00008C   F0           MOVX    @DPTR,A
   1955                  req.status = APSME_UD_DEVICE_LEFT;
   \   00008D   7406         MOV     A,#0x6
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   7402         MOV     A,#0x2
   \   000094   F0           MOVX    @DPTR,A
   1956          
   1957                  if ( ZG_CHECK_SECURITY_MODE == ZG_SECURITY_SE_STANDARD )
   1958                  {
   1959                    // For ZG_GLOBAL_LINK_KEY the message has to be sent twice one
   1960                    // un-encrypted and one APS encrypted, to make sure that it can interoperate
   1961                    // with legacy Coordinator devices which can only handle one or the other.
   1962                    if ( zgApsLinkKeyType == ZG_GLOBAL_LINK_KEY )
   \   000095   90....       MOV     DPTR,#zgApsLinkKeyType
   \   000098   E0           MOVX    A,@DPTR
   \   000099   6401         XRL     A,#0x1
   \   00009B   700C         JNZ     ??ZDApp_LeaveUpdate_2
   1963                    {
   1964                      req.apsSecure = FALSE;
   \   00009D   7407         MOV     A,#0x7
   \   00009F   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A2   E4           CLR     A
   \   0000A3   12....       LCALL   ?Subroutine10 & 0xFFFF
   1965          
   1966                      // send and APSME_UPDATE_DEVICE request to the trust center
   1967                      APSME_UpdateDeviceReq( &req );
   1968                    }
   \                     ??CrossCallReturnLabel_1:
   \   0000A6   12....       LCALL   ??APSME_UpdateDeviceReq?relay
   1969          
   1970                    // send the message APS encrypted
   1971                    req.apsSecure = TRUE;
   \                     ??ZDApp_LeaveUpdate_2:
   \   0000A9   7407         MOV     A,#0x7
   \   0000AB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000AE   7401         MOV     A,#0x1
   \   0000B0   12....       LCALL   ?Subroutine10 & 0xFFFF
   1972          
   1973                    // send and APSME_UPDATE_DEVICE request to the trust center
   1974                    APSME_UpdateDeviceReq( &req );
   1975                  }
   1976                  else
   1977                  {
   1978                    req.apsSecure = FALSE;
   1979          
   1980                    // send and APSME_UPDATE_DEVICE request to the trust center
   1981                    APSME_UpdateDeviceReq( &req );
   1982                  }
   1983              }
   \                     ??CrossCallReturnLabel_2:
   \   0000B3   12....       LCALL   ??APSME_UpdateDeviceReq?relay
   1984          
   1985              NLME_RemoveChild( extAddr, removeChildren );
   \                     ??ZDApp_LeaveUpdate_1:
   \   0000B6                ; Setup parameters for call to function NLME_RemoveChild
   \   0000B6   A9..         MOV     R1,?V0 + 2
   \   0000B8   EE           MOV     A,R6
   \   0000B9   FA           MOV     R2,A
   \   0000BA   EF           MOV     A,R7
   \   0000BB   FB           MOV     R3,A
   \   0000BC   12....       LCALL   ??NLME_RemoveChild?relay
   1986            }
   1987          
   1988            // Remove Routing table related entry
   1989            RTG_RemoveRtgEntry( nwkAddr, 0 );
   \   0000BF                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   0000BF   7900         MOV     R1,#0x0
   \   0000C1   AA..         MOV     R2,?V0 + 0
   \   0000C3   AB..         MOV     R3,?V0 + 1
   \   0000C5   12....       LCALL   ??RTG_RemoveRtgEntry?relay
   1990          
   1991            // Remove entry from neighborTable
   1992            nwkNeighborRemove( nwkAddr, _NIB.nwkPanId );
   \   0000C8                ; Setup parameters for call to function nwkNeighborRemove
   \   0000C8   90....       MOV     DPTR,#_NIB + 33
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   FC           MOV     R4,A
   \   0000CD   A3           INC     DPTR
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   FD           MOV     R5,A
   \   0000D0   AA..         MOV     R2,?V0 + 0
   \   0000D2   AB..         MOV     R3,?V0 + 1
   \   0000D4   12....       LCALL   ??nwkNeighborRemove?relay
   1993          
   1994            // Schedule to save data to NV
   1995            ZDApp_NwkWriteNVRequest();
   \   0000D7                ; Setup parameters for call to function AddrMgrWriteNVRequest
   \   0000D7   12....       LCALL   ??AddrMgrWriteNVRequest?relay
   1996          }
   \   0000DA   7411         MOV     A,#0x11
   \   0000DC                REQUIRE ?Subroutine6
   \   0000DC                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003   7F07         MOV     R7,#0x7
   \   000005   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003                REQUIRE ??Subroutine49_0
   \   000003                ; // Fall through to label ??Subroutine49_0
   1997          
   1998          /*********************************************************************
   1999           * @fn      ZDApp_NetworkDiscoveryReq
   2000           *
   2001           * @brief   Request a network discovery.
   2002           *
   2003           * @param  scanChannels -
   2004           * @param  scanDuration -
   2005           *
   2006           * @return  ZStatus_t
   2007           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2008          ZStatus_t ZDApp_NetworkDiscoveryReq( uint32 scanChannels, uint8 scanDuration)
   \                     ZDApp_NetworkDiscoveryReq:
   2009          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   2010            // Setup optional filters - tbd
   2011          
   2012            // Request NLME network discovery
   2013            return NLME_NetworkDiscoveryRequest(scanChannels, scanDuration);
   \   000005                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000005   12....       LCALL   ??NLME_NetworkDiscoveryRequest?relay
   \   000008   02....       LJMP    ??Subroutine51_0 & 0xFFFF
   2014          }
   2015          
   2016          /*********************************************************************
   2017           * @fn      ZDApp_JoinReq
   2018           *
   2019           * @brief   Request the device to join a parent in a network.
   2020           *
   2021           * @param   channel -
   2022           * @param   panID -
   2023           *
   2024           * @return  ZStatus_t
   2025           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2026          ZStatus_t ZDApp_JoinReq( uint8 channel, uint16 panID, uint8 *extendedPanID,
   \                     ZDApp_JoinReq:
   2027                                   uint16 chosenParent, uint8 parentDepth, uint8 stackProfile )
   2028          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 4,R1
   \   000007   8A..         MOV     ?V0 + 0,R2
   \   000009   8B..         MOV     ?V0 + 1,R3
   \   00000B   EC           MOV     A,R4
   \   00000C   FE           MOV     R6,A
   \   00000D   ED           MOV     A,R5
   \   00000E   FF           MOV     R7,A
   \   00000F   740E         MOV     A,#0xe
   \   000011   12....       LCALL   ?XSTACK_DISP0_8
   \   000014   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000017   7410         MOV     A,#0x10
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 5,A
   \   00001F   7411         MOV     A,#0x11
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   E0           MOVX    A,@DPTR
   \   000025   F9           MOV     R1,A
   2029            // Sync up the node with the stack profile (In the case where a pro device
   2030            // joins a non-pro network, or verse versa)
   2031            ZDApp_NodeProfileSync( stackProfile);
   \   000026                ; Setup parameters for call to function ZDApp_NodeProfileSync
   \   000026   12....       LCALL   ??ZDApp_NodeProfileSync?relay
   2032          
   2033            // Request NLME Join Request
   2034            return NLME_JoinRequest(extendedPanID, panID,channel,
   2035                                    ZDO_Config_Node_Descriptor.CapabilityFlags,
   2036                                    chosenParent, parentDepth);
   \   000029                ; Setup parameters for call to function NLME_JoinRequest
   \   000029   78..         MOV     R0,#?V0 + 5
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002E   78..         MOV     R0,#?V0 + 2
   \   000030   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000033   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F5..         MOV     ?V0 + 2,A
   \   000039   78..         MOV     R0,#?V0 + 2
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00003E   A9..         MOV     R1,?V0 + 4
   \   000040   AC..         MOV     R4,?V0 + 0
   \   000042   AD..         MOV     R5,?V0 + 1
   \   000044   EE           MOV     A,R6
   \   000045   FA           MOV     R2,A
   \   000046   EF           MOV     A,R7
   \   000047   FB           MOV     R3,A
   \   000048   12....       LCALL   ??NLME_JoinRequest?relay
   \   00004B   7404         MOV     A,#0x4
   \   00004D   02....       LJMP    ?Subroutine1 & 0xFFFF
   2037          
   2038          }
   2039          
   2040          /*********************************************************************
   2041           * @fn      ZDApp_DeviceConfigured
   2042           *
   2043           * @brief   Check to see if the local device is configured (i.e., part
   2044           *          of a network).
   2045           *
   2046           * @param   none
   2047           *
   2048           * @return  TRUE if configured. FALSE, otherwise.
   2049           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2050          uint8 ZDApp_DeviceConfigured( void )
   \                     ZDApp_DeviceConfigured:
   2051          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2052            uint16 nwkAddr = INVALID_NODE_ADDR;
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   74FE         MOV     A,#-0x2
   \   000012   F0           MOVX    @DPTR,A
   \   000013   A3           INC     DPTR
   \   000014   04           INC     A
   \   000015   F0           MOVX    @DPTR,A
   2053          
   2054            osal_nv_read( ZCD_NV_NIB, osal_offsetof( nwkIB_t, nwkDevAddress ),
   2055                          sizeof( uint16), &nwkAddr );
   \   000016                ; Setup parameters for call to function osal_nv_read
   \   000016   85..82       MOV     DPL,?XSP + 0
   \   000019   85..83       MOV     DPH,?XSP + 1
   \   00001C   8582..       MOV     ?V0 + 0,DPL
   \   00001F   8583..       MOV     ?V0 + 1,DPH
   \   000022   78..         MOV     R0,#?V0 + 0
   \   000024   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000027   75..02       MOV     ?V0 + 0,#0x2
   \   00002A   75..00       MOV     ?V0 + 1,#0x0
   \   00002D   78..         MOV     R0,#?V0 + 0
   \   00002F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000032   7C14         MOV     R4,#0x14
   \   000034   7D00         MOV     R5,#0x0
   \   000036   7A21         MOV     R2,#0x21
   \   000038   7B00         MOV     R3,#0x0
   \   00003A   12....       LCALL   ??osal_nv_read?relay
   \   00003D   7404         MOV     A,#0x4
   \   00003F   12....       LCALL   ?DEALLOC_XSTACK8
   2056          
   2057            // Does the NIB have anything more than default?
   2058            return ( nwkAddr == INVALID_NODE_ADDR ? FALSE : TRUE );
   \   000042   85..82       MOV     DPL,?XSP + 0
   \   000045   85..83       MOV     DPH,?XSP + 1
   \   000048   E0           MOVX    A,@DPTR
   \   000049   64FE         XRL     A,#0xfe
   \   00004B   7003         JNZ     ??ZDApp_DeviceConfigured_0
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F4           CPL     A
   \                     ??ZDApp_DeviceConfigured_0:
   \   000050   7004         JNZ     ??ZDApp_DeviceConfigured_1
   \   000052   7900         MOV     R1,#0x0
   \   000054   8002         SJMP    ??ZDApp_DeviceConfigured_2
   \                     ??ZDApp_DeviceConfigured_1:
   \   000056   7901         MOV     R1,#0x1
   \                     ??ZDApp_DeviceConfigured_2:
   \   000058   02....       LJMP    ?Subroutine8 & 0xFFFF
   2059          }
   2060          
   2061          /*********************************************************************
   2062           * CALLBACK FUNCTIONS
   2063           */
   2064          
   2065          
   2066          /*********************************************************************
   2067           * @fn      ZDApp_SendEventMsg()
   2068           *
   2069           * @brief
   2070           *
   2071           *   Sends a Network Join message
   2072           *
   2073           * @param  cmd - command ID
   2074           * @param  len - length (in bytes) of the buf field
   2075           * @param  buf - buffer for the rest of the message.
   2076           *
   2077           * @return  none
   2078           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2079          void ZDApp_SendEventMsg( uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendEventMsg:
   2080          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   2081            ZDApp_SendMsg( ZDAppTaskID, cmd, len, buf );
   \   000008                ; Setup parameters for call to function ZDApp_SendMsg
   \   000008   FB           MOV     R3,A
   \   000009   EE           MOV     A,R6
   \   00000A   FA           MOV     R2,A
   \   00000B   90....       MOV     DPTR,#ZDAppTaskID
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F9           MOV     R1,A
   \   000010   12....       LCALL   ??ZDApp_SendMsg?relay
   2082          }
   \   000013   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   2083          
   2084          /*********************************************************************
   2085           * @fn      ZDApp_SendMsg()
   2086           *
   2087           * @brief   Sends a OSAL message
   2088           *
   2089           * @param  taskID - Where to send the message
   2090           * @param  cmd - command ID
   2091           * @param  len - length (in bytes) of the buf field
   2092           * @param  buf - buffer for the rest of the message.
   2093           *
   2094           * @return  none
   2095           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2096          void ZDApp_SendMsg( uint8 taskID, uint8 cmd, uint8 len, uint8 *buf )
   \                     ZDApp_SendMsg:
   2097          {
   \   000000   74ED         MOV     A,#-0x13
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 19
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 4,R1
   \   000007   8A..         MOV     ?V0 + 6,R2
   \   000009   8B..         MOV     ?V0 + 5,R3
   \   00000B   8C..         MOV     ?V0 + 2,R4
   \   00000D   8D..         MOV     ?V0 + 3,R5
   2098            osal_event_hdr_t *msgPtr;
   2099          
   2100            // Send the address to the task
   2101            msgPtr = (osal_event_hdr_t *)osal_msg_allocate( len );
   \   00000F   8B82         MOV     DPL,R3
   \   000011   8582..       MOV     ?V0 + 0,DPL
   \   000014   75..00       MOV     ?V0 + 1,#0x0
   \   000017                ; Setup parameters for call to function osal_msg_allocate
   \   000017   AA..         MOV     R2,?V0 + 0
   \   000019   AB..         MOV     R3,?V0 + 1
   \   00001B   12....       LCALL   ??osal_msg_allocate?relay
   \   00001E   8A..         MOV     ?V0 + 8,R2
   \   000020   8B..         MOV     ?V0 + 9,R3
   \   000022   AE..         MOV     R6,?V0 + 8
   \   000024   AF..         MOV     R7,?V0 + 9
   2102            if ( msgPtr )
   \   000026   EE           MOV     A,R6
   \   000027   4F           ORL     A,R7
   \   000028   6034         JZ      ??ZDApp_SendMsg_0
   2103            {
   2104              if ( (len > 0) && (buf != NULL) )
   \   00002A   E5..         MOV     A,?V0 + 5
   \   00002C   6020         JZ      ??ZDApp_SendMsg_1
   \   00002E   E5..         MOV     A,?V0 + 2
   \   000030   45..         ORL     A,?V0 + 3
   \   000032   601A         JZ      ??ZDApp_SendMsg_1
   2105                osal_memcpy( msgPtr, buf, len );
   \   000034                ; Setup parameters for call to function osal_memcpy
   \   000034   85....       MOV     ?V0 + 8,?V0 + 2
   \   000037   85....       MOV     ?V0 + 9,?V0 + 3
   \   00003A   75..00       MOV     ?V0 + 10,#0x0
   \   00003D   78..         MOV     R0,#?V0 + 8
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000042   AC..         MOV     R4,?V0 + 0
   \   000044   AD..         MOV     R5,?V0 + 1
   \   000046   12....       LCALL   ??osal_memcpy?relay
   \   000049   7403         MOV     A,#0x3
   \   00004B   12....       LCALL   ?DEALLOC_XSTACK8
   2106          
   2107              msgPtr->event = cmd;
   \                     ??ZDApp_SendMsg_1:
   \   00004E   8E82         MOV     DPL,R6
   \   000050   8F83         MOV     DPH,R7
   \   000052   E5..         MOV     A,?V0 + 6
   \   000054   F0           MOVX    @DPTR,A
   2108              osal_msg_send( taskID, (uint8 *)msgPtr );
   \   000055                ; Setup parameters for call to function osal_msg_send
   \   000055   EE           MOV     A,R6
   \   000056   FA           MOV     R2,A
   \   000057   EF           MOV     A,R7
   \   000058   FB           MOV     R3,A
   \   000059   A9..         MOV     R1,?V0 + 4
   \   00005B   12....       LCALL   ??osal_msg_send?relay
   2109            }
   2110          }
   \                     ??ZDApp_SendMsg_0:
   \   00005E   7F0B         MOV     R7,#0xb
   \   000060   02....       LJMP    ?BANKED_LEAVE_XDATA
   2111          
   2112          /*********************************************************************
   2113           * Call Back Functions from NWK  - API
   2114           */
   2115          
   2116          /*********************************************************************
   2117           * @fn          ZDO_NetworkDiscoveryConfirmCB
   2118           *
   2119           * @brief       This function returns a choice of PAN to join.
   2120           *
   2121           * @param       status - return status of the nwk discovery confirm
   2122           *
   2123           * @return      ZStatus_t
   2124           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine40_0
   \   000003                ; // Fall through to label ??Subroutine40_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2125          ZStatus_t ZDO_NetworkDiscoveryConfirmCB(uint8 status)
   \                     ZDO_NetworkDiscoveryConfirmCB:
   2126          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 3
   \   000004   74FD         MOV     A,#-0x3
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   \   000009   E9           MOV     A,R1
   \   00000A   85..82       MOV     DPL,?XSP + 0
   \   00000D   85..83       MOV     DPH,?XSP + 1
   \   000010   F0           MOVX    @DPTR,A
   2127            osal_event_hdr_t msg;
   2128          
   2129            // If Scan is initiated by ZDO_MGMT_NWK_DISC_REQ
   2130            // Send ZDO_MGMT_NWK_DISC_RSP back
   2131          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   2132            if ( zdappMgmtNwkDiscReqInProgress )
   2133            {
   2134              zdappMgmtNwkDiscReqInProgress = false;
   2135              ZDO_FinishProcessingMgmtNwkDiscReq();
   2136            }
   2137            else
   2138          #endif
   2139            {
   2140              // Pass the confirm to another task if it registers the callback
   2141              // Otherwise, pass the confirm to ZDApp.
   2142              if (zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID] != NULL )
   \   000011   90....       MOV     DPTR,#zdoCBFunc + 4
   \   000014   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_64:
   \   000017   6013         JZ      ??ZDO_NetworkDiscoveryConfirmCB_0
   2143              {
   2144                zdoCBFunc[ZDO_NWK_DISCOVERY_CNF_CBID]( (void*)&status );
   \   000019                ; Setup parameters for indirect call
   \   000019   85..82       MOV     DPL,?XSP + 0
   \   00001C   85..83       MOV     DPH,?XSP + 1
   \   00001F   AA82         MOV     R2,DPL
   \   000021   AB83         MOV     R3,DPH
   \   000023   8882         MOV     DPL,R0
   \   000025   8983         MOV     DPH,R1
   \   000027   12....       LCALL   ?CALL_IND
   \   00002A   801B         SJMP    ??ZDO_NetworkDiscoveryConfirmCB_1
   2145              }
   2146              else
   2147              {
   2148                // Otherwise, send scan confirm to ZDApp task to proceed
   2149                msg.status = ZDO_SUCCESS;
   \                     ??ZDO_NetworkDiscoveryConfirmCB_0:
   \   00002C   7402         MOV     A,#0x2
   \   00002E   12....       LCALL   ?XSTACK_DISP0_8
   \   000031   E4           CLR     A
   \   000032   F0           MOVX    @DPTR,A
   2150                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_DISC_CNF, sizeof(osal_event_hdr_t), (uint8 *)&msg );
   \   000033                ; Setup parameters for call to function ZDApp_SendMsg
   \   000033   04           INC     A
   \   000034   12....       LCALL   ?XSTACK_DISP0_8
   \   000037   AC82         MOV     R4,DPL
   \   000039   AD83         MOV     R5,DPH
   \   00003B   7B02         MOV     R3,#0x2
   \   00003D   7A01         MOV     R2,#0x1
   \   00003F   90....       MOV     DPTR,#ZDAppTaskID
   \   000042   E0           MOVX    A,@DPTR
   \   000043   F9           MOV     R1,A
   \   000044   12....       LCALL   ??ZDApp_SendMsg?relay
   2151              }
   2152            }
   2153            return (ZSuccess);
   \                     ??ZDO_NetworkDiscoveryConfirmCB_1:
   \   000047   7900         MOV     R1,#0x0
   \   000049   7403         MOV     A,#0x3
   \   00004B   02....       LJMP    ?Subroutine4 & 0xFFFF
   2154          }  // ZDO_NetworkDiscoveryConfirmCB
   2155          
   2156          /*********************************************************************
   2157           * @fn          ZDApp_NwkDescListProcessing
   2158           *
   2159           * @brief       This function process the network discovery result and select
   2160           *              a parent device to join itself.
   2161           *
   2162           * @param       none
   2163           *
   2164           * @return      ZStatus_t
   2165           */
   2166          #define STACK_PROFILE_MAX 2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2167          networkDesc_t* ZDApp_NwkDescListProcessing(void)
   \                     ZDApp_NwkDescListProcessing:
   2168          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2169            networkDesc_t *pNwkDesc;
   2170            uint8 i, ResultCount = 0;
   \   000005   75..00       MOV     ?V0 + 0,#0x0
   2171            uint8 stackProfile;
   2172            uint8 stackProfilePro;
   2173            uint8 selected;
   2174          
   2175            // Count the number of nwk descriptors in the list
   2176            pNwkDesc = nwk_getNwkDescList();
   \   000008                ; Setup parameters for call to function nwk_getNwkDescList
   \   000008   12....       LCALL   ??nwk_getNwkDescList?relay
   \   00000B   8A..         MOV     ?V0 + 2,R2
   \   00000D   8B..         MOV     ?V0 + 3,R3
   \   00000F   AE..         MOV     R6,?V0 + 2
   \   000011   AF..         MOV     R7,?V0 + 3
   \   000013   8005         SJMP    ??CrossCallReturnLabel_83
   2177            while (pNwkDesc)
   2178            {
   2179              ResultCount++;
   \                     ??ZDApp_NwkDescListProcessing_0:
   \   000015   05..         INC     ?V0 + 0
   2180              pNwkDesc = pNwkDesc->nextDesc;
   \   000017   12....       LCALL   ?Subroutine20 & 0xFFFF
   2181            }
   \                     ??CrossCallReturnLabel_83:
   \   00001A   EE           MOV     A,R6
   \   00001B   4F           ORL     A,R7
   \   00001C   70F7         JNZ     ??ZDApp_NwkDescListProcessing_0
   2182          
   2183            // process discovery results
   2184            stackProfilePro = FALSE;
   \   00001E   75..00       MOV     ?V0 + 3,#0x0
   2185            selected = FALSE;
   2186          
   2187          
   2188            for ( stackProfile = 0; stackProfile < STACK_PROFILE_MAX; stackProfile++ )
   \   000021   75..00       MOV     ?V0 + 1,#0x0
   2189            {
   2190              pNwkDesc = nwk_getNwkDescList();
   \                     ??ZDApp_NwkDescListProcessing_1:
   \   000024                ; Setup parameters for call to function nwk_getNwkDescList
   \   000024   12....       LCALL   ??nwk_getNwkDescList?relay
   \   000027   8A..         MOV     ?V0 + 4,R2
   \   000029   8B..         MOV     ?V0 + 5,R3
   \   00002B   AE..         MOV     R6,?V0 + 4
   \   00002D   AF..         MOV     R7,?V0 + 5
   2191              for ( i = 0; i < ResultCount; i++, pNwkDesc = pNwkDesc->nextDesc )
   \   00002F   75..00       MOV     ?V0 + 2,#0x0
   \   000032   8019         SJMP    ??CrossCallReturnLabel_84
   2192              {
   2193                 if ( nwk_ExtPANIDValid( ZDO_UseExtendedPANID ) == true )
   2194                {
   2195                  // If the extended Pan ID is commissioned to a non zero value
   2196                  // Only join the Pan that has match EPID
   2197                  if ( osal_ExtAddrEqual( ZDO_UseExtendedPANID, pNwkDesc->extendedPANID) == false )
   2198                    continue;
   2199          
   2200                }
   2201                else if ( zgConfigPANID != 0xFFFF )
   2202                {
   2203                  // PAN Id is preconfigured. check if it matches
   2204                  if ( pNwkDesc->panId != zgConfigPANID )
   2205                    continue;
   2206                }
   2207          
   2208                // check that network is allowing joining
   2209                if ( ZSTACK_ROUTER_BUILD )
   2210                {
   2211                  if ( stackProfilePro == FALSE )
   2212                  {
   2213                    if ( !pNwkDesc->routerCapacity )
   2214                    {
   2215                      continue;
   2216                    }
   2217                  }
   2218                  else
   2219                  {
   2220                    if ( !pNwkDesc->deviceCapacity )
   2221                    {
   2222                      continue;
   2223                    }
   2224                  }
   2225                }
   2226                else if ( ZSTACK_END_DEVICE_BUILD )
   2227                {
   2228                  if ( !pNwkDesc->deviceCapacity )
   2229                  {
   2230                    continue;
   2231                  }
   2232                }
   2233          
   2234                // check version of zigbee protocol
   2235                if ( pNwkDesc->version != _NIB.nwkProtocolVersion )
   2236                  continue;
   2237          
   2238                // check version of stack profile
   2239                if ( pNwkDesc->stackProfile != zgStackProfile  )
   2240                {
   2241                  if ( ((zgStackProfile == HOME_CONTROLS) && (pNwkDesc->stackProfile == ZIGBEEPRO_PROFILE))
   2242                      || ((zgStackProfile == ZIGBEEPRO_PROFILE) && (pNwkDesc->stackProfile == HOME_CONTROLS))  )
   \                     ??ZDApp_NwkDescListProcessing_2:
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6402         XRL     A,#0x2
   \   000037   7008         JNZ     ??ZDApp_NwkDescListProcessing_3
   \   000039   7401         MOV     A,#0x1
   \   00003B   68           XRL     A,R0
   \   00003C   7003         JNZ     ??ZDApp_NwkDescListProcessing_3
   2243                  {
   2244                    stackProfilePro = TRUE;
   \                     ??ZDApp_NwkDescListProcessing_4:
   \   00003E   75..01       MOV     ?V0 + 3,#0x1
   2245                  }
   2246          
   2247                  if ( stackProfile == 0 )
   \                     ??ZDApp_NwkDescListProcessing_3:
   \   000041   E5..         MOV     A,?V0 + 1
   \   000043   6003         JZ      $+5
   \   000045   02....       LJMP    ??ZDApp_NwkDescListProcessing_5 & 0xFFFF
   \                     ??ZDApp_NwkDescListProcessing_6:
   \   000048   05..         INC     ?V0 + 2
   \   00004A   12....       LCALL   ?Subroutine20 & 0xFFFF
   \                     ??CrossCallReturnLabel_84:
   \   00004D   E5..         MOV     A,?V0 + 2
   \   00004F   C3           CLR     C
   \   000050   95..         SUBB    A,?V0 + 0
   \   000052   4003         JC      $+5
   \   000054   02....       LJMP    ??ZDApp_NwkDescListProcessing_7 & 0xFFFF
   \   000057                ; Setup parameters for call to function nwk_ExtPANIDValid
   \   000057   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000059   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00005B   12....       LCALL   ??nwk_ExtPANIDValid?relay
   \   00005E   E9           MOV     A,R1
   \   00005F   6401         XRL     A,#0x1
   \   000061   7014         JNZ     ??ZDApp_NwkDescListProcessing_8
   \   000063                ; Setup parameters for call to function sAddrExtCmp
   \   000063   EE           MOV     A,R6
   \   000064   240B         ADD     A,#0xb
   \   000066   FC           MOV     R4,A
   \   000067   EF           MOV     A,R7
   \   000068   3400         ADDC    A,#0x0
   \   00006A   FD           MOV     R5,A
   \   00006B   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   00006D   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   00006F   12....       LCALL   ??sAddrExtCmp?relay
   \   000072   E9           MOV     A,R1
   \   000073   701D         JNZ     ??ZDApp_NwkDescListProcessing_9
   \   000075   80D1         SJMP    ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_8:
   \   000077   90....       MOV     DPTR,#zgConfigPANID
   \   00007A   E0           MOVX    A,@DPTR
   \   00007B   F4           CPL     A
   \   00007C   7003         JNZ     ??ZDApp_NwkDescListProcessing_10
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   F4           CPL     A
   \                     ??ZDApp_NwkDescListProcessing_10:
   \   000081   600F         JZ      ??ZDApp_NwkDescListProcessing_9
   \   000083   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_45:
   \   000086   90....       MOV     DPTR,#zgConfigPANID
   \   000089   E0           MOVX    A,@DPTR
   \   00008A   68           XRL     A,R0
   \   00008B   7003         JNZ     ??ZDApp_NwkDescListProcessing_11
   \   00008D   A3           INC     DPTR
   \   00008E   E0           MOVX    A,@DPTR
   \   00008F   69           XRL     A,R1
   \                     ??ZDApp_NwkDescListProcessing_11:
   \   000090   70B6         JNZ     ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_9:
   \   000092   E5..         MOV     A,?V0 + 3
   \   000094   8E82         MOV     DPL,R6
   \   000096   8F83         MOV     DPH,R7
   \   000098   A3           INC     DPTR
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   7005         JNZ     ??ZDApp_NwkDescListProcessing_12
   \   00009D   E0           MOVX    A,@DPTR
   \   00009E   7006         JNZ     ??ZDApp_NwkDescListProcessing_13
   \   0000A0   80A6         SJMP    ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_12:
   \   0000A2   A3           INC     DPTR
   \   0000A3   E0           MOVX    A,@DPTR
   \   0000A4   60A2         JZ      ??ZDApp_NwkDescListProcessing_6
   \                     ??ZDApp_NwkDescListProcessing_13:
   \   0000A6   8E82         MOV     DPL,R6
   \   0000A8   8F83         MOV     DPH,R7
   \   0000AA   A3           INC     DPTR
   \   0000AB   A3           INC     DPTR
   \   0000AC   A3           INC     DPTR
   \   0000AD   A3           INC     DPTR
   \   0000AE   A3           INC     DPTR
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F8           MOV     R0,A
   \   0000B1   90....       MOV     DPTR,#_NIB + 17
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   68           XRL     A,R0
   \   0000B6   7090         JNZ     ??ZDApp_NwkDescListProcessing_6
   \   0000B8   8E82         MOV     DPL,R6
   \   0000BA   8F83         MOV     DPH,R7
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   A3           INC     DPTR
   \   0000C2   E0           MOVX    A,@DPTR
   \   0000C3   F8           MOV     R0,A
   \   0000C4   90....       MOV     DPTR,#zgStackProfile
   \   0000C7   E0           MOVX    A,@DPTR
   \   0000C8   68           XRL     A,R0
   \   0000C9   602F         JZ      ??ZDApp_NwkDescListProcessing_5
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   6401         XRL     A,#0x1
   \   0000CE   6003         JZ      $+5
   \   0000D0   02....       LJMP    ??ZDApp_NwkDescListProcessing_2 & 0xFFFF
   \   0000D3   7402         MOV     A,#0x2
   \   0000D5   68           XRL     A,R0
   \   0000D6   6003         JZ      $+5
   \   0000D8   02....       LJMP    ??ZDApp_NwkDescListProcessing_3 & 0xFFFF
   \   0000DB   02....       LJMP    ??ZDApp_NwkDescListProcessing_4 & 0xFFFF
   2248                  {
   2249                    continue;
   2250                  }
   2251                }
   2252          
   2253                break;
   2254              }
   2255          
   2256              if (i < ResultCount)
   2257              {
   2258               selected = TRUE;
   2259                break;
   2260              }
   2261          
   2262              // break if selected or stack profile pro wasn't found
   2263              if ( (selected == TRUE) || (stackProfilePro == FALSE) )
   \                     ??ZDApp_NwkDescListProcessing_7:
   \   0000DE   E5..         MOV     A,?V0 + 3
   \   0000E0   600C         JZ      ??ZDApp_NwkDescListProcessing_14
   2264              {
   2265                break;
   2266              }
   2267            }
   \   0000E2   05..         INC     ?V0 + 1
   \   0000E4   E5..         MOV     A,?V0 + 1
   \   0000E6   C3           CLR     C
   \   0000E7   9402         SUBB    A,#0x2
   \   0000E9   5003         JNC     $+5
   \   0000EB   02....       LJMP    ??ZDApp_NwkDescListProcessing_1 & 0xFFFF
   2268          
   2269            if ( i == ResultCount )
   \                     ??ZDApp_NwkDescListProcessing_14:
   \   0000EE   E5..         MOV     A,?V0 + 0
   \   0000F0   65..         XRL     A,?V0 + 2
   \   0000F2   7006         JNZ     ??ZDApp_NwkDescListProcessing_5
   2270            {
   2271              return (NULL);   // couldn't find appropriate PAN to join !
   \   0000F4   7A00         MOV     R2,#0x0
   \   0000F6   7B00         MOV     R3,#0x0
   \   0000F8   8004         SJMP    ??ZDApp_NwkDescListProcessing_15
   2272            }
   2273            else
   2274            {
   2275              return (pNwkDesc);
   \                     ??ZDApp_NwkDescListProcessing_5:
   \   0000FA   EE           MOV     A,R6
   \   0000FB   FA           MOV     R2,A
   \   0000FC   EF           MOV     A,R7
   \   0000FD   FB           MOV     R3,A
   2276            }
   \                     ??ZDApp_NwkDescListProcessing_15:
   \   0000FE   02....       LJMP    ??Subroutine36_0 & 0xFFFF
   2277          }// ZDApp_NwkDescListProcessing()

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine41_0
   \   000004                ; // Fall through to label ??Subroutine41_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   EE           MOV     A,R6
   \   000001   2414         ADD     A,#0x14
   \   000003   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000006                REQUIRE ??Subroutine45_0
   \   000006                ; // Fall through to label ??Subroutine45_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine45_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine46_0
   \   000003                ; // Fall through to label ??Subroutine46_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine46_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET
   2278          
   2279          /*********************************************************************
   2280           * @fn          ZDO_NetworkFormationConfirmCB
   2281           *
   2282           * @brief       This function reports the results of the request to
   2283           *              initialize a coordinator in a network.
   2284           *
   2285           * @param       Status - Result of NLME_NetworkFormationRequest()
   2286           *
   2287           * @return      none
   2288           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2289          void ZDO_NetworkFormationConfirmCB( ZStatus_t Status )
   \                     ZDO_NetworkFormationConfirmCB:
   2290          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2291            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2292          
   2293            if ( Status == ZSUCCESS )
   \   00000A   7017         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   2294            {
   2295              // LED on shows Coordinator started
   2296              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7904         MOV     R1,#0x4
   \   000010   12....       LCALL   ??HalLedSet?relay
   2297          
   2298              // LED off forgets HOLD_AUTO_START
   2299              HalLedSet (HAL_LED_4, HAL_LED_MODE_OFF);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7908         MOV     R1,#0x8
   \   000017   12....       LCALL   ??HalLedSet?relay
   2300          
   2301          #if defined ( ZBIT )
   2302              SIM_SetColor(0xd0ffd0);
   2303          #endif
   2304          
   2305              if ( devState == DEV_HOLD )
   \   00001A   90....       MOV     DPTR,#devState
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   7003         JNZ     ??ZDO_NetworkFormationConfirmCB_0
   2306              {
   2307                // Began with HOLD_AUTO_START
   2308                devState = DEV_COORD_STARTING;
   \   000020   7408         MOV     A,#0x8
   \   000022   F0           MOVX    @DPTR,A
   2309              }
   2310            }
   2311          #if defined(BLINK_LEDS)
   2312            else
   2313            {
   2314              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2315            }
   2316          #endif
   2317          
   2318            osal_set_event( ZDAppTaskID, ZDO_NETWORK_START );
   \                     ??ZDO_NetworkFormationConfirmCB_0:
   \   000023                ; Setup parameters for call to function osal_set_event
   \   000023   7A02         MOV     R2,#0x2
   \   000025   02....       LJMP    ?Subroutine0 & 0xFFFF
   2319          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7B00         MOV     R3,#0x0
   \   000002   90....       MOV     DPTR,#ZDAppTaskID
   \   000005   E0           MOVX    A,@DPTR
   \   000006   F9           MOV     R1,A
   \   000007   12....       LCALL   ??osal_set_event?relay
   \   00000A                REQUIRE ??Subroutine44_0
   \   00000A                ; // Fall through to label ??Subroutine44_0
   2320          
   2321          /****************************************************************************
   2322           * @fn          ZDApp_beaconIndProcessing
   2323           *
   2324           * @brief       This function processes the incoming beacon indication.
   2325           *
   2326           *              When another task (MT or App) is registered to process
   2327           *              beacon indication themselves, this function will parse the
   2328           *              beacon payload and pass the beacon descriptor to that task
   2329           *              If no other tasks registered, this function will process
   2330           *              the beacon payload and generate the network descriptor link
   2331           *              list.
   2332           *
   2333           * @param
   2334           *
   2335           * @return      none
   2336           *
   2337           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2338          void ZDO_beaconNotifyIndCB( NLME_beaconInd_t *pBeacon )
   \                     ZDO_beaconNotifyIndCB:
   2339          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   2340            // Pass the beacon Indication to another task if it registers the callback
   2341            // Otherwise, process the beacon notification here.
   2342            if (zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID] != NULL )
   \   000009   90....       MOV     DPTR,#zdoCBFunc + 6
   \   00000C   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   00000F   6006         JZ      ??ZDO_beaconNotifyIndCB_0
   2343            {
   2344              zdoCBFunc[ZDO_BEACON_NOTIFY_IND_CBID]( (void*)pBeacon );
   \   000011                ; Setup parameters for indirect call
   \   000011   12....       LCALL   ?CALL_IND
   \   000014   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2345            }
   2346            else
   2347            {
   2348              networkDesc_t *pNwkDesc;
   2349              networkDesc_t *pLastNwkDesc;
   2350              uint8 found = false;
   2351          
   2352              // Add the network to the Network Descriptor List
   2353              pNwkDesc = NwkDescList;
   \                     ??ZDO_beaconNotifyIndCB_0:
   \   000017   90....       MOV     DPTR,#NwkDescList
   \   00001A   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   2354              pLastNwkDesc = NwkDescList;
   \                     ??CrossCallReturnLabel_80:
   \   00001D   90....       MOV     DPTR,#NwkDescList
   \   000020   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000023   EA           MOV     A,R2
   \   000024   2404         ADD     A,#0x4
   \   000026   F5..         MOV     ?V0 + 6,A
   \   000028   EB           MOV     A,R3
   \   000029   3400         ADDC    A,#0x0
   \   00002B   F5..         MOV     ?V0 + 7,A
   \   00002D   EA           MOV     A,R2
   \   00002E   2402         ADD     A,#0x2
   \   000030   F5..         MOV     ?V0 + 4,A
   \   000032   EB           MOV     A,R3
   \   000033   3400         ADDC    A,#0x0
   \   000035   F5..         MOV     ?V0 + 5,A
   \   000037   802B         SJMP    ??CrossCallReturnLabel_85
   2355              while (pNwkDesc)
   2356              {
   2357                if ((pNwkDesc->panId == pBeacon->panID) &&
   2358                    (pNwkDesc->logicalChannel == pBeacon->logicalChannel))
   \                     ??ZDO_beaconNotifyIndCB_2:
   \   000039   12....       LCALL   ?Subroutine26 & 0xFFFF
   \                     ??CrossCallReturnLabel_46:
   \   00003C   85..82       MOV     DPL,?V0 + 4
   \   00003F   85..83       MOV     DPH,?V0 + 5
   \   000042   E0           MOVX    A,@DPTR
   \   000043   68           XRL     A,R0
   \   000044   7003         JNZ     ??ZDO_beaconNotifyIndCB_3
   \   000046   A3           INC     DPTR
   \   000047   E0           MOVX    A,@DPTR
   \   000048   69           XRL     A,R1
   \                     ??ZDO_beaconNotifyIndCB_3:
   \   000049   7012         JNZ     ??ZDO_beaconNotifyIndCB_4
   \   00004B   8E82         MOV     DPL,R6
   \   00004D   8F83         MOV     DPH,R7
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   F8           MOV     R0,A
   \   000053   85..82       MOV     DPL,?V0 + 6
   \   000056   85..83       MOV     DPH,?V0 + 7
   \   000059   E0           MOVX    A,@DPTR
   \   00005A   68           XRL     A,R0
   \   00005B   6067         JZ      ??ZDO_beaconNotifyIndCB_5
   2359                {
   2360                  found = true;
   2361                  break;
   2362                }
   2363                pLastNwkDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_4:
   \   00005D   8E..         MOV     ?V0 + 2,R6
   \   00005F   8F..         MOV     ?V0 + 3,R7
   2364                pNwkDesc = pNwkDesc->nextDesc;
   \   000061   12....       LCALL   ?Subroutine20 & 0xFFFF
   2365              }
   \                     ??CrossCallReturnLabel_85:
   \   000064   EE           MOV     A,R6
   \   000065   4F           ORL     A,R7
   \   000066   70D1         JNZ     ??ZDO_beaconNotifyIndCB_2
   2366          
   2367              // If no existing descriptor found, make a new one and add to the list
   2368              if (found == false)
   2369              {
   2370                pNwkDesc = osal_mem_alloc( sizeof(networkDesc_t)  );
   \   000068                ; Setup parameters for call to function osal_mem_alloc
   \   000068   7A16         MOV     R2,#0x16
   \   00006A   7B00         MOV     R3,#0x0
   \   00006C   12....       LCALL   ??osal_mem_alloc?relay
   \   00006F   8A..         MOV     ?V0 + 8,R2
   \   000071   8B..         MOV     ?V0 + 9,R3
   \   000073   AE..         MOV     R6,?V0 + 8
   \   000075   AF..         MOV     R7,?V0 + 9
   2371                if ( !pNwkDesc )
   \   000077   EE           MOV     A,R6
   \   000078   4F           ORL     A,R7
   \   000079   7003         JNZ     $+5
   \   00007B   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2372                {
   2373                  // Memory alloc failed, discard this beacon
   2374                  return;
   2375                }
   2376          
   2377                // Clear the network descriptor
   2378                osal_memset( pNwkDesc, 0, sizeof(networkDesc_t)  );
   \   00007E                ; Setup parameters for call to function osal_memset
   \   00007E   7C16         MOV     R4,#0x16
   \   000080   7D00         MOV     R5,#0x0
   \   000082   7900         MOV     R1,#0x0
   \   000084   12....       LCALL   ??osal_memset?relay
   2379          
   2380                // Initialize the descriptor
   2381                pNwkDesc->chosenRouter = INVALID_NODE_ADDR;
   \   000087   8E82         MOV     DPL,R6
   \   000089   8F83         MOV     DPH,R7
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   74FE         MOV     A,#-0x2
   \   000094   F0           MOVX    @DPTR,A
   \   000095   A3           INC     DPTR
   \   000096   04           INC     A
   \   000097   F0           MOVX    @DPTR,A
   2382                pNwkDesc->chosenRouterDepth = 0xFF;
   \   000098   8E82         MOV     DPL,R6
   \   00009A   8F83         MOV     DPH,R7
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   F0           MOVX    @DPTR,A
   2383          
   2384                // Save new entry into the descriptor list
   2385                if ( !NwkDescList )
   \   0000A7   90....       MOV     DPTR,#NwkDescList
   \   0000AA   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_65:
   \   0000AD   7005         JNZ     ??ZDO_beaconNotifyIndCB_6
   2386                {
   2387                  NwkDescList = pNwkDesc;
   \   0000AF   90....       MOV     DPTR,#NwkDescList
   \   0000B2   800B         SJMP    ??CrossCallReturnLabel_111
   2388                }
   2389                else
   2390                {
   2391                  pLastNwkDesc->nextDesc = pNwkDesc;
   \                     ??ZDO_beaconNotifyIndCB_6:
   \   0000B4   E5..         MOV     A,?V0 + 2
   \   0000B6   2414         ADD     A,#0x14
   \   0000B8   F582         MOV     DPL,A
   \   0000BA   E5..         MOV     A,?V0 + 3
   \   0000BC   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   2392                }
   2393              }
   \                     ??CrossCallReturnLabel_111:
   \   0000BF   EE           MOV     A,R6
   \   0000C0   F0           MOVX    @DPTR,A
   \   0000C1   A3           INC     DPTR
   \   0000C2   EF           MOV     A,R7
   \   0000C3   F0           MOVX    @DPTR,A
   2394          
   2395              // Update the descriptor with the incoming beacon
   2396              pNwkDesc->stackProfile   = pBeacon->stackProfile;
   \                     ??ZDO_beaconNotifyIndCB_5:
   \   0000C4   85..82       MOV     DPL,?V0 + 0
   \   0000C7   85..83       MOV     DPH,?V0 + 1
   \   0000CA   A3           INC     DPTR
   \   0000CB   A3           INC     DPTR
   \   0000CC   A3           INC     DPTR
   \   0000CD   A3           INC     DPTR
   \   0000CE   A3           INC     DPTR
   \   0000CF   A3           INC     DPTR
   \   0000D0   A3           INC     DPTR
   \   0000D1   A3           INC     DPTR
   \   0000D2   A3           INC     DPTR
   \   0000D3   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   0000D6   A3           INC     DPTR
   \   0000D7   F0           MOVX    @DPTR,A
   2397              pNwkDesc->version        = pBeacon->protocolVersion;
   \   0000D8   E5..         MOV     A,?V0 + 0
   \   0000DA   2408         ADD     A,#0x8
   \   0000DC   F8           MOV     R0,A
   \   0000DD   E5..         MOV     A,?V0 + 1
   \   0000DF   3400         ADDC    A,#0x0
   \   0000E1   F9           MOV     R1,A
   \   0000E2   8882         MOV     DPL,R0
   \   0000E4   8983         MOV     DPH,R1
   \   0000E6   12....       LCALL   ?Subroutine24 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   0000E9   F0           MOVX    @DPTR,A
   2398              pNwkDesc->logicalChannel = pBeacon->logicalChannel;
   \   0000EA   85..82       MOV     DPL,?V0 + 6
   \   0000ED   85..83       MOV     DPH,?V0 + 7
   \   0000F0   E0           MOVX    A,@DPTR
   \   0000F1   8E82         MOV     DPL,R6
   \   0000F3   8F83         MOV     DPH,R7
   \   0000F5   A3           INC     DPTR
   \   0000F6   A3           INC     DPTR
   \   0000F7   F0           MOVX    @DPTR,A
   2399              pNwkDesc->panId          = pBeacon->panID;
   \   0000F8   85..82       MOV     DPL,?V0 + 4
   \   0000FB   85..83       MOV     DPH,?V0 + 5
   \   0000FE   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   000101   8E82         MOV     DPL,R6
   \   000103   8F83         MOV     DPH,R7
   \   000105   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   2400              pNwkDesc->updateId       = pBeacon->updateID;
   \                     ??CrossCallReturnLabel_96:
   \   000108   E5..         MOV     A,?V0 + 0
   \   00010A   240C         ADD     A,#0xc
   \   00010C   F582         MOV     DPL,A
   \   00010E   E5..         MOV     A,?V0 + 1
   \   000110   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_103:
   \   000113   C0E0         PUSH    A
   \   000115   EE           MOV     A,R6
   \   000116   2413         ADD     A,#0x13
   \   000118   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   00011B   D0E0         POP     A
   \   00011D   F0           MOVX    @DPTR,A
   2401          
   2402              // Save the extended PAN ID from the beacon payload only if 1.1 version network
   2403              if ( pBeacon->protocolVersion != ZB_PROT_V1_0 )
   \   00011E   EE           MOV     A,R6
   \   00011F   240B         ADD     A,#0xb
   \   000121   FA           MOV     R2,A
   \   000122   EF           MOV     A,R7
   \   000123   3400         ADDC    A,#0x0
   \   000125   FB           MOV     R3,A
   \   000126   8882         MOV     DPL,R0
   \   000128   8983         MOV     DPH,R1
   \   00012A   E0           MOVX    A,@DPTR
   \   00012B   6401         XRL     A,#0x1
   \   00012D   600F         JZ      ??ZDO_beaconNotifyIndCB_7
   2404              {
   2405                osal_cpyExtAddr( pNwkDesc->extendedPANID, pBeacon->extendedPanID );
   \   00012F                ; Setup parameters for call to function sAddrExtCpy
   \   00012F   E5..         MOV     A,?V0 + 0
   \   000131   240D         ADD     A,#0xd
   \   000133   FC           MOV     R4,A
   \   000134   E5..         MOV     A,?V0 + 1
   \   000136   3400         ADDC    A,#0x0
   \   000138   FD           MOV     R5,A
   \   000139   12....       LCALL   ??sAddrExtCpy?relay
   \   00013C   8009         SJMP    ??ZDO_beaconNotifyIndCB_8
   2406              }
   2407              else
   2408              {
   2409                osal_memset( pNwkDesc->extendedPANID, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_beaconNotifyIndCB_7:
   \   00013E                ; Setup parameters for call to function osal_memset
   \   00013E   7C08         MOV     R4,#0x8
   \   000140   7D00         MOV     R5,#0x0
   \   000142   79FF         MOV     R1,#-0x1
   \   000144   12....       LCALL   ??osal_memset?relay
   2410              }
   2411          
   2412              // check if this device is a better choice to join...
   2413              // ...dont bother checking assocPermit flag is doing a rejoin
   2414              if ( ( pBeacon->LQI > gMIN_TREE_LINK_COST ) &&
   2415                  ( ( pBeacon->permitJoining == TRUE ) || ( _tmpRejoinState ) ) )
   \                     ??ZDO_beaconNotifyIndCB_8:
   \   000147   E5..         MOV     A,?V0 + 0
   \   000149   240A         ADD     A,#0xa
   \   00014B   F8           MOV     R0,A
   \   00014C   E5..         MOV     A,?V0 + 1
   \   00014E   3400         ADDC    A,#0x0
   \   000150   F9           MOV     R1,A
   \   000151   8882         MOV     DPL,R0
   \   000153   8983         MOV     DPH,R1
   \   000155   E0           MOVX    A,@DPTR
   \   000156   F5..         MOV     ?V0 + 6,A
   \   000158   90....       MOV     DPTR,#gMIN_TREE_LINK_COST
   \   00015B   E0           MOVX    A,@DPTR
   \   00015C   C3           CLR     C
   \   00015D   95..         SUBB    A,?V0 + 6
   \   00015F   4003         JC      $+5
   \   000161   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   \   000164   85..82       MOV     DPL,?V0 + 0
   \   000167   85..83       MOV     DPH,?V0 + 1
   \   00016A   A3           INC     DPTR
   \   00016B   A3           INC     DPTR
   \   00016C   A3           INC     DPTR
   \   00016D   A3           INC     DPTR
   \   00016E   A3           INC     DPTR
   \   00016F   E0           MOVX    A,@DPTR
   \   000170   6401         XRL     A,#0x1
   \   000172   6009         JZ      ??ZDO_beaconNotifyIndCB_9
   \   000174   90....       MOV     DPTR,#_tmpRejoinState
   \   000177   E0           MOVX    A,@DPTR
   \   000178   7003         JNZ     $+5
   \   00017A   02....       LJMP    ??ZDO_beaconNotifyIndCB_1 & 0xFFFF
   2416              {
   2417                uint8 selected = FALSE;
   2418                uint8 capacity = FALSE;
   2419          
   2420                if ( _NIB.nwkAddrAlloc == NWK_ADDRESSING_STOCHASTIC )
   \                     ??ZDO_beaconNotifyIndCB_9:
   \   00017D   E5..         MOV     A,?V0 + 0
   \   00017F   2406         ADD     A,#0x6
   \   000181   FA           MOV     R2,A
   \   000182   E5..         MOV     A,?V0 + 1
   \   000184   3400         ADDC    A,#0x0
   \   000186   FB           MOV     R3,A
   \   000187   EE           MOV     A,R6
   \   000188   240A         ADD     A,#0xa
   \   00018A   FC           MOV     R4,A
   \   00018B   EF           MOV     A,R7
   \   00018C   3400         ADDC    A,#0x0
   \   00018E   FD           MOV     R5,A
   \   00018F   E5..         MOV     A,?V0 + 0
   \   000191   240B         ADD     A,#0xb
   \   000193   F5..         MOV     ?V0 + 2,A
   \   000195   E5..         MOV     A,?V0 + 1
   \   000197   3400         ADDC    A,#0x0
   \   000199   F5..         MOV     ?V0 + 3,A
   \   00019B   EE           MOV     A,R6
   \   00019C   2409         ADD     A,#0x9
   \   00019E   F5..         MOV     ?V0 + 4,A
   \   0001A0   EF           MOV     A,R7
   \   0001A1   3400         ADDC    A,#0x0
   \   0001A3   F5..         MOV     ?V0 + 5,A
   \   0001A5   90....       MOV     DPTR,#_NIB + 96
   \   0001A8   E0           MOVX    A,@DPTR
   \   0001A9   6402         XRL     A,#0x2
   \   0001AB   7022         JNZ     ??ZDO_beaconNotifyIndCB_10
   2421                {
   2422                  if ( ((pBeacon->LQI   > pNwkDesc->chosenRouterLinkQuality) &&
   2423                        (pBeacon->depth < MAX_NODE_DEPTH)) ||
   2424                      ((pBeacon->LQI   == pNwkDesc->chosenRouterLinkQuality) &&
   2425                       (pBeacon->depth < pNwkDesc->chosenRouterDepth)) )
   \   0001AD   85..82       MOV     DPL,?V0 + 4
   \   0001B0   85..83       MOV     DPH,?V0 + 5
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   F5..         MOV     ?V0 + 7,A
   \   0001B6   C3           CLR     C
   \   0001B7   95..         SUBB    A,?V0 + 6
   \   0001B9   500E         JNC     ??ZDO_beaconNotifyIndCB_11
   \   0001BB   85..82       MOV     DPL,?V0 + 2
   \   0001BE   85..83       MOV     DPH,?V0 + 3
   \   0001C1   E0           MOVX    A,@DPTR
   \   0001C2   C3           CLR     C
   \   0001C3   9414         SUBB    A,#0x14
   \   0001C5   401B         JC      ??ZDO_beaconNotifyIndCB_12
   \   0001C7   8057         SJMP    ??ZDO_beaconNotifyIndCB_13
   \                     ??ZDO_beaconNotifyIndCB_11:
   \   0001C9   E5..         MOV     A,?V0 + 7
   \   0001CB   65..         XRL     A,?V0 + 6
   \   0001CD   7051         JNZ     ??ZDO_beaconNotifyIndCB_13
   2426                  {
   2427                    selected = TRUE;
   2428                  }
   2429                }
   2430                else
   2431                {
   2432                  if ( pBeacon->depth < pNwkDesc->chosenRouterDepth )
   \                     ??ZDO_beaconNotifyIndCB_10:
   \   0001CF   8C82         MOV     DPL,R4
   \   0001D1   8D83         MOV     DPH,R5
   \   0001D3   E0           MOVX    A,@DPTR
   \   0001D4   F5..         MOV     ?V0 + 6,A
   \   0001D6   85..82       MOV     DPL,?V0 + 2
   \   0001D9   85..83       MOV     DPH,?V0 + 3
   \   0001DC   E0           MOVX    A,@DPTR
   \   0001DD   C3           CLR     C
   \   0001DE   95..         SUBB    A,?V0 + 6
   \   0001E0   503E         JNC     ??ZDO_beaconNotifyIndCB_13
   2433                  {
   2434                    selected = TRUE;
   2435                  }
   2436                }
   2437          
   2438                if ( ZSTACK_ROUTER_BUILD )
   2439                {
   2440                  capacity = pBeacon->routerCapacity;
   2441                }
   2442                else if ( ZSTACK_END_DEVICE_BUILD )
   2443                {
   2444                  capacity = pBeacon->deviceCapacity;
   2445                }
   2446          
   2447                if ( (capacity) && (selected) )
   \                     ??ZDO_beaconNotifyIndCB_12:
   \   0001E2   8A82         MOV     DPL,R2
   \   0001E4   8B83         MOV     DPH,R3
   \   0001E6   E0           MOVX    A,@DPTR
   \   0001E7   6037         JZ      ??ZDO_beaconNotifyIndCB_13
   2448                {
   2449                  // this is the new chosen router for joining...
   2450                  pNwkDesc->chosenRouter            = pBeacon->sourceAddr;
   \   0001E9   85..82       MOV     DPL,?V0 + 0
   \   0001EC   85..83       MOV     DPH,?V0 + 1
   \   0001EF   E0           MOVX    A,@DPTR
   \   0001F0   F5..         MOV     ?V0 + 6,A
   \   0001F2   A3           INC     DPTR
   \   0001F3   E0           MOVX    A,@DPTR
   \   0001F4   F5..         MOV     ?V0 + 7,A
   \   0001F6   8E82         MOV     DPL,R6
   \   0001F8   8F83         MOV     DPH,R7
   \   0001FA   A3           INC     DPTR
   \   0001FB   A3           INC     DPTR
   \   0001FC   A3           INC     DPTR
   \   0001FD   A3           INC     DPTR
   \   0001FE   A3           INC     DPTR
   \   0001FF   A3           INC     DPTR
   \   000200   A3           INC     DPTR
   \   000201   E5..         MOV     A,?V0 + 6
   \   000203   F0           MOVX    @DPTR,A
   \   000204   A3           INC     DPTR
   \   000205   E5..         MOV     A,?V0 + 7
   \   000207   F0           MOVX    @DPTR,A
   2451                  pNwkDesc->chosenRouterLinkQuality = pBeacon->LQI;
   \   000208   8882         MOV     DPL,R0
   \   00020A   8983         MOV     DPH,R1
   \   00020C   E0           MOVX    A,@DPTR
   \   00020D   85..82       MOV     DPL,?V0 + 4
   \   000210   85..83       MOV     DPH,?V0 + 5
   \   000213   F0           MOVX    @DPTR,A
   2452                  pNwkDesc->chosenRouterDepth       = pBeacon->depth;
   \   000214   85..82       MOV     DPL,?V0 + 2
   \   000217   85..83       MOV     DPH,?V0 + 3
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   8C82         MOV     DPL,R4
   \   00021D   8D83         MOV     DPH,R5
   \   00021F   F0           MOVX    @DPTR,A
   2453                }
   2454          
   2455                if ( pBeacon->deviceCapacity )
   \                     ??ZDO_beaconNotifyIndCB_13:
   \   000220   85..82       MOV     DPL,?V0 + 0
   \   000223   85..83       MOV     DPH,?V0 + 1
   \   000226   A3           INC     DPTR
   \   000227   A3           INC     DPTR
   \   000228   A3           INC     DPTR
   \   000229   A3           INC     DPTR
   \   00022A   A3           INC     DPTR
   \   00022B   A3           INC     DPTR
   \   00022C   A3           INC     DPTR
   \   00022D   E0           MOVX    A,@DPTR
   \   00022E   600B         JZ      ??ZDO_beaconNotifyIndCB_14
   2456                  pNwkDesc->deviceCapacity = 1;
   \   000230   8E82         MOV     DPL,R6
   \   000232   8F83         MOV     DPH,R7
   \   000234   A3           INC     DPTR
   \   000235   A3           INC     DPTR
   \   000236   A3           INC     DPTR
   \   000237   A3           INC     DPTR
   \   000238   7401         MOV     A,#0x1
   \   00023A   F0           MOVX    @DPTR,A
   2457          
   2458                if ( pBeacon->routerCapacity )
   \                     ??ZDO_beaconNotifyIndCB_14:
   \   00023B   8A82         MOV     DPL,R2
   \   00023D   8B83         MOV     DPH,R3
   \   00023F   E0           MOVX    A,@DPTR
   \   000240   600A         JZ      ??ZDO_beaconNotifyIndCB_1
   2459                  pNwkDesc->routerCapacity = 1;
   \   000242   8E82         MOV     DPL,R6
   \   000244   8F83         MOV     DPH,R7
   \   000246   A3           INC     DPTR
   \   000247   A3           INC     DPTR
   \   000248   A3           INC     DPTR
   \   000249   7401         MOV     A,#0x1
   \   00024B   F0           MOVX    @DPTR,A
   \                     ??ZDO_beaconNotifyIndCB_1:
   \   00024C   7F0A         MOV     R7,#0xa
   \   00024E   02....       LJMP    ?BANKED_LEAVE_XDATA
   2460              }
   2461            }
   2462          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine32 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000003   8882         MOV     DPL,R0
   \   000005   8983         MOV     DPH,R1
   \   000007   E582         MOV     A,DPL
   \   000009   4583         ORL     A,DPH
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine53_0:
   \   000000   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET
   2463          
   2464          /*********************************************************************
   2465           * @fn          ZDO_StartRouterConfirmCB
   2466           *
   2467           * @brief       This function reports the results of the request to
   2468           *              start functioning as a router in a network.
   2469           *
   2470           * @param       Status - Result of NLME_StartRouterRequest()
   2471           *
   2472           * @return      none
   2473           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2474          void ZDO_StartRouterConfirmCB( ZStatus_t Status )
   \                     ZDO_StartRouterConfirmCB:
   2475          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   2476            nwkStatus = (byte)Status;
   \   000006   90....       MOV     DPTR,#nwkStatus
   \   000009   F0           MOVX    @DPTR,A
   2477          
   2478            if ( Status == ZSUCCESS )
   \   00000A   7017         JNZ     ??ZDO_StartRouterConfirmCB_0
   2479            {
   2480              // LED on shows Router started
   2481              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   00000C                ; Setup parameters for call to function HalLedSet
   \   00000C   7A01         MOV     R2,#0x1
   \   00000E   7904         MOV     R1,#0x4
   \   000010   12....       LCALL   ??HalLedSet?relay
   2482              // LED off forgets HOLD_AUTO_START
   2483              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000013                ; Setup parameters for call to function HalLedSet
   \   000013   7A00         MOV     R2,#0x0
   \   000015   7908         MOV     R1,#0x8
   \   000017   12....       LCALL   ??HalLedSet?relay
   2484              if ( devState == DEV_HOLD )
   \   00001A   90....       MOV     DPTR,#devState
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   7003         JNZ     ??ZDO_StartRouterConfirmCB_0
   2485              {
   2486                // Began with HOLD_AUTO_START
   2487                devState = DEV_END_DEVICE;
   \   000020   7406         MOV     A,#0x6
   \   000022   F0           MOVX    @DPTR,A
   2488              }
   2489            }
   2490          #if defined(BLINK_LEDS)
   2491            else
   2492            {
   2493              HalLedSet( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2494            }
   2495          #endif
   2496          
   2497            osal_set_event( ZDAppTaskID, ZDO_ROUTER_START );
   \                     ??ZDO_StartRouterConfirmCB_0:
   \   000023                ; Setup parameters for call to function osal_set_event
   \   000023   7A20         MOV     R2,#0x20
   \   000025   80..         SJMP    ?Subroutine0
   2498          }
   2499          
   2500          /*********************************************************************
   2501           * @fn          ZDO_JoinConfirmCB
   2502           *
   2503           * @brief       This function allows the next hight layer to be notified
   2504           *              of the results of its request to join itself or another
   2505           *              device to a network.
   2506           *
   2507           * @param       Status - Result of NLME_JoinRequest()
   2508           *
   2509           * @return      none
   2510           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2511          void ZDO_JoinConfirmCB( uint16 PanId, ZStatus_t Status )
   \                     ZDO_JoinConfirmCB:
   2512          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   2513            (void)PanId;  // remove if this parameter is used.
   2514          
   2515            nwkStatus = (byte)Status;
   \   00000C   90....       MOV     DPTR,#nwkStatus
   \   00000F   F0           MOVX    @DPTR,A
   2516          
   2517            if ( Status == ZSUCCESS )
   \   000010   7017         JNZ     ??ZDO_JoinConfirmCB_0
   2518            {
   2519              // LED on shows device joined
   2520              HalLedSet ( HAL_LED_3, HAL_LED_MODE_ON );
   \   000012                ; Setup parameters for call to function HalLedSet
   \   000012   7A01         MOV     R2,#0x1
   \   000014   7904         MOV     R1,#0x4
   \   000016   12....       LCALL   ??HalLedSet?relay
   2521              // LED off forgets HOLD_AUTO_START
   2522              HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF);
   \   000019                ; Setup parameters for call to function HalLedSet
   \   000019   7A00         MOV     R2,#0x0
   \   00001B   7908         MOV     R1,#0x8
   \   00001D   12....       LCALL   ??HalLedSet?relay
   2523              if ( (devState == DEV_HOLD) )
   \   000020   90....       MOV     DPTR,#devState
   \   000023   E0           MOVX    A,@DPTR
   \   000024   7003         JNZ     ??ZDO_JoinConfirmCB_0
   2524              {
   2525                // Began with HOLD_AUTO_START
   2526                devState = DEV_NWK_JOINING;
   \   000026   7403         MOV     A,#0x3
   \   000028   F0           MOVX    @DPTR,A
   2527              }
   2528          
   2529              if ( !ZG_SECURE_ENABLED )
   2530              {
   2531                // Notify to save info into NV
   2532                ZDApp_NVUpdate();
   2533              }
   2534            }
   2535            else
   2536            {
   2537          #if defined(BLINK_LEDS)
   2538              HalLedSet ( HAL_LED_3, HAL_LED_MODE_FLASH );  // Flash LED to show failure
   2539          #endif
   2540            }
   2541          
   2542            // Pass the join confirm to higher layer if callback registered
   2543            if (zdoCBFunc[ZDO_JOIN_CNF_CBID] != NULL )
   \                     ??ZDO_JoinConfirmCB_0:
   \   000029   90....       MOV     DPTR,#zdoCBFunc + 8
   \   00002C   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_66:
   \   00002F   602F         JZ      ??ZDO_JoinConfirmCB_1
   2544            {
   2545              zdoJoinCnf_t joinCnf;
   2546          
   2547              joinCnf.status = Status;
   \   000031   EE           MOV     A,R6
   \   000032   85..82       MOV     DPL,?XSP + 0
   \   000035   85..83       MOV     DPH,?XSP + 1
   \   000038   F0           MOVX    @DPTR,A
   2548              joinCnf.deviceAddr = _NIB.nwkDevAddress;
   \   000039   90....       MOV     DPTR,#_NIB + 20
   \   00003C   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   00003F   7401         MOV     A,#0x1
   \   000041   12....       LCALL   ?XSTACK_DISP0_8
   \   000044   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   2549              joinCnf.parentAddr = _NIB.nwkCoordAddress;
   \                     ??CrossCallReturnLabel_97:
   \   000047   90....       MOV     DPTR,#_NIB + 23
   \   00004A   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   2550          
   2551              zdoCBFunc[ZDO_JOIN_CNF_CBID]( (void*)&joinCnf );
   2552            }
   \                     ??CrossCallReturnLabel_55:
   \   00004D   7403         MOV     A,#0x3
   \   00004F   12....       LCALL   ?XSTACK_DISP0_8
   \   000052   EA           MOV     A,R2
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   \   000055   EB           MOV     A,R3
   \   000056   12....       LCALL   ?Subroutine10 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000059   8882         MOV     DPL,R0
   \   00005B   8983         MOV     DPH,R1
   \   00005D   12....       LCALL   ?CALL_IND
   2553          
   2554            // Notify ZDApp
   2555            ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_IND, sizeof(osal_event_hdr_t), (byte*)NULL );
   \                     ??ZDO_JoinConfirmCB_1:
   \   000060                ; Setup parameters for call to function ZDApp_SendMsg
   \   000060   7C00         MOV     R4,#0x0
   \   000062   7D00         MOV     R5,#0x0
   \   000064   7B02         MOV     R3,#0x2
   \   000066   7A02         MOV     R2,#0x2
   \   000068   90....       MOV     DPTR,#ZDAppTaskID
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F9           MOV     R1,A
   \   00006D   12....       LCALL   ??ZDApp_SendMsg?relay
   2556          
   2557          }
   \   000070   02....       LJMP    ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7405         MOV     A,#0x5
   \   000002                REQUIRE ??Subroutine48_0
   \   000002                ; // Fall through to label ??Subroutine48_0
   2558          
   2559          /*********************************************************************
   2560           * @fn          ZDO_AddrChangeIndicationCB
   2561           *
   2562           * @brief       This function notifies the application that this
   2563           *              device's address has changed.  Could happen in
   2564           *              a network with stochastic addressing (PRO).
   2565           *
   2566           * @param       newAddr - the new address
   2567           *
   2568           * @return      none
   2569           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2570          void ZDO_AddrChangeIndicationCB( uint16 newAddr )
   \                     ZDO_AddrChangeIndicationCB:
   2571          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   2572            ZDO_AddrChangeInd_t *pZDOAddrChangeMsg;
   2573            epList_t *pItem = epList;
   \   000009   90....       MOV     DPTR,#epList
   \   00000C   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   2574          
   2575            // Notify to save info into NV
   2576            ZDApp_NVUpdate();
   \                     ??CrossCallReturnLabel_81:
   \   00000F                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00000F   12....       LCALL   ??ZDApp_NVUpdate?relay
   2577          
   2578            // Notify the applications
   2579            osal_set_event( ZDAppTaskID, ZDO_STATE_CHANGE_EVT );
   \   000012                ; Setup parameters for call to function osal_set_event
   \   000012   7A10         MOV     R2,#0x10
   \   000014   7B00         MOV     R3,#0x0
   \   000016   90....       MOV     DPTR,#ZDAppTaskID
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??osal_set_event?relay
   \   00001E   8042         SJMP    ??CrossCallReturnLabel_82
   2580          
   2581            while (pItem != NULL)
   2582            {
   2583              if (pItem->epDesc->endPoint != ZDO_EP)
   \                     ??ZDO_AddrChangeIndicationCB_0:
   \   000020   EE           MOV     A,R6
   \   000021   2402         ADD     A,#0x2
   \   000023   F8           MOV     R0,A
   \   000024   EF           MOV     A,R7
   \   000025   3400         ADDC    A,#0x0
   \   000027   F9           MOV     R1,A
   \   000028   88..         MOV     ?V0 + 2,R0
   \   00002A   89..         MOV     ?V0 + 3,R1
   \   00002C   8882         MOV     DPL,R0
   \   00002E   F583         MOV     DPH,A
   \   000030   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000033   6026         JZ      ??ZDO_AddrChangeIndicationCB_1
   2584              {
   2585                pZDOAddrChangeMsg = (ZDO_AddrChangeInd_t *)osal_msg_allocate( sizeof( ZDO_AddrChangeInd_t ) );
   \   000035                ; Setup parameters for call to function osal_msg_allocate
   \   000035   7A04         MOV     R2,#0x4
   \   000037   7B00         MOV     R3,#0x0
   \   000039   12....       LCALL   ??osal_msg_allocate?relay
   2586                if (pZDOAddrChangeMsg != NULL)
   \   00003C   EA           MOV     A,R2
   \   00003D   4B           ORL     A,R3
   \   00003E   601B         JZ      ??ZDO_AddrChangeIndicationCB_1
   2587                {
   2588                  pZDOAddrChangeMsg->hdr.event = ZDO_ADDR_CHANGE_IND;
   \   000040   8A82         MOV     DPL,R2
   \   000042   8B83         MOV     DPH,R3
   \   000044   74D6         MOV     A,#-0x2a
   \   000046   F0           MOVX    @DPTR,A
   2589                  pZDOAddrChangeMsg->shortAddr = newAddr;
   \   000047   12....       LCALL   ?Subroutine13 & 0xFFFF
   2590                  osal_msg_send( *(pItem->epDesc->task_id), (uint8 *)pZDOAddrChangeMsg );
   \                     ??CrossCallReturnLabel_88:
   \   00004A                ; Setup parameters for call to function osal_msg_send
   \   00004A   85..82       MOV     DPL,?V0 + 2
   \   00004D   85..83       MOV     DPH,?V0 + 3
   \   000050   12....       LCALL   ?Subroutine22 & 0xFFFF
   2591                }
   2592              }
   \                     ??CrossCallReturnLabel_94:
   \   000053   A3           INC     DPTR
   \   000054   12....       LCALL   ??Subroutine35_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   000057   F9           MOV     R1,A
   \   000058   12....       LCALL   ??osal_msg_send?relay
   2593              pItem = pItem->nextDesc;
   \                     ??ZDO_AddrChangeIndicationCB_1:
   \   00005B   8E82         MOV     DPL,R6
   \   00005D   8F83         MOV     DPH,R7
   \   00005F   12....       LCALL   ??Subroutine45_0 & 0xFFFF
   2594            }
   \                     ??CrossCallReturnLabel_82:
   \   000062   EE           MOV     A,R6
   \   000063   4F           ORL     A,R7
   \   000064   70BA         JNZ     ??ZDO_AddrChangeIndicationCB_0
   2595          
   2596            // Send out a device announce
   2597            ZDApp_AnnounceNewAddress();
   \   000066                ; Setup parameters for call to function ZDApp_AnnounceNewAddress
   \   000066   12....       LCALL   ??ZDApp_AnnounceNewAddress?relay
   2598          }
   \   000069   02....       LJMP    ??Subroutine36_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine47_0
   \   000002                ; // Fall through to label ??Subroutine47_0
   2599          
   2600          /*********************************************************************
   2601           * @fn          ZDO_JoinIndicationCB
   2602           *
   2603           * @brief       This function allows the next higher layer of a
   2604           *              coordinator to be notified of a remote join request.
   2605           *
   2606           * @param       ShortAddress - 16-bit address
   2607           * @param       ExtendedAddress - IEEE (64-bit) address
   2608           * @param       CapabilityFlags - Association Capability Flags
   2609           * @param       type - of joining -
   2610           *                          NWK_ASSOC_JOIN
   2611           *                          NWK_ASSOC_REJOIN_UNSECURE
   2612           *                          NWK_ASSOC_REJOIN_SECURE
   2613           *
   2614           * @return      ZStatus_t
   2615           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2616          ZStatus_t ZDO_JoinIndicationCB(uint16 ShortAddress, uint8 *ExtendedAddress,
   \                     ZDO_JoinIndicationCB:
   2617                                          uint8 CapabilityFlags, uint8 type)
   2618          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
   2619            (void)ExtendedAddress;
   2620          #if ZDO_NV_SAVE_RFDs
   2621            (void)CapabilityFlags;
   2622          
   2623          #else  // if !ZDO_NV_SAVE_RFDs
   2624            if (CapabilityFlags & CAPINFO_DEVICETYPE_FFD)
   2625          #endif
   2626            {
   2627              ZDApp_NVUpdate();  // Notify to save info into NV.
   \   000009                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000009   12....       LCALL   ??ZDApp_NVUpdate?relay
   \   00000C   7410         MOV     A,#0x10
   \   00000E   12....       LCALL   ?XSTACK_DISP0_8
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F8           MOV     R0,A
   2628            }
   2629          
   2630            if (ZG_SECURE_ENABLED)  // Send notification to TC of new device.
   2631            {
   2632              if ( type == NWK_ASSOC_JOIN ||
   2633                   type == NWK_ASSOC_REJOIN_UNSECURE ||
   2634                   type == NWK_ASSOC_REJOIN_SECURE )
   \   000013   600D         JZ      ??ZDO_JoinIndicationCB_0
   \   000015   7401         MOV     A,#0x1
   \   000017   68           XRL     A,R0
   \   000018   6008         JZ      ??ZDO_JoinIndicationCB_0
   \   00001A   7402         MOV     A,#0x2
   \   00001C   68           XRL     A,R0
   \   00001D   6003         JZ      $+5
   \   00001F   02....       LJMP    ??ZDO_JoinIndicationCB_1 & 0xFFFF
   2635              {
   2636                uint16 timeToFire;
   2637                ZDAppNewDevice_t *pNewDevice, *pDeviceList;
   2638          
   2639                pNewDevice = (ZDAppNewDevice_t *) osal_mem_alloc( sizeof(ZDAppNewDevice_t) );
   \                     ??ZDO_JoinIndicationCB_0:
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   7A06         MOV     R2,#0x6
   \   000024   7B00         MOV     R3,#0x0
   \   000026   12....       LCALL   ??osal_mem_alloc?relay
   \   000029   8A..         MOV     ?V0 + 2,R2
   \   00002B   8B..         MOV     ?V0 + 3,R3
   \   00002D   AE..         MOV     R6,?V0 + 2
   \   00002F   AF..         MOV     R7,?V0 + 3
   2640          
   2641                if ( pNewDevice == NULL )
   \   000031   EE           MOV     A,R6
   \   000032   4F           ORL     A,R7
   \   000033   7005         JNZ     ??ZDO_JoinIndicationCB_2
   2642                {
   2643                  // Memory alloc failed
   2644                  return ZMemError;
   \   000035   7910         MOV     R1,#0x10
   \   000037   02....       LJMP    ??ZDO_JoinIndicationCB_3 & 0xFFFF
   2645                }
   2646          
   2647                // Add the new device to the New Device List
   2648                if ( ZDApp_NewDeviceList == NULL )
   \                     ??ZDO_JoinIndicationCB_2:
   \   00003A   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   00003D   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_67:
   \   000040   90....       MOV     DPTR,#ZDApp_NewDeviceList
   \   000043   7006         JNZ     ??ZDO_JoinIndicationCB_4
   2649                {
   2650                  // The list is empty, add the first element
   2651                  ZDApp_NewDeviceList = pNewDevice;
   \   000045   EE           MOV     A,R6
   \   000046   F0           MOVX    @DPTR,A
   \   000047   A3           INC     DPTR
   \   000048   EF           MOV     A,R7
   \   000049   801F         SJMP    ??ZDO_JoinIndicationCB_5
   2652                }
   2653                else
   2654                {
   2655                  pDeviceList = ZDApp_NewDeviceList;
   \                     ??ZDO_JoinIndicationCB_4:
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   FA           MOV     R2,A
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   8003         SJMP    ??ZDO_JoinIndicationCB_6
   2656          
   2657                  // Walk the list to last element
   2658                  while ( pDeviceList->next )
   2659                  {
   2660                    pDeviceList = (ZDAppNewDevice_t *) pDeviceList->next;
   \                     ??ZDO_JoinIndicationCB_7:
   \   000051   E8           MOV     A,R0
   \   000052   FA           MOV     R2,A
   \   000053   E9           MOV     A,R1
   \                     ??ZDO_JoinIndicationCB_6:
   \   000054   FB           MOV     R3,A
   2661                  }
   \   000055   8A82         MOV     DPL,R2
   \   000057   8B83         MOV     DPH,R3
   \   000059   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   00005C   70F3         JNZ     ??ZDO_JoinIndicationCB_7
   2662          
   2663                  // Add new device at the end
   2664                  pDeviceList->next = pNewDevice;
   \   00005E   EE           MOV     A,R6
   \   00005F   F8           MOV     R0,A
   \   000060   EF           MOV     A,R7
   \   000061   F9           MOV     R1,A
   \   000062   8A82         MOV     DPL,R2
   \   000064   8B83         MOV     DPH,R3
   \   000066   E8           MOV     A,R0
   \   000067   F0           MOVX    @DPTR,A
   \   000068   A3           INC     DPTR
   \   000069   E9           MOV     A,R1
   \                     ??ZDO_JoinIndicationCB_5:
   \   00006A   F0           MOVX    @DPTR,A
   2665                }
   2666          
   2667                // get the remaining time of the timer
   2668                timeToFire = osal_get_timeoutEx( ZDAppTaskID, ZDO_NEW_DEVICE );
   \   00006B                ; Setup parameters for call to function osal_get_timeoutEx
   \   00006B   7A40         MOV     R2,#0x40
   \   00006D   7B00         MOV     R3,#0x0
   \   00006F   90....       MOV     DPTR,#ZDAppTaskID
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F9           MOV     R1,A
   \   000074   12....       LCALL   ??osal_get_timeoutEx?relay
   \   000077   8A..         MOV     ?V0 + 4,R2
   \   000079   8B..         MOV     ?V0 + 5,R3
   2669          
   2670                pNewDevice->next = NULL;
   \   00007B   8E82         MOV     DPL,R6
   \   00007D   8F83         MOV     DPH,R7
   \   00007F   E4           CLR     A
   \   000080   F0           MOVX    @DPTR,A
   \   000081   A3           INC     DPTR
   \   000082   F0           MOVX    @DPTR,A
   2671                pNewDevice->shortAddr = ShortAddress;
   \   000083   8E82         MOV     DPL,R6
   \   000085   8F83         MOV     DPH,R7
   \   000087   12....       LCALL   ?Subroutine13 & 0xFFFF
   2672                pNewDevice->timeDelta = ZDAPP_NEW_DEVICE_TIME - timeToFire;
   \                     ??CrossCallReturnLabel_89:
   \   00008A   7458         MOV     A,#0x58
   \   00008C   C3           CLR     C
   \   00008D   95..         SUBB    A,?V0 + 4
   \   00008F   F8           MOV     R0,A
   \   000090   7402         MOV     A,#0x2
   \   000092   95..         SUBB    A,?V0 + 5
   \   000094   F9           MOV     R1,A
   \   000095   8E82         MOV     DPL,R6
   \   000097   8F83         MOV     DPH,R7
   \   000099   A3           INC     DPTR
   \   00009A   A3           INC     DPTR
   \   00009B   A3           INC     DPTR
   \   00009C   A3           INC     DPTR
   \   00009D   E8           MOV     A,R0
   \   00009E   F0           MOVX    @DPTR,A
   \   00009F   A3           INC     DPTR
   \   0000A0   E9           MOV     A,R1
   \   0000A1   F0           MOVX    @DPTR,A
   2673          
   2674                // Start the timer only if there is no pending timer
   2675                if ( pNewDevice->timeDelta == ZDAPP_NEW_DEVICE_TIME )
   \   0000A2   7458         MOV     A,#0x58
   \   0000A4   68           XRL     A,R0
   \   0000A5   7003         JNZ     ??ZDO_JoinIndicationCB_8
   \   0000A7   7402         MOV     A,#0x2
   \   0000A9   69           XRL     A,R1
   \                     ??ZDO_JoinIndicationCB_8:
   \   0000AA   7017         JNZ     ??ZDO_JoinIndicationCB_1
   2676                {
   2677                  osal_start_timerEx( ZDAppTaskID, ZDO_NEW_DEVICE, ZDAPP_NEW_DEVICE_TIME );
   \   0000AC                ; Setup parameters for call to function osal_start_timerEx
   \   0000AC   90....       MOV     DPTR,#__Constant_258
   \   0000AF   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000B2   7A40         MOV     R2,#0x40
   \   0000B4   7B00         MOV     R3,#0x0
   \   0000B6   90....       MOV     DPTR,#ZDAppTaskID
   \   0000B9   E0           MOVX    A,@DPTR
   \   0000BA   F9           MOV     R1,A
   \   0000BB   12....       LCALL   ??osal_start_timerEx?relay
   \   0000BE   7404         MOV     A,#0x4
   \   0000C0   12....       LCALL   ?DEALLOC_XSTACK8
   2678                }
   2679              }
   2680            }
   2681          
   2682            return ZSuccess;
   \                     ??ZDO_JoinIndicationCB_1:
   \   0000C3   7900         MOV     R1,#0x0
   \                     ??ZDO_JoinIndicationCB_3:
   \   0000C5   02....       LJMP    ?Subroutine2 & 0xFFFF
   2683          }
   2684          
   2685          /*********************************************************************
   2686           * @fn          ZDO_ConcentratorIndicationCB
   2687           *
   2688           * @brief       This function allows the next higher layer of a
   2689           *              device to be notified of existence of the concentrator.
   2690           *
   2691           * @param       nwkAddr - 16-bit NWK address of the concentrator
   2692           * @param       extAddr - pointer to extended Address
   2693           *                        NULL if not available
   2694           * @param       pktCost - PktCost from RREQ
   2695           *
   2696           * @return      void
   2697           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2698          void ZDO_ConcentratorIndicationCB( uint16 nwkAddr, uint8 *extAddr, uint8 pktCost )
   \                     ZDO_ConcentratorIndicationCB:
   2699          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   2700            zdoConcentratorInd_t conInd;
   2701          
   2702            conInd.nwkAddr = nwkAddr;
   \   00000A   12....       LCALL   ?Subroutine12 & 0xFFFF
   2703            conInd.extAddr = extAddr;
   \                     ??CrossCallReturnLabel_101:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   EC           MOV     A,R4
   \   000013   F0           MOVX    @DPTR,A
   \   000014   A3           INC     DPTR
   \   000015   ED           MOV     A,R5
   \   000016   F0           MOVX    @DPTR,A
   2704            conInd.pktCost = pktCost;
   \   000017   7404         MOV     A,#0x4
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   E9           MOV     A,R1
   \   00001D   F0           MOVX    @DPTR,A
   2705          
   2706            if( zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc + 2
   \   000021   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_69:
   \   000024   6011         JZ      ??ZDO_ConcentratorIndicationCB_0
   2707            {
   2708              zdoCBFunc[ZDO_CONCENTRATOR_IND_CBID]( (void*)&conInd );
   \   000026                ; Setup parameters for indirect call
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   AA82         MOV     R2,DPL
   \   00002E   AB83         MOV     R3,DPH
   \   000030   8882         MOV     DPL,R0
   \   000032   8983         MOV     DPH,R1
   \   000034   12....       LCALL   ?CALL_IND
   2709            }
   2710          }
   \                     ??ZDO_ConcentratorIndicationCB_0:
   \   000037   02....       LJMP    ?Subroutine7 & 0xFFFF
   2711          
   2712          /*********************************************************************
   2713           * @fn          ZDO_LeaveCnf
   2714           *
   2715           * @brief       This function allows the next higher layer to be
   2716           *              notified of the results of its request for this or
   2717           *              a child device to leave the network.
   2718           *
   2719           * @param       cnf - NLME_LeaveCnf_t
   2720           *
   2721           * @return      none
   2722           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004                REQUIRE ??Subroutine42_0
   \   000004                ; // Fall through to label ??Subroutine42_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2723          void ZDO_LeaveCnf( NLME_LeaveCnf_t* cnf )
   \                     ZDO_LeaveCnf:
   2724          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2725            // Check for this device
   2726            if ( osal_ExtAddrEqual( cnf->extAddr,
   2727                                    NLME_GetExtAddr() ) == TRUE )
   \   000009   EE           MOV     A,R6
   \   00000A   2402         ADD     A,#0x2
   \   00000C   F5..         MOV     ?V0 + 0,A
   \   00000E   EF           MOV     A,R7
   \   00000F   3400         ADDC    A,#0x0
   \   000011   F5..         MOV     ?V0 + 1,A
   \   000013                ; Setup parameters for call to function sAddrExtCmp
   \   000013                ; Setup parameters for call to function NLME_GetExtAddr
   \   000013   12....       LCALL   ??NLME_GetExtAddr?relay
   \   000016   EA           MOV     A,R2
   \   000017   FC           MOV     R4,A
   \   000018   EB           MOV     A,R3
   \   000019   FD           MOV     R5,A
   \   00001A   AA..         MOV     R2,?V0 + 0
   \   00001C   AB..         MOV     R3,?V0 + 1
   \   00001E   12....       LCALL   ??sAddrExtCmp?relay
   \   000021   E9           MOV     A,R1
   \   000022   6401         XRL     A,#0x1
   \   000024   701F         JNZ     ??ZDO_LeaveCnf_0
   2728            {
   2729              // Pass the leave confirm to higher layer if callback registered
   2730              if ( ( zdoCBFunc[ZDO_LEAVE_CNF_CBID] == NULL ) ||
   2731                   ( (*zdoCBFunc[ZDO_LEAVE_CNF_CBID])( cnf ) == NULL ) )
   \   000026   90....       MOV     DPTR,#zdoCBFunc + 10
   \   000029   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   00002C   600E         JZ      ??ZDO_LeaveCnf_1
   \   00002E                ; Setup parameters for indirect call
   \   00002E   EE           MOV     A,R6
   \   00002F   FA           MOV     R2,A
   \   000030   EF           MOV     A,R7
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   ?CALL_IND
   \   000035   8B..         MOV     ?V0 + 1,R3
   \   000037   EA           MOV     A,R2
   \   000038   45..         ORL     A,?V0 + 1
   \   00003A   7023         JNZ     ??ZDO_LeaveCnf_2
   2732              {
   2733                // Prepare to leave with reset
   2734                ZDApp_LeaveReset( cnf->rejoin );
   \                     ??ZDO_LeaveCnf_1:
   \   00003C                ; Setup parameters for call to function ZDApp_LeaveReset
   \   00003C   12....       LCALL   ?Subroutine28 & 0xFFFF
   2735              }
   2736            }
   \                     ??CrossCallReturnLabel_109:
   \   00003F   F9           MOV     R1,A
   \   000040   12....       LCALL   ??ZDApp_LeaveReset?relay
   \   000043   801A         SJMP    ??ZDO_LeaveCnf_2
   2737            else if ( ZSTACK_ROUTER_BUILD )
   2738            {
   2739              // Remove device address(optionally descendents) from data
   2740              ZDApp_LeaveUpdate( cnf->dstAddr,
   2741                                 cnf->extAddr,
   2742                                 cnf->removeChildren );
   \                     ??ZDO_LeaveCnf_0:
   \   000045                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   000045   8E82         MOV     DPL,R6
   \   000047   8F83         MOV     DPH,R7
   \   000049   A3           INC     DPTR
   \   00004A   A3           INC     DPTR
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   E0           MOVX    A,@DPTR
   \   000054   F9           MOV     R1,A
   \   000055   AC..         MOV     R4,?V0 + 0
   \   000057   AD..         MOV     R5,?V0 + 1
   \   000059   12....       LCALL   ?Subroutine16 & 0xFFFF
   2743            }
   \                     ??CrossCallReturnLabel_57:
   \   00005C   12....       LCALL   ??ZDApp_LeaveUpdate?relay
   2744          }
   \                     ??ZDO_LeaveCnf_2:
   \   00005F   02....       LJMP    ??Subroutine39_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   EE           MOV     A,R6
   \   000001   240B         ADD     A,#0xb
   \   000003                REQUIRE ??Subroutine52_0
   \   000003                ; // Fall through to label ??Subroutine52_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine52_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine53_0
   \   000003                ; // Fall through to label ??Subroutine53_0
   2745          
   2746          /*********************************************************************
   2747           * @fn          ZDO_LeaveInd
   2748           *
   2749           * @brief       This function allows the next higher layer of a
   2750           *              device to be notified of a remote leave request or
   2751           *              indication.
   2752           *
   2753           * @param       ind - NLME_LeaveInd_t
   2754           *
   2755           * @return      none
   2756           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2757          void ZDO_LeaveInd( NLME_LeaveInd_t* ind )
   \                     ZDO_LeaveInd:
   2758          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   2759            uint8 leave;
   2760          
   2761          
   2762            // Parent is requesting the leave - NWK layer filters out illegal
   2763            // requests
   2764            if ( ind->request == TRUE )
   \   00000E   EE           MOV     A,R6
   \   00000F   240B         ADD     A,#0xb
   \   000011   F8           MOV     R0,A
   \   000012   EF           MOV     A,R7
   \   000013   3400         ADDC    A,#0x0
   \   000015   F9           MOV     R1,A
   \   000016   88..         MOV     ?V0 + 0,R0
   \   000018   89..         MOV     ?V0 + 1,R1
   \   00001A   EE           MOV     A,R6
   \   00001B   240C         ADD     A,#0xc
   \   00001D   08           INC     R0
   \   00001E   EF           MOV     A,R7
   \   00001F   3400         ADDC    A,#0x0
   \   000021   F9           MOV     R1,A
   \   000022   88..         MOV     ?V0 + 2,R0
   \   000024   89..         MOV     ?V0 + 3,R1
   \   000026   8E82         MOV     DPL,R6
   \   000028   8F83         MOV     DPH,R7
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   E0           MOVX    A,@DPTR
   \   000035   6401         XRL     A,#0x1
   \   000037   7025         JNZ     ??ZDO_LeaveInd_0
   2765            {
   2766              // Only respond if we are not rejoining the network
   2767              if ( ind->rejoin == FALSE )
   \   000039   8882         MOV     DPL,R0
   \   00003B   8983         MOV     DPH,R1
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   7044         JNZ     ??ZDO_LeaveInd_1
   2768              {
   2769                // Notify network of leave
   2770                NLME_LeaveRsp_t rsp;
   2771                rsp.rejoin = ind->rejoin;
   \   000040   7401         MOV     A,#0x1
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   E4           CLR     A
   \   000046   F0           MOVX    @DPTR,A
   2772          
   2773                if ( ZSTACK_ROUTER_BUILD )
   2774                {
   2775                  rsp.removeChildren = ind->removeChildren;
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   E0           MOVX    A,@DPTR
   \   00004E   85..82       MOV     DPL,?XSP + 0
   \   000051   85..83       MOV     DPH,?XSP + 1
   \   000054   F0           MOVX    @DPTR,A
   2776                }
   2777                else if ( ZSTACK_END_DEVICE_BUILD )
   2778                {
   2779                  rsp.removeChildren = 0;
   2780                }
   2781          
   2782                NLME_LeaveRsp( &rsp );
   \   000055                ; Setup parameters for call to function NLME_LeaveRsp
   \   000055   AA82         MOV     R2,DPL
   \   000057   AB83         MOV     R3,DPH
   \   000059   12....       LCALL   ??NLME_LeaveRsp?relay
   \   00005C   8026         SJMP    ??ZDO_LeaveInd_1
   2783              }
   2784          
   2785              if ( ZSTACK_END_DEVICE_BUILD )
   2786              {
   2787                // Stop polling and get ready to reset
   2788                NLME_SetPollRate( 0 );
   2789              }
   2790          
   2791              // Prepare to leave with reset
   2792              ZDApp_LeaveReset( ind->rejoin );
   2793            }
   2794            else
   2795            {
   2796              leave = FALSE;
   2797          
   2798              // Check if this device needs to leave as a child or descendent
   2799              if ( ind->srcAddr == NLME_GetCoordShortAddr() )
   \                     ??ZDO_LeaveInd_0:
   \   00005E                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   00005E   12....       LCALL   ??NLME_GetCoordShortAddr?relay
   \   000061   8A..         MOV     ?V0 + 4,R2
   \   000063   8B..         MOV     ?V0 + 5,R3
   \   000065   85..82       MOV     DPL,?V0 + 0
   \   000068   85..83       MOV     DPH,?V0 + 1
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   F9           MOV     R1,A
   \   00006D   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_58:
   \   000070   E5..         MOV     A,?V0 + 4
   \   000072   6A           XRL     A,R2
   \   000073   7003         JNZ     ??ZDO_LeaveInd_2
   \   000075   E5..         MOV     A,?V0 + 5
   \   000077   6B           XRL     A,R3
   \                     ??ZDO_LeaveInd_2:
   \   000078   7017         JNZ     ??ZDO_LeaveInd_3
   2800              {
   2801                if ( ( ind->removeChildren == TRUE               ) ||
   2802                     ( ZDO_Config_Node_Descriptor.LogicalType ==
   2803                       NODETYPE_DEVICE                           )    )
   \   00007A   7401         MOV     A,#0x1
   \   00007C   69           XRL     A,R1
   \   00007D   6005         JZ      ??ZDO_LeaveInd_1
   \   00007F   12....       LCALL   ?Subroutine21 & 0xFFFF
   2804                {
   2805                  leave = TRUE;
   2806                }
   2807              }
   \                     ??CrossCallReturnLabel_15:
   \   000082   700D         JNZ     ??ZDO_LeaveInd_3
   2808              else if ( ind->removeChildren == TRUE )
   2809              {
   2810                // Check NWK address allocation algorithm
   2811                //leave = RTG_ANCESTOR(nwkAddr,thisAddr);
   2812              }
   2813          
   2814              if ( leave == TRUE )
   2815              {
   2816                // Prepare to leave with reset
   2817                ZDApp_LeaveReset( ind->rejoin );
   \                     ??ZDO_LeaveInd_1:
   \   000084                ; Setup parameters for call to function ZDApp_LeaveReset
   \   000084   85..82       MOV     DPL,?V0 + 2
   \   000087   85..83       MOV     DPH,?V0 + 3
   \   00008A   E0           MOVX    A,@DPTR
   \   00008B   F9           MOV     R1,A
   \   00008C   12....       LCALL   ??ZDApp_LeaveReset?relay
   \   00008F   800B         SJMP    ??ZDO_LeaveInd_4
   2818              }
   2819              else
   2820              {
   2821                // Remove device address(optionally descendents) from data
   2822                ZDApp_LeaveUpdate( ind->srcAddr,
   2823                                   ind->extAddr,
   2824                                   ind->removeChildren );
   \                     ??ZDO_LeaveInd_3:
   \   000091                ; Setup parameters for call to function ZDApp_LeaveUpdate
   \   000091   EE           MOV     A,R6
   \   000092   2402         ADD     A,#0x2
   \   000094   FC           MOV     R4,A
   \   000095   EF           MOV     A,R7
   \   000096   3400         ADDC    A,#0x0
   \   000098   FD           MOV     R5,A
   \   000099   12....       LCALL   ??ZDApp_LeaveUpdate?relay
   2825              }
   2826            }
   2827          
   2828            // Pass the leave indication to higher layer if callback registered.
   2829            if (zdoCBFunc[ZDO_LEAVE_IND_CBID] != NULL)
   \                     ??ZDO_LeaveInd_4:
   \   00009C   90....       MOV     DPTR,#zdoCBFunc + 12
   \   00009F   12....       LCALL   ?Subroutine17 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0000A2   6007         JZ      ??ZDO_LeaveInd_5
   2830            {
   2831              (void)zdoCBFunc[ZDO_LEAVE_IND_CBID](ind);
   \   0000A4                ; Setup parameters for indirect call
   \   0000A4   EE           MOV     A,R6
   \   0000A5   FA           MOV     R2,A
   \   0000A6   EF           MOV     A,R7
   \   0000A7   FB           MOV     R3,A
   \   0000A8   12....       LCALL   ?CALL_IND
   2832            }
   2833          }
   \                     ??ZDO_LeaveInd_5:
   \   0000AB   7402         MOV     A,#0x2
   \   0000AD   02....       LJMP    ?Subroutine1 & 0xFFFF
   2834          
   2835          /*********************************************************************
   2836           * @fn          ZDO_SyncIndicationCB
   2837           *
   2838           * @brief       This function allows the next higher layer of a
   2839           *              coordinator to be notified of a loss of synchronization
   2840           *                          with the parent/child device.
   2841           *
   2842           * @param       type: 0 - child; 1 - parent
   2843           *
   2844           *
   2845           * @return      none
   2846           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2847          void ZDO_SyncIndicationCB( uint8 type, uint16 shortAddr )
   \                     ZDO_SyncIndicationCB:
   2848          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   2849            (void)shortAddr;  // Remove this line if this parameter is used.
   2850          
   2851            if ( ZSTACK_END_DEVICE_BUILD
   2852              || (ZSTACK_ROUTER_BUILD && ((_NIB.CapabilityFlags & ZMAC_ASSOC_CAPINFO_FFD_TYPE) == 0)))
   \   000007   90....       MOV     DPTR,#_NIB + 14
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   4018         JC      ??ZDO_SyncIndicationCB_0
   2853            {
   2854              if ( type == 1 )
   \   00000F   7401         MOV     A,#0x1
   \   000011   6E           XRL     A,R6
   \   000012   7013         JNZ     ??ZDO_SyncIndicationCB_0
   2855              {
   2856                // We lost contact with our parent.  Clear the neighbor Table.
   2857                nwkNeighborInitTable();
   \   000014                ; Setup parameters for call to function nwkNeighborInitTable
   \   000014   12....       LCALL   ??nwkNeighborInitTable?relay
   2858          
   2859                // Start the rejoin process.
   2860                ZDApp_SendMsg( ZDAppTaskID, ZDO_NWK_JOIN_REQ, sizeof(osal_event_hdr_t), NULL );
   \   000017                ; Setup parameters for call to function ZDApp_SendMsg
   \   000017   7C00         MOV     R4,#0x0
   \   000019   7D00         MOV     R5,#0x0
   \   00001B   7B02         MOV     R3,#0x2
   \   00001D   7A03         MOV     R2,#0x3
   \   00001F   90....       MOV     DPTR,#ZDAppTaskID
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F9           MOV     R1,A
   \   000024   12....       LCALL   ??ZDApp_SendMsg?relay
   2861              }
   2862            }
   2863          }
   \                     ??ZDO_SyncIndicationCB_0:
   \   000027   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   2864          
   2865          /*********************************************************************
   2866           * @fn          ZDO_ManytoOneFailureIndicationCB
   2867           *
   2868           * @brief       This function allows the next higher layer of a
   2869           *              concentrator to be notified of a many-to-one route
   2870           *              failure.
   2871           *
   2872           * @param       none
   2873           *
   2874           *
   2875           * @return      none
   2876           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2877          void ZDO_ManytoOneFailureIndicationCB()
   \                     ZDO_ManytoOneFailureIndicationCB:
   2878          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2879            // By default, the concentrator automatically redo many-to-one route
   2880            // discovery to update all many-to-one routes in the network
   2881            // If you want anything processing other than the default,
   2882            // please replace the following code.
   2883          
   2884            RTG_MTORouteReq();
   \   000004                ; Setup parameters for call to function RTG_MTORouteReq
   \   000004   12....       LCALL   ??RTG_MTORouteReq?relay
   2885          }
   \   000007   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   2886          
   2887          /*********************************************************************
   2888           * @fn          ZDO_PollConfirmCB
   2889           *
   2890           * @brief       This function allows the next higher layer to be
   2891           *              notified of a Poll Confirm.
   2892           *
   2893           * @param       none
   2894           *
   2895           * @return      none
   2896           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2897          void ZDO_PollConfirmCB( uint8 status )
   \                     ZDO_PollConfirmCB:
   2898          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2899            (void)status;  // Remove this line if this parameter is used.
   2900            return;
   \   000000   02....       LJMP    ?BRET
   2901          }
   2902          
   2903          /*********************************************************************
   2904           * @fn          ZDO_NetworkStatusCB
   2905           *
   2906           * @brief       Network Status Callback function
   2907           *
   2908           * @param       nwkDstAddr - message's destination address- used to determine
   2909           *                           if the message was intended for this device or
   2910           *                           a sleeping end device.
   2911           * @param       statusCode - message's status code (ie. NWKSTAT_NONTREE_LINK_FAILURE)
   2912           * @param       dstAddr - the destination address related to the status code
   2913           *
   2914           * @return      none
   2915           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2916          void ZDO_NetworkStatusCB( uint16 nwkDstAddr, uint8 statusCode, uint16 dstAddr )
   \                     ZDO_NetworkStatusCB:
   2917          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2918            (void)dstAddr;     // Remove this line if this parameter is used.
   2919          
   2920            if ( (nwkDstAddr == NLME_GetShortAddr())
   2921                && (statusCode == NWKSTAT_NONTREE_LINK_FAILURE) )
   \   000004                ; Setup parameters for call to function NLME_GetShortAddr
   \   000004   12....       LCALL   ??NLME_GetShortAddr?relay
   2922            {
   2923              // Routing error for dstAddr, this is informational and a Route
   2924              // Request should happen automatically.
   2925            }
   2926          }
   \   000007   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   2927          
   2928          /******************************************************************************
   2929           * @fn          ZDApp_NwkWriteNVRequest (stubs AddrMgrWriteNVRequest)
   2930           *
   2931           * @brief       Stub routine implemented by NHLE. NHLE should call
   2932           *              <AddrMgrWriteNV> when appropriate.
   2933           *
   2934           * @param       none
   2935           *
   2936           * @return      none
   2937           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2938          void ZDApp_NwkWriteNVRequest( void )
   \                     AddrMgrWriteNVRequest:
   2939          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   2940          #if defined ( NV_RESTORE )
   2941            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B01         MOV     R3,#0x1
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_get_timeoutEx?relay
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   4C           ORL     A,R4
   \   000013   4D           ORL     A,R5
   \   000014   7003         JNZ     ??AddrMgrWriteNVRequest_0
   2942            {
   2943              // Trigger to save info into NV
   2944              ZDApp_NVUpdate();
   \   000016                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000016   12....       LCALL   ??ZDApp_NVUpdate?relay
   2945            }
   2946          #endif
   2947          }
   \                     ??AddrMgrWriteNVRequest_0:
   \   000019   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   2948          
   2949          /*********************************************************************
   2950           * Call Back Functions from Security  - API
   2951           */
   2952          
   2953           /*********************************************************************
   2954           * @fn          ZDO_UpdateDeviceIndication
   2955           *
   2956           * @brief       This function notifies the "Trust Center" of a
   2957           *              network when a device joins or leaves the network.
   2958           *
   2959           * @param       extAddr - pointer to 64 bit address of new device
   2960           * @param       status  - 0 if a new device joined securely
   2961           *                      - 1 if a new device joined un-securely
   2962           *                      - 2 if a device left the network
   2963           *
   2964           * @return      true if newly joined device should be allowed to
   2965           *                                              remain on network
   2966           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2967          ZStatus_t ZDO_UpdateDeviceIndication( uint8 *extAddr, uint8 status )
   \                     ZDO_UpdateDeviceIndication:
   2968          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   2969            // can implement a network access policy based on the
   2970            // IEEE address of newly joining devices...
   2971            (void)extAddr;
   2972            (void)status;
   2973          
   2974            return ZSuccess;
   \   000000   7900         MOV     R1,#0x0
   \   000002   02....       LJMP    ?BRET
   2975          }
   2976          
   2977          /*********************************************************************
   2978           * @fn          ZDApp_InMsgCB
   2979           *
   2980           * @brief       This function is called to pass up any message that is
   2981           *              not yet supported.  This allows for the developer to
   2982           *              support features themselves..
   2983           *
   2984           * @return      none
   2985           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2986          void ZDApp_InMsgCB( zdoIncomingMsg_t *inMsg )
   \                     ZDApp_InMsgCB:
   2987          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   2988            if ( inMsg->clusterID & ZDO_RESPONSE_BIT )
   \   000009   EE           MOV     A,R6
   \   00000A   240C         ADD     A,#0xc
   \   00000C   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   00000F   12....       LCALL   ??Subroutine41_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_44:
   \   000012   5480         ANL     A,#0x80
   \   000014   7044         JNZ     ??ZDApp_InMsgCB_0
   2989            {
   2990              // Handle the response message
   2991            }
   2992            else
   2993            {
   2994              // Handle the request message by sending a generic "not supported".
   2995              // Device Announce doesn't have a response.
   2996              if ( !(inMsg->wasBroadcast) && inMsg->clusterID != Device_annce )
   \   000016   12....       LCALL   ?Subroutine28 & 0xFFFF
   \                     ??CrossCallReturnLabel_110:
   \   000019   703F         JNZ     ??ZDApp_InMsgCB_0
   \   00001B   7413         MOV     A,#0x13
   \   00001D   68           XRL     A,R0
   \   00001E   7001         JNZ     ??ZDApp_InMsgCB_1
   \   000020   E9           MOV     A,R1
   \                     ??ZDApp_InMsgCB_1:
   \   000021   6037         JZ      ??ZDApp_InMsgCB_0
   2997              {
   2998                ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_NOT_SUPPORTED, 0,
   2999                                (uint16)(inMsg->clusterID | ZDO_RESPONSE_BIT), inMsg->SecurityUse );
   \   000023                ; Setup parameters for call to function ZDP_GenericRsp
   \   000023   E8           MOV     A,R0
   \   000024   F5..         MOV     ?V0 + 0,A
   \   000026   E9           MOV     A,R1
   \   000027   4480         ORL     A,#0x80
   \   000029   F5..         MOV     ?V0 + 1,A
   \   00002B   78..         MOV     R0,#?V0 + 0
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000030   E4           CLR     A
   \   000031   F5..         MOV     ?V0 + 0,A
   \   000033   F5..         MOV     ?V0 + 1,A
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   EE           MOV     A,R6
   \   00003B   240E         ADD     A,#0xe
   \   00003D   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   3000              }
   3001            }
   \                     ??CrossCallReturnLabel_107:
   \   000040   FD           MOV     R5,A
   \   000041   7C84         MOV     R4,#-0x7c
   \   000043   EE           MOV     A,R6
   \   000044   2402         ADD     A,#0x2
   \   000046   FA           MOV     R2,A
   \   000047   EF           MOV     A,R7
   \   000048   3400         ADDC    A,#0x0
   \   00004A   FB           MOV     R3,A
   \   00004B   EE           MOV     A,R6
   \   00004C   240F         ADD     A,#0xf
   \   00004E   12....       LCALL   ??Subroutine52_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   000051   F9           MOV     R1,A
   \   000052   12....       LCALL   ??ZDP_GenericRsp?relay
   \   000055   7404         MOV     A,#0x4
   \   000057   12....       LCALL   ?DEALLOC_XSTACK8
   3002          }
   \                     ??ZDApp_InMsgCB_0:
   \   00005A   02....       LJMP    ??Subroutine39_0 & 0xFFFF
   3003          
   3004          
   3005          /*********************************************************************
   3006           * @fn      ZDApp_ChangeMatchDescRespPermission()
   3007           *
   3008           * @brief   Changes the Match Descriptor Response permission.
   3009           *
   3010           * @param   endpoint - endpoint to allow responses
   3011           * @param   action - true to allow responses, false to not
   3012           *
   3013           * @return  none
   3014           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3015          void ZDApp_ChangeMatchDescRespPermission( uint8 endpoint, uint8 action )
   \                     ZDApp_ChangeMatchDescRespPermission:
   3016          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3017            // Store the action
   3018            afSetMatch( endpoint, action );
   \   000005                ; Setup parameters for call to function afSetMatch
   \   000005   12....       LCALL   ??afSetMatch?relay
   3019          }
   \   000008   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   3020          
   3021          /*********************************************************************
   3022           * @fn      ZDApp_NetworkInit()
   3023           *
   3024           * @brief   Used to start the network joining process
   3025           *
   3026           * @param   delay - mSec delay to wait before starting
   3027           *
   3028           * @return  none
   3029           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3030          void ZDApp_NetworkInit( uint16 delay )
   \                     ZDApp_NetworkInit:
   3031          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   3032            if ( delay )
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   6021         JZ      ??ZDApp_NetworkInit_0
   3033            {
   3034              // Wait awhile before starting the device
   3035              osal_start_timerEx( ZDAppTaskID, ZDO_NETWORK_INIT, delay );
   \   000009                ; Setup parameters for call to function osal_start_timerEx
   \   000009   8A..         MOV     ?V0 + 0,R2
   \   00000B   8B..         MOV     ?V0 + 1,R3
   \   00000D   E4           CLR     A
   \   00000E   F5..         MOV     ?V0 + 2,A
   \   000010   F5..         MOV     ?V0 + 3,A
   \   000012   78..         MOV     R0,#?V0 + 0
   \   000014   12....       LCALL   ?PUSH_XSTACK_I_FOUR
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   90....       MOV     DPTR,#ZDAppTaskID
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F9           MOV     R1,A
   \   000020   12....       LCALL   ??osal_start_timerEx?relay
   \   000023   7404         MOV     A,#0x4
   \   000025   12....       LCALL   ?DEALLOC_XSTACK8
   \   000028   800C         SJMP    ??ZDApp_NetworkInit_1
   3036            }
   3037            else
   3038            {
   3039              osal_set_event( ZDAppTaskID, ZDO_NETWORK_INIT );
   \                     ??ZDApp_NetworkInit_0:
   \   00002A                ; Setup parameters for call to function osal_set_event
   \   00002A   7A01         MOV     R2,#0x1
   \   00002C   7B00         MOV     R3,#0x0
   \   00002E   90....       MOV     DPTR,#ZDAppTaskID
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   ??osal_set_event?relay
   3040            }
   3041          }
   \                     ??ZDApp_NetworkInit_1:
   \   000036   02....       LJMP    ??Subroutine51_0 & 0xFFFF
   3042          
   3043          /*********************************************************************
   3044           * @fn      ZDApp_NwkStateUpdateCB()
   3045           *
   3046           * @brief   This function notifies that this device's network
   3047           *          state info has been changed.
   3048           *
   3049           * @param   none
   3050           *
   3051           * @return  none
   3052           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3053          void ZDApp_NwkStateUpdateCB( void )
   \                     ZDApp_NwkStateUpdateCB:
   3054          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3055            // Notify to save info into NV
   3056            if ( !osal_get_timeoutEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV ) )
   \   000004                ; Setup parameters for call to function osal_get_timeoutEx
   \   000004   7A00         MOV     R2,#0x0
   \   000006   7B01         MOV     R3,#0x1
   \   000008   90....       MOV     DPTR,#ZDAppTaskID
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   12....       LCALL   ??osal_get_timeoutEx?relay
   \   000010   EA           MOV     A,R2
   \   000011   4B           ORL     A,R3
   \   000012   4C           ORL     A,R4
   \   000013   4D           ORL     A,R5
   \   000014   7003         JNZ     ??ZDApp_NwkStateUpdateCB_0
   3057            {
   3058              // Trigger to save info into NV
   3059              ZDApp_NVUpdate();
   \   000016                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000016   12....       LCALL   ??ZDApp_NVUpdate?relay
   3060            }
   3061          }
   \                     ??ZDApp_NwkStateUpdateCB_0:
   \   000019   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3062          
   3063          /*********************************************************************
   3064           * @fn      ZDApp_NodeProfileSync()
   3065           *
   3066           * @brief   Sync node with stack profile.
   3067           *
   3068           * @param   stackProfile - stack profile of the network to join
   3069           *
   3070           * @return  none
   3071           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3072          void ZDApp_NodeProfileSync( uint8 stackProfile )
   \                     ZDApp_NodeProfileSync:
   3073          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   3074            if ( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_DEVICETYPE_FFD  )
   \   000007   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00000D   501A         JNC     ??ZDApp_NodeProfileSync_0
   3075            {
   3076              if ( stackProfile != zgStackProfile )
   \   00000F   90....       MOV     DPTR,#zgStackProfile
   \   000012   E0           MOVX    A,@DPTR
   \   000013   6E           XRL     A,R6
   \   000014   6013         JZ      ??ZDApp_NodeProfileSync_0
   3077              {
   3078                ZDO_Config_Node_Descriptor.LogicalType = NODETYPE_DEVICE;
   \   000016   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   54F8         ANL     A,#0xf8
   \   00001C   4402         ORL     A,#0x2
   \   00001E   F0           MOVX    @DPTR,A
   3079                ZDO_Config_Node_Descriptor.CapabilityFlags = CAPINFO_DEVICETYPE_RFD | CAPINFO_POWER_AC | CAPINFO_RCVR_ON_IDLE;
   \   00001F   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000022   740C         MOV     A,#0xc
   \   000024   F0           MOVX    @DPTR,A
   3080                NLME_SetBroadcastFilter( ZDO_Config_Node_Descriptor.CapabilityFlags );
   \   000025                ; Setup parameters for call to function NLME_SetBroadcastFilter
   \   000025   F9           MOV     R1,A
   \   000026   12....       LCALL   ??NLME_SetBroadcastFilter?relay
   3081              }
   3082            }
   3083          }
   \                     ??ZDApp_NodeProfileSync_0:
   \   000029   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   3084          
   3085          /*********************************************************************
   3086           * @fn      ZDApp_StartJoiningCycle()
   3087           *
   3088           * @brief   Starts the joining cycle of a device.  This will only
   3089           *          continue an already started (or stopped) joining cycle.
   3090           *
   3091           * @param   none
   3092           *
   3093           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3094           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3095          uint8 ZDApp_StartJoiningCycle( void )
   \                     ZDApp_StartJoiningCycle:
   3096          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3097            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StartJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7011         JNZ     ??ZDApp_StartJoiningCycle_1
   3098            {
   3099              continueJoining = TRUE;
   \                     ??ZDApp_StartJoiningCycle_0:
   \   000011   90....       MOV     DPTR,#continueJoining
   \   000014   7401         MOV     A,#0x1
   \   000016   F0           MOVX    @DPTR,A
   3100              ZDApp_NetworkInit( 0 );
   \   000017                ; Setup parameters for call to function ZDApp_NetworkInit
   \   000017   7A00         MOV     R2,#0x0
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   12....       LCALL   ??ZDApp_NetworkInit?relay
   3101          
   3102              return ( TRUE );
   \   00001E   7901         MOV     R1,#0x1
   \   000020   8002         SJMP    ??ZDApp_StartJoiningCycle_2
   3103            }
   3104            else
   3105              return ( FALSE );
   \                     ??ZDApp_StartJoiningCycle_1:
   \   000022   7900         MOV     R1,#0x0
   \                     ??ZDApp_StartJoiningCycle_2:
   \   000024   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3106          }
   3107          
   3108          /*********************************************************************
   3109           * @fn      ZDApp_StopJoiningCycle()
   3110           *
   3111           * @brief   Stops the joining or rejoining process of a device.
   3112           *
   3113           * @param   none
   3114           *
   3115           * @return  TRUE if joining stopped, FALSE if joining or rejoining
   3116           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3117          uint8 ZDApp_StopJoiningCycle( void )
   \                     ZDApp_StopJoiningCycle:
   3118          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3119            if ( devState == DEV_INIT || devState == DEV_NWK_DISC )
   \   000004   90....       MOV     DPTR,#devState
   \   000007   E0           MOVX    A,@DPTR
   \   000008   6401         XRL     A,#0x1
   \   00000A   6005         JZ      ??ZDApp_StopJoiningCycle_0
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6402         XRL     A,#0x2
   \   00000F   7009         JNZ     ??ZDApp_StopJoiningCycle_1
   3120            {
   3121              continueJoining = FALSE;
   \                     ??ZDApp_StopJoiningCycle_0:
   \   000011   90....       MOV     DPTR,#continueJoining
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   3122              return ( TRUE );
   \   000016   7901         MOV     R1,#0x1
   \   000018   8002         SJMP    ??ZDApp_StopJoiningCycle_2
   3123            }
   3124            else
   3125              return ( FALSE );
   \                     ??ZDApp_StopJoiningCycle_1:
   \   00001A   7900         MOV     R1,#0x0
   \                     ??ZDApp_StopJoiningCycle_2:
   \   00001C   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3126          }
   3127          
   3128          /*********************************************************************
   3129           * @fn      ZDApp_AnnounceNewAddress()
   3130           *
   3131           * @brief   Send Device Announce and hold all transmissions for
   3132           *          new address timeout.
   3133           *
   3134           * @param   none
   3135           *
   3136           * @return  none
   3137           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3138          void ZDApp_AnnounceNewAddress( void )
   \                     ZDApp_AnnounceNewAddress:
   3139          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   3140          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   3141            // Turn off data request hold
   3142            APSME_HoldDataRequests( 0 );
   \   000005                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000005   7A00         MOV     R2,#0x0
   \   000007   7B00         MOV     R3,#0x0
   \   000009   12....       LCALL   ??APSME_HoldDataRequests?relay
   3143          #endif
   3144          
   3145            ZDP_DeviceAnnce( NLME_GetShortAddr(), NLME_GetExtAddr(),
   3146                               ZDO_Config_Node_Descriptor.CapabilityFlags, 0 );
   \   00000C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00000C   12....       LCALL   ??NLME_GetExtAddr?relay
   \   00000F   8A..         MOV     ?V0 + 0,R2
   \   000011   8B..         MOV     ?V0 + 1,R3
   \   000013   AE..         MOV     R6,?V0 + 0
   \   000015                ; Setup parameters for call to function NLME_GetShortAddr
   \   000015   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000018                ; Setup parameters for call to function ZDP_DeviceAnnce
   \   000018   75..00       MOV     ?V0 + 0,#0x0
   \   00001B   78..         MOV     R0,#?V0 + 0
   \   00001D   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000020   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   EE           MOV     A,R6
   \   000026   FC           MOV     R4,A
   \   000027   AD..         MOV     R5,?V0 + 1
   \   000029   12....       LCALL   ??ZDP_DeviceAnnce?relay
   \   00002C   7401         MOV     A,#0x1
   \   00002E   12....       LCALL   ?DEALLOC_XSTACK8
   3147          
   3148          #if defined ( ZIGBEE_NWK_UNIQUE_ADDR_CHECK )
   3149            // Setup the timeout
   3150            APSME_HoldDataRequests( ZDAPP_HOLD_DATA_REQUESTS_TIMEOUT );
   \   000031                ; Setup parameters for call to function APSME_HoldDataRequests
   \   000031   7A00         MOV     R2,#0x0
   \   000033   7B00         MOV     R3,#0x0
   \   000035   12....       LCALL   ??APSME_HoldDataRequests?relay
   3151          #endif
   3152          }
   \   000038   02....       LJMP    ??Subroutine39_0 & 0xFFFF
   3153          
   3154          /*********************************************************************
   3155           * @fn          ZDApp_NVUpdate
   3156           *
   3157           * @brief       Set the NV Update Timer.
   3158           *
   3159           * @param       none
   3160           *
   3161           * @return      none
   3162           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3163          void ZDApp_NVUpdate( void )
   \                     ZDApp_NVUpdate:
   3164          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3165          #if defined ( NV_RESTORE )
   3166            osal_start_timerEx( ZDAppTaskID, ZDO_NWK_UPDATE_NV, ZDAPP_UPDATE_NWK_NV_TIME );
   \   000004                ; Setup parameters for call to function osal_start_timerEx
   \   000004   90....       MOV     DPTR,#__Constant_2bc
   \   000007   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00000A   7A00         MOV     R2,#0x0
   \   00000C   7B01         MOV     R3,#0x1
   \   00000E   90....       MOV     DPTR,#ZDAppTaskID
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F9           MOV     R1,A
   \   000013   12....       LCALL   ??osal_start_timerEx?relay
   \   000016   7404         MOV     A,#0x4
   \   000018   02....       LJMP    ?Subroutine4 & 0xFFFF
   3167          #endif
   3168          }
   3169          
   3170          /*********************************************************************
   3171           * @fn      ZDApp_CoordStartPANIDConflictCB()
   3172           *
   3173           * @brief   Returns a PAN ID for the network layer to use during
   3174           *          a coordinator start and there is another network with
   3175           *          the intended PANID.
   3176           *
   3177           * @param   panid - the intended PAN ID
   3178           *
   3179           * @return  PANID to try
   3180           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3181          uint16 ZDApp_CoordStartPANIDConflictCB( uint16 panid )
   \                     ZDApp_CoordStartPANIDConflictCB:
   3182          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   3183            return ( panid + 1 );
   \   000000   EA           MOV     A,R2
   \   000001   2401         ADD     A,#0x1
   \   000003   0A           INC     R2
   \   000004   EB           MOV     A,R3
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   02....       LJMP    ?BRET
   3184          }
   3185          
   3186          /*********************************************************************
   3187           * @fn          ZDO_SrcRtgIndCB
   3188           *
   3189           * @brief       This function notifies the ZDO available src route record received.
   3190           *
   3191           * @param       srcAddr - source address of the source route
   3192           * @param       relayCnt - number of devices in the relay list
   3193           * @param       relayList - relay list of the source route
   3194           *
   3195           * @return      none
   3196           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3197          void ZDO_SrcRtgIndCB (uint16 srcAddr, uint8 relayCnt, uint16* pRelayList )
   \                     ZDO_SrcRtgIndCB:
   3198          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3199            zdoSrcRtg_t srcRtg;
   3200          
   3201            srcRtg.srcAddr = srcAddr;
   \   00000A   12....       LCALL   ?Subroutine12 & 0xFFFF
   3202            srcRtg.relayCnt = relayCnt;
   \                     ??CrossCallReturnLabel_102:
   \   00000D   7402         MOV     A,#0x2
   \   00000F   12....       LCALL   ?XSTACK_DISP0_8
   \   000012   E9           MOV     A,R1
   \   000013   F0           MOVX    @DPTR,A
   3203            srcRtg.pRelayList = pRelayList;
   \   000014   7403         MOV     A,#0x3
   \   000016   12....       LCALL   ?XSTACK_DISP0_8
   \   000019   EC           MOV     A,R4
   \   00001A   F0           MOVX    @DPTR,A
   \   00001B   A3           INC     DPTR
   \   00001C   ED           MOV     A,R5
   \   00001D   F0           MOVX    @DPTR,A
   3204          
   3205            if( zdoCBFunc[ZDO_SRC_RTG_IND_CBID] != NULL )
   \   00001E   90....       MOV     DPTR,#zdoCBFunc
   \   000021   12....       LCALL   ??Subroutine43_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000024   6013         JZ      ??ZDO_SrcRtgIndCB_0
   3206            {
   3207              zdoCBFunc[ZDO_SRC_RTG_IND_CBID]( (void*)&srcRtg );
   \   000026                ; Setup parameters for indirect call
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   AA82         MOV     R2,DPL
   \   00002E   AB83         MOV     R3,DPH
   \   000030   90....       MOV     DPTR,#zdoCBFunc + 1
   \   000033   12....       LCALL   ??Subroutine49_0 & 0xFFFF
   3208            }
   \                     ??CrossCallReturnLabel_92:
   \   000036   12....       LCALL   ?CALL_IND
   3209          }
   \                     ??ZDO_SrcRtgIndCB_0:
   \   000039                REQUIRE ?Subroutine7
   \   000039                ; // Fall through to label ?Subroutine7
   3210          
   3211          /*********************************************************************
   3212           * @fn          ZDApp_InitZdoCBFunc
   3213           *
   3214           * @brief       Call this function to initialize zdoCBFunc[]
   3215           *
   3216           * @param       none
   3217           *
   3218           * @return      none
   3219           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3220          void ZDApp_InitZdoCBFunc( void )
   \                     ZDApp_InitZdoCBFunc:
   3221          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3222            uint8 i;
   3223          
   3224            for ( i=0; i< MAX_ZDO_CB_FUNC; i++ )
   \   000004   7A00         MOV     R2,#0x0
   3225            {
   3226              zdoCBFunc[i] = NULL;
   \                     ??ZDApp_InitZdoCBFunc_0:
   \   000006   12....       LCALL   ?Subroutine29 & 0xFFFF
   3227            }
   \                     ??CrossCallReturnLabel_25:
   \   000009   0A           INC     R2
   \   00000A   EA           MOV     A,R2
   \   00000B   C3           CLR     C
   \   00000C   9407         SUBB    A,#0x7
   \   00000E   40F6         JC      ??ZDApp_InitZdoCBFunc_0
   3228          }
   \   000010   02....       LJMP    ??Subroutine40_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   EA           MOV     A,R2
   \   000001   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000004   E4           CLR     A
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   C3           CLR     C
   \   000001   33           RLC     A
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   33           RLC     A
   \   000005   F9           MOV     R1,A
   \   000006   74..         MOV     A,#zdoCBFunc & 0xff
   \   000008   28           ADD     A,R0
   \   000009   F582         MOV     DPL,A
   \   00000B   74..         MOV     A,#(zdoCBFunc >> 8) & 0xff
   \   00000D   39           ADDC    A,R1
   \   00000E   F583         MOV     DPH,A
   \   000010   22           RET
   3229          
   3230          /*********************************************************************
   3231           * @fn          ZDO_RegisterForZdoCB
   3232           *
   3233           * @brief       Call this function to register the higher layer (for
   3234           *              example, the Application layer or MT layer) with ZDO
   3235           *              callbacks to get notified of some ZDO indication like
   3236           *              existence of a concentrator or receipt of a source
   3237           *              route record.
   3238           *
   3239           * @param       indID - ZDO Indication ID
   3240           * @param       pFn   - Callback function pointer
   3241           *
   3242           * @return      ZSuccess - successful, ZInvalidParameter if not
   3243           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3244          ZStatus_t ZDO_RegisterForZdoCB( uint8 indID, pfnZdoCb pFn )
   \                     ZDO_RegisterForZdoCB:
   3245          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FC           MOV     R4,A
   3246            // Check the range of the indication ID
   3247            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9407         SUBB    A,#0x7
   \   000009   500B         JNC     ??ZDO_RegisterForZdoCB_0
   3248            {
   3249              zdoCBFunc[indID] = pFn;
   \   00000B   EC           MOV     A,R4
   \   00000C   12....       LCALL   ?Subroutine33 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   00000F   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   3250              return ZSuccess;
   \                     ??CrossCallReturnLabel_98:
   \   000012   7900         MOV     R1,#0x0
   \   000014   8002         SJMP    ??ZDO_RegisterForZdoCB_1
   3251            }
   3252          
   3253            return ZInvalidParameter;
   \                     ??ZDO_RegisterForZdoCB_0:
   \   000016   7902         MOV     R1,#0x2
   \                     ??ZDO_RegisterForZdoCB_1:
   \   000018   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3254          }
   3255          
   3256          /*********************************************************************
   3257           * @fn          ZDO_DeregisterForZdoCB
   3258           *
   3259           * @brief       Call this function to de-register the higher layer (for
   3260           *              example, the Application layer or MT layer) with ZDO
   3261           *              callbacks to get notified of some ZDO indication like
   3262           *              existence of a concentrator or receipt of a source
   3263           *              route record.
   3264           *
   3265           * @param       indID - ZDO Indication ID
   3266           *
   3267           * @return      ZSuccess - successful, ZInvalidParameter if not
   3268           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3269          ZStatus_t ZDO_DeregisterForZdoCB( uint8 indID )
   \                     ZDO_DeregisterForZdoCB:
   3270          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   \   000004   E9           MOV     A,R1
   \   000005   FA           MOV     R2,A
   3271            // Check the range of the indication ID
   3272            if ( indID < MAX_ZDO_CB_FUNC )
   \   000006   C3           CLR     C
   \   000007   9407         SUBB    A,#0x7
   \   000009   5006         JNC     ??ZDO_DeregisterForZdoCB_0
   3273            {
   3274              zdoCBFunc[indID] = NULL;
   \   00000B   12....       LCALL   ?Subroutine29 & 0xFFFF
   3275              return ZSuccess;
   \                     ??CrossCallReturnLabel_26:
   \   00000E   F9           MOV     R1,A
   \   00000F   8002         SJMP    ??ZDO_DeregisterForZdoCB_1
   3276            }
   3277          
   3278            return ZInvalidParameter;
   \                     ??ZDO_DeregisterForZdoCB_0:
   \   000011   7902         MOV     R1,#0x2
   \                     ??ZDO_DeregisterForZdoCB_1:
   \   000013   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3279          }
   3280          
   3281          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   3282          #if defined ( REFLECTOR )
   3283          /*********************************************************************
   3284           * @fn          ZDApp_SetPendingBindDefault
   3285           *
   3286           * @brief       This function initializes a specific entry of pending
   3287           *              Bind Request.
   3288           *
   3289           * @param       pendBindReq - pointer to the entry in the table
   3290           *
   3291           * @return      none
   3292           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3293          void ZDApp_SetPendingBindDefault( ZDO_PendingBindReq_t *pendBindReq )
   \                     ZDApp_SetPendingBindDefault:
   3294          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   3295            // Set it to an initial value
   3296            osal_memset( pendBindReq, 0xFF, sizeof( ZDO_PendingBindReq_t ) );
   \   000009                ; Setup parameters for call to function osal_memset
   \   000009   7C21         MOV     R4,#0x21
   \   00000B   7D00         MOV     R5,#0x0
   \   00000D   79FF         MOV     R1,#-0x1
   \   00000F   12....       LCALL   ??osal_memset?relay
   3297          
   3298            // We are checking for age 0 for aged-out records
   3299            pendBindReq->age = 0;
   \   000012   EE           MOV     A,R6
   \   000013   2420         ADD     A,#0x20
   \   000015   12....       LCALL   ?Subroutine34 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   000018   E4           CLR     A
   \   000019   F0           MOVX    @DPTR,A
   3300          }
   \   00001A   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   3301          
   3302          /*********************************************************************
   3303           * @fn          ZDApp_InitPendingBind
   3304           *
   3305           * @brief       This function initializes the buffer that holds
   3306           *              pending Bind Request messages if no valid NWK address
   3307           *              exists in Address Manager and a Network Address Req
   3308           *              has been sent out.
   3309           *
   3310           * @param       none
   3311           *
   3312           * @return      none
   3313           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003                REQUIRE ??Subroutine43_0
   \   000003                ; // Fall through to label ??Subroutine43_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3314          void ZDApp_InitPendingBind( void )
   \                     ZDApp_InitPendingBind:
   3315          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   3316            if ( ZDAppPendingBindReq == NULL )
   \   000005   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_71:
   \   000008   7030         JNZ     ??ZDApp_InitPendingBind_0
   3317            {
   3318              if ( ( ZDAppPendingBindReq = osal_mem_alloc( sizeof(ZDO_PendingBindReq_t) * MAX_PENDING_BIND_REQ ) ) != NULL )
   \   00000A                ; Setup parameters for call to function osal_mem_alloc
   \   00000A   7A63         MOV     R2,#0x63
   \   00000C   7B00         MOV     R3,#0x0
   \   00000E   12....       LCALL   ??osal_mem_alloc?relay
   \   000011   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000014   12....       LCALL   ??Subroutine50_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_99:
   \   000017   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   00001A   601E         JZ      ??ZDApp_InitPendingBind_0
   3319              {
   3320                uint8 i;
   3321          
   3322                for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   00001C   7E00         MOV     R6,#0x0
   3323                {
   3324                  // Set to default values
   3325                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \                     ??ZDApp_InitPendingBind_1:
   \   00001E                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   00001E   EE           MOV     A,R6
   \   00001F   75F021       MOV     B,#0x21
   \   000022   A4           MUL     AB
   \   000023   F8           MOV     R0,A
   \   000024   A9F0         MOV     R1,B
   \   000026   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   28           ADD     A,R0
   \   00002B   FA           MOV     R2,A
   \   00002C   A3           INC     DPTR
   \   00002D   E0           MOVX    A,@DPTR
   \   00002E   39           ADDC    A,R1
   \   00002F   FB           MOV     R3,A
   \   000030   12....       LCALL   ??ZDApp_SetPendingBindDefault?relay
   3326                }
   \   000033   0E           INC     R6
   \   000034   EE           MOV     A,R6
   \   000035   C3           CLR     C
   \   000036   9403         SUBB    A,#0x3
   \   000038   40E4         JC      ??ZDApp_InitPendingBind_1
   3327              }
   3328            }
   3329          }
   \                     ??ZDApp_InitPendingBind_0:
   \   00003A   02....       LJMP    ??Subroutine44_0 & 0xFFFF
   3330          
   3331          /*********************************************************************
   3332           * @fn          ZDApp_GetEmptyPendingBindReq
   3333           *
   3334           * @brief       This function looks for an empty entry.
   3335           *
   3336           * @param       none
   3337           *
   3338           * @return      Pointer to entry
   3339           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3340          ZDO_PendingBindReq_t *ZDApp_GetEmptyPendingBindReq( void )
   \                     ZDApp_GetEmptyPendingBindReq:
   3341          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3342            uint8 i;
   3343          
   3344            if ( ZDAppPendingBindReq != NULL )
   \   000004   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_73:
   \   000007   6026         JZ      ??ZDApp_GetEmptyPendingBindReq_0
   3345            {
   3346              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000009   7C00         MOV     R4,#0x0
   3347              {
   3348                if ( ZDAppPendingBindReq[i].age == 0 )
   \                     ??ZDApp_GetEmptyPendingBindReq_1:
   \   00000B   EC           MOV     A,R4
   \   00000C   75F021       MOV     B,#0x21
   \   00000F   A4           MUL     AB
   \   000010   F8           MOV     R0,A
   \   000011   A9F0         MOV     R1,B
   \   000013   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000016   E0           MOVX    A,@DPTR
   \   000017   28           ADD     A,R0
   \   000018   FA           MOV     R2,A
   \   000019   A3           INC     DPTR
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   39           ADDC    A,R1
   \   00001C   FB           MOV     R3,A
   \   00001D   EA           MOV     A,R2
   \   00001E   2420         ADD     A,#0x20
   \   000020   F582         MOV     DPL,A
   \   000022   EB           MOV     A,R3
   \   000023   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_104:
   \   000026   600B         JZ      ??ZDApp_GetEmptyPendingBindReq_2
   3349                {
   3350                  return ( &ZDAppPendingBindReq[i] );
   3351                }
   3352              }
   \   000028   0C           INC     R4
   \   000029   EC           MOV     A,R4
   \   00002A   C3           CLR     C
   \   00002B   9403         SUBB    A,#0x3
   \   00002D   40DC         JC      ??ZDApp_GetEmptyPendingBindReq_1
   3353            }
   3354          
   3355            // No empty entry was found
   3356            return NULL;
   \                     ??ZDApp_GetEmptyPendingBindReq_0:
   \   00002F   7A00         MOV     R2,#0x0
   \   000031   7B00         MOV     R3,#0x0
   \                     ??ZDApp_GetEmptyPendingBindReq_2:
   \   000033   02....       LJMP    ??Subroutine40_0 & 0xFFFF
   3357          }
   3358          
   3359          /*********************************************************************
   3360           * @fn          ZDApp_ProcessPendingBindReq
   3361           *
   3362           * @brief       Process pending entry based on EXT address.
   3363           *
   3364           * @param       extAddr - of device to look up
   3365           *
   3366           * @return      none
   3367           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3368          void ZDApp_ProcessPendingBindReq( uint8 *extAddr )
   \                     ZDApp_ProcessPendingBindReq:
   3369          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   3370            uint8 i;
   3371          
   3372            // Loop through all the pending entries for that Ext Address
   3373            // to create Bind Entries and send Bind Rsp
   3374            if ( ZDAppPendingBindReq != NULL )
   \   00000E   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_74:
   \   000011   7003         JNZ     $+5
   \   000013   02....       LJMP    ??ZDApp_ProcessPendingBindReq_0 & 0xFFFF
   3375            {
   3376              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000016   75..00       MOV     ?V0 + 0,#0x0
   3377              {
   3378                if ( osal_memcmp( ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr,
   3379                                  extAddr, Z_EXTADDR_LEN ) == TRUE )
   \                     ??ZDApp_ProcessPendingBindReq_1:
   \   000019   E5..         MOV     A,?V0 + 0
   \   00001B   75F021       MOV     B,#0x21
   \   00001E   A4           MUL     AB
   \   00001F   FE           MOV     R6,A
   \   000020   AFF0         MOV     R7,B
   \   000022                ; Setup parameters for call to function osal_memcmp
   \   000022   85....       MOV     ?V0 + 4,?V0 + 2
   \   000025   85....       MOV     ?V0 + 5,?V0 + 3
   \   000028   75..00       MOV     ?V0 + 6,#0x0
   \   00002B   78..         MOV     R0,#?V0 + 4
   \   00002D   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000030   7C08         MOV     R4,#0x8
   \   000032   7D00         MOV     R5,#0x0
   \   000034   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000037   240B         ADD     A,#0xb
   \   000039   F5..         MOV     ?V0 + 4,A
   \   00003B   E9           MOV     A,R1
   \   00003C   3400         ADDC    A,#0x0
   \   00003E   A9..         MOV     R1,?V0 + 4
   \   000040   FA           MOV     R2,A
   \   000041   7B00         MOV     R3,#0x0
   \   000043   12....       LCALL   ??osal_memcmp?relay
   \   000046   7403         MOV     A,#0x3
   \   000048   12....       LCALL   ?DEALLOC_XSTACK8
   \   00004B   E9           MOV     A,R1
   \   00004C   6401         XRL     A,#0x1
   \   00004E   6003         JZ      $+5
   \   000050   02....       LJMP    ??ZDApp_ProcessPendingBindReq_2 & 0xFFFF
   3380                {
   3381                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   000053   85..82       MOV     DPL,?XSP + 0
   \   000056   85..83       MOV     DPH,?XSP + 1
   \   000059   748C         MOV     A,#-0x74
   \   00005B   F0           MOVX    @DPTR,A
   3382          
   3383                  // Add Bind entry
   3384                  if ( APSME_BindRequest( ZDAppPendingBindReq[i].bindReq.srcEndpoint,
   3385                                          ZDAppPendingBindReq[i].bindReq.clusterID,
   3386                                          &(ZDAppPendingBindReq[i].bindReq.dstAddress),
   3387                                          ZDAppPendingBindReq[i].bindReq.dstEndpoint ) == ZSuccess )
   \   00005C   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   2E           ADD     A,R6
   \   000061   F5..         MOV     ?V0 + 4,A
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   3F           ADDC    A,R7
   \   000066   F5..         MOV     ?V0 + 5,A
   \   000068                ; Setup parameters for call to function APSME_BindRequest
   \   000068   E5..         MOV     A,?V0 + 4
   \   00006A   2414         ADD     A,#0x14
   \   00006C   F582         MOV     DPL,A
   \   00006E   E5..         MOV     A,?V0 + 5
   \   000070   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_105:
   \   000073   F5..         MOV     ?V0 + 1,A
   \   000075   78..         MOV     R0,#?V0 + 1
   \   000077   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007A   E5..         MOV     A,?V0 + 4
   \   00007C   240B         ADD     A,#0xb
   \   00007E   FC           MOV     R4,A
   \   00007F   E5..         MOV     A,?V0 + 5
   \   000081   3400         ADDC    A,#0x0
   \   000083   FD           MOV     R5,A
   \   000084   85..82       MOV     DPL,?V0 + 4
   \   000087   85..83       MOV     DPH,?V0 + 5
   \   00008A   A3           INC     DPTR
   \   00008B   A3           INC     DPTR
   \   00008C   A3           INC     DPTR
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   12....       LCALL   ??Subroutine42_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_56:
   \   000096   85..82       MOV     DPL,?V0 + 4
   \   000099   85..83       MOV     DPH,?V0 + 5
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   A3           INC     DPTR
   \   0000A1   A3           INC     DPTR
   \   0000A2   A3           INC     DPTR
   \   0000A3   A3           INC     DPTR
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   F9           MOV     R1,A
   \   0000A6   12....       LCALL   ??APSME_BindRequest?relay
   \   0000A9   7401         MOV     A,#0x1
   \   0000AB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000AE   E9           MOV     A,R1
   \   0000AF   700B         JNZ     ??ZDApp_ProcessPendingBindReq_3
   3388                  {
   3389                    // valid entry
   3390                    bindStat = ZDP_SUCCESS;
   \   0000B1   85..82       MOV     DPL,?XSP + 0
   \   0000B4   85..83       MOV     DPH,?XSP + 1
   \   0000B7   E4           CLR     A
   \   0000B8   F0           MOVX    @DPTR,A
   3391          
   3392                    // Notify to save info into NV
   3393                    ZDApp_NVUpdate();
   \   0000B9                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000B9   12....       LCALL   ??ZDApp_NVUpdate?relay
   3394                  }
   3395          
   3396                  // Send back a response message
   3397                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq, &(ZDAppPendingBindReq[i].srcAddr),
   3398                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_ProcessPendingBindReq_3:
   \   0000BC   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000BF   F5..         MOV     ?V0 + 1,A
   \   0000C1   78..         MOV     R0,#?V0 + 1
   \   0000C3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C6   7401         MOV     A,#0x1
   \   0000C8   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CB   8582..       MOV     ?V0 + 4,DPL
   \   0000CE   8583..       MOV     ?V0 + 5,DPH
   \   0000D1   78..         MOV     R0,#?V0 + 4
   \   0000D3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D6   75..21       MOV     ?V0 + 4,#0x21
   \   0000D9   75..80       MOV     ?V0 + 5,#-0x80
   \   0000DC   78..         MOV     R0,#?V0 + 4
   \   0000DE   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E1   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0000E4   12....       LCALL   ??ZDP_SendData?relay
   \   0000E7   7405         MOV     A,#0x5
   \   0000E9   12....       LCALL   ?DEALLOC_XSTACK8
   3399          
   3400                  // Set the pending request entry to default values
   3401                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0000EC                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   0000EC   12....       LCALL   ?Subroutine31 & 0xFFFF
   3402                }
   3403              }
   \                     ??CrossCallReturnLabel_29:
   \   0000EF   12....       LCALL   ??ZDApp_SetPendingBindDefault?relay
   \                     ??ZDApp_ProcessPendingBindReq_2:
   \   0000F2   05..         INC     ?V0 + 0
   \   0000F4   E5..         MOV     A,?V0 + 0
   \   0000F6   C3           CLR     C
   \   0000F7   9403         SUBB    A,#0x3
   \   0000F9   5003         JNC     $+5
   \   0000FB   02....       LJMP    ??ZDApp_ProcessPendingBindReq_1 & 0xFFFF
   3404            }
   3405          }
   \                     ??ZDApp_ProcessPendingBindReq_0:
   \   0000FE   7401         MOV     A,#0x1
   \   000100   02....       LJMP    ?Subroutine6 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2E           ADD     A,R6
   \   000005   FA           MOV     R2,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   3F           ADDC    A,R7
   \   000009   FB           MOV     R3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   7901         MOV     R1,#0x1
   \   000002   EA           MOV     A,R2
   \   000003   2415         ADD     A,#0x15
   \   000005   FC           MOV     R4,A
   \   000006   EB           MOV     A,R3
   \   000007   3400         ADDC    A,#0x0
   \   000009   FD           MOV     R5,A
   \   00000A   EA           MOV     A,R2
   \   00000B   241F         ADD     A,#0x1f
   \   00000D   FA           MOV     R2,A
   \   00000E   EB           MOV     A,R3
   \   00000F   3400         ADDC    A,#0x0
   \   000011   FB           MOV     R3,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   90....       MOV     DPTR,#ZDAppPendingBindReq
   \   000003   E0           MOVX    A,@DPTR
   \   000004   2E           ADD     A,R6
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   3F           ADDC    A,R7
   \   000009   F9           MOV     R1,A
   \   00000A   E8           MOV     A,R0
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000003                ; Setup parameters for call to function ZDP_SendData
   \   000003                ; Setup parameters for call to function ZDP_SendData
   \   000003   EA           MOV     A,R2
   \   000004   241E         ADD     A,#0x1e
   \   000006   F582         MOV     DPL,A
   \   000008   EB           MOV     A,R3
   \   000009   12....       LCALL   ??Subroutine46_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   22           RET
   3406          
   3407          /*********************************************************************
   3408           * @fn          ZDApp_AgeOutPendingBindEntry
   3409           *
   3410           * @brief       Age out pending Bind Req entries.
   3411           *
   3412           * @param       none
   3413           *
   3414           * @return      none
   3415           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3416          void ZDApp_AgeOutPendingBindEntry( void )
   \                     ZDApp_AgeOutPendingBindEntry:
   3417          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 14
   \   000005   74F2         MOV     A,#-0xe
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   3418            uint8 i;
   3419            bool entryFound = FALSE;
   \   00000A   75..00       MOV     ?V0 + 1,#0x0
   3420          
   3421            if ( ZDAppPendingBindReq != NULL )
   \   00000D   12....       LCALL   ?Subroutine15 & 0xFFFF
   \                     ??CrossCallReturnLabel_75:
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_0 & 0xFFFF
   3422            {
   3423              for ( i = 0; i < MAX_PENDING_BIND_REQ; i++ )
   \   000015   75..00       MOV     ?V0 + 0,#0x0
   3424              {
   3425                if ( ZDAppPendingBindReq[i].age > 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_1:
   \   000018   E5..         MOV     A,?V0 + 0
   \   00001A   75F021       MOV     B,#0x21
   \   00001D   A4           MUL     AB
   \   00001E   FE           MOV     R6,A
   \   00001F   AFF0         MOV     R7,B
   \   000021   12....       LCALL   ?Subroutine27 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000024   2420         ADD     A,#0x20
   \   000026   F582         MOV     DPL,A
   \   000028   E9           MOV     A,R1
   \   000029   12....       LCALL   ??Subroutine53_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   00002C   FA           MOV     R2,A
   \   00002D   C3           CLR     C
   \   00002E   9402         SUBB    A,#0x2
   \   000030   4009         JC      ??ZDApp_AgeOutPendingBindEntry_2
   3426                {
   3427                  ZDAppPendingBindReq[i].age--;
   \   000032   E0           MOVX    A,@DPTR
   \   000033   14           DEC     A
   \   000034   F0           MOVX    @DPTR,A
   3428          
   3429                  entryFound = TRUE;
   \   000035   75..01       MOV     ?V0 + 1,#0x1
   \   000038   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
   3430                }
   3431                else if ( ZDAppPendingBindReq[i].age == 1 )
   \                     ??ZDApp_AgeOutPendingBindEntry_2:
   \   00003B   7401         MOV     A,#0x1
   \   00003D   6A           XRL     A,R2
   \   00003E   6003         JZ      $+5
   \   000040   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_3 & 0xFFFF
   3432                {
   3433                  // The record has aged out and has valid data
   3434                  AddrMgrEntry_t entry;
   3435                  uint8 bindStat = ZDP_TABLE_FULL; // Assume table is full
   \   000043   85..82       MOV     DPL,?XSP + 0
   \   000046   85..83       MOV     DPH,?XSP + 1
   \   000049   748C         MOV     A,#-0x74
   \   00004B   F0           MOVX    @DPTR,A
   3436          
   3437                  entry.user = ADDRMGR_USER_BINDING;
   \   00004C   7401         MOV     A,#0x1
   \   00004E   12....       LCALL   ?XSTACK_DISP0_8
   \   000051   7404         MOV     A,#0x4
   \   000053   F0           MOVX    @DPTR,A
   3438          
   3439                  // Remove the entry in address manager so we do not keep entries
   3440                  // with invalid addresses
   3441                  AddrMgrExtAddrSet( entry.extAddr, ZDAppPendingBindReq[i].bindReq.dstAddress.addr.extAddr );
   \   000054                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000054   E8           MOV     A,R0
   \   000055   240B         ADD     A,#0xb
   \   000057   FC           MOV     R4,A
   \   000058   E9           MOV     A,R1
   \   000059   3400         ADDC    A,#0x0
   \   00005B   FD           MOV     R5,A
   \   00005C   7404         MOV     A,#0x4
   \   00005E   12....       LCALL   ?XSTACK_DISP0_8
   \   000061   AA82         MOV     R2,DPL
   \   000063   AB83         MOV     R3,DPH
   \   000065   12....       LCALL   ??AddrMgrExtAddrSet?relay
   3442          
   3443                  if ( AddrMgrEntryLookupExt( &entry ) == TRUE )
   \   000068                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   000068   7401         MOV     A,#0x1
   \   00006A   12....       LCALL   ?XSTACK_DISP0_8
   \   00006D   AA82         MOV     R2,DPL
   \   00006F   AB83         MOV     R3,DPH
   \   000071   12....       LCALL   ??AddrMgrEntryLookupExt?relay
   \   000074   E9           MOV     A,R1
   \   000075   6401         XRL     A,#0x1
   \   000077   701B         JNZ     ??ZDApp_AgeOutPendingBindEntry_4
   3444                  {
   3445                    if ( entry.nwkAddr == INVALID_NODE_ADDR )
   \   000079   7402         MOV     A,#0x2
   \   00007B   12....       LCALL   ?XSTACK_DISP0_8
   \   00007E   E0           MOVX    A,@DPTR
   \   00007F   64FE         XRL     A,#0xfe
   \   000081   7003         JNZ     ??ZDApp_AgeOutPendingBindEntry_5
   \   000083   A3           INC     DPTR
   \   000084   E0           MOVX    A,@DPTR
   \   000085   F4           CPL     A
   \                     ??ZDApp_AgeOutPendingBindEntry_5:
   \   000086   700C         JNZ     ??ZDApp_AgeOutPendingBindEntry_4
   3446                    {
   3447                      // Release the entry that contains an invalid NWK address
   3448                      AddrMgrEntryRelease( &entry );
   \   000088                ; Setup parameters for call to function AddrMgrEntryRelease
   \   000088   7401         MOV     A,#0x1
   \   00008A   12....       LCALL   ?XSTACK_DISP0_8
   \   00008D   AA82         MOV     R2,DPL
   \   00008F   AB83         MOV     R3,DPH
   \   000091   12....       LCALL   ??AddrMgrEntryRelease?relay
   3449                    }
   3450                  }
   3451          
   3452                  // Send the Bind Response with failure status
   3453                  ZDP_BindRsp( ZDAppPendingBindReq[i].transSeq,
   3454                               &(ZDAppPendingBindReq[i].srcAddr),
   3455                               bindStat, ZDAppPendingBindReq[i].securityUse );
   \                     ??ZDApp_AgeOutPendingBindEntry_4:
   \   000094   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000097   F5..         MOV     ?V0 + 2,A
   \   000099   78..         MOV     R0,#?V0 + 2
   \   00009B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009E   7401         MOV     A,#0x1
   \   0000A0   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A3   8582..       MOV     ?V0 + 2,DPL
   \   0000A6   8583..       MOV     ?V0 + 3,DPH
   \   0000A9   78..         MOV     R0,#?V0 + 2
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AE   75..21       MOV     ?V0 + 2,#0x21
   \   0000B1   75..80       MOV     ?V0 + 3,#-0x80
   \   0000B4   78..         MOV     R0,#?V0 + 2
   \   0000B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B9   12....       LCALL   ?Subroutine30 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0000BC   12....       LCALL   ??ZDP_SendData?relay
   \   0000BF   7405         MOV     A,#0x5
   \   0000C1   12....       LCALL   ?DEALLOC_XSTACK8
   3456          
   3457                  // Clear the record and set to default values
   3458                  ZDApp_SetPendingBindDefault( &ZDAppPendingBindReq[i] );
   \   0000C4                ; Setup parameters for call to function ZDApp_SetPendingBindDefault
   \   0000C4   12....       LCALL   ?Subroutine31 & 0xFFFF
   3459                }
   3460              }
   \                     ??CrossCallReturnLabel_30:
   \   0000C7   12....       LCALL   ??ZDApp_SetPendingBindDefault?relay
   \                     ??ZDApp_AgeOutPendingBindEntry_3:
   \   0000CA   05..         INC     ?V0 + 0
   \   0000CC   E5..         MOV     A,?V0 + 0
   \   0000CE   C3           CLR     C
   \   0000CF   9403         SUBB    A,#0x3
   \   0000D1   5003         JNC     $+5
   \   0000D3   02....       LJMP    ??ZDApp_AgeOutPendingBindEntry_1 & 0xFFFF
   3461            }
   3462          
   3463            if ( entryFound == FALSE )
   \   0000D6   E5..         MOV     A,?V0 + 1
   \   0000D8   A2E0         MOV     C,0xE0 /* A   */.0
   \   0000DA   400E         JC      ??ZDApp_AgeOutPendingBindEntry_6
   3464            {
   3465              osal_stop_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT );
   \                     ??ZDApp_AgeOutPendingBindEntry_0:
   \   0000DC                ; Setup parameters for call to function osal_stop_timerEx
   \   0000DC   7A00         MOV     R2,#0x0
   \   0000DE   7B10         MOV     R3,#0x10
   \   0000E0   90....       MOV     DPTR,#ZDAppTaskID
   \   0000E3   E0           MOVX    A,@DPTR
   \   0000E4   F9           MOV     R1,A
   \   0000E5   12....       LCALL   ??osal_stop_timerEx?relay
   \   0000E8   8017         SJMP    ??ZDApp_AgeOutPendingBindEntry_7
   3466            }
   3467            else
   3468            {
   3469              osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   3470                                  AGE_OUT_PEND_BIND_REQ_DELAY );
   \                     ??ZDApp_AgeOutPendingBindEntry_6:
   \   0000EA                ; Setup parameters for call to function osal_start_timerEx
   \   0000EA   90....       MOV     DPTR,#__Constant_3e8
   \   0000ED   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0000F0   7A00         MOV     R2,#0x0
   \   0000F2   7B10         MOV     R3,#0x10
   \   0000F4   90....       MOV     DPTR,#ZDAppTaskID
   \   0000F7   E0           MOVX    A,@DPTR
   \   0000F8   F9           MOV     R1,A
   \   0000F9   12....       LCALL   ??osal_start_timerEx?relay
   \   0000FC   7404         MOV     A,#0x4
   \   0000FE   12....       LCALL   ?DEALLOC_XSTACK8
   3471            }
   3472          }
   \                     ??ZDApp_AgeOutPendingBindEntry_7:
   \   000101   740E         MOV     A,#0xe
   \   000103                REQUIRE ?Subroutine3
   \   000103                ; // Fall through to label ?Subroutine3

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for zdoDiscCounter>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for continueJoining>`:
   \   000000   01           DB 1

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_epDesc>`:
   \   000000   00           DB 0
   \   000001   ....         DW ZDAppTaskID
   \   000003   0000         DW 0H
   \   000005   00           DB 0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for ZDApp_SavedPollRate>`:
   \   000000   E803         DW 1000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_64:
   \   000000   64000000     DD 100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4e2:
   \   000000   E2040000     DD 1250

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_258:
   \   000000   58020000     DD 600

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_2bc:
   \   000000   BC020000     DD 700

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SecInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SecInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_event_loop?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_event_loop

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDOInitDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDOInitDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ReadNetworkRestoreState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ReadNetworkRestoreState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppDetermineDeviceType?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppDetermineDeviceType

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkStartEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkStartEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_DeviceAuthEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceAuthEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNetworkStateEvt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNetworkStateEvt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNetworkState?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNetworkState

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InitUserDesc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitUserDesc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDAppCheckForHoldKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDAppCheckForHoldKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessOSALMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessOSALMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessMsgCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessMsgCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RegisterCBs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RegisterCBs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessSecMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessSecMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessNetworkJoin?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessNetworkJoin

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SaveNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SaveNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_RestoreNwkKey?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_RestoreNwkKey

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerStart?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ResetTimerCancel?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ResetTimerCancel

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlBypass?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlBypass

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveCtrlStartup?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveCtrlStartup

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveReset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveReset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_LeaveUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_LeaveUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkDiscoveryReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkDiscoveryReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_JoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_JoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_DeviceConfigured?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_DeviceConfigured

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendEventMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendEventMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SendMsg?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SendMsg

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkDiscoveryConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkDiscoveryConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NwkDescListProcessing?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkDescListProcessing

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkFormationConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkFormationConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_beaconNotifyIndCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_beaconNotifyIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_StartRouterConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartRouterConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_AddrChangeIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AddrChangeIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_JoinIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_JoinIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ConcentratorIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConcentratorIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveCnf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveCnf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_LeaveInd?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_LeaveInd

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SyncIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SyncIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ManytoOneFailureIndicationCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ManytoOneFailureIndicationCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_PollConfirmCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_PollConfirmCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_NetworkStatusCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_NetworkStatusCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??AddrMgrWriteNVRequest?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    AddrMgrWriteNVRequest

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateDeviceIndication?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateDeviceIndication

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InMsgCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InMsgCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ChangeMatchDescRespPermission?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ChangeMatchDescRespPermission

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NetworkInit?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NetworkInit

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NwkStateUpdateCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NwkStateUpdateCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NodeProfileSync?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NodeProfileSync

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StartJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StartJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_StopJoiningCycle?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_StopJoiningCycle

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_AnnounceNewAddress?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AnnounceNewAddress

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_NVUpdate?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_NVUpdate

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_CoordStartPANIDConflictCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_CoordStartPANIDConflictCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_SrcRtgIndCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_SrcRtgIndCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InitZdoCBFunc?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitZdoCBFunc

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_RegisterForZdoCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_RegisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_DeregisterForZdoCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_DeregisterForZdoCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_SetPendingBindDefault?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_SetPendingBindDefault

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_InitPendingBind?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_InitPendingBind

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_GetEmptyPendingBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_GetEmptyPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_ProcessPendingBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_ProcessPendingBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDApp_AgeOutPendingBindEntry?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDApp_AgeOutPendingBindEntry
   3473          #endif
   3474          #endif
   3475          
   3476          /*********************************************************************
   3477          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       2      0     32  AddrMgrWriteNVRequest
                          2 0  0 -> ZDApp_NVUpdate
                          2 0  0 -> osal_get_timeoutEx
       2      0      9  ZDAppCheckForHoldKey
                          2 0  0 -> HalKeyRead
       2      0     14  ZDAppDetermineDeviceType
                          2 0  0 -> nwk_ExtPANIDValid
       0      0     45  ZDApp_AgeOutPendingBindEntry
                          0 0 26 -> AddrMgrEntryLookupExt
                          0 0 26 -> AddrMgrEntryRelease
                          0 0 26 -> AddrMgrExtAddrSet
                          0 0 26 -> ZDApp_SetPendingBindDefault
                          0 0 31 -> ZDP_SendData
                          0 0 30 -> osal_start_timerEx
                          0 0 26 -> osal_stop_timerEx
       0      0     25  ZDApp_AnnounceNewAddress
                          0 0 10 -> APSME_HoldDataRequests
                          0 0 10 -> NLME_GetExtAddr
                          0 0 10 -> NLME_GetShortAddr
                          0 0 11 -> ZDP_DeviceAnnce
       0      0      9  ZDApp_ChangeMatchDescRespPermission
                          0 0  9 -> afSetMatch
       0      0      0  ZDApp_CoordStartPANIDConflictCB
       2      0     16  ZDApp_DeviceAuthEvt
                          2 0  0 -> NLME_SetPollRate
                          2 0  0 -> NLME_StartRouterRequest
                          2 0  0 -> ZDApp_AnnounceNewAddress
                          2 0  0 -> ZDApp_NVUpdate
                          2 0  0 -> ZDApp_ResetTimerCancel
                          2 0  0 -> ZDApp_SaveNwkKey
                          2 0  0 -> osal_set_event
       0      0     16  ZDApp_DeviceConfigured
                          0 0 16 -> osal_nv_read
       2      0      0  ZDApp_GetEmptyPendingBindReq
       0      0     14  ZDApp_InMsgCB
                          0 0 14 -> ZDP_GenericRsp
       0      0      9  ZDApp_Init
                          0 0  9 -> HalLedBlink
                          0 0  9 -> NLME_GetExtAddr
                          0 0  9 -> ZDAppCheckForHoldKey
                          0 0  9 -> ZDApp_InitPendingBind
                          0 0  9 -> ZDApp_InitZdoCBFunc
                          0 0  9 -> ZDApp_RegisterCBs
                          0 0  9 -> ZDOInitDevice
                          0 0  9 -> ZDO_Init
                          0 0  9 -> afRegister
       0      0     18  ZDApp_InitPendingBind
                          0 0  9 -> ZDApp_SetPendingBindDefault
                          0 0  9 -> osal_mem_alloc
       0      0     31  ZDApp_InitUserDesc
                          0 0 27 -> osal_memset
                          0 0 29 -> osal_nv_item_init
                          0 0 31 -> osal_nv_read
       2      0      9  ZDApp_InitZdoCBFunc
       0      0     22  ZDApp_JoinReq
                          0 0 18 -> NLME_JoinRequest
                          0 0 14 -> ZDApp_NodeProfileSync
       2      0      0  ZDApp_LeaveCtrlBypass
       0      0     28  ZDApp_LeaveCtrlInit
                          0 0 12 -> osal_nv_item_init
                          0 0 14 -> osal_nv_read
       0      0     14  ZDApp_LeaveCtrlReset
                          0 0 14 -> osal_nv_write
       0      0     23  ZDApp_LeaveCtrlSet
                          0 0 14 -> osal_nv_write
       2      0     14  ZDApp_LeaveCtrlStartup
                          2 0  0 -> ZDApp_LeaveCtrlReset
       0      0     25  ZDApp_LeaveReset
                          0 0  9 -> ZDApp_LeaveCtrlSet
                          0 0  9 -> ZDApp_ResetTimerStart
       0      0     51  ZDApp_LeaveUpdate
                          0 0 32 -> APSME_UpdateDeviceReq
                          0 0 32 -> AddrMgrWriteNVRequest
                          0 0 32 -> AssocIsChild
                          0 0 32 -> NLME_RemoveChild
                          0 0 32 -> RTG_RemoveRtgEntry
                          0 0 32 -> ZDSecMgrAddrClear
                          0 0 32 -> ZDSecMgrDeviceRemoveByExtAddr
                          0 0 32 -> nwkNeighborRemove
                          0 0 35 -> osal_memcpy
       2      0     20  ZDApp_NVUpdate
                          2 0  4 -> osal_start_timerEx
       0      0     12  ZDApp_NetworkDiscoveryReq
                          0 0 12 -> NLME_NetworkDiscoveryRequest
       0      0     31  ZDApp_NetworkInit
                          0 0 12 -> osal_set_event
                          0 0 16 -> osal_start_timerEx
       2      0     14  ZDApp_NetworkStartEvt
                          2 0  0 -> NLME_GetEnergyThreshold
                          2 0  0 -> NLME_SetEnergyThreshold
                          2 0  0 -> osal_pwrmgr_device
                          2 0  0 -> osal_set_event
       0      0     24  ZDApp_NodeProfileSync
                          0 0  9 -> NLME_SetBroadcastFilter
       0      0     29  ZDApp_NwkDescListProcessing
                          0 0 14 -> nwk_ExtPANIDValid
                          0 0 14 -> nwk_getNwkDescList
                          0 0 14 -> sAddrExtCmp
       2      0      0  ZDApp_NwkStateUpdateCB
                          2 0  0 -> ZDApp_NVUpdate
                          2 0  0 -> osal_get_timeoutEx
       0      0     50  ZDApp_ProcessMsgCBs
                          0 0 35 -> ZDApp_ProcessPendingBindReq
                          0 0 35 -> ZDO_ParseAddrRsp
                          0 0 35 -> ZDO_ParseBindUnbindReq
                          0 0 35 -> ZDO_ProcessBindUnbindReq
                          0 0 35 -> ZDO_UpdateAddrManager
                          0 0 35 -> osal_mem_free
       0      0     27  ZDApp_ProcessNetworkJoin
                          0 0 12 -> NLME_GetShortAddr
                          0 0 12 -> NLME_NwkDiscTerm
                          0 0 12 -> NLME_SetPollRate
                          0 0 12 -> NLME_SetQueuedPollRate
                          0 0 12 -> NLME_SetResponseRate
                          0 0 12 -> NLME_StartRouterRequest
                          0 0 12 -> ZDApp_AnnounceNewAddress
                          0 0 12 -> ZDApp_NetworkInit
                          0 0 12 -> ZDApp_ResetTimerStart
                          0 0 12 -> ZDApp_RestoreNwkKey
                          0 0 12 -> ZMacSetReq
                          0 0 12 -> nwkNeighborInitTable
                          0 0 12 -> osal_rand
                          0 0 12 -> osal_set_event
       0      0     33  ZDApp_ProcessOSALMsg
                          0 0 19 -> NLME_JoinRequest
                          0 0 15 -> NLME_ReJoinRequest
                          0 0 15 -> NLME_ReJoinRequestUnsecure
                          0 0 15 -> NLME_SetPollRate
                          0 0 15 -> NLME_SetQueuedPollRate
                          0 0 15 -> NLME_SetResponseRate
                          0 0 15 -> ZDApp_NetworkInit
                          0 0 15 -> ZDApp_NodeProfileSync
                          0 0 15 -> ZDApp_NwkDescListProcessing
                          0 0 15 -> ZDApp_ProcessMsgCBs
                          0 0 15 -> ZDApp_ProcessNetworkJoin
                          0 0 15 -> ZDApp_ProcessSecMsg
                          0 0 15 -> ZDApp_RestoreNwkKey
                          0 0 15 -> ZDP_IncomingData
                          0 0 15 -> ZMacSetReq
                          0 0 19 -> osal_nv_read
                          0 0 15 -> osal_rand
                          0 0 15 -> sAddrExtCpy
       0      0     56  ZDApp_ProcessPendingBindReq
                          0 0 17 -> APSME_BindRequest
                          0 0 16 -> ZDApp_NVUpdate
                          0 0 16 -> ZDApp_SetPendingBindDefault
                          0 0 21 -> ZDP_SendData
                          0 0 19 -> osal_memcmp
       0      0     34  ZDApp_ProcessSecEvent
                          0 0 16 -> ZDApp_DeviceAuthEvt
                          0 0 16 -> ZDApp_SaveNwkKey
                          0 0 16 -> ZDSecMgrNewDeviceEvent
                          0 0 16 -> ZDSecMgrSaveApsLinkKey
                          0 0 16 -> ZDSecMgrSaveTCLinkKey
                          0 0 16 -> osal_mem_free
                          0 0 20 -> osal_start_timerEx
       2      0     15  ZDApp_ProcessSecMsg
                          2 0  0 -> ZDSecMgrRemoveDeviceInd
                          2 0  0 -> ZDSecMgrSwitchKeyInd
                          2 0  0 -> ZDSecMgrTransportKeyInd
       0      0     23  ZDApp_ReadNetworkRestoreState
                          0 0  9 -> zgReadStartupOptions
       2      0      9  ZDApp_RegisterCBs
                          2 0  0 -> ZDO_RegisterForZDOMsg
       0      0     35  ZDApp_ResetNwkKey
                          0 0 31 -> osal_memset
                          0 0 35 -> osal_nv_write
       2      0      0  ZDApp_ResetTimerCancel
                          2 0  0 -> osal_clear_event
                          2 0  0 -> osal_stop_timerEx
       0      0     28  ZDApp_ResetTimerStart
                          0 0 12 -> osal_get_timeoutEx
                          0 0 16 -> osal_start_timerEx
       0      0     23  ZDApp_RestoreNetworkState
                          0 0  9 -> NLME_GetShortAddr
                          0 0  9 -> NLME_InitNV
                          0 0  9 -> NLME_RestoreFromNV
                          0 0  9 -> sAddrExtCpy
       0      0     68  ZDApp_RestoreNwkKey
                          0 0 52 -> osal_memcmp
                          0 0 49 -> osal_memset
                          0 0 53 -> osal_nv_read
                          0 0 53 -> osal_nv_write
       2      0     14  ZDApp_SaveNetworkStateEvt
                          2 0  0 -> NLME_UpdateNV
                          2 0  0 -> zgWriteStartupOptions
       0      0     51  ZDApp_SaveNwkKey
                          0 0 31 -> SSP_ReadNwkActiveKey
                          0 0 31 -> osal_memset
                          0 0 35 -> osal_nv_write
       0      0     39  ZDApp_SecInit
                          0 0 25 -> SSP_SwitchNwkKey
                          0 0 25 -> SSP_UpdateNwkKey
                          0 0 25 -> ZDSecMgrInit
                          0 0 25 -> ZDSecMgrReadKeyFromNv
                          0 0 25 -> osal_mem_free
                          0 0 25 -> osal_memset
       0      0      9  ZDApp_SendEventMsg
                          0 0  9 -> ZDApp_SendMsg
       1      0     36  ZDApp_SendMsg
                          0 0 22 -> osal_memcpy
                          0 0 19 -> osal_msg_allocate
                          0 0 19 -> osal_msg_send
       0      0     35  ZDApp_SetPendingBindDefault
                          0 0  9 -> osal_memset
       2      0      0  ZDApp_StartJoiningCycle
                          2 0  0 -> ZDApp_NetworkInit
       2      0      0  ZDApp_StopJoiningCycle
       0      0     18  ZDApp_event_loop
                          0 0 14 -> Onboard_soft_reset
                          0 0 14 -> ZDApp_AgeOutPendingBindEntry
                          0 0 14 -> ZDApp_NetworkStartEvt
                          0 0 14 -> ZDApp_ProcessOSALMsg
                          0 0 14 -> ZDApp_ProcessSecEvent
                          0 0 14 -> ZDApp_SaveNetworkStateEvt
                          0 0 14 -> ZDO_StartDevice
                          0 0 14 -> ZDO_UpdateNwkStatus
                          0 0 14 -> osal_msg_deallocate
                          0 0 14 -> osal_msg_receive
                          0 0 14 -> osal_pwrmgr_device
                          0 0 14 -> osal_set_event
                          0 0 18 -> osal_start_timerEx
                          0 0 14 -> zgWriteStartupOptions
       0      0     23  ZDOInitDevice
                          0 0 14 -> NLME_InitNV
                          0 0 14 -> NLME_SetBroadcastFilter
                          0 0 14 -> NLME_SetDefaultNV
                          0 0 14 -> ZDAppDetermineDeviceType
                          0 0 14 -> ZDApp_LeaveCtrlInit
                          0 0 14 -> ZDApp_LeaveCtrlStartup
                          0 0 14 -> ZDApp_NetworkInit
                          0 0 14 -> ZDApp_ReadNetworkRestoreState
                          0 0 14 -> ZDApp_RestoreNetworkState
                          0 0 14 -> ZDApp_SecInit
                          0 0 14 -> ZDConfig_InitDescriptors
                          0 0 14 -> ZDSecMgrClearNVKeyValues
                          0 0 14 -> osal_rand
                          0 0 14 -> osal_set_event
                          0 0 14 -> zgInitItems
                          0 0 14 -> zgWriteStartupOptions
       0      0     14  ZDO_AddrChangeIndicationCB
                          0 0 14 -> ZDApp_AnnounceNewAddress
                          0 0 14 -> ZDApp_NVUpdate
                          0 0 14 -> osal_msg_allocate
                          0 0 14 -> osal_msg_send
                          0 0 14 -> osal_set_event
       1      0     14  ZDO_ConcentratorIndicationCB
       2      0      0  ZDO_DeregisterForZdoCB
       1      0     14  ZDO_JoinConfirmCB
                          0 0 14 -> HalLedSet
                          0 0 14 -> ZDApp_SendMsg
       0      0     21  ZDO_JoinIndicationCB
                          0 0 16 -> ZDApp_NVUpdate
                          0 0 16 -> osal_get_timeoutEx
                          0 0 16 -> osal_mem_alloc
                          0 0 20 -> osal_start_timerEx
       0      0     10  ZDO_LeaveCnf
                          0 0 10 -> NLME_GetExtAddr
                          0 0 10 -> ZDApp_LeaveReset
                          0 0 10 -> ZDApp_LeaveUpdate
                          0 0 10 -> sAddrExtCmp
       1      0     16  ZDO_LeaveInd
                          0 0 16 -> NLME_GetCoordShortAddr
                          0 0 16 -> NLME_LeaveRsp
                          0 0 16 -> ZDApp_LeaveReset
                          0 0 16 -> ZDApp_LeaveUpdate
       2      0      0  ZDO_ManytoOneFailureIndicationCB
                          2 0  0 -> RTG_MTORouteReq
       3      0      3  ZDO_NetworkDiscoveryConfirmCB
                          2 0  3 -> ZDApp_SendMsg
       0      0      9  ZDO_NetworkFormationConfirmCB
                          0 0  9 -> HalLedSet
                          0 0  9 -> osal_set_event
       2      0      0  ZDO_NetworkStatusCB
                          2 0  0 -> NLME_GetShortAddr
       0      0      0  ZDO_PollConfirmCB
       2      0      0  ZDO_RegisterForZdoCB
       1      0     14  ZDO_SrcRtgIndCB
       0      0      9  ZDO_StartRouterConfirmCB
                          0 0  9 -> HalLedSet
                          0 0  9 -> osal_set_event
       0      0      9  ZDO_SyncIndicationCB
                          0 0  9 -> ZDApp_SendMsg
                          0 0  9 -> nwkNeighborInitTable
       0      0      0  ZDO_UpdateDeviceIndication
       1      0     18  ZDO_beaconNotifyIndCB
                          0 0 18 -> osal_mem_alloc
                          0 0 18 -> osal_memset
                          0 0 18 -> sAddrExtCpy


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       2  ?<Initializer for ZDApp_SavedPollRate>
       6  ?<Initializer for ZDApp_epDesc>
       1  ?<Initializer for continueJoining>
       1  ?<Initializer for zdoDiscCounter>
       6  ??AddrMgrWriteNVRequest?relay
      10  ??Subroutine35_0
       5  ??Subroutine36_0
      11  ??Subroutine37_0
       3  ??Subroutine38_0
       5  ??Subroutine39_0
       7  ??Subroutine40_0
       4  ??Subroutine41_0
       6  ??Subroutine42_0
       6  ??Subroutine43_0
       5  ??Subroutine44_0
       6  ??Subroutine45_0
       5  ??Subroutine46_0
       8  ??Subroutine47_0
       6  ??Subroutine48_0
       6  ??Subroutine49_0
       6  ??Subroutine50_0
       5  ??Subroutine51_0
       3  ??Subroutine52_0
       5  ??Subroutine53_0
       6  ??ZDAppCheckForHoldKey?relay
       6  ??ZDAppDetermineDeviceType?relay
       6  ??ZDApp_AgeOutPendingBindEntry?relay
       6  ??ZDApp_AnnounceNewAddress?relay
       6  ??ZDApp_ChangeMatchDescRespPermission?relay
       6  ??ZDApp_CoordStartPANIDConflictCB?relay
       6  ??ZDApp_DeviceAuthEvt?relay
       6  ??ZDApp_DeviceConfigured?relay
       6  ??ZDApp_GetEmptyPendingBindReq?relay
       6  ??ZDApp_InMsgCB?relay
       6  ??ZDApp_Init?relay
       6  ??ZDApp_InitPendingBind?relay
       6  ??ZDApp_InitUserDesc?relay
       6  ??ZDApp_InitZdoCBFunc?relay
       6  ??ZDApp_JoinReq?relay
       6  ??ZDApp_LeaveCtrlBypass?relay
       6  ??ZDApp_LeaveCtrlInit?relay
       6  ??ZDApp_LeaveCtrlReset?relay
       6  ??ZDApp_LeaveCtrlSet?relay
       6  ??ZDApp_LeaveCtrlStartup?relay
       6  ??ZDApp_LeaveReset?relay
       6  ??ZDApp_LeaveUpdate?relay
       6  ??ZDApp_NVUpdate?relay
       6  ??ZDApp_NetworkDiscoveryReq?relay
       6  ??ZDApp_NetworkInit?relay
       6  ??ZDApp_NetworkStartEvt?relay
       6  ??ZDApp_NodeProfileSync?relay
       6  ??ZDApp_NwkDescListProcessing?relay
       6  ??ZDApp_NwkStateUpdateCB?relay
       6  ??ZDApp_ProcessMsgCBs?relay
       6  ??ZDApp_ProcessNetworkJoin?relay
       6  ??ZDApp_ProcessOSALMsg?relay
       6  ??ZDApp_ProcessPendingBindReq?relay
       6  ??ZDApp_ProcessSecEvent?relay
       6  ??ZDApp_ProcessSecMsg?relay
       6  ??ZDApp_ReadNetworkRestoreState?relay
       6  ??ZDApp_RegisterCBs?relay
       6  ??ZDApp_ResetNwkKey?relay
       6  ??ZDApp_ResetTimerCancel?relay
       6  ??ZDApp_ResetTimerStart?relay
       6  ??ZDApp_RestoreNetworkState?relay
       6  ??ZDApp_RestoreNwkKey?relay
       6  ??ZDApp_SaveNetworkStateEvt?relay
       6  ??ZDApp_SaveNwkKey?relay
       6  ??ZDApp_SecInit?relay
       6  ??ZDApp_SendEventMsg?relay
       6  ??ZDApp_SendMsg?relay
       6  ??ZDApp_SetPendingBindDefault?relay
       6  ??ZDApp_StartJoiningCycle?relay
       6  ??ZDApp_StopJoiningCycle?relay
       6  ??ZDApp_event_loop?relay
       6  ??ZDOInitDevice?relay
       6  ??ZDO_AddrChangeIndicationCB?relay
       6  ??ZDO_ConcentratorIndicationCB?relay
       6  ??ZDO_DeregisterForZdoCB?relay
       6  ??ZDO_JoinConfirmCB?relay
       6  ??ZDO_JoinIndicationCB?relay
       6  ??ZDO_LeaveCnf?relay
       6  ??ZDO_LeaveInd?relay
       6  ??ZDO_ManytoOneFailureIndicationCB?relay
       6  ??ZDO_NetworkDiscoveryConfirmCB?relay
       6  ??ZDO_NetworkFormationConfirmCB?relay
       6  ??ZDO_NetworkStatusCB?relay
       6  ??ZDO_PollConfirmCB?relay
       6  ??ZDO_RegisterForZdoCB?relay
       6  ??ZDO_SrcRtgIndCB?relay
       6  ??ZDO_StartRouterConfirmCB?relay
       6  ??ZDO_SyncIndicationCB?relay
       6  ??ZDO_UpdateDeviceIndication?relay
       6  ??ZDO_beaconNotifyIndCB?relay
      10  ?Subroutine0
       3  ?Subroutine1
      12  ?Subroutine10
       5  ?Subroutine11
       6  ?Subroutine12
       2  ?Subroutine13
      10  ?Subroutine14
       3  ?Subroutine15
       4  ?Subroutine16
      12  ?Subroutine17
       3  ?Subroutine18
      14  ?Subroutine19
       5  ?Subroutine2
       6  ?Subroutine20
       9  ?Subroutine21
       3  ?Subroutine22
       8  ?Subroutine23
      11  ?Subroutine24
      10  ?Subroutine25
       4  ?Subroutine26
      12  ?Subroutine27
       3  ?Subroutine28
       9  ?Subroutine29
       3  ?Subroutine3
      19  ?Subroutine30
      11  ?Subroutine31
       6  ?Subroutine32
      17  ?Subroutine33
       3  ?Subroutine34
       3  ?Subroutine4
      35  ?Subroutine5
       8  ?Subroutine6
       2  ?Subroutine7
       5  ?Subroutine8
       4  ?Subroutine9
      28  AddrMgrWriteNVRequest
       1  MatchRsps
      24  ZDAppCheckForHoldKey
      77  ZDAppDetermineDeviceType
       9  ZDAppNwkAddr
       2  ZDAppPendingBindReq
       1  ZDAppTaskID
     259  ZDApp_AgeOutPendingBindEntry
      59  ZDApp_AnnounceNewAddress
       2  ZDApp_AutoFindMode_epDesc
      11  ZDApp_ChangeMatchDescRespPermission
      11  ZDApp_CoordStartPANIDConflictCB
      77  ZDApp_DeviceAuthEvt
      91  ZDApp_DeviceConfigured
      54  ZDApp_GetEmptyPendingBindReq
      93  ZDApp_InMsgCB
      88  ZDApp_Init
      61  ZDApp_InitPendingBind
     121  ZDApp_InitUserDesc
      19  ZDApp_InitZdoCBFunc
      80  ZDApp_JoinReq
       1  ZDApp_LeaveCtrl
      15  ZDApp_LeaveCtrlBypass
      75  ZDApp_LeaveCtrlInit
      13  ZDApp_LeaveCtrlReset
      22  ZDApp_LeaveCtrlSet
      47  ZDApp_LeaveCtrlStartup
      18  ZDApp_LeaveReset
     220  ZDApp_LeaveUpdate
      27  ZDApp_NVUpdate
      11  ZDApp_NetworkDiscoveryReq
      57  ZDApp_NetworkInit
      86  ZDApp_NetworkStartEvt
       2  ZDApp_NewDeviceList
      44  ZDApp_NodeProfileSync
     257  ZDApp_NwkDescListProcessing
      28  ZDApp_NwkStateUpdateCB
     159  ZDApp_ProcessMsgCBs
     470  ZDApp_ProcessNetworkJoin
     683  ZDApp_ProcessOSALMsg
     259  ZDApp_ProcessPendingBindReq
     221  ZDApp_ProcessSecEvent
      73  ZDApp_ProcessSecMsg
      21  ZDApp_ReadNetworkRestoreState
      55  ZDApp_RegisterCBs
      75  ZDApp_ResetNwkKey
      31  ZDApp_ResetTimerCancel
      57  ZDApp_ResetTimerStart
      79  ZDApp_RestoreNetworkState
     232  ZDApp_RestoreNwkKey
      19  ZDApp_SaveNetworkStateEvt
      91  ZDApp_SaveNwkKey
       2  ZDApp_SavedPollRate
     151  ZDApp_SecInit
      22  ZDApp_SendEventMsg
      99  ZDApp_SendMsg
      29  ZDApp_SetPendingBindDefault
      39  ZDApp_StartJoiningCycle
      31  ZDApp_StopJoiningCycle
       6  ZDApp_epDesc
     266  ZDApp_event_loop
     216  ZDOInitDevice
     108  ZDO_AddrChangeIndicationCB
      58  ZDO_ConcentratorIndicationCB
      22  ZDO_DeregisterForZdoCB
     115  ZDO_JoinConfirmCB
     200  ZDO_JoinIndicationCB
      98  ZDO_LeaveCnf
     176  ZDO_LeaveInd
      10  ZDO_ManytoOneFailureIndicationCB
      78  ZDO_NetworkDiscoveryConfirmCB
      40  ZDO_NetworkFormationConfirmCB
      10  ZDO_NetworkStatusCB
       3  ZDO_PollConfirmCB
      27  ZDO_RegisterForZdoCB
      57  ZDO_SrcRtgIndCB
      39  ZDO_StartRouterConfirmCB
      42  ZDO_SyncIndicationCB
       5  ZDO_UpdateDeviceIndication
       8  ZDO_UseExtendedPANID
     593  ZDO_beaconNotifyIndCB
       4  __Constant_258
       4  __Constant_2bc
       4  __Constant_3e8
       4  __Constant_4e2
       4  __Constant_64
       1  _tmpRejoinState
       1  continueJoining
       1  devStartMode
       1  devState
       1  nwkStatus
       1  retryCnt
       1  zdappHoldKeys
       1  zdappMgmtNwkDiscReqInProgress
       9  zdappMgmtNwkDiscRspAddr
       1  zdappMgmtNwkDiscRspTransSeq
       1  zdappMgmtNwkDiscStartIndex
       1  zdappMgmtSavedNwkState
      14  zdoCBFunc
       1  zdoDiscCounter

 
 7 524 bytes in segment BANKED_CODE
   426 bytes in segment BANK_RELAYS
    10 bytes in segment XDATA_I
    10 bytes in segment XDATA_ID
    20 bytes in segment XDATA_ROM_C
    59 bytes in segment XDATA_Z
 
 7 960 bytes of CODE  memory
     0 bytes of CONST memory (+ 20 bytes shared)
    69 bytes of XDATA memory

Errors: none
Warnings: none
