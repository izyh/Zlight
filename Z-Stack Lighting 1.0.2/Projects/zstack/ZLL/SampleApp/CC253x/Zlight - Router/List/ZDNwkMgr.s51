///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.20.2.41139 for 8051            27/May/2014  19:13:56 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  D:\Texas Instruments\Z-Stack Lighting             /
//                          1.0.2\Components\stack\zdo\ZDNwkMgr.c             /
//    Command line       =  -f "D:\Texas Instruments\Z-Stack Lighting         /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ      /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8     /
//                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f "D:\Texas        /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO     /
//                          -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR      /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100   /
//                          -DREJOIN_POLL_RATE=440) -f "D:\Texas              /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\Tools\CC2530DB\f8wZCL.cfg" "D:\Texas           /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Components\stack\zdo\ZDNwkMgr.c" -D         /
//                          FEATURE_GREEN_POWER -D SECURE=1 -D                /
//                          TC_LINKKEY_JOIN -D ZDSECMGR_TC_DEVICE_MAX=2 -D    /
//                          NV_RESTORE -D HOLD_AUTO_START -D INTER_PAN -D     /
//                          LCD_SUPPORTED=DEBUG -D ZCL_BASIC -D ZCL_READ -D   /
//                          ZCL_WRITE -D ZCL_IDENTIFY -D ZCL_ON_OFF -D        /
//                          ZCL_SCENES -D ZCL_GROUPS -D                       /
//                          ZCL_LIGHT_LINK_ENHANCE -D ZCL_LEVEL_CTRL -D       /
//                          ZCL_COLOR_CTRL -D MAX_CHANNELS_24GHZ=0x02108800   /
//                          -D xPWM_ALT2 -D xTHERMAL_SHUTDOWN -D              /
//                          ZLL_1_0_HUB_COMPATIBILITY -D DALI_LIGHT -lC       /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Zlight /
//                           - Router\List\" -lA "D:\Texas                    /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Zlight /
//                           - Router\List\" --diag_suppress Pe001,Pa010 -o   /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Zlight /
//                           - Router\Obj\" -e --debug --core=plain           /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I "D:\Texas                 /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\" -I   /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\Sou /
//                          rce\" -I "D:\Texas Instruments\Z-Stack Lighting   /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          Source\" -I "D:\Texas Instruments\Z-Stack         /
//                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC25 /
//                          3x\..\..\..\HomeAutomation\Source\" -I "D:\Texas  /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\HomeAutomation\SampleLight\Source\" -I         /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\ZMain\TI2530DB\" -I "D:\Texas                  /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\hal\include\" -I "D:\Texas    /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\hal\target\CC2530PMP4712\"    /
//                          -I "D:\Texas Instruments\Z-Stack Lighting         /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\include\" -I "D:\Texas    /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\high_level\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\low_level\srf04\" -I      /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mac\low_level\srf04\single_ch /
//                          ip\" -I "D:\Texas Instruments\Z-Stack Lighting    /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\mt\" -I "D:\Texas             /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\osal\include\" -I "D:\Texas   /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\services\saddr\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\services\sdata\" -I           /
//                          "D:\Texas Instruments\Z-Stack Lighting            /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\af\" -I "D:\Texas       /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\nwk\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sapi\" -I "D:\Texas     /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sec\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\sys\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\zcl\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\stack\zdo\" -I "D:\Texas      /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\zmac\" -I "D:\Texas           /
//                          Instruments\Z-Stack Lighting                      /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\ /
//                          ..\..\..\Components\zmac\f8w\" -Ohz               /
//                          --require_prototypes                              /
//    List file          =  D:\Texas Instruments\Z-Stack Lighting             /
//                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Zlight /
//                           - Router\List\ZDNwkMgr.s51                       /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME ZDNwkMgr

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?L_AND_X
        EXTERN ?L_EQ_X
        EXTERN ?L_MOV_X
        EXTERN ?L_SHL
        EXTERN ?MOVE_LONG8_XDATA_XDATA
        EXTERN ?PUSH_XSTACK8_X_FOUR
        EXTERN ?PUSH_XSTACK8_X_TWO
        EXTERN ?PUSH_XSTACK_I_FOUR
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_THREE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN ?XSTORE_R2345
        EXTERN __INIT_XDATA_Z

        FUNCTION ??ZDNwkMgr_BuildAndSendUpdateNotify?relay,0203H
        FUNCTION ??ZDNwkMgr_CheckForChannelInterference?relay,0203H
        PUBLIC ??ZDNwkMgr_EDScanConfirmCB?relay
        FUNCTION ??ZDNwkMgr_EDScanConfirmCB?relay,0203H
        PUBLIC ??ZDNwkMgr_Init?relay
        FUNCTION ??ZDNwkMgr_Init?relay,0203H
        PUBLIC ??ZDNwkMgr_ProcessDataConfirm?relay
        FUNCTION ??ZDNwkMgr_ProcessDataConfirm?relay,0203H
        FUNCTION ??ZDNwkMgr_ProcessMgmtNwkUpdateReq?relay,0203H
        PUBLIC ??ZDNwkMgr_ProcessServerDiscRsp?relay
        FUNCTION ??ZDNwkMgr_ProcessServerDiscRsp?relay,0203H
        PUBLIC ??ZDNwkMgr_ReportChannelInterference?relay
        FUNCTION ??ZDNwkMgr_ReportChannelInterference?relay,0203H
        PUBLIC ??ZDNwkMgr_SetNwkManagerAddr?relay
        FUNCTION ??ZDNwkMgr_SetNwkManagerAddr?relay,0203H
        PUBLIC ??ZDNwkMgr_event_loop?relay
        FUNCTION ??ZDNwkMgr_event_loop?relay,0203H
        PUBLIC NwkMgrStr_1
        PUBLIC NwkMgrStr_2
        PUBLIC NwkMgrStr_3
        PUBLIC NwkMgrStr_4
        FUNCTION ZDNwkMgr_BuildAndSendUpdateNotify,021203H
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 37, STACK
        FUNCTION ZDNwkMgr_CheckForChannelInterference,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 25, STACK
        PUBLIC ZDNwkMgr_EDScanConfirmCB
        FUNCTION ZDNwkMgr_EDScanConfirmCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 1, STACK
        LOCFRAME XSTACK, 15, STACK
        PUBLIC ZDNwkMgr_Init
        FUNCTION ZDNwkMgr_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC ZDNwkMgr_MgmtNwkUpdateNotifyAddr
        PUBLIC ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq
        PUBLIC ZDNwkMgr_MgmtNwkUpdateReq
        PUBLIC ZDNwkMgr_NewChannel
        PUBLIC ZDNwkMgr_NumUpdateNotifySent
        PUBLIC ZDNwkMgr_ProcessDataConfirm
        FUNCTION ZDNwkMgr_ProcessDataConfirm,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        FUNCTION ZDNwkMgr_ProcessMgmtNwkUpdateReq,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 33, STACK
        PUBLIC ZDNwkMgr_ProcessServerDiscRsp
        FUNCTION ZDNwkMgr_ProcessServerDiscRsp,021203H
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 12, STACK
        PUBLIC ZDNwkMgr_ReportChannelInterference
        FUNCTION ZDNwkMgr_ReportChannelInterference,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ZDNwkMgr_SetNwkManagerAddr
        FUNCTION ZDNwkMgr_SetNwkManagerAddr,021203H
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ZDNwkMgr_TaskID
        PUBLIC ZDNwkMgr_TotalTransmissions
        PUBLIC ZDNwkMgr_TxFailures
        PUBLIC ZDNwkMgr_UpdateNotifyTimer
        PUBLIC ZDNwkMgr_WaitingForNotifyConfirm
        PUBLIC ZDNwkMgr_event_loop
        FUNCTION ZDNwkMgr_event_loop,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        PUBWEAK __Constant_0
        PUBWEAK __Constant_2108800
        PUBWEAK __Constant_32
        PUBWEAK __Constant_ea60
        PUBLIC pZDNwkMgr_EDScanConfirmCB
        PUBLIC pZDNwkMgr_NetworkReportCB
        PUBLIC pZDNwkMgr_NetworkUpdateCB
        PUBLIC pZDNwkMgr_ProcessDataConfirm
        PUBLIC pZDNwkMgr_ReportChannelInterference
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
          CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI V8 SameValue
          CFI V9 SameValue
          CFI V10 SameValue
          CFI V11 SameValue
          CFI V12 SameValue
          CFI V13 SameValue
          CFI V14 SameValue
          CFI V15 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
HalLcdWriteString   SYMBOL "HalLcdWriteString"
??HalLcdWriteString?relay SYMBOL "?relay", HalLcdWriteString
HalLcdWriteStringValueValue SYMBOL "HalLcdWriteStringValueValue"
??HalLcdWriteStringValueValue?relay SYMBOL "?relay", HalLcdWriteStringValueValue
NLME_EDScanRequest  SYMBOL "NLME_EDScanRequest"
??NLME_EDScanRequest?relay SYMBOL "?relay", NLME_EDScanRequest
NLME_SetUpdateID    SYMBOL "NLME_SetUpdateID"
??NLME_SetUpdateID?relay SYMBOL "?relay", NLME_SetUpdateID
ZDApp_NwkStateUpdateCB SYMBOL "ZDApp_NwkStateUpdateCB"
??ZDApp_NwkStateUpdateCB?relay SYMBOL "?relay", ZDApp_NwkStateUpdateCB
ZDO_ParseMgmtNwkUpdateReq SYMBOL "ZDO_ParseMgmtNwkUpdateReq"
??ZDO_ParseMgmtNwkUpdateReq?relay SYMBOL "?relay", ZDO_ParseMgmtNwkUpdateReq
ZDO_ParseServerDiscRsp SYMBOL "ZDO_ParseServerDiscRsp"
??ZDO_ParseServerDiscRsp?relay SYMBOL "?relay", ZDO_ParseServerDiscRsp
ZDO_RegisterForZDOMsg SYMBOL "ZDO_RegisterForZDOMsg"
??ZDO_RegisterForZDOMsg?relay SYMBOL "?relay", ZDO_RegisterForZDOMsg
ZDP_MgmtNwkUpdateNotify SYMBOL "ZDP_MgmtNwkUpdateNotify"
??ZDP_MgmtNwkUpdateNotify?relay SYMBOL "?relay", ZDP_MgmtNwkUpdateNotify
ZMacSetReq          SYMBOL "ZMacSetReq"
??ZMacSetReq?relay  SYMBOL "?relay", ZMacSetReq
nwkTransmissionFailures SYMBOL "nwkTransmissionFailures"
??nwkTransmissionFailures?relay SYMBOL "?relay", nwkTransmissionFailures
osal_mem_alloc      SYMBOL "osal_mem_alloc"
??osal_mem_alloc?relay SYMBOL "?relay", osal_mem_alloc
osal_mem_free       SYMBOL "osal_mem_free"
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
osal_memcpy         SYMBOL "osal_memcpy"
??osal_memcpy?relay SYMBOL "?relay", osal_memcpy
osal_msg_allocate   SYMBOL "osal_msg_allocate"
??osal_msg_allocate?relay SYMBOL "?relay", osal_msg_allocate
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
osal_msg_receive    SYMBOL "osal_msg_receive"
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
osal_msg_send       SYMBOL "osal_msg_send"
??osal_msg_send?relay SYMBOL "?relay", osal_msg_send
osal_start_timerEx  SYMBOL "osal_start_timerEx"
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
ZDNwkMgr_EDScanConfirmCB SYMBOL "ZDNwkMgr_EDScanConfirmCB"
??ZDNwkMgr_EDScanConfirmCB?relay SYMBOL "?relay", ZDNwkMgr_EDScanConfirmCB
ZDNwkMgr_Init       SYMBOL "ZDNwkMgr_Init"
??ZDNwkMgr_Init?relay SYMBOL "?relay", ZDNwkMgr_Init
ZDNwkMgr_ProcessDataConfirm SYMBOL "ZDNwkMgr_ProcessDataConfirm"
??ZDNwkMgr_ProcessDataConfirm?relay SYMBOL "?relay", ZDNwkMgr_ProcessDataConfirm
ZDNwkMgr_ProcessServerDiscRsp SYMBOL "ZDNwkMgr_ProcessServerDiscRsp"
??ZDNwkMgr_ProcessServerDiscRsp?relay SYMBOL "?relay", ZDNwkMgr_ProcessServerDiscRsp
ZDNwkMgr_ReportChannelInterference SYMBOL "ZDNwkMgr_ReportChannelInterference"
??ZDNwkMgr_ReportChannelInterference?relay SYMBOL "?relay", ZDNwkMgr_ReportChannelInterference
ZDNwkMgr_SetNwkManagerAddr SYMBOL "ZDNwkMgr_SetNwkManagerAddr"
??ZDNwkMgr_SetNwkManagerAddr?relay SYMBOL "?relay", ZDNwkMgr_SetNwkManagerAddr
ZDNwkMgr_event_loop SYMBOL "ZDNwkMgr_event_loop"
??ZDNwkMgr_event_loop?relay SYMBOL "?relay", ZDNwkMgr_event_loop

        EXTERN ??HalLcdWriteString?relay
        FUNCTION ??HalLcdWriteString?relay,00H
        EXTERN ??HalLcdWriteStringValueValue?relay
        FUNCTION ??HalLcdWriteStringValueValue?relay,00H
        EXTERN ??NLME_EDScanRequest?relay
        FUNCTION ??NLME_EDScanRequest?relay,00H
        EXTERN ??NLME_SetUpdateID?relay
        FUNCTION ??NLME_SetUpdateID?relay,00H
        EXTERN ??ZDApp_NwkStateUpdateCB?relay
        FUNCTION ??ZDApp_NwkStateUpdateCB?relay,00H
        EXTERN ??ZDO_ParseMgmtNwkUpdateReq?relay
        FUNCTION ??ZDO_ParseMgmtNwkUpdateReq?relay,00H
        EXTERN ??ZDO_ParseServerDiscRsp?relay
        FUNCTION ??ZDO_ParseServerDiscRsp?relay,00H
        EXTERN ??ZDO_RegisterForZDOMsg?relay
        FUNCTION ??ZDO_RegisterForZDOMsg?relay,00H
        EXTERN ??ZDP_MgmtNwkUpdateNotify?relay
        FUNCTION ??ZDP_MgmtNwkUpdateNotify?relay,00H
        EXTERN ??ZMacSetReq?relay
        FUNCTION ??ZMacSetReq?relay,00H
        EXTERN ??nwkTransmissionFailures?relay
        FUNCTION ??nwkTransmissionFailures?relay,00H
        EXTERN ??osal_mem_alloc?relay
        FUNCTION ??osal_mem_alloc?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_memcpy?relay
        FUNCTION ??osal_memcpy?relay,00H
        EXTERN ??osal_msg_allocate?relay
        FUNCTION ??osal_msg_allocate?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_msg_send?relay
        FUNCTION ??osal_msg_send?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN HalLcdWriteString
        FUNCTION HalLcdWriteString,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLcdWriteStringValueValue
        FUNCTION HalLcdWriteStringValueValue,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_EDScanRequest
        FUNCTION NLME_EDScanRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_SetUpdateID
        FUNCTION NLME_SetUpdateID,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDApp_NwkStateUpdateCB
        FUNCTION ZDApp_NwkStateUpdateCB,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseMgmtNwkUpdateReq
        FUNCTION ZDO_ParseMgmtNwkUpdateReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseServerDiscRsp
        FUNCTION ZDO_ParseServerDiscRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_RegisterForZDOMsg
        FUNCTION ZDO_RegisterForZDOMsg,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MgmtNwkUpdateNotify
        FUNCTION ZDP_MgmtNwkUpdateNotify,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZMacSetReq
        FUNCTION ZMacSetReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN _NIB
        EXTERN nwkTransmissionFailures
        FUNCTION nwkTransmissionFailures,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_alloc
        FUNCTION osal_mem_alloc,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_memcpy
        FUNCTION osal_memcpy,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_allocate
        FUNCTION osal_msg_allocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_send
        FUNCTION osal_msg_send,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// D:\Texas Instruments\Z-Stack Lighting 1.0.2\Components\stack\zdo\ZDNwkMgr.c
//    1 /**************************************************************************************************
//    2   Filename:       ZDNwkMgr.c
//    3   Revised:        $Date: 2007-10-17 15:38:45 -0700 (Wed, 17 Oct 2007) $
//    4   Revision:       $Revision: 15716 $
//    5 
//    6   Description:    The ZigBee Network Manager.
//    7 
//    8 
//    9   Copyright 2007-2013 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com. 
//   38 **************************************************************************************************/
//   39 
//   40 #ifdef __cplusplus
//   41 extern "C"
//   42 {
//   43 #endif
//   44 
//   45 /******************************************************************************
//   46  * INCLUDES
//   47  */
//   48 #include "ZComDef.h"
//   49 #include "nwk_util.h"
//   50 #include "ZDApp.h"
//   51 #include "ZDObject.h"
//   52 #include "ZGlobals.h"
//   53 #include "ZDNwkMgr.h"
//   54 
//   55 #if defined( MT_ZDO_FUNC )
//   56   #include "MT_ZDO.h"
//   57 #endif
//   58   
//   59 #if defined ( LCD_SUPPORTED )
//   60   #include "OnBoard.h"
//   61 #endif
//   62 
//   63 /* HAL */
//   64 //#include "hal_lcd.h"
//   65 #include "hal_oled.h"
//   66   
//   67 /******************************************************************************
//   68  * CONSTANTS
//   69  */
//   70 
//   71 #define ONE_MINUTE             60000  // 1(m) * 60(s) * 1000(ms)
//   72 
//   73 #if defined ( LCD_SUPPORTED )

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   74   const char NwkMgrStr_1[]     = "NM-fail not hi";
NwkMgrStr_1:
        DB "NM-fail not hi"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   75   const char NwkMgrStr_2[]     = "NM-cur<last fail";
NwkMgrStr_2:
        DB "NM-cur<last fail"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   76   const char NwkMgrStr_3[]     = "NM-energy too hi";
NwkMgrStr_3:
        DB "NM-energy too hi"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//   77   const char NwkMgrStr_4[]     = "NM-energy not up";
NwkMgrStr_4:
        DB "NM-energy not up"
//   78 #endif
//   79   
//   80 /******************************************************************************
//   81  * TYPEDEFS
//   82  */
//   83 
//   84 /*********************************************************************
//   85  * GLOBAL VARIABLES
//   86  */
//   87   
//   88 // Task ID for internal task/event processing. This variable will be
//   89 // received when ZDNwkMgr_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   90 uint8 ZDNwkMgr_TaskID = 0;
ZDNwkMgr_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//   91 
//   92 /******************************************************************************
//   93  * LOCAL VARIABLES
//   94  */
//   95 
//   96 // Frequency Agility variables

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   97 uint8 ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq = 0;
ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   98 zAddrType_t ZDNwkMgr_MgmtNwkUpdateNotifyAddr;
ZDNwkMgr_MgmtNwkUpdateNotifyAddr:
        DS 9
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//   99 uint16 ZDNwkMgr_UpdateNotifyTimer = 0;
ZDNwkMgr_UpdateNotifyTimer:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  100 uint8  ZDNwkMgr_NumUpdateNotifySent = 0;
ZDNwkMgr_NumUpdateNotifySent:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  101 uint8  ZDNwkMgr_WaitingForNotifyConfirm = FALSE;
ZDNwkMgr_WaitingForNotifyConfirm:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  102 uint16 ZDNwkMgr_TotalTransmissions;
ZDNwkMgr_TotalTransmissions:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  103 uint16 ZDNwkMgr_TxFailures;
ZDNwkMgr_TxFailures:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  104 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  105 ZDO_MgmtNwkUpdateReq_t ZDNwkMgr_MgmtNwkUpdateReq;
ZDNwkMgr_MgmtNwkUpdateReq:
        DS 9
        REQUIRE __INIT_XDATA_Z
//  106   
//  107 #if defined ( NWK_MANAGER )
//  108 uint16 ZDNwkMgr_UpdateRequestTimer = 0;
//  109 uint8  ZDNwkMgr_LastChannelEnergy = 0;
//  110 uint16 ZDNwkMgr_LastChannelFailureRate = 0;
//  111 #endif // NWK_MANAGER
//  112 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  113 uint8 ZDNwkMgr_NewChannel;
ZDNwkMgr_NewChannel:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  114 
//  115 // PAN ID Conflict variables
//  116 #if defined ( NWK_MANAGER )
//  117 uint8 ZDNwkMgr_PanIdUpdateInProgress = FALSE;
//  118 #endif // NWK_MANAGER
//  119 
//  120 /*********************************************************************
//  121  * GLOBAL FUNCTIONS
//  122  */
//  123 // Freguency Agility functions

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  124 void (*pZDNwkMgr_ReportChannelInterference)( NLME_ChanInterference_t *chanInterference ) = NULL;
pZDNwkMgr_ReportChannelInterference:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  125 void (*pZDNwkMgr_ProcessDataConfirm)( afDataConfirm_t *afDataConfirm ) = NULL;
pZDNwkMgr_ProcessDataConfirm:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  126 void (*pZDNwkMgr_EDScanConfirmCB)( NLME_EDScanConfirm_t *EDScanConfirm ) = NULL;
pZDNwkMgr_EDScanConfirmCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  127 
//  128 // PAN ID Conflict functions

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  129 void (*pZDNwkMgr_NetworkReportCB)( ZDNwkMgr_NetworkReport_t *pReport ) = NULL;
pZDNwkMgr_NetworkReportCB:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  130 void (*pZDNwkMgr_NetworkUpdateCB)( ZDNwkMgr_NetworkUpdate_t *pUpdate ) = NULL;
pZDNwkMgr_NetworkUpdateCB:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  131 
//  132 /******************************************************************************
//  133  * LOCAL FUNCTIONS
//  134  */
//  135 
//  136 void ZDNwkMgr_ProcessServerDiscRsp( zdoIncomingMsg_t *inMsg );
//  137 void ZDNwkMgr_SetNwkManagerAddr( uint16 nwkManagerAddr );
//  138 
//  139 // Frequency Agility functions
//  140 static void ZDNwkMgr_ProcessMsgCBs( zdoIncomingMsg_t *inMsg );
//  141 
//  142 static void ZDNwkMgr_ProcessMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg );
//  143 static void ZDNwkMgr_ProcessChannelInterference( ZDNwkMgr_ChanInterference_t *pChanInterference );
//  144 static void ZDNwkMgr_ProcessEDScanConfirm( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm );
//  145 static void ZDNwkMgr_CheckForChannelInterference( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm );
//  146 static void ZDNwkMgr_BuildAndSendUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
//  147                                                uint16 totalTransmissions, uint16 txFailures,
//  148                                                ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm, uint8 txOptions );
//  149 void ZDNwkMgr_EDScanConfirmCB( NLME_EDScanConfirm_t *EDScanConfirm );
//  150 void ZDNwkMgr_ProcessDataConfirm( afDataConfirm_t *afDataConfirm );
//  151 void ZDNwkMgr_ReportChannelInterference( NLME_ChanInterference_t *chanInterference );
//  152 
//  153 #if defined ( NWK_MANAGER )
//  154 static void ZDNwkMgr_ProcessMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg );
//  155 static void ZDNwkMgr_CheckForChannelChange( ZDO_MgmtNwkUpdateNotify_t *pNotify );
//  156 #endif // NWK_MANAGER
//  157 
//  158 // PAN ID Conflict functions
//  159 #if defined ( NWK_MANAGER )
//  160 void ZDNwkMgr_NetworkReportCB( ZDNwkMgr_NetworkReport_t *pReport );
//  161 void ZDNwkMgr_NetworkUpdateCB( ZDNwkMgr_NetworkUpdate_t *pUpdate );
//  162 
//  163 void ZDNwkMgr_ProcessNetworkReport( ZDNwkMgr_NetworkReport_t *pNetworkReport );
//  164 void ZDNwkMgr_ProcessNetworkUpdate( ZDNwkMgr_NetworkUpdate_t *pNetworkUpdate );
//  165 #endif // NWK_MANAGER
//  166 
//  167 /*********************************************************************
//  168  * @fn      ZDNwkMgr_Init
//  169  *
//  170  * @brief   Initialization function for the Network Manager Task.
//  171  *          This is called during initialization and should contain
//  172  *          any application specific initialization (ie. hardware
//  173  *          initialization/setup, table initialization, power up
//  174  *          notificaiton ... ).
//  175  *
//  176  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  177  *                    used to send messages and set timers.
//  178  *
//  179  * @return  none
//  180  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  181 void ZDNwkMgr_Init( byte task_id )
ZDNwkMgr_Init:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ZDNwkMgr_Init
        CODE
//  182 {
        FUNCALL ZDNwkMgr_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_Init, ZDO_RegisterForZDOMsg
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
//  183   // Save the task ID
//  184   ZDNwkMgr_TaskID = task_id;
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    @DPTR,A
//  185 
//  186   ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Server_Discovery_rsp );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x15
        MOV     R3,#-0x80
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  187 
//  188   // Frequecy Agility initialization
//  189   ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Mgmt_NWK_Update_req );
        ; Setup parameters for call to function ZDO_RegisterForZDOMsg
        MOV     R2,#0x38
        MOV     R3,#0x0
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDO_RegisterForZDOMsg?relay
//  190 #if defined ( NWK_MANAGER )
//  191   ZDO_RegisterForZDOMsg( ZDNwkMgr_TaskID, Mgmt_NWK_Update_notify );
//  192 #endif // NWK_MANAGER
//  193 
//  194   pZDNwkMgr_EDScanConfirmCB = ZDNwkMgr_EDScanConfirmCB;
        MOV     DPTR,#pZDNwkMgr_EDScanConfirmCB
        MOV     A,#??ZDNwkMgr_EDScanConfirmCB?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??ZDNwkMgr_EDScanConfirmCB?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  195   pZDNwkMgr_ProcessDataConfirm = ZDNwkMgr_ProcessDataConfirm;
        MOV     DPTR,#pZDNwkMgr_ProcessDataConfirm
        MOV     A,#??ZDNwkMgr_ProcessDataConfirm?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??ZDNwkMgr_ProcessDataConfirm?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  196   pZDNwkMgr_ReportChannelInterference = ZDNwkMgr_ReportChannelInterference;
        MOV     DPTR,#pZDNwkMgr_ReportChannelInterference
        MOV     A,#??ZDNwkMgr_ReportChannelInterference?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??ZDNwkMgr_ReportChannelInterference?relay >> 8) & 0xff
        MOVX    @DPTR,A
//  197   
//  198   // PAN ID Conflict initialization
//  199 #if defined ( NWK_MANAGER )
//  200   pZDNwkMgr_NetworkReportCB = ZDNwkMgr_NetworkReportCB;
//  201   pZDNwkMgr_NetworkUpdateCB = ZDNwkMgr_NetworkUpdateCB;
//  202 #endif // NWK_MANAGER
//  203   
//  204   ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addrMode = Addr16Bit;
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  205   ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = INVALID_NODE_ADDR;
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr
        MOV     A,#-0x2
        MOVX    @DPTR,A
        INC     DPTR
        INC     A
        MOVX    @DPTR,A
          CFI EndBlock cfiBlock0
//  206 }
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock1
//  207 
//  208 /*********************************************************************
//  209  * @fn      ZDNwkMgr_event_loop
//  210  *
//  211  * @brief   Main event loop for the Network Manager task. This function
//  212  *          is called to process all events for the task.  Events
//  213  *          include timers, messages and any other user defined events.
//  214  *
//  215  * @param   task_id  - The OSAL assigned task ID.
//  216  * @param   events - events to process.  This is a bit map and can
//  217  *                   contain more than one event.
//  218  *
//  219  * @return  none
//  220  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  221 UINT16 ZDNwkMgr_event_loop( byte task_id, UINT16 events )
ZDNwkMgr_event_loop:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function ZDNwkMgr_event_loop
        CODE
//  222 {
        FUNCALL ZDNwkMgr_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, nwkTransmissionFailures
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, ZDNwkMgr_BuildAndSendUpdateNotify
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 19, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 19, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, ZDNwkMgr_ProcessServerDiscRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, ZDNwkMgr_ProcessMgmtNwkUpdateReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, NLME_EDScanRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, ZDNwkMgr_CheckForChannelInterference
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, ZMacSetReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, ZDApp_NwkStateUpdateCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, nwkTransmissionFailures
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 18, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 18, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_event_loop, NLME_EDScanRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 14, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 14, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xe
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
        ; Saved register size: 14
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  223   osal_event_hdr_t *msgPtr;
//  224   (void)task_id;  // Intentionally unreferenced parameter
//  225 
//  226   if ( events & SYS_EVENT_MSG )
        ANL     A,#0x80
        JNZ     $+5
        LJMP    ??ZDNwkMgr_event_loop_0 & 0xFFFF
//  227   {
//  228     msgPtr = (osal_event_hdr_t *)osal_msg_receive( ZDNwkMgr_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??ZDNwkMgr_event_loop_1
??ZDNwkMgr_event_loop_2:
        ; Setup parameters for call to function nwkTransmissionFailures
//  229     while ( msgPtr )
//  230     {
//  231       switch ( msgPtr->event )
//  232       {
//  233         case ZDO_CB_MSG:
//  234           // ZDO sends the message that we registered for
//  235           ZDNwkMgr_ProcessMsgCBs( (zdoIncomingMsg_t *)msgPtr );
//  236           break;
//  237          
//  238         case NM_CHANNEL_INTERFERE:
//  239           // NWK layer sends the message when it detectes Channel Interference
//  240           ZDNwkMgr_ProcessChannelInterference( (ZDNwkMgr_ChanInterference_t *)msgPtr );
//  241           break;
//  242    
//  243         case NM_ED_SCAN_CONFIRM:
//  244           // NWK layer sends the message when it receives an ED scan confirmation
//  245           ZDNwkMgr_ProcessEDScanConfirm( (ZDNwkMgr_EDScanConfirm_t *)msgPtr );
        MOV     R1,#0x0
        LCALL   ??nwkTransmissionFailures?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        ; Setup parameters for call to function ZDNwkMgr_BuildAndSendUpdateNotify
        MOV     ?V0 + 4,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 17)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 19)
        MOV     DPTR,#_NIB + 107
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_2:
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDNwkMgr_BuildAndSendUpdateNotify?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
        MOVX    A,@DPTR
        JZ      ??ZDNwkMgr_event_loop_3
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_32
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x8
        MOV     R3,#0x0
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
//  246           break;
//  247 #if defined ( NWK_MANAGER )
//  248         case ZDO_NETWORK_REPORT:
//  249           // NWK layer sends this message when it receives a Network Report message
//  250           ZDNwkMgr_ProcessNetworkReport( (ZDNwkMgr_NetworkReport_t *)msgPtr );
//  251           break;
//  252        
//  253         case ZDO_NETWORK_UPDATE:
//  254           // NKW layer sends this message when it receives a Network Update message
//  255           ZDNwkMgr_ProcessNetworkUpdate( (ZDNwkMgr_NetworkUpdate_t *)msgPtr );
//  256           break;
//  257 #endif // NWK_MANAGER         
//  258         default:
//  259           break;
//  260       }
//  261 
//  262       // Release the memory
//  263       osal_msg_deallocate( (uint8 *)msgPtr );
??ZDNwkMgr_event_loop_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_msg_deallocate?relay
//  264 
//  265       // Next
//  266       msgPtr = (osal_event_hdr_t *)osal_msg_receive( ZDNwkMgr_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??ZDNwkMgr_event_loop_1:
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JNZ     $+5
        LJMP    ??ZDNwkMgr_event_loop_4 & 0xFFFF
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        ADD     A,#-0x31
        JZ      ??ZDNwkMgr_event_loop_5
        DEC     A
        JZ      ??ZDNwkMgr_event_loop_6
        ADD     A,#0x5f
        JNZ     ??ZDNwkMgr_event_loop_3
        MOV     A,?V0 + 0
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,?V0 + 1
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for ZDNwkMgr_event_loop>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        56
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDNwkMgr_event_loop_7
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32789
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDNwkMgr_event_loop_8
        DATA
        DATA16
        DATA
        DATA16
        DW        ??ZDNwkMgr_event_loop_3
        CODE
??ZDNwkMgr_event_loop_8:
        ; Setup parameters for call to function ZDNwkMgr_ProcessServerDiscRsp
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDNwkMgr_ProcessServerDiscRsp?relay
        SJMP    ??ZDNwkMgr_event_loop_3
??ZDNwkMgr_event_loop_7:
        ; Setup parameters for call to function ZDNwkMgr_ProcessMgmtNwkUpdateReq
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDNwkMgr_ProcessMgmtNwkUpdateReq?relay
        SJMP    ??ZDNwkMgr_event_loop_3
??ZDNwkMgr_event_loop_5:
        MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,#0x4
        JNC     ??ZDNwkMgr_event_loop_3
        ; Setup parameters for call to function NLME_EDScanRequest
        MOV     DPTR,#_NIB + 42
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#__Constant_2108800
        LCALL   ?XLOAD_R2345
        LCALL   ??NLME_EDScanRequest?relay
        MOV     A,R1
        JNZ     ??ZDNwkMgr_event_loop_3
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_20:
        MOV     DPTR,#ZDNwkMgr_TotalTransmissions
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_11:
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine9 & 0xFFFF
??CrossCallReturnLabel_21:
        MOV     DPTR,#ZDNwkMgr_TxFailures
        LCALL   ??Subroutine12_0 & 0xFFFF
??CrossCallReturnLabel_12:
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
        MOV     A,#-0x1
??ZDNwkMgr_event_loop_9:
        MOVX    @DPTR,A
        LJMP    ??ZDNwkMgr_event_loop_3 & 0xFFFF
??ZDNwkMgr_event_loop_6:
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
        MOVX    A,@DPTR
        CPL     A
        JZ      $+5
        LJMP    ??ZDNwkMgr_event_loop_2 & 0xFFFF
        ; Setup parameters for call to function ZDNwkMgr_CheckForChannelInterference
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??ZDNwkMgr_CheckForChannelInterference?relay
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
        CLR     A
        SJMP    ??ZDNwkMgr_event_loop_9
//  267     }
//  268     
//  269     // Return unprocessed events
//  270     return (events ^ SYS_EVENT_MSG);
??ZDNwkMgr_event_loop_4:
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        XRL     A,#0x80
        LJMP    ??ZDNwkMgr_event_loop_10 & 0xFFFF
//  271   }
//  272 
//  273   if ( events & ZDNWKMGR_CHANNEL_CHANGE_EVT )
??ZDNwkMgr_event_loop_0:
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        JNC     ??ZDNwkMgr_event_loop_11
//  274   {       
//  275     // Switch channel
//  276     _NIB.nwkLogicalChannel = ZDNwkMgr_NewChannel;
        MOV     DPTR,#ZDNwkMgr_NewChannel
        MOVX    A,@DPTR
        MOV     DPTR,#_NIB + 22
        MOVX    @DPTR,A
//  277     ZMacSetReq( ZMacChannel, &ZDNwkMgr_NewChannel );
        ; Setup parameters for call to function ZMacSetReq
        MOV     R2,#ZDNwkMgr_NewChannel & 0xff
        MOV     R3,#(ZDNwkMgr_NewChannel >> 8) & 0xff
        MOV     R1,#-0x1f
        LCALL   ??ZMacSetReq?relay
//  278  
//  279     // Our Channel has been changed -- notify to save info into NV
//  280     ZDApp_NwkStateUpdateCB();
        ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
        LCALL   ??ZDApp_NwkStateUpdateCB?relay
//  281     
//  282     // Reset the total transmit count and the transmit failure counters
//  283     _NIB.nwkTotalTransmissions = 0;
        MOV     DPTR,#_NIB + 107
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  284     nwkTransmissionFailures( TRUE );
        ; Setup parameters for call to function nwkTransmissionFailures
        MOV     R1,#0x1
        LCALL   ??nwkTransmissionFailures?relay
//  285     
//  286     return ( events ^ ZDNWKMGR_CHANNEL_CHANGE_EVT );
        MOV     A,R6
        XRL     A,#0x1
        SJMP    ??ZDNwkMgr_event_loop_12
//  287   }
//  288 
//  289   if ( events & ZDNWKMGR_UPDATE_NOTIFY_EVT )
??ZDNwkMgr_event_loop_11:
        ANL     A,#0x2
        JZ      ??ZDNwkMgr_event_loop_13
//  290   {
//  291     // Update the Update Notify timer
//  292     if ( ZDNwkMgr_UpdateNotifyTimer > 0 )
        MOV     DPTR,#ZDNwkMgr_UpdateNotifyTimer
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_18:
        MOV     A,R0
        ORL     A,R1
        JZ      ??ZDNwkMgr_event_loop_14
//  293     {
//  294       ZDNwkMgr_UpdateNotifyTimer--;
        MOV     DPTR,#ZDNwkMgr_UpdateNotifyTimer
        MOVX    A,@DPTR
        ADD     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    A,@DPTR
        ADDC    A,#-0x1
        MOVX    @DPTR,A
//  295       osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_NOTIFY_EVT, ONE_MINUTE );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_ea60
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 18)
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 14)
        SJMP    ??ZDNwkMgr_event_loop_15
//  296     }
//  297     else
//  298     {
//  299       ZDNwkMgr_NumUpdateNotifySent = 0;
??ZDNwkMgr_event_loop_14:
        MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
        CLR     A
        MOVX    @DPTR,A
//  300     }
//  301     
//  302     return ( events ^ ZDNWKMGR_UPDATE_NOTIFY_EVT );
??ZDNwkMgr_event_loop_15:
        MOV     A,R6
        XRL     A,#0x2
        SJMP    ??ZDNwkMgr_event_loop_12
//  303   }
//  304   
//  305 #if defined ( NWK_MANAGER )
//  306   if ( events & ZDNWKMGR_UPDATE_REQUEST_EVT )
//  307   {
//  308     // Update the Update Request timer
//  309     if ( ZDNwkMgr_UpdateRequestTimer > 0 )
//  310     {
//  311       ZDNwkMgr_UpdateRequestTimer--;
//  312       osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_REQUEST_EVT, ONE_MINUTE );
//  313     }
//  314     
//  315     return ( events ^ ZDNWKMGR_UPDATE_REQUEST_EVT );
//  316   }
//  317 #endif // NWK_MANAGER
//  318   
//  319   if ( events & ZDNWKMGR_SCAN_REQUEST_EVT )
??ZDNwkMgr_event_loop_13:
        MOV     A,R6
        ANL     A,#0x8
        JZ      ??ZDNwkMgr_event_loop_16
//  320   {  
//  321     if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount > 0 )
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
        MOVX    A,@DPTR
        JZ      ??ZDNwkMgr_event_loop_17
//  322     {
//  323       if (  NLME_EDScanRequest( ZDNwkMgr_MgmtNwkUpdateReq.channelMask, 
//  324                                 ZDNwkMgr_MgmtNwkUpdateReq.scanDuration ) == ZSuccess )
        ; Setup parameters for call to function NLME_EDScanRequest
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 4
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq
        LCALL   ?XLOAD_R2345
        LCALL   ??NLME_EDScanRequest?relay
        MOV     A,R1
        JNZ     ??ZDNwkMgr_event_loop_17
//  325       {
//  326         ZDNwkMgr_MgmtNwkUpdateReq.scanCount--;
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateReq + 5
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
//  327       }
//  328     }
//  329       
//  330     return ( events ^ ZDNWKMGR_SCAN_REQUEST_EVT );
??ZDNwkMgr_event_loop_17:
        MOV     A,R6
        XRL     A,#0x8
??ZDNwkMgr_event_loop_12:
        MOV     R2,A
        MOV     A,R7
??ZDNwkMgr_event_loop_10:
        MOV     R3,A
        SJMP    ??ZDNwkMgr_event_loop_18
//  331   }
//  332   
//  333   // Discard or make more handlers
//  334   return 0;
??ZDNwkMgr_event_loop_16:
        MOV     R2,#0x0
        MOV     R3,#0x0
??ZDNwkMgr_event_loop_18:
        MOV     R7,#0x6
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock2
//  335 }
//  336 
//  337 /*********************************************************************
//  338  * @fn      ZDNwkMgr_ProcessMsgCBs
//  339  *
//  340  * @brief   Process the incoming messages.
//  341  *
//  342  * @param   msgPtr - message to process
//  343  *
//  344  * @return  TRUE if message to be freed. FALSE otherwise.
//  345  */
//  346 static void ZDNwkMgr_ProcessMsgCBs( zdoIncomingMsg_t *inMsg )
//  347 {
//  348   switch ( inMsg->clusterID )
//  349   {   
//  350     case Mgmt_NWK_Update_req:
//  351       ZDNwkMgr_ProcessMgmtNwkUpdateReq( inMsg );
//  352       break;    
//  353 #if defined ( NWK_MANAGER )  
//  354     case Mgmt_NWK_Update_notify:
//  355       ZDNwkMgr_ProcessMgmtNwkUpdateNotify( inMsg );
//  356       break;
//  357 #endif // NWK_MANAGER
//  358     case Server_Discovery_rsp:
//  359       ZDNwkMgr_ProcessServerDiscRsp( inMsg );
//  360       break;
//  361       
//  362     default:
//  363       // Unknown message
//  364       break;
//  365   }
//  366 }
//  367 
//  368 /*********************************************************************
//  369  * Frequency Agility Routines
//  370  */
//  371 #if defined ( NWK_MANAGER )
//  372 /*********************************************************************
//  373  * @fn          ZDNwkMgr_ProcessMgmtNwkUpdateNotify
//  374  *
//  375  * @brief       This function processes the incoming Management
//  376  *              Network Update notify.
//  377  *
//  378  * @param       pUpdateNotify - notify message
//  379  *
//  380  * @return      TRUE if message to be freed. FALSE otherwise.
//  381  */
//  382 static void ZDNwkMgr_ProcessMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
//  383 {
//  384   if ( zgNwkMgrMode == ZDNWKMGR_ENABLE )
//  385   {
//  386     ZDO_MgmtNwkUpdateNotify_t *pNotify = ZDO_ParseMgmtNwkUpdateNotify( inMsg ); 
//  387     if ( pNotify )
//  388     {
//  389       ZDNwkMgr_CheckForChannelChange( pNotify );
//  390 
//  391       osal_mem_free( pNotify );
//  392     }
//  393   }
//  394 }
//  395 
//  396 /*********************************************************************
//  397  * @fn          ZDNwkMgr_CheckForChannelChange
//  398  *
//  399  * @brief       This function processes the incoming Management Network
//  400  *              Update notify and starts an Update Request if a channel
//  401  *              change is needed.
//  402  *
//  403  * @param       pUpdateNotify - notify message
//  404  *
//  405  * @return      none
//  406  */
//  407 static void ZDNwkMgr_CheckForChannelChange( ZDO_MgmtNwkUpdateNotify_t *pNotify )
//  408 {
//  409   uint8  i;
//  410   uint16 failureRate;
//  411   uint8  lowestEnergyIndex;
//  412   uint8  lowestEnergyValue = 0xFF;
//  413       
//  414   // If any device has more than 50% transmission failures, a channel
//  415   // change should be considered
//  416   failureRate = ( pNotify->transmissionFailures * 100 ) / pNotify->totalTransmissions;
//  417   if ( failureRate < ZDNWKMGR_CC_TX_FAILURE )
//  418   {
//  419 #if defined ( LCD_SUPPORTED )
//  420     HalLcdWriteString( (char*)NwkMgrStr_1, HAL_LCD_LINE_1 );
//  421     HalLcdWriteStringValueValue( ": ", failureRate, 10, ZDNWKMGR_CC_TX_FAILURE, 10, HAL_LCD_LINE_2 );
//  422 #endif
//  423     return;
//  424   }
//  425 
//  426   // If the current failure rate is higher than the last failure rate,
//  427   // a channel change should be considered
//  428   if ( failureRate < ZDNwkMgr_LastChannelFailureRate )
//  429   {
//  430 #if defined ( LCD_SUPPORTED )
//  431     HalLcdWriteString( (char*)NwkMgrStr_2, HAL_LCD_LINE_1 );
//  432     HalLcdWriteStringValueValue( ": ", failureRate, 10, 
//  433                                  ZDNwkMgr_LastChannelFailureRate, 10, HAL_LCD_LINE_2 );
//  434 #endif
//  435     return;
//  436   }
//  437   
//  438   // Select a single channel based on the Mgmt_NWK_Update_notify based on
//  439   // the lowest energy. This is the proposed new channel. 
//  440   for ( i = 0; i < pNotify->listCount; i++ )
//  441   {
//  442     if ( pNotify->energyValues[i] < lowestEnergyValue )
//  443     {
//  444       lowestEnergyIndex = i;
//  445       lowestEnergyValue = pNotify->energyValues[i];
//  446     }
//  447   }
//  448       
//  449   // If this new channel does not have an energy level below an acceptable
//  450   // threshold, a channel change should not be done.
//  451   if ( lowestEnergyValue > ZDNWKMGR_ACCEPTABLE_ENERGY_LEVEL )
//  452   {
//  453 #if defined ( LCD_SUPPORTED )
//  454     HalLcdWriteString( (char*)NwkMgrStr_3, HAL_LCD_LINE_1 );
//  455     HalLcdWriteStringValueValue( ": ", lowestEnergyValue, 10, 
//  456                                  ZDNWKMGR_ACCEPTABLE_ENERGY_LEVEL, 10, HAL_LCD_LINE_2 );
//  457 #endif
//  458     return;
//  459   }
//  460 
//  461   // Channel change should be done -- find out the new active channel
//  462   for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
//  463   {
//  464     if ( ( (uint32)1 << i ) & pNotify->scannedChannels )
//  465     {
//  466       if ( lowestEnergyIndex == 0 )
//  467         break;
//  468       lowestEnergyIndex--;
//  469     }
//  470   }
//  471   
//  472   if ( ( _NIB.nwkLogicalChannel != i ) && ( ZDNwkMgr_UpdateRequestTimer == 0 ) )
//  473   {
//  474     uint32 channelMask;
//  475     zAddrType_t dstAddr;
//  476     
//  477     // The new channel
//  478     ZDNwkMgr_NewChannel = i;
//  479         
//  480     // Prior to changing channels, the network manager should store the 
//  481     // energy scan value as the last energy scan value and the failure 
//  482     // rate from the existing channel as the last failure rate.  These 
//  483     // values are useful to allow comparison of the failure rate and energy
//  484     // level on the previous channel to evaluate if the network is causing
//  485     // its own interference.
//  486     ZDNwkMgr_LastChannelEnergy = lowestEnergyValue;
//  487     ZDNwkMgr_LastChannelFailureRate = failureRate;
//  488        
//  489     // The network manager should broadcast a Mgmt_NWK_Update_req notifying
//  490     // devices of the new channel.  The broadcast shall be to all routers 
//  491     // and coordinator.
//  492     dstAddr.addrMode = AddrBroadcast;
//  493     dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR_DEVRXON;
//  494     channelMask = (uint32)1 << i;
//  495         
//  496     // Increment the nwkUpdateId parameter and set the updateID in the beacon
//  497     NLME_SetUpdateID(_NIB.nwkUpdateId + 1); 
//  498     
//  499     ZDP_MgmtNwkUpdateReq( &dstAddr, channelMask, 0xfe, 0, _NIB.nwkUpdateId, 0 );
//  500         
//  501     // The network manager shall set a timer based on the value of 
//  502     // apsChannelTimer upon issue of a Mgmt_NWK_Update_req that changes 
//  503     // channels and shall not issue another such command until this 
//  504     // timer expires.  
//  505     ZDNwkMgr_UpdateRequestTimer = ZDNWKMGR_UPDATE_REQUEST_TIMER;
//  506     osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_REQUEST_EVT, ONE_MINUTE );
//  507                   
//  508     // Upon receipt of a Mgmt_NWK_Update_req with a change of channels, 
//  509     // the local network manager shall set a timer equal to the 
//  510     // nwkNetworkBroadcastDeliveryTime and shall switch channels upon 
//  511     // expiration of this timer.  NOTE: since we won't recevied our own
//  512     // broadcasted Update Request, we start the channel change timer here.  
//  513     osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_CHANNEL_CHANGE_EVT, 
//  514                         ZDNWKMGR_BCAST_DELIVERY_TIME );
//  515   }
//  516 }
//  517 #endif  // NWK_MANAGER
//  518 
//  519 /*********************************************************************
//  520  * @fn          ZDNwkMgr_ProcessMgmtNwkUpdateReq
//  521  *
//  522  * @brief       This function processes the incoming Management
//  523  *              Network Update request and starts the request (if needed).
//  524  *
//  525  * @param       Request message
//  526  *
//  527  * @return      none
//  528  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  529 static void ZDNwkMgr_ProcessMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg )
ZDNwkMgr_ProcessMgmtNwkUpdateReq:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
        CODE
//  530 {
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, ZDO_ParseMgmtNwkUpdateReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, NLME_EDScanRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, NLME_SetUpdateID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, NLME_SetUpdateID
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, ZDApp_NwkStateUpdateCB
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, ZDNwkMgr_SetNwkManagerAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessMgmtNwkUpdateReq, ZDP_MgmtNwkUpdateNotify
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 33, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 33, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  531   ZDO_MgmtNwkUpdateReq_t Req;
//  532   
//  533   ZDO_ParseMgmtNwkUpdateReq( inMsg, &Req );
        ; Setup parameters for call to function ZDO_ParseMgmtNwkUpdateReq
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDO_ParseMgmtNwkUpdateReq?relay
//  534    
//  535   if ( Req.scanDuration <= 0x05 )
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,R6
        ADD     A,#0x2
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     A,R6
        ADD     A,#0xf
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     A,R1
        CLR     C
        SUBB    A,#0x6
        JNC     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_0
//  536   {
//  537     // Request is to scan over channelMask. The result will be reported by Confirm   
//  538     if ( ( !inMsg->wasBroadcast )                     && 
//  539          ( Req.scanCount >  ZDNWKMGR_MIN_SCAN_COUNT ) && 
//  540          ( Req.scanCount <= ZDNWKMGR_MAX_SCAN_COUNT ) )
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_6:
        JZ      $+5
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        DEC     A
        CLR     C
        SUBB    A,#0x5
        JC      $+5
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
//  541     {
//  542       if ( NLME_EDScanRequest( Req.channelMask, Req.scanDuration ) == ZSuccess )
        ; Setup parameters for call to function NLME_EDScanRequest
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?XLOAD_R2345
        LCALL   ??NLME_EDScanRequest?relay
        MOV     A,R1
        JZ      $+5
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
//  543       {
//  544         // Save off the information to be used for the notify
//  545         ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq            = inMsg->TransSeq;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq
        MOVX    @DPTR,A
//  546         ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
        LCALL   ?Subroutine3 & 0xFFFF
//  547         
//  548         Req.scanCount--;
??CrossCallReturnLabel_16:
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        DEC     A
        MOVX    @DPTR,A
//  549         
//  550         // Save off scan info for the subsequent scans
//  551         ZDNwkMgr_MgmtNwkUpdateReq = Req;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,#ZDNwkMgr_MgmtNwkUpdateReq & 0xff
        MOV     R5,#(ZDNwkMgr_MgmtNwkUpdateReq >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?MOVE_LONG8_XDATA_XDATA
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
//  552       }
//  553     }
//  554   }
//  555   else if ( Req.scanDuration == 0xFE )
??ZDNwkMgr_ProcessMgmtNwkUpdateReq_0:
        MOV     A,#-0x2
        XRL     A,R1
        JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_2
//  556   {
//  557     // Request is to change Channel. The command provide a new active
//  558     // channel as a single channel in the channelMask.
//  559     if ( Req.nwkUpdateId > _NIB.nwkUpdateId )
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_4:
        JC      $+5
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
//  560     {
//  561       uint8 i;
//  562       
//  563       // Set update ID in the Beacon
//  564       NLME_SetUpdateID(Req.nwkUpdateId); 
        ; Setup parameters for call to function NLME_SetUpdateID
        LCALL   ??NLME_SetUpdateID?relay
//  565       
//  566       // Find out the new active channel
//  567       for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
        MOV     R1,#0x0
//  568       {
//  569         if ( ( (uint32)1 << i ) & Req.channelMask )
??ZDNwkMgr_ProcessMgmtNwkUpdateReq_3:
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     ?V0 + 2,#0x0
        MOV     ?V0 + 3,#0x0
        MOV     A,R1
        MOV     R0,#?V0 + 0
        LCALL   ?L_SHL
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 0
        LCALL   ?L_AND_X
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        ORL     A,?V0 + 2
        ORL     A,?V0 + 3
        JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_4
//  570         {
//  571           break;
//  572         }
//  573       }
        INC     R1
        MOV     A,R1
        CLR     C
        SUBB    A,#0x1b
        JC      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_3
//  574 
//  575       if ( _NIB.nwkLogicalChannel != i )
??ZDNwkMgr_ProcessMgmtNwkUpdateReq_4:
        MOV     DPTR,#_NIB + 22
        MOVX    A,@DPTR
        XRL     A,R1
        JNZ     $+5
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
//  576       {
//  577         ZDNwkMgr_NewChannel = i;
        MOV     A,R1
        MOV     DPTR,#ZDNwkMgr_NewChannel
        MOVX    @DPTR,A
//  578           
//  579         // Upon receipt of a Mgmt_NWK_Update_req with a change of channels, 
//  580         // the local network manager shall set a timer equal to the 
//  581         // nwkNetworkBroadcastDeliveryTime and shall switch channels upon 
//  582         // expiration of this timer.  Each node shall also increment the 
//  583         // nwkUpdateId parameter and also reset the total transmit count 
//  584         // and the transmit failure counters.  
//  585         osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_CHANNEL_CHANGE_EVT, 
//  586                             ZDNWKMGR_BCAST_DELIVERY_TIME );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#_NIB + 7
        MOVX    A,@DPTR
        MOV     B,#0x64
        MUL     AB
        MOV     ?V0 + 0,A
        MOV     R0,B
        CLR     A
        ADD     A,R0
        MOV     ?V0 + 1,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V0 + 2,A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_FOUR
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
//  587       }
//  588     }
//  589   }
//  590   else if ( Req.scanDuration == 0xFF )
??ZDNwkMgr_ProcessMgmtNwkUpdateReq_2:
        MOV     A,#-0x1
        XRL     A,R1
        JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_5
//  591   {
//  592     // Request is to change apsChannelMask and nwkManagerAddr
//  593     if ( Req.nwkUpdateId > _NIB.nwkUpdateId )
        MOV     A,#0x6
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine6 & 0xFFFF
??CrossCallReturnLabel_5:
        JC      $+5
        LJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1 & 0xFFFF
//  594     {
//  595       NLME_SetUpdateID(Req.nwkUpdateId); // Set the updateID in the beacon
        ; Setup parameters for call to function NLME_SetUpdateID
        LCALL   ??NLME_SetUpdateID?relay
//  596        
//  597       if ( ( Req.channelMask != 0 ) && ( _NIB.channelList != Req.channelMask ) )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        ORL     A,?V0 + 2
        ORL     A,?V0 + 3
        JZ      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0 + 0
        LCALL   ?L_MOV_X
        MOV     DPTR,#_NIB + 36
        MOV     R0,#?V0 + 0
        LCALL   ?L_EQ_X
        JZ      ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6
//  598       {
//  599         _NIB.channelList = Req.channelMask;
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?XLOAD_R2345
        MOV     DPTR,#_NIB + 36
        LCALL   ?XSTORE_R2345
//  600       
//  601         // Our Channel List has been changed -- notify to save info into NV
//  602         ZDApp_NwkStateUpdateCB();
        ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
        LCALL   ??ZDApp_NwkStateUpdateCB?relay
//  603       }
//  604     
//  605       ZDNwkMgr_SetNwkManagerAddr( Req.nwkManagerAddr );
??ZDNwkMgr_ProcessMgmtNwkUpdateReq_6:
        ; Setup parameters for call to function ZDNwkMgr_SetNwkManagerAddr
        MOV     A,#0x7
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??ZDNwkMgr_SetNwkManagerAddr?relay
        SJMP    ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
//  606     }
//  607   }
//  608   else // 0x06-0xFD
//  609   {
//  610     // Request is invalid
//  611     if ( !inMsg->wasBroadcast )
??ZDNwkMgr_ProcessMgmtNwkUpdateReq_5:
        LCALL   ?Subroutine8 & 0xFFFF
??CrossCallReturnLabel_7:
        JNZ     ??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1
//  612     {
//  613       ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
        LCALL   ?Subroutine3 & 0xFFFF
//  614       ZDP_MgmtNwkUpdateNotify( inMsg->TransSeq, &ZDNwkMgr_MgmtNwkUpdateNotifyAddr,
//  615                                ZDP_INVALID_REQTYPE, 0, 0, 0, 0, NULL, AF_TX_OPTIONS_NONE, false );
??CrossCallReturnLabel_17:
        ; Setup parameters for call to function ZDP_MgmtNwkUpdateNotify
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 23)
        CLR     A
        MOV     ?V0 + 3,A
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     DPTR,#__Constant_0
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     R5,#0x0
        MOV     R4,#-0x80
        MOV     R2,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr & 0xff
        MOV     R3,#(ZDNwkMgr_MgmtNwkUpdateNotifyAddr >> 8) & 0xff
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??ZDP_MgmtNwkUpdateNotify?relay
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 21)
//  616     }
//  617   }
//  618 }
??ZDNwkMgr_ProcessMgmtNwkUpdateReq_1:
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
          CFI EndBlock cfiBlock3
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock4

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine8:
          CFI Block cfiCond5 Using cfiCommon0
          CFI Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond6 Using cfiCommon0
          CFI (cfiCond6) Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI (cfiCond6) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond6) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond6) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond6) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond6) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond6) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond6) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond6) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond6) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond6) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond6) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond6) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond6) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond6) CFA_SP SP+0
          CFI (cfiCond6) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker7 Using cfiCommon1
          CFI (cfiPicker7) NoFunction
          CFI (cfiPicker7) Picker
        MOV     A,R6
        ADD     A,#0xb
        MOV     DPL,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond5
          CFI EndBlock cfiCond6
          CFI EndBlock cfiPicker7

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine6:
          CFI Block cfiCond8 Using cfiCommon0
          CFI Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond9 Using cfiCommon0
          CFI (cfiCond9) Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI (cfiCond9) Conditional ??CrossCallReturnLabel_5
          CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond9) CFA_SP SP+0
          CFI (cfiCond9) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker10 Using cfiCommon1
          CFI (cfiPicker10) NoFunction
          CFI (cfiPicker10) Picker
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#_NIB + 109
        MOVX    A,@DPTR
        CLR     C
        SUBB    A,R1
        RET
          CFI EndBlock cfiCond8
          CFI EndBlock cfiCond9
          CFI EndBlock cfiPicker10
//  619 
//  620 /*********************************************************************
//  621  * @fn      ZDNwkMgr_ProcessServerDiscRsp
//  622  *
//  623  * @brief   Process the incoming System Server Discovery Response
//  624  *
//  625  * @param   pRsp - Structure containing Server Discovery response
//  626  *
//  627  * @return  none
//  628  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  629 void ZDNwkMgr_ProcessServerDiscRsp( zdoIncomingMsg_t *inMsg )
ZDNwkMgr_ProcessServerDiscRsp:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function ZDNwkMgr_ProcessServerDiscRsp
        CODE
//  630 {
        FUNCALL ZDNwkMgr_ProcessServerDiscRsp, ZDO_ParseServerDiscRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ProcessServerDiscRsp, ZDNwkMgr_SetNwkManagerAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 3
        MOV     A,#-0x3
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  631   ZDO_ServerDiscRsp_t Rsp;
//  632   
//  633   ZDO_ParseServerDiscRsp( inMsg, &Rsp );
        ; Setup parameters for call to function ZDO_ParseServerDiscRsp
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R4,DPL
        MOV     R5,DPH
        LCALL   ??ZDO_ParseServerDiscRsp?relay
//  634   
//  635   if ( Rsp.status == ZSuccess )
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOVX    A,@DPTR
        JNZ     ??ZDNwkMgr_ProcessServerDiscRsp_0
//  636   {
//  637     // Is the Network Manager bit set in the response?
//  638     if ( Rsp.serverMask & NETWORK_MANAGER )
        MOV     A,#0x1
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        ANL     A,#0x40
        JZ      ??ZDNwkMgr_ProcessServerDiscRsp_0
//  639     {
//  640       // Set the Remote Device's NWK Address as the Network Manager Address
//  641       ZDNwkMgr_SetNwkManagerAddr( inMsg->srcAddr.addr.shortAddr );
        ; Setup parameters for call to function ZDNwkMgr_SetNwkManagerAddr
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        LCALL   ??ZDNwkMgr_SetNwkManagerAddr?relay
//  642     }
//  643   }
//  644 }
??ZDNwkMgr_ProcessServerDiscRsp_0:
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 9)
        LJMP    ?Subroutine0 & 0xFFFF
          CFI EndBlock cfiBlock11
//  645 
//  646 /*********************************************************************
//  647  * @fn          ZDNwkMgr_ProcessChannelInterference
//  648  *
//  649  * @brief       This function processes the incoming Channel Interference
//  650  *              detection message and sends out a notify (if needed).
//  651  *
//  652  * @param       pChannelInterference - interference message
//  653  *
//  654  * @return      none
//  655  */
//  656 static void ZDNwkMgr_ProcessChannelInterference( ZDNwkMgr_ChanInterference_t *pChanInterference )
//  657 {
//  658   // To avoid a device with communication problems from constantly 
//  659   // sending reports to the network manager, the device should not 
//  660   // send a Mgmt_NWK_Update_notify more than 4 times per hour.
//  661   if ( ZDNwkMgr_NumUpdateNotifySent < 4 )
//  662   {
//  663     // Conduct an energy scan on all channels.
//  664     if ( NLME_EDScanRequest( MAX_CHANNELS_24GHZ, _NIB.scanDuration ) == ZSuccess )
//  665     {
//  666       // Save the counters for the Update Notify message to be sent
//  667       ZDNwkMgr_TotalTransmissions = pChanInterference->totalTransmissions;
//  668       ZDNwkMgr_TxFailures = pChanInterference->txFailures;
//  669 
//  670       // Mark scan as channel inetrference check
//  671       ZDNwkMgr_MgmtNwkUpdateReq.scanCount = 0xFF;
//  672     }
//  673   }
//  674 }
//  675 
//  676 /*********************************************************************
//  677  * @fn          ZDNwkMgr_ProcessEDScanConfirm
//  678  *
//  679  * @brief       This function processes the incoming ED Scan Confirm
//  680  *              message and sends out a notify (if needed).
//  681  *
//  682  * @param       pEDScanConfirm - SD Scan Confirmation message
//  683  *
//  684  * @return      none
//  685  */
//  686 static void ZDNwkMgr_ProcessEDScanConfirm( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm )
//  687 { 
//  688   if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount == 0xFF )
//  689   {
//  690     // Confirm to scan all channels for channel interference check
//  691     ZDNwkMgr_CheckForChannelInterference( pEDScanConfirm ); 
//  692     
//  693     ZDNwkMgr_MgmtNwkUpdateReq.scanCount = 0;
//  694   }
//  695   else
//  696   {
//  697     // Confirm to the requested scan
//  698     uint16 txFailures = nwkTransmissionFailures( FALSE );
//  699     
//  700     ZDNwkMgr_BuildAndSendUpdateNotify( ZDNwkMgr_MgmtNwkUpdateNotifyTransSeq,
//  701                                        &ZDNwkMgr_MgmtNwkUpdateNotifyAddr, 
//  702                                        _NIB.nwkTotalTransmissions, txFailures, 
//  703                                        pEDScanConfirm, AF_TX_OPTIONS_NONE );
//  704     // More scans needed?
//  705     if ( ZDNwkMgr_MgmtNwkUpdateReq.scanCount > 0 )
//  706     {
//  707       osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_SCAN_REQUEST_EVT, 50 );
//  708     }
//  709   }
//  710 }
//  711 
//  712 /*********************************************************************
//  713  * @fn          ZDNwkMgr_CheckForChannelInterference
//  714  *
//  715  * @brief       This function processes the incoming ED Scan Confirm
//  716  *              message and sends out an Update Notify (if needed).
//  717  *
//  718  * @param       pEDScanConfirm - SD Scan Confirmation message
//  719  *
//  720  * @return      none
//  721  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  722 static void ZDNwkMgr_CheckForChannelInterference( ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm )
ZDNwkMgr_CheckForChannelInterference:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function ZDNwkMgr_CheckForChannelInterference
        CODE
//  723 {
        FUNCALL ZDNwkMgr_CheckForChannelInterference, ZDNwkMgr_BuildAndSendUpdateNotify
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_CheckForChannelInterference, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_CheckForChannelInterference, HalLcdWriteString
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 20, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 20, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_CheckForChannelInterference, HalLcdWriteStringValueValue
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 24, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 24, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x14
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
        ; Saved register size: 20
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  724   uint8 i;
//  725   uint8 channelEnergy = 0;
        MOV     ?V0 + 4,#0x0
//  726   uint8 energyIncreased = FALSE;
//  727     
//  728   // Get the current channel energy
//  729   if ( ( (uint32)1 << _NIB.nwkLogicalChannel ) & pEDScanConfirm->scannedChannels )
        MOV     DPTR,#_NIB + 22
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        MOV     A,R2
        ADD     A,#0x3
        MOV     A,R3
        ADDC    A,#0x0
        INC     R2
        INC     R2
        INC     R2
        MOV     R3,A
        MOV     ?V0 + 8,#0x1
        MOV     ?V0 + 9,#0x0
        MOV     ?V0 + 10,#0x0
        MOV     ?V0 + 11,#0x0
        MOV     A,?V0 + 2
        MOV     R0,#?V0 + 8
        LCALL   ?L_SHL
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0 + 8
        LCALL   ?L_AND_X
        MOV     A,?V0 + 8
        ORL     A,?V0 + 9
        ORL     A,?V0 + 10
        ORL     A,?V0 + 11
        JZ      ??ZDNwkMgr_CheckForChannelInterference_0
//  730   {
//  731     channelEnergy = pEDScanConfirm->energyDetectList[_NIB.nwkLogicalChannel];
        LCALL   ?Subroutine7 & 0xFFFF
//  732   }
??CrossCallReturnLabel_9:
        MOV     ?V0 + 4,A
//  733     
//  734   // If this energy scan does not indicate higher energy on the current 
//  735   // channel then other channels, no action is taken. The device should 
//  736   // continue to operate as normal and the message counters are not reset.
//  737   for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
??ZDNwkMgr_CheckForChannelInterference_0:
        MOV     R1,#0x0
//  738   {
//  739     if ( ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels ) && 
//  740          ( channelEnergy > pEDScanConfirm->energyDetectList[i] ) )
??ZDNwkMgr_CheckForChannelInterference_1:
        MOV     ?V0 + 8,#0x1
        MOV     ?V0 + 9,#0x0
        MOV     ?V0 + 10,#0x0
        MOV     ?V0 + 11,#0x0
        MOV     A,R1
        MOV     R0,#?V0 + 8
        LCALL   ?L_SHL
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     R0,#?V0 + 8
        LCALL   ?L_AND_X
        MOV     A,?V0 + 8
        ORL     A,?V0 + 9
        ORL     A,?V0 + 10
        ORL     A,?V0 + 11
        JZ      ??ZDNwkMgr_CheckForChannelInterference_2
        MOV     ?V0 + 2,R1
        LCALL   ?Subroutine7 & 0xFFFF
??CrossCallReturnLabel_10:
        CLR     C
        SUBB    A,?V0 + 4
        JNC     ??ZDNwkMgr_CheckForChannelInterference_2
//  741     {
//  742       energyIncreased = TRUE;
//  743       break;
//  744     }
//  745   }
//  746     
//  747   // If the energy scan does indicate increased energy on the channel
//  748   // in use, a Mgmt_NWK_Update_notify should be sent to the Network 
//  749   // Manager to indicate interference is present.
//  750   if ( energyIncreased )
//  751   {
//  752     // Send a Management Network Update notify to the Network Manager
//  753     ZDNwkMgr_MgmtNwkUpdateNotifyAddr.addr.shortAddr = _NIB.nwkManagerAddr;
        MOV     DPTR,#_NIB + 105
        LCALL   ??Subroutine11_0 & 0xFFFF
//  754     ZDNwkMgr_BuildAndSendUpdateNotify( 0, &ZDNwkMgr_MgmtNwkUpdateNotifyAddr, 
//  755                                        ZDNwkMgr_TotalTransmissions, ZDNwkMgr_TxFailures,
//  756                                        pEDScanConfirm, AF_MSG_ACK_REQUEST );
??CrossCallReturnLabel_15:
        ; Setup parameters for call to function ZDNwkMgr_BuildAndSendUpdateNotify
        MOV     ?V0 + 2,#0x10
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     DPTR,#ZDNwkMgr_TxFailures
        LCALL   ?PUSH_XSTACK8_X_TWO
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     DPTR,#ZDNwkMgr_TotalTransmissions
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_3:
        MOV     R1,#0x0
        LCALL   ??ZDNwkMgr_BuildAndSendUpdateNotify?relay
        MOV     A,#0x5
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  757     ZDNwkMgr_WaitingForNotifyConfirm = TRUE; // Confirm will clear the counters
        MOV     DPTR,#ZDNwkMgr_WaitingForNotifyConfirm
        MOV     A,#0x1
        MOVX    @DPTR,A
//  758       
//  759     if ( ZDNwkMgr_NumUpdateNotifySent == 0 )
        MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
        MOVX    A,@DPTR
        JNZ     ??ZDNwkMgr_CheckForChannelInterference_3
//  760     {
//  761       // First notify message sent within this hour. Start the Update Notify timer.
//  762       ZDNwkMgr_UpdateNotifyTimer = ZDNWKMGR_UPDATE_NOTIFY_TIMER;
        MOV     DPTR,#ZDNwkMgr_UpdateNotifyTimer
        MOV     A,#0x3c
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  763       osal_start_timerEx( ZDNwkMgr_TaskID, ZDNWKMGR_UPDATE_NOTIFY_EVT, ONE_MINUTE );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     DPTR,#__Constant_ea60
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R2,#0x2
        MOV     R3,#0x0
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  764     }
//  765     
//  766     ZDNwkMgr_NumUpdateNotifySent++;
??ZDNwkMgr_CheckForChannelInterference_3:
        MOV     DPTR,#ZDNwkMgr_NumUpdateNotifySent
        MOVX    A,@DPTR
        INC     A
        MOVX    @DPTR,A
        SJMP    ??ZDNwkMgr_CheckForChannelInterference_4
//  767   }
??ZDNwkMgr_CheckForChannelInterference_2:
        INC     R1
        MOV     A,R1
        CLR     C
        SUBB    A,#0x1b
        JNC     $+5
        LJMP    ??ZDNwkMgr_CheckForChannelInterference_1 & 0xFFFF
//  768 #if defined ( LCD_SUPPORTED )
//  769   else
//  770   {
//  771     HalLcdWriteString( (char*)NwkMgrStr_4, HAL_LCD_LINE_1 );
        ; Setup parameters for call to function HalLcdWriteString
        MOV     R1,#0x1
        MOV     R2,#NwkMgrStr_4 & 0xff
        MOV     R3,#(NwkMgrStr_4 >> 8) & 0xff
        LCALL   ??HalLcdWriteString?relay
//  772     HalLcdWriteStringValueValue( ": ", _NIB.nwkLogicalChannel, 10, channelEnergy, 10, HAL_LCD_LINE_2 );
        ; Setup parameters for call to function HalLcdWriteStringValueValue
        MOV     ?V0 + 0,#0x2
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 21)
        MOV     ?V0 + 0,#0xa
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 22)
        MOV     ?V0 + 5,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     R1,#0xa
        MOV     DPTR,#_NIB + 22
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     R5,#0x0
        MOV     R2,#`?<Constant ": ">` & 0xff
        MOV     R3,#(`?<Constant ": ">` >> 8) & 0xff
        LCALL   ??HalLcdWriteStringValueValue?relay
        MOV     A,#0x4
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
//  773   }
//  774 #endif
//  775 }
??ZDNwkMgr_CheckForChannelInterference_4:
        MOV     R7,#0xc
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock12

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine7:
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function ZDNwkMgr_CheckForChannelInterference
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function ZDNwkMgr_CheckForChannelInterference
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond14) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond14) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond14) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond14) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond14) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond14) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond14) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond14) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond14) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond14) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond14) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond14) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond14) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond14) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond14) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond14) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond14) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond14) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond14) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond14) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond14) CFA_SP SP+0
          CFI (cfiCond14) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker15 Using cfiCommon1
          CFI (cfiPicker15) NoFunction
          CFI (cfiPicker15) Picker
        MOV     A,?V0 + 0
        ADD     A,?V0 + 2
        MOV     DPL,A
        MOV     A,?V0 + 1
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiPicker15
        REQUIRE ??Subroutine10_0
        ; // Fall through to label ??Subroutine10_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine10_0:
          CFI Block cfiCond16 Using cfiCommon0
          CFI Function ZDNwkMgr_BuildAndSendUpdateNotify
          CFI Conditional ??CrossCallReturnLabel_8
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 25)
          CFI Block cfiCond17 Using cfiCommon0
          CFI (cfiCond17) Function ZDNwkMgr_CheckForChannelInterference
          CFI (cfiCond17) Conditional ??CrossCallReturnLabel_9
          CFI (cfiCond17) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond17) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond17) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond17) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond17) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond17) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond17) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond17) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond17) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond17) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond17) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond17) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond17) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond17) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond17) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond17) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond17) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond17) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond17) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond17) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond17) CFA_SP SP+0
          CFI (cfiCond17) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function ZDNwkMgr_CheckForChannelInterference
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+0
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiPicker19 Using cfiCommon1
          CFI (cfiPicker19) NoFunction
          CFI (cfiPicker19) Picker
        ADDC    A,#0x0
        MOV     DPH,A
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        RET
          CFI EndBlock cfiCond16
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiPicker19

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond20 Using cfiCommon0
          CFI Function ZDNwkMgr_event_loop
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 19)
          CFI Block cfiCond21 Using cfiCommon0
          CFI (cfiCond21) Function ZDNwkMgr_CheckForChannelInterference
          CFI (cfiCond21) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond21) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond21) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond21) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond21) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond21) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond21) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond21) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond21) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond21) CFA_SP SP+0
          CFI (cfiCond21) CFA_XSP16 add(XSP16, 25)
          CFI Block cfiPicker22 Using cfiCommon1
          CFI (cfiPicker22) NoFunction
          CFI (cfiPicker22) Picker
        MOVX    A,@DPTR
        MOV     R4,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R5,A
        MOV     R2,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr & 0xff
        MOV     R3,#(ZDNwkMgr_MgmtNwkUpdateNotifyAddr >> 8) & 0xff
        RET
          CFI EndBlock cfiCond20
          CFI EndBlock cfiCond21
          CFI EndBlock cfiPicker22

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond23 Using cfiCommon0
          CFI Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI Conditional ??CrossCallReturnLabel_16
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond24 Using cfiCommon0
          CFI (cfiCond24) Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI (cfiCond24) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond24) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond24) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond24) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond24) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond24) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond24) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond24) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond24) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond24) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond24) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond24) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond24) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond24) CFA_SP SP+0
          CFI (cfiCond24) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker25 Using cfiCommon1
          CFI (cfiPicker25) NoFunction
          CFI (cfiPicker25) Picker
        MOV     DPL,?V0 + 2
        MOV     DPH,?V0 + 3
          CFI EndBlock cfiCond23
          CFI EndBlock cfiCond24
          CFI EndBlock cfiPicker25
        REQUIRE ??Subroutine11_0
        ; // Fall through to label ??Subroutine11_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine11_0:
          CFI Block cfiCond26 Using cfiCommon0
          CFI Function ZDNwkMgr_CheckForChannelInterference
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond27 Using cfiCommon0
          CFI (cfiCond27) Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI (cfiCond27) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond27) CFA_SP SP+0
          CFI (cfiCond27) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+0
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker29 Using cfiCommon1
          CFI (cfiPicker29) NoFunction
          CFI (cfiPicker29) Picker
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_22:
        MOV     DPTR,#ZDNwkMgr_MgmtNwkUpdateNotifyAddr
          CFI EndBlock cfiCond26
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiPicker29
        REQUIRE ??Subroutine12_0
        ; // Fall through to label ??Subroutine12_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine12_0:
          CFI Block cfiCond30 Using cfiCommon0
          CFI Function ZDNwkMgr_event_loop
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond31 Using cfiCommon0
          CFI (cfiCond31) Function ZDNwkMgr_event_loop
          CFI (cfiCond31) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond31) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond31) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond31) CFA_SP SP+0
          CFI (cfiCond31) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function ZDNwkMgr_ReportChannelInterference
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond32) CFA_SP SP+0
          CFI (cfiCond32) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond33 Using cfiCommon0
          CFI (cfiCond33) Function ZDNwkMgr_ReportChannelInterference
          CFI (cfiCond33) Conditional ??CrossCallReturnLabel_14
          CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond33) CFA_SP SP+0
          CFI (cfiCond33) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function ZDNwkMgr_CheckForChannelInterference
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_15
          CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond34) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond34) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond34) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond34) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond34) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond34) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond34) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond34) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond34) CFA_SP SP+0
          CFI (cfiCond34) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond35) CFA_SP SP+0
          CFI (cfiCond35) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond36 Using cfiCommon0
          CFI (cfiCond36) Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI (cfiCond36) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond36) CFA_SP SP+0
          CFI (cfiCond36) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiPicker37 Using cfiCommon1
          CFI (cfiPicker37) NoFunction
          CFI (cfiPicker37) Picker
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond30
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiCond33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
          CFI EndBlock cfiCond36
          CFI EndBlock cfiPicker37

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine9:
          CFI Block cfiCond38 Using cfiCommon0
          CFI Function ZDNwkMgr_event_loop
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond39 Using cfiCommon0
          CFI (cfiCond39) Function ZDNwkMgr_event_loop
          CFI (cfiCond39) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond39) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond39) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond39) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond39) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond39) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond39) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond39) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond39) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond39) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond39) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond39) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond39) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond39) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond39) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond39) CFA_SP SP+0
          CFI (cfiCond39) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker40 Using cfiCommon1
          CFI (cfiPicker40) NoFunction
          CFI (cfiPicker40) Picker
        INC     DPTR
        INC     DPTR
          CFI EndBlock cfiCond38
          CFI EndBlock cfiCond39
          CFI EndBlock cfiPicker40
        REQUIRE ??Subroutine13_0
        ; // Fall through to label ??Subroutine13_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine13_0:
          CFI Block cfiCond41 Using cfiCommon0
          CFI Function ZDNwkMgr_event_loop
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond42 Using cfiCommon0
          CFI (cfiCond42) Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI (cfiCond42) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_16
          CFI (cfiCond42) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond42) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond42) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond42) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond42) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond42) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond42) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond42) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond42) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond42) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond42) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond42) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond42) CFA_SP SP+0
          CFI (cfiCond42) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function ZDNwkMgr_ProcessMgmtNwkUpdateReq
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_17
          CFI (cfiCond43) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond43) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond43) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond43) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond43) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond43) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond43) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond43) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond43) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond43) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond43) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond43) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond43) CFA_SP SP+0
          CFI (cfiCond43) CFA_XSP16 add(XSP16, 21)
          CFI Block cfiCond44 Using cfiCommon0
          CFI (cfiCond44) Function ZDNwkMgr_CheckForChannelInterference
          CFI (cfiCond44) Conditional ??CrossCallReturnLabel_22, ??CrossCallReturnLabel_15
          CFI (cfiCond44) R6 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI (cfiCond44) VB load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI (cfiCond44) V0 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI (cfiCond44) V1 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI (cfiCond44) V2 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond44) V3 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond44) V4 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond44) V5 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond44) V6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond44) V7 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond44) V8 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond44) V9 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond44) V10 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond44) V11 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond44) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond44) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond44) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond44) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond44) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond44) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond44) CFA_SP SP+0
          CFI (cfiCond44) CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond45 Using cfiCommon0
          CFI (cfiCond45) Function ZDNwkMgr_ReportChannelInterference
          CFI (cfiCond45) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_0
          CFI (cfiCond45) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond45) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond45) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond45) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond45) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond45) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond45) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond45) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond45) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond45) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond45) CFA_SP SP+0
          CFI (cfiCond45) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function ZDNwkMgr_ReportChannelInterference
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_19, ??CrossCallReturnLabel_1
          CFI (cfiCond46) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond46) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond46) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond46) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond46) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond46) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond46) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond46) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond46) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond46) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond46) CFA_SP SP+0
          CFI (cfiCond46) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond47 Using cfiCommon0
          CFI (cfiCond47) Function ZDNwkMgr_event_loop
          CFI (cfiCond47) Conditional ??CrossCallReturnLabel_20
          CFI (cfiCond47) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond47) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond47) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond47) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond47) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond47) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond47) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond47) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond47) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond47) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond47) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond47) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond47) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond47) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond47) CFA_SP SP+0
          CFI (cfiCond47) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiCond48 Using cfiCommon0
          CFI (cfiCond48) Function ZDNwkMgr_event_loop
          CFI (cfiCond48) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond48) R6 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond48) VB load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond48) V0 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond48) V1 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond48) V2 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond48) V3 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond48) V4 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond48) V5 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond48) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond48) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond48) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond48) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond48) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond48) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond48) CFA_SP SP+0
          CFI (cfiCond48) CFA_XSP16 add(XSP16, 14)
          CFI Block cfiPicker49 Using cfiCommon1
          CFI (cfiPicker49) NoFunction
          CFI (cfiPicker49) Picker
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        RET
          CFI EndBlock cfiCond41
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiCond44
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiCond47
          CFI EndBlock cfiCond48
          CFI EndBlock cfiPicker49
//  776 
//  777 /*********************************************************************
//  778  * @fn          ZDNwkMgr_BuildAndSendUpdateNotify
//  779  *
//  780  * @brief       This builds and send a Mgmt_NWK_Update_notify message. This
//  781  *              function sends a unicast message.
//  782  *
//  783  * @param       TransSeq - transaction sequence number
//  784  * @param       dstAddr - destination address of the message
//  785  * @param       pEDScanConfirm - update notify info
//  786  *
//  787  * @return      afStatus_t
//  788  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  789 static void ZDNwkMgr_BuildAndSendUpdateNotify( uint8 TransSeq, zAddrType_t *dstAddr,
ZDNwkMgr_BuildAndSendUpdateNotify:
          CFI Block cfiBlock50 Using cfiCommon0
          CFI Function ZDNwkMgr_BuildAndSendUpdateNotify
        CODE
//  790                                                uint16 totalTransmissions, uint16 txFailures,
//  791                                                ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm,
//  792                                                uint8 txOptions )
//  793 {
        FUNCALL ZDNwkMgr_BuildAndSendUpdateNotify, osal_mem_alloc
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_BuildAndSendUpdateNotify, ZDP_MgmtNwkUpdateNotify
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 37, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 37, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_BuildAndSendUpdateNotify, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 25, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 25, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x17
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V14 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V13 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V12 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V11 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V10 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V9 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V8 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-17)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-18)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-19)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-20)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-21)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-22)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-23)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 23)
        ; Saved register size: 23
        ; Auto size: 2
        MOV     A,#-0x2
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        MOV     ?V0 + 14,R1
        MOV     A,R4
        MOV     R6,A
        MOV     A,R5
        MOV     R7,A
        MOV     A,#0x19
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 3,A
        MOV     A,#0x1d
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 9,A
//  794   uint8 i;
//  795   uint8 listCount = 0;
        MOV     ?V0 + 8,#0x0
//  796   uint8 *energyValues = NULL;
        MOV     ?V0 + 0,#0x0
        MOV     ?V0 + 1,#0x0
//  797   
//  798   // Count number of energy detects
//  799   for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
        MOV     R1,#0x0
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     ?V0 + 12,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 13,A
        MOV     A,?V0 + 12
        ADD     A,#0x3
        MOV     ?V0 + 10,A
        MOV     A,?V0 + 13
        ADDC    A,#0x0
        MOV     ?V0 + 11,A
//  800   {
//  801     if ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels )
??ZDNwkMgr_BuildAndSendUpdateNotify_0:
        MOV     ?V0 + 4,#0x1
        MOV     ?V0 + 5,#0x0
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x0
        MOV     A,R1
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     DPL,?V0 + 10
        MOV     DPH,?V0 + 11
        MOV     R0,#?V0 + 4
        LCALL   ?L_AND_X
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        ORL     A,?V0 + 6
        ORL     A,?V0 + 7
        JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_1
//  802       listCount++;
        INC     ?V0 + 8
//  803   }
??ZDNwkMgr_BuildAndSendUpdateNotify_1:
        INC     R1
        MOV     A,R1
        CLR     C
        SUBB    A,#0x1b
        JC      ??ZDNwkMgr_BuildAndSendUpdateNotify_0
//  804   
//  805   if ( listCount > 0 )
        MOV     A,?V0 + 8
        JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_2
//  806   {
//  807     energyValues = (uint8 *)osal_mem_alloc( listCount );
        ; Setup parameters for call to function osal_mem_alloc
        MOV     R2,A
        MOV     R3,#0x0
        LCALL   ??osal_mem_alloc?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  808     if ( energyValues )
        MOV     A,R2
        ORL     A,?V0 + 1
        JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_2
//  809     {
//  810       uint8 j = 0;
        MOV     R2,#0x0
//  811 
//  812       for ( i = 0; i < ED_SCAN_MAXCHANNELS; i++ )
        MOV     R1,#0x0
//  813       {
//  814         if ( ( (uint32)1 << i ) & pEDScanConfirm->scannedChannels )
??ZDNwkMgr_BuildAndSendUpdateNotify_3:
        MOV     ?V0 + 4,#0x1
        MOV     ?V0 + 5,#0x0
        MOV     ?V0 + 6,#0x0
        MOV     ?V0 + 7,#0x0
        MOV     A,R1
        MOV     R0,#?V0 + 4
        LCALL   ?L_SHL
        MOV     DPL,?V0 + 10
        MOV     DPH,?V0 + 11
        MOV     R0,#?V0 + 4
        LCALL   ?L_AND_X
        MOV     A,?V0 + 4
        ORL     A,?V0 + 5
        ORL     A,?V0 + 6
        ORL     A,?V0 + 7
        JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_4
//  815           energyValues[j++] = pEDScanConfirm->energyDetectList[i];
        MOV     ?V0 + 4,R1
        MOV     A,?V0 + 12
        ADD     A,?V0 + 4
        MOV     DPL,A
        MOV     A,?V0 + 13
        LCALL   ??Subroutine10_0 & 0xFFFF
//  816       }
??CrossCallReturnLabel_8:
        PUSH    A
          CFI CFA_SP SP+-1
        MOV     ?V0 + 4,R2
        MOV     A,?V0 + 0
        ADD     A,?V0 + 4
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        POP     A
          CFI CFA_SP SP+0
        MOVX    @DPTR,A
        INC     R2
??ZDNwkMgr_BuildAndSendUpdateNotify_4:
        INC     R1
        MOV     A,R1
        CLR     C
        SUBB    A,#0x1b
        JC      ??ZDNwkMgr_BuildAndSendUpdateNotify_3
//  817     }
//  818   }
//  819     
//  820   // Send a Management Network Update notify back
//  821   ZDP_MgmtNwkUpdateNotify( TransSeq, dstAddr, pEDScanConfirm->status, 
//  822                            pEDScanConfirm->scannedChannels,
//  823                            totalTransmissions, txFailures,
//  824                            listCount, energyValues, txOptions, false );
??ZDNwkMgr_BuildAndSendUpdateNotify_2:
        ; Setup parameters for call to function ZDP_MgmtNwkUpdateNotify
        MOV     ?V0 + 4,#0x0
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 26)
        MOV     A,?V0 + 9
        MOV     ?V0 + 4,A
        MOV     R0,#?V0 + 4
        LCALL   ?PUSH_XSTACK_I_ONE
          CFI CFA_XSP16 add(XSP16, 27)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 29)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 31)
        MOV     ?V0 + 2,R6
        MOV     ?V0 + 3,R7
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
          CFI CFA_XSP16 add(XSP16, 33)
        MOV     DPL,?V0 + 10
        MOV     DPH,?V0 + 11
        LCALL   ?PUSH_XSTACK8_X_FOUR
          CFI CFA_XSP16 add(XSP16, 37)
        MOV     R5,?V0 + 8
        MOV     DPL,?V0 + 12
        MOV     DPH,?V0 + 13
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
        MOV     A,#0xc
        LCALL   ?XSTACK_DISP0_8
        MOVX    A,@DPTR
        MOV     R2,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R3,A
        MOV     R1,?V0 + 14
        LCALL   ??ZDP_MgmtNwkUpdateNotify?relay
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 25)
//  825   if ( energyValues )
        MOV     A,?V0 + 0
        ORL     A,?V0 + 1
        JZ      ??ZDNwkMgr_BuildAndSendUpdateNotify_5
//  826     osal_mem_free( energyValues );
        ; Setup parameters for call to function osal_mem_free
        MOV     R2,?V0 + 0
        MOV     R3,?V0 + 1
        LCALL   ??osal_mem_free?relay
//  827 }
??ZDNwkMgr_BuildAndSendUpdateNotify_5:
        MOV     A,#0x2
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 23)
        MOV     R7,#0xf
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock50
//  828 
//  829 #if defined ( NWK_MANAGER )
//  830 /*********************************************************************
//  831  * @fn      NwkMgr_SetNwkManager
//  832  *
//  833  * @brief   Set the local device as the Network Manager
//  834  *
//  835  * @param   none
//  836  *
//  837  * @return  none
//  838  */
//  839 void NwkMgr_SetNwkManager( void )
//  840 {
//  841   if ( zgNwkMgrMode == ZDNWKMGR_ENABLE )
//  842   {
//  843     // We're the Network Manager. Set our address as the Network Manager Address
//  844     ZDNwkMgr_SetNwkManagerAddr( _NIB.nwkDevAddress );
//  845     
//  846     // Set the Network Manager bit of the Server Mask
//  847     ZDO_Config_Node_Descriptor.ServerMask |= NETWORK_MANAGER;
//  848   }
//  849 }
//  850 #endif // NWK_MANAGER
//  851 
//  852 /*********************************************************************
//  853  * @fn      ZDApp_SetNwkManagerAddr()
//  854  *
//  855  * @brief   Sets the nwkManagerAddr in NIB.
//  856  *
//  857  * @param   nwkManagerAddr
//  858  *
//  859  * @return  none
//  860  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  861 void ZDNwkMgr_SetNwkManagerAddr( uint16 nwkManagerAddr )
ZDNwkMgr_SetNwkManagerAddr:
          CFI Block cfiBlock51 Using cfiCommon0
          CFI Function ZDNwkMgr_SetNwkManagerAddr
        CODE
//  862 {
        FUNCALL ZDNwkMgr_SetNwkManagerAddr, ZDApp_NwkStateUpdateCB
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  863   if ( _NIB.nwkManagerAddr != nwkManagerAddr )
        MOV     DPTR,#_NIB + 105
        MOVX    A,@DPTR
        XRL     A,R2
        JNZ     ??ZDNwkMgr_SetNwkManagerAddr_0
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,R3
??ZDNwkMgr_SetNwkManagerAddr_0:
        JZ      ??ZDNwkMgr_SetNwkManagerAddr_1
//  864   {
//  865     // Update the Network Manager Address
//  866     _NIB.nwkManagerAddr = nwkManagerAddr;
        MOV     DPTR,#_NIB + 105
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
//  867   
//  868     // Our Network Manger Address has been changed -- notify to save info into NV
//  869     ZDApp_NwkStateUpdateCB();
        ; Setup parameters for call to function ZDApp_NwkStateUpdateCB
        LCALL   ??ZDApp_NwkStateUpdateCB?relay
          CFI EndBlock cfiBlock51
//  870   }
//  871 }
??ZDNwkMgr_SetNwkManagerAddr_1:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiBlock52 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock52
//  872 
//  873 /*********************************************************************
//  874  * @fn          ZDNwkMgr_ReportChannelInterference
//  875  *
//  876  * @brief       This function builds a Channel Interference detection
//  877  *              message and then forwards it to the Network Manager.
//  878  *
//  879  * @param       chanInterference
//  880  *
//  881  * @return      none
//  882  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  883 void ZDNwkMgr_ReportChannelInterference(  NLME_ChanInterference_t *chanInterference  )
ZDNwkMgr_ReportChannelInterference:
          CFI Block cfiBlock53 Using cfiCommon0
          CFI Function ZDNwkMgr_ReportChannelInterference
        CODE
//  884 {
        FUNCALL ZDNwkMgr_ReportChannelInterference, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_ReportChannelInterference, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
//  885   ZDNwkMgr_ChanInterference_t *pChanInterference;
//  886 
//  887   // Send Channel Interference message to the Network Manager task
//  888   pChanInterference = (ZDNwkMgr_ChanInterference_t *)osal_msg_allocate( sizeof( ZDNwkMgr_ChanInterference_t ) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x6
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
//  889   if ( pChanInterference )
        MOV     A,R2
        ORL     A,R3
        JZ      ??ZDNwkMgr_ReportChannelInterference_0
//  890   {
//  891     pChanInterference->hdr.event = NM_CHANNEL_INTERFERE;
        MOV     DPL,R2
        MOV     DPH,R3
        MOV     A,#0x31
        MOVX    @DPTR,A
//  892       
//  893     // Build the structure
//  894     pChanInterference->totalTransmissions = chanInterference->totalTransmissions;
        MOV     DPL,R6
        MOV     DPH,R7
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_0:
        LCALL   ??Subroutine12_0 & 0xFFFF
//  895     pChanInterference->txFailures = chanInterference->txFailures;
??CrossCallReturnLabel_13:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_1:
        INC     DPTR
        INC     DPTR
        LCALL   ??Subroutine12_0 & 0xFFFF
//  896               
//  897     osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pChanInterference );
??CrossCallReturnLabel_14:
        ; Setup parameters for call to function osal_msg_send
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_send?relay
//  898   }
//  899 }
??ZDNwkMgr_ReportChannelInterference_0:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock53

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond54 Using cfiCommon0
          CFI Function ZDNwkMgr_ReportChannelInterference
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function ZDNwkMgr_ReportChannelInterference
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond55) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond55) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond55) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond55) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond55) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond55) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond55) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond55) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond55) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond55) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond55) CFA_SP SP+0
          CFI (cfiCond55) CFA_XSP16 add(XSP16, 10)
          CFI Block cfiPicker56 Using cfiCommon1
          CFI (cfiPicker56) NoFunction
          CFI (cfiPicker56) Picker
        LCALL   ??Subroutine13_0 & 0xFFFF
??CrossCallReturnLabel_19:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        RET
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiPicker56
//  900 
//  901 /*********************************************************************
//  902  * @fn          ZDNwkMgr_EDScanConfirmCB
//  903  *
//  904  * @brief       Handle Energy Scan confirm callback
//  905  *
//  906  * @param       scannedChannels  - scanned channels
//  907  * @param       energyDetectList - measured energy for channels
//  908  *
//  909  * @return      none
//  910  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  911 void ZDNwkMgr_EDScanConfirmCB( NLME_EDScanConfirm_t *EDScanConfirm )
ZDNwkMgr_EDScanConfirmCB:
          CFI Block cfiBlock57 Using cfiCommon0
          CFI Function ZDNwkMgr_EDScanConfirmCB
        CODE
//  912 {
        FUNCALL ZDNwkMgr_EDScanConfirmCB, osal_msg_allocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_EDScanConfirmCB, osal_memcpy
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 15, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 15, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ZDNwkMgr_EDScanConfirmCB, osal_msg_send
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  913   ZDNwkMgr_EDScanConfirm_t *pEDScanConfirm;
//  914 
//  915   // Send ED Confirm to the Network Manager task
//  916   pEDScanConfirm = (ZDNwkMgr_EDScanConfirm_t *)osal_msg_allocate( sizeof( ZDNwkMgr_EDScanConfirm_t ) );
        ; Setup parameters for call to function osal_msg_allocate
        MOV     R2,#0x22
        MOV     R3,#0x0
        LCALL   ??osal_msg_allocate?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
//  917   if ( pEDScanConfirm )
        MOV     A,R6
        ORL     A,R7
        JZ      ??ZDNwkMgr_EDScanConfirmCB_0
//  918   {
//  919     pEDScanConfirm->hdr.event = NM_ED_SCAN_CONFIRM;
        MOV     DPL,R6
        MOV     DPH,R7
        MOV     A,#0x32
        MOVX    @DPTR,A
//  920       
//  921     // Build the structure
//  922     pEDScanConfirm->status = EDScanConfirm->status;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        MOVX    A,@DPTR
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    @DPTR,A
//  923     pEDScanConfirm->scannedChannels = EDScanConfirm->scannedChannels;
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        LCALL   ?XLOAD_R2345
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        LCALL   ?XSTORE_R2345
//  924     osal_memcpy( pEDScanConfirm->energyDetectList, EDScanConfirm->energyDetectList, ED_SCAN_MAXCHANNELS );
        ; Setup parameters for call to function osal_memcpy
        MOV     DPL,?V0 + 0
        MOV     DPH,?V0 + 1
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_THREE
          CFI CFA_XSP16 add(XSP16, 15)
        MOV     R4,#0x1b
        MOV     R5,#0x0
        MOV     A,R6
        ADD     A,#0x7
        MOV     R2,A
        MOV     A,R7
        ADDC    A,#0x0
        MOV     R3,A
        LCALL   ??osal_memcpy?relay
        MOV     A,#0x3
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 12)
//  925       
//  926     osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pEDScanConfirm );
        ; Setup parameters for call to function osal_msg_send
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        MOV     DPTR,#ZDNwkMgr_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_send?relay
//  927   }
//  928 }
??ZDNwkMgr_EDScanConfirmCB_0:
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock57
//  929 
//  930 /*********************************************************************
//  931  * @fn      ZDNwkMgr_ProcessDataConfirm
//  932  *
//  933  * @brief   Process received Confirmation for Mgmt NWK Update Notify message
//  934  *
//  935  * @param   none
//  936  *
//  937  * @return  none
//  938  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  939 void ZDNwkMgr_ProcessDataConfirm( afDataConfirm_t *afDataConfirm )
ZDNwkMgr_ProcessDataConfirm:
          CFI Block cfiBlock58 Using cfiCommon0
          CFI Function ZDNwkMgr_ProcessDataConfirm
        CODE
//  940 {
        FUNCALL ZDNwkMgr_ProcessDataConfirm, nwkTransmissionFailures
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  941   if (   ZDNwkMgr_WaitingForNotifyConfirm  && 
//  942        ( afDataConfirm->transID == 0 )     && 
//  943        ( afDataConfirm->hdr.status == ZSuccess ) )
        MOV     DPTR,#ZDNwkMgr_WaitingForNotifyConfirm
        MOVX    A,@DPTR
        JZ      ??ZDNwkMgr_ProcessDataConfirm_0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDNwkMgr_ProcessDataConfirm_0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??ZDNwkMgr_ProcessDataConfirm_0
//  944   {
//  945     // The Mgmt NWK Update Notify was sent as an APS Unicast with  
//  946     // acknowledgement and once the acknowledgment is received the 
//  947     // total transmit and transmit failure counters are reset to zero.  
//  948     _NIB.nwkTotalTransmissions = 0;
        MOV     DPTR,#_NIB + 107
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  949     nwkTransmissionFailures( TRUE );
        ; Setup parameters for call to function nwkTransmissionFailures
        MOV     R1,#0x1
        LCALL   ??nwkTransmissionFailures?relay
//  950     
//  951     ZDNwkMgr_WaitingForNotifyConfirm = FALSE;
        MOV     DPTR,#ZDNwkMgr_WaitingForNotifyConfirm
        CLR     A
        MOVX    @DPTR,A
//  952   }
//  953 }
??ZDNwkMgr_ProcessDataConfirm_0:
        LJMP    ?Subroutine2 & 0xFFFF
          CFI EndBlock cfiBlock58

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_Init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDNwkMgr_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_event_loop?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDNwkMgr_event_loop

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_ProcessMgmtNwkUpdateReq?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDNwkMgr_ProcessMgmtNwkUpdateReq

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_ProcessServerDiscRsp?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDNwkMgr_ProcessServerDiscRsp

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_CheckForChannelInterference?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDNwkMgr_CheckForChannelInterference

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_BuildAndSendUpdateNotify?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDNwkMgr_BuildAndSendUpdateNotify

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_SetNwkManagerAddr?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDNwkMgr_SetNwkManagerAddr

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_ReportChannelInterference?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDNwkMgr_ReportChannelInterference

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_EDScanConfirmCB?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDNwkMgr_EDScanConfirmCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ZDNwkMgr_ProcessDataConfirm?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ZDNwkMgr_ProcessDataConfirm

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant ": ">`:
        DB ": "

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_32:
        DD 50

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_2108800:
        DD 34637824

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_ea60:
        DD 60000

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0

        END
//  954 
//  955 /*********************************************************************
//  956  * PAN ID Conflict Routines
//  957  */
//  958 #if defined ( NWK_MANAGER )
//  959 /*********************************************************************
//  960  * @fn          ZDNwkMgr_NetworkReportCB
//  961  *
//  962  * @brief       Handle the Network Report Command
//  963  *
//  964  * @param       srcAddr     - Source Address of the message.
//  965  * @param       status      - ZSuccess.
//  966  * @param       serverMask  - Bit mask of services matching the req serverMask.
//  967  * @param       securityUse -
//  968  *
//  969  * @return      none
//  970  */
//  971 void ZDNwkMgr_NetworkReportCB( ZDNwkMgr_NetworkReport_t *pReport )
//  972 { 
//  973   // Send Network Report message to the Network Manager task
//  974   osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pReport );
//  975 }
//  976 
//  977 /*********************************************************************
//  978  * @fn          ZDNwkMgr_NetworkUpdateCB
//  979  *
//  980  * @brief       Handle the Network Update Command
//  981  *
//  982  * @param       srcAddr     - Source Address of the message.
//  983  * @param       status      - ZSuccess.
//  984  * @param       serverMask  - Bit mask of services matching the req serverMask.
//  985  * @param       securityUse -
//  986  *
//  987  * @return      none
//  988  */
//  989 void ZDNwkMgr_NetworkUpdateCB( ZDNwkMgr_NetworkUpdate_t *pUpdate )
//  990 {
//  991   // Send Network Update message to the Network Manager task
//  992   osal_msg_send( ZDNwkMgr_TaskID, (uint8 *)pUpdate );
//  993 }
//  994 
//  995 /*********************************************************************
//  996  * @fn      ZDNwkMgr_ProcessNetworkReport
//  997  *
//  998  * @brief   Process the incoming Network Report message
//  999  *
// 1000  * @param   pNetworkReport - Structure containing Network Report message
// 1001  *
// 1002  * @return  none
// 1003  */
// 1004 void ZDNwkMgr_ProcessNetworkReport( ZDNwkMgr_NetworkReport_t *pNetworkReport )
// 1005 {
// 1006   uint8 i;
// 1007   uint16 newPID;
// 1008   uint8 unique = TRUE;
// 1009 
// 1010   if ( pNetworkReport->reportType == NWKREPORT_PANID_CONFLICT )
// 1011   {
// 1012     if ( ZDNwkMgr_PanIdUpdateInProgress == FALSE )
// 1013     {
// 1014       do
// 1015       {
// 1016         // select a new PAN ID
// 1017         newPID = (uint16)osal_rand();
// 1018       
// 1019         // Make sure that the chosen PAN ID is not already in use in the
// 1020         // local neighborhood and also not contained within the Report 
// 1021         // Information field of the Network Report Command frame
// 1022         for ( i = 0; i < pNetworkReport->reportInfoCnt; i++ )
// 1023         {
// 1024           if ( pNetworkReport->panIDs[i] == newPID )
// 1025           {
// 1026             unique = FALSE;
// 1027             break;
// 1028           }
// 1029         }
// 1030       } while ( !unique );
// 1031          
// 1032       // Send out a Network Update command.
// 1033       NLME_SendNetworkUpdate( NWK_BROADCAST_SHORTADDR, NWKUPDATE_PANID_UPDATE,
// 1034                               _NIB.extendedPANID, _NIB.nwkUpdateId+1, newPID );
// 1035     
// 1036       ZDNwkMgr_PanIdUpdateInProgress = TRUE;
// 1037     }
// 1038   }
// 1039 }
// 1040 
// 1041 /*********************************************************************
// 1042  * @fn      ZDNwkMgr_ProcessNetworkUpdate
// 1043  *
// 1044  * @brief   Process the incoming Network Update message
// 1045  *
// 1046  * @param   pNetworkReport - Structure containing Network Update message
// 1047  *
// 1048  * @return  none
// 1049  */
// 1050 void ZDNwkMgr_ProcessNetworkUpdate( ZDNwkMgr_NetworkUpdate_t *pNetworkUpdate )
// 1051 {
// 1052   if ( pNetworkUpdate->updateType == NWKUPDATE_PANID_UPDATE )
// 1053   { 
// 1054     // Our PAN ID has been changed -- notify to save info into NV
// 1055     ZDApp_NwkStateUpdateCB();
// 1056     
// 1057     ZDNwkMgr_PanIdUpdateInProgress = FALSE;
// 1058   }
// 1059 }
// 1060 #endif // NWK_MANAGER
// 1061 
// 1062 
// 1063 /*********************************************************************
// 1064 *********************************************************************/
// 
// 2 023 bytes in segment BANKED_CODE
//    60 bytes in segment BANK_RELAYS
//    85 bytes in segment XDATA_ROM_C
//    39 bytes in segment XDATA_Z
// 
// 2 083 bytes of CODE  memory
//    69 bytes of CONST memory (+ 16 bytes shared)
//    39 bytes of XDATA memory
//
//Errors: none
//Warnings: none
