###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.20.2.41139 for 8051             27/May/2014  19:13:59 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Components\stack\zdo\ZDObject.c              #
#    Command line       =  -f "D:\Texas Instruments\Z-Stack Lighting          #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ        #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f "D:\Texas         #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wConfig.cfg" (-DZIGBEEPRO       #
#                          -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100    #
#                          -DREJOIN_POLL_RATE=440) -f "D:\Texas               #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\Tools\CC2530DB\f8wZCL.cfg" "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Components\stack\zdo\ZDObject.c" -D          #
#                          FEATURE_GREEN_POWER -D SECURE=1 -D                 #
#                          TC_LINKKEY_JOIN -D ZDSECMGR_TC_DEVICE_MAX=2 -D     #
#                          NV_RESTORE -D HOLD_AUTO_START -D INTER_PAN -D      #
#                          LCD_SUPPORTED=DEBUG -D ZCL_BASIC -D ZCL_READ -D    #
#                          ZCL_WRITE -D ZCL_IDENTIFY -D ZCL_ON_OFF -D         #
#                          ZCL_SCENES -D ZCL_GROUPS -D                        #
#                          ZCL_LIGHT_LINK_ENHANCE -D ZCL_LEVEL_CTRL -D        #
#                          ZCL_COLOR_CTRL -D MAX_CHANNELS_24GHZ=0x02108800    #
#                          -D xPWM_ALT2 -D xTHERMAL_SHUTDOWN -D               #
#                          ZLL_1_0_HUB_COMPATIBILITY -D DALI_LIGHT -lC        #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Zlight  #
#                          - Router\List\" -lA "D:\Texas Instruments\Z-Stack  #
#                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC253 #
#                          x\Zlight - Router\List\" --diag_suppress           #
#                          Pe001,Pa010 -o "D:\Texas Instruments\Z-Stack       #
#                          Lighting 1.0.2\Projects\zstack\ZLL\SampleApp\CC253 #
#                          x\Zlight - Router\Obj\" -e --debug --core=plain    #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I "D:\Texas                  #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\" -I    #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\Sour #
#                          ce\" -I "D:\Texas Instruments\Z-Stack Lighting     #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\S #
#                          ource\" -I "D:\Texas Instruments\Z-Stack Lighting  #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\HomeAutomation\Source\" -I "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\HomeAutomation\SampleLight\Source\" -I           #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\ZMain\TI2530DB\" -I "D:\Texas                    #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\hal\include\" -I "D:\Texas      #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\hal\target\CC2530PMP4712\" -I   #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\include\" -I "D:\Texas      #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\high_level\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\" -I        #
#                          "D:\Texas Instruments\Z-Stack Lighting             #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\single_chip #
#                          \" -I "D:\Texas Instruments\Z-Stack Lighting       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\mt\" -I "D:\Texas               #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\osal\include\" -I "D:\Texas     #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\services\saddr\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\services\sdata\" -I "D:\Texas   #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\af\" -I "D:\Texas         #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\nwk\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sapi\" -I "D:\Texas       #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sec\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\sys\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\zcl\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\stack\zdo\" -I "D:\Texas        #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\zmac\" -I "D:\Texas             #
#                          Instruments\Z-Stack Lighting                       #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\..\..\. #
#                          .\..\..\Components\zmac\f8w\" -Ohz                 #
#                          --require_prototypes                               #
#    List file          =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Zlight  #
#                          - Router\List\ZDObject.lst                         #
#    Object file        =  D:\Texas Instruments\Z-Stack Lighting              #
#                          1.0.2\Projects\zstack\ZLL\SampleApp\CC253x\Zlight  #
#                          - Router\Obj\ZDObject.r51                          #
#                                                                             #
#                                                                             #
###############################################################################

D:\Texas Instruments\Z-Stack Lighting 1.0.2\Components\stack\zdo\ZDObject.c
      1          /**************************************************************************************************
      2            Filename:       ZDObject.c
      3            Revised:        $Date: 2013-10-08 11:15:50 -0700 (Tue, 08 Oct 2013) $
      4            Revision:       $Revision: 35605 $
      5          
      6            Description:    This is the Zigbee Device Object.
      7          
      8          
      9            Copyright 2004-2013 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License"). You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product. Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41           * INCLUDES
     42           */
     43          #include "ZComDef.h"
     44          #include "OSAL.h"
     45          #include "OSAL_Nv.h"
     46          #include "rtg.h"
     47          #include "NLMEDE.h"
     48          #include "nwk_globals.h"
     49          #include "APS.h"
     50          #include "APSMEDE.h"
     51          #include "AssocList.h"
     52          #include "BindingTable.h"
     53          #include "AddrMgr.h"
     54          #include "AF.h"
     55          #include "ZDObject.h"
     56          #include "ZDProfile.h"
     57          #include "ZDConfig.h"
     58          #include "ZDSecMgr.h"
     59          #include "ZDApp.h"
     60          #include "nwk_util.h"   // NLME_IsAddressBroadcast()
     61          #include "ZGlobals.h"
     62          #if defined MT_ZDO_CB_FUNC
     63          #include "MT.h"
     64          #endif
     65          
     66          #if defined( LCD_SUPPORTED )
     67            #include "OnBoard.h"
     68          #endif
     69          
     70          /* HAL */
     71          //#include "hal_lcd.h"
     72          #include "hal_oled.h"
     73          
     74          /*********************************************************************
     75           * MACROS
     76           */
     77          
     78          /*********************************************************************
     79           * CONSTANTS
     80           */
     81          // NLME Stub Implementations
     82          #define ZDO_ProcessMgmtPermitJoinTimeout NLME_PermitJoiningTimeout
     83          
     84          /*********************************************************************
     85           * TYPEDEFS
     86           */
     87          #if defined ( REFLECTOR )
     88          typedef struct
     89          {
     90            byte SrcTransSeq;
     91            zAddrType_t SrcAddr;
     92            uint16 LocalCoordinator;
     93            byte epIntf;
     94            uint16 ProfileID;
     95            byte numInClusters;
     96            uint16 *inClusters;
     97            byte numOutClusters;
     98            uint16 *outClusters;
     99            byte SecurityUse;
    100            byte status;
    101          } ZDO_EDBind_t;
    102          #endif // defined ( REFLECTOR )
    103          
    104          enum
    105          {
    106            ZDMATCH_INIT,           // Initialized
    107            ZDMATCH_WAIT_REQ,       // Received first request, waiting for second
    108            ZDMATCH_SENDING_BINDS   // Received both requests, sending unbind/binds
    109          };
    110          
    111          enum
    112          {
    113            ZDMATCH_SENDING_NOT,
    114            ZDMATCH_SENDING_UNBIND,
    115            ZDMATCH_SENDING_BIND
    116          };
    117          
    118          /*********************************************************************
    119           * GLOBAL VARIABLES
    120           */
    121          
    122          /*********************************************************************
    123           * EXTERNAL VARIABLES
    124           */
    125          
    126          /*********************************************************************
    127           * EXTERNAL FUNCTIONS
    128           */
    129          
    130          /*********************************************************************
    131           * LOCAL VARIABLES
    132           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          static uint16 ZDOBuildBuf[26];  // temp area to build data without allocation
   \                     ZDOBuildBuf:
   \   000000                DS 52
   \   000034                REQUIRE __INIT_XDATA_Z
    134          
    135          #if defined ( REFLECTOR )

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    136          static ZDO_EDBind_t *ZDO_EDBind;     // Null when not used
   \                     ZDO_EDBind:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    137          #endif
    138          
    139          #if defined ( MANAGED_SCAN )
    140            uint32 managedScanNextChannel = 0;
    141            uint32 managedScanChannelMask = 0;
    142            uint8  managedScanTimesPerChannel = 0;
    143          #endif
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          ZDMatchEndDeviceBind_t *matchED = (ZDMatchEndDeviceBind_t *)NULL;
   \                     matchED:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    146          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          uint32 apsChannelMask = 0;
   \                     apsChannelMask:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    148          
    149          /*********************************************************************
    150           * LOCAL FUNCTIONS
    151           */
    152          static void ZDODeviceSetup( void );
    153          #if defined ( MANAGED_SCAN )
    154            static void ZDOManagedScan_Next( void );
    155          #endif
    156          #if defined ( REFLECTOR )
    157            static void ZDO_RemoveEndDeviceBind( void );
    158            static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse );
    159          #endif
    160          #if ( ZG_BUILD_COORDINATOR_TYPE )
    161            static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    162                                                 byte numList2, uint16 *list2, uint16 *pMatches );
    163            static void ZDO_RemoveMatchMemory( void );
    164            static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq );
    165            static void ZDO_EndDeviceBindMatchTimeoutCB( void );
    166          #endif
    167          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList );
    168          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId);
    169          
    170          /*********************************************************************
    171           * @fn          ZDO_Init
    172           *
    173           * @brief       ZDObject and ZDProfile initialization.
    174           *
    175           * @param       none
    176           *
    177           * @return      none
    178           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    179          void ZDO_Init( void )
   \                     ZDO_Init:
    180          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    181            // Initialize ZD items
    182            #if defined ( REFLECTOR )
    183            ZDO_EDBind = NULL;
   \   000004   90....       MOV     DPTR,#ZDO_EDBind
   \   000007   E4           CLR     A
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   F0           MOVX    @DPTR,A
    184            #endif
    185          
    186            // Initialize default ZDO_UseExtendedPANID to the APS one.
    187            osal_cpyExtAddr( ZDO_UseExtendedPANID, AIB_apsUseExtendedPANID );
   \   00000B                ; Setup parameters for call to function sAddrExtCpy
   \   00000B   7C..         MOV     R4,#AIB_apsUseExtendedPANID & 0xff
   \   00000D   7D..         MOV     R5,#(AIB_apsUseExtendedPANID >> 8) & 0xff
   \   00000F   7A..         MOV     R2,#ZDO_UseExtendedPANID & 0xff
   \   000011   7B..         MOV     R3,#(ZDO_UseExtendedPANID >> 8) & 0xff
   \   000013   12....       LCALL   ??sAddrExtCpy?relay
    188          
    189            // Setup the device - type of device to create.
    190            ZDODeviceSetup();
   \   000016                ; Setup parameters for call to function APS_ReflectorInit
   \   000016   12....       LCALL   ??APS_ReflectorInit?relay
   \   000019                ; Setup parameters for call to function NLME_DeviceJoiningInit
   \   000019   12....       LCALL   ??NLME_DeviceJoiningInit?relay
    191          }
   \   00001C                REQUIRE ?Subroutine0
   \   00001C                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
    192          
    193          #if defined ( MANAGED_SCAN )
    194          /*********************************************************************
    195           * @fn      ZDOManagedScan_Next()
    196           *
    197           * @brief   Setup a managed scan.
    198           *
    199           * @param   none
    200           *
    201           * @return  none
    202           */
    203          static void ZDOManagedScan_Next( void )
    204          {
    205            // Is it the first time
    206            if ( managedScanNextChannel == 0 && managedScanTimesPerChannel == 0 )
    207            {
    208              // Setup the defaults
    209              managedScanNextChannel  = 1;
    210          
    211              while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    212                managedScanNextChannel <<= 1;
    213          
    214              managedScanChannelMask = managedScanNextChannel;
    215              managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    216            }
    217            else
    218            {
    219              // Do we need to go to the next channel
    220              if ( managedScanTimesPerChannel == 0 )
    221              {
    222                // Find next active channel
    223                managedScanChannelMask  = managedScanNextChannel;
    224                managedScanTimesPerChannel = MANAGEDSCAN_TIMES_PRE_CHANNEL;
    225              }
    226              else
    227              {
    228                managedScanTimesPerChannel--;
    229          
    230                if ( managedScanTimesPerChannel == 0 )
    231                {
    232                  managedScanNextChannel  <<= 1;
    233                  while( managedScanNextChannel && (zgDefaultChannelList & managedScanNextChannel) == 0 )
    234                    managedScanNextChannel <<= 1;
    235          
    236                  if ( managedScanNextChannel == 0 )
    237                    zdoDiscCounter  = NUM_DISC_ATTEMPTS + 1; // Stop
    238                }
    239              }
    240            }
    241          }
    242          #endif // MANAGED_SCAN
    243          
    244          /*********************************************************************
    245           * @fn      ZDODeviceSetup()
    246           *
    247           * @brief   Call set functions depending on the type of device compiled.
    248           *
    249           * @param   none
    250           *
    251           * @return  none
    252           */
    253          static void ZDODeviceSetup( void )
    254          {
    255            if ( ZG_BUILD_COORDINATOR_TYPE )
    256            {
    257              NLME_CoordinatorInit();
    258            }
    259          
    260          #if defined ( REFLECTOR )
    261            APS_ReflectorInit();
    262          #endif
    263          
    264            if ( ZG_BUILD_JOINING_TYPE )
    265            {
    266              NLME_DeviceJoiningInit();
    267            }
    268          }
    269          
    270          /*********************************************************************
    271           * @fn          ZDO_StartDevice
    272           *
    273           * @brief       This function starts a device in a network.
    274           *
    275           * @param       logicalType     - Device type to start
    276           *              startMode       - indicates mode of device startup
    277           *              beaconOrder     - indicates time betwen beacons
    278           *              superframeOrder - indicates length of active superframe
    279           *
    280           * @return      none
    281           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    282          void ZDO_StartDevice( byte logicalType, devStartModes_t startMode, byte beaconOrder, byte superframeOrder )
   \                     ZDO_StartDevice:
    283          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 11
   \   000005   74F5         MOV     A,#-0xb
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   89..         MOV     ?V0 + 1,R1
   \   00000C   8A..         MOV     ?V0 + 0,R2
    284            ZStatus_t ret;
    285          #if defined ( ZIGBEE_FREQ_AGILITY )
    286            static uint8 discRetries = 0;
    287          #endif
    288          #if defined ( ZIGBEE_COMMISSIONING )
    289            static uint8 scanCnt = 0;
    290          #endif
    291          
    292            ret = ZUnsupportedMode;
    293          
    294            if ( ZG_BUILD_COORDINATOR_TYPE && logicalType == NODETYPE_COORDINATOR )
    295            {
    296              if ( startMode == MODE_HARD )
    297              {
    298                devState = DEV_COORD_STARTING;
    299                ret = NLME_NetworkFormationRequest( zgConfigPANID, zgApsUseExtendedPANID, zgDefaultChannelList,
    300                                                    zgDefaultStartingScanDuration, beaconOrder,
    301                                                    superframeOrder, false );
    302              }
    303              else if ( startMode == MODE_RESUME )
    304              {
    305                // Just start the coordinator
    306                devState = DEV_COORD_STARTING;
    307                ret = NLME_StartRouterRequest( beaconOrder, beaconOrder, false );
    308              }
    309              else
    310              {
    311          #if defined( LCD_SUPPORTED )
    312                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    313          #endif
    314              }
    315            }
    316          
    317            if ( ZG_BUILD_JOINING_TYPE && (logicalType == NODETYPE_ROUTER || logicalType == NODETYPE_DEVICE) )
   \   00000E   7401         MOV     A,#0x1
   \   000010   65..         XRL     A,?V0 + 1
   \   000012   6006         JZ      ??ZDO_StartDevice_0
   \   000014   7402         MOV     A,#0x2
   \   000016   65..         XRL     A,?V0 + 1
   \   000018   704A         JNZ     ??ZDO_StartDevice_1
    318            {
    319              if ( (startMode == MODE_JOIN) || (startMode == MODE_REJOIN) )
   \                     ??ZDO_StartDevice_0:
   \   00001A   EA           MOV     A,R2
   \   00001B   6006         JZ      ??ZDO_StartDevice_2
   \   00001D   7403         MOV     A,#0x3
   \   00001F   65..         XRL     A,?V0 + 0
   \   000021   705D         JNZ     ??ZDO_StartDevice_3
    320              {
    321                devState = DEV_NWK_DISC;
   \                     ??ZDO_StartDevice_2:
   \   000023   90....       MOV     DPTR,#devState
   \   000026   7402         MOV     A,#0x2
   \   000028   12....       LCALL   ?Subroutine40 & 0xFFFF
    322          
    323            #if defined( MANAGED_SCAN )
    324                ZDOManagedScan_Next();
    325                ret = NLME_NetworkDiscoveryRequest( managedScanChannelMask, BEACON_ORDER_15_MSEC );
    326            #else
    327                ret = NLME_NetworkDiscoveryRequest( zgDefaultChannelList, zgDefaultStartingScanDuration );
   \                     ??CrossCallReturnLabel_71:
   \   00002B   12....       LCALL   ?XLOAD_R2345
   \   00002E   12....       LCALL   ??NLME_NetworkDiscoveryRequest?relay
    328              #if defined ( ZIGBEE_FREQ_AGILITY )
    329                if ( !( ZDO_Config_Node_Descriptor.CapabilityFlags & CAPINFO_RCVR_ON_IDLE ) &&
    330                      ( ret == ZSuccess ) && ( ++discRetries == 4 ) )
   \   000031   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 2
   \   000034   E0           MOVX    A,@DPTR
   \   000035   A2E3         MOV     C,0xE0 /* A   */.3
   \   000037   4010         JC      ??CrossCallReturnLabel_42
   \   000039   E9           MOV     A,R1
   \   00003A   700D         JNZ     ??CrossCallReturnLabel_42
   \   00003C   90....       MOV     DPTR,#??discRetries
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   04           INC     A
   \   000041   F0           MOVX    @DPTR,A
   \   000042   6404         XRL     A,#0x4
   \   000044   7003         JNZ     ??CrossCallReturnLabel_42
    331                {
    332                  // For devices with RxOnWhenIdle equals to FALSE, any network channel
    333                  // change will not be recieved. On these devices or routers that have
    334                  // lost the network, an active scan shall be conducted on the Default
    335                  // Channel list using the extended PANID to find the network. If the
    336                  // extended PANID isn't found using the Default Channel list, an scan
    337                  // should be completed using all channels.
    338                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
   \   000046   12....       LCALL   ?Subroutine29 & 0xFFFF
    339                }
    340              #endif // ZIGBEE_FREQ_AGILITY
    341              #if defined ( ZIGBEE_COMMISSIONING )
    342                if (startMode == MODE_REJOIN && scanCnt++ >= 5 )
   \                     ??CrossCallReturnLabel_42:
   \   000049   7403         MOV     A,#0x3
   \   00004B   65..         XRL     A,?V0 + 0
   \   00004D   7012         JNZ     ??CrossCallReturnLabel_43
   \   00004F   90....       MOV     DPTR,#??scanCnt
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F8           MOV     R0,A
   \   000054   7401         MOV     A,#0x1
   \   000056   28           ADD     A,R0
   \   000057   F0           MOVX    @DPTR,A
   \   000058   E8           MOV     A,R0
   \   000059   C3           CLR     C
   \   00005A   9405         SUBB    A,#0x5
   \   00005C   4003         JC      ??CrossCallReturnLabel_43
    343                {
    344                  // When ApsUseExtendedPanID is commissioned to a non zero value via
    345                  // application specific means, the device shall conduct an active scan
    346                  // on the Default Channel list and join the PAN with the same
    347                  // ExtendedPanID. If the PAN is not found, an scan should be completed
    348                  // on all channels.
    349                  // When devices rejoin the network and the PAN is not found from
    350                  zgDefaultChannelList = MAX_CHANNELS_24GHZ;
   \   00005E   12....       LCALL   ?Subroutine29 & 0xFFFF
    351                }
    352              #endif // ZIGBEE_COMMISSIONING
    353            #endif
    354              }
    355              else if ( startMode == MODE_RESUME )
    356              {
    357                if ( logicalType == NODETYPE_ROUTER )
    358                {
    359                  ZMacScanCnf_t scanCnf;
    360                  devState = DEV_NWK_ORPHAN;
    361          
    362                  /* if router and nvram is available, fake successful orphan scan */
    363                  scanCnf.hdr.Status = ZSUCCESS;
    364                  scanCnf.ScanType = ZMAC_ORPHAN_SCAN;
    365                  scanCnf.UnscannedChannels = 0;
    366                  scanCnf.ResultListSize = 0;
    367                  nwk_ScanJoiningOrphan(&scanCnf);
    368          
    369                  ret = ZSuccess;
    370                }
    371                else
    372                {
    373                  devState = DEV_NWK_ORPHAN;
    374                  ret = NLME_OrphanJoinRequest( zgDefaultChannelList,
    375                                                zgDefaultStartingScanDuration );
    376                }
    377              }
    378              else
    379              {
    380          #if defined( LCD_SUPPORTED )
    381                HalLcdWriteScreen( "StartDevice ERR", "MODE unknown" );
    382          #endif
    383              }
    384            }
    385          
    386            if ( ret != ZSuccess )
   \                     ??CrossCallReturnLabel_43:
   \   000061   E9           MOV     A,R1
   \   000062   6017         JZ      ??ZDO_StartDevice_4
    387            {
    388              osal_start_timerEx(ZDAppTaskID, ZDO_NETWORK_INIT, NWK_RETRY_DELAY );
   \                     ??ZDO_StartDevice_1:
   \   000064                ; Setup parameters for call to function osal_start_timerEx
   \   000064   90....       MOV     DPTR,#__Constant_3e8
   \   000067   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   00006A   7A01         MOV     R2,#0x1
   \   00006C   7B00         MOV     R3,#0x0
   \   00006E   90....       MOV     DPTR,#ZDAppTaskID
   \   000071   E0           MOVX    A,@DPTR
   \   000072   F9           MOV     R1,A
   \   000073   12....       LCALL   ??osal_start_timerEx?relay
   \   000076   7404         MOV     A,#0x4
   \   000078   12....       LCALL   ?DEALLOC_XSTACK8
    389            }
    390          }
   \                     ??ZDO_StartDevice_4:
   \   00007B   740B         MOV     A,#0xb
   \   00007D   02....       LJMP    ??Subroutine143_0 & 0xFFFF
   \                     ??ZDO_StartDevice_3:
   \   000080   7401         MOV     A,#0x1
   \   000082   65..         XRL     A,?V0 + 0
   \   000084   7042         JNZ     ??ZDO_StartDevice_5
   \   000086   7401         MOV     A,#0x1
   \   000088   65..         XRL     A,?V0 + 1
   \   00008A   90....       MOV     DPTR,#devState
   \   00008D   702C         JNZ     ??ZDO_StartDevice_6
   \   00008F   740A         MOV     A,#0xa
   \   000091   F0           MOVX    @DPTR,A
   \   000092   7401         MOV     A,#0x1
   \   000094   12....       LCALL   ?XSTACK_DISP0_8
   \   000097   E4           CLR     A
   \   000098   F0           MOVX    @DPTR,A
   \   000099   7402         MOV     A,#0x2
   \   00009B   12....       LCALL   ?XSTACK_DISP0_8
   \   00009E   7403         MOV     A,#0x3
   \   0000A0   F0           MOVX    @DPTR,A
   \   0000A1   04           INC     A
   \   0000A2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A5   E4           CLR     A
   \   0000A6   F0           MOVX    @DPTR,A
   \   0000A7   A3           INC     DPTR
   \   0000A8   F0           MOVX    @DPTR,A
   \   0000A9   A3           INC     DPTR
   \   0000AA   F0           MOVX    @DPTR,A
   \   0000AB   A3           INC     DPTR
   \   0000AC   F0           MOVX    @DPTR,A
   \   0000AD   7408         MOV     A,#0x8
   \   0000AF   12....       LCALL   ?XSTACK_DISP0_8
   \   0000B2   E4           CLR     A
   \   0000B3   12....       LCALL   ?Subroutine35 & 0xFFFF
   \                     ??CrossCallReturnLabel_60:
   \   0000B6   12....       LCALL   ??nwk_ScanJoiningOrphan?relay
   \   0000B9   80C0         SJMP    ??ZDO_StartDevice_4
   \                     ??ZDO_StartDevice_6:
   \   0000BB   740A         MOV     A,#0xa
   \   0000BD   12....       LCALL   ?Subroutine40 & 0xFFFF
   \                     ??CrossCallReturnLabel_72:
   \   0000C0   12....       LCALL   ?XLOAD_R2345
   \   0000C3   12....       LCALL   ??NLME_OrphanJoinRequest?relay
   \   0000C6   8099         SJMP    ??CrossCallReturnLabel_43
   \                     ??ZDO_StartDevice_5:
   \   0000C8                ; Setup parameters for call to function HalLcdWriteScreen
   \   0000C8   7C..         MOV     R4,#`?<Constant "MODE unknown">` & 0xff
   \   0000CA   7D..         MOV     R5,#(`?<Constant "MODE unknown">` >> 8) & 0xff
   \   0000CC   7A..         MOV     R2,#`?<Constant "StartDevice ERR">` & 0xff
   \   0000CE   7B..         MOV     R3,#(`?<Constant "StartDevice ERR">` >> 8) & 0xff
   \   0000D0   12....       LCALL   ??HalLcdWriteScreen?relay
   \   0000D3   808F         SJMP    ??ZDO_StartDevice_1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine40:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function NLME_NetworkDiscoveryRequest
   \   000001                ; Setup parameters for call to function NLME_OrphanJoinRequest
   \   000001   90....       MOV     DPTR,#zgDefaultStartingScanDuration
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F9           MOV     R1,A
   \   000006   90....       MOV     DPTR,#zgDefaultChannelList
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine29:
   \   000000   90....       MOV     DPTR,#zgDefaultChannelList
   \   000003   E4           CLR     A
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   7488         MOV     A,#-0x78
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   7410         MOV     A,#0x10
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   7402         MOV     A,#0x2
   \   000010   F0           MOVX    @DPTR,A
   \   000011   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine143_0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine144_0
   \   000003                ; // Fall through to label ??Subroutine144_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine144_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine35:
   \   000000   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_186:
   \   000003   AA82         MOV     R2,DPL
   \   000005   AB83         MOV     R3,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine111:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function nwk_ScanJoiningOrphan
   \   000001                ; Setup parameters for call to function NLME_NwkDiscReq2
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??discRetries:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
   \                     ??scanCnt:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    391          
    392          /**************************************************************************************************
    393           * @fn          zdoSendStateChangeMsg
    394           *
    395           * @brief       Helper function for ZDO_UpdateNwkStatus.
    396           *
    397           * input parameters
    398           *
    399           * @param       taskId - The OSAL task identifier to which to send the ZDO_STATE_CHANGE_EVT.
    400           * @param       state - The current device state.
    401           *
    402           * output parameters
    403           *
    404           * None.
    405           *
    406           * @return      None.
    407           **************************************************************************************************
    408           */
    409          static void zdoSendStateChangeMsg(uint8 state, uint8 taskId)
    410          {
    411            osal_event_hdr_t *pMsg = (osal_event_hdr_t *)osal_msg_find(taskId, ZDO_STATE_CHANGE);
    412          
    413            if (NULL == pMsg)
    414            {
    415              if (NULL == (pMsg = (osal_event_hdr_t *)osal_msg_allocate(sizeof(osal_event_hdr_t))))
    416              {
    417                // Upon failure to notify any EndPoint of the state change, re-set the ZDO event to
    418                // try again later when more Heap may be available.
    419                osal_set_event(ZDAppTaskID, ZDO_STATE_CHANGE_EVT);
    420              }
    421              else
    422              {
    423                pMsg->event = ZDO_STATE_CHANGE;
    424                pMsg->status = state;
    425          
    426                (void)osal_msg_send(taskId, (uint8 *)pMsg);
    427              }
    428            }
    429            else
    430            {
    431              // Modify in place the status of an existing ZDO_STATE_CHANGE message to the EndPoint.
    432              pMsg->status = state;
    433            }
    434          }
    435          
    436          /**************************************************************************************************
    437           * @fn          ZDO_UpdateNwkStatus
    438           *
    439           * @brief       This function sends a ZDO_STATE_CHANGE message to the task of every EndPoint
    440           *              registered with AF (except, of course, the ZDO_EP). Even if a single task has more
    441           *              than one registered EndPoint, it will only receive one notification per state
    442           *              change. Although the device may go through a sequence of state changes, the
    443           *              Application task may only receive notification of the final, steady-state state
    444           *              because it has the lowest priority and never even runs to receive the intermediate
    445           *              state change notifications.
    446           *
    447           * input parameters
    448           *
    449           * @param       state - The current device state.
    450           *
    451           * output parameters
    452           *
    453           * None.
    454           *
    455           * @return      None.
    456           **************************************************************************************************
    457           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    458          void ZDO_UpdateNwkStatus(devStates_t state)
   \                     ZDO_UpdateNwkStatus:
    459          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 1,R1
    460            epList_t *pItem = epList;
   \   000007   90....       MOV     DPTR,#epList
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   FE           MOV     R6,A
   \   00000C   A3           INC     DPTR
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   800B         SJMP    ??CrossCallReturnLabel_146
    461          
    462            while (pItem != NULL)
    463            {
    464              if (pItem->epDesc->endPoint != ZDO_EP)
    465              {
    466                zdoSendStateChangeMsg(state, *(pItem->epDesc->task_id));
   \                     ??ZDO_UpdateNwkStatus_0:
   \   000010   A3           INC     DPTR
   \   000011   E5..         MOV     A,?V0 + 1
   \   000013   F0           MOVX    @DPTR,A
    467              }
    468          
    469              pItem = pItem->nextDesc;
   \                     ??ZDO_UpdateNwkStatus_1:
   \   000014   8E82         MOV     DPL,R6
   \   000016   8F83         MOV     DPH,R7
   \   000018   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_146:
   \   00001B   FF           MOV     R7,A
   \   00001C   EE           MOV     A,R6
   \   00001D   4F           ORL     A,R7
   \   00001E   604B         JZ      ??ZDO_UpdateNwkStatus_2
   \   000020   8E82         MOV     DPL,R6
   \   000022   8F83         MOV     DPH,R7
   \   000024   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_239:
   \   000027   E0           MOVX    A,@DPTR
   \   000028   60EA         JZ      ??ZDO_UpdateNwkStatus_1
   \   00002A   A3           INC     DPTR
   \   00002B   12....       LCALL   ??Subroutine164_0 & 0xFFFF
    470            }
   \                     ??CrossCallReturnLabel_340:
   \   00002E   F5..         MOV     ?V0 + 0,A
   \   000030                ; Setup parameters for call to function osal_msg_find
   \   000030   7AD1         MOV     R2,#-0x2f
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   ??osal_msg_find?relay
   \   000036   8A82         MOV     DPL,R2
   \   000038   8B83         MOV     DPH,R3
   \   00003A   E582         MOV     A,DPL
   \   00003C   4583         ORL     A,DPH
   \   00003E   70D0         JNZ     ??ZDO_UpdateNwkStatus_0
   \   000040                ; Setup parameters for call to function osal_msg_allocate
   \   000040   7A02         MOV     R2,#0x2
   \   000042   7B00         MOV     R3,#0x0
   \   000044   12....       LCALL   ??osal_msg_allocate?relay
   \   000047   EA           MOV     A,R2
   \   000048   4B           ORL     A,R3
   \   000049   700E         JNZ     ??ZDO_UpdateNwkStatus_3
   \   00004B                ; Setup parameters for call to function osal_set_event
   \   00004B   7A10         MOV     R2,#0x10
   \   00004D   7B00         MOV     R3,#0x0
   \   00004F   90....       MOV     DPTR,#ZDAppTaskID
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F9           MOV     R1,A
   \   000054   12....       LCALL   ??osal_set_event?relay
   \   000057   80BB         SJMP    ??ZDO_UpdateNwkStatus_1
   \                     ??ZDO_UpdateNwkStatus_3:
   \   000059   8A82         MOV     DPL,R2
   \   00005B   8B83         MOV     DPH,R3
   \   00005D   74D1         MOV     A,#-0x2f
   \   00005F   F0           MOVX    @DPTR,A
   \   000060   A3           INC     DPTR
   \   000061   E5..         MOV     A,?V0 + 1
   \   000063   F0           MOVX    @DPTR,A
   \   000064                ; Setup parameters for call to function osal_msg_send
   \   000064   A9..         MOV     R1,?V0 + 0
   \   000066   12....       LCALL   ??osal_msg_send?relay
   \   000069   80A9         SJMP    ??ZDO_UpdateNwkStatus_1
    471          #if defined MT_ZDO_CB_FUNC
    472            zdoSendStateChangeMsg(state, MT_TaskID);
    473          #endif
    474          
    475            ZDAppNwkAddr.addr.shortAddr = NLME_GetShortAddr();
   \                     ??ZDO_UpdateNwkStatus_2:
   \   00006B                ; Setup parameters for call to function NLME_GetShortAddr
   \   00006B   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00006E   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000071   12....       LCALL   ?Subroutine31 & 0xFFFF
    476            (void)NLME_GetExtAddr();  // Load the saveExtAddr pointer.
   \                     ??CrossCallReturnLabel_46:
   \   000074                ; Setup parameters for call to function NLME_GetExtAddr
   \   000074   12....       LCALL   ??NLME_GetExtAddr?relay
    477          }
   \   000077                REQUIRE ?Subroutine2
   \   000077                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine63:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine141_0
   \   000002                ; // Fall through to label ??Subroutine141_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine141_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine142_0
   \   000001                ; // Fall through to label ??Subroutine142_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine142_0:
   \   000000   F8           MOV     R0,A
   \   000001   A3           INC     DPTR
   \   000002   E0           MOVX    A,@DPTR
   \   000003   F9           MOV     R1,A
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine31:
   \   000000   EA           MOV     A,R2
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   EB           MOV     A,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine164_0:
   \   000000   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_346:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine123:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F583         MOV     DPH,A
   \   000006   8882         MOV     DPL,R0
   \   000008   E0           MOVX    A,@DPTR
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine124:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine83:
   \   000000   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_361:
   \   000003   FE           MOV     R6,A
   \   000004   E9           MOV     A,R1
   \   000005   22           RET
    478          
    479          #if defined ( REFLECTOR )
    480          /*********************************************************************
    481           * @fn          ZDO_RemoveEndDeviceBind
    482           *
    483           * @brief       Remove the end device bind
    484           *
    485           * @param  none
    486           *
    487           * @return      none
    488           */
    489          static void ZDO_RemoveEndDeviceBind( void )
    490          {
    491            if ( ZDO_EDBind != NULL )
    492            {
    493              // Free the RAM
    494              if ( ZDO_EDBind->inClusters != NULL )
    495              {
    496                osal_mem_free( ZDO_EDBind->inClusters );
    497              }
    498              if ( ZDO_EDBind->outClusters != NULL )
    499              {
    500                osal_mem_free( ZDO_EDBind->outClusters );
    501              }
    502              osal_mem_free( ZDO_EDBind );
    503              ZDO_EDBind = NULL;
    504            }
    505          }
    506          #endif // REFLECTOR
    507          
    508          #if defined ( REFLECTOR )
    509          /*********************************************************************
    510           * @fn          ZDO_RemoveEndDeviceBind
    511           *
    512           * @brief       Remove the end device bind
    513           *
    514           * @param  none
    515           *
    516           * @return      none
    517           */
    518          static void ZDO_SendEDBindRsp( byte TransSeq, zAddrType_t *dstAddr, byte Status, byte secUse )
    519          {
    520            ZDP_EndDeviceBindRsp( TransSeq, dstAddr, Status, secUse );
    521          
    522          #if defined( LCD_SUPPORTED )
    523            HalLcdWriteString( "End Device Bind", HAL_LCD_LINE_1 );
    524            if ( Status == ZDP_SUCCESS )
    525            {
    526              HalLcdWriteString( "Success Sent", HAL_LCD_LINE_2 );
    527            }
    528            else
    529            {
    530              HalLcdWriteString( "Timeout", HAL_LCD_LINE_2 );
    531            }
    532          #endif
    533          
    534          }
    535          #endif // REFLECTOR
    536          
    537          #if ( ZG_BUILD_COORDINATOR_TYPE )
    538          /*********************************************************************
    539           * @fn          ZDO_CompareClusterLists
    540           *
    541           * @brief       Compare one list to another list
    542           *
    543           * @param       numList1 - number of items in list 1
    544           * @param       list1 - first list of cluster IDs
    545           * @param       numList2 - number of items in list 2
    546           * @param       list2 - second list of cluster IDs
    547           * @param       pMatches - buffer to put matches
    548           *
    549           * @return      number of matches
    550           */
    551          static byte ZDO_CompareClusterLists( byte numList1, uint16 *list1,
    552                                    byte numList2, uint16 *list2, uint16 *pMatches )
    553          {
    554            byte x, y;
    555            uint16 z;
    556            byte numMatches = 0;
    557          
    558            // Check the first in against the seconds out
    559            for ( x = 0; x < numList1; x++ )
    560            {
    561              for ( y = 0; y < numList2; y++ )
    562              {
    563                z = list2[y];
    564                if ( list1[x] == z )
    565                {
    566                  pMatches[numMatches++] = z;
    567                }
    568              }
    569            }
    570          
    571            return ( numMatches );
    572          }
    573          #endif // ZG_BUILD_COORDINATOR_TYPE
    574          
    575          /*********************************************************************
    576           * Utility functions
    577           */
    578          
    579          /*********************************************************************
    580           * @fn          ZDO_CompareByteLists
    581           *
    582           * @brief       Compares two lists for matches.
    583           *
    584           * @param       ACnt  - number of entries in list A
    585           * @param       AList  - List A
    586           * @param       BCnt  - number of entries in list B
    587           * @param       BList  - List B
    588           *
    589           * @return      true if a match is found
    590           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    591          byte ZDO_AnyClusterMatches( byte ACnt, uint16 *AList, byte BCnt, uint16 *BList )
   \                     ZDO_AnyClusterMatches:
    592          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   89..         MOV     ?V0 + 3,R1
    593            byte x, y;
    594          
    595            for ( x = 0; x < ACnt; x++ )
   \   000007   7D00         MOV     R5,#0x0
   \   000009   740C         MOV     A,#0xc
   \   00000B   12....       LCALL   ?XSTACK_DISP0_8
   \   00000E   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_314:
   \   000011   8001         SJMP    ??ZDO_AnyClusterMatches_0
   \                     ??ZDO_AnyClusterMatches_1:
   \   000013   0D           INC     R5
   \                     ??ZDO_AnyClusterMatches_0:
   \   000014   ED           MOV     A,R5
   \   000015   C3           CLR     C
   \   000016   95..         SUBB    A,?V0 + 3
   \   000018   5040         JNC     ??ZDO_AnyClusterMatches_2
    596            {
    597              for ( y = 0; y < BCnt; y++ )
   \   00001A   75..00       MOV     ?V0 + 2,#0x0
   \   00001D   8002         SJMP    ??ZDO_AnyClusterMatches_3
   \                     ??ZDO_AnyClusterMatches_4:
   \   00001F   05..         INC     ?V0 + 2
   \                     ??ZDO_AnyClusterMatches_3:
   \   000021   E5..         MOV     A,?V0 + 2
   \   000023   C3           CLR     C
   \   000024   9C           SUBB    A,R4
   \   000025   50EC         JNC     ??ZDO_AnyClusterMatches_1
    598              {
    599                if ( AList[x] == BList[y] )
   \   000027   ED           MOV     A,R5
   \   000028   C3           CLR     C
   \   000029   33           RLC     A
   \   00002A   FE           MOV     R6,A
   \   00002B   E4           CLR     A
   \   00002C   33           RLC     A
   \   00002D   FF           MOV     R7,A
   \   00002E   EA           MOV     A,R2
   \   00002F   2E           ADD     A,R6
   \   000030   F582         MOV     DPL,A
   \   000032   EB           MOV     A,R3
   \   000033   3F           ADDC    A,R7
   \   000034   F583         MOV     DPH,A
   \   000036   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_136:
   \   000039   F5..         MOV     ?V0 + 1,A
   \   00003B   E5..         MOV     A,?V0 + 2
   \   00003D   C3           CLR     C
   \   00003E   33           RLC     A
   \   00003F   FE           MOV     R6,A
   \   000040   E4           CLR     A
   \   000041   33           RLC     A
   \   000042   FF           MOV     R7,A
   \   000043   E8           MOV     A,R0
   \   000044   2E           ADD     A,R6
   \   000045   F582         MOV     DPL,A
   \   000047   E9           MOV     A,R1
   \   000048   3F           ADDC    A,R7
   \   000049   F583         MOV     DPH,A
   \   00004B   E0           MOVX    A,@DPTR
   \   00004C   65..         XRL     A,?V0 + 0
   \   00004E   7004         JNZ     ??ZDO_AnyClusterMatches_5
   \   000050   A3           INC     DPTR
   \   000051   E0           MOVX    A,@DPTR
   \   000052   65..         XRL     A,?V0 + 1
   \                     ??ZDO_AnyClusterMatches_5:
   \   000054   70C9         JNZ     ??ZDO_AnyClusterMatches_4
    600                {
    601                  return true;
   \   000056   7901         MOV     R1,#0x1
   \   000058   8002         SJMP    ??ZDO_AnyClusterMatches_6
    602                }
    603              }
    604            }
    605          
    606            return false;
   \                     ??ZDO_AnyClusterMatches_2:
   \   00005A   7900         MOV     R1,#0x0
   \                     ??ZDO_AnyClusterMatches_6:
   \   00005C   80..         SJMP    ?Subroutine2
    607          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine76:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine156_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine161_0:
   \   000000   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_331:
   \   000003   F9           MOV     R1,A
   \   000004   22           RET
    608          
    609          /*********************************************************************
    610           * Callback functions from ZDProfile
    611           */
    612          
    613          /*********************************************************************
    614           * @fn          ZDO_ProcessNodeDescReq
    615           *
    616           * @brief       This function processes and responds to the
    617           *              Node_Desc_req message.
    618           *
    619           * @param       inMsg - incoming message
    620           *
    621           * @return      none
    622           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    623          void ZDO_ProcessNodeDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessNodeDescReq:
    624          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine50 & 0xFFFF
    625            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    626            NodeDescriptorFormat_t *desc = NULL;
    627          
    628            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_94:
   \   000008   7003         JNZ     ??ZDO_ProcessNodeDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessNodeDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessNodeDescReq_1
    629            {
    630              desc = &ZDO_Config_Node_Descriptor;
    631            }
    632          
    633            if ( desc != NULL )
    634            {
    635              ZDP_NodeDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_NodeDescMsg
   \   00000F   75....       MOV     ?V0 + 0,#ZDO_Config_Node_Descriptor & 0xff
   \   000012   75....       MOV     ?V0 + 1,#(ZDO_Config_Node_Descriptor >> 8) & 0xff
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   ??ZDP_NodeDescMsg?relay
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801F         SJMP    ??ZDO_ProcessNodeDescReq_2
    636            }
    637            else
    638            {
    639              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    640                        ZDP_INVALID_REQTYPE, aoi, Node_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessNodeDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..02       MOV     ?V0 + 0,#0x2
   \   000029   75..80       MOV     ?V0 + 1,#-0x80
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0 + 0,R4
   \   000033   8D..         MOV     ?V0 + 1,R5
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine53 & 0xFFFF
    641            }
   \                     ??CrossCallReturnLabel_98:
   \   00003D   12....       LCALL   ??ZDP_GenericRsp?relay
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    642          }
   \                     ??ZDO_ProcessNodeDescReq_2:
   \   000045   80..         SJMP    ??Subroutine144_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine53:
   \   000000   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_384:
   \   000003   EF           MOV     A,R7
   \   000004   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_286:
   \   000007   FD           MOV     R5,A
   \   000008   7C80         MOV     R4,#-0x80
   \   00000A   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_220:
   \   00000D   EE           MOV     A,R6
   \   00000E   240F         ADD     A,#0xf
   \   000010   F582         MOV     DPL,A
   \   000012   EF           MOV     A,R7
   \   000013   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_337:
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine50:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_197:
   \   000007   FC           MOV     R4,A
   \   000008   E4           CLR     A
   \   000009   39           ADDC    A,R1
   \   00000A   FD           MOV     R5,A
   \   00000B   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   6C           XRL     A,R4
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine131:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine133:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FA           MOV     R2,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FB           MOV     R3,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine130:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F9           MOV     R1,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine116:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_227:
   \   000009   FA           MOV     R2,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F9           MOV     R1,A
   \   00000D   EA           MOV     A,R2
   \   00000E   2400         ADD     A,#0x0
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine128:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine172_0
   \   000001                ; // Fall through to label ??Subroutine172_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine172_0:
   \   000000   240E         ADD     A,#0xe
   \   000002   F582         MOV     DPL,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine137:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   F9           MOV     R1,A
   \   000009   8882         MOV     DPL,R0
   \   00000B   8983         MOV     DPH,R1
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET
    643          
    644          /*********************************************************************
    645           * @fn          ZDO_ProcessPowerDescReq
    646           *
    647           * @brief       This function processes and responds to the
    648           *              Node_Power_req message.
    649           *
    650           * @param       inMsg  - incoming request
    651           *
    652           * @return      none
    653           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    654          void ZDO_ProcessPowerDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessPowerDescReq:
    655          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   12....       LCALL   ?Subroutine50 & 0xFFFF
    656            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
    657            NodePowerDescriptorFormat_t *desc = NULL;
    658          
    659            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??CrossCallReturnLabel_95:
   \   000008   7003         JNZ     ??ZDO_ProcessPowerDescReq_0
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   6D           XRL     A,R5
   \                     ??ZDO_ProcessPowerDescReq_0:
   \   00000D   7017         JNZ     ??ZDO_ProcessPowerDescReq_1
    660            {
    661              desc = &ZDO_Config_Power_Descriptor;
    662            }
    663          
    664            if ( desc != NULL )
    665            {
    666              ZDP_PowerDescMsg( inMsg, aoi, desc );
   \   00000F                ; Setup parameters for call to function ZDP_PowerDescMsg
   \   00000F   75....       MOV     ?V0 + 0,#ZDO_Config_Power_Descriptor & 0xff
   \   000012   75....       MOV     ?V0 + 1,#(ZDO_Config_Power_Descriptor >> 8) & 0xff
   \   000015   78..         MOV     R0,#?V0 + 0
   \   000017   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001A   EE           MOV     A,R6
   \   00001B   FA           MOV     R2,A
   \   00001C   12....       LCALL   ??ZDP_PowerDescMsg?relay
   \   00001F   7402         MOV     A,#0x2
   \   000021   12....       LCALL   ?DEALLOC_XSTACK8
   \   000024   801F         SJMP    ??ZDO_ProcessPowerDescReq_2
    667            }
    668            else
    669            {
    670              ZDP_GenericRsp( inMsg->TransSeq, &(inMsg->srcAddr),
    671                        ZDP_INVALID_REQTYPE, aoi, Power_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessPowerDescReq_1:
   \   000026                ; Setup parameters for call to function ZDP_GenericRsp
   \   000026   75..03       MOV     ?V0 + 0,#0x3
   \   000029   75..80       MOV     ?V0 + 1,#-0x80
   \   00002C   78..         MOV     R0,#?V0 + 0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000031   8C..         MOV     ?V0 + 0,R4
   \   000033   8D..         MOV     ?V0 + 1,R5
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   12....       LCALL   ?Subroutine53 & 0xFFFF
    672            }
   \                     ??CrossCallReturnLabel_99:
   \   00003D   12....       LCALL   ??ZDP_GenericRsp?relay
   \   000040   7404         MOV     A,#0x4
   \   000042   12....       LCALL   ?DEALLOC_XSTACK8
    673          }
   \                     ??ZDO_ProcessPowerDescReq_2:
   \   000045   80..         SJMP    ??Subroutine144_0
    674          
    675          /*********************************************************************
    676           * @fn          ZDO_ProcessSimpleDescReq
    677           *
    678           * @brief       This function processes and responds to the
    679           *              Simple_Desc_req message.
    680           *
    681           * @param       inMsg - incoming message (request)
    682           *
    683           * @return      none
    684           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7402         MOV     A,#0x2
   \   000002                REQUIRE ??Subroutine143_0
   \   000002                ; // Fall through to label ??Subroutine143_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    685          void ZDO_ProcessSimpleDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessSimpleDescReq:
    686          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
    687            SimpleDescriptionFormat_t *sDesc = NULL;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    688            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   000018   12....       LCALL   ??Subroutine145_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_246:
   \   00001B   EF           MOV     A,R7
   \   00001C   12....       LCALL   ?Subroutine59 & 0xFFFF
   \                     ??CrossCallReturnLabel_111:
   \   00001F   FA           MOV     R2,A
    689            byte endPoint = inMsg->asdu[2];
   \   000020   8882         MOV     DPL,R0
   \   000022   8983         MOV     DPH,R1
   \   000024   A3           INC     DPTR
   \   000025   A3           INC     DPTR
   \   000026   E0           MOVX    A,@DPTR
   \   000027   F9           MOV     R1,A
    690            byte free = false;
   \   000028   75..00       MOV     ?V0 + 1,#0x0
    691            byte stat = ZDP_SUCCESS;
   \   00002B   75..00       MOV     ?V0 + 0,#0x0
    692          
    693            if ( (endPoint == ZDO_EP) || (endPoint > MAX_ENDPOINTS) )
   \   00002E   6005         JZ      ??ZDO_ProcessSimpleDescReq_0
   \   000030   74FF         MOV     A,#-0x1
   \   000032   69           XRL     A,R1
   \   000033   7005         JNZ     ??ZDO_ProcessSimpleDescReq_1
    694            {
    695              stat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessSimpleDescReq_0:
   \   000035   75..82       MOV     ?V0 + 0,#-0x7e
   \   000038   8029         SJMP    ??ZDO_ProcessSimpleDescReq_2
    696            }
    697            else if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \                     ??ZDO_ProcessSimpleDescReq_1:
   \   00003A   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   6A           XRL     A,R2
   \   00003F   7003         JNZ     ??ZDO_ProcessSimpleDescReq_3
   \   000041   A3           INC     DPTR
   \   000042   E0           MOVX    A,@DPTR
   \   000043   6B           XRL     A,R3
   \                     ??ZDO_ProcessSimpleDescReq_3:
   \   000044   701A         JNZ     ??ZDO_ProcessSimpleDescReq_4
    698            {
    699              free = afFindSimpleDesc( &sDesc, endPoint );
   \   000046                ; Setup parameters for call to function afFindSimpleDesc
   \   000046   85..82       MOV     DPL,?XSP + 0
   \   000049   85..83       MOV     DPH,?XSP + 1
   \   00004C   AA82         MOV     R2,DPL
   \   00004E   AB83         MOV     R3,DPH
   \   000050   12....       LCALL   ??afFindSimpleDesc?relay
   \   000053   E9           MOV     A,R1
   \   000054   F5..         MOV     ?V0 + 1,A
    700              if ( sDesc == NULL )
   \   000056   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_358:
   \   000059   7008         JNZ     ??ZDO_ProcessSimpleDescReq_2
    701              {
    702                stat = ZDP_NOT_ACTIVE;
   \   00005B   75..83       MOV     ?V0 + 0,#-0x7d
   \   00005E   8003         SJMP    ??ZDO_ProcessSimpleDescReq_2
    703              }
    704            }
    705            else
    706            {
    707              if ( ZSTACK_ROUTER_BUILD )
    708              {
    709                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??ZDO_ProcessSimpleDescReq_4:
   \   000060   75..81       MOV     ?V0 + 0,#-0x7f
    710              }
    711              else if ( ZSTACK_END_DEVICE_BUILD )
    712              {
    713                stat = ZDP_INVALID_REQTYPE;
    714              }
    715            }
    716          
    717            ZDP_SimpleDescMsg( inMsg, stat, sDesc );
   \                     ??ZDO_ProcessSimpleDescReq_2:
   \   000063                ; Setup parameters for call to function ZDP_SimpleDescMsg
   \   000063   85..82       MOV     DPL,?XSP + 0
   \   000066   85..83       MOV     DPH,?XSP + 1
   \   000069   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_214:
   \   00006C   A9..         MOV     R1,?V0 + 0
   \   00006E   EE           MOV     A,R6
   \   00006F   FA           MOV     R2,A
   \   000070   EF           MOV     A,R7
   \   000071   FB           MOV     R3,A
   \   000072   12....       LCALL   ??ZDP_SimpleDescMsg?relay
    718          
    719            if ( free && sDesc )
   \   000075   E5..         MOV     A,?V0 + 1
   \   000077   600B         JZ      ??ZDO_ProcessSimpleDescReq_5
   \   000079   12....       LCALL   ?Subroutine49 & 0xFFFF
   \                     ??CrossCallReturnLabel_359:
   \   00007C   6006         JZ      ??ZDO_ProcessSimpleDescReq_5
    720            {
    721              osal_mem_free( sDesc );
   \   00007E                ; Setup parameters for call to function osal_mem_free
   \   00007E   12....       LCALL   ??Subroutine158_0 & 0xFFFF
    722            }
   \                     ??CrossCallReturnLabel_305:
   \   000081   12....       LCALL   ??osal_mem_free?relay
    723          }
   \                     ??ZDO_ProcessSimpleDescReq_5:
   \   000084   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine145_0:
   \   000000   EE           MOV     A,R6
   \   000001                REQUIRE ??Subroutine146_0
   \   000001                ; // Fall through to label ??Subroutine146_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine146_0:
   \   000000   2413         ADD     A,#0x13
   \   000002   F582         MOV     DPL,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine126:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FD           MOV     R5,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine158_0:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine159_0
   \   000006                ; // Fall through to label ??Subroutine159_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine159_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine59:
   \   000000   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_212:
   \   000003   FC           MOV     R4,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FB           MOV     R3,A
   \   000007   EC           MOV     A,R4
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine49:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine166_0
   \   000006                ; // Fall through to label ??Subroutine166_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine166_0:
   \   000000   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_362:
   \   000003   49           ORL     A,R1
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine122:
   \   000000   12....       LCALL   ?Subroutine137 & 0xFFFF
   \                     ??CrossCallReturnLabel_226:
   \   000003   22           RET
    724          
    725          /*********************************************************************
    726           * @fn          ZDO_ProcessActiveEPReq
    727           *
    728           * @brief       This function processes and responds to the
    729           *              Active_EP_req message.
    730           *
    731           * @param       inMsg  - incoming message (request)
    732           *
    733           * @return      none
    734           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    735          void ZDO_ProcessActiveEPReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessActiveEPReq:
    736          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    737            byte cnt = 0;
   \   000009   75..00       MOV     ?V0 + 2,#0x0
    738            uint16 aoi;
    739            byte stat = ZDP_SUCCESS;
   \   00000C   75..00       MOV     ?V0 + 3,#0x0
    740          
    741            aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000F   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_106:
   \   000012   F5..         MOV     ?V0 + 0,A
   \   000014   E4           CLR     A
   \   000015   39           ADDC    A,R1
   \   000016   F5..         MOV     ?V0 + 1,A
    742          
    743            if ( aoi == NLME_GetShortAddr() )
   \   000018                ; Setup parameters for call to function NLME_GetShortAddr
   \   000018   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00001B   EA           MOV     A,R2
   \   00001C   65..         XRL     A,?V0 + 0
   \   00001E   7003         JNZ     ??ZDO_ProcessActiveEPReq_0
   \   000020   EB           MOV     A,R3
   \   000021   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessActiveEPReq_0:
   \   000023   7012         JNZ     ??ZDO_ProcessActiveEPReq_1
    744            {
    745              cnt = afNumEndPoints() - 1;  // -1 for ZDO endpoint descriptor
   \   000025                ; Setup parameters for call to function afNumEndPoints
   \   000025   12....       LCALL   ??afNumEndPoints?relay
   \   000028   E9           MOV     A,R1
   \   000029   14           DEC     A
   \   00002A   F5..         MOV     ?V0 + 2,A
    746              afEndPoints( (uint8 *)ZDOBuildBuf, true );
   \   00002C                ; Setup parameters for call to function afEndPoints
   \   00002C   7901         MOV     R1,#0x1
   \   00002E   7A..         MOV     R2,#ZDOBuildBuf & 0xff
   \   000030   7B..         MOV     R3,#(ZDOBuildBuf >> 8) & 0xff
   \   000032   12....       LCALL   ??afEndPoints?relay
   \   000035   8003         SJMP    ??ZDO_ProcessActiveEPReq_2
    747            }
    748            else
    749            {
    750              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessActiveEPReq_1:
   \   000037   75..80       MOV     ?V0 + 3,#-0x80
    751            }
    752          
    753            ZDP_ActiveEPRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
    754                            aoi, cnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \                     ??ZDO_ProcessActiveEPReq_2:
   \   00003A                ; Setup parameters for call to function ZDP_EPRsp
   \   00003A   12....       LCALL   ?Subroutine93 & 0xFFFF
   \                     ??CrossCallReturnLabel_282:
   \   00003D   F5..         MOV     ?V0 + 4,A
   \   00003F   78..         MOV     R0,#?V0 + 4
   \   000041   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000044   75....       MOV     ?V0 + 4,#ZDOBuildBuf & 0xff
   \   000047   75....       MOV     ?V0 + 5,#(ZDOBuildBuf >> 8) & 0xff
   \   00004A   78..         MOV     R0,#?V0 + 4
   \   00004C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004F   78..         MOV     R0,#?V0 + 2
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000054   78..         MOV     R0,#?V0 + 0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   E5..         MOV     A,?V0 + 3
   \   00005B   F5..         MOV     ?V0 + 0,A
   \   00005D   78..         MOV     R0,#?V0 + 0
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000062   EE           MOV     A,R6
   \   000063   2402         ADD     A,#0x2
   \   000065   FC           MOV     R4,A
   \   000066   EF           MOV     A,R7
   \   000067   3400         ADDC    A,#0x0
   \   000069   FD           MOV     R5,A
   \   00006A   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_335:
   \   00006D   7A05         MOV     R2,#0x5
   \   00006F   7B80         MOV     R3,#-0x80
   \   000071   12....       LCALL   ??ZDP_EPRsp?relay
   \   000074   7407         MOV     A,#0x7
   \   000076   02....       LJMP    ?Subroutine3 & 0xFFFF
    755          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine93:
   \   000000   EE           MOV     A,R6
   \   000001   240E         ADD     A,#0xe
   \   000003                REQUIRE ??Subroutine151_0
   \   000003                ; // Fall through to label ??Subroutine151_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine151_0:
   \   000000   F582         MOV     DPL,A
   \   000002   EF           MOV     A,R7
   \   000003                REQUIRE ??Subroutine152_0
   \   000003                ; // Fall through to label ??Subroutine152_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine152_0:
   \   000000   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_288:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine92:
   \   000000   EE           MOV     A,R6
   \   000001   240F         ADD     A,#0xf
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006                REQUIRE ??Subroutine162_0
   \   000006                ; // Fall through to label ??Subroutine162_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine162_0:
   \   000000   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_339:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine57:
   \   000000   12....       LCALL   ?Subroutine116 & 0xFFFF
   \                     ??CrossCallReturnLabel_198:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine168_0
   \   000003                ; // Fall through to label ??Subroutine168_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine168_0:
   \   000000   7F06         MOV     R7,#0x6
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    756          
    757          /*********************************************************************
    758           * @fn          ZDO_ConvertOTAClusters
    759           *
    760           * @brief       This function will convert the over-the-air cluster list
    761           *              format to an internal format.
    762           *
    763           * @param       inMsg  - incoming message (request)
    764           *
    765           * @return      pointer to incremented inBuf
    766           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    767          uint8 *ZDO_ConvertOTAClusters( uint8 cnt, uint8 *inBuf, uint16 *outList )
   \                     ZDO_ConvertOTAClusters:
    768          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    769            uint8 x;
    770          
    771            for ( x = 0; x < cnt; x++ )
   \   000007   7F00         MOV     R7,#0x0
   \   000009   802E         SJMP    ??ZDO_ConvertOTAClusters_0
    772            {
    773              // convert ota format to internal
    774              outList[x] = BUILD_UINT16( inBuf[0], inBuf[1] );
   \                     ??ZDO_ConvertOTAClusters_1:
   \   00000B   8A82         MOV     DPL,R2
   \   00000D   8B83         MOV     DPH,R3
   \   00000F   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_137:
   \   000012   F9           MOV     R1,A
   \   000013   E5..         MOV     A,?V0 + 0
   \   000015   2400         ADD     A,#0x0
   \   000017   E4           CLR     A
   \   000018   39           ADDC    A,R1
   \   000019   F5..         MOV     ?V0 + 1,A
   \   00001B   EF           MOV     A,R7
   \   00001C   33           RLC     A
   \   00001D   F8           MOV     R0,A
   \   00001E   E4           CLR     A
   \   00001F   33           RLC     A
   \   000020   F9           MOV     R1,A
   \   000021   EC           MOV     A,R4
   \   000022   28           ADD     A,R0
   \   000023   F582         MOV     DPL,A
   \   000025   ED           MOV     A,R5
   \   000026   39           ADDC    A,R1
   \   000027   F583         MOV     DPH,A
   \   000029   E5..         MOV     A,?V0 + 0
   \   00002B   F0           MOVX    @DPTR,A
   \   00002C   A3           INC     DPTR
   \   00002D   E5..         MOV     A,?V0 + 1
   \   00002F   F0           MOVX    @DPTR,A
    775              inBuf += sizeof( uint16 );
   \   000030   EA           MOV     A,R2
   \   000031   2402         ADD     A,#0x2
   \   000033   FA           MOV     R2,A
   \   000034   EB           MOV     A,R3
   \   000035   3400         ADDC    A,#0x0
   \   000037   FB           MOV     R3,A
    776            }
   \   000038   0F           INC     R7
   \                     ??ZDO_ConvertOTAClusters_0:
   \   000039   EF           MOV     A,R7
   \   00003A   C3           CLR     C
   \   00003B   9E           SUBB    A,R6
   \   00003C   40CD         JC      ??ZDO_ConvertOTAClusters_1
    777            return ( inBuf );
   \   00003E   02....       LJMP    ??Subroutine144_0 & 0xFFFF
    778          }
    779          
    780          /*********************************************************************
    781           * @fn          ZDO_ProcessMatchDescReq
    782           *
    783           * @brief       This function processes and responds to the
    784           *              Match_Desc_req message.
    785           *
    786           * @param       inMsg  - incoming message (request)
    787           *
    788           * @return      none
    789           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    790          void ZDO_ProcessMatchDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMatchDescReq:
    791          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 5
   \   000005   74FB         MOV     A,#-0x5
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 12,R2
   \   00000C   8B..         MOV     ?V0 + 13,R3
    792            uint8 epCnt = 0;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    793            uint8 numInClusters;
    794            uint16 *inClusters = NULL;
   \   000016   7403         MOV     A,#0x3
   \   000018   12....       LCALL   ?XSTACK_DISP0_8
   \   00001B   E4           CLR     A
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   F0           MOVX    @DPTR,A
    795            uint8 numOutClusters;
    796            uint16 *outClusters = NULL;
   \   00001F   04           INC     A
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   E4           CLR     A
   \   000024   F0           MOVX    @DPTR,A
   \   000025   12....       LCALL   ?Subroutine12 & 0xFFFF
    797            epList_t *epDesc;
    798            SimpleDescriptionFormat_t *sDesc = NULL;
    799            uint8 allocated;
    800            uint8 *msg;
    801            uint16 aoi;
    802            uint16 profileID;
    803          
    804            // Parse the incoming message
    805            msg = inMsg->asdu;
    806            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_2:
   \   000028   2400         ADD     A,#0x0
   \   00002A   FE           MOV     R6,A
   \   00002B   E4           CLR     A
   \   00002C   39           ADDC    A,R1
   \   00002D   FF           MOV     R7,A
    807            profileID = BUILD_UINT16( msg[2], msg[3] );
   \   00002E   85..82       MOV     DPL,?V0 + 2
   \   000031   85..83       MOV     DPH,?V0 + 3
   \   000034   A3           INC     DPTR
   \   000035   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_144:
   \   000038   A3           INC     DPTR
   \   000039   A3           INC     DPTR
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   F9           MOV     R1,A
   \   00003C   EA           MOV     A,R2
   \   00003D   F5..         MOV     ?V0 + 0,A
   \   00003F   E4           CLR     A
   \   000040   39           ADDC    A,R1
   \   000041   F5..         MOV     ?V0 + 1,A
    808            msg += 4;
   \   000043   E5..         MOV     A,?V0 + 2
   \   000045   2404         ADD     A,#0x4
   \   000047   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_250:
   \   00004A                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   00004A   EE           MOV     A,R6
   \   00004B   FA           MOV     R2,A
   \   00004C   EF           MOV     A,R7
   \   00004D   FB           MOV     R3,A
    809          
    810            if ( ADDR_BCAST_NOT_ME == NLME_IsAddressBroadcast(aoi) )
   \   00004E   12....       LCALL   ??NLME_IsAddressBroadcast?relay
   \   000051   E9           MOV     A,R1
   \   000052   6401         XRL     A,#0x1
   \   000054   6016         JZ      ??ZDO_ProcessMatchDescReq_0
    811            {
    812              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    813                                    ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
    814              return;
    815            }
    816            else if ( (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi)) && (aoi != ZDAppNwkAddr.addr.shortAddr) )
   \   000056                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000056   EE           MOV     A,R6
   \   000057   FA           MOV     R2,A
   \   000058   EF           MOV     A,R7
   \   000059   FB           MOV     R3,A
   \   00005A   12....       LCALL   ??NLME_IsAddressBroadcast?relay
   \   00005D   E9           MOV     A,R1
   \   00005E   7047         JNZ     ??ZDO_ProcessMatchDescReq_1
   \   000060   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000063   E0           MOVX    A,@DPTR
   \   000064   6E           XRL     A,R6
   \   000065   7003         JNZ     ??ZDO_ProcessMatchDescReq_2
   \   000067   A3           INC     DPTR
   \   000068   E0           MOVX    A,@DPTR
   \   000069   6F           XRL     A,R7
   \                     ??ZDO_ProcessMatchDescReq_2:
   \   00006A   603B         JZ      ??ZDO_ProcessMatchDescReq_1
    817            {
    818              ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_INVALID_REQTYPE,
    819                                       ZDAppNwkAddr.addr.shortAddr, 0, NULL, inMsg->SecurityUse );
   \                     ??ZDO_ProcessMatchDescReq_0:
   \   00006C                ; Setup parameters for call to function ZDP_EPRsp
   \   00006C   E5..         MOV     A,?V0 + 12
   \   00006E   12....       LCALL   ??Subroutine172_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_378:
   \   000071   E5..         MOV     A,?V0 + 13
   \   000073   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_385:
   \   000076   12....       LCALL   ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_268:
   \   000079   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00007C   E4           CLR     A
   \   00007D   F5..         MOV     ?V0 + 0,A
   \   00007F   F5..         MOV     ?V0 + 1,A
   \   000081   78..         MOV     R0,#?V0 + 0
   \   000083   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000086   78..         MOV     R0,#?V0 + 0
   \   000088   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00008B   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00008E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000091   75..80       MOV     ?V0 + 0,#-0x80
   \   000094   78..         MOV     R0,#?V0 + 0
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000099   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_133:
   \   00009C   12....       LCALL   ??ZDP_EPRsp?relay
   \   00009F   7407         MOV     A,#0x7
   \   0000A1   12....       LCALL   ?DEALLOC_XSTACK8
    820              return;
   \   0000A4   02....       LJMP    ??ZDO_ProcessMatchDescReq_3 & 0xFFFF
    821            }
    822          
    823            if ((numInClusters = *msg++) &&
    824                (inClusters = (uint16*)osal_mem_alloc( numInClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_1:
   \   0000A7   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_112:
   \   0000AA   88..         MOV     ?V0 + 8,R0
   \   0000AC   602E         JZ      ??ZDO_ProcessMatchDescReq_4
   \   0000AE                ; Setup parameters for call to function osal_mem_alloc
   \   0000AE   C3           CLR     C
   \   0000AF   33           RLC     A
   \   0000B0   FA           MOV     R2,A
   \   0000B1   E4           CLR     A
   \   0000B2   33           RLC     A
   \   0000B3   FB           MOV     R3,A
   \   0000B4   12....       LCALL   ??osal_mem_alloc?relay
   \   0000B7   7403         MOV     A,#0x3
   \   0000B9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000BC   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_47:
   \   0000BF   7403         MOV     A,#0x3
   \   0000C1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C4   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_347:
   \   0000C7   6013         JZ      ??ZDO_ProcessMatchDescReq_4
    825            {
    826              msg = ZDO_ConvertOTAClusters( numInClusters, msg, inClusters );
   \   0000C9                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000C9   7403         MOV     A,#0x3
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   12....       LCALL   ?Subroutine77 & 0xFFFF
    827            }
   \                     ??CrossCallReturnLabel_140:
   \   0000D1   A9..         MOV     R1,?V0 + 8
   \   0000D3   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   0000D6   8A..         MOV     ?V0 + 2,R2
   \   0000D8   8B..         MOV     ?V0 + 3,R3
   \   0000DA   8003         SJMP    ??ZDO_ProcessMatchDescReq_5
    828            else
    829            {
    830              numInClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_4:
   \   0000DC   75..00       MOV     ?V0 + 8,#0x0
    831            }
    832          
    833            if ((numOutClusters = *msg++) &&
    834                (outClusters = (uint16 *)osal_mem_alloc( numOutClusters * sizeof( uint16 ) )))
   \                     ??ZDO_ProcessMatchDescReq_5:
   \   0000DF   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_113:
   \   0000E2   88..         MOV     ?V0 + 7,R0
   \   0000E4   602A         JZ      ??ZDO_ProcessMatchDescReq_6
   \   0000E6                ; Setup parameters for call to function osal_mem_alloc
   \   0000E6   C3           CLR     C
   \   0000E7   33           RLC     A
   \   0000E8   FA           MOV     R2,A
   \   0000E9   E4           CLR     A
   \   0000EA   33           RLC     A
   \   0000EB   FB           MOV     R3,A
   \   0000EC   12....       LCALL   ??osal_mem_alloc?relay
   \   0000EF   7401         MOV     A,#0x1
   \   0000F1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F4   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_48:
   \   0000F7   7401         MOV     A,#0x1
   \   0000F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000FC   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_348:
   \   0000FF   600F         JZ      ??ZDO_ProcessMatchDescReq_6
    835            {
    836              msg = ZDO_ConvertOTAClusters( numOutClusters, msg, outClusters );
   \   000101                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   000101   7401         MOV     A,#0x1
   \   000103   12....       LCALL   ?XSTACK_DISP0_8
   \   000106   12....       LCALL   ?Subroutine77 & 0xFFFF
    837            }
   \                     ??CrossCallReturnLabel_141:
   \   000109   A9..         MOV     R1,?V0 + 7
   \   00010B   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   00010E   8003         SJMP    ??ZDO_ProcessMatchDescReq_7
    838            else
    839            {
    840              numOutClusters = 0;
   \                     ??ZDO_ProcessMatchDescReq_6:
   \   000110   75..00       MOV     ?V0 + 7,#0x0
    841            }
    842          
    843            // First count the number of endpoints that match.
    844            epDesc = epList;
   \                     ??ZDO_ProcessMatchDescReq_7:
   \   000113   90....       MOV     DPTR,#epList
   \   000116   8054         SJMP    ??ZDO_ProcessMatchDescReq_8
    845            while ( epDesc )
    846            {
    847              // Don't search endpoint 0 and check if response is allowed
    848              if ( epDesc->epDesc->endPoint != ZDO_EP && (epDesc->flags&eEP_AllowMatch) )
    849              {
    850                if ( epDesc->pfnDescCB )
    851                {
    852                  sDesc = (SimpleDescriptionFormat_t *)epDesc->pfnDescCB( AF_DESCRIPTOR_SIMPLE, epDesc->epDesc->endPoint );
    853                  allocated = TRUE;
    854                }
    855                else
    856                {
    857                  sDesc = epDesc->epDesc->simpleDesc;
    858                  allocated = FALSE;
    859                }
    860          
    861                // Allow specific ProfileId or Wildcard ProfileID
    862                if ( sDesc && ( ( sDesc->AppProfId == profileID ) || ( profileID == ZDO_WILDCARD_PROFILE_ID ) ) )
    863                {
    864                  uint8 *uint8Buf = (uint8 *)ZDOBuildBuf;
    865          
    866                  // Are there matching input clusters?
    867                  if ((ZDO_AnyClusterMatches( numInClusters, inClusters,
    868                             sDesc->AppNumInClusters, sDesc->pAppInClusterList )) ||
    869                      // Are there matching output clusters?
    870                      (ZDO_AnyClusterMatches( numOutClusters, outClusters,
    871                             sDesc->AppNumOutClusters, sDesc->pAppOutClusterList )))
    872                  {
    873                    // Notify the endpoint of the match.
    874                    uint8 bufLen = sizeof( ZDO_MatchDescRspSent_t ) + (numOutClusters + numInClusters) * sizeof(uint16);
    875                    ZDO_MatchDescRspSent_t *pRspSent = (ZDO_MatchDescRspSent_t *) osal_msg_allocate( bufLen );
    876          
    877                    if (pRspSent)
    878                    {
    879                      pRspSent->hdr.event = ZDO_MATCH_DESC_RSP_SENT;
    880                      pRspSent->nwkAddr = inMsg->srcAddr.addr.shortAddr;
    881                      pRspSent->numInClusters = numInClusters;
    882                      pRspSent->numOutClusters = numOutClusters;
    883          
    884                      if (numInClusters)
    885                      {
    886                        pRspSent->pInClusters = (uint16*) (pRspSent + 1);
    887                        osal_memcpy(pRspSent->pInClusters, inClusters, numInClusters * sizeof(uint16));
    888                      }
    889                      else
    890                      {
    891                        pRspSent->pInClusters = NULL;
    892                      }
    893          
    894                      if (numOutClusters)
    895                      {
    896                        pRspSent->pOutClusters = (uint16*)(pRspSent + 1) + numInClusters;
    897                        osal_memcpy(pRspSent->pOutClusters, outClusters, numOutClusters * sizeof(uint16));
    898                      }
    899                      else
    900                      {
    901                        pRspSent->pOutClusters = NULL;
   \                     ??ZDO_ProcessMatchDescReq_9:
   \   000118   E4           CLR     A
   \   000119   F0           MOVX    @DPTR,A
   \   00011A   A3           INC     DPTR
   \   00011B   F0           MOVX    @DPTR,A
    902                      }
    903          
    904                      osal_msg_send( *epDesc->epDesc->task_id, (uint8 *)pRspSent );
   \                     ??ZDO_ProcessMatchDescReq_10:
   \   00011C                ; Setup parameters for call to function osal_msg_send
   \   00011C   AA..         MOV     R2,?V0 + 2
   \   00011E   AB..         MOV     R3,?V0 + 3
   \   000120   85..82       MOV     DPL,?V0 + 14
   \   000123   85..83       MOV     DPH,?V0 + 15
   \   000126   A3           INC     DPTR
   \   000127   A3           INC     DPTR
   \   000128   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_326:
   \   00012B   F583         MOV     DPH,A
   \   00012D   8882         MOV     DPL,R0
   \   00012F   A3           INC     DPTR
   \   000130   12....       LCALL   ??Subroutine164_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_341:
   \   000133   F9           MOV     R1,A
   \   000134   12....       LCALL   ??osal_msg_send?relay
    905                    }
    906          
    907                    uint8Buf[epCnt++] = sDesc->EndPoint;
   \                     ??ZDO_ProcessMatchDescReq_11:
   \   000137   85..82       MOV     DPL,?V0 + 10
   \   00013A   85..83       MOV     DPH,?V0 + 11
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   C0E0         PUSH    A
   \   000140   85..82       MOV     DPL,?XSP + 0
   \   000143   85..83       MOV     DPH,?XSP + 1
   \   000146   E0           MOVX    A,@DPTR
   \   000147   F8           MOV     R0,A
   \   000148   74..         MOV     A,#ZDOBuildBuf & 0xff
   \   00014A   28           ADD     A,R0
   \   00014B   F582         MOV     DPL,A
   \   00014D   74..         MOV     A,#(ZDOBuildBuf >> 8) & 0xff
   \   00014F   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_386:
   \   000152   D0E0         POP     A
   \   000154   12....       LCALL   ?Subroutine46 & 0xFFFF
   \                     ??CrossCallReturnLabel_89:
   \   000157   04           INC     A
   \   000158   F0           MOVX    @DPTR,A
    908                  }
    909                }
    910          
    911                if ( allocated )
   \                     ??ZDO_ProcessMatchDescReq_12:
   \   000159   E5..         MOV     A,?V0 + 9
   \   00015B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00015D   5007         JNC     ??ZDO_ProcessMatchDescReq_13
    912                {
    913                  osal_mem_free( sDesc );
   \   00015F                ; Setup parameters for call to function osal_mem_free
   \   00015F   AA..         MOV     R2,?V0 + 10
   \   000161   AB..         MOV     R3,?V0 + 11
   \   000163   12....       LCALL   ??osal_mem_free?relay
    914                }
    915              }
    916              epDesc = epDesc->nextDesc;
   \                     ??ZDO_ProcessMatchDescReq_13:
   \   000166   85..82       MOV     DPL,?V0 + 14
   \   000169   85..83       MOV     DPH,?V0 + 15
   \                     ??ZDO_ProcessMatchDescReq_8:
   \   00016C   E0           MOVX    A,@DPTR
   \   00016D   F5..         MOV     ?V0 + 14,A
   \   00016F   A3           INC     DPTR
   \   000170   E0           MOVX    A,@DPTR
   \   000171   F5..         MOV     ?V0 + 15,A
   \   000173   E5..         MOV     A,?V0 + 14
   \   000175   45..         ORL     A,?V0 + 15
   \   000177   7003         JNZ     $+5
   \   000179   02....       LJMP    ??ZDO_ProcessMatchDescReq_14 & 0xFFFF
   \   00017C   85..82       MOV     DPL,?V0 + 14
   \   00017F   85..83       MOV     DPH,?V0 + 15
   \   000182   A3           INC     DPTR
   \   000183   A3           INC     DPTR
   \   000184   12....       LCALL   ?Subroutine74 & 0xFFFF
   \                     ??CrossCallReturnLabel_131:
   \   000187   8A82         MOV     DPL,R2
   \   000189   8B83         MOV     DPH,R3
   \   00018B   E0           MOVX    A,@DPTR
   \   00018C   FC           MOV     R4,A
   \   00018D   60D7         JZ      ??ZDO_ProcessMatchDescReq_13
   \   00018F   85..82       MOV     DPL,?V0 + 14
   \   000192   85..83       MOV     DPH,?V0 + 15
   \   000195   A3           INC     DPTR
   \   000196   A3           INC     DPTR
   \   000197   A3           INC     DPTR
   \   000198   A3           INC     DPTR
   \   000199   A3           INC     DPTR
   \   00019A   A3           INC     DPTR
   \   00019B   A3           INC     DPTR
   \   00019C   A3           INC     DPTR
   \   00019D   E0           MOVX    A,@DPTR
   \   00019E   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001A0   50C4         JNC     ??ZDO_ProcessMatchDescReq_13
   \   0001A2   85..82       MOV     DPL,?V0 + 14
   \   0001A5   85..83       MOV     DPH,?V0 + 15
   \   0001A8   A3           INC     DPTR
   \   0001A9   A3           INC     DPTR
   \   0001AA   12....       LCALL   ?Subroutine63 & 0xFFFF
   \                     ??CrossCallReturnLabel_240:
   \   0001AD   E582         MOV     A,DPL
   \   0001AF   4583         ORL     A,DPH
   \   0001B1   6010         JZ      ??ZDO_ProcessMatchDescReq_15
   \   0001B3                ; Setup parameters for indirect call
   \   0001B3   EC           MOV     A,R4
   \   0001B4   FA           MOV     R2,A
   \   0001B5   7901         MOV     R1,#0x1
   \   0001B7   12....       LCALL   ?CALL_IND
   \   0001BA   8A..         MOV     ?V0 + 10,R2
   \   0001BC   8B..         MOV     ?V0 + 11,R3
   \   0001BE   75..01       MOV     ?V0 + 9,#0x1
   \   0001C1   8011         SJMP    ??ZDO_ProcessMatchDescReq_16
   \                     ??ZDO_ProcessMatchDescReq_15:
   \   0001C3   8A82         MOV     DPL,R2
   \   0001C5   8B83         MOV     DPH,R3
   \   0001C7   A3           INC     DPTR
   \   0001C8   A3           INC     DPTR
   \   0001C9   A3           INC     DPTR
   \   0001CA   E0           MOVX    A,@DPTR
   \   0001CB   F5..         MOV     ?V0 + 10,A
   \   0001CD   A3           INC     DPTR
   \   0001CE   E0           MOVX    A,@DPTR
   \   0001CF   F5..         MOV     ?V0 + 11,A
   \   0001D1   75..00       MOV     ?V0 + 9,#0x0
   \                     ??ZDO_ProcessMatchDescReq_16:
   \   0001D4   E5..         MOV     A,?V0 + 10
   \   0001D6   45..         ORL     A,?V0 + 11
   \   0001D8   7003         JNZ     $+5
   \   0001DA   02....       LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \   0001DD   85..82       MOV     DPL,?V0 + 10
   \   0001E0   85..83       MOV     DPH,?V0 + 11
   \   0001E3   A3           INC     DPTR
   \   0001E4   E0           MOVX    A,@DPTR
   \   0001E5   65..         XRL     A,?V0 + 0
   \   0001E7   7004         JNZ     ??ZDO_ProcessMatchDescReq_17
   \   0001E9   A3           INC     DPTR
   \   0001EA   E0           MOVX    A,@DPTR
   \   0001EB   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessMatchDescReq_17:
   \   0001ED   600F         JZ      ??ZDO_ProcessMatchDescReq_18
   \   0001EF   74FF         MOV     A,#-0x1
   \   0001F1   65..         XRL     A,?V0 + 0
   \   0001F3   7004         JNZ     ??ZDO_ProcessMatchDescReq_19
   \   0001F5   74FF         MOV     A,#-0x1
   \   0001F7   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessMatchDescReq_19:
   \   0001F9   6003         JZ      $+5
   \   0001FB   02....       LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_18:
   \   0001FE                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   0001FE   85..82       MOV     DPL,?V0 + 10
   \   000201   85..83       MOV     DPH,?V0 + 11
   \   000204   A3           INC     DPTR
   \   000205   A3           INC     DPTR
   \   000206   A3           INC     DPTR
   \   000207   A3           INC     DPTR
   \   000208   A3           INC     DPTR
   \   000209   A3           INC     DPTR
   \   00020A   A3           INC     DPTR
   \   00020B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00020E   85..82       MOV     DPL,?V0 + 10
   \   000211   85..83       MOV     DPH,?V0 + 11
   \   000214   A3           INC     DPTR
   \   000215   A3           INC     DPTR
   \   000216   A3           INC     DPTR
   \   000217   A3           INC     DPTR
   \   000218   A3           INC     DPTR
   \   000219   A3           INC     DPTR
   \   00021A   E0           MOVX    A,@DPTR
   \   00021B   FC           MOV     R4,A
   \   00021C   7405         MOV     A,#0x5
   \   00021E   12....       LCALL   ?XSTACK_DISP0_8
   \   000221   12....       LCALL   ??Subroutine159_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_296:
   \   000224   A9..         MOV     R1,?V0 + 8
   \   000226   12....       LCALL   ??ZDO_AnyClusterMatches?relay
   \   000229   7402         MOV     A,#0x2
   \   00022B   12....       LCALL   ?DEALLOC_XSTACK8
   \   00022E   E9           MOV     A,R1
   \   00022F   703C         JNZ     ??ZDO_ProcessMatchDescReq_20
   \   000231                ; Setup parameters for call to function ZDO_AnyClusterMatches
   \   000231   85..82       MOV     DPL,?V0 + 10
   \   000234   85..83       MOV     DPH,?V0 + 11
   \   000237   A3           INC     DPTR
   \   000238   A3           INC     DPTR
   \   000239   A3           INC     DPTR
   \   00023A   A3           INC     DPTR
   \   00023B   A3           INC     DPTR
   \   00023C   A3           INC     DPTR
   \   00023D   A3           INC     DPTR
   \   00023E   A3           INC     DPTR
   \   00023F   A3           INC     DPTR
   \   000240   A3           INC     DPTR
   \   000241   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000244   85..82       MOV     DPL,?V0 + 10
   \   000247   85..83       MOV     DPH,?V0 + 11
   \   00024A   A3           INC     DPTR
   \   00024B   A3           INC     DPTR
   \   00024C   A3           INC     DPTR
   \   00024D   A3           INC     DPTR
   \   00024E   A3           INC     DPTR
   \   00024F   A3           INC     DPTR
   \   000250   A3           INC     DPTR
   \   000251   A3           INC     DPTR
   \   000252   A3           INC     DPTR
   \   000253   E0           MOVX    A,@DPTR
   \   000254   FC           MOV     R4,A
   \   000255   7403         MOV     A,#0x3
   \   000257   12....       LCALL   ?XSTACK_DISP0_8
   \   00025A   12....       LCALL   ??Subroutine159_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_297:
   \   00025D   A9..         MOV     R1,?V0 + 7
   \   00025F   12....       LCALL   ??ZDO_AnyClusterMatches?relay
   \   000262   7402         MOV     A,#0x2
   \   000264   12....       LCALL   ?DEALLOC_XSTACK8
   \   000267   E9           MOV     A,R1
   \   000268   7003         JNZ     $+5
   \   00026A   02....       LJMP    ??ZDO_ProcessMatchDescReq_12 & 0xFFFF
   \                     ??ZDO_ProcessMatchDescReq_20:
   \   00026D                ; Setup parameters for call to function osal_msg_allocate
   \   00026D   E5..         MOV     A,?V0 + 7
   \   00026F   25..         ADD     A,?V0 + 8
   \   000271   C3           CLR     C
   \   000272   33           RLC     A
   \   000273   240A         ADD     A,#0xa
   \   000275   FA           MOV     R2,A
   \   000276   7B00         MOV     R3,#0x0
   \   000278   12....       LCALL   ??osal_msg_allocate?relay
   \   00027B   8A..         MOV     ?V0 + 2,R2
   \   00027D   8B..         MOV     ?V0 + 3,R3
   \   00027F   EA           MOV     A,R2
   \   000280   45..         ORL     A,?V0 + 3
   \   000282   7003         JNZ     $+5
   \   000284   02....       LJMP    ??ZDO_ProcessMatchDescReq_11 & 0xFFFF
   \   000287   8A82         MOV     DPL,R2
   \   000289   8B83         MOV     DPH,R3
   \   00028B   74D2         MOV     A,#-0x2e
   \   00028D   F0           MOVX    @DPTR,A
   \   00028E   85..82       MOV     DPL,?V0 + 12
   \   000291   85..83       MOV     DPH,?V0 + 13
   \   000294   A3           INC     DPTR
   \   000295   A3           INC     DPTR
   \   000296   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_315:
   \   000299   8A82         MOV     DPL,R2
   \   00029B   8B83         MOV     DPH,R3
   \   00029D   A3           INC     DPTR
   \   00029E   A3           INC     DPTR
   \   00029F   12....       LCALL   ??Subroutine148_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_258:
   \   0002A2   8A82         MOV     DPL,R2
   \   0002A4   8B83         MOV     DPH,R3
   \   0002A6   A3           INC     DPTR
   \   0002A7   A3           INC     DPTR
   \   0002A8   A3           INC     DPTR
   \   0002A9   A3           INC     DPTR
   \   0002AA   E5..         MOV     A,?V0 + 8
   \   0002AC   12....       LCALL   ?Subroutine16 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0002AF   E5..         MOV     A,?V0 + 7
   \   0002B1   F0           MOVX    @DPTR,A
   \   0002B2   EA           MOV     A,R2
   \   0002B3   2405         ADD     A,#0x5
   \   0002B5   FA           MOV     R2,A
   \   0002B6   EB           MOV     A,R3
   \   0002B7   3400         ADDC    A,#0x0
   \   0002B9   FB           MOV     R3,A
   \   0002BA   E5..         MOV     A,?V0 + 8
   \   0002BC   6035         JZ      ??ZDO_ProcessMatchDescReq_21
   \   0002BE   E5..         MOV     A,?V0 + 2
   \   0002C0   240A         ADD     A,#0xa
   \   0002C2   F8           MOV     R0,A
   \   0002C3   E5..         MOV     A,?V0 + 3
   \   0002C5   3400         ADDC    A,#0x0
   \   0002C7   F9           MOV     R1,A
   \   0002C8   8A82         MOV     DPL,R2
   \   0002CA   8B83         MOV     DPH,R3
   \   0002CC   12....       LCALL   ??Subroutine148_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_259:
   \   0002CF                ; Setup parameters for call to function osal_memcpy
   \   0002CF   7403         MOV     A,#0x3
   \   0002D1   12....       LCALL   ?XSTACK_DISP0_8
   \   0002D4   12....       LCALL   ?Subroutine65 & 0xFFFF
   \                     ??CrossCallReturnLabel_119:
   \   0002D7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0002DA   E5..         MOV     A,?V0 + 8
   \   0002DC   C3           CLR     C
   \   0002DD   33           RLC     A
   \   0002DE   FC           MOV     R4,A
   \   0002DF   E4           CLR     A
   \   0002E0   33           RLC     A
   \   0002E1   FD           MOV     R5,A
   \   0002E2   8A82         MOV     DPL,R2
   \   0002E4   8B83         MOV     DPH,R3
   \   0002E6   12....       LCALL   ??Subroutine159_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_298:
   \   0002E9   12....       LCALL   ??osal_memcpy?relay
   \   0002EC   7403         MOV     A,#0x3
   \   0002EE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002F1   8008         SJMP    ??ZDO_ProcessMatchDescReq_22
   \                     ??ZDO_ProcessMatchDescReq_21:
   \   0002F3   8A82         MOV     DPL,R2
   \   0002F5   8B83         MOV     DPH,R3
   \   0002F7   E4           CLR     A
   \   0002F8   F0           MOVX    @DPTR,A
   \   0002F9   A3           INC     DPTR
   \   0002FA   F0           MOVX    @DPTR,A
   \                     ??ZDO_ProcessMatchDescReq_22:
   \   0002FB   E5..         MOV     A,?V0 + 2
   \   0002FD   2408         ADD     A,#0x8
   \   0002FF   F582         MOV     DPL,A
   \   000301   E5..         MOV     A,?V0 + 3
   \   000303   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_387:
   \   000306   E5..         MOV     A,?V0 + 7
   \   000308   7003         JNZ     $+5
   \   00030A   02....       LJMP    ??ZDO_ProcessMatchDescReq_9 & 0xFFFF
   \   00030D   E5..         MOV     A,?V0 + 8
   \   00030F   C3           CLR     C
   \   000310   33           RLC     A
   \   000311   F8           MOV     R0,A
   \   000312   E4           CLR     A
   \   000313   33           RLC     A
   \   000314   F9           MOV     R1,A
   \   000315   E5..         MOV     A,?V0 + 2
   \   000317   28           ADD     A,R0
   \   000318   F8           MOV     R0,A
   \   000319   E5..         MOV     A,?V0 + 3
   \   00031B   39           ADDC    A,R1
   \   00031C   F9           MOV     R1,A
   \   00031D   E8           MOV     A,R0
   \   00031E   240A         ADD     A,#0xa
   \   000320   FA           MOV     R2,A
   \   000321   E9           MOV     A,R1
   \   000322   3400         ADDC    A,#0x0
   \   000324   FB           MOV     R3,A
   \   000325   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_49:
   \   000328                ; Setup parameters for call to function osal_memcpy
   \   000328   7401         MOV     A,#0x1
   \   00032A   12....       LCALL   ?XSTACK_DISP0_8
   \   00032D   12....       LCALL   ?Subroutine65 & 0xFFFF
    917            }
   \                     ??CrossCallReturnLabel_120:
   \   000330   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000333   E5..         MOV     A,?V0 + 7
   \   000335   C3           CLR     C
   \   000336   33           RLC     A
   \   000337   FC           MOV     R4,A
   \   000338   E4           CLR     A
   \   000339   33           RLC     A
   \   00033A   FD           MOV     R5,A
   \   00033B   12....       LCALL   ??osal_memcpy?relay
   \   00033E   7403         MOV     A,#0x3
   \   000340   12....       LCALL   ?DEALLOC_XSTACK8
   \   000343   02....       LJMP    ??ZDO_ProcessMatchDescReq_10 & 0xFFFF
    918          
    919            if ( epCnt )
   \                     ??ZDO_ProcessMatchDescReq_14:
   \   000346   75....       MOV     ?V0 + 0,#`?<Constant "Match Desc Req">` & 0xff
   \   000349   75....       MOV     ?V0 + 1,#(`?<Constant "Match Desc Req">` >> 8) & 0xff
   \   00034C   85..82       MOV     DPL,?XSP + 0
   \   00034F   85..83       MOV     DPH,?XSP + 1
   \   000352   E0           MOVX    A,@DPTR
   \   000353   603E         JZ      ??ZDO_ProcessMatchDescReq_23
    920            {
    921              // Send the message if at least one match found.
    922              if ( ZSuccess == ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    923                        ZDAppNwkAddr.addr.shortAddr, epCnt, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse ) )
   \   000355                ; Setup parameters for call to function ZDP_EPRsp
   \   000355   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_291:
   \   000358   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00035B   75....       MOV     ?V0 + 2,#ZDOBuildBuf & 0xff
   \   00035E   75....       MOV     ?V0 + 3,#(ZDOBuildBuf >> 8) & 0xff
   \   000361   78..         MOV     R0,#?V0 + 2
   \   000363   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000366   7403         MOV     A,#0x3
   \   000368   12....       LCALL   ?XSTACK_DISP0_8
   \   00036B   12....       LCALL   ??Subroutine154_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_289:
   \   00036E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000371   90....       MOV     DPTR,#ZDAppNwkAddr
   \   000374   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000377   75..00       MOV     ?V0 + 2,#0x0
   \   00037A   78..         MOV     R0,#?V0 + 2
   \   00037C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00037F   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_134:
   \   000382   12....       LCALL   ??ZDP_EPRsp?relay
   \   000385   7407         MOV     A,#0x7
   \   000387   12....       LCALL   ?DEALLOC_XSTACK8
   \   00038A   E9           MOV     A,R1
   \   00038B   7050         JNZ     ??ZDO_ProcessMatchDescReq_24
    924              {
    925          #if defined( LCD_SUPPORTED )
    926                HalLcdWriteScreen( "Match Desc Req", "Rsp Sent" );
   \   00038D                ; Setup parameters for call to function HalLcdWriteScreen
   \   00038D   7C..         MOV     R4,#`?<Constant "Rsp Sent">` & 0xff
   \   00038F   7D..         MOV     R5,#(`?<Constant "Rsp Sent">` >> 8) & 0xff
   \   000391   8043         SJMP    ??ZDO_ProcessMatchDescReq_25
    927          #endif
    928              }
    929            }
    930            else
    931            {
    932              // No match found
    933              if (ADDR_NOT_BCAST == NLME_IsAddressBroadcast(aoi))
   \                     ??ZDO_ProcessMatchDescReq_23:
   \   000393                ; Setup parameters for call to function NLME_IsAddressBroadcast
   \   000393   EE           MOV     A,R6
   \   000394   FA           MOV     R2,A
   \   000395   EF           MOV     A,R7
   \   000396   FB           MOV     R3,A
   \   000397   12....       LCALL   ??NLME_IsAddressBroadcast?relay
   \   00039A   E9           MOV     A,R1
   \   00039B   7035         JNZ     ??ZDO_ProcessMatchDescReq_26
    934              {
    935                // send response message with match length = 0
    936                ZDP_MatchDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZDP_SUCCESS,
    937                                  ZDAppNwkAddr.addr.shortAddr, 0, (uint8 *)ZDOBuildBuf, inMsg->SecurityUse );
   \   00039D                ; Setup parameters for call to function ZDP_EPRsp
   \   00039D   12....       LCALL   ?Subroutine81 & 0xFFFF
   \                     ??CrossCallReturnLabel_292:
   \   0003A0   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003A3   75....       MOV     ?V0 + 2,#ZDOBuildBuf & 0xff
   \   0003A6   75....       MOV     ?V0 + 3,#(ZDOBuildBuf >> 8) & 0xff
   \   0003A9   78..         MOV     R0,#?V0 + 2
   \   0003AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003AE   75..00       MOV     ?V0 + 2,#0x0
   \   0003B1   78..         MOV     R0,#?V0 + 2
   \   0003B3   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003B6   90....       MOV     DPTR,#ZDAppNwkAddr
   \   0003B9   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0003BC   78..         MOV     R0,#?V0 + 2
   \   0003BE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0003C1   12....       LCALL   ?Subroutine75 & 0xFFFF
   \                     ??CrossCallReturnLabel_135:
   \   0003C4   12....       LCALL   ??ZDP_EPRsp?relay
   \   0003C7   7407         MOV     A,#0x7
   \   0003C9   12....       LCALL   ?DEALLOC_XSTACK8
    938          #if defined( LCD_SUPPORTED )
    939                HalLcdWriteScreen( "Match Desc Req", "Rsp Non Matched" );
   \   0003CC                ; Setup parameters for call to function HalLcdWriteScreen
   \   0003CC   7C..         MOV     R4,#`?<Constant "Rsp Non Matched">` & 0xff
   \   0003CE   7D..         MOV     R5,#(`?<Constant "Rsp Non Matched">` >> 8) & 0xff
   \   0003D0   8004         SJMP    ??ZDO_ProcessMatchDescReq_25
    940          #endif
    941              }
    942              else
    943              {
    944                // no response mesage for broadcast message
    945          #if defined( LCD_SUPPORTED )
    946                HalLcdWriteScreen( "Match Desc Req", "Non Matched" );
   \                     ??ZDO_ProcessMatchDescReq_26:
   \   0003D2                ; Setup parameters for call to function HalLcdWriteScreen
   \   0003D2   7C..         MOV     R4,#`?<Constant "Non Matched">` & 0xff
   \   0003D4   7D..         MOV     R5,#(`?<Constant "Non Matched">` >> 8) & 0xff
   \                     ??ZDO_ProcessMatchDescReq_25:
   \   0003D6   AA..         MOV     R2,?V0 + 0
   \   0003D8   AB..         MOV     R3,?V0 + 1
   \   0003DA   12....       LCALL   ??HalLcdWriteScreen?relay
    947          #endif
    948              }
    949            }
    950          
    951            if ( inClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_24:
   \   0003DD   7403         MOV     A,#0x3
   \   0003DF   12....       LCALL   ?XSTACK_DISP0_8
   \   0003E2   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_349:
   \   0003E5   600B         JZ      ??ZDO_ProcessMatchDescReq_27
    952            {
    953              osal_mem_free( inClusters );
   \   0003E7                ; Setup parameters for call to function osal_mem_free
   \   0003E7   7403         MOV     A,#0x3
   \   0003E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0003EC   12....       LCALL   ??Subroutine159_0 & 0xFFFF
    954            }
   \                     ??CrossCallReturnLabel_299:
   \   0003EF   12....       LCALL   ??osal_mem_free?relay
    955          
    956            if ( outClusters != NULL )
   \                     ??ZDO_ProcessMatchDescReq_27:
   \   0003F2   7401         MOV     A,#0x1
   \   0003F4   12....       LCALL   ?XSTACK_DISP0_8
   \   0003F7   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_350:
   \   0003FA   600B         JZ      ??ZDO_ProcessMatchDescReq_3
    957            {
    958              osal_mem_free( outClusters );
   \   0003FC                ; Setup parameters for call to function osal_mem_free
   \   0003FC   7401         MOV     A,#0x1
   \   0003FE   12....       LCALL   ?XSTACK_DISP0_8
   \   000401   12....       LCALL   ??Subroutine159_0 & 0xFFFF
    959            }
   \                     ??CrossCallReturnLabel_300:
   \   000404   12....       LCALL   ??osal_mem_free?relay
   \                     ??ZDO_ProcessMatchDescReq_3:
   \   000407   7405         MOV     A,#0x5
   \   000409   02....       LJMP    ?Subroutine4 & 0xFFFF
    960          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine99:
   \   000000   F5..         MOV     ?V0 + 2,A
   \   000002   E5..         MOV     A,?V0 + 3
   \   000004                REQUIRE ??Subroutine147_0
   \   000004                ; // Fall through to label ??Subroutine147_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine147_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 3,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine77:
   \   000000   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_217:
   \   000003   AA..         MOV     R2,?V0 + 2
   \   000005   AB..         MOV     R3,?V0 + 3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine75:
   \   000000   E5..         MOV     A,?V0 + 12
   \   000002   2402         ADD     A,#0x2
   \   000004   FC           MOV     R4,A
   \   000005   E5..         MOV     A,?V0 + 13
   \   000007   3400         ADDC    A,#0x0
   \   000009   FD           MOV     R5,A
   \   00000A   E5..         MOV     A,?V0 + 12
   \   00000C   240F         ADD     A,#0xf
   \   00000E   F582         MOV     DPL,A
   \   000010   E5..         MOV     A,?V0 + 13
   \   000012   12....       LCALL   ?Subroutine130 & 0xFFFF
   \                     ??CrossCallReturnLabel_338:
   \   000015   7A06         MOV     R2,#0x6
   \   000017   7B80         MOV     R3,#-0x80
   \   000019   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine65:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 4,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   75..00       MOV     ?V0 + 6,#0x0
   \   00000A   78..         MOV     R0,#?V0 + 4
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine148_0:
   \   000000   E8           MOV     A,R0
   \   000001                REQUIRE ??Subroutine149_0
   \   000001                ; // Fall through to label ??Subroutine149_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine149_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine150_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 0,A
   \   000003   78..         MOV     R0,#?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine81:
   \   000000   E5..         MOV     A,?V0 + 12
   \   000002   12....       LCALL   ??Subroutine172_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_381:
   \   000005   E5..         MOV     A,?V0 + 13
   \   000007                REQUIRE ??Subroutine153_0
   \   000007                ; // Fall through to label ??Subroutine153_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine153_0:
   \   000000   12....       LCALL   ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_459:
   \   000003                REQUIRE ??Subroutine154_0
   \   000003                ; // Fall through to label ??Subroutine154_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine154_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   78..         MOV     R0,#?V0 + 2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine74:
   \   000000   12....       LCALL   ?Subroutine124 & 0xFFFF
   \                     ??CrossCallReturnLabel_360:
   \   000003   FA           MOV     R2,A
   \   000004   E9           MOV     A,R1
   \   000005   FB           MOV     R3,A
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine157_0
   \   000003                ; // Fall through to label ??Subroutine157_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine157_0:
   \   000000   7F10         MOV     R7,#0x10
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine46:
   \   000000   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_188:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine60:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006   E0           MOVX    A,@DPTR
   \   000007   F8           MOV     R0,A
   \   000008   A3           INC     DPTR
   \   000009   8582..       MOV     ?V0 + 2,DPL
   \   00000C   8583..       MOV     ?V0 + 3,DPH
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine12:
   \   000000   A3           INC     DPTR
   \   000001   F0           MOVX    @DPTR,A
   \   000002   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_233:
   \   000005   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_285:
   \   000008   F5..         MOV     ?V0 + 2,A
   \   00000A   A3           INC     DPTR
   \   00000B   E0           MOVX    A,@DPTR
   \   00000C   F5..         MOV     ?V0 + 3,A
   \   00000E   85..82       MOV     DPL,?V0 + 2
   \   000011   F583         MOV     DPH,A
   \   000013   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_204:
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine139:
   \   000000   EA           MOV     A,R2
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   EB           MOV     A,R3
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine175_0:
   \   000000   12....       LCALL   ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_461:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine119:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EA           MOV     A,R2
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine183_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F583         MOV     DPH,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine80:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   FA           MOV     R2,A
   \   000003   85..82       MOV     DPL,?V0 + 2
   \   000006   85..83       MOV     DPH,?V0 + 3
   \   000009   A3           INC     DPTR
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine16:
   \   000000   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_192:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine114:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   A3           INC     DPTR
   \   000008   22           RET
    961          
    962          #if defined ( REFLECTOR )
    963          /*********************************************************************
    964           * @fn      ZDO_ProcessBindUnbindReq()
    965           *
    966           * @brief   Called to process a Bind or Unbind Request message.
    967           *
    968           * @param   inMsg  - incoming message (request)
    969           * @param   pReq - place to put parsed information
    970           *
    971           * @return  none
    972           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    973          void ZDO_ProcessBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ProcessBindUnbindReq:
    974          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   \   00000E   8C..         MOV     ?V0 + 0,R4
   \   000010   8D..         MOV     ?V0 + 1,R5
    975            zAddrType_t SourceAddr;       // Binding Source addres
    976            byte bindStat;
    977          
    978            SourceAddr.addrMode = Addr64Bit;
   \   000012   740B         MOV     A,#0xb
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   7403         MOV     A,#0x3
   \   000019   F0           MOVX    @DPTR,A
    979            osal_cpyExtAddr( SourceAddr.addr.extAddr, pReq->srcAddress );
   \   00001A                ; Setup parameters for call to function sAddrExtCpy
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   AA82         MOV     R2,DPL
   \   00001F   AB83         MOV     R3,DPH
   \   000021   12....       LCALL   ??sAddrExtCpy?relay
    980          
    981            // If the local device is not the primary binding cache
    982            // check the src address of the bind request.
    983            // If it is not the local device's extended address
    984            // discard the request.
    985            if ( !osal_ExtAddrEqual( SourceAddr.addr.extAddr, NLME_GetExtAddr()) ||
    986                  (pReq->dstAddress.addrMode != Addr64Bit &&
    987                   pReq->dstAddress.addrMode != AddrGroup) )
   \   000024   EE           MOV     A,R6
   \   000025   240F         ADD     A,#0xf
   \   000027   F5..         MOV     ?V0 + 14,A
   \   000029   EF           MOV     A,R7
   \   00002A   3400         ADDC    A,#0x0
   \   00002C   F5..         MOV     ?V0 + 15,A
   \   00002E   EE           MOV     A,R6
   \   00002F   240E         ADD     A,#0xe
   \   000031   F5..         MOV     ?V0 + 12,A
   \   000033   EF           MOV     A,R7
   \   000034   3400         ADDC    A,#0x0
   \   000036   F5..         MOV     ?V0 + 13,A
   \   000038   EE           MOV     A,R6
   \   000039   2402         ADD     A,#0x2
   \   00003B   F5..         MOV     ?V0 + 10,A
   \   00003D   EF           MOV     A,R7
   \   00003E   3400         ADDC    A,#0x0
   \   000040   F5..         MOV     ?V0 + 11,A
   \   000042   EE           MOV     A,R6
   \   000043   240C         ADD     A,#0xc
   \   000045   F5..         MOV     ?V0 + 8,A
   \   000047   EF           MOV     A,R7
   \   000048   3400         ADDC    A,#0x0
   \   00004A   F5..         MOV     ?V0 + 9,A
   \   00004C                ; Setup parameters for call to function sAddrExtCmp
   \   00004C                ; Setup parameters for call to function NLME_GetExtAddr
   \   00004C   12....       LCALL   ??NLME_GetExtAddr?relay
   \   00004F   EA           MOV     A,R2
   \   000050   FC           MOV     R4,A
   \   000051   EB           MOV     A,R3
   \   000052   FD           MOV     R5,A
   \   000053   7403         MOV     A,#0x3
   \   000055   12....       LCALL   ?XSTACK_DISP0_8
   \   000058   AA82         MOV     R2,DPL
   \   00005A   AB83         MOV     R3,DPH
   \   00005C   12....       LCALL   ??sAddrExtCmp?relay
   \   00005F   E9           MOV     A,R1
   \   000060   601A         JZ      ??ZDO_ProcessBindUnbindReq_0
   \   000062   E5..         MOV     A,?V0 + 0
   \   000064   2413         ADD     A,#0x13
   \   000066   FA           MOV     R2,A
   \   000067   E5..         MOV     A,?V0 + 1
   \   000069   3400         ADDC    A,#0x0
   \   00006B   FB           MOV     R3,A
   \   00006C   8A82         MOV     DPL,R2
   \   00006E   8B83         MOV     DPH,R3
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F8           MOV     R0,A
   \   000072   7403         MOV     A,#0x3
   \   000074   68           XRL     A,R0
   \   000075   6010         JZ      ??ZDO_ProcessBindUnbindReq_1
   \   000077   7401         MOV     A,#0x1
   \   000079   68           XRL     A,R0
   \   00007A   600B         JZ      ??ZDO_ProcessBindUnbindReq_1
    988            {
    989              bindStat = ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessBindUnbindReq_0:
   \   00007C   85..82       MOV     DPL,?XSP + 0
   \   00007F   85..83       MOV     DPH,?XSP + 1
   \   000082   7484         MOV     A,#-0x7c
   \   000084   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    990            }
    991            else
    992            {
    993              // Check source & destination endpoints
    994              if ( (pReq->srcEndpoint == 0 || pReq->srcEndpoint > MAX_ENDPOINTS)
    995                  || (( pReq->dstAddress.addrMode == Addr64Bit ) &&
    996                      (pReq->dstEndpoint == 0 || pReq->dstEndpoint > MAX_ENDPOINTS)) )
   \                     ??ZDO_ProcessBindUnbindReq_1:
   \   000087   E5..         MOV     A,?V0 + 0
   \   000089   2408         ADD     A,#0x8
   \   00008B   F5..         MOV     ?V0 + 6,A
   \   00008D   E5..         MOV     A,?V0 + 1
   \   00008F   3400         ADDC    A,#0x0
   \   000091   F5..         MOV     ?V0 + 7,A
   \   000093   85..82       MOV     DPL,?V0 + 6
   \   000096   F583         MOV     DPH,A
   \   000098   E0           MOVX    A,@DPTR
   \   000099   F9           MOV     R1,A
   \   00009A   6024         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   00009C   74FF         MOV     A,#-0x1
   \   00009E   69           XRL     A,R1
   \   00009F   601F         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   0000A1   E5..         MOV     A,?V0 + 0
   \   0000A3   2414         ADD     A,#0x14
   \   0000A5   F5..         MOV     ?V0 + 2,A
   \   0000A7   E5..         MOV     A,?V0 + 1
   \   0000A9   12....       LCALL   ??Subroutine147_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_247:
   \   0000AC   7403         MOV     A,#0x3
   \   0000AE   68           XRL     A,R0
   \   0000AF   701A         JNZ     ??ZDO_ProcessBindUnbindReq_4
   \   0000B1   85..82       MOV     DPL,?V0 + 2
   \   0000B4   85..83       MOV     DPH,?V0 + 3
   \   0000B7   E0           MOVX    A,@DPTR
   \   0000B8   F8           MOV     R0,A
   \   0000B9   6005         JZ      ??ZDO_ProcessBindUnbindReq_3
   \   0000BB   74FF         MOV     A,#-0x1
   \   0000BD   68           XRL     A,R0
   \   0000BE   700B         JNZ     ??ZDO_ProcessBindUnbindReq_4
    997              {
    998                bindStat = ZDP_INVALID_EP;
   \                     ??ZDO_ProcessBindUnbindReq_3:
   \   0000C0   85..82       MOV     DPL,?XSP + 0
   \   0000C3   85..83       MOV     DPH,?XSP + 1
   \   0000C6   7482         MOV     A,#-0x7e
   \   0000C8   02....       LJMP    ??ZDO_ProcessBindUnbindReq_2 & 0xFFFF
    999              }
   1000              else
   1001              {
   1002                if ( inMsg->clusterID == Bind_req )
   \                     ??ZDO_ProcessBindUnbindReq_4:
   \   0000CB   E5..         MOV     A,?V0 + 0
   \   0000CD   2409         ADD     A,#0x9
   \   0000CF   F5..         MOV     ?V0 + 4,A
   \   0000D1   E5..         MOV     A,?V0 + 1
   \   0000D3   3400         ADDC    A,#0x0
   \   0000D5   F5..         MOV     ?V0 + 5,A
   \   0000D7   E5..         MOV     A,?V0 + 0
   \   0000D9   240B         ADD     A,#0xb
   \   0000DB   FE           MOV     R6,A
   \   0000DC   E5..         MOV     A,?V0 + 1
   \   0000DE   3400         ADDC    A,#0x0
   \   0000E0   FF           MOV     R7,A
   \   0000E1   85..82       MOV     DPL,?V0 + 8
   \   0000E4   85..83       MOV     DPH,?V0 + 9
   \   0000E7   E0           MOVX    A,@DPTR
   \   0000E8   6421         XRL     A,#0x21
   \   0000EA   7002         JNZ     ??ZDO_ProcessBindUnbindReq_5
   \   0000EC   A3           INC     DPTR
   \   0000ED   E0           MOVX    A,@DPTR
   \                     ??ZDO_ProcessBindUnbindReq_5:
   \   0000EE   6003         JZ      $+5
   \   0000F0   02....       LJMP    ??ZDO_ProcessBindUnbindReq_6 & 0xFFFF
   1003                {
   1004                  // Assume the table is full
   1005                  bindStat = ZDP_TABLE_FULL;
   \   0000F3   85..82       MOV     DPL,?XSP + 0
   \   0000F6   85..83       MOV     DPH,?XSP + 1
   \   0000F9   748C         MOV     A,#-0x74
   \   0000FB   12....       LCALL   ?Subroutine41 & 0xFFFF
   1006          
   1007          #if defined( APP_TP ) || defined( APP_TP2 )
   1008                  // For ZigBee Conformance Testing
   1009                  if ( bindNumOfEntries() < gNWK_MAX_BINDING_ENTRIES )
   1010          #endif
   1011                  {
   1012          #if !defined ( ZDP_BIND_SKIP_VALIDATION )
   1013                    uint16 nwkAddr;
   1014          
   1015                    // Verifies that a valid NWK address exists for the device
   1016                    // before creating a Binding entry. If NWK address does not
   1017                    // exist the request is sent out and the BindReq is saved, to
   1018                    // create the Bind Entry once the NwkAddrRsp is received
   1019                    if ( ( pReq->dstAddress.addrMode == Addr64Bit ) &&
   1020                         ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE ) )
   \                     ??CrossCallReturnLabel_73:
   \   0000FE   E0           MOVX    A,@DPTR
   \   0000FF   6403         XRL     A,#0x3
   \   000101   6003         JZ      $+5
   \   000103   02....       LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
   \   000106                ; Setup parameters for call to function APSME_LookupNwkAddr
   \   000106   7401         MOV     A,#0x1
   \   000108   12....       LCALL   ?XSTACK_DISP0_8
   \   00010B   AC82         MOV     R4,DPL
   \   00010D   AD83         MOV     R5,DPH
   \   00010F   EE           MOV     A,R6
   \   000110   FA           MOV     R2,A
   \   000111   EF           MOV     A,R7
   \   000112   FB           MOV     R3,A
   \   000113   12....       LCALL   ??APSME_LookupNwkAddr?relay
   \   000116   E9           MOV     A,R1
   \   000117   6003         JZ      $+5
   \   000119   02....       LJMP    ??ZDO_ProcessBindUnbindReq_7 & 0xFFFF
   1021                    {
   1022                      // find an empty bind slot in the pending Bind Req list
   1023                      ZDO_PendingBindReq_t *pPendingBind;
   1024          
   1025                      if ( ( pPendingBind = ZDApp_GetEmptyPendingBindReq() ) != NULL )
   \   00011C                ; Setup parameters for call to function ZDApp_GetEmptyPendingBindReq
   \   00011C   12....       LCALL   ??ZDApp_GetEmptyPendingBindReq?relay
   \   00011F   8A..         MOV     ?V0 + 2,R2
   \   000121   8B..         MOV     ?V0 + 3,R3
   \   000123   EA           MOV     A,R2
   \   000124   45..         ORL     A,?V0 + 3
   \   000126   7003         JNZ     $+5
   \   000128   02....       LJMP    ??ZDO_ProcessBindUnbindReq_8 & 0xFFFF
   1026                      {
   1027                        // copy the received request into the empty slot and all required info
   1028                        osal_memcpy( &(pPendingBind->bindReq), pReq, sizeof( ZDO_BindUnbindReq_t ) );
   \   00012B                ; Setup parameters for call to function osal_memcpy
   \   00012B   85....       MOV     ?V0 + 4,?V0 + 0
   \   00012E   85....       MOV     ?V0 + 5,?V0 + 1
   \   000131   75..00       MOV     ?V0 + 6,#0x0
   \   000134   78..         MOV     R0,#?V0 + 4
   \   000136   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000139   7C15         MOV     R4,#0x15
   \   00013B   7D00         MOV     R5,#0x0
   \   00013D   12....       LCALL   ??osal_memcpy?relay
   \   000140   7403         MOV     A,#0x3
   \   000142   12....       LCALL   ?DEALLOC_XSTACK8
   1029          
   1030                        pPendingBind->srcAddr = inMsg->srcAddr;
   \   000145   85..82       MOV     DPL,?V0 + 10
   \   000148   85..83       MOV     DPH,?V0 + 11
   \   00014B   E5..         MOV     A,?V0 + 2
   \   00014D   2415         ADD     A,#0x15
   \   00014F   FC           MOV     R4,A
   \   000150   E5..         MOV     A,?V0 + 3
   \   000152   3400         ADDC    A,#0x0
   \   000154   FD           MOV     R5,A
   \   000155   7409         MOV     A,#0x9
   \   000157   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
   1031                        pPendingBind->securityUse = inMsg->SecurityUse;
   \   00015A   85..82       MOV     DPL,?V0 + 12
   \   00015D   85..83       MOV     DPH,?V0 + 13
   \   000160   E0           MOVX    A,@DPTR
   \   000161   C0E0         PUSH    A
   \   000163   E5..         MOV     A,?V0 + 2
   \   000165   241E         ADD     A,#0x1e
   \   000167   F582         MOV     DPL,A
   \   000169   E5..         MOV     A,?V0 + 3
   \   00016B   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_388:
   \   00016E   D0E0         POP     A
   \   000170   F0           MOVX    @DPTR,A
   1032                        pPendingBind->transSeq = inMsg->TransSeq;
   \   000171   85..82       MOV     DPL,?V0 + 14
   \   000174   85..83       MOV     DPH,?V0 + 15
   \   000177   E0           MOVX    A,@DPTR
   \   000178   C0E0         PUSH    A
   \   00017A   E5..         MOV     A,?V0 + 2
   \   00017C   241F         ADD     A,#0x1f
   \   00017E   F582         MOV     DPL,A
   \   000180   E5..         MOV     A,?V0 + 3
   \   000182   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_389:
   \   000185   D0E0         POP     A
   \   000187   F0           MOVX    @DPTR,A
   1033                        pPendingBind->age = MAX_TIME_ADDR_REQ;
   \   000188   E5..         MOV     A,?V0 + 2
   \   00018A   2420         ADD     A,#0x20
   \   00018C   F582         MOV     DPL,A
   \   00018E   E5..         MOV     A,?V0 + 3
   \   000190   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_390:
   \   000193   7405         MOV     A,#0x5
   \   000195   F0           MOVX    @DPTR,A
   1034          
   1035                        // create an entry in Address Manager
   1036                        ( void )bindAddrIndexGet( &(pReq->dstAddress) );
   \   000196                ; Setup parameters for call to function bindAddrIndexGet
   \   000196   EE           MOV     A,R6
   \   000197   FA           MOV     R2,A
   \   000198   EF           MOV     A,R7
   \   000199   FB           MOV     R3,A
   \   00019A   12....       LCALL   ??bindAddrIndexGet?relay
   1037          
   1038                        ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   \   00019D                ; Setup parameters for call to function ZDP_NwkAddrReq
   \   00019D   7D00         MOV     R5,#0x0
   \   00019F   7C00         MOV     R4,#0x0
   \   0001A1   7900         MOV     R1,#0x0
   \   0001A3   EE           MOV     A,R6
   \   0001A4   FA           MOV     R2,A
   \   0001A5   EF           MOV     A,R7
   \   0001A6   FB           MOV     R3,A
   \   0001A7   12....       LCALL   ??ZDP_NwkAddrReq?relay
   1039          
   1040                        osal_start_timerEx( ZDAppTaskID, ZDO_PENDING_BIND_REQ_EVT,
   1041                                            AGE_OUT_PEND_BIND_REQ_DELAY );
   \   0001AA                ; Setup parameters for call to function osal_start_timerEx
   \   0001AA   90....       MOV     DPTR,#__Constant_3e8
   \   0001AD   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   0001B0   7A00         MOV     R2,#0x0
   \   0001B2   7B10         MOV     R3,#0x10
   \   0001B4   90....       MOV     DPTR,#ZDAppTaskID
   \   0001B7   E0           MOVX    A,@DPTR
   \   0001B8   F9           MOV     R1,A
   \   0001B9   12....       LCALL   ??osal_start_timerEx?relay
   \   0001BC   7404         MOV     A,#0x4
   \   0001BE   12....       LCALL   ?DEALLOC_XSTACK8
   1042                        return;
   \   0001C1   02....       LJMP    ??ZDO_ProcessBindUnbindReq_9 & 0xFFFF
   1043                      }
   1044                    }
   1045                    // Add Bind entry
   1046                    else if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1047                                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_7:
   \   0001C4                ; Setup parameters for call to function APSME_BindRequest
   \   0001C4   12....       LCALL   ?Subroutine69 & 0xFFFF
   1048                    {
   1049                      // valid entry
   1050                      bindStat = ZDP_SUCCESS;
   1051          
   1052                      // Notify to save info into NV
   1053                      ZDApp_NVUpdate();
   1054                    }
   1055          #else // ZDP_BIND_SKIP_VALIDATION  is defined
   1056                    // Create binding entry first independently of existance of  valid NWK addres
   1057                    // if NWK address does not exist a request is sent out
   1058                    if ( APSME_BindRequest( pReq->srcEndpoint, pReq->clusterID,
   1059                                   &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   1060                    {
   1061                      uint16 nwkAddr;
   1062          
   1063                      // valid entry
   1064                      bindStat = ZDP_SUCCESS;
   1065          
   1066                      // Notify to save info into NV
   1067                      ZDApp_NVUpdate();
   1068          
   1069                      // Check for the destination address
   1070                      if ( pReq->dstAddress.addrMode == Addr64Bit )
   1071                      {
   1072                        if ( APSME_LookupNwkAddr( pReq->dstAddress.addr.extAddr, &nwkAddr ) == FALSE )
   1073                        {
   1074                          ZDP_NwkAddrReq( pReq->dstAddress.addr.extAddr, ZDP_ADDR_REQTYPE_SINGLE, 0, 0 );
   1075                        }
   1076                      }
   1077                    }
   1078          #endif
   1079                  }
   1080                }
   \                     ??CrossCallReturnLabel_271:
   \   0001C7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001CA   EE           MOV     A,R6
   \   0001CB   FC           MOV     R4,A
   \   0001CC   EF           MOV     A,R7
   \   0001CD   FD           MOV     R5,A
   \   0001CE   85..82       MOV     DPL,?V0 + 4
   \   0001D1   85..83       MOV     DPH,?V0 + 5
   \   0001D4   12....       LCALL   ??Subroutine159_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_301:
   \   0001D7   85..82       MOV     DPL,?V0 + 6
   \   0001DA   85..83       MOV     DPH,?V0 + 7
   \   0001DD   E0           MOVX    A,@DPTR
   \   0001DE   F9           MOV     R1,A
   \   0001DF   12....       LCALL   ??APSME_BindRequest?relay
   \   0001E2   7401         MOV     A,#0x1
   \   0001E4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001E7   E9           MOV     A,R1
   \   0001E8   7036         JNZ     ??ZDO_ProcessBindUnbindReq_8
   \   0001EA   801E         SJMP    ??ZDO_ProcessBindUnbindReq_10
   1081                else // Unbind_req
   1082                {
   1083                  if ( APSME_UnBindRequest( pReq->srcEndpoint, pReq->clusterID,
   1084                                 &(pReq->dstAddress), pReq->dstEndpoint ) == ZSuccess )
   \                     ??ZDO_ProcessBindUnbindReq_6:
   \   0001EC                ; Setup parameters for call to function APSME_UnBindRequest
   \   0001EC   12....       LCALL   ?Subroutine69 & 0xFFFF
   \                     ??CrossCallReturnLabel_272:
   \   0001EF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0001F2   EE           MOV     A,R6
   \   0001F3   FC           MOV     R4,A
   \   0001F4   EF           MOV     A,R7
   \   0001F5   FD           MOV     R5,A
   \   0001F6   85..82       MOV     DPL,?V0 + 4
   \   0001F9   85..83       MOV     DPH,?V0 + 5
   \   0001FC   12....       LCALL   ??Subroutine159_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_302:
   \   0001FF   12....       LCALL   ??APSME_UnBindRequest?relay
   \   000202   7401         MOV     A,#0x1
   \   000204   12....       LCALL   ?DEALLOC_XSTACK8
   \   000207   E9           MOV     A,R1
   \   000208   700D         JNZ     ??ZDO_ProcessBindUnbindReq_11
   1085                  {
   1086                    bindStat = ZDP_SUCCESS;
   \                     ??ZDO_ProcessBindUnbindReq_10:
   \   00020A   85..82       MOV     DPL,?XSP + 0
   \   00020D   85..83       MOV     DPH,?XSP + 1
   \   000210   E4           CLR     A
   \   000211   F0           MOVX    @DPTR,A
   1087          
   1088                    // Notify to save info into NV
   1089                    ZDApp_NVUpdate();
   \   000212                ; Setup parameters for call to function ZDApp_NVUpdate
   \   000212   12....       LCALL   ??ZDApp_NVUpdate?relay
   \   000215   8009         SJMP    ??ZDO_ProcessBindUnbindReq_8
   1090                  }
   1091                  else
   1092                    bindStat = ZDP_NO_ENTRY;
   \                     ??ZDO_ProcessBindUnbindReq_11:
   \   000217   85..82       MOV     DPL,?XSP + 0
   \   00021A   85..83       MOV     DPH,?XSP + 1
   \   00021D   7488         MOV     A,#-0x78
   \                     ??ZDO_ProcessBindUnbindReq_2:
   \   00021F   F0           MOVX    @DPTR,A
   1093                }
   1094              }
   1095            }
   1096          
   1097            // Send back a response message
   1098            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr),
   1099                         (inMsg->clusterID | ZDO_RESPONSE_BIT), 1, &bindStat,
   1100                         inMsg->SecurityUse );
   \                     ??ZDO_ProcessBindUnbindReq_8:
   \   000220                ; Setup parameters for call to function ZDP_SendData
   \   000220   85..82       MOV     DPL,?V0 + 12
   \   000223   85..83       MOV     DPH,?V0 + 13
   \   000226   12....       LCALL   ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_269:
   \   000229   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00022C   7401         MOV     A,#0x1
   \   00022E   12....       LCALL   ?XSTACK_DISP0_8
   \   000231   8582..       MOV     ?V0 + 0,DPL
   \   000234   8583..       MOV     ?V0 + 1,DPH
   \   000237   78..         MOV     R0,#?V0 + 0
   \   000239   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00023C   85..82       MOV     DPL,?V0 + 8
   \   00023F   85..83       MOV     DPH,?V0 + 9
   \   000242   12....       LCALL   ?Subroutine76 & 0xFFFF
   \                     ??CrossCallReturnLabel_138:
   \   000245   4480         ORL     A,#0x80
   \   000247   F5..         MOV     ?V0 + 1,A
   \   000249   78..         MOV     R0,#?V0 + 0
   \   00024B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00024E   7901         MOV     R1,#0x1
   \   000250   AC..         MOV     R4,?V0 + 10
   \   000252   AD..         MOV     R5,?V0 + 11
   \   000254   AA..         MOV     R2,?V0 + 14
   \   000256   AB..         MOV     R3,?V0 + 15
   \   000258   12....       LCALL   ??ZDP_SendData?relay
   \   00025B   7405         MOV     A,#0x5
   \   00025D   12....       LCALL   ?DEALLOC_XSTACK8
   1101          }
   \                     ??ZDO_ProcessBindUnbindReq_9:
   \   000260   740C         MOV     A,#0xc
   \   000262   02....       LJMP    ?Subroutine4 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine69:
   \   000000   85..82       MOV     DPL,?V0 + 2
   \   000003   85..83       MOV     DPH,?V0 + 3
   \   000006                REQUIRE ??Subroutine150_0
   \   000006                ; // Fall through to label ??Subroutine150_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine41:
   \   000000   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_193:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine115:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   22           RET
   1102          #endif // REFLECTOR
   1103          
   1104          /*********************************************************************
   1105           * @fn      ZDO_UpdateAddrManager
   1106           *
   1107           * @brief   Update the Address Manager.
   1108           *
   1109           * @param   nwkAddr - network address
   1110           * @param   extAddr - extended address
   1111           *
   1112           * @return  none
   1113           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1114          void ZDO_UpdateAddrManager( uint16 nwkAddr, uint8 *extAddr )
   \                     ZDO_UpdateAddrManager:
   1115          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 13
   \   000004   74F3         MOV     A,#-0xd
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
   1116            AddrMgrEntry_t addrEntry;
   1117          
   1118            // Update the address manager
   1119            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   E4           CLR     A
   \   000010   F0           MOVX    @DPTR,A
   1120            addrEntry.nwkAddr = nwkAddr;
   \   000011   04           INC     A
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   12....       LCALL   ?Subroutine31 & 0xFFFF
   1121            AddrMgrExtAddrSet( addrEntry.extAddr, extAddr );
   \                     ??CrossCallReturnLabel_50:
   \   000018                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000018   7403         MOV     A,#0x3
   \   00001A   12....       LCALL   ?XSTACK_DISP0_8
   \   00001D   AA82         MOV     R2,DPL
   \   00001F   AB83         MOV     R3,DPH
   \   000021   12....       LCALL   ??AddrMgrExtAddrSet?relay
   1122            AddrMgrEntryUpdate( &addrEntry );
   \   000024                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000024   85..82       MOV     DPL,?XSP + 0
   \   000027   85..83       MOV     DPH,?XSP + 1
   \   00002A   AA82         MOV     R2,DPL
   \   00002C   AB83         MOV     R3,DPH
   \   00002E   12....       LCALL   ??AddrMgrEntryUpdate?relay
   1123          }
   \   000031   740D         MOV     A,#0xd
   \   000033   12....       LCALL   ?DEALLOC_XSTACK8
   \   000036   02....       LJMP    ?Subroutine0 & 0xFFFF
   1124          
   1125          /*********************************************************************
   1126           * @fn      ZDO_ProcessServerDiscReq
   1127           *
   1128           * @brief   Process the Server_Discovery_req message.
   1129           *
   1130           * @param   inMsg  - incoming message (request)
   1131           *
   1132           * @return  none
   1133           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1134          void ZDO_ProcessServerDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessServerDiscReq:
   1135          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   1136            uint16 serverMask = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   1137            uint16 matchMask = serverMask & ZDO_Config_Node_Descriptor.ServerMask;
   \   000009   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_152:
   \   00000C   12....       LCALL   ??Subroutine141_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_238:
   \   00000F   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_203:
   \   000012   F8           MOV     R0,A
   \   000013   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor + 8
   \   000016   E0           MOVX    A,@DPTR
   \   000017   58           ANL     A,R0
   \   000018   F5..         MOV     ?V0 + 0,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   59           ANL     A,R1
   \   00001D   F5..         MOV     ?V0 + 1,A
   1138          
   1139            if ( matchMask )
   \   00001F   E5..         MOV     A,?V0 + 0
   \   000021   45..         ORL     A,?V0 + 1
   \   000023   601F         JZ      ??ZDO_ProcessServerDiscReq_0
   1140            {
   1141              ZDP_ServerDiscRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSUCCESS,
   1142                          ZDAppNwkAddr.addr.shortAddr, matchMask, inMsg->SecurityUse );
   \   000025                ; Setup parameters for call to function ZDP_ServerDiscRsp
   \   000025   78..         MOV     R0,#?V0 + 0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00002D   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000030   12....       LCALL   ?Subroutine93 & 0xFFFF
   1143            }
   \                     ??CrossCallReturnLabel_283:
   \   000033   FD           MOV     R5,A
   \   000034   7C00         MOV     R4,#0x0
   \   000036   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_218:
   \   000039   12....       LCALL   ?Subroutine92 & 0xFFFF
   \                     ??CrossCallReturnLabel_336:
   \   00003C   12....       LCALL   ??ZDP_ServerDiscRsp?relay
   \   00003F   7404         MOV     A,#0x4
   \   000041   12....       LCALL   ?DEALLOC_XSTACK8
   1144          }
   \                     ??ZDO_ProcessServerDiscReq_0:
   \   000044   02....       LJMP    ??Subroutine144_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine87:
   \   000000   EE           MOV     A,R6
   \   000001   2413         ADD     A,#0x13
   \   000003   F582         MOV     DPL,A
   \   000005   EF           MOV     A,R7
   \   000006   12....       LCALL   ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_453:
   \   000009   22           RET
   1145          
   1146          #if defined ( ZIGBEE_CHILD_AGING )
   1147          /*********************************************************************
   1148           * @fn          ZDO_ProcessEndDeviceTimeoutReq
   1149           *
   1150           * @brief       This function processes and responds to the
   1151           *              End_Device_Timeout_Req message.
   1152           *
   1153           * @param       inMsg  - incoming message (request)
   1154           *
   1155           * @return      none
   1156           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1157          void ZDO_ProcessEndDeviceTimeoutReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessEndDeviceTimeoutReq:
   1158          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1159            uint8 stat = ZDP_SUCCESS;
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   1160            uint8 *ieee = NULL;
   1161            uint16 reqTimeout;
   1162          
   1163            // Only process this message if Child Table Management is enabled OR
   1164            // If message was broadcast OR multicast OR
   1165            // if the NWK src and the MAC src are not the same) drop message
   1166            if ( ( zgChildAgingEnable == FALSE ) ||
   1167                 ( inMsg->wasBroadcast == TRUE ) ||
   1168                 ( inMsg->srcAddr.addr.shortAddr != inMsg->macSrcAddr ) )
   \   000016   90....       MOV     DPTR,#zgChildAgingEnable
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   7003         JNZ     $+5
   \   00001C   02....       LJMP    ??ZDO_ProcessEndDeviceTimeoutReq_0 & 0xFFFF
   \   00001F   EE           MOV     A,R6
   \   000020   240B         ADD     A,#0xb
   \   000022   12....       LCALL   ??Subroutine151_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_279:
   \   000025   6401         XRL     A,#0x1
   \   000027   7003         JNZ     $+5
   \   000029   02....       LJMP    ??ZDO_ProcessEndDeviceTimeoutReq_0 & 0xFFFF
   \   00002C   EE           MOV     A,R6
   \   00002D   2402         ADD     A,#0x2
   \   00002F   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_166:
   \   000032   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_316:
   \   000035   EE           MOV     A,R6
   \   000036   2415         ADD     A,#0x15
   \   000038   12....       LCALL   ??Subroutine151_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_280:
   \   00003B   68           XRL     A,R0
   \   00003C   7003         JNZ     ??ZDO_ProcessEndDeviceTimeoutReq_1
   \   00003E   A3           INC     DPTR
   \   00003F   E0           MOVX    A,@DPTR
   \   000040   69           XRL     A,R1
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_1:
   \   000041   6003         JZ      $+5
   \   000043   02....       LJMP    ??ZDO_ProcessEndDeviceTimeoutReq_0 & 0xFFFF
   1169            {
   1170              // the message does not come from a child, drop it
   1171              return;
   1172            }
   1173          
   1174            ieee = inMsg->asdu;
   \   000046   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_153:
   \   000049   12....       LCALL   ?Subroutine74 & 0xFFFF
   1175          
   1176            reqTimeout = BUILD_UINT16( inMsg->asdu[Z_EXTADDR_LEN], inMsg->asdu[Z_EXTADDR_LEN+1] );
   \                     ??CrossCallReturnLabel_132:
   \   00004C   8882         MOV     DPL,R0
   \   00004E   8983         MOV     DPH,R1
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   A3           INC     DPTR
   \   000053   A3           INC     DPTR
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   E0           MOVX    A,@DPTR
   \   000059   FC           MOV     R4,A
   \   00005A   8882         MOV     DPL,R0
   \   00005C   8983         MOV     DPH,R1
   \   00005E   A3           INC     DPTR
   \   00005F   A3           INC     DPTR
   \   000060   A3           INC     DPTR
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   A3           INC     DPTR
   \   000067   E0           MOVX    A,@DPTR
   \   000068   F9           MOV     R1,A
   \   000069   EC           MOV     A,R4
   \   00006A   2400         ADD     A,#0x0
   \   00006C   F5..         MOV     ?V0 + 2,A
   \   00006E   E4           CLR     A
   \   00006F   39           ADDC    A,R1
   \   000070   F5..         MOV     ?V0 + 3,A
   1177          
   1178            if ( ( ( reqTimeout < ZDO_MIN_REQ_TIMEOUT ) || ( reqTimeout > ZDO_MAX_REQ_TIMEOUT ) ) ||
   1179                 ( ZSTACK_END_DEVICE_BUILD ) )
   \   000072   EC           MOV     A,R4
   \   000073   45..         ORL     A,?V0 + 3
   \   000075   6008         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_2
   \   000077   EC           MOV     A,R4
   \   000078   9471         SUBB    A,#0x71
   \   00007A   E9           MOV     A,R1
   \   00007B   9408         SUBB    A,#0x8
   \   00007D   400A         JC      ??ZDO_ProcessEndDeviceTimeoutReq_3
   1180            {
   1181              stat = ZDP_INVALID_REQTYPE;
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_2:
   \   00007F   85..82       MOV     DPL,?XSP + 0
   \   000082   85..83       MOV     DPH,?XSP + 1
   \   000085   7480         MOV     A,#-0x80
   \   000087   8037         SJMP    ??ZDO_ProcessEndDeviceTimeoutReq_4
   1182            }
   1183            else
   1184            {
   1185              associated_devices_t *pAssoc;
   1186          
   1187              if ( ( ( pAssoc = AssocGetWithExt( ieee ) ) != NULL ) &&
   1188                   ( ( pAssoc->nodeRelation >= CHILD_RFD ) &&
   1189                     ( pAssoc->nodeRelation <= CHILD_RFD_RX_IDLE ) ) )
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_3:
   \   000089                ; Setup parameters for call to function AssocGetWithExt
   \   000089   12....       LCALL   ??AssocGetWithExt?relay
   \   00008C   8A..         MOV     ?V0 + 4,R2
   \   00008E   8B..         MOV     ?V0 + 5,R3
   \   000090   A8..         MOV     R0,?V0 + 4
   \   000092   A9..         MOV     R1,?V0 + 5
   \   000094   E8           MOV     A,R0
   \   000095   49           ORL     A,R1
   \   000096   6020         JZ      ??ZDO_ProcessEndDeviceTimeoutReq_5
   \   000098   8882         MOV     DPL,R0
   \   00009A   8983         MOV     DPH,R1
   \   00009C   A3           INC     DPTR
   \   00009D   A3           INC     DPTR
   \   00009E   A3           INC     DPTR
   \   00009F   A3           INC     DPTR
   \   0000A0   E0           MOVX    A,@DPTR
   \   0000A1   14           DEC     A
   \   0000A2   C3           CLR     C
   \   0000A3   9402         SUBB    A,#0x2
   \   0000A5   5011         JNC     ??ZDO_ProcessEndDeviceTimeoutReq_5
   1190              {
   1191                pAssoc->timeoutCounter = reqTimeout;
   \   0000A7   E8           MOV     A,R0
   \   0000A8   2412         ADD     A,#0x12
   \   0000AA   12....       LCALL   ?Subroutine97 & 0xFFFF
   1192                pAssoc->endDevKaTimeout = reqTimeout;
   \                     ??CrossCallReturnLabel_162:
   \   0000AD   E8           MOV     A,R0
   \   0000AE   2414         ADD     A,#0x14
   \   0000B0   12....       LCALL   ?Subroutine97 & 0xFFFF
   1193          
   1194                // Set event to save NV
   1195                ZDApp_NVUpdate();
   \                     ??CrossCallReturnLabel_163:
   \   0000B3                ; Setup parameters for call to function ZDApp_NVUpdate
   \   0000B3   12....       LCALL   ??ZDApp_NVUpdate?relay
   \   0000B6   8009         SJMP    ??ZDO_ProcessEndDeviceTimeoutReq_6
   1196              }
   1197              else
   1198              {
   1199                stat = ZDP_DEVICE_NOT_FOUND;
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_5:
   \   0000B8   85..82       MOV     DPL,?XSP + 0
   \   0000BB   85..83       MOV     DPH,?XSP + 1
   \   0000BE   7481         MOV     A,#-0x7f
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_4:
   \   0000C0   F0           MOVX    @DPTR,A
   1200              }
   1201          
   1202            }
   1203          
   1204            ZDP_EndDeviceTimeoutRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat,
   1205                                     inMsg->SecurityUse );
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_6:
   \   0000C1                ; Setup parameters for call to function ZDP_SendData
   \   0000C1   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_382:
   \   0000C4   EF           MOV     A,R7
   \   0000C5   12....       LCALL   ??Subroutine153_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_290:
   \   0000C8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000CB   7401         MOV     A,#0x1
   \   0000CD   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D0   8582..       MOV     ?V0 + 2,DPL
   \   0000D3   8583..       MOV     ?V0 + 3,DPH
   \   0000D6   78..         MOV     R0,#?V0 + 2
   \   0000D8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DB   75..1F       MOV     ?V0 + 2,#0x1f
   \   0000DE   75..80       MOV     ?V0 + 3,#-0x80
   \   0000E1   78..         MOV     R0,#?V0 + 2
   \   0000E3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E6   7901         MOV     R1,#0x1
   \   0000E8   AC..         MOV     R4,?V0 + 0
   \   0000EA   AD..         MOV     R5,?V0 + 1
   \   0000EC   EE           MOV     A,R6
   \   0000ED   240F         ADD     A,#0xf
   \   0000EF   FA           MOV     R2,A
   \   0000F0   EF           MOV     A,R7
   \   0000F1   3400         ADDC    A,#0x0
   \   0000F3   FB           MOV     R3,A
   \   0000F4   12....       LCALL   ??ZDP_SendData?relay
   \   0000F7   7405         MOV     A,#0x5
   \   0000F9   12....       LCALL   ?DEALLOC_XSTACK8
   1206          }
   \                     ??ZDO_ProcessEndDeviceTimeoutReq_0:
   \   0000FC   7401         MOV     A,#0x1
   \   0000FE   02....       LJMP    ?Subroutine3 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine97:
   \   000000   F582         MOV     DPL,A
   \   000002   E9           MOV     A,R1
   \   000003   12....       LCALL   ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_454:
   \   000006   E5..         MOV     A,?V0 + 2
   \   000008   F0           MOVX    @DPTR,A
   \   000009   A3           INC     DPTR
   \   00000A   E5..         MOV     A,?V0 + 3
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine101:
   \   000000   F5..         MOV     ?V0 + 0,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F5..         MOV     ?V0 + 1,A
   \   000007   85..82       MOV     DPL,?V0 + 0
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET
   1207          #endif // ZIGBEE_CHILD_AGING
   1208          
   1209          /*********************************************************************
   1210           * Call Back Functions from APS  - API
   1211           */
   1212          
   1213          /*********************************************************************
   1214           * @fn          ZDO_EndDeviceTimeoutCB
   1215           *
   1216           * @brief       This function handles the binding timer for the End
   1217           *              Device Bind command.
   1218           *
   1219           * @param       none
   1220           *
   1221           * @return      none
   1222           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1223          void ZDO_EndDeviceTimeoutCB( void )
   \                     ZDO_EndDeviceTimeoutCB:
   1224          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   1225          #if defined ( REFLECTOR )
   1226            byte stat;
   1227            if ( ZDO_EDBind )
   \   00000A   90....       MOV     DPTR,#ZDO_EDBind
   \   00000D   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_351:
   \   000010   7003         JNZ     $+5
   \   000012   02....       LJMP    ??ZDO_EndDeviceTimeoutCB_0 & 0xFFFF
   1228            {
   1229              stat = ZDO_EDBind->status;
   1230          
   1231              // Send the response message to the first sent
   1232              ZDO_SendEDBindRsp( ZDO_EDBind->SrcTransSeq, &(ZDO_EDBind->SrcAddr),
   1233                                  stat, ZDO_EDBind->SecurityUse );
   \   000015   E0           MOVX    A,@DPTR
   \   000016   C8           XCH     A,R0
   \   000017   2416         ADD     A,#0x16
   \   000019   F582         MOV     DPL,A
   \   00001B   E8           MOV     A,R0
   \   00001C   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_273:
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_91:
   \   000028   F583         MOV     DPH,A
   \   00002A   8882         MOV     DPL,R0
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   C0E0         PUSH    A
   \   00002F   7401         MOV     A,#0x1
   \   000031   12....       LCALL   ?XSTACK_DISP0_8
   \   000034   D0E0         POP     A
   \   000036   12....       LCALL   ?Subroutine47 & 0xFFFF
   \                     ??CrossCallReturnLabel_90:
   \   000039   C8           XCH     A,R0
   \   00003A   2415         ADD     A,#0x15
   \   00003C   F582         MOV     DPL,A
   \   00003E   E8           MOV     A,R0
   \   00003F   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_391:
   \   000042   12....       LCALL   ??Subroutine150_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_270:
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000048   7401         MOV     A,#0x1
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   8582..       MOV     ?V0 + 0,DPL
   \   000050   8583..       MOV     ?V0 + 1,DPH
   \   000053   78..         MOV     R0,#?V0 + 0
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000058   75..20       MOV     ?V0 + 0,#0x20
   \   00005B   75..80       MOV     ?V0 + 1,#-0x80
   \   00005E   78..         MOV     R0,#?V0 + 0
   \   000060   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000063   7901         MOV     R1,#0x1
   \   000065   90....       MOV     DPTR,#ZDO_EDBind
   \   000068   E0           MOVX    A,@DPTR
   \   000069   2401         ADD     A,#0x1
   \   00006B   FC           MOV     R4,A
   \   00006C   A3           INC     DPTR
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   3400         ADDC    A,#0x0
   \   000070   FD           MOV     R5,A
   \   000071   7406         MOV     A,#0x6
   \   000073   12....       LCALL   ?XSTACK_DISP0_8
   \   000076   AA82         MOV     R2,DPL
   \   000078   AB83         MOV     R3,DPH
   \   00007A   12....       LCALL   ??ZDP_SendData?relay
   \   00007D   7405         MOV     A,#0x5
   \   00007F   12....       LCALL   ?DEALLOC_XSTACK8
   \   000082                ; Setup parameters for call to function HalLcdWriteString
   \   000082   7901         MOV     R1,#0x1
   \   000084   7A..         MOV     R2,#`?<Constant "End Device Bind">` & 0xff
   \   000086   7B..         MOV     R3,#(`?<Constant "End Device Bind">` >> 8) & 0xff
   \   000088   12....       LCALL   ??HalLcdWriteString?relay
   \   00008B   85..82       MOV     DPL,?XSP + 0
   \   00008E   85..83       MOV     DPH,?XSP + 1
   \   000091   E0           MOVX    A,@DPTR
   \   000092   7902         MOV     R1,#0x2
   \   000094   7006         JNZ     ??ZDO_EndDeviceTimeoutCB_1
   \   000096                ; Setup parameters for call to function HalLcdWriteString
   \   000096   7A..         MOV     R2,#`?<Constant "Success Sent">` & 0xff
   \   000098   7B..         MOV     R3,#(`?<Constant "Success Sent">` >> 8) & 0xff
   \   00009A   8004         SJMP    ??ZDO_EndDeviceTimeoutCB_2
   \                     ??ZDO_EndDeviceTimeoutCB_1:
   \   00009C                ; Setup parameters for call to function HalLcdWriteString
   \   00009C   7A..         MOV     R2,#`?<Constant "Timeout">` & 0xff
   \   00009E   7B..         MOV     R3,#(`?<Constant "Timeout">` >> 8) & 0xff
   \                     ??ZDO_EndDeviceTimeoutCB_2:
   \   0000A0   12....       LCALL   ??HalLcdWriteString?relay
   1234          
   1235              ZDO_RemoveEndDeviceBind();
   \   0000A3   90....       MOV     DPTR,#ZDO_EDBind
   \   0000A6   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   1236            }
   \                     ??CrossCallReturnLabel_352:
   \   0000A9   602A         JZ      ??ZDO_EndDeviceTimeoutCB_0
   \   0000AB   E0           MOVX    A,@DPTR
   \   0000AC   C8           XCH     A,R0
   \   0000AD   2410         ADD     A,#0x10
   \   0000AF   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_294:
   \   0000B2   6003         JZ      ??ZDO_EndDeviceTimeoutCB_3
   \   0000B4                ; Setup parameters for call to function osal_mem_free
   \   0000B4   12....       LCALL   ??osal_mem_free?relay
   \                     ??ZDO_EndDeviceTimeoutCB_3:
   \   0000B7   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_329:
   \   0000BA   C8           XCH     A,R0
   \   0000BB   2413         ADD     A,#0x13
   \   0000BD   12....       LCALL   ?Subroutine70 & 0xFFFF
   \                     ??CrossCallReturnLabel_295:
   \   0000C0   6003         JZ      ??ZDO_EndDeviceTimeoutCB_4
   \   0000C2                ; Setup parameters for call to function osal_mem_free
   \   0000C2   12....       LCALL   ??osal_mem_free?relay
   \                     ??ZDO_EndDeviceTimeoutCB_4:
   \   0000C5                ; Setup parameters for call to function osal_mem_free
   \   0000C5   90....       MOV     DPTR,#ZDO_EDBind
   \   0000C8   12....       LCALL   ??Subroutine159_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_303:
   \   0000CB   12....       LCALL   ??osal_mem_free?relay
   \   0000CE   90....       MOV     DPTR,#ZDO_EDBind
   \   0000D1   E4           CLR     A
   \   0000D2   F0           MOVX    @DPTR,A
   \   0000D3   A3           INC     DPTR
   \   0000D4   F0           MOVX    @DPTR,A
   1237          #endif  // REFLECTOR
   1238          }
   \                     ??ZDO_EndDeviceTimeoutCB_0:
   \   0000D5   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine70:
   \   000000   F582         MOV     DPL,A
   \   000002   E8           MOV     A,R0
   \   000003   12....       LCALL   ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_452:
   \   000006                REQUIRE ??Subroutine155_0
   \   000006                ; // Fall through to label ??Subroutine155_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine155_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FB           MOV     R3,A
   \   000005   EA           MOV     A,R2
   \   000006   4B           ORL     A,R3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine47:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function ZDP_SendData
   \   000001   12....       LCALL   ?Subroutine127 & 0xFFFF
   \                     ??CrossCallReturnLabel_330:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine127:
   \   000000   90....       MOV     DPTR,#ZDO_EDBind
   \   000003                REQUIRE ??Subroutine156_0
   \   000003                ; // Fall through to label ??Subroutine156_0
   1239          
   1240          /*********************************************************************
   1241           * Optional Management Messages
   1242           */
   1243          
   1244          /*********************************************************************
   1245           * @fn          ZDO_ProcessMgmtLqiReq
   1246           *
   1247           * @brief       This function handles parsing the incoming Management
   1248           *              LQI request and generate the response.
   1249           *
   1250           *   Note:      This function will limit the number of items returned
   1251           *              to ZDO_MAX_LQI_ITEMS items.
   1252           *
   1253           * @param       inMsg - incoming message (request)
   1254           *
   1255           * @return      none
   1256           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1257          void ZDO_ProcessMgmtLqiReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLqiReq:
   1258          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 37
   \   000005   74DB         MOV     A,#-0x25
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 14,R2
   \   00000C   8B..         MOV     ?V0 + 15,R3
   1259            byte x;
   1260            byte index;
   1261            byte numItems;
   1262            byte maxItems;
   1263            ZDP_MgmtLqiItem_t* table = NULL;
   \   00000E   75..00       MOV     ?V0 + 12,#0x0
   \   000011   75..00       MOV     ?V0 + 13,#0x0
   1264            ZDP_MgmtLqiItem_t* item;
   1265            neighborEntry_t    entry;
   1266            byte aItems;
   1267            associated_devices_t *aDevice;
   1268            AddrMgrEntry_t  nwkEntry;
   1269            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ?Subroutine51 & 0xFFFF
   1270          
   1271            // Get the number of neighbor items
   1272            NLME_GetRequest( nwkNumNeighborTableEntries, 0, &maxItems );
   \                     ??CrossCallReturnLabel_96:
   \   000017   799C         MOV     R1,#-0x64
   \   000019   12....       LCALL   ??NLME_GetRequest?relay
   1273          
   1274            // Get the number of associated items
   1275            aItems = (uint8)AssocCount( PARENT, CHILD_FFD_RX_IDLE );
   \   00001C                ; Setup parameters for call to function AssocCount
   \   00001C   7A04         MOV     R2,#0x4
   \   00001E   7900         MOV     R1,#0x0
   \   000020   12....       LCALL   ??AssocCount?relay
   \   000023   EA           MOV     A,R2
   \   000024   F5..         MOV     ?V0 + 2,A
   1276          
   1277            // Total number of items
   1278            maxItems += aItems;
   \   000026   85..82       MOV     DPL,?XSP + 0
   \   000029   85..83       MOV     DPH,?XSP + 1
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   25..         ADD     A,?V0 + 2
   \   00002F   F0           MOVX    @DPTR,A
   1279          
   1280            // Start with the supplied index
   1281            if ( maxItems > StartIndex )
   \   000030   F8           MOV     R0,A
   \   000031   E5..         MOV     A,?V0 + 4
   \   000033   C3           CLR     C
   \   000034   98           SUBB    A,R0
   \   000035   4003         JC      $+5
   \   000037   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_0 & 0xFFFF
   1282            {
   1283              numItems = maxItems - StartIndex;
   \   00003A   E0           MOVX    A,@DPTR
   \   00003B   C3           CLR     C
   \   00003C   95..         SUBB    A,?V0 + 4
   \   00003E   F5..         MOV     ?V0 + 1,A
   1284          
   1285              // limit the size of the list
   1286              if ( numItems > ZDO_MAX_LQI_ITEMS )
   \   000040   C3           CLR     C
   \   000041   9404         SUBB    A,#0x4
   \   000043   4003         JC      ??ZDO_ProcessMgmtLqiReq_1
   1287                numItems = ZDO_MAX_LQI_ITEMS;
   \   000045   75..03       MOV     ?V0 + 1,#0x3
   1288          
   1289              // Allocate the memory to build the table
   1290              table = (ZDP_MgmtLqiItem_t*)osal_mem_alloc( (short)
   1291                        ( numItems * sizeof( ZDP_MgmtLqiItem_t ) ) );
   \                     ??ZDO_ProcessMgmtLqiReq_1:
   \   000048                ; Setup parameters for call to function osal_mem_alloc
   \   000048   E5..         MOV     A,?V0 + 1
   \   00004A   75F01A       MOV     B,#0x1a
   \   00004D   A4           MUL     AB
   \   00004E   FA           MOV     R2,A
   \   00004F   ABF0         MOV     R3,B
   \   000051   12....       LCALL   ??osal_mem_alloc?relay
   \   000054   8A..         MOV     ?V0 + 12,R2
   \   000056   8B..         MOV     ?V0 + 13,R3
   1292          
   1293              if ( table != NULL )
   \   000058   EA           MOV     A,R2
   \   000059   45..         ORL     A,?V0 + 13
   \   00005B   7003         JNZ     $+5
   \   00005D   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   1294              {
   1295                x = 0;
   \   000060   75..00       MOV     ?V0 + 3,#0x0
   1296                item = table;
   \   000063   AE..         MOV     R6,?V0 + 12
   \   000065   AF..         MOV     R7,?V0 + 13
   1297                index = StartIndex;
   \   000067   85....       MOV     ?V0 + 0,?V0 + 4
   \   00006A   02....       LJMP    ??CrossCallReturnLabel_62 & 0xFFFF
   1298          
   1299                // Loop through associated items and build list
   1300                for ( ; x < numItems; x++ )
   1301                {
   1302                  if ( index < aItems )
   1303                  {
   1304                    // get next associated device
   1305                    aDevice = AssocFindDevice( index++ );
   1306          
   1307                    // set basic fields
   1308                    item->panID   = _NIB.nwkPanId;
   1309                    osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1310                    item->nwkAddr = aDevice->shortAddr;
   1311                    item->permit  = ZDP_MGMT_BOOL_UNKNOWN;
   1312                    item->depth   = 0xFF;
   1313                    item->lqi     = aDevice->linkInfo.rxLqi;
   1314          
   1315                    // set extented address
   1316                    nwkEntry.user    = ADDRMGR_USER_DEFAULT;
   1317                    nwkEntry.nwkAddr = aDevice->shortAddr;
   1318          
   1319                    if ( AddrMgrEntryLookupNwk( &nwkEntry ) == TRUE )
   1320                    {
   1321                      osal_cpyExtAddr( item->extAddr, nwkEntry.extAddr );
   1322                    }
   1323                    else
   1324                    {
   1325                      osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   \                     ??ZDO_ProcessMgmtLqiReq_3:
   \   00006D                ; Setup parameters for call to function osal_memset
   \   00006D   7C08         MOV     R4,#0x8
   \   00006F   7D00         MOV     R5,#0x0
   \   000071   79FF         MOV     R1,#-0x1
   \   000073   AA..         MOV     R2,?V0 + 10
   \   000075   AB..         MOV     R3,?V0 + 11
   \   000077   12....       LCALL   ??osal_memset?relay
   1326                    }
   1327          
   1328                    // use association info to set other fields
   1329                    if ( aDevice->nodeRelation == PARENT )
   \                     ??ZDO_ProcessMgmtLqiReq_4:
   \   00007A   E5..         MOV     A,?V0 + 6
   \   00007C   2404         ADD     A,#0x4
   \   00007E   F8           MOV     R0,A
   \   00007F   E5..         MOV     A,?V0 + 7
   \   000081   3400         ADDC    A,#0x0
   \   000083   F9           MOV     R1,A
   \   000084   EE           MOV     A,R6
   \   000085   2416         ADD     A,#0x16
   \   000087   FA           MOV     R2,A
   \   000088   EF           MOV     A,R7
   \   000089   3400         ADDC    A,#0x0
   \   00008B   FB           MOV     R3,A
   \   00008C   EE           MOV     A,R6
   \   00008D   2415         ADD     A,#0x15
   \   00008F   FC           MOV     R4,A
   \   000090   EF           MOV     A,R7
   \   000091   3400         ADDC    A,#0x0
   \   000093   FD           MOV     R5,A
   \   000094   EE           MOV     A,R6
   \   000095   2414         ADD     A,#0x14
   \   000097   F5..         MOV     ?V0 + 10,A
   \   000099   EF           MOV     A,R7
   \   00009A   3400         ADDC    A,#0x0
   \   00009C   F5..         MOV     ?V0 + 11,A
   \   00009E   8882         MOV     DPL,R0
   \   0000A0   8983         MOV     DPH,R1
   \   0000A2   E0           MOVX    A,@DPTR
   \   0000A3   7030         JNZ     ??ZDO_ProcessMgmtLqiReq_5
   1330                    {
   1331                      if (  aDevice->shortAddr == 0 )
   \   0000A5   85..82       MOV     DPL,?V0 + 6
   \   0000A8   85..83       MOV     DPH,?V0 + 7
   \   0000AB   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_353:
   \   0000AE   85..82       MOV     DPL,?V0 + 10
   \   0000B1   85..83       MOV     DPH,?V0 + 11
   \   0000B4   7004         JNZ     ??ZDO_ProcessMgmtLqiReq_6
   1332                      {
   1333                        item->devType = ZDP_MGMT_DT_COORD;
   \   0000B6   E4           CLR     A
   \   0000B7   F0           MOVX    @DPTR,A
   1334                        item->depth = 0;
   \   0000B8   8008         SJMP    ??ZDO_ProcessMgmtLqiReq_7
   1335                      }
   1336                      else
   1337                      {
   1338                        item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_6:
   \   0000BA   7401         MOV     A,#0x1
   \   0000BC   F0           MOVX    @DPTR,A
   1339                        item->depth = _NIB.nodeDepth - 1;
   \   0000BD   90....       MOV     DPTR,#_NIB + 52
   \   0000C0   E0           MOVX    A,@DPTR
   \   0000C1   14           DEC     A
   \                     ??ZDO_ProcessMgmtLqiReq_7:
   \   0000C2   85..82       MOV     DPL,?V0 + 8
   \   0000C5   85..83       MOV     DPH,?V0 + 9
   \   0000C8   F0           MOVX    @DPTR,A
   1340                      }
   1341          
   1342                      item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   \   0000C9   8C82         MOV     DPL,R4
   \   0000CB   8D83         MOV     DPH,R5
   \   0000CD   7402         MOV     A,#0x2
   \   0000CF   12....       LCALL   ?Subroutine41 & 0xFFFF
   1343                      item->relation = ZDP_MGMT_REL_PARENT;
   1344                    }
   \                     ??CrossCallReturnLabel_74:
   \   0000D2   E4           CLR     A
   \   0000D3   8033         SJMP    ??ZDO_ProcessMgmtLqiReq_8
   1345                    else
   1346                    {
   1347                      // If not parent, then it's a child
   1348                      item->depth = _NIB.nodeDepth + 1;
   \                     ??ZDO_ProcessMgmtLqiReq_5:
   \   0000D5   90....       MOV     DPTR,#_NIB + 52
   \   0000D8   E0           MOVX    A,@DPTR
   \   0000D9   04           INC     A
   \   0000DA   85..82       MOV     DPL,?V0 + 8
   \   0000DD   85..83       MOV     DPH,?V0 + 9
   \   0000E0   12....       LCALL   ?Subroutine14 & 0xFFFF
   1349          
   1350                      if ( aDevice->nodeRelation < CHILD_FFD )
   \                     ??CrossCallReturnLabel_6:
   \   0000E3   C3           CLR     C
   \   0000E4   9403         SUBB    A,#0x3
   \   0000E6   85..82       MOV     DPL,?V0 + 10
   \   0000E9   85..83       MOV     DPH,?V0 + 11
   \   0000EC   4003         JC      $+5
   \   0000EE   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_9 & 0xFFFF
   1351                      {
   1352                        item->devType = ZDP_MGMT_DT_ENDDEV;
   \   0000F1   7402         MOV     A,#0x2
   \   0000F3   12....       LCALL   ?Subroutine14 & 0xFFFF
   1353          
   1354                        if ( aDevice->nodeRelation == CHILD_RFD )
   1355                        {
   1356                          item->rxOnIdle = FALSE;
   1357                        }
   1358                        else
   1359                        {
   1360                          item->rxOnIdle = TRUE;
   1361                        }
   1362                      }
   \                     ??CrossCallReturnLabel_7:
   \   0000F6   6401         XRL     A,#0x1
   \   0000F8   7003         JNZ     $+5
   \   0000FA   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_10 & 0xFFFF
   1363                      else
   1364                      {
   1365                        item->devType = ZDP_MGMT_DT_ROUTER;
   1366          
   1367                        if ( aDevice->nodeRelation == CHILD_FFD )
   1368                        {
   1369                          item->rxOnIdle = FALSE;
   1370                        }
   1371                        else
   1372                        {
   1373                          item->rxOnIdle = TRUE;
   \                     ??ZDO_ProcessMgmtLqiReq_11:
   \   0000FD   8C82         MOV     DPL,R4
   \   0000FF   8D83         MOV     DPH,R5
   \   000101   7401         MOV     A,#0x1
   1374                        }
   \                     ??ZDO_ProcessMgmtLqiReq_12:
   \   000103   12....       LCALL   ?Subroutine41 & 0xFFFF
   1375                      }
   1376          
   1377                      item->relation = ZDP_MGMT_REL_CHILD;
   \                     ??CrossCallReturnLabel_75:
   \   000106   7401         MOV     A,#0x1
   \                     ??ZDO_ProcessMgmtLqiReq_8:
   \   000108   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_62:
   \   00010B   E5..         MOV     A,?V0 + 3
   \   00010D   C3           CLR     C
   \   00010E   95..         SUBB    A,?V0 + 1
   \   000110   4003         JC      $+5
   \   000112   02....       LJMP    ??CrossCallReturnLabel_63 & 0xFFFF
   \   000115   E5..         MOV     A,?V0 + 0
   \   000117   C3           CLR     C
   \   000118   95..         SUBB    A,?V0 + 2
   \   00011A   4003         JC      $+5
   \   00011C   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_13 & 0xFFFF
   \   00011F                ; Setup parameters for call to function AssocFindDevice
   \   00011F   85....       MOV     ?V0 + 6,?V0 + 0
   \   000122   AA..         MOV     R2,?V0 + 6
   \   000124   7B00         MOV     R3,#0x0
   \   000126   12....       LCALL   ??AssocFindDevice?relay
   \   000129   8A..         MOV     ?V0 + 6,R2
   \   00012B   8B..         MOV     ?V0 + 7,R3
   \   00012D   05..         INC     ?V0 + 0
   \   00012F   90....       MOV     DPTR,#_NIB + 33
   \   000132   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   000135   12....       LCALL   ??sAddrExtCpy?relay
   \   000138   85..82       MOV     DPL,?V0 + 6
   \   00013B   85..83       MOV     DPH,?V0 + 7
   \   00013E   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_317:
   \   000141   EE           MOV     A,R6
   \   000142   2412         ADD     A,#0x12
   \   000144   F582         MOV     DPL,A
   \   000146   EF           MOV     A,R7
   \   000147   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_392:
   \   00014A   E8           MOV     A,R0
   \   00014B   F0           MOVX    @DPTR,A
   \   00014C   A3           INC     DPTR
   \   00014D   E9           MOV     A,R1
   \   00014E   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   000151   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_164:
   \   000154   74FF         MOV     A,#-0x1
   \   000156   F0           MOVX    @DPTR,A
   \   000157   85..82       MOV     DPL,?V0 + 6
   \   00015A   85..83       MOV     DPH,?V0 + 7
   \   00015D   A3           INC     DPTR
   \   00015E   A3           INC     DPTR
   \   00015F   A3           INC     DPTR
   \   000160   A3           INC     DPTR
   \   000161   A3           INC     DPTR
   \   000162   A3           INC     DPTR
   \   000163   A3           INC     DPTR
   \   000164   A3           INC     DPTR
   \   000165   A3           INC     DPTR
   \   000166   A3           INC     DPTR
   \   000167   E0           MOVX    A,@DPTR
   \   000168   C0E0         PUSH    A
   \   00016A   EE           MOV     A,R6
   \   00016B   2419         ADD     A,#0x19
   \   00016D   F582         MOV     DPL,A
   \   00016F   EF           MOV     A,R7
   \   000170   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_393:
   \   000173   D0E0         POP     A
   \   000175   F0           MOVX    @DPTR,A
   \   000176   7401         MOV     A,#0x1
   \   000178   12....       LCALL   ?XSTACK_DISP0_8
   \   00017B   E4           CLR     A
   \   00017C   F0           MOVX    @DPTR,A
   \   00017D   85..82       MOV     DPL,?V0 + 6
   \   000180   85..83       MOV     DPH,?V0 + 7
   \   000183   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_318:
   \   000186   7402         MOV     A,#0x2
   \   000188   12....       LCALL   ?XSTACK_DISP0_8
   \   00018B   12....       LCALL   ??Subroutine148_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_260:
   \   00018E   EE           MOV     A,R6
   \   00018F   240A         ADD     A,#0xa
   \   000191   F5..         MOV     ?V0 + 10,A
   \   000193   EF           MOV     A,R7
   \   000194   3400         ADDC    A,#0x0
   \   000196   F5..         MOV     ?V0 + 11,A
   \   000198                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000198   7401         MOV     A,#0x1
   \   00019A   12....       LCALL   ?XSTACK_DISP0_8
   \   00019D   AA82         MOV     R2,DPL
   \   00019F   AB83         MOV     R3,DPH
   \   0001A1   12....       LCALL   ??AddrMgrEntryLookupNwk?relay
   \   0001A4   E9           MOV     A,R1
   \   0001A5   6401         XRL     A,#0x1
   \   0001A7   6003         JZ      $+5
   \   0001A9   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_3 & 0xFFFF
   \   0001AC                ; Setup parameters for call to function sAddrExtCpy
   \   0001AC   7404         MOV     A,#0x4
   \   0001AE   12....       LCALL   ?XSTACK_DISP0_8
   \   0001B1   AC82         MOV     R4,DPL
   \   0001B3   AD83         MOV     R5,DPH
   \   0001B5   AA..         MOV     R2,?V0 + 10
   \   0001B7   AB..         MOV     R3,?V0 + 11
   \   0001B9   12....       LCALL   ??sAddrExtCpy?relay
   \   0001BC   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_4 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_9:
   \   0001BF   7401         MOV     A,#0x1
   \   0001C1   12....       LCALL   ?Subroutine14 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   0001C4   6403         XRL     A,#0x3
   \   0001C6   6003         JZ      $+5
   \   0001C8   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_11 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_10:
   \   0001CB   8C82         MOV     DPL,R4
   \   0001CD   8D83         MOV     DPH,R5
   \   0001CF   E4           CLR     A
   \   0001D0   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_12 & 0xFFFF
   1378                    }
   1379          
   1380                    item++;
   1381                  }
   1382                  else
   1383                  {
   1384                    if ( StartIndex <= aItems )
   \                     ??ZDO_ProcessMgmtLqiReq_13:
   \   0001D3   E5..         MOV     A,?V0 + 2
   \   0001D5   C3           CLR     C
   \   0001D6   95..         SUBB    A,?V0 + 4
   \   0001D8   4005         JC      ??ZDO_ProcessMgmtLqiReq_14
   1385                      // Start with 1st neighbor
   1386                      index = 0;
   \   0001DA   75..00       MOV     ?V0 + 0,#0x0
   \   0001DD   8018         SJMP    ??ZDO_ProcessMgmtLqiReq_15
   1387                    else
   1388                      // Start with >1st neighbor
   1389                      index = StartIndex - aItems;
   \                     ??ZDO_ProcessMgmtLqiReq_14:
   \   0001DF   E5..         MOV     A,?V0 + 4
   \   0001E1   C3           CLR     C
   \   0001E2   95..         SUBB    A,?V0 + 2
   \   0001E4   F5..         MOV     ?V0 + 0,A
   \   0001E6   800F         SJMP    ??ZDO_ProcessMgmtLqiReq_15
   1390                    break;
   1391                  }
   1392                }
   1393          
   1394                // Loop through neighbor items and finish list
   1395                for ( ; x < numItems; x++ )
   1396                {
   1397                  // Add next neighbor table item
   1398                  NLME_GetRequest( nwkNeighborTable, index++, &entry );
   1399          
   1400                  // set ZDP_MgmtLqiItem_t fields
   1401                  item->panID    = entry.panId;
   1402                  osal_cpyExtAddr( item->extPanID, _NIB.extendedPANID );
   1403                  osal_memset( item->extAddr, 0xFF, Z_EXTADDR_LEN );
   1404                  item->nwkAddr  = entry.neighborAddress;
   1405                  item->rxOnIdle = ZDP_MGMT_BOOL_UNKNOWN;
   1406                  item->relation = ZDP_MGMT_REL_UNKNOWN;
   1407                  item->permit   = ZDP_MGMT_BOOL_UNKNOWN;
   1408                  item->depth    = 0xFF;
   1409                  item->lqi      = entry.linkInfo.rxLqi;
   1410          
   1411                  if ( item->nwkAddr == 0 )
   1412                  {
   1413                    item->devType = ZDP_MGMT_DT_COORD;
   1414                  }
   1415                  else
   1416                  {
   1417                    item->devType = ZDP_MGMT_DT_ROUTER;
   \                     ??ZDO_ProcessMgmtLqiReq_16:
   \   0001E8   7401         MOV     A,#0x1
   1418                  }
   \                     ??ZDO_ProcessMgmtLqiReq_17:
   \   0001EA   12....       LCALL   ?Subroutine36 & 0xFFFF
   \                     ??CrossCallReturnLabel_63:
   \   0001ED   E5..         MOV     A,?V0 + 3
   \   0001EF   C3           CLR     C
   \   0001F0   95..         SUBB    A,?V0 + 1
   \   0001F2   4003         JC      $+5
   \   0001F4   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_2 & 0xFFFF
   \                     ??ZDO_ProcessMgmtLqiReq_15:
   \   0001F7                ; Setup parameters for call to function NLME_GetRequest
   \   0001F7   740E         MOV     A,#0xe
   \   0001F9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001FC   AC82         MOV     R4,DPL
   \   0001FE   AD83         MOV     R5,DPH
   \   000200   85....       MOV     ?V0 + 6,?V0 + 0
   \   000203   AA..         MOV     R2,?V0 + 6
   \   000205   7B00         MOV     R3,#0x0
   \   000207   7987         MOV     R1,#-0x79
   \   000209   12....       LCALL   ??NLME_GetRequest?relay
   \   00020C   05..         INC     ?V0 + 0
   \   00020E   7418         MOV     A,#0x18
   \   000210   12....       LCALL   ?XSTACK_DISP0_8
   \   000213   12....       LCALL   ?Subroutine25 & 0xFFFF
   \                     ??CrossCallReturnLabel_34:
   \   000216   12....       LCALL   ??sAddrExtCpy?relay
   \   000219                ; Setup parameters for call to function osal_memset
   \   000219   7C08         MOV     R4,#0x8
   \   00021B   7D00         MOV     R5,#0x0
   \   00021D   79FF         MOV     R1,#-0x1
   \   00021F   EE           MOV     A,R6
   \   000220   240A         ADD     A,#0xa
   \   000222   FA           MOV     R2,A
   \   000223   EF           MOV     A,R7
   \   000224   3400         ADDC    A,#0x0
   \   000226   FB           MOV     R3,A
   \   000227   12....       LCALL   ??osal_memset?relay
   \   00022A   EE           MOV     A,R6
   \   00022B   2412         ADD     A,#0x12
   \   00022D   F8           MOV     R0,A
   \   00022E   EF           MOV     A,R7
   \   00022F   3400         ADDC    A,#0x0
   \   000231   F9           MOV     R1,A
   \   000232   740E         MOV     A,#0xe
   \   000234   12....       LCALL   ?XSTACK_DISP0_8
   \   000237   12....       LCALL   ??Subroutine159_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_304:
   \   00023A   8882         MOV     DPL,R0
   \   00023C   8983         MOV     DPH,R1
   \   00023E   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_51:
   \   000241   EE           MOV     A,R6
   \   000242   2415         ADD     A,#0x15
   \   000244   F582         MOV     DPL,A
   \   000246   EF           MOV     A,R7
   \   000247   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_394:
   \   00024A   7402         MOV     A,#0x2
   \   00024C   F0           MOVX    @DPTR,A
   \   00024D   EE           MOV     A,R6
   \   00024E   2416         ADD     A,#0x16
   \   000250   F582         MOV     DPL,A
   \   000252   EF           MOV     A,R7
   \   000253   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_395:
   \   000256   7403         MOV     A,#0x3
   \   000258   12....       LCALL   ?Subroutine22 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   00025B   F582         MOV     DPL,A
   \   00025D   EF           MOV     A,R7
   \   00025E   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_396:
   \   000261   74FF         MOV     A,#-0x1
   \   000263   F0           MOVX    @DPTR,A
   \   000264   741D         MOV     A,#0x1d
   \   000266   12....       LCALL   ?XSTACK_DISP0_8
   \   000269   E0           MOVX    A,@DPTR
   \   00026A   C0E0         PUSH    A
   \   00026C   EE           MOV     A,R6
   \   00026D   2419         ADD     A,#0x19
   \   00026F   F582         MOV     DPL,A
   \   000271   EF           MOV     A,R7
   \   000272   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_397:
   \   000275   D0E0         POP     A
   \   000277   F0           MOVX    @DPTR,A
   \   000278   EE           MOV     A,R6
   \   000279   2414         ADD     A,#0x14
   \   00027B   FA           MOV     R2,A
   \   00027C   EF           MOV     A,R7
   \   00027D   3400         ADDC    A,#0x0
   \   00027F   FB           MOV     R3,A
   \   000280   8882         MOV     DPL,R0
   \   000282   8983         MOV     DPH,R1
   \   000284   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_354:
   \   000287   8A82         MOV     DPL,R2
   \   000289   8B83         MOV     DPH,R3
   \   00028B   6003         JZ      $+5
   \   00028D   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_16 & 0xFFFF
   \   000290   E4           CLR     A
   \   000291   02....       LJMP    ??ZDO_ProcessMgmtLqiReq_17 & 0xFFFF
   1419          
   1420                  item++;
   1421                }
   1422              }
   1423            }
   1424            else
   1425            {
   1426              numItems = 0;
   \                     ??ZDO_ProcessMgmtLqiReq_0:
   \   000294   75..00       MOV     ?V0 + 1,#0x0
   1427            }
   1428          
   1429            // Send response
   1430            ZDP_MgmtLqiRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxItems,
   1431                            StartIndex, numItems, table, false );
   \                     ??ZDO_ProcessMgmtLqiReq_2:
   \   000297                ; Setup parameters for call to function ZDP_MgmtLqiRsp
   \   000297   75..00       MOV     ?V0 + 2,#0x0
   \   00029A   78..         MOV     R0,#?V0 + 2
   \   00029C   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00029F   78..         MOV     R0,#?V0 + 12
   \   0002A1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002A4   78..         MOV     R0,#?V0 + 1
   \   0002A6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002A9   E5..         MOV     A,?V0 + 4
   \   0002AB   F5..         MOV     ?V0 + 1,A
   \   0002AD   78..         MOV     R0,#?V0 + 1
   \   0002AF   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0002B2   7405         MOV     A,#0x5
   \   0002B4   12....       LCALL   ?XSTACK_DISP0_8
   \   0002B7   E0           MOVX    A,@DPTR
   \   0002B8   FD           MOV     R5,A
   \   0002B9   7C00         MOV     R4,#0x0
   \   0002BB   E5..         MOV     A,?V0 + 14
   \   0002BD   2402         ADD     A,#0x2
   \   0002BF   FA           MOV     R2,A
   \   0002C0   E5..         MOV     A,?V0 + 15
   \   0002C2   3400         ADDC    A,#0x0
   \   0002C4   FB           MOV     R3,A
   \   0002C5   E5..         MOV     A,?V0 + 14
   \   0002C7   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_171:
   \   0002CA   E5..         MOV     A,?V0 + 15
   \   0002CC   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_332:
   \   0002CF   12....       LCALL   ??ZDP_MgmtLqiRsp?relay
   \   0002D2   7405         MOV     A,#0x5
   \   0002D4   12....       LCALL   ?DEALLOC_XSTACK8
   1432          
   1433            if ( table )
   \   0002D7   E5..         MOV     A,?V0 + 12
   \   0002D9   45..         ORL     A,?V0 + 13
   \   0002DB   6007         JZ      ??ZDO_ProcessMgmtLqiReq_18
   1434            {
   1435              osal_mem_free( table );
   \   0002DD                ; Setup parameters for call to function osal_mem_free
   \   0002DD   AA..         MOV     R2,?V0 + 12
   \   0002DF   AB..         MOV     R3,?V0 + 13
   \   0002E1   12....       LCALL   ??osal_mem_free?relay
   1436            }
   1437          }
   \                     ??ZDO_ProcessMgmtLqiReq_18:
   \   0002E4   7425         MOV     A,#0x25
   \   0002E6                REQUIRE ?Subroutine4
   \   0002E6                ; // Fall through to label ?Subroutine4

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine36:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   241A         ADD     A,#0x1a
   \   000004   FE           MOV     R6,A
   \   000005   EF           MOV     A,R7
   \   000006   3400         ADDC    A,#0x0
   \   000008   FF           MOV     R7,A
   \   000009   05..         INC     ?V0 + 3
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine25:
   \   000000   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_328:
   \   000003   F9           MOV     R1,A
   \   000004   8E82         MOV     DPL,R6
   \   000006   8F83         MOV     DPH,R7
   \   000008   E8           MOV     A,R0
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   E9           MOV     A,R1
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D                ; Setup parameters for call to function sAddrExtCpy
   \   00000D                ; Setup parameters for call to function sAddrExtCpy
   \   00000D   7C..         MOV     R4,#(_NIB + 53) & 0xff
   \   00000F   7D..         MOV     R5,#((_NIB + 53) >> 8) & 0xff
   \   000011   12....       LCALL   ?Subroutine133 & 0xFFFF
   \                     ??CrossCallReturnLabel_219:
   \   000014   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine22:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   EE           MOV     A,R6
   \   000002   2417         ADD     A,#0x17
   \   000004   F582         MOV     DPL,A
   \   000006   EF           MOV     A,R7
   \   000007   12....       LCALL   ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_451:
   \   00000A   7402         MOV     A,#0x2
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   EE           MOV     A,R6
   \   00000E   2418         ADD     A,#0x18
   \   000010   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine104:
   \   000000   240F         ADD     A,#0xf
   \   000002   F582         MOV     DPL,A
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine51:
   \   000000   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_455:
   \   000003   12....       LCALL   ?Subroutine123 & 0xFFFF
   \                     ??CrossCallReturnLabel_345:
   \   000006   F5..         MOV     ?V0 + 4,A
   \   000008                ; Setup parameters for call to function NLME_GetRequest
   \   000008                ; Setup parameters for call to function APSME_GetRequest
   \   000008   85..82       MOV     DPL,?XSP + 0
   \   00000B   85..83       MOV     DPH,?XSP + 1
   \   00000E   AC82         MOV     R4,DPL
   \   000010   AD83         MOV     R5,DPH
   \   000012   7A00         MOV     R2,#0x0
   \   000014   7B00         MOV     R3,#0x0
   \   000016   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine100:
   \   000000   F5..         MOV     ?V0 + 8,A
   \   000002   EF           MOV     A,R7
   \   000003   3400         ADDC    A,#0x0
   \   000005   F5..         MOV     ?V0 + 9,A
   \   000007   85..82       MOV     DPL,?V0 + 8
   \   00000A   F583         MOV     DPH,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine14:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   E0           MOVX    A,@DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine132:
   \   000000   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_236:
   \   000003                REQUIRE ??Subroutine183_0
   \   000003                ; // Fall through to label ??Subroutine183_0
   1438          
   1439          /*********************************************************************
   1440           * @fn          ZDO_ProcessMgmtNwkDiscReq
   1441           *
   1442           * @brief       This function handles parsing the incoming Management
   1443           *              Network Discover request and starts the request.
   1444           *
   1445           * @param       inMsg - incoming message (request)
   1446           *
   1447           * @return      none
   1448           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1449          void ZDO_ProcessMgmtNwkDiscReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtNwkDiscReq:
   1450          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 7
   \   000005   74F9         MOV     A,#-0x7
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   1451            NLME_ScanFields_t scan;
   1452            uint8             index;
   1453            uint8             *msg;
   1454          
   1455            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine68 & 0xFFFF
   1456            scan.channels = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_123:
   \   000011   12....       LCALL   ??osal_build_uint32?relay
   \   000014   85..82       MOV     DPL,?XSP + 0
   \   000017   85..83       MOV     DPH,?XSP + 1
   \   00001A   12....       LCALL   ?XSTORE_R2345
   1457            msg += 4;
   \   00001D   12....       LCALL   ?Subroutine94 & 0xFFFF
   1458            scan.duration = *msg++;
   \                     ??CrossCallReturnLabel_311:
   \   000020   C0E0         PUSH    A
   \   000022   7404         MOV     A,#0x4
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   D0E0         POP     A
   \   000029   12....       LCALL   ?Subroutine43 & 0xFFFF
   1459            index         = *msg;
   \                     ??CrossCallReturnLabel_82:
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   FA           MOV     R2,A
   1460            scan.scanType = ZMAC_ACTIVE_SCAN;
   \   00002E   7405         MOV     A,#0x5
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   7401         MOV     A,#0x1
   \   000035   F0           MOVX    @DPTR,A
   1461            scan.scanApp  = NLME_DISC_SCAN;
   \   000036   7406         MOV     A,#0x6
   \   000038   12....       LCALL   ?XSTACK_DISP0_8
   \   00003B   7401         MOV     A,#0x1
   \   00003D   F0           MOVX    @DPTR,A
   1462          
   1463            // Save off the information to be used for the response
   1464            zdappMgmtNwkDiscReqInProgress          = true;
   \   00003E   90....       MOV     DPTR,#zdappMgmtNwkDiscReqInProgress
   \   000041   F0           MOVX    @DPTR,A
   1465            zdappMgmtNwkDiscRspAddr.addrMode       = Addr16Bit;
   \   000042   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr + 8
   \   000045   04           INC     A
   \   000046   F0           MOVX    @DPTR,A
   1466            zdappMgmtNwkDiscRspAddr.addr.shortAddr = inMsg->srcAddr.addr.shortAddr;
   \   000047   85..82       MOV     DPL,?V0 + 0
   \   00004A   85..83       MOV     DPH,?V0 + 1
   \   00004D   A3           INC     DPTR
   \   00004E   A3           INC     DPTR
   \   00004F   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_319:
   \   000052   90....       MOV     DPTR,#zdappMgmtNwkDiscRspAddr
   \   000055   12....       LCALL   ??Subroutine148_0 & 0xFFFF
   1467            zdappMgmtNwkDiscStartIndex             = index;
   \                     ??CrossCallReturnLabel_261:
   \   000058   EA           MOV     A,R2
   \   000059   90....       MOV     DPTR,#zdappMgmtNwkDiscStartIndex
   \   00005C   F0           MOVX    @DPTR,A
   1468            zdappMgmtNwkDiscRspTransSeq            = inMsg->TransSeq;
   \   00005D   E5..         MOV     A,?V0 + 0
   \   00005F   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_172:
   \   000062   E5..         MOV     A,?V0 + 1
   \   000064   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_274:
   \   000067   90....       MOV     DPTR,#zdappMgmtNwkDiscRspTransSeq
   \   00006A   12....       LCALL   ?Subroutine35 & 0xFFFF
   1469          
   1470            if ( NLME_NwkDiscReq2( &scan ) != ZSuccess )
   \                     ??CrossCallReturnLabel_61:
   \   00006D   12....       LCALL   ??NLME_NwkDiscReq2?relay
   \   000070   E9           MOV     A,R1
   \   000071   6003         JZ      ??ZDO_ProcessMgmtNwkDiscReq_0
   1471            {
   1472              NLME_NwkDiscTerm();
   \   000073                ; Setup parameters for call to function NLME_NwkDiscTerm
   \   000073   12....       LCALL   ??NLME_NwkDiscTerm?relay
   1473          
   1474              // zdappMgmtNwkDiscReqInProgress will be reset in the confirm callback
   1475            }
   1476          }
   \                     ??ZDO_ProcessMgmtNwkDiscReq_0:
   \   000076   7407         MOV     A,#0x7
   \   000078   02....       LJMP    ??Subroutine143_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine94:
   \   000000   EE           MOV     A,R6
   \   000001   2404         ADD     A,#0x4
   \   000003                REQUIRE ??Subroutine160_0
   \   000003                ; // Fall through to label ??Subroutine160_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine160_0:
   \   000000   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_375:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine125:
   \   000000   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_235:
   \   000003   3400         ADDC    A,#0x0
   \   000005   F583         MOV     DPH,A
   \   000007                REQUIRE ??Subroutine170_0
   \   000007                ; // Fall through to label ??Subroutine170_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine170_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FE           MOV     R6,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   FF           MOV     R7,A
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine129:
   \   000000   FE           MOV     R6,A
   \   000001   EF           MOV     A,R7
   \   000002   3400         ADDC    A,#0x0
   \   000004   FF           MOV     R7,A
   \   000005   8E82         MOV     DPL,R6
   \   000007   8F83         MOV     DPH,R7
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine43:
   \   000000   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_426:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine134:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   A3           INC     DPTR
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine68:
   \   000000   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_440:
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003                ; Setup parameters for call to function osal_build_uint32
   \   000003   7904         MOV     R1,#0x4
   \   000005   EE           MOV     A,R6
   \   000006   FA           MOV     R2,A
   \   000007   EF           MOV     A,R7
   \   000008   FB           MOV     R3,A
   \   000009   22           RET
   1477          
   1478          #if defined ( ZDO_MGMT_NWKDISC_RESPONSE )
   1479          /*********************************************************************
   1480           * @fn          ZDO_FinishProcessingMgmtNwkDiscReq
   1481           *
   1482           * @brief       This function finishes the processing of the Management
   1483           *              Network Discover Request and generates the response.
   1484           *
   1485           *   Note:      This function will limit the number of items returned
   1486           *              to ZDO_MAX_NWKDISC_ITEMS items.
   1487           *
   1488           * @param       ResultCountSrcAddr - source of the request
   1489           * @param       msg - pointer to incoming message
   1490           * @param       SecurityUse -
   1491           *
   1492           * @return      none
   1493           */
   1494          void ZDO_FinishProcessingMgmtNwkDiscReq( void )
   1495          {
   1496            byte count, i, ResultCount = 0;
   1497            networkDesc_t *newDesc = NULL, *pList, *NetworkList;
   1498          
   1499            NetworkList = nwk_getNwkDescList();
   1500          
   1501            // Count the number of nwk descriptors in the list
   1502            pList = nwk_getNwkDescList();
   1503            while (pList)
   1504            {
   1505              ResultCount++;
   1506              pList = pList->nextDesc;
   1507            }
   1508          
   1509            if ( ZSTACK_ROUTER_BUILD )
   1510            {
   1511              // Look for my PanID.
   1512              pList = nwk_getNwkDescList();
   1513              while ( pList )
   1514              {
   1515                if ( pList->panId == _NIB.nwkPanId )
   1516                {
   1517                  break;
   1518                }
   1519          
   1520          
   1521                if ( !pList->nextDesc )
   1522                {
   1523                  break;
   1524                }
   1525                pList = pList->nextDesc;
   1526              }
   1527          
   1528          
   1529              // If my Pan not present (query to a star network ZC or an isolated ZR?),
   1530              // prepend it.
   1531              if ( !pList || (pList->panId != _NIB.nwkPanId) )
   1532              {
   1533                newDesc = (networkDesc_t *)osal_mem_alloc( sizeof( networkDesc_t ) );
   1534                if ( newDesc )
   1535                {
   1536                  byte pJoin;
   1537          
   1538                  newDesc->panId = _NIB.nwkPanId;
   1539                  newDesc->logicalChannel = _NIB.nwkLogicalChannel;
   1540                  newDesc->version = NLME_GetProtocolVersion();
   1541                  newDesc->stackProfile = zgStackProfile;
   1542          
   1543                  //Extended PanID
   1544                  osal_cpyExtAddr( newDesc->extendedPANID, _NIB.extendedPANID);
   1545          
   1546                  ZMacGetReq( ZMacAssociationPermit, &pJoin );
   1547                  newDesc->chosenRouter = ((pJoin) ? ZDAppNwkAddr.addr.shortAddr :
   1548                                                     INVALID_NODE_ADDR);
   1549          
   1550                  newDesc->nextDesc = NetworkList;
   1551                  NetworkList = newDesc;
   1552                  ResultCount++;
   1553                }
   1554              }
   1555            }
   1556          
   1557            // Calc the count and apply a max count.
   1558            if ( zdappMgmtNwkDiscStartIndex > ResultCount )
   1559            {
   1560              count = 0;
   1561            }
   1562            else
   1563            {
   1564              count = ResultCount - zdappMgmtNwkDiscStartIndex;
   1565              if ( count > ZDO_MAX_NWKDISC_ITEMS )
   1566              {
   1567                count = ZDO_MAX_NWKDISC_ITEMS;
   1568              }
   1569          
   1570              // Move the list pointer up to the start index.
   1571              for ( i = 0; i < zdappMgmtNwkDiscStartIndex; i++ )
   1572              {
   1573                NetworkList = NetworkList->nextDesc;
   1574              }
   1575            }
   1576          
   1577            ZDP_MgmtNwkDiscRsp( zdappMgmtNwkDiscRspTransSeq,
   1578                               &zdappMgmtNwkDiscRspAddr, ZSuccess, ResultCount,
   1579                                zdappMgmtNwkDiscStartIndex,
   1580                                count,
   1581                                NetworkList,
   1582                                false );
   1583          
   1584            if ( ZSTACK_ROUTER_BUILD )
   1585            {
   1586              if ( newDesc != NULL )
   1587              {
   1588                osal_mem_free( newDesc );
   1589              }
   1590            }
   1591          
   1592            NLME_NwkDiscTerm();
   1593          }
   1594          #endif
   1595          
   1596          /*********************************************************************
   1597           * @fn          ZDO_ProcessMgmtRtgReq
   1598           *
   1599           * @brief       This function finishes the processing of the Management
   1600           *              Routing Request and generates the response.
   1601           *
   1602           *   Note:      This function will limit the number of items returned
   1603           *              to ZDO_MAX_RTG_ITEMS items.
   1604           *
   1605           * @param       inMsg - incoming message (request)
   1606           *
   1607           * @return      none
   1608           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1609          void ZDO_ProcessMgmtRtgReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtRtgReq:
   1610          {
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   1611            byte x;
   1612            byte maxNumItems;
   1613            byte numItems = 0;
   \   00000E   7E00         MOV     R6,#0x0
   1614            uint8 *pBuf = NULL;
   \   000010   8E..         MOV     ?V0 + 6,R6
   \   000012   8E..         MOV     ?V0 + 7,R6
   1615            rtgItem_t *pList;
   1616            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_343:
   \   000017   FF           MOV     R7,A
   1617          
   1618            // Get the number of table items
   1619            NLME_GetRequest( nwkNumRoutingTableEntries, 0, &maxNumItems );
   \   000018                ; Setup parameters for call to function NLME_GetRequest
   \   000018   85..82       MOV     DPL,?XSP + 0
   \   00001B   85..83       MOV     DPH,?XSP + 1
   \   00001E   AC82         MOV     R4,DPL
   \   000020   AD83         MOV     R5,DPH
   \   000022   7A00         MOV     R2,#0x0
   \   000024   7B00         MOV     R3,#0x0
   \   000026   799D         MOV     R1,#-0x63
   \   000028   12....       LCALL   ??NLME_GetRequest?relay
   1620          
   1621            if ( maxNumItems > StartIndex )
   \   00002B   85..82       MOV     DPL,?XSP + 0
   \   00002E   85..83       MOV     DPH,?XSP + 1
   \   000031   E0           MOVX    A,@DPTR
   \   000032   F8           MOV     R0,A
   \   000033   EF           MOV     A,R7
   \   000034   C3           CLR     C
   \   000035   98           SUBB    A,R0
   \   000036   5074         JNC     ??ZDO_ProcessMgmtRtgReq_0
   1622            {
   1623              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   000038   E0           MOVX    A,@DPTR
   \   000039   C3           CLR     C
   \   00003A   9F           SUBB    A,R7
   \   00003B   FE           MOV     R6,A
   1624          
   1625              // limit the size of the list
   1626              if ( numItems > ZDO_MAX_RTG_ITEMS )
   \   00003C   C3           CLR     C
   \   00003D   940B         SUBB    A,#0xb
   \   00003F   4002         JC      ??ZDO_ProcessMgmtRtgReq_1
   1627              {
   1628                numItems = ZDO_MAX_RTG_ITEMS;
   \   000041   7E0A         MOV     R6,#0xa
   1629              }
   1630          
   1631              // Allocate the memory to build the table
   1632              pBuf = osal_mem_alloc( (short)(sizeof( rtgItem_t ) * numItems) );
   \                     ??ZDO_ProcessMgmtRtgReq_1:
   \   000043                ; Setup parameters for call to function osal_mem_alloc
   \   000043   EE           MOV     A,R6
   \   000044   75F007       MOV     B,#0x7
   \   000047   A4           MUL     AB
   \   000048   FA           MOV     R2,A
   \   000049   ABF0         MOV     R3,B
   \   00004B   12....       LCALL   ??osal_mem_alloc?relay
   \   00004E   8A..         MOV     ?V0 + 0,R2
   \   000050   8B..         MOV     ?V0 + 1,R3
   \   000052   8A..         MOV     ?V0 + 6,R2
   \   000054   8B..         MOV     ?V0 + 7,R3
   1633          
   1634              if ( pBuf != NULL )
   \   000056   EA           MOV     A,R2
   \   000057   45..         ORL     A,?V0 + 7
   \   000059   604F         JZ      ??ZDO_ProcessMgmtRtgReq_2
   1635              {
   1636                // Convert buffer to list
   1637                pList = (rtgItem_t *)pBuf;
   1638          
   1639                // Loop through items and build list
   1640                for ( x = 0; x < numItems; x++ )
   \   00005B   75..00       MOV     ?V0 + 4,#0x0
   \   00005E   800C         SJMP    ??ZDO_ProcessMgmtRtgReq_3
   1641                {
   1642                  NLME_GetRequest( nwkRoutingTable, (uint16)(x + StartIndex), (void*)pList );
   1643          
   1644                  // Remap the status to the RoutingTableList Record Format defined in the ZigBee spec
   1645                  switch( pList->status )
   1646                  {
   1647                    case RT_ACTIVE:
   1648                      pList->status = ZDO_MGMT_RTG_ENTRY_ACTIVE;
   1649                      break;
   1650          
   1651                    case RT_DISC:
   1652                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_UNDERWAY;
   1653                      break;
   1654          
   1655                    case RT_LINK_FAIL:
   1656                      pList->status = ZDO_MGMT_RTG_ENTRY_DISCOVERY_FAILED;
   1657                      break;
   1658          
   1659                    case RT_INIT:
   1660                    case RT_REPAIR:
   1661                    default:
   1662                      pList->status = ZDO_MGMT_RTG_ENTRY_INACTIVE;
   \                     ??ZDO_ProcessMgmtRtgReq_4:
   \   000060   7403         MOV     A,#0x3
   \                     ??ZDO_ProcessMgmtRtgReq_5:
   \   000062   F0           MOVX    @DPTR,A
   1663                      break;
   1664                  }
   1665          
   1666                  // Increment pointer to next record
   1667                  pList++;
   \   000063   E5..         MOV     A,?V0 + 0
   \   000065   2407         ADD     A,#0x7
   \   000067   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_432:
   \   00006A   05..         INC     ?V0 + 4
   \                     ??ZDO_ProcessMgmtRtgReq_3:
   \   00006C   E5..         MOV     A,?V0 + 4
   \   00006E   C3           CLR     C
   \   00006F   9E           SUBB    A,R6
   \   000070   503A         JNC     ??ZDO_ProcessMgmtRtgReq_0
   \   000072                ; Setup parameters for call to function NLME_GetRequest
   \   000072   AC..         MOV     R4,?V0 + 0
   \   000074   AD..         MOV     R5,?V0 + 1
   \   000076   85....       MOV     ?V0 + 8,?V0 + 4
   \   000079   8F..         MOV     ?V0 + 10,R7
   \   00007B   E5..         MOV     A,?V0 + 8
   \   00007D   25..         ADD     A,?V0 + 10
   \   00007F   FA           MOV     R2,A
   \   000080   E4           CLR     A
   \   000081   3400         ADDC    A,#0x0
   \   000083   FB           MOV     R3,A
   \   000084   798B         MOV     R1,#-0x75
   \   000086   12....       LCALL   ??NLME_GetRequest?relay
   \   000089   E5..         MOV     A,?V0 + 0
   \   00008B   2405         ADD     A,#0x5
   \   00008D   F582         MOV     DPL,A
   \   00008F   E5..         MOV     A,?V0 + 1
   \   000091   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_275:
   \   000094   14           DEC     A
   \   000095   6008         JZ      ??ZDO_ProcessMgmtRtgReq_6
   \   000097   14           DEC     A
   \   000098   6008         JZ      ??ZDO_ProcessMgmtRtgReq_7
   \   00009A   14           DEC     A
   \   00009B   6009         JZ      ??ZDO_ProcessMgmtRtgReq_8
   \   00009D   80C1         SJMP    ??ZDO_ProcessMgmtRtgReq_4
   \                     ??ZDO_ProcessMgmtRtgReq_6:
   \   00009F   E4           CLR     A
   \   0000A0   80C0         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_7:
   \   0000A2   7401         MOV     A,#0x1
   \   0000A4   80BC         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   \                     ??ZDO_ProcessMgmtRtgReq_8:
   \   0000A6   7402         MOV     A,#0x2
   \   0000A8   80B8         SJMP    ??ZDO_ProcessMgmtRtgReq_5
   1668                }
   1669              }
   1670              else
   1671              {
   1672                numItems = 0;
   \                     ??ZDO_ProcessMgmtRtgReq_2:
   \   0000AA   7E00         MOV     R6,#0x0
   1673              }
   1674            }
   1675          
   1676            // Send response
   1677            ZDP_MgmtRtgRsp( inMsg->TransSeq, &(inMsg->srcAddr), ZSuccess, maxNumItems, StartIndex, numItems,
   1678                                  (rtgItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtRtgReq_0:
   \   0000AC                ; Setup parameters for call to function ZDP_MgmtRtgRsp
   \   0000AC   75..00       MOV     ?V0 + 0,#0x0
   \   0000AF   78..         MOV     R0,#?V0 + 0
   \   0000B1   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B4   78..         MOV     R0,#?V0 + 6
   \   0000B6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B9   EE           MOV     A,R6
   \   0000BA   F5..         MOV     ?V0 + 0,A
   \   0000BC   78..         MOV     R0,#?V0 + 0
   \   0000BE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C1   EF           MOV     A,R7
   \   0000C2   F5..         MOV     ?V0 + 0,A
   \   0000C4   78..         MOV     R0,#?V0 + 0
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C9   7405         MOV     A,#0x5
   \   0000CB   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CE   E0           MOVX    A,@DPTR
   \   0000CF   FD           MOV     R5,A
   \   0000D0   7C00         MOV     R4,#0x0
   \   0000D2   E5..         MOV     A,?V0 + 2
   \   0000D4   2402         ADD     A,#0x2
   \   0000D6   FA           MOV     R2,A
   \   0000D7   E5..         MOV     A,?V0 + 3
   \   0000D9   3400         ADDC    A,#0x0
   \   0000DB   FB           MOV     R3,A
   \   0000DC   E5..         MOV     A,?V0 + 2
   \   0000DE   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_173:
   \   0000E1   E5..         MOV     A,?V0 + 3
   \   0000E3   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_333:
   \   0000E6   12....       LCALL   ??ZDP_MgmtRtgRsp?relay
   \   0000E9   7405         MOV     A,#0x5
   \   0000EB   12....       LCALL   ?DEALLOC_XSTACK8
   1679          
   1680            if ( pBuf != NULL )
   \   0000EE   E5..         MOV     A,?V0 + 6
   \   0000F0   45..         ORL     A,?V0 + 7
   \   0000F2   6007         JZ      ??ZDO_ProcessMgmtRtgReq_9
   1681            {
   1682              osal_mem_free( pBuf );
   \   0000F4                ; Setup parameters for call to function osal_mem_free
   \   0000F4   AA..         MOV     R2,?V0 + 6
   \   0000F6   AB..         MOV     R3,?V0 + 7
   \   0000F8   12....       LCALL   ??osal_mem_free?relay
   1683            }
   1684          }
   \                     ??ZDO_ProcessMgmtRtgReq_9:
   \   0000FB   7401         MOV     A,#0x1
   \   0000FD   12....       LCALL   ?DEALLOC_XSTACK8
   \   000100   7F0C         MOV     R7,#0xc
   \   000102   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine61:
   \   000000   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_234:
   \   000003                REQUIRE ??Subroutine163_0
   \   000003                ; // Fall through to label ??Subroutine163_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine163_0:
   \   000000   12....       LCALL   ??Subroutine183_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_460:
   \   000003                REQUIRE ??Subroutine164_0
   \   000003                ; // Fall through to label ??Subroutine164_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine102:
   \   000000   F5..         MOV     ?V0 + 0,A
   \   000002   E5..         MOV     A,?V0 + 1
   \   000004                REQUIRE ??Subroutine178_0
   \   000004                ; // Fall through to label ??Subroutine178_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine178_0:
   \   000000   3400         ADDC    A,#0x0
   \   000002   F5..         MOV     ?V0 + 1,A
   \   000004   22           RET
   1685          
   1686          /*********************************************************************
   1687           * @fn          ZDO_ProcessMgmtBindReq
   1688           *
   1689           * @brief       This function finishes the processing of the Management
   1690           *              Bind Request and generates the response.
   1691           *
   1692           *   Note:      This function will limit the number of items returned
   1693           *              to ZDO_MAX_BIND_ITEMS items.
   1694           *
   1695           * @param       inMsg - incoming message (request)
   1696           *
   1697           * @return      none
   1698           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine84:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006                REQUIRE ??Subroutine161_0
   \   000006                ; // Fall through to label ??Subroutine161_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1699          void ZDO_ProcessMgmtBindReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtBindReq:
   1700          {
   \   000000   74EA         MOV     A,#-0x16
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 22
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 12,R2
   \   00000C   8B..         MOV     ?V0 + 13,R3
   1701          #if defined ( REFLECTOR )
   1702            byte x;
   1703            uint16 maxNumItems;
   1704            uint16 numItems;
   1705            uint8 *pBuf = NULL;
   \   00000E   75..00       MOV     ?V0 + 0,#0x0
   \   000011   75..00       MOV     ?V0 + 1,#0x0
   1706            apsBindingItem_t *pList;
   1707            uint8 StartIndex = inMsg->asdu[0];
   \   000014   12....       LCALL   ?Subroutine51 & 0xFFFF
   1708            uint8 status;
   1709          
   1710            // Get the number of table items
   1711            APSME_GetRequest( apsNumBindingTableEntries, 0, (byte*)(&maxNumItems) );
   \                     ??CrossCallReturnLabel_97:
   \   000017   79A3         MOV     R1,#-0x5d
   \   000019   12....       LCALL   ??APSME_GetRequest?relay
   1712          
   1713            if ( maxNumItems > StartIndex )
   \   00001C   85..82       MOV     DPL,?V0 + 4
   \   00001F   AA82         MOV     R2,DPL
   \   000021   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_323:
   \   000024   C3           CLR     C
   \   000025   EA           MOV     A,R2
   \   000026   98           SUBB    A,R0
   \   000027   E4           CLR     A
   \   000028   99           SUBB    A,R1
   \   000029   5079         JNC     ??ZDO_ProcessMgmtBindReq_0
   1714            {
   1715              numItems = maxNumItems - StartIndex;    // Start at the passed in index
   \   00002B   85..82       MOV     DPL,?XSP + 0
   \   00002E   85..83       MOV     DPH,?XSP + 1
   \   000031   E0           MOVX    A,@DPTR
   \   000032   C3           CLR     C
   \   000033   9A           SUBB    A,R2
   \   000034   FE           MOV     R6,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   9400         SUBB    A,#0x0
   \   000039   FF           MOV     R7,A
   1716            }
   1717            else
   1718            {
   1719              numItems = 0;
   1720            }
   1721          
   1722            // limit the size of the list
   1723            if ( numItems > ZDO_MAX_BIND_ITEMS )
   \   00003A   C3           CLR     C
   \   00003B   EE           MOV     A,R6
   \   00003C   9404         SUBB    A,#0x4
   \   00003E   EF           MOV     A,R7
   \   00003F   9400         SUBB    A,#0x0
   \   000041   4006         JC      ??ZDO_ProcessMgmtBindReq_1
   1724            {
   1725              numItems = ZDO_MAX_BIND_ITEMS;
   \   000043   7E03         MOV     R6,#0x3
   \   000045   7F00         MOV     R7,#0x0
   \   000047   8004         SJMP    ??ZDO_ProcessMgmtBindReq_2
   1726            }
   1727          
   1728            // Allocate the memory to build the table
   1729            if ( numItems && (pBuf = osal_mem_alloc( sizeof( apsBindingItem_t ) * numItems )) )
   \                     ??ZDO_ProcessMgmtBindReq_1:
   \   000049   EE           MOV     A,R6
   \   00004A   4F           ORL     A,R7
   \   00004B   6057         JZ      ??ZDO_ProcessMgmtBindReq_0
   \                     ??ZDO_ProcessMgmtBindReq_2:
   \   00004D                ; Setup parameters for call to function osal_mem_alloc
   \   00004D   EE           MOV     A,R6
   \   00004E   FA           MOV     R2,A
   \   00004F   EF           MOV     A,R7
   \   000050   FB           MOV     R3,A
   \   000051   EA           MOV     A,R2
   \   000052   75F015       MOV     B,#0x15
   \   000055   A4           MUL     AB
   \   000056   FA           MOV     R2,A
   \   000057   A8F0         MOV     R0,B
   \   000059   75F015       MOV     B,#0x15
   \   00005C   EB           MOV     A,R3
   \   00005D   A4           MUL     AB
   \   00005E   28           ADD     A,R0
   \   00005F   FB           MOV     R3,A
   \   000060   12....       LCALL   ??osal_mem_alloc?relay
   \   000063   8A..         MOV     ?V0 + 2,R2
   \   000065   8B..         MOV     ?V0 + 3,R3
   \   000067   8A..         MOV     ?V0 + 0,R2
   \   000069   8B..         MOV     ?V0 + 1,R3
   \   00006B   EA           MOV     A,R2
   \   00006C   45..         ORL     A,?V0 + 1
   \   00006E   6034         JZ      ??ZDO_ProcessMgmtBindReq_0
   1730            {
   1731              status = ZSuccess;
   \   000070   75..00       MOV     ?V0 + 5,#0x0
   1732          
   1733              // Convert buffer to list
   1734              pList = (apsBindingItem_t *)pBuf;
   1735          
   1736              // Loop through items and build list
   1737              for ( x = 0; x < numItems; x++ )
   \   000073   75..00       MOV     ?V0 + 6,#0x0
   \                     ??ZDO_ProcessMgmtBindReq_3:
   \   000076   85....       MOV     ?V0 + 8,?V0 + 6
   \   000079   C3           CLR     C
   \   00007A   E5..         MOV     A,?V0 + 8
   \   00007C   9E           SUBB    A,R6
   \   00007D   E4           CLR     A
   \   00007E   9F           SUBB    A,R7
   \   00007F   5028         JNC     ??ZDO_ProcessMgmtBindReq_4
   1738              {
   1739                APSME_GetRequest( apsBindingTable, (x + StartIndex), (void*)pList );
   \   000081                ; Setup parameters for call to function APSME_GetRequest
   \   000081   AC..         MOV     R4,?V0 + 2
   \   000083   AD..         MOV     R5,?V0 + 3
   \   000085   85....       MOV     ?V0 + 10,?V0 + 6
   \   000088   85....       MOV     ?V0 + 8,?V0 + 4
   \   00008B   E5..         MOV     A,?V0 + 10
   \   00008D   25..         ADD     A,?V0 + 8
   \   00008F   FA           MOV     R2,A
   \   000090   E4           CLR     A
   \   000091   3400         ADDC    A,#0x0
   \   000093   FB           MOV     R3,A
   \   000094   79A2         MOV     R1,#-0x5e
   \   000096   12....       LCALL   ??APSME_GetRequest?relay
   1740                pList++;
   \   000099   E5..         MOV     A,?V0 + 2
   \   00009B   2415         ADD     A,#0x15
   \   00009D   12....       LCALL   ?Subroutine99 & 0xFFFF
   1741              }
   \                     ??CrossCallReturnLabel_251:
   \   0000A0   05..         INC     ?V0 + 6
   \   0000A2   80D2         SJMP    ??ZDO_ProcessMgmtBindReq_3
   1742          
   1743            }
   1744            else
   1745            {
   1746              status = ZDP_NOT_PERMITTED;
   \                     ??ZDO_ProcessMgmtBindReq_0:
   \   0000A4   75..8B       MOV     ?V0 + 5,#-0x75
   1747              numItems = 0;
   \   0000A7   7E00         MOV     R6,#0x0
   1748            }
   1749          
   1750            // Send response
   1751            ZDP_MgmtBindRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, (byte)maxNumItems, StartIndex,
   1752                             (byte)numItems, (apsBindingItem_t *)pBuf, false );
   \                     ??ZDO_ProcessMgmtBindReq_4:
   \   0000A9                ; Setup parameters for call to function ZDP_MgmtBindRsp
   \   0000A9   75..00       MOV     ?V0 + 2,#0x0
   \   0000AC   78..         MOV     R0,#?V0 + 2
   \   0000AE   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000B1   78..         MOV     R0,#?V0 + 0
   \   0000B3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B6   EE           MOV     A,R6
   \   0000B7   F5..         MOV     ?V0 + 2,A
   \   0000B9   78..         MOV     R0,#?V0 + 2
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000BE   E5..         MOV     A,?V0 + 4
   \   0000C0   F5..         MOV     ?V0 + 2,A
   \   0000C2   78..         MOV     R0,#?V0 + 2
   \   0000C4   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000C7   7405         MOV     A,#0x5
   \   0000C9   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CC   E0           MOVX    A,@DPTR
   \   0000CD   FD           MOV     R5,A
   \   0000CE   AC..         MOV     R4,?V0 + 5
   \   0000D0   E5..         MOV     A,?V0 + 12
   \   0000D2   2402         ADD     A,#0x2
   \   0000D4   FA           MOV     R2,A
   \   0000D5   E5..         MOV     A,?V0 + 13
   \   0000D7   3400         ADDC    A,#0x0
   \   0000D9   FB           MOV     R3,A
   \   0000DA   E5..         MOV     A,?V0 + 12
   \   0000DC   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_174:
   \   0000DF   E5..         MOV     A,?V0 + 13
   \   0000E1   12....       LCALL   ??Subroutine162_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_334:
   \   0000E4   12....       LCALL   ??ZDP_MgmtBindRsp?relay
   \   0000E7   7405         MOV     A,#0x5
   \   0000E9   12....       LCALL   ?DEALLOC_XSTACK8
   1753          
   1754            if ( pBuf )
   \   0000EC   E5..         MOV     A,?V0 + 0
   \   0000EE   45..         ORL     A,?V0 + 1
   \   0000F0   6007         JZ      ??ZDO_ProcessMgmtBindReq_5
   1755            {
   1756              osal_mem_free( pBuf );
   \   0000F2                ; Setup parameters for call to function osal_mem_free
   \   0000F2   AA..         MOV     R2,?V0 + 0
   \   0000F4   AB..         MOV     R3,?V0 + 1
   \   0000F6   12....       LCALL   ??osal_mem_free?relay
   1757            }
   1758          #else
   1759            (void)inMsg;
   1760          #endif
   1761          }
   \                     ??ZDO_ProcessMgmtBindReq_5:
   \   0000F9   7402         MOV     A,#0x2
   \   0000FB   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FE   7F0E         MOV     R7,#0xe
   \   000100   02....       LJMP    ?BANKED_LEAVE_XDATA
   1762          
   1763          /*********************************************************************
   1764           * @fn          ZDO_ProcessMgmtDirectJoinReq
   1765           *
   1766           * @brief       This function finishes the processing of the Management
   1767           *              Direct Join Request and generates the response.
   1768           *
   1769           * @param       inMsg - incoming message (request)
   1770           *
   1771           * @return      none
   1772           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine90:
   \   000000   EA           MOV     A,R2
   \   000001   FE           MOV     R6,A
   \   000002   EB           MOV     A,R3
   \   000003   FF           MOV     R7,A
   \   000004                ; Setup parameters for call to function NLME_PermitJoiningRequest
   \   000004                REQUIRE ??Subroutine145_0
   \   000004                ; // Fall through to label ??Subroutine145_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1773          void ZDO_ProcessMgmtDirectJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtDirectJoinReq:
   1774          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine90 & 0xFFFF
   1775            uint8 *deviceAddr;
   1776            uint8 capInfo;
   1777            uint8 stat;
   1778          
   1779            // Parse the message
   1780            deviceAddr = inMsg->asdu;
   1781            capInfo = inMsg->asdu[Z_EXTADDR_LEN];
   1782          
   1783            stat = (byte) NLME_DirectJoinRequest( deviceAddr, capInfo );
   \                     ??CrossCallReturnLabel_241:
   \   00000D   EF           MOV     A,R7
   \   00000E   12....       LCALL   ?Subroutine78 & 0xFFFF
   \                     ??CrossCallReturnLabel_143:
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   A3           INC     DPTR
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   A3           INC     DPTR
   \   000017   A3           INC     DPTR
   \   000018   A3           INC     DPTR
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??NLME_DirectJoinRequest?relay
   \   00001E   E9           MOV     A,R1
   \   00001F   85..82       MOV     DPL,?XSP + 0
   \   000022   85..83       MOV     DPH,?XSP + 1
   \   000025   F0           MOVX    @DPTR,A
   1784          
   1785            ZDP_MgmtDirectJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000026                ; Setup parameters for call to function ZDP_SendData
   \   000026   75..00       MOV     ?V0 + 0,#0x0
   \   000029   78..         MOV     R0,#?V0 + 0
   \   00002B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002E   7401         MOV     A,#0x1
   \   000030   12....       LCALL   ?XSTACK_DISP0_8
   \   000033   8582..       MOV     ?V0 + 0,DPL
   \   000036   8583..       MOV     ?V0 + 1,DPH
   \   000039   78..         MOV     R0,#?V0 + 0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003E   75..35       MOV     ?V0 + 0,#0x35
   \   000041   75..80       MOV     ?V0 + 1,#-0x80
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   12....       LCALL   ?Subroutine96 & 0xFFFF
   \                     ??CrossCallReturnLabel_160:
   \   00004C   12....       LCALL   ??ZDP_SendData?relay
   \   00004F   7405         MOV     A,#0x5
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   1786          }
   \   000054                REQUIRE ?Subroutine8
   \   000054                ; // Fall through to label ?Subroutine8

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7401         MOV     A,#0x1
   \   000002   02....       LJMP    ??Subroutine143_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine96:
   \   000000   7901         MOV     R1,#0x1
   \   000002   EE           MOV     A,R6
   \   000003   2402         ADD     A,#0x2
   \   000005   FC           MOV     R4,A
   \   000006   EF           MOV     A,R7
   \   000007   3400         ADDC    A,#0x0
   \   000009   FD           MOV     R5,A
   \   00000A   EE           MOV     A,R6
   \   00000B   240F         ADD     A,#0xf
   \   00000D   FA           MOV     R2,A
   \   00000E   EF           MOV     A,R7
   \   00000F   3400         ADDC    A,#0x0
   \   000011   FB           MOV     R3,A
   \   000012   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine78:
   \   000000   12....       LCALL   ?Subroutine131 & 0xFFFF
   \                     ??CrossCallReturnLabel_287:
   \   000003   FA           MOV     R2,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   FB           MOV     R3,A
   \   000007                ; Setup parameters for call to function NLME_DirectJoinRequest
   \   000007   8A82         MOV     DPL,R2
   \   000009   8B83         MOV     DPH,R3
   \   00000B   22           RET
   1787          
   1788          /*********************************************************************
   1789           * @fn          ZDO_ProcessMgmtLeaveReq
   1790           *
   1791           * @brief       This function processes a Management Leave Request
   1792           *              and generates the response.
   1793           *
   1794           * @param       inMsg - incoming message (request)
   1795           *
   1796           * @return      none
   1797           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1798          void ZDO_ProcessMgmtLeaveReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtLeaveReq:
   1799          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 0,R2
   \   00000C   8B..         MOV     ?V0 + 1,R3
   1800            NLME_LeaveReq_t req;
   1801            ZStatus_t       status;
   1802            uint8           option;
   1803            uint8 *msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine88 & 0xFFFF
   1804          
   1805            if ( ( AddrMgrExtAddrValid( msg ) == FALSE                 ) ||
   1806                 ( osal_ExtAddrEqual( msg, NLME_GetExtAddr() ) == TRUE )    )
   \                     ??CrossCallReturnLabel_155:
   \   000011   FA           MOV     R2,A
   \   000012   EF           MOV     A,R7
   \   000013   FB           MOV     R3,A
   \   000014   12....       LCALL   ??AddrMgrExtAddrValid?relay
   \   000017   E9           MOV     A,R1
   \   000018   6013         JZ      ??ZDO_ProcessMgmtLeaveReq_0
   \   00001A                ; Setup parameters for call to function sAddrExtCmp
   \   00001A                ; Setup parameters for call to function NLME_GetExtAddr
   \   00001A   12....       LCALL   ??NLME_GetExtAddr?relay
   \   00001D   EA           MOV     A,R2
   \   00001E   FC           MOV     R4,A
   \   00001F   EB           MOV     A,R3
   \   000020   FD           MOV     R5,A
   \   000021   EE           MOV     A,R6
   \   000022   FA           MOV     R2,A
   \   000023   EF           MOV     A,R7
   \   000024   FB           MOV     R3,A
   \   000025   12....       LCALL   ??sAddrExtCmp?relay
   \   000028   E9           MOV     A,R1
   \   000029   6401         XRL     A,#0x1
   \   00002B   700A         JNZ     ??ZDO_ProcessMgmtLeaveReq_1
   1807            {
   1808              // Remove this device
   1809              req.extAddr = NULL;
   \                     ??ZDO_ProcessMgmtLeaveReq_0:
   \   00002D   7401         MOV     A,#0x1
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   E4           CLR     A
   \   000033   F0           MOVX    @DPTR,A
   \   000034   A3           INC     DPTR
   \   000035   8009         SJMP    ??ZDO_ProcessMgmtLeaveReq_2
   1810            }
   1811            else
   1812            {
   1813              // Remove child device
   1814              req.extAddr = msg;
   \                     ??ZDO_ProcessMgmtLeaveReq_1:
   \   000037   7401         MOV     A,#0x1
   \   000039   12....       LCALL   ?XSTACK_DISP0_8
   \   00003C   EE           MOV     A,R6
   \   00003D   F0           MOVX    @DPTR,A
   \   00003E   A3           INC     DPTR
   \   00003F   EF           MOV     A,R7
   1815            }
   \                     ??ZDO_ProcessMgmtLeaveReq_2:
   \   000040   12....       LCALL   ?Subroutine43 & 0xFFFF
   1816          
   1817            option = msg[Z_EXTADDR_LEN];
   \                     ??CrossCallReturnLabel_79:
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   A3           INC     DPTR
   \   000046   A3           INC     DPTR
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   E0           MOVX    A,@DPTR
   \   00004B   F8           MOV     R0,A
   1818            if ( option & ZDP_MGMT_LEAVE_REQ_RC )
   \   00004C   A2E6         MOV     C,0xE0 /* A   */.6
   \   00004E   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_3
   1819            {
   1820              req.removeChildren = TRUE;
   \   000050   7403         MOV     A,#0x3
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   7401         MOV     A,#0x1
   \   000057   F0           MOVX    @DPTR,A
   1821            }
   1822          
   1823            if ( option & ZDP_MGMT_LEAVE_REQ_REJOIN )
   \                     ??ZDO_ProcessMgmtLeaveReq_3:
   \   000058   E8           MOV     A,R0
   \   000059   A2E7         MOV     C,0xE0 /* A   */.7
   \   00005B   5008         JNC     ??ZDO_ProcessMgmtLeaveReq_4
   1824            {
   1825               req.rejoin = TRUE;
   \   00005D   7404         MOV     A,#0x4
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   7401         MOV     A,#0x1
   \   000064   F0           MOVX    @DPTR,A
   1826            }
   1827          
   1828            req.silent = FALSE;
   \                     ??ZDO_ProcessMgmtLeaveReq_4:
   \   000065   7405         MOV     A,#0x5
   \   000067   12....       LCALL   ?XSTACK_DISP0_8
   \   00006A   E4           CLR     A
   \   00006B   F0           MOVX    @DPTR,A
   1829          
   1830            status = NLME_LeaveReq( &req );
   \   00006C                ; Setup parameters for call to function NLME_LeaveReq
   \   00006C   04           INC     A
   \   00006D   12....       LCALL   ?XSTACK_DISP0_8
   \   000070   AA82         MOV     R2,DPL
   \   000072   AB83         MOV     R3,DPH
   \   000074   12....       LCALL   ??NLME_LeaveReq?relay
   \   000077   E9           MOV     A,R1
   \   000078   85..82       MOV     DPL,?XSP + 0
   \   00007B   85..83       MOV     DPH,?XSP + 1
   \   00007E   F0           MOVX    @DPTR,A
   1831          
   1832            if ( ZG_BUILD_ENDDEVICE_TYPE )
   1833            {
   1834              // Stop polling and get ready to reset
   1835              NLME_SetPollRate( 0 );
   1836            }
   1837          
   1838            ZDP_MgmtLeaveRsp( inMsg->TransSeq, &(inMsg->srcAddr), status, FALSE );
   \   00007F                ; Setup parameters for call to function ZDP_SendData
   \   00007F   75..00       MOV     ?V0 + 2,#0x0
   \   000082   78..         MOV     R0,#?V0 + 2
   \   000084   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000087   7401         MOV     A,#0x1
   \   000089   12....       LCALL   ?XSTACK_DISP0_8
   \   00008C   8582..       MOV     ?V0 + 2,DPL
   \   00008F   8583..       MOV     ?V0 + 3,DPH
   \   000092   78..         MOV     R0,#?V0 + 2
   \   000094   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000097   75..34       MOV     ?V0 + 2,#0x34
   \   00009A   75..80       MOV     ?V0 + 3,#-0x80
   \   00009D   78..         MOV     R0,#?V0 + 2
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   7901         MOV     R1,#0x1
   \   0000A4   E5..         MOV     A,?V0 + 0
   \   0000A6   2402         ADD     A,#0x2
   \   0000A8   FC           MOV     R4,A
   \   0000A9   E5..         MOV     A,?V0 + 1
   \   0000AB   3400         ADDC    A,#0x0
   \   0000AD   FD           MOV     R5,A
   \   0000AE   E5..         MOV     A,?V0 + 0
   \   0000B0   240F         ADD     A,#0xf
   \   0000B2   FA           MOV     R2,A
   \   0000B3   E5..         MOV     A,?V0 + 1
   \   0000B5   3400         ADDC    A,#0x0
   \   0000B7   FB           MOV     R3,A
   \   0000B8   12....       LCALL   ??ZDP_SendData?relay
   \   0000BB   7405         MOV     A,#0x5
   \   0000BD   12....       LCALL   ?DEALLOC_XSTACK8
   1839          }
   \   0000C0   7406         MOV     A,#0x6
   \   0000C2   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C5   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine88:
   \   000000   12....       LCALL   ?Subroutine125 & 0xFFFF
   \                     ??CrossCallReturnLabel_441:
   \   000003                ; Setup parameters for call to function AddrMgrExtAddrValid
   \   000003                ; Setup parameters for call to function sAddrExtCpy
   \   000003   EE           MOV     A,R6
   \   000004   22           RET
   1840          
   1841          
   1842          /*********************************************************************
   1843           * @fn          ZDO_ProcessMgmtPermitJoinReq
   1844           *
   1845           * @brief       This function processes a Management Permit Join Request
   1846           *              and generates the response.
   1847           *
   1848           * @param       inMsg - incoming message (request)
   1849           *
   1850           * @return      none
   1851           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1852          void ZDO_ProcessMgmtPermitJoinReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessMgmtPermitJoinReq:
   1853          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 1
   \   000005   74FF         MOV     A,#-0x1
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   12....       LCALL   ?Subroutine90 & 0xFFFF
   1854            uint8 stat;
   1855            uint8 duration;
   1856            uint8 tcsig;
   1857          
   1858            duration = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_DURATION];
   1859            tcsig    = inMsg->asdu[ZDP_MGMT_PERMIT_JOIN_REQ_TC_SIG];
   1860          
   1861            // Set the network layer permit join duration
   1862            stat = (byte) NLME_PermitJoiningRequest( duration );
   \                     ??CrossCallReturnLabel_242:
   \   00000D   EF           MOV     A,R7
   \   00000E   12....       LCALL   ??Subroutine163_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_342:
   \   000011   F9           MOV     R1,A
   \   000012   12....       LCALL   ??NLME_PermitJoiningRequest?relay
   \   000015   E9           MOV     A,R1
   \   000016   85..82       MOV     DPL,?XSP + 0
   \   000019   85..83       MOV     DPH,?XSP + 1
   \   00001C   F0           MOVX    @DPTR,A
   1863          
   1864            // Handle the Trust Center Significance
   1865            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1866            {
   1867              if ( tcsig == TRUE )
   1868              {
   1869                ZDSecMgrPermitJoining( duration );
   1870              }
   1871            }
   1872          
   1873            // Send a response if unicast
   1874            if ( !inMsg->wasBroadcast )
   \   00001D   EE           MOV     A,R6
   \   00001E   240B         ADD     A,#0xb
   \   000020   12....       LCALL   ??Subroutine151_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_281:
   \   000023   702E         JNZ     ??ZDO_ProcessMgmtPermitJoinReq_0
   1875            {
   1876              ZDP_MgmtPermitJoinRsp( inMsg->TransSeq, &(inMsg->srcAddr), stat, false );
   \   000025                ; Setup parameters for call to function ZDP_SendData
   \   000025   75..00       MOV     ?V0 + 0,#0x0
   \   000028   78..         MOV     R0,#?V0 + 0
   \   00002A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00002D   7401         MOV     A,#0x1
   \   00002F   12....       LCALL   ?XSTACK_DISP0_8
   \   000032   8582..       MOV     ?V0 + 0,DPL
   \   000035   8583..       MOV     ?V0 + 1,DPH
   \   000038   78..         MOV     R0,#?V0 + 0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   75..36       MOV     ?V0 + 0,#0x36
   \   000040   75..80       MOV     ?V0 + 1,#-0x80
   \   000043   78..         MOV     R0,#?V0 + 0
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000048   12....       LCALL   ?Subroutine96 & 0xFFFF
   1877            }
   \                     ??CrossCallReturnLabel_161:
   \   00004B   12....       LCALL   ??ZDP_SendData?relay
   \   00004E   7405         MOV     A,#0x5
   \   000050   12....       LCALL   ?DEALLOC_XSTACK8
   1878          }
   \                     ??ZDO_ProcessMgmtPermitJoinReq_0:
   \   000053   02....       LJMP    ?Subroutine8 & 0xFFFF
   1879          
   1880          /*
   1881           * This function stub allows the next higher layer to be notified of
   1882           * a permit joining timeout.
   1883           */
   1884          /*********************************************************************
   1885           * @fn          ZDO_ProcessMgmtPermitJoinTimeout
   1886           *
   1887           * @brief       This function stub allows the next higher layer to be
   1888           *              notified of a permit joining timeout. Currently, this
   1889           *              directly bypasses the APS layer.
   1890           *
   1891           * @param       none
   1892           *
   1893           * @return      none
   1894           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1895          void ZDO_ProcessMgmtPermitJoinTimeout( void )
   \                     NLME_PermitJoiningTimeout:
   1896          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
   1897            #if defined( ZDO_MGMT_PERMIT_JOIN_RESPONSE )
   1898            // Currently, only the ZDSecMgr needs to be notified
   1899            if ( ZG_SECURE_ENABLED && ZG_BUILD_COORDINATOR_TYPE && ZG_DEVICE_COORDINATOR_TYPE )
   1900            {
   1901              ZDSecMgrPermitJoiningTimeout();
   1902            }
   1903            #endif
   1904          }
   \   000000   02....       LJMP    ?BRET
   1905          
   1906          /*********************************************************************
   1907           * @fn          ZDO_ProcessUserDescReq
   1908           *
   1909           * @brief       This function finishes the processing of the User
   1910           *              Descriptor Request and generates the response.
   1911           *
   1912           * @param       inMsg - incoming message (request)
   1913           *
   1914           * @return      none
   1915           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1916          void ZDO_ProcessUserDescReq( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescReq:
   1917          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 17
   \   000005   74EF         MOV     A,#-0x11
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1918            uint16 aoi = BUILD_UINT16( inMsg->asdu[0], inMsg->asdu[1] );
   \   00000E   12....       LCALL   ?Subroutine57 & 0xFFFF
   \                     ??CrossCallReturnLabel_107:
   \   000011   F5..         MOV     ?V0 + 4,A
   \   000013   E4           CLR     A
   \   000014   39           ADDC    A,R1
   \   000015   F5..         MOV     ?V0 + 5,A
   1919            UserDescriptorFormat_t userDesc;
   1920          
   1921            if ( (aoi == ZDAppNwkAddr.addr.shortAddr) && (ZSUCCESS == osal_nv_read(
   1922                       ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc )) )
   \   000017   EE           MOV     A,R6
   \   000018   240F         ADD     A,#0xf
   \   00001A   F5..         MOV     ?V0 + 2,A
   \   00001C   EF           MOV     A,R7
   \   00001D   12....       LCALL   ??Subroutine147_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_248:
   \   000020   EE           MOV     A,R6
   \   000021   2402         ADD     A,#0x2
   \   000023   F5..         MOV     ?V0 + 0,A
   \   000025   EF           MOV     A,R7
   \   000026   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_429:
   \   000029   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00002C   E0           MOVX    A,@DPTR
   \   00002D   65..         XRL     A,?V0 + 4
   \   00002F   7004         JNZ     ??ZDO_ProcessUserDescReq_0
   \   000031   A3           INC     DPTR
   \   000032   E0           MOVX    A,@DPTR
   \   000033   65..         XRL     A,?V0 + 5
   \                     ??ZDO_ProcessUserDescReq_0:
   \   000035   7061         JNZ     ??ZDO_ProcessUserDescReq_1
   \   000037                ; Setup parameters for call to function osal_nv_read
   \   000037   85..82       MOV     DPL,?XSP + 0
   \   00003A   85..83       MOV     DPH,?XSP + 1
   \   00003D   8582..       MOV     ?V0 + 6,DPL
   \   000040   8583..       MOV     ?V0 + 7,DPH
   \   000043   78..         MOV     R0,#?V0 + 6
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000048   75..11       MOV     ?V0 + 6,#0x11
   \   00004B   75..00       MOV     ?V0 + 7,#0x0
   \   00004E   78..         MOV     R0,#?V0 + 6
   \   000050   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000053   7C00         MOV     R4,#0x0
   \   000055   7D00         MOV     R5,#0x0
   \   000057   7A81         MOV     R2,#-0x7f
   \   000059   7B00         MOV     R3,#0x0
   \   00005B   12....       LCALL   ??osal_nv_read?relay
   \   00005E   7404         MOV     A,#0x4
   \   000060   12....       LCALL   ?DEALLOC_XSTACK8
   \   000063   E9           MOV     A,R1
   \   000064   7032         JNZ     ??ZDO_ProcessUserDescReq_1
   1923            {
   1924              ZDP_UserDescRsp( inMsg->TransSeq, &(inMsg->srcAddr), aoi, &userDesc, false );
   \   000066                ; Setup parameters for call to function ZDP_UserDescRsp
   \   000066   75..00       MOV     ?V0 + 6,#0x0
   \   000069   78..         MOV     R0,#?V0 + 6
   \   00006B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00006E   7401         MOV     A,#0x1
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   8582..       MOV     ?V0 + 6,DPL
   \   000076   8583..       MOV     ?V0 + 7,DPH
   \   000079   78..         MOV     R0,#?V0 + 6
   \   00007B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00007E   AC..         MOV     R4,?V0 + 4
   \   000080   AD..         MOV     R5,?V0 + 5
   \   000082   AA..         MOV     R2,?V0 + 0
   \   000084   AB..         MOV     R3,?V0 + 1
   \   000086   85..82       MOV     DPL,?V0 + 2
   \   000089   85..83       MOV     DPH,?V0 + 3
   \   00008C   E0           MOVX    A,@DPTR
   \   00008D   F9           MOV     R1,A
   \   00008E   12....       LCALL   ??ZDP_UserDescRsp?relay
   \   000091   7403         MOV     A,#0x3
   \   000093   12....       LCALL   ?DEALLOC_XSTACK8
   \   000096   802A         SJMP    ??ZDO_ProcessUserDescReq_2
   1925            }
   1926            else
   1927            {
   1928              ZDP_GenericRsp(inMsg->TransSeq, &(inMsg->srcAddr),
   1929                     ZDP_NOT_SUPPORTED, aoi, User_Desc_rsp, inMsg->SecurityUse );
   \                     ??ZDO_ProcessUserDescReq_1:
   \   000098                ; Setup parameters for call to function ZDP_GenericRsp
   \   000098   75..11       MOV     ?V0 + 6,#0x11
   \   00009B   75..80       MOV     ?V0 + 7,#-0x80
   \   00009E   78..         MOV     R0,#?V0 + 6
   \   0000A0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A3   78..         MOV     R0,#?V0 + 4
   \   0000A5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A8   12....       LCALL   ?Subroutine93 & 0xFFFF
   1930            }
   \                     ??CrossCallReturnLabel_284:
   \   0000AB   FD           MOV     R5,A
   \   0000AC   7C84         MOV     R4,#-0x7c
   \   0000AE   AA..         MOV     R2,?V0 + 0
   \   0000B0   AB..         MOV     R3,?V0 + 1
   \   0000B2   85..82       MOV     DPL,?V0 + 2
   \   0000B5   85..83       MOV     DPH,?V0 + 3
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   F9           MOV     R1,A
   \   0000BA   12....       LCALL   ??ZDP_GenericRsp?relay
   \   0000BD   7404         MOV     A,#0x4
   \   0000BF   12....       LCALL   ?DEALLOC_XSTACK8
   1931          }
   \                     ??ZDO_ProcessUserDescReq_2:
   \   0000C2   7411         MOV     A,#0x11
   \   0000C4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C7   80..         SJMP    ??Subroutine165_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine165_0:
   \   000000   7F08         MOV     R7,#0x8
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   1932          
   1933          /*********************************************************************
   1934           * @fn          ZDO_ProcessUserDescSet
   1935           *
   1936           * @brief       This function finishes the processing of the User
   1937           *              Descriptor Set and generates the response.
   1938           *
   1939           * @param       inMsg - incoming message (request)
   1940           *
   1941           * @return      none
   1942           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1943          void ZDO_ProcessUserDescSet( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessUserDescSet:
   1944          {
   \   000000   74F1         MOV     A,#-0xf
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 15
   \   000005                ; Auto size: 21
   \   000005   74EB         MOV     A,#-0x15
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   8A..         MOV     ?V0 + 2,R2
   \   00000C   8B..         MOV     ?V0 + 3,R3
   1945            uint8 *msg;
   1946            uint16 aoi;
   1947            UserDescriptorFormat_t userDesc;
   1948            uint8 outMsg[3];
   1949            uint8 status;
   1950          
   1951            msg = inMsg->asdu;
   \   00000E   EA           MOV     A,R2
   \   00000F   12....       LCALL   ??Subroutine146_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_243:
   \   000012   EB           MOV     A,R3
   \   000013   12....       LCALL   ?Subroutine59 & 0xFFFF
   1952            aoi = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_110:
   \   000016   2400         ADD     A,#0x0
   \   000018   FE           MOV     R6,A
   \   000019   E4           CLR     A
   \   00001A   3B           ADDC    A,R3
   \   00001B   FF           MOV     R7,A
   1953          
   1954            if ( aoi == ZDAppNwkAddr.addr.shortAddr )
   \   00001C   90....       MOV     DPTR,#ZDAppNwkAddr
   \   00001F   E0           MOVX    A,@DPTR
   \   000020   6E           XRL     A,R6
   \   000021   7003         JNZ     ??ZDO_ProcessUserDescSet_0
   \   000023   A3           INC     DPTR
   \   000024   E0           MOVX    A,@DPTR
   \   000025   6F           XRL     A,R7
   \                     ??ZDO_ProcessUserDescSet_0:
   \   000026   6003         JZ      $+5
   \   000028   02....       LJMP    ??ZDO_ProcessUserDescSet_1 & 0xFFFF
   1955            {
   1956              userDesc.len = (msg[2] < AF_MAX_USER_DESCRIPTOR_LEN) ? msg[2] : AF_MAX_USER_DESCRIPTOR_LEN;
   \   00002B   8882         MOV     DPL,R0
   \   00002D   8983         MOV     DPH,R1
   \   00002F   A3           INC     DPTR
   \   000030   A3           INC     DPTR
   \   000031   E0           MOVX    A,@DPTR
   \   000032   FA           MOV     R2,A
   \   000033   9410         SUBB    A,#0x10
   \   000035   5004         JNC     ??ZDO_ProcessUserDescSet_2
   \   000037   8A..         MOV     ?V0 + 0,R2
   \   000039   8003         SJMP    ??ZDO_ProcessUserDescSet_3
   \                     ??ZDO_ProcessUserDescSet_2:
   \   00003B   75..10       MOV     ?V0 + 0,#0x10
   \                     ??ZDO_ProcessUserDescSet_3:
   \   00003E   7404         MOV     A,#0x4
   \   000040   12....       LCALL   ?XSTACK_DISP0_8
   \   000043   E5..         MOV     A,?V0 + 0
   \   000045   12....       LCALL   ?Subroutine44 & 0xFFFF
   1957              msg ++;  // increment one for the length field
   1958          
   1959              osal_memcpy( userDesc.desc, &msg[2], userDesc.len );
   \                     ??CrossCallReturnLabel_83:
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A982         MOV     R1,DPL
   \   00004C   AA83         MOV     R2,DPH
   \   00004E   89..         MOV     ?V0 + 4,R1
   \   000050   8A..         MOV     ?V0 + 5,R2
   \   000052   75..00       MOV     ?V0 + 6,#0x0
   \   000055   78..         MOV     R0,#?V0 + 4
   \   000057   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00005A   7407         MOV     A,#0x7
   \   00005C   12....       LCALL   ?XSTACK_DISP0_8
   \   00005F   E0           MOVX    A,@DPTR
   \   000060   FC           MOV     R4,A
   \   000061   7D00         MOV     R5,#0x0
   \   000063   7408         MOV     A,#0x8
   \   000065   12....       LCALL   ?XSTACK_DISP0_8
   \   000068   AA82         MOV     R2,DPL
   \   00006A   AB83         MOV     R3,DPH
   \   00006C   12....       LCALL   ??osal_memcpy?relay
   \   00006F   7403         MOV     A,#0x3
   \   000071   12....       LCALL   ?DEALLOC_XSTACK8
   1960              osal_nv_write( ZCD_NV_USERDESC, 0, sizeof(UserDescriptorFormat_t), &userDesc );
   \   000074                ; Setup parameters for call to function osal_nv_write
   \   000074   7404         MOV     A,#0x4
   \   000076   12....       LCALL   ?XSTACK_DISP0_8
   \   000079   8582..       MOV     ?V0 + 4,DPL
   \   00007C   8583..       MOV     ?V0 + 5,DPH
   \   00007F   78..         MOV     R0,#?V0 + 4
   \   000081   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000084   75..11       MOV     ?V0 + 4,#0x11
   \   000087   75..00       MOV     ?V0 + 5,#0x0
   \   00008A   78..         MOV     R0,#?V0 + 4
   \   00008C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008F   7C00         MOV     R4,#0x0
   \   000091   7D00         MOV     R5,#0x0
   \   000093   7A81         MOV     R2,#-0x7f
   \   000095   7B00         MOV     R3,#0x0
   \   000097   12....       LCALL   ??osal_nv_write?relay
   \   00009A   7404         MOV     A,#0x4
   \   00009C   12....       LCALL   ?DEALLOC_XSTACK8
   1961              if ( userDesc.len != 0 )
   \   00009F   7404         MOV     A,#0x4
   \   0000A1   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A4   E0           MOVX    A,@DPTR
   \   0000A5   90....       MOV     DPTR,#ZDO_Config_Node_Descriptor
   \   0000A8   6005         JZ      ??ZDO_ProcessUserDescSet_4
   1962              {
   1963                ZDO_Config_Node_Descriptor.UserDescAvail = TRUE;
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   D2E4         SETB    0xE0 /* A   */.4
   \   0000AD   8003         SJMP    ??ZDO_ProcessUserDescSet_5
   1964              }
   1965              else
   1966              {
   1967                ZDO_Config_Node_Descriptor.UserDescAvail = FALSE;
   \                     ??ZDO_ProcessUserDescSet_4:
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   C2E4         CLR     0xE0 /* A   */.4
   1968              }
   1969          
   1970              status = ZDP_SUCCESS;
   1971            }
   \                     ??ZDO_ProcessUserDescSet_5:
   \   0000B2   12....       LCALL   ?Subroutine111 & 0xFFFF
   \                     ??CrossCallReturnLabel_187:
   \   0000B5   E4           CLR     A
   \   0000B6   8008         SJMP    ??ZDO_ProcessUserDescSet_6
   1972            else
   1973            {
   1974              status =  ZDP_NOT_SUPPORTED;
   \                     ??ZDO_ProcessUserDescSet_1:
   \   0000B8   85..82       MOV     DPL,?XSP + 0
   \   0000BB   85..83       MOV     DPH,?XSP + 1
   \   0000BE   7484         MOV     A,#-0x7c
   \                     ??ZDO_ProcessUserDescSet_6:
   \   0000C0   F0           MOVX    @DPTR,A
   1975            }
   1976          
   1977            outMsg[0] = status;
   \   0000C1   E0           MOVX    A,@DPTR
   \   0000C2   C0E0         PUSH    A
   \   0000C4   7401         MOV     A,#0x1
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   D0E0         POP     A
   \   0000CB   F0           MOVX    @DPTR,A
   1978            outMsg[1] = LO_UINT16( aoi );
   \   0000CC   7402         MOV     A,#0x2
   \   0000CE   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D1   EE           MOV     A,R6
   \   0000D2   F0           MOVX    @DPTR,A
   1979            outMsg[2] = LO_UINT16( aoi );
   \   0000D3   7403         MOV     A,#0x3
   \   0000D5   12....       LCALL   ?XSTACK_DISP0_8
   \   0000D8   EE           MOV     A,R6
   \   0000D9   F0           MOVX    @DPTR,A
   1980          
   1981            ZDP_SendData( &(inMsg->TransSeq), &(inMsg->srcAddr), User_Desc_conf, 3, outMsg,
   1982                         inMsg->SecurityUse );
   \   0000DA                ; Setup parameters for call to function ZDP_SendData
   \   0000DA   E5..         MOV     A,?V0 + 2
   \   0000DC   12....       LCALL   ??Subroutine172_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_379:
   \   0000DF   E5..         MOV     A,?V0 + 3
   \   0000E1   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_276:
   \   0000E4   F5..         MOV     ?V0 + 1,A
   \   0000E6   78..         MOV     R0,#?V0 + 1
   \   0000E8   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000EB   7402         MOV     A,#0x2
   \   0000ED   12....       LCALL   ?XSTACK_DISP0_8
   \   0000F0   8582..       MOV     ?V0 + 4,DPL
   \   0000F3   8583..       MOV     ?V0 + 5,DPH
   \   0000F6   78..         MOV     R0,#?V0 + 4
   \   0000F8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000FB   75..14       MOV     ?V0 + 4,#0x14
   \   0000FE   75..80       MOV     ?V0 + 5,#-0x80
   \   000101   78..         MOV     R0,#?V0 + 4
   \   000103   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000106   7903         MOV     R1,#0x3
   \   000108   E5..         MOV     A,?V0 + 2
   \   00010A   2402         ADD     A,#0x2
   \   00010C   FC           MOV     R4,A
   \   00010D   E5..         MOV     A,?V0 + 3
   \   00010F   3400         ADDC    A,#0x0
   \   000111   FD           MOV     R5,A
   \   000112   E5..         MOV     A,?V0 + 2
   \   000114   240F         ADD     A,#0xf
   \   000116   FA           MOV     R2,A
   \   000117   E5..         MOV     A,?V0 + 3
   \   000119   3400         ADDC    A,#0x0
   \   00011B   FB           MOV     R3,A
   \   00011C   12....       LCALL   ??ZDP_SendData?relay
   \   00011F   7405         MOV     A,#0x5
   \   000121   12....       LCALL   ?DEALLOC_XSTACK8
   1983          }
   \   000124   7415         MOV     A,#0x15
   \   000126   12....       LCALL   ?DEALLOC_XSTACK8
   \   000129   7F07         MOV     R7,#0x7
   \   00012B   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine44:
   \   000000   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_419:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine113:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function osal_memcpy
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   22           RET
   1984          
   1985          /*********************************************************************
   1986           * @fn          ZDO_ProcessDeviceAnnce
   1987           *
   1988           * @brief       This function processes a device annouce message.
   1989           *
   1990           * @param       inMsg - incoming message
   1991           *
   1992           * @return      none
   1993           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine79:
   \   000000   AC82         MOV     R4,DPL
   \   000002   AD83         MOV     R5,DPH
   \   000004                REQUIRE ??Subroutine158_0
   \   000004                ; // Fall through to label ??Subroutine158_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1994          void ZDO_ProcessDeviceAnnce( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ProcessDeviceAnnce:
   1995          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 32
   \   000005   74E0         MOV     A,#-0x20
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   EA           MOV     A,R2
   \   00000B   FE           MOV     R6,A
   \   00000C   EB           MOV     A,R3
   \   00000D   FF           MOV     R7,A
   1996            ZDO_DeviceAnnce_t Annce;
   1997            AddrMgrEntry_t addrEntry;
   1998            uint8 parentExt[Z_EXTADDR_LEN];
   1999          
   2000            // Parse incoming message
   2001            ZDO_ParseDeviceAnnce( inMsg, &Annce );
   \   00000E                ; Setup parameters for call to function ZDO_ParseDeviceAnnce
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   AC82         MOV     R4,DPL
   \   000016   AD83         MOV     R5,DPH
   \   000018   12....       LCALL   ??ZDO_ParseDeviceAnnce?relay
   2002          
   2003            if ( ZSTACK_END_DEVICE_BUILD )
   2004            {
   2005              // Make sure the message didn't come from myself - end device only
   2006              if ( osal_ExtAddrEqual( NLME_GetExtAddr(), Annce.extAddr ) && Annce.nwkAddr == NLME_GetShortAddr() )
   2007              {
   2008                return;
   2009              }
   2010            }
   2011          
   2012          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   2013            // Clean up the neighbor table
   2014            nwkNeighborRemoveAllStranded();
   \   00001B                ; Setup parameters for call to function nwkNeighborRemoveAllStranded
   \   00001B   12....       LCALL   ??nwkNeighborRemoveAllStranded?relay
   2015          
   2016            // If address conflict is detected, no need to update the address manager
   2017            if ( NLME_CheckNewAddrSet( Annce.nwkAddr, Annce.extAddr )== ZFailure )
   \   00001E                ; Setup parameters for call to function NLME_CheckNewAddrSet
   \   00001E   7402         MOV     A,#0x2
   \   000020   12....       LCALL   ?XSTACK_DISP0_8
   \   000023   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_308:
   \   000026   12....       LCALL   ??NLME_CheckNewAddrSet?relay
   \   000029   E9           MOV     A,R1
   \   00002A   6401         XRL     A,#0x1
   \   00002C   7003         JNZ     $+5
   \   00002E   02....       LJMP    ??ZDO_ProcessDeviceAnnce_0 & 0xFFFF
   2018            {
   2019              return;
   2020            }
   2021          #endif
   2022          
   2023          #if defined ( ZIGBEE_STOCHASTIC_ADDRESSING )
   2024            // Check for parent's address
   2025            NLME_GetCoordExtAddr( parentExt );
   \   000031                ; Setup parameters for call to function NLME_GetCoordExtAddr
   \   000031   7418         MOV     A,#0x18
   \   000033   12....       LCALL   ?XSTACK_DISP0_8
   \   000036   AA82         MOV     R2,DPL
   \   000038   AB83         MOV     R3,DPH
   \   00003A   12....       LCALL   ??NLME_GetCoordExtAddr?relay
   2026            if ( osal_ExtAddrEqual( parentExt, Annce.extAddr ) )
   \   00003D                ; Setup parameters for call to function sAddrExtCmp
   \   00003D   7402         MOV     A,#0x2
   \   00003F   12....       LCALL   ?XSTACK_DISP0_8
   \   000042   AC82         MOV     R4,DPL
   \   000044   AD83         MOV     R5,DPH
   \   000046   7418         MOV     A,#0x18
   \   000048   12....       LCALL   ?XSTACK_DISP0_8
   \   00004B   AA82         MOV     R2,DPL
   \   00004D   AB83         MOV     R3,DPH
   \   00004F   12....       LCALL   ??sAddrExtCmp?relay
   \   000052   E9           MOV     A,R1
   \   000053   602C         JZ      ??ZDO_ProcessDeviceAnnce_1
   2027            {
   2028              if ( Annce.nwkAddr != NLME_GetCoordShortAddr() )
   \   000055                ; Setup parameters for call to function NLME_GetCoordShortAddr
   \   000055   12....       LCALL   ??NLME_GetCoordShortAddr?relay
   \   000058   8A..         MOV     ?V0 + 0,R2
   \   00005A   8B..         MOV     ?V0 + 1,R3
   \   00005C   A8..         MOV     R0,?V0 + 0
   \   00005E   A9..         MOV     R1,?V0 + 1
   \   000060   85..82       MOV     DPL,?XSP + 0
   \   000063   85..83       MOV     DPH,?XSP + 1
   \   000066   E0           MOVX    A,@DPTR
   \   000067   68           XRL     A,R0
   \   000068   7003         JNZ     ??ZDO_ProcessDeviceAnnce_2
   \   00006A   A3           INC     DPTR
   \   00006B   E0           MOVX    A,@DPTR
   \   00006C   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_2:
   \   00006D   6012         JZ      ??ZDO_ProcessDeviceAnnce_1
   2029              {
   2030                // Set the Parent's MAC's new short address
   2031                _NIB.nwkCoordAddress = Annce.nwkAddr;
   \   00006F   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_324:
   \   000072   90....       MOV     DPTR,#_NIB + 23
   \   000075   12....       LCALL   ??Subroutine148_0 & 0xFFFF
   2032                ZMacSetReq( ZMacCoordShortAddress, (byte*)&(_NIB.nwkCoordAddress) );
   \                     ??CrossCallReturnLabel_262:
   \   000078                ; Setup parameters for call to function ZMacSetReq
   \   000078   7A..         MOV     R2,#(_NIB + 23) & 0xff
   \   00007A   7B..         MOV     R3,#((_NIB + 23) >> 8) & 0xff
   \   00007C   794B         MOV     R1,#0x4b
   \   00007E   12....       LCALL   ??ZMacSetReq?relay
   2033              }
   2034            }
   2035          
   2036            if ( ZSTACK_ROUTER_BUILD )
   2037            {
   2038              // If the device annce comes from a end device child that has moved
   2039              // to another parent, remove it from associated device list
   2040          
   2041              // If the dev annce is coming from other device's children,
   2042              // (The dev annce from its own children shall be unicast to itself,
   2043              // So check the mac destination address)
   2044              // Remove it from the associated device list. If it is not
   2045              // a child, no action will be taken in AssocRemove() anyway.
   2046              if ( inMsg->macDestAddr != NLME_GetShortAddr() )
   \                     ??ZDO_ProcessDeviceAnnce_1:
   \   000081   EE           MOV     A,R6
   \   000082   2411         ADD     A,#0x11
   \   000084   F582         MOV     DPL,A
   \   000086   EF           MOV     A,R7
   \   000087   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_398:
   \   00008A   C082         PUSH    DPL
   \   00008C   C083         PUSH    DPH
   \   00008E                ; Setup parameters for call to function NLME_GetShortAddr
   \   00008E   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000091   8A..         MOV     ?V0 + 0,R2
   \   000093   8B..         MOV     ?V0 + 1,R3
   \   000095   D083         POP     DPH
   \   000097   D082         POP     DPL
   \   000099   E0           MOVX    A,@DPTR
   \   00009A   65..         XRL     A,?V0 + 0
   \   00009C   7004         JNZ     ??ZDO_ProcessDeviceAnnce_3
   \   00009E   A3           INC     DPTR
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   65..         XRL     A,?V0 + 1
   \                     ??ZDO_ProcessDeviceAnnce_3:
   \   0000A2   6050         JZ      ??ZDO_ProcessDeviceAnnce_4
   2047              {
   2048                associated_devices_t *dev_ptr;
   2049          
   2050                // If it's an end device child
   2051                dev_ptr = AssocGetWithExt( Annce.extAddr );
   \   0000A4                ; Setup parameters for call to function AssocGetWithExt
   \   0000A4   7402         MOV     A,#0x2
   \   0000A6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000A9   AA82         MOV     R2,DPL
   \   0000AB   AB83         MOV     R3,DPH
   \   0000AD   12....       LCALL   ??AssocGetWithExt?relay
   \   0000B0   8A82         MOV     DPL,R2
   \   0000B2   8B83         MOV     DPH,R3
   2052                if ( dev_ptr )
   \   0000B4   E582         MOV     A,DPL
   \   0000B6   4583         ORL     A,DPH
   \   0000B8   601C         JZ      ??ZDO_ProcessDeviceAnnce_5
   2053                {
   2054                  if ( dev_ptr->nodeRelation == CHILD_RFD ||
   2055                       dev_ptr->nodeRelation == CHILD_RFD_RX_IDLE )
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   E0           MOVX    A,@DPTR
   \   0000BF   F8           MOV     R0,A
   \   0000C0   7401         MOV     A,#0x1
   \   0000C2   68           XRL     A,R0
   \   0000C3   6005         JZ      ??ZDO_ProcessDeviceAnnce_6
   \   0000C5   7402         MOV     A,#0x2
   \   0000C7   68           XRL     A,R0
   \   0000C8   700C         JNZ     ??ZDO_ProcessDeviceAnnce_5
   2056                  {
   2057                    AssocRemove( Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_6:
   \   0000CA                ; Setup parameters for call to function AssocRemove
   \   0000CA   7402         MOV     A,#0x2
   \   0000CC   12....       LCALL   ?XSTACK_DISP0_8
   \   0000CF   AA82         MOV     R2,DPL
   \   0000D1   AB83         MOV     R3,DPH
   \   0000D3   12....       LCALL   ??AssocRemove?relay
   2058                  }
   2059                }
   2060          
   2061          #if defined ( ZIGBEE_CHILD_AGING )
   2062                // Remove the address from the SrcMatch table,
   2063                // just in case the device was aged out by Child Management Table process
   2064                if ( ( pNwkNotMyChildListDelete != NULL ) &&
   2065                     ( zgChildAgingEnable == TRUE ) )
   \                     ??ZDO_ProcessDeviceAnnce_5:
   \   0000D6   90....       MOV     DPTR,#pNwkNotMyChildListDelete
   \   0000D9   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_355:
   \   0000DC   6016         JZ      ??ZDO_ProcessDeviceAnnce_4
   \   0000DE   90....       MOV     DPTR,#zgChildAgingEnable
   \   0000E1   E0           MOVX    A,@DPTR
   \   0000E2   6401         XRL     A,#0x1
   \   0000E4   700E         JNZ     ??ZDO_ProcessDeviceAnnce_4
   2066                {
   2067                  pNwkNotMyChildListDelete( Annce.nwkAddr );
   \   0000E6                ; Setup parameters for indirect call
   \   0000E6   12....       LCALL   ??Subroutine158_0 & 0xFFFF
   2068                }
   2069          #endif // ZIGBEE_CHILD_AGING
   2070              }
   \                     ??CrossCallReturnLabel_306:
   \   0000E9   90....       MOV     DPTR,#pNwkNotMyChildListDelete + 1
   \   0000EC   E0           MOVX    A,@DPTR
   \   0000ED   F583         MOV     DPH,A
   \   0000EF   8882         MOV     DPL,R0
   \   0000F1   12....       LCALL   ?CALL_IND
   2071          
   2072              if ( Annce.nwkAddr != NLME_GetShortAddr() )
   \                     ??ZDO_ProcessDeviceAnnce_4:
   \   0000F4                ; Setup parameters for call to function NLME_GetShortAddr
   \   0000F4   12....       LCALL   ??NLME_GetShortAddr?relay
   \   0000F7   8A..         MOV     ?V0 + 0,R2
   \   0000F9   8B..         MOV     ?V0 + 1,R3
   \   0000FB   A8..         MOV     R0,?V0 + 0
   \   0000FD   A9..         MOV     R1,?V0 + 1
   \   0000FF   85..82       MOV     DPL,?XSP + 0
   \   000102   85..83       MOV     DPH,?XSP + 1
   \   000105   E0           MOVX    A,@DPTR
   \   000106   68           XRL     A,R0
   \   000107   7003         JNZ     ??ZDO_ProcessDeviceAnnce_7
   \   000109   A3           INC     DPTR
   \   00010A   E0           MOVX    A,@DPTR
   \   00010B   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_7:
   \   00010C   6011         JZ      ??ZDO_ProcessDeviceAnnce_8
   2073              {
   2074                // If an associated device is found with matched extended Address,
   2075                // update its short address
   2076                if ( AssocChangeNwkAddr( Annce.nwkAddr, Annce.extAddr ) )
   \   00010E                ; Setup parameters for call to function AssocChangeNwkAddr
   \   00010E   7402         MOV     A,#0x2
   \   000110   12....       LCALL   ?XSTACK_DISP0_8
   \   000113   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_309:
   \   000116   12....       LCALL   ??AssocChangeNwkAddr?relay
   \   000119   E9           MOV     A,R1
   \   00011A   6003         JZ      ??ZDO_ProcessDeviceAnnce_8
   2077                {
   2078                  // Set event to save NV
   2079                  ZDApp_NVUpdate();
   \   00011C                ; Setup parameters for call to function ZDApp_NVUpdate
   \   00011C   12....       LCALL   ??ZDApp_NVUpdate?relay
   2080                }
   2081              }
   2082            }
   2083          
   2084            // Update the neighbor table
   2085            nwkNeighborUpdateNwkAddr( Annce.nwkAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_8:
   \   00011F                ; Setup parameters for call to function nwkNeighborUpdateNwkAddr
   \   00011F   7402         MOV     A,#0x2
   \   000121   12....       LCALL   ?XSTACK_DISP0_8
   \   000124   12....       LCALL   ?Subroutine79 & 0xFFFF
   \                     ??CrossCallReturnLabel_310:
   \   000127   12....       LCALL   ??nwkNeighborUpdateNwkAddr?relay
   2086          
   2087            // Assume that the device has moved, remove existing routing entries
   2088            RTG_RemoveRtgEntry( Annce.nwkAddr, 0 );
   \   00012A                ; Setup parameters for call to function RTG_RemoveRtgEntry
   \   00012A   7900         MOV     R1,#0x0
   \   00012C   12....       LCALL   ??Subroutine158_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_307:
   \   00012F   12....       LCALL   ??RTG_RemoveRtgEntry?relay
   2089          
   2090          #endif // ZIGBEE_STOCHASTIC_ADDRESSING
   2091          
   2092            // Fill in the extended address in address manager if we don't have it already.
   2093            addrEntry.user = ADDRMGR_USER_DEFAULT;
   \   000132   740B         MOV     A,#0xb
   \   000134   12....       LCALL   ?XSTACK_DISP0_8
   \   000137   E4           CLR     A
   \   000138   12....       LCALL   ?Subroutine46 & 0xFFFF
   2094            addrEntry.nwkAddr = Annce.nwkAddr;
   \                     ??CrossCallReturnLabel_88:
   \   00013B   F8           MOV     R0,A
   \   00013C   A3           INC     DPTR
   \   00013D   E0           MOVX    A,@DPTR
   \   00013E   F9           MOV     R1,A
   \   00013F   740C         MOV     A,#0xc
   \   000141   12....       LCALL   ?XSTACK_DISP0_8
   \   000144   12....       LCALL   ??Subroutine148_0 & 0xFFFF
   2095            if ( AddrMgrEntryLookupNwk( &addrEntry ) )
   \                     ??CrossCallReturnLabel_263:
   \   000147                ; Setup parameters for call to function AddrMgrEntryLookupNwk
   \   000147   740B         MOV     A,#0xb
   \   000149   12....       LCALL   ?XSTACK_DISP0_8
   \   00014C   AA82         MOV     R2,DPL
   \   00014E   AB83         MOV     R3,DPH
   \   000150   12....       LCALL   ??AddrMgrEntryLookupNwk?relay
   \   000153   E9           MOV     A,R1
   \   000154   604B         JZ      ??ZDO_ProcessDeviceAnnce_9
   2096            {
   2097              osal_memset( parentExt, 0, Z_EXTADDR_LEN );
   \   000156                ; Setup parameters for call to function osal_memset
   \   000156   7C08         MOV     R4,#0x8
   \   000158   7D00         MOV     R5,#0x0
   \   00015A   7900         MOV     R1,#0x0
   \   00015C   7418         MOV     A,#0x18
   \   00015E   12....       LCALL   ?XSTACK_DISP0_8
   \   000161   AA82         MOV     R2,DPL
   \   000163   AB83         MOV     R3,DPH
   \   000165   12....       LCALL   ??osal_memset?relay
   2098              if ( osal_ExtAddrEqual( parentExt, addrEntry.extAddr ) )
   \   000168                ; Setup parameters for call to function sAddrExtCmp
   \   000168   740E         MOV     A,#0xe
   \   00016A   12....       LCALL   ?XSTACK_DISP0_8
   \   00016D   AC82         MOV     R4,DPL
   \   00016F   AD83         MOV     R5,DPH
   \   000171   7418         MOV     A,#0x18
   \   000173   12....       LCALL   ?XSTACK_DISP0_8
   \   000176   AA82         MOV     R2,DPL
   \   000178   AB83         MOV     R3,DPH
   \   00017A   12....       LCALL   ??sAddrExtCmp?relay
   \   00017D   E9           MOV     A,R1
   \   00017E   6021         JZ      ??ZDO_ProcessDeviceAnnce_9
   2099              {
   2100                AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \   000180                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   000180   7402         MOV     A,#0x2
   \   000182   12....       LCALL   ?XSTACK_DISP0_8
   \   000185   AC82         MOV     R4,DPL
   \   000187   AD83         MOV     R5,DPH
   \   000189   740E         MOV     A,#0xe
   \   00018B   12....       LCALL   ?XSTACK_DISP0_8
   \   00018E   AA82         MOV     R2,DPL
   \   000190   AB83         MOV     R3,DPH
   \   000192   12....       LCALL   ??AddrMgrExtAddrSet?relay
   2101                AddrMgrEntryUpdate( &addrEntry );
   \   000195                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   000195   740B         MOV     A,#0xb
   \   000197   12....       LCALL   ?XSTACK_DISP0_8
   \   00019A   AA82         MOV     R2,DPL
   \   00019C   AB83         MOV     R3,DPH
   \   00019E   12....       LCALL   ??AddrMgrEntryUpdate?relay
   2102              }
   2103            }
   2104          
   2105            // Update the short address in address manager if it's been changed
   2106            AddrMgrExtAddrSet( addrEntry.extAddr, Annce.extAddr );
   \                     ??ZDO_ProcessDeviceAnnce_9:
   \   0001A1                ; Setup parameters for call to function AddrMgrExtAddrSet
   \   0001A1   7402         MOV     A,#0x2
   \   0001A3   12....       LCALL   ?XSTACK_DISP0_8
   \   0001A6   AC82         MOV     R4,DPL
   \   0001A8   AD83         MOV     R5,DPH
   \   0001AA   740E         MOV     A,#0xe
   \   0001AC   12....       LCALL   ?XSTACK_DISP0_8
   \   0001AF   AA82         MOV     R2,DPL
   \   0001B1   AB83         MOV     R3,DPH
   \   0001B3   12....       LCALL   ??AddrMgrExtAddrSet?relay
   2107            if ( AddrMgrEntryLookupExt( &addrEntry ) )
   \   0001B6                ; Setup parameters for call to function AddrMgrEntryLookupExt
   \   0001B6   740B         MOV     A,#0xb
   \   0001B8   12....       LCALL   ?XSTACK_DISP0_8
   \   0001BB   AA82         MOV     R2,DPL
   \   0001BD   AB83         MOV     R3,DPH
   \   0001BF   12....       LCALL   ??AddrMgrEntryLookupExt?relay
   \   0001C2   E9           MOV     A,R1
   \   0001C3   602E         JZ      ??ZDO_ProcessDeviceAnnce_0
   2108            {
   2109              if ( addrEntry.nwkAddr != Annce.nwkAddr )
   \   0001C5   740C         MOV     A,#0xc
   \   0001C7   12....       LCALL   ?XSTACK_DISP0_8
   \   0001CA   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_320:
   \   0001CD   85..82       MOV     DPL,?XSP + 0
   \   0001D0   85..83       MOV     DPH,?XSP + 1
   \   0001D3   E0           MOVX    A,@DPTR
   \   0001D4   68           XRL     A,R0
   \   0001D5   7003         JNZ     ??ZDO_ProcessDeviceAnnce_10
   \   0001D7   A3           INC     DPTR
   \   0001D8   E0           MOVX    A,@DPTR
   \   0001D9   69           XRL     A,R1
   \                     ??ZDO_ProcessDeviceAnnce_10:
   \   0001DA   6017         JZ      ??ZDO_ProcessDeviceAnnce_0
   2110              {
   2111                addrEntry.nwkAddr = Annce.nwkAddr;
   \   0001DC   12....       LCALL   ?Subroutine84 & 0xFFFF
   \                     ??CrossCallReturnLabel_325:
   \   0001DF   740C         MOV     A,#0xc
   \   0001E1   12....       LCALL   ?XSTACK_DISP0_8
   \   0001E4   12....       LCALL   ??Subroutine148_0 & 0xFFFF
   2112                AddrMgrEntryUpdate( &addrEntry );
   \                     ??CrossCallReturnLabel_264:
   \   0001E7                ; Setup parameters for call to function AddrMgrEntryUpdate
   \   0001E7   740B         MOV     A,#0xb
   \   0001E9   12....       LCALL   ?XSTACK_DISP0_8
   \   0001EC   AA82         MOV     R2,DPL
   \   0001EE   AB83         MOV     R3,DPH
   \   0001F0   12....       LCALL   ??AddrMgrEntryUpdate?relay
   \                     ??ZDO_ProcessDeviceAnnce_0:
   \   0001F3   7420         MOV     A,#0x20
   2113              }
   2114            }
   \   0001F5   02....       LJMP    ??Subroutine143_0 & 0xFFFF
   2115          }
   2116          
   2117          /*********************************************************************
   2118           * @fn          ZDO_BuildSimpleDescBuf
   2119           *
   2120           * @brief       Build a byte sequence representation of a Simple Descriptor.
   2121           *
   2122           * @param       buf  - pointer to a byte array big enough for data.
   2123           * @param       desc - SimpleDescriptionFormat_t *
   2124           *
   2125           * @return      none
   2126           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2127          void ZDO_BuildSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_BuildSimpleDescBuf:
   2128          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2129            byte cnt;
   2130            uint16 *ptr;
   2131          
   2132            *buf++ = desc->EndPoint;
   \   000005   8C82         MOV     DPL,R4
   \   000007   8D83         MOV     DPH,R5
   \   000009   12....       LCALL   ?Subroutine71 & 0xFFFF
   2133            *buf++ = HI_UINT16( desc->AppProfId );
   \                     ??CrossCallReturnLabel_125:
   \   00000C   8C82         MOV     DPL,R4
   \   00000E   8D83         MOV     DPH,R5
   \   000010   A3           INC     DPTR
   \   000011   A882         MOV     R0,DPL
   \   000013   A983         MOV     R1,DPH
   \   000015   12....       LCALL   ?Subroutine20 & 0xFFFF
   2134            *buf++ = LO_UINT16( desc->AppProfId );
   2135            *buf++ = HI_UINT16( desc->AppDeviceId );
   \                     ??CrossCallReturnLabel_26:
   \   000018   EC           MOV     A,R4
   \   000019   2403         ADD     A,#0x3
   \   00001B   F8           MOV     R0,A
   \   00001C   ED           MOV     A,R5
   \   00001D   3400         ADDC    A,#0x0
   \   00001F   F9           MOV     R1,A
   \   000020   8882         MOV     DPL,R0
   \   000022   8983         MOV     DPH,R1
   \   000024   12....       LCALL   ?Subroutine20 & 0xFFFF
   2136            *buf++ = LO_UINT16( desc->AppDeviceId );
   2137          
   2138            *buf++ = (byte)(desc->AppDevVer << 4);
   \                     ??CrossCallReturnLabel_27:
   \   000027   8C82         MOV     DPL,R4
   \   000029   8D83         MOV     DPH,R5
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   E0           MOVX    A,@DPTR
   \   000031   C4           SWAP    A
   \   000032   54F0         ANL     A,#0xf0
   \   000034   12....       LCALL   ??Subroutine167_0 & 0xFFFF
   2139          
   2140            *buf++ = desc->AppNumInClusters;
   \                     ??CrossCallReturnLabel_363:
   \   000037   EC           MOV     A,R4
   \   000038   2406         ADD     A,#0x6
   \   00003A   F8           MOV     R0,A
   \   00003B   ED           MOV     A,R5
   \   00003C   3400         ADDC    A,#0x0
   \   00003E   F9           MOV     R1,A
   \   00003F   88..         MOV     ?V0 + 0,R0
   \   000041   89..         MOV     ?V0 + 1,R1
   \   000043   8882         MOV     DPL,R0
   \   000045   F583         MOV     DPH,A
   \   000047   12....       LCALL   ?Subroutine110 & 0xFFFF
   2141            ptr = desc->pAppInClusterList;
   \                     ??CrossCallReturnLabel_364:
   \   00004A   8C82         MOV     DPL,R4
   \   00004C   8D83         MOV     DPH,R5
   \   00004E   12....       LCALL   ?Subroutine85 & 0xFFFF
   2142            for ( cnt = 0; cnt < desc->AppNumInClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_148:
   \   000051   800B         SJMP    ??CrossCallReturnLabel_40
   2143            {
   2144              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_0:
   \   000053   8E82         MOV     DPL,R6
   \   000055   8F83         MOV     DPH,R7
   \   000057   A3           INC     DPTR
   \   000058   12....       LCALL   ?Subroutine73 & 0xFFFF
   2145              *buf++ = LO_UINT16( *ptr );
   \                     ??CrossCallReturnLabel_129:
   \   00005B   12....       LCALL   ?Subroutine28 & 0xFFFF
   2146            }
   \                     ??CrossCallReturnLabel_40:
   \   00005E   8A82         MOV     DPL,R2
   \   000060   8B83         MOV     DPH,R3
   \   000062   A3           INC     DPTR
   \   000063   A882         MOV     R0,DPL
   \   000065   A983         MOV     R1,DPH
   \   000067   85..82       MOV     DPL,?V0 + 0
   \   00006A   85..83       MOV     DPH,?V0 + 1
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   F5..         MOV     ?V0 + 3,A
   \   000070   E5..         MOV     A,?V0 + 2
   \   000072   C3           CLR     C
   \   000073   95..         SUBB    A,?V0 + 3
   \   000075   40DC         JC      ??ZDO_BuildSimpleDescBuf_0
   2147          
   2148            *buf++ = desc->AppNumOutClusters;
   \   000077   EC           MOV     A,R4
   \   000078   2409         ADD     A,#0x9
   \   00007A   FE           MOV     R6,A
   \   00007B   ED           MOV     A,R5
   \   00007C   3400         ADDC    A,#0x0
   \   00007E   FF           MOV     R7,A
   \   00007F   8E..         MOV     ?V0 + 0,R6
   \   000081   8F..         MOV     ?V0 + 1,R7
   \   000083   8E82         MOV     DPL,R6
   \   000085   F583         MOV     DPH,A
   \   000087   12....       LCALL   ?Subroutine73 & 0xFFFF
   2149            ptr = desc->pAppOutClusterList;
   \                     ??CrossCallReturnLabel_130:
   \   00008A   8C82         MOV     DPL,R4
   \   00008C   8D83         MOV     DPH,R5
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   12....       LCALL   ?Subroutine85 & 0xFFFF
   2150            for ( cnt = 0; cnt < desc->AppNumOutClusters; ptr++, cnt++ )
   \                     ??CrossCallReturnLabel_149:
   \   000094   800B         SJMP    ??CrossCallReturnLabel_41
   2151            {
   2152              *buf++ = HI_UINT16( *ptr );
   \                     ??ZDO_BuildSimpleDescBuf_1:
   \   000096   8E82         MOV     DPL,R6
   \   000098   8F83         MOV     DPH,R7
   \   00009A   A3           INC     DPTR
   \   00009B   12....       LCALL   ?Subroutine71 & 0xFFFF
   2153              *buf++ = LO_UINT16( *ptr );
   \                     ??CrossCallReturnLabel_126:
   \   00009E   12....       LCALL   ?Subroutine28 & 0xFFFF
   2154            }
   \                     ??CrossCallReturnLabel_41:
   \   0000A1   85..82       MOV     DPL,?V0 + 0
   \   0000A4   85..83       MOV     DPH,?V0 + 1
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   F8           MOV     R0,A
   \   0000A9   E5..         MOV     A,?V0 + 2
   \   0000AB   C3           CLR     C
   \   0000AC   98           SUBB    A,R0
   \   0000AD   40E7         JC      ??ZDO_BuildSimpleDescBuf_1
   2155          }
   \   0000AF   80..         SJMP    ??Subroutine168_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine85:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   12....       LCALL   ??Subroutine170_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_439:
   \   00000A   75..00       MOV     ?V0 + 2,#0x0
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine73:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   E8           MOV     A,R0
   \   000007   FA           MOV     R2,A
   \   000008   E9           MOV     A,R1
   \   000009   FB           MOV     R3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine71:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8A82         MOV     DPL,R2
   \   000003   8B83         MOV     DPH,R3
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   AA82         MOV     R2,DPL
   \   000009   AB83         MOV     R3,DPH
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine28:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_367:
   \   000007   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_474:
   \   00000A   05..         INC     ?V0 + 2
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine20:
   \   000000   A3           INC     DPTR
   \   000001   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_365:
   \   000004   8882         MOV     DPL,R0
   \   000006   8983         MOV     DPH,R1
   \   000008   12....       LCALL   ?Subroutine110 & 0xFFFF
   \                     ??CrossCallReturnLabel_366:
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine110:
   \   000000   E0           MOVX    A,@DPTR
   \   000001                REQUIRE ??Subroutine167_0
   \   000001                ; // Fall through to label ??Subroutine167_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine167_0:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   F0           MOVX    @DPTR,A
   \   000005   A3           INC     DPTR
   \   000006   0A           INC     R2
   \   000007   AB83         MOV     R3,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine140:
   \   000000   EE           MOV     A,R6
   \   000001   2402         ADD     A,#0x2
   \   000003   FE           MOV     R6,A
   \   000004   EF           MOV     A,R7
   \   000005   3400         ADDC    A,#0x0
   \   000007   FF           MOV     R7,A
   \   000008   22           RET
   2156          
   2157          #if ( ZG_BUILD_COORDINATOR_TYPE )
   2158          /*********************************************************************
   2159           * @fn      ZDO_MatchEndDeviceBind()
   2160           *
   2161           * @brief
   2162           *
   2163           *   Called to match end device binding requests
   2164           *
   2165           * @param  bindReq  - binding request information
   2166           * @param  SecurityUse - Security enable/disable
   2167           *
   2168           * @return  none
   2169           */
   2170          void ZDO_MatchEndDeviceBind( ZDEndDeviceBind_t *bindReq )
   2171          {
   2172            zAddrType_t dstAddr;
   2173            uint8 sendRsp = FALSE;
   2174            uint8 status;
   2175          
   2176            // Is this the first request?
   2177            if ( matchED == NULL )
   2178            {
   2179              // Create match info structure
   2180              matchED = (ZDMatchEndDeviceBind_t *)osal_mem_alloc( sizeof ( ZDMatchEndDeviceBind_t ) );
   2181              if ( matchED )
   2182              {
   2183                // Clear the structure
   2184                osal_memset( (uint8 *)matchED, 0, sizeof ( ZDMatchEndDeviceBind_t ) );
   2185          
   2186                // Copy the first request's information
   2187                if ( !ZDO_CopyMatchInfo( &(matchED->ed1), bindReq ) )
   2188                {
   2189                  status = ZDP_NO_ENTRY;
   2190                  sendRsp = TRUE;
   2191                }
   2192              }
   2193              else
   2194              {
   2195                status = ZDP_NO_ENTRY;
   2196                sendRsp = TRUE;
   2197              }
   2198          
   2199              if ( !sendRsp )
   2200              {
   2201                // Set into the correct state
   2202                matchED->state = ZDMATCH_WAIT_REQ;
   2203          
   2204                // Setup the timeout
   2205                APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   2206              }
   2207            }
   2208            else
   2209            {
   2210                matchED->state = ZDMATCH_SENDING_BINDS;
   2211          
   2212                // Copy the 2nd request's information
   2213                if ( !ZDO_CopyMatchInfo( &(matchED->ed2), bindReq ) )
   2214                {
   2215                  status = ZDP_NO_ENTRY;
   2216                  sendRsp = TRUE;
   2217                }
   2218          
   2219                // Make a source match for ed1
   2220                matchED->ed1numMatched = ZDO_CompareClusterLists(
   2221                            matchED->ed1.numOutClusters, matchED->ed1.outClusters,
   2222                            matchED->ed2.numInClusters, matchED->ed2.inClusters, ZDOBuildBuf );
   2223                if ( matchED->ed1numMatched )
   2224                {
   2225                  // Save the match list
   2226                  matchED->ed1Matched = osal_mem_alloc( (short)(matchED->ed1numMatched * sizeof ( uint16 )) );
   2227                  if ( matchED->ed1Matched )
   2228                  {
   2229                    osal_memcpy( matchED->ed1Matched, ZDOBuildBuf, (matchED->ed1numMatched * sizeof ( uint16 )) );
   2230                  }
   2231                  else
   2232                  {
   2233                    // Allocation error, stop
   2234                    status = ZDP_NO_ENTRY;
   2235                    sendRsp = TRUE;
   2236                  }
   2237                }
   2238          
   2239                // Make a source match for ed2
   2240                matchED->ed2numMatched = ZDO_CompareClusterLists(
   2241                            matchED->ed2.numOutClusters, matchED->ed2.outClusters,
   2242                            matchED->ed1.numInClusters, matchED->ed1.inClusters, ZDOBuildBuf );
   2243                if ( matchED->ed2numMatched )
   2244                {
   2245                  // Save the match list
   2246                  matchED->ed2Matched = osal_mem_alloc( (short)(matchED->ed2numMatched * sizeof ( uint16 )) );
   2247                  if ( matchED->ed2Matched )
   2248                  {
   2249                    osal_memcpy( matchED->ed2Matched, ZDOBuildBuf, (matchED->ed2numMatched * sizeof ( uint16 )) );
   2250                  }
   2251                  else
   2252                  {
   2253                    // Allocation error, stop
   2254                    status = ZDP_NO_ENTRY;
   2255                    sendRsp = TRUE;
   2256                  }
   2257                }
   2258          
   2259                if ( (sendRsp == FALSE) && (matchED->ed1numMatched || matchED->ed2numMatched) )
   2260                {
   2261                  // Do the first unbind/bind state
   2262                  ZDMatchSendState( ZDMATCH_REASON_START, ZDP_SUCCESS, 0 );
   2263                }
   2264                else
   2265                {
   2266                  status = ZDP_NO_MATCH;
   2267                  sendRsp = TRUE;
   2268                }
   2269            }
   2270          
   2271            if ( sendRsp )
   2272            {
   2273              // send response to this requester
   2274              dstAddr.addrMode = Addr16Bit;
   2275              dstAddr.addr.shortAddr = bindReq->srcAddr;
   2276              ZDP_EndDeviceBindRsp( bindReq->TransSeq, &dstAddr, status, bindReq->SecurityUse );
   2277          
   2278              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   2279              {
   2280                // send response to first requester
   2281                dstAddr.addrMode = Addr16Bit;
   2282                dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   2283                ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, status, matchED->ed1.SecurityUse );
   2284              }
   2285          
   2286              // Process ended - release memory used
   2287              ZDO_RemoveMatchMemory();
   2288            }
   2289          }
   2290          
   2291          /*********************************************************************
   2292           * @fn      ZDO_RemoveMatchMemory()
   2293           *
   2294           * @brief   Called to clear the memory used for the end device bind.
   2295           *
   2296           * @param  none
   2297           *
   2298           * @return  none
   2299           */
   2300          static void ZDO_RemoveMatchMemory( void )
   2301          {
   2302            if ( matchED != NULL )
   2303            {
   2304              if ( matchED->ed2Matched != NULL )
   2305              {
   2306                osal_mem_free( matchED->ed2Matched );
   2307              }
   2308              if ( matchED->ed1Matched != NULL )
   2309              {
   2310                osal_mem_free( matchED->ed1Matched );
   2311              }
   2312              if ( matchED->ed1.inClusters != NULL )
   2313              {
   2314                osal_mem_free( matchED->ed1.inClusters );
   2315              }
   2316              if ( matchED->ed1.outClusters != NULL )
   2317              {
   2318                osal_mem_free( matchED->ed1.outClusters );
   2319              }
   2320              if ( matchED->ed2.inClusters != NULL )
   2321              {
   2322                osal_mem_free( matchED->ed2.inClusters );
   2323              }
   2324              if ( matchED->ed2.outClusters != NULL )
   2325              {
   2326                osal_mem_free( matchED->ed2.outClusters );
   2327              }
   2328          
   2329              osal_mem_free( matchED );
   2330              matchED = (ZDMatchEndDeviceBind_t *)NULL;
   2331            }
   2332          }
   2333          
   2334          /*********************************************************************
   2335           * @fn      ZDO_CopyMatchInfo()
   2336           *
   2337           * @brief   Called to copy memory used for the end device bind.
   2338           *
   2339           * @param  srcReq - source information
   2340           * @param  dstReq - destination location
   2341           *
   2342           * @return  TRUE if copy was successful.
   2343           */
   2344          static uint8 ZDO_CopyMatchInfo( ZDEndDeviceBind_t *destReq, ZDEndDeviceBind_t *srcReq )
   2345          {
   2346            uint8 allOK = TRUE;
   2347          
   2348            // Copy bind information into the match info structure
   2349            osal_memcpy( (uint8 *)destReq, srcReq, sizeof ( ZDEndDeviceBind_t ) );
   2350          
   2351            // Initialize the destination cluster pointers
   2352            destReq->inClusters = NULL;
   2353            destReq->outClusters = NULL;
   2354          
   2355            // Copy input cluster IDs
   2356            if ( srcReq->numInClusters )
   2357            {
   2358              destReq->inClusters = osal_mem_alloc( (short)(srcReq->numInClusters * sizeof ( uint16 )) );
   2359              if ( destReq->inClusters )
   2360              {
   2361                // Copy the clusters
   2362                osal_memcpy( (uint8*)(destReq->inClusters), (uint8 *)(srcReq->inClusters),
   2363                                (srcReq->numInClusters * sizeof ( uint16 )) );
   2364              }
   2365              else
   2366              {
   2367                allOK = FALSE;
   2368              }
   2369            }
   2370          
   2371            // Copy output cluster IDs
   2372            if ( srcReq->numOutClusters )
   2373            {
   2374              destReq->outClusters = osal_mem_alloc( (short)(srcReq->numOutClusters * sizeof ( uint16 )) );
   2375              if ( destReq->outClusters )
   2376              {
   2377                // Copy the clusters
   2378                osal_memcpy( (uint8 *)(destReq->outClusters), (uint8 *)(srcReq->outClusters),
   2379                                (srcReq->numOutClusters * sizeof ( uint16 )) );
   2380              }
   2381              else
   2382              {
   2383                allOK = FALSE;
   2384              }
   2385            }
   2386          
   2387            if ( allOK == FALSE )
   2388            {
   2389              if ( destReq->inClusters != NULL )
   2390              {
   2391                osal_mem_free( destReq->inClusters );
   2392              }
   2393              if ( destReq->outClusters != NULL )
   2394              {
   2395                osal_mem_free( destReq->outClusters );
   2396              }
   2397            }
   2398          
   2399            return ( allOK );
   2400          }
   2401          
   2402          /*********************************************************************
   2403           * @fn      ZDMatchSendState()
   2404           *
   2405           * @brief   State machine for the End device match message algorithm.
   2406           *
   2407           * @param  reason - state of algoritm
   2408           * @param  status - initial message status
   2409           * @param  TransSeq - next transaction sequence number
   2410           *
   2411           * @return  FALSE if error and we are not currently matching, TRUE
   2412           *          if success.
   2413           */
   2414          uint8 ZDMatchSendState( uint8 reason, uint8 status, uint8 TransSeq )
   2415          {
   2416            uint8 *dstIEEEAddr = NULL;
   2417            uint8 dstEP = 0xFF;
   2418            zAddrType_t dstAddr;
   2419            zAddrType_t destinationAddr;
   2420            uint16 msgType;
   2421            uint16 clusterID = 0xFFFF;
   2422            ZDEndDeviceBind_t *ed = NULL;
   2423            uint8 rspStatus = ZDP_SUCCESS;
   2424          
   2425            if ( matchED == NULL )
   2426            {
   2427              return ( FALSE );
   2428            }
   2429          
   2430            // Check sequence number
   2431            if ( reason == ZDMATCH_REASON_BIND_RSP || reason == ZDMATCH_REASON_UNBIND_RSP )
   2432            {
   2433              if ( TransSeq != matchED->transSeq )
   2434              {
   2435                return( FALSE ); // ignore the message
   2436              }
   2437            }
   2438          
   2439            // turn off timer
   2440            APS_SetEndDeviceBindTimeout( 0, ZDO_EndDeviceBindMatchTimeoutCB );
   2441          
   2442            if ( reason == ZDMATCH_REASON_TIMEOUT )
   2443            {
   2444              rspStatus = ZDP_TIMEOUT;    // The process will stop
   2445            }
   2446          
   2447            if ( reason == ZDMATCH_REASON_START || reason == ZDMATCH_REASON_BIND_RSP )
   2448            {
   2449              matchED->sending = ZDMATCH_SENDING_UNBIND;
   2450          
   2451              if ( reason == ZDMATCH_REASON_BIND_RSP && status != ZDP_SUCCESS )
   2452              {
   2453                rspStatus = status;
   2454              }
   2455            }
   2456            else if ( reason == ZDMATCH_REASON_UNBIND_RSP )
   2457            {
   2458              if ( status == ZDP_SUCCESS )
   2459              {
   2460                matchED->sending = ZDMATCH_SENDING_UNBIND;
   2461              }
   2462              else
   2463              {
   2464                matchED->sending = ZDMATCH_SENDING_BIND;
   2465              }
   2466            }
   2467          
   2468            if ( reason != ZDMATCH_REASON_START && matchED->sending == ZDMATCH_SENDING_UNBIND )
   2469            {
   2470              // Move to the next cluster ID
   2471              if ( matchED->ed1numMatched )
   2472              {
   2473                matchED->ed1numMatched--;
   2474              }
   2475              else if ( matchED->ed2numMatched )
   2476              {
   2477                matchED->ed2numMatched--;
   2478              }
   2479            }
   2480          
   2481            // What message do we send now
   2482            if ( matchED->ed1numMatched )
   2483            {
   2484              ed = &(matchED->ed1);
   2485              clusterID = matchED->ed1Matched[matchED->ed1numMatched-1];
   2486              dstIEEEAddr = matchED->ed2.ieeeAddr;
   2487              dstEP = matchED->ed2.endpoint;
   2488            }
   2489            else if ( matchED->ed2numMatched )
   2490            {
   2491              ed = &(matchED->ed2);
   2492              clusterID = matchED->ed2Matched[matchED->ed2numMatched-1];
   2493              dstIEEEAddr = matchED->ed1.ieeeAddr;
   2494              dstEP = matchED->ed1.endpoint;
   2495            }
   2496          
   2497            dstAddr.addrMode = Addr16Bit;
   2498          
   2499            // Send the next message
   2500            if ( (rspStatus == ZDP_SUCCESS) && ed )
   2501            {
   2502              // Send unbind/bind message to source
   2503              if ( matchED->sending == ZDMATCH_SENDING_UNBIND )
   2504              {
   2505                msgType = Unbind_req;
   2506              }
   2507              else
   2508              {
   2509                msgType = Bind_req;
   2510              }
   2511          
   2512              dstAddr.addr.shortAddr = ed->srcAddr;
   2513          
   2514              // Save off the transaction sequence number
   2515              matchED->transSeq = ZDP_TransID;
   2516          
   2517              destinationAddr.addrMode = Addr64Bit;
   2518              osal_cpyExtAddr( destinationAddr.addr.extAddr, dstIEEEAddr );
   2519          
   2520              ZDP_BindUnbindReq( msgType, &dstAddr, ed->ieeeAddr, ed->endpoint, clusterID,
   2521                  &destinationAddr, dstEP, ed->SecurityUse );
   2522          
   2523              // Set timeout for response
   2524              APS_SetEndDeviceBindTimeout( AIB_MaxBindingTime, ZDO_EndDeviceBindMatchTimeoutCB );
   2525            }
   2526            else
   2527            {
   2528              // Send the response messages to requesting devices
   2529              // send response to first requester
   2530              dstAddr.addr.shortAddr = matchED->ed1.srcAddr;
   2531              ZDP_EndDeviceBindRsp( matchED->ed1.TransSeq, &dstAddr, rspStatus, matchED->ed1.SecurityUse );
   2532          
   2533              // send response to second requester
   2534              if ( matchED->state == ZDMATCH_SENDING_BINDS )
   2535              {
   2536                dstAddr.addr.shortAddr = matchED->ed2.srcAddr;
   2537                ZDP_EndDeviceBindRsp( matchED->ed2.TransSeq, &dstAddr, rspStatus, matchED->ed2.SecurityUse );
   2538              }
   2539          
   2540              // Process ended - release memory used
   2541              ZDO_RemoveMatchMemory();
   2542            }
   2543          
   2544            return ( TRUE );
   2545          }
   2546          
   2547          /*********************************************************************
   2548           * @fn      ZDO_EndDeviceBindMatchTimeoutCB()
   2549           *
   2550           * @brief   End device bind timeout.
   2551           *
   2552           * @param  none
   2553           *
   2554           * @return  none
   2555           */
   2556          static void ZDO_EndDeviceBindMatchTimeoutCB( void )
   2557          {
   2558            ZDMatchSendState( ZDMATCH_REASON_TIMEOUT, ZDP_TIMEOUT, 0 );
   2559          }
   2560          #endif // ZG_BUILD_COORDINATOR_TYPE
   2561          
   2562          /*********************************************************************
   2563           * ZDO MESSAGE PARSING API FUNCTIONS
   2564           */
   2565          
   2566          /*********************************************************************
   2567           * @fn          ZDO_ParseEndDeviceBindReq
   2568           *
   2569           * @brief       This function parses the End_Device_Bind_req message.
   2570           *
   2571           *     NOTE:  The clusters lists in bindReq are allocated in this
   2572           *            function and must be freed by that calling function.
   2573           *
   2574           * @param       inMsg  - incoming message (request)
   2575           * @param       bindReq - pointer to place to parse message to
   2576           *
   2577           * @return      none
   2578           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2579          void ZDO_ParseEndDeviceBindReq( zdoIncomingMsg_t *inMsg, ZDEndDeviceBind_t *bindReq )
   \                     ZDO_ParseEndDeviceBindReq:
   2580          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   \   000005   EC           MOV     A,R4
   \   000006   FE           MOV     R6,A
   \   000007   ED           MOV     A,R5
   \   000008   FF           MOV     R7,A
   2581            uint8 *msg;
   2582          
   2583            // Parse the message
   2584            bindReq->TransSeq = inMsg->TransSeq;
   \   000009   EA           MOV     A,R2
   \   00000A   240F         ADD     A,#0xf
   \   00000C   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_445:
   \   00000F   12....       LCALL   ?Subroutine37 & 0xFFFF
   2585            bindReq->srcAddr = inMsg->srcAddr.addr.shortAddr;
   \                     ??CrossCallReturnLabel_64:
   \   000012   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_321:
   \   000015   8E82         MOV     DPL,R6
   \   000017   8F83         MOV     DPH,R7
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   12....       LCALL   ??Subroutine148_0 & 0xFFFF
   2586            bindReq->SecurityUse = inMsg->SecurityUse;
   \                     ??CrossCallReturnLabel_265:
   \   00001E   EA           MOV     A,R2
   \   00001F   240E         ADD     A,#0xe
   \   000021   12....       LCALL   ?Subroutine82 & 0xFFFF
   \                     ??CrossCallReturnLabel_446:
   \   000024   12....       LCALL   ?Subroutine12 & 0xFFFF
   2587            msg = inMsg->asdu;
   2588          
   2589            bindReq->localCoordinator = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_3:
   \   000027   8E82         MOV     DPL,R6
   \   000029   8F83         MOV     DPH,R7
   \   00002B   12....       LCALL   ?Subroutine9 & 0xFFFF
   2590            msg += 2;
   2591          
   2592            osal_cpyExtAddr( bindReq->ieeeAddr, msg );
   \                     ??CrossCallReturnLabel_447:
   \   00002E                ; Setup parameters for call to function sAddrExtCpy
   \   00002E   AC..         MOV     R4,?V0 + 2
   \   000030   FD           MOV     R5,A
   \   000031   EE           MOV     A,R6
   \   000032   2406         ADD     A,#0x6
   \   000034   FA           MOV     R2,A
   \   000035   EF           MOV     A,R7
   \   000036   3400         ADDC    A,#0x0
   \   000038   FB           MOV     R3,A
   \   000039   12....       LCALL   ??sAddrExtCpy?relay
   2593            msg += Z_EXTADDR_LEN;
   \   00003C   12....       LCALL   ?Subroutine91 & 0xFFFF
   2594          
   2595            bindReq->endpoint = *msg++;
   \                     ??CrossCallReturnLabel_368:
   \   00003F   C0E0         PUSH    A
   \   000041   12....       LCALL   ?Subroutine128 & 0xFFFF
   \                     ??CrossCallReturnLabel_383:
   \   000044   EF           MOV     A,R7
   \   000045   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_399:
   \   000048   D0E0         POP     A
   \   00004A   12....       LCALL   ?Subroutine18 & 0xFFFF
   2596            bindReq->profileID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_21:
   \   00004D   F8           MOV     R0,A
   \   00004E   EE           MOV     A,R6
   \   00004F   12....       LCALL   ?Subroutine104 & 0xFFFF
   \                     ??CrossCallReturnLabel_175:
   \   000052   EF           MOV     A,R7
   \   000053   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_400:
   \   000056   E8           MOV     A,R0
   \   000057   12....       LCALL   ??Subroutine182_0 & 0xFFFF
   2597            msg += 2;
   2598          
   2599            bindReq->inClusters = NULL;
   \                     ??CrossCallReturnLabel_449:
   \   00005A   EE           MOV     A,R6
   \   00005B   2412         ADD     A,#0x12
   \   00005D   F5..         MOV     ?V0 + 4,A
   \   00005F   EF           MOV     A,R7
   \   000060   3400         ADDC    A,#0x0
   \   000062   F5..         MOV     ?V0 + 5,A
   \   000064   85..82       MOV     DPL,?V0 + 4
   \   000067   F583         MOV     DPH,A
   \   000069   E4           CLR     A
   \   00006A   F0           MOVX    @DPTR,A
   \   00006B   A3           INC     DPTR
   \   00006C   F0           MOVX    @DPTR,A
   2600            bindReq->outClusters = NULL;
   \   00006D   EE           MOV     A,R6
   \   00006E   2415         ADD     A,#0x15
   \   000070   12....       LCALL   ?Subroutine100 & 0xFFFF
   \                     ??CrossCallReturnLabel_165:
   \   000073   E4           CLR     A
   \   000074   F0           MOVX    @DPTR,A
   \   000075   A3           INC     DPTR
   \   000076   12....       LCALL   ?Subroutine48 & 0xFFFF
   2601          
   2602            if ((bindReq->numInClusters = *msg++) &&
   2603                (bindReq->inClusters = (uint16*)osal_mem_alloc( (bindReq->numInClusters * sizeof( uint16 )))))
   \                     ??CrossCallReturnLabel_92:
   \   000079   F8           MOV     R0,A
   \   00007A   A3           INC     DPTR
   \   00007B   8582..       MOV     ?V0 + 2,DPL
   \   00007E   8583..       MOV     ?V0 + 3,DPH
   \   000081   EE           MOV     A,R6
   \   000082   2411         ADD     A,#0x11
   \   000084   12....       LCALL   ?Subroutine101 & 0xFFFF
   \                     ??CrossCallReturnLabel_167:
   \   000087   E8           MOV     A,R0
   \   000088   F0           MOVX    @DPTR,A
   \   000089   6034         JZ      ??ZDO_ParseEndDeviceBindReq_0
   \   00008B                ; Setup parameters for call to function osal_mem_alloc
   \   00008B   C3           CLR     C
   \   00008C   33           RLC     A
   \   00008D   FA           MOV     R2,A
   \   00008E   E4           CLR     A
   \   00008F   33           RLC     A
   \   000090   FB           MOV     R3,A
   \   000091   12....       LCALL   ??osal_mem_alloc?relay
   \   000094   85..82       MOV     DPL,?V0 + 4
   \   000097   85..83       MOV     DPH,?V0 + 5
   \   00009A   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_52:
   \   00009D   85..82       MOV     DPL,?V0 + 4
   \   0000A0   85..83       MOV     DPH,?V0 + 5
   \   0000A3   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_215:
   \   0000A6   EC           MOV     A,R4
   \   0000A7   4D           ORL     A,R5
   \   0000A8   6015         JZ      ??ZDO_ParseEndDeviceBindReq_0
   2604            {
   2605              msg = ZDO_ConvertOTAClusters( bindReq->numInClusters, msg, bindReq->inClusters );
   \   0000AA                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000AA   AA..         MOV     R2,?V0 + 2
   \   0000AC   AB..         MOV     R3,?V0 + 3
   \   0000AE   85..82       MOV     DPL,?V0 + 0
   \   0000B1   85..83       MOV     DPH,?V0 + 1
   \   0000B4   E0           MOVX    A,@DPTR
   \   0000B5   F9           MOV     R1,A
   \   0000B6   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   0000B9   8A..         MOV     ?V0 + 2,R2
   \   0000BB   8B..         MOV     ?V0 + 3,R3
   \   0000BD   8008         SJMP    ??ZDO_ParseEndDeviceBindReq_1
   2606            }
   2607            else
   2608            {
   2609              bindReq->numInClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_0:
   \   0000BF   85..82       MOV     DPL,?V0 + 0
   \   0000C2   85..83       MOV     DPH,?V0 + 1
   \   0000C5   E4           CLR     A
   \   0000C6   F0           MOVX    @DPTR,A
   2610            }
   2611          
   2612            if ((bindReq->numOutClusters = *msg++) &&
   2613                (bindReq->outClusters = (uint16*)osal_mem_alloc((bindReq->numOutClusters * sizeof(uint16)))))
   \                     ??ZDO_ParseEndDeviceBindReq_1:
   \   0000C7   12....       LCALL   ?Subroutine60 & 0xFFFF
   \                     ??CrossCallReturnLabel_114:
   \   0000CA   EE           MOV     A,R6
   \   0000CB   2414         ADD     A,#0x14
   \   0000CD   12....       LCALL   ??Subroutine171_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_374:
   \   0000D0   E8           MOV     A,R0
   \   0000D1   F0           MOVX    @DPTR,A
   \   0000D2   602E         JZ      ??ZDO_ParseEndDeviceBindReq_2
   \   0000D4                ; Setup parameters for call to function osal_mem_alloc
   \   0000D4   C3           CLR     C
   \   0000D5   33           RLC     A
   \   0000D6   FA           MOV     R2,A
   \   0000D7   E4           CLR     A
   \   0000D8   33           RLC     A
   \   0000D9   FB           MOV     R3,A
   \   0000DA   12....       LCALL   ??osal_mem_alloc?relay
   \   0000DD   85..82       MOV     DPL,?V0 + 8
   \   0000E0   85..83       MOV     DPH,?V0 + 9
   \   0000E3   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_53:
   \   0000E6   85..82       MOV     DPL,?V0 + 8
   \   0000E9   85..83       MOV     DPH,?V0 + 9
   \   0000EC   12....       LCALL   ?Subroutine126 & 0xFFFF
   \                     ??CrossCallReturnLabel_216:
   \   0000EF   EC           MOV     A,R4
   \   0000F0   4D           ORL     A,R5
   \   0000F1   600F         JZ      ??ZDO_ParseEndDeviceBindReq_2
   2614            {
   2615              msg = ZDO_ConvertOTAClusters( bindReq->numOutClusters, msg, bindReq->outClusters );
   \   0000F3                ; Setup parameters for call to function ZDO_ConvertOTAClusters
   \   0000F3   AA..         MOV     R2,?V0 + 2
   \   0000F5   AB..         MOV     R3,?V0 + 3
   \   0000F7   8E82         MOV     DPL,R6
   \   0000F9   8F83         MOV     DPH,R7
   \   0000FB   E0           MOVX    A,@DPTR
   \   0000FC   F9           MOV     R1,A
   \   0000FD   12....       LCALL   ??ZDO_ConvertOTAClusters?relay
   \   000100   8006         SJMP    ??ZDO_ParseEndDeviceBindReq_3
   2616            }
   2617            else
   2618            {
   2619              bindReq->numOutClusters = 0;
   \                     ??ZDO_ParseEndDeviceBindReq_2:
   \   000102   8E82         MOV     DPL,R6
   \   000104   8F83         MOV     DPH,R7
   \   000106   E4           CLR     A
   \   000107   F0           MOVX    @DPTR,A
   2620            }
   2621          }
   \                     ??ZDO_ParseEndDeviceBindReq_3:
   \   000108                REQUIRE ?Subroutine6
   \   000108                ; // Fall through to label ?Subroutine6

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   7F0A         MOV     R7,#0xa
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine91:
   \   000000   E5..         MOV     A,?V0 + 2
   \   000002   2408         ADD     A,#0x8
   \   000004                REQUIRE ??Subroutine169_0
   \   000004                ; // Fall through to label ??Subroutine169_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine169_0:
   \   000000   F5..         MOV     ?V0 + 2,A
   \   000002   E5..         MOV     A,?V0 + 3
   \   000004   3400         ADDC    A,#0x0
   \   000006   F5..         MOV     ?V0 + 3,A
   \   000008   85..82       MOV     DPL,?V0 + 2
   \   00000B   F583         MOV     DPH,A
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine171_0:
   \   000000   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_376:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine48:
   \   000000   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_221:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine37:
   \   000000   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_195:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine82:
   \   000000   F582         MOV     DPL,A
   \   000002   EB           MOV     A,R3
   \   000003   3400         ADDC    A,#0x0
   \   000005                REQUIRE ??Subroutine180_0
   \   000005                ; // Fall through to label ??Subroutine180_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine180_0:
   \   000000   F583         MOV     DPH,A
   \   000002                REQUIRE ??Subroutine181_0
   \   000002                ; // Fall through to label ??Subroutine181_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine181_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine109:
   \   000000   12....       LCALL   ?Subroutine135 & 0xFFFF
   \                     ??CrossCallReturnLabel_223:
   \   000003   A3           INC     DPTR
   \   000004   8582..       MOV     ?V0 + 2,DPL
   \   000007   8583..       MOV     ?V0 + 3,DPH
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine135:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?V0 + 2
   \   000004   85..83       MOV     DPH,?V0 + 3
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine18:
   \   000000   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_184:
   \   000003   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_205:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002   A3           INC     DPTR
   \   000003   A3           INC     DPTR
   \   000004                REQUIRE ??Subroutine182_0
   \   000004                ; // Fall through to label ??Subroutine182_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine182_0:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   E5..         MOV     A,?V0 + 2
   \   000006   2402         ADD     A,#0x2
   \   000008   F5..         MOV     ?V0 + 2,A
   \   00000A   E5..         MOV     A,?V0 + 3
   \   00000C   3400         ADDC    A,#0x0
   \   00000E   F5..         MOV     ?V0 + 3,A
   \   000010   22           RET
   2622          
   2623          /*********************************************************************
   2624           * @fn          ZDO_ParseBindUnbindReq
   2625           *
   2626           * @brief       This function parses the Bind_req or Unbind_req message.
   2627           *
   2628           * @param       inMsg  - incoming message (request)
   2629           * @param       pReq - place to put parsed information
   2630           *
   2631           * @return      none
   2632           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2633          void ZDO_ParseBindUnbindReq( zdoIncomingMsg_t *inMsg, ZDO_BindUnbindReq_t *pReq )
   \                     ZDO_ParseBindUnbindReq:
   2634          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   2635            uint8 *msg;
   2636          
   2637            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine88 & 0xFFFF
   2638            osal_cpyExtAddr( pReq->srcAddress, msg );
   \                     ??CrossCallReturnLabel_156:
   \   00000C   FC           MOV     R4,A
   \   00000D   EF           MOV     A,R7
   \   00000E   FD           MOV     R5,A
   \   00000F   AA..         MOV     R2,?V0 + 0
   \   000011   AB..         MOV     R3,?V0 + 1
   \   000013   12....       LCALL   ??sAddrExtCpy?relay
   2639            msg += Z_EXTADDR_LEN;
   \   000016   12....       LCALL   ?Subroutine95 & 0xFFFF
   2640            pReq->srcEndpoint = *msg++;
   \                     ??CrossCallReturnLabel_371:
   \   000019   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_115:
   \   00001C   A3           INC     DPTR
   \   00001D   A3           INC     DPTR
   \   00001E   12....       LCALL   ?Subroutine26 & 0xFFFF
   2641            pReq->clusterID = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_35:
   \   000021   85..82       MOV     DPL,?V0 + 0
   \   000024   85..83       MOV     DPH,?V0 + 1
   \   000027   A3           INC     DPTR
   \   000028   A3           INC     DPTR
   \   000029   A3           INC     DPTR
   \   00002A   A3           INC     DPTR
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   12....       LCALL   ?Subroutine10 & 0xFFFF
   2642            msg += 2;
   2643            pReq->dstAddress.addrMode = *msg++;
   \                     ??CrossCallReturnLabel_465:
   \   000030   F8           MOV     R0,A
   \   000031   E5..         MOV     A,?V0 + 0
   \   000033   12....       LCALL   ??Subroutine146_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_244:
   \   000036   12....       LCALL   ??Subroutine174_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_406:
   \   000039   E8           MOV     A,R0
   \   00003A   12....       LCALL   ?Subroutine38 & 0xFFFF
   2644            if ( pReq->dstAddress.addrMode == Addr64Bit )
   \                     ??CrossCallReturnLabel_67:
   \   00003D   240B         ADD     A,#0xb
   \   00003F   FA           MOV     R2,A
   \   000040   E5..         MOV     A,?V0 + 1
   \   000042   3400         ADDC    A,#0x0
   \   000044   FB           MOV     R3,A
   \   000045   7403         MOV     A,#0x3
   \   000047   68           XRL     A,R0
   \   000048   7021         JNZ     ??ZDO_ParseBindUnbindReq_0
   2645            {
   2646              osal_cpyExtAddr( pReq->dstAddress.addr.extAddr, msg );
   \   00004A                ; Setup parameters for call to function sAddrExtCpy
   \   00004A   EE           MOV     A,R6
   \   00004B   FC           MOV     R4,A
   \   00004C   EF           MOV     A,R7
   \   00004D   FD           MOV     R5,A
   \   00004E   12....       LCALL   ??sAddrExtCpy?relay
   2647              msg += Z_EXTADDR_LEN;
   2648              pReq->dstEndpoint = *msg;
   \   000051   8E82         MOV     DPL,R6
   \   000053   8F83         MOV     DPH,R7
   \   000055   A3           INC     DPTR
   \   000056   A3           INC     DPTR
   \   000057   A3           INC     DPTR
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   A3           INC     DPTR
   \   00005B   A3           INC     DPTR
   \   00005C   A3           INC     DPTR
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   C0E0         PUSH    A
   \   000060   E5..         MOV     A,?V0 + 0
   \   000062   2414         ADD     A,#0x14
   \   000064   12....       LCALL   ??Subroutine173_0 & 0xFFFF
   2649            }
   \                     ??CrossCallReturnLabel_407:
   \   000067   D0E0         POP     A
   \   000069   8006         SJMP    ??ZDO_ParseBindUnbindReq_1
   2650            else
   2651            {
   2652              // copy group address
   2653              pReq->dstAddress.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseBindUnbindReq_0:
   \   00006B   12....       LCALL   ?Subroutine72 & 0xFFFF
   2654            }
   \                     ??CrossCallReturnLabel_127:
   \   00006E   F0           MOVX    @DPTR,A
   \   00006F   A3           INC     DPTR
   \   000070   E9           MOV     A,R1
   \                     ??ZDO_ParseBindUnbindReq_1:
   \   000071   F0           MOVX    @DPTR,A
   2655          }
   \   000072   02....       LJMP    ??Subroutine144_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine95:
   \   000000   EE           MOV     A,R6
   \   000001   2408         ADD     A,#0x8
   \   000003                REQUIRE ??Subroutine171_0
   \   000003                ; // Fall through to label ??Subroutine171_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine173_0:
   \   000000   F582         MOV     DPL,A
   \   000002                REQUIRE ??Subroutine174_0
   \   000002                ; // Fall through to label ??Subroutine174_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine174_0:
   \   000000   E5..         MOV     A,?V0 + 1
   \   000002                REQUIRE ??Subroutine175_0
   \   000002                ; // Fall through to label ??Subroutine175_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine38:
   \   000000   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_182:
   \   000003   E5..         MOV     A,?V0 + 0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine112:
   \   000000   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_428:
   \   000003   AE82         MOV     R6,DPL
   \   000005   AF83         MOV     R7,DPH
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine72:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FC           MOV     R4,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EC           MOV     A,R4
   \   000006   8A82         MOV     DPL,R2
   \   000008   8B83         MOV     DPH,R3
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine26:
   \   000000   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_189:
   \   000003   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_206:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine10:
   \   000000   A3           INC     DPTR
   \   000001   A3           INC     DPTR
   \   000002                REQUIRE ??Subroutine185_0
   \   000002                ; // Fall through to label ??Subroutine185_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine185_0:
   \   000000   A3           INC     DPTR
   \   000001   F0           MOVX    @DPTR,A
   \   000002   A3           INC     DPTR
   \   000003   E9           MOV     A,R1
   \   000004                REQUIRE ??Subroutine186_0
   \   000004                ; // Fall through to label ??Subroutine186_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine186_0:
   \   000000   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_471:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine106:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   12....       LCALL   ?Subroutine140 & 0xFFFF
   \                     ??CrossCallReturnLabel_475:
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine62:
   \   000000   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_200:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine117:
   \   000000   12....       LCALL   ?Subroutine136 & 0xFFFF
   \                     ??CrossCallReturnLabel_225:
   \   000003   A3           INC     DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine136:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   85..82       MOV     DPL,?V0 + 0
   \   000004   85..83       MOV     DPH,?V0 + 1
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine108:
   \   000000   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_427:
   \   000003   0E           INC     R6
   \   000004   AF83         MOV     R7,DPH
   \   000006   22           RET
   2656          
   2657          /*********************************************************************
   2658           * @fn      ZDO_ParseAddrRsp
   2659           *
   2660           * @brief   Turns the inMsg (incoming message) into the out parsed
   2661           *          structure.
   2662           *
   2663           * @param   inMsg - incoming message
   2664           *
   2665           * @return  pointer to parsed structures.  This structure was
   2666           *          allocated using osal_mem_alloc, so it must be freed
   2667           *          by the calling function [osal_mem_free()].
   2668           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2669          ZDO_NwkIEEEAddrResp_t *ZDO_ParseAddrRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseAddrRsp:
   2670          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   2671            ZDO_NwkIEEEAddrResp_t *rsp;
   2672            uint8 *msg;
   2673            byte cnt = 0;
   \   000005   75..00       MOV     ?V0 + 2,#0x0
   2674          
   2675            // Calculate the number of items in the list
   2676            if ( inMsg->asduLen > (1 + Z_EXTADDR_LEN + 2) )
   \   000008   EA           MOV     A,R2
   \   000009   2413         ADD     A,#0x13
   \   00000B   F8           MOV     R0,A
   \   00000C   EB           MOV     A,R3
   \   00000D   3400         ADDC    A,#0x0
   \   00000F   F9           MOV     R1,A
   \   000010   E8           MOV     A,R0
   \   000011   FE           MOV     R6,A
   \   000012   E9           MOV     A,R1
   \   000013   FF           MOV     R7,A
   \   000014   EA           MOV     A,R2
   \   000015   2410         ADD     A,#0x10
   \   000017   F582         MOV     DPL,A
   \   000019   EB           MOV     A,R3
   \   00001A   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_277:
   \   00001D   C3           CLR     C
   \   00001E   940C         SUBB    A,#0xc
   \   000020   4012         JC      ??ZDO_ParseAddrRsp_0
   2677            {
   2678              cnt = inMsg->asdu[1 + Z_EXTADDR_LEN + 2];
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   12....       LCALL   ??Subroutine156_0 & 0xFFFF
   2679            }
   \                     ??CrossCallReturnLabel_327:
   \   000029   C8           XCH     A,R0
   \   00002A   240B         ADD     A,#0xb
   \   00002C   F582         MOV     DPL,A
   \   00002E   E8           MOV     A,R0
   \   00002F   12....       LCALL   ??Subroutine152_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_278:
   \   000032   F5..         MOV     ?V0 + 2,A
   2680            else
   2681            {
   2682              cnt = 0;
   2683            }
   2684          
   2685            // Make buffer
   2686            rsp = (ZDO_NwkIEEEAddrResp_t *)osal_mem_alloc( sizeof(ZDO_NwkIEEEAddrResp_t) + (cnt * sizeof ( uint16 )) );
   \                     ??ZDO_ParseAddrRsp_0:
   \   000034                ; Setup parameters for call to function osal_mem_alloc
   \   000034   E5..         MOV     A,?V0 + 2
   \   000036   C3           CLR     C
   \   000037   33           RLC     A
   \   000038   F8           MOV     R0,A
   \   000039   E4           CLR     A
   \   00003A   33           RLC     A
   \   00003B   F9           MOV     R1,A
   \   00003C   E8           MOV     A,R0
   \   00003D   240D         ADD     A,#0xd
   \   00003F   FA           MOV     R2,A
   \   000040   E9           MOV     A,R1
   \   000041   3400         ADDC    A,#0x0
   \   000043   FB           MOV     R3,A
   \   000044   12....       LCALL   ??osal_mem_alloc?relay
   \   000047   8A..         MOV     ?V0 + 0,R2
   \   000049   8B..         MOV     ?V0 + 1,R3
   2687          
   2688            if ( rsp )
   \   00004B   EA           MOV     A,R2
   \   00004C   45..         ORL     A,?V0 + 1
   \   00004E   607E         JZ      ??ZDO_ParseAddrRsp_1
   2689            {
   2690              msg = inMsg->asdu;
   \   000050   8E82         MOV     DPL,R6
   \   000052   8F83         MOV     DPH,R7
   \   000054   12....       LCALL   ??Subroutine179_0 & 0xFFFF
   2691          
   2692              rsp->status = *msg++;
   \                     ??CrossCallReturnLabel_438:
   \   000057   8A82         MOV     DPL,R2
   \   000059   8B83         MOV     DPH,R3
   \   00005B   12....       LCALL   ?Subroutine27 & 0xFFFF
   2693              if ( rsp->status == ZDO_SUCCESS )
   \                     ??CrossCallReturnLabel_37:
   \   00005E   706E         JNZ     ??ZDO_ParseAddrRsp_1
   2694              {
   2695                osal_cpyExtAddr( rsp->extAddr, msg );
   \   000060                ; Setup parameters for call to function sAddrExtCpy
   \   000060   EE           MOV     A,R6
   \   000061   FC           MOV     R4,A
   \   000062   EF           MOV     A,R7
   \   000063   FD           MOV     R5,A
   \   000064   EA           MOV     A,R2
   \   000065   2403         ADD     A,#0x3
   \   000067   FA           MOV     R2,A
   \   000068   EB           MOV     A,R3
   \   000069   3400         ADDC    A,#0x0
   \   00006B   FB           MOV     R3,A
   \   00006C   12....       LCALL   ??sAddrExtCpy?relay
   2696                msg += Z_EXTADDR_LEN;
   \   00006F   12....       LCALL   ?Subroutine95 & 0xFFFF
   2697                rsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_372:
   \   000072   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_117:
   \   000075   A3           INC     DPTR
   \   000076   12....       LCALL   ?Subroutine32 & 0xFFFF
   2698          
   2699                msg += 2;
   2700                rsp->numAssocDevs = 0;
   \                     ??CrossCallReturnLabel_56:
   \   000079   E5..         MOV     A,?V0 + 0
   \   00007B   240B         ADD     A,#0xb
   \   00007D   F8           MOV     R0,A
   \   00007E   E5..         MOV     A,?V0 + 1
   \   000080   3400         ADDC    A,#0x0
   \   000082   F9           MOV     R1,A
   \   000083   E8           MOV     A,R0
   \   000084   FA           MOV     R2,A
   \   000085   E9           MOV     A,R1
   \   000086   FB           MOV     R3,A
   \   000087   8A82         MOV     DPL,R2
   \   000089   8B83         MOV     DPH,R3
   \   00008B   E4           CLR     A
   \   00008C   F0           MOVX    @DPTR,A
   2701          
   2702                // StartIndex field is only present if NumAssocDev field is non-zero.
   2703                if ( cnt > 0 )
   \   00008D   E5..         MOV     A,?V0 + 2
   \   00008F   603D         JZ      ??ZDO_ParseAddrRsp_1
   2704                {
   2705                  uint16 *pList = &(rsp->devList[0]);
   \   000091   E5..         MOV     A,?V0 + 0
   \   000093   240D         ADD     A,#0xd
   \   000095   F8           MOV     R0,A
   \   000096   E5..         MOV     A,?V0 + 1
   \   000098   3400         ADDC    A,#0x0
   \   00009A   F9           MOV     R1,A
   2706                  byte n = cnt;
   2707          
   2708                  rsp->numAssocDevs = *msg++;
   \   00009B   8E82         MOV     DPL,R6
   \   00009D   8F83         MOV     DPH,R7
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   8A82         MOV     DPL,R2
   \   0000A2   8B83         MOV     DPH,R3
   \   0000A4   12....       LCALL   ?Subroutine23 & 0xFFFF
   2709                  rsp->startIndex = *msg++;
   \                     ??CrossCallReturnLabel_30:
   \   0000A7   C0E0         PUSH    A
   \   0000A9   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_413:
   \   0000AC   D0E0         POP     A
   \   0000AE   12....       LCALL   ?Subroutine42 & 0xFFFF
   \                     ??CrossCallReturnLabel_77:
   \   0000B1   85....       MOV     ?V0 + 3,?V0 + 2
   2710          
   2711                  while ( n != 0 )
   2712                  {
   2713                    *pList++ = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseAddrRsp_2:
   \   0000B4   8E82         MOV     DPL,R6
   \   0000B6   8F83         MOV     DPH,R7
   \   0000B8   E0           MOVX    A,@DPTR
   \   0000B9   FC           MOV     R4,A
   \   0000BA   A3           INC     DPTR
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   FB           MOV     R3,A
   \   0000BD   EC           MOV     A,R4
   \   0000BE   8882         MOV     DPL,R0
   \   0000C0   8983         MOV     DPH,R1
   \   0000C2   12....       LCALL   ?Subroutine30 & 0xFFFF
   2714                    msg += sizeof( uint16 );
   \                     ??CrossCallReturnLabel_45:
   \   0000C5   12....       LCALL   ?Subroutine140 & 0xFFFF
   2715                    n--;
   2716                  }
   \                     ??CrossCallReturnLabel_473:
   \   0000C8   15..         DEC     ?V0 + 3
   \   0000CA   E5..         MOV     A,?V0 + 3
   \   0000CC   70E6         JNZ     ??ZDO_ParseAddrRsp_2
   2717                }
   2718              }
   2719            }
   2720          
   2721            return ( rsp );
   \                     ??ZDO_ParseAddrRsp_1:
   \   0000CE   AA..         MOV     R2,?V0 + 0
   \   0000D0   AB..         MOV     R3,?V0 + 1
   \   0000D2   02....       LJMP    ??Subroutine168_0 & 0xFFFF
   2722          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine98:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   240C         ADD     A,#0xc
   \   000004                REQUIRE ??Subroutine173_0
   \   000004                ; // Fall through to label ??Subroutine173_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine30:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EB           MOV     A,R3
   \   000003   F0           MOVX    @DPTR,A
   \   000004   E8           MOV     A,R0
   \   000005   2402         ADD     A,#0x2
   \   000007   F8           MOV     R0,A
   \   000008   E9           MOV     A,R1
   \   000009   3400         ADDC    A,#0x0
   \   00000B   F9           MOV     R1,A
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine64:
   \   000000   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_202:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine118:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   FA           MOV     R2,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   EA           MOV     A,R2
   \   000006   85..82       MOV     DPL,?V0 + 0
   \   000009   85..83       MOV     DPH,?V0 + 1
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine27:
   \   000000   12....       LCALL   ?Subroutine112 & 0xFFFF
   \                     ??CrossCallReturnLabel_190:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine23:
   \   000000   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_181:
   \   000003   E0           MOVX    A,@DPTR
   \   000004   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine179_0:
   \   000000   12....       LCALL   ??Subroutine170_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_442:
   \   000003   8E82         MOV     DPL,R6
   \   000005   8F83         MOV     DPH,R7
   \   000007   E0           MOVX    A,@DPTR
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine32:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   E9           MOV     A,R1
   \   000003   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_472:
   \   000006   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine42:
   \   000000   12....       LCALL   ?Subroutine108 & 0xFFFF
   \                     ??CrossCallReturnLabel_183:
   \   000003   22           RET
   2723          
   2724          /*********************************************************************
   2725           * @fn          ZDO_ParseNodeDescRsp
   2726           *
   2727           * @brief       This function parses the Node_Desc_rsp message.
   2728           *
   2729           * @param       inMsg - incoming message
   2730           * @param       pNDRsp - place to parse the message into
   2731           *
   2732           * @return      none
   2733           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2734          void ZDO_ParseNodeDescRsp( zdoIncomingMsg_t *inMsg, ZDO_NodeDescRsp_t *pNDRsp )
   \                     ZDO_ParseNodeDescRsp:
   2735          {
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   2736            uint8 *msg;
   2737          
   2738            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine11 & 0xFFFF
   2739          
   2740            pNDRsp->status = *msg++;
   2741            pNDRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2742          
   2743            if ( pNDRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_0:
   \   000008   6003         JZ      $+5
   \   00000A   02....       LJMP    ??ZDO_ParseNodeDescRsp_0 & 0xFFFF
   2744            {
   2745              msg += 2;
   \   00000D   E8           MOV     A,R0
   \   00000E   2402         ADD     A,#0x2
   \   000010   F8           MOV     R0,A
   \   000011   E9           MOV     A,R1
   \   000012   3400         ADDC    A,#0x0
   \   000014   F9           MOV     R1,A
   2746              pNDRsp->nodeDesc.LogicalType = *msg & 0x07;
   \   000015   EC           MOV     A,R4
   \   000016   2403         ADD     A,#0x3
   \   000018   FA           MOV     R2,A
   \   000019   ED           MOV     A,R5
   \   00001A   3400         ADDC    A,#0x0
   \   00001C   FB           MOV     R3,A
   \   00001D   8882         MOV     DPL,R0
   \   00001F   8983         MOV     DPH,R1
   \   000021   E0           MOVX    A,@DPTR
   \   000022   5407         ANL     A,#0x7
   \   000024   FE           MOV     R6,A
   \   000025   8A82         MOV     DPL,R2
   \   000027   8B83         MOV     DPH,R3
   \   000029   E0           MOVX    A,@DPTR
   \   00002A   54F8         ANL     A,#0xf8
   \   00002C   4E           ORL     A,R6
   \   00002D   12....       LCALL   ?Subroutine14 & 0xFFFF
   2747          
   2748              pNDRsp->nodeDesc.ComplexDescAvail = ( *msg & 0x08 ) >> 3;
   \                     ??CrossCallReturnLabel_9:
   \   000030   A2E3         MOV     C,0xE0 /* A   */.3
   \   000032   8A82         MOV     DPL,R2
   \   000034   8B83         MOV     DPH,R3
   \   000036   A2E3         MOV     C,0xE0 /* A   */.3
   \   000038   E0           MOVX    A,@DPTR
   \   000039   92E3         MOV     0xE0 /* A   */.3,C
   \   00003B   12....       LCALL   ?Subroutine14 & 0xFFFF
   2749              pNDRsp->nodeDesc.UserDescAvail = ( *msg & 0x10 ) >> 4;
   \                     ??CrossCallReturnLabel_10:
   \   00003E   A2E4         MOV     C,0xE0 /* A   */.4
   \   000040   8A82         MOV     DPL,R2
   \   000042   8B83         MOV     DPH,R3
   \   000044   A2E4         MOV     C,0xE0 /* A   */.4
   \   000046   E0           MOVX    A,@DPTR
   \   000047   92E4         MOV     0xE0 /* A   */.4,C
   \   000049   12....       LCALL   ?Subroutine44 & 0xFFFF
   2750          
   2751              msg++;  // Reserved bits.
   \                     ??CrossCallReturnLabel_84:
   \   00004C   08           INC     R0
   \   00004D   A983         MOV     R1,DPH
   2752              pNDRsp->nodeDesc.FrequencyBand = (*msg >> 3) & 0x1f;
   \   00004F   EC           MOV     A,R4
   \   000050   2404         ADD     A,#0x4
   \   000052   0A           INC     R2
   \   000053   ED           MOV     A,R5
   \   000054   3400         ADDC    A,#0x0
   \   000056   FB           MOV     R3,A
   \   000057   E0           MOVX    A,@DPTR
   \   000058   54F8         ANL     A,#0xf8
   \   00005A   F5..         MOV     ?V0 + 0,A
   \   00005C   8A82         MOV     DPL,R2
   \   00005E   8B83         MOV     DPH,R3
   \   000060   E0           MOVX    A,@DPTR
   \   000061   5407         ANL     A,#0x7
   \   000063   45..         ORL     A,?V0 + 0
   \   000065   F5..         MOV     ?V0 + 0,A
   \   000067   12....       LCALL   ?Subroutine14 & 0xFFFF
   2753              pNDRsp->nodeDesc.APSFlags = *msg++ & 0x07;
   \                     ??CrossCallReturnLabel_11:
   \   00006A   5407         ANL     A,#0x7
   \   00006C   F5..         MOV     ?V0 + 1,A
   \   00006E   A3           INC     DPTR
   \   00006F   08           INC     R0
   \   000070   A983         MOV     R1,DPH
   \   000072   74F8         MOV     A,#-0x8
   \   000074   55..         ANL     A,?V0 + 0
   \   000076   45..         ORL     A,?V0 + 1
   \   000078   8A82         MOV     DPL,R2
   \   00007A   8B83         MOV     DPH,R3
   \   00007C   12....       LCALL   ?Subroutine14 & 0xFFFF
   2754              pNDRsp->nodeDesc.CapabilityFlags = *msg++;
   \                     ??CrossCallReturnLabel_12:
   \   00007F   8C82         MOV     DPL,R4
   \   000081   8D83         MOV     DPH,R5
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   12....       LCALL   ?Subroutine24 & 0xFFFF
   2755              pNDRsp->nodeDesc.ManufacturerCode[0] = *msg++;
   \                     ??CrossCallReturnLabel_416:
   \   00008A   8C82         MOV     DPL,R4
   \   00008C   8D83         MOV     DPH,R5
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   A3           INC     DPTR
   \   000093   A3           INC     DPTR
   \   000094   12....       LCALL   ?Subroutine17 & 0xFFFF
   2756              pNDRsp->nodeDesc.ManufacturerCode[1] = *msg++;
   \                     ??CrossCallReturnLabel_19:
   \   000097   12....       LCALL   ?Subroutine17 & 0xFFFF
   2757              pNDRsp->nodeDesc.MaxBufferSize = *msg++;
   \                     ??CrossCallReturnLabel_20:
   \   00009A   A3           INC     DPTR
   \   00009B   12....       LCALL   ?Subroutine15 & 0xFFFF
   2758              pNDRsp->nodeDesc.MaxInTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_14:
   \   00009E   12....       LCALL   ?Subroutine15 & 0xFFFF
   2759              pNDRsp->nodeDesc.MaxInTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_15:
   \   0000A1   12....       LCALL   ?Subroutine24 & 0xFFFF
   2760              pNDRsp->nodeDesc.ServerMask = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_417:
   \   0000A4   F5..         MOV     ?V0 + 0,A
   \   0000A6   A3           INC     DPTR
   \   0000A7   E0           MOVX    A,@DPTR
   \   0000A8   FB           MOV     R3,A
   \   0000A9   EC           MOV     A,R4
   \   0000AA   240B         ADD     A,#0xb
   \   0000AC   F582         MOV     DPL,A
   \   0000AE   ED           MOV     A,R5
   \   0000AF   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_401:
   \   0000B2   E5..         MOV     A,?V0 + 0
   \   0000B4   12....       LCALL   ?Subroutine30 & 0xFFFF
   2761              msg += 2;
   2762              pNDRsp->nodeDesc.MaxOutTransferSize[0] = *msg++;
   \                     ??CrossCallReturnLabel_44:
   \   0000B7   8882         MOV     DPL,R0
   \   0000B9   8983         MOV     DPH,R1
   \   0000BB   E0           MOVX    A,@DPTR
   \   0000BC   C0E0         PUSH    A
   \   0000BE   EC           MOV     A,R4
   \   0000BF   240D         ADD     A,#0xd
   \   0000C1   F582         MOV     DPL,A
   \   0000C3   ED           MOV     A,R5
   \   0000C4   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_402:
   \   0000C7   D0E0         POP     A
   \   0000C9   12....       LCALL   ??Subroutine176_0 & 0xFFFF
   2763              pNDRsp->nodeDesc.MaxOutTransferSize[1] = *msg++;
   \                     ??CrossCallReturnLabel_418:
   \   0000CC   C0E0         PUSH    A
   \   0000CE   EC           MOV     A,R4
   \   0000CF   12....       LCALL   ??Subroutine172_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_380:
   \   0000D2   ED           MOV     A,R5
   \   0000D3   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_403:
   \   0000D6   D0E0         POP     A
   \   0000D8   12....       LCALL   ?Subroutine44 & 0xFFFF
   2764              pNDRsp->nodeDesc.DescriptorCapability = *msg;
   \                     ??CrossCallReturnLabel_85:
   \   0000DB   E0           MOVX    A,@DPTR
   \   0000DC   C0E0         PUSH    A
   \   0000DE   EC           MOV     A,R4
   \   0000DF   12....       LCALL   ?Subroutine104 & 0xFFFF
   2765            }
   \                     ??CrossCallReturnLabel_176:
   \   0000E2   ED           MOV     A,R5
   \   0000E3   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_404:
   \   0000E6   D0E0         POP     A
   \   0000E8   F0           MOVX    @DPTR,A
   2766          }
   \                     ??ZDO_ParseNodeDescRsp_0:
   \   0000E9   7F03         MOV     R7,#0x3
   \   0000EB   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine24:
   \   000000   A3           INC     DPTR
   \   000001                REQUIRE ??Subroutine176_0
   \   000001                ; // Fall through to label ??Subroutine176_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine176_0:
   \   000000   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_421:
   \   000003   08           INC     R0
   \   000004   A983         MOV     R1,DPH
   \   000006   E0           MOVX    A,@DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine17:
   \   000000   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_179:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine107:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8882         MOV     DPL,R0
   \   000003   8983         MOV     DPH,R1
   \   000005   A3           INC     DPTR
   \   000006   08           INC     R0
   \   000007   A983         MOV     R1,DPH
   \   000009   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_231:
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   A3           INC     DPTR
   \   000012   A3           INC     DPTR
   \   000013   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine15:
   \   000000   12....       LCALL   ?Subroutine107 & 0xFFFF
   \                     ??CrossCallReturnLabel_180:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine11:
   \   000000   12....       LCALL   ?Subroutine139 & 0xFFFF
   \                     ??CrossCallReturnLabel_232:
   \   000003   12....       LCALL   ?Subroutine122 & 0xFFFF
   \                     ??CrossCallReturnLabel_213:
   \   000006   8C82         MOV     DPL,R4
   \   000008   8D83         MOV     DPH,R5
   \   00000A   12....       LCALL   ?Subroutine113 & 0xFFFF
   \                     ??CrossCallReturnLabel_420:
   \   00000D   A882         MOV     R0,DPL
   \   00000F   A983         MOV     R1,DPH
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FE           MOV     R6,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   FB           MOV     R3,A
   \   000016   EE           MOV     A,R6
   \   000017   8C82         MOV     DPL,R4
   \   000019   8D83         MOV     DPH,R5
   \   00001B   A3           INC     DPTR
   \   00001C   F0           MOVX    @DPTR,A
   \   00001D   A3           INC     DPTR
   \   00001E   EB           MOV     A,R3
   \   00001F   F0           MOVX    @DPTR,A
   \   000020   8C82         MOV     DPL,R4
   \   000022   8D83         MOV     DPH,R5
   \   000024   E0           MOVX    A,@DPTR
   \   000025   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine138:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005   22           RET
   2767          
   2768          /*********************************************************************
   2769           * @fn          ZDO_ParsePowerDescRsp
   2770           *
   2771           * @brief       This function parses the Power_Desc_rsp message.
   2772           *
   2773           * @param       inMsg  - incoming message
   2774           * @param       pNPRsp - place to parse the message into
   2775           *
   2776           * @return      none
   2777           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine33:
   \   000000   F9           MOV     R1,A
   \   000001   8C82         MOV     DPL,R4
   \   000003   8D83         MOV     DPH,R5
   \   000005                REQUIRE ??Subroutine148_0
   \   000005                ; // Fall through to label ??Subroutine148_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2778          void ZDO_ParsePowerDescRsp( zdoIncomingMsg_t *inMsg, ZDO_PowerRsp_t *pNPRsp )
   \                     ZDO_ParsePowerDescRsp:
   2779          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   2780            uint8 *msg;
   2781          
   2782            msg = inMsg->asdu;
   \   000005   EA           MOV     A,R2
   \   000006   12....       LCALL   ??Subroutine146_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_245:
   \   000009   EB           MOV     A,R3
   \   00000A   12....       LCALL   ?Subroutine78 & 0xFFFF
   2783            pNPRsp->status = *msg++;
   \                     ??CrossCallReturnLabel_142:
   \   00000D   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_228:
   \   000010   12....       LCALL   ?Subroutine41 & 0xFFFF
   \                     ??CrossCallReturnLabel_76:
   \   000013   A3           INC     DPTR
   \   000014   AA82         MOV     R2,DPL
   \   000016   AB83         MOV     R3,DPH
   2784            pNPRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000018   E0           MOVX    A,@DPTR
   \   000019   FE           MOV     R6,A
   \   00001A   A3           INC     DPTR
   \   00001B   E0           MOVX    A,@DPTR
   \   00001C   F9           MOV     R1,A
   \   00001D   EE           MOV     A,R6
   \   00001E   8C82         MOV     DPL,R4
   \   000020   8D83         MOV     DPH,R5
   \   000022   A3           INC     DPTR
   \   000023   12....       LCALL   ??Subroutine149_0 & 0xFFFF
   2785          
   2786            if ( pNPRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_254:
   \   000026   8C82         MOV     DPL,R4
   \   000028   8D83         MOV     DPH,R5
   \   00002A   E0           MOVX    A,@DPTR
   \   00002B   7079         JNZ     ??CrossCallReturnLabel_267
   2787            {
   2788              msg += 2;
   \   00002D   EA           MOV     A,R2
   \   00002E   2402         ADD     A,#0x2
   \   000030   FA           MOV     R2,A
   \   000031   EB           MOV     A,R3
   \   000032   3400         ADDC    A,#0x0
   \   000034   FB           MOV     R3,A
   2789              pNPRsp->pwrDesc.AvailablePowerSources = *msg >> 4;
   \   000035   EC           MOV     A,R4
   \   000036   2403         ADD     A,#0x3
   \   000038   ED           MOV     A,R5
   \   000039   3400         ADDC    A,#0x0
   \   00003B   0C           INC     R4
   \   00003C   0C           INC     R4
   \   00003D   0C           INC     R4
   \   00003E   FD           MOV     R5,A
   \   00003F   8C82         MOV     DPL,R4
   \   000041   8D83         MOV     DPH,R5
   \   000043   E0           MOVX    A,@DPTR
   \   000044   540F         ANL     A,#0xf
   \   000046   FE           MOV     R6,A
   \   000047   A3           INC     DPTR
   \   000048   E0           MOVX    A,@DPTR
   \   000049   FF           MOV     R7,A
   \   00004A   8A82         MOV     DPL,R2
   \   00004C   8B83         MOV     DPH,R3
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   C4           SWAP    A
   \   000050   540F         ANL     A,#0xf
   \   000052   F5..         MOV     ?V0 + 0,A
   \   000054   75..00       MOV     ?V0 + 1,#0x0
   \   000057   7404         MOV     A,#0x4
   \   000059   78..         MOV     R0,#?V0 + 0
   \   00005B   12....       LCALL   ?S_SHL
   \   00005E   EE           MOV     A,R6
   \   00005F   45..         ORL     A,?V0 + 0
   \   000061   FE           MOV     R6,A
   \   000062   8C82         MOV     DPL,R4
   \   000064   8D83         MOV     DPH,R5
   \   000066   12....       LCALL   ?Subroutine34 & 0xFFFF
   2790              pNPRsp->pwrDesc.PowerMode = *msg++ & 0x0F;
   \                     ??CrossCallReturnLabel_58:
   \   000069   A3           INC     DPTR
   \   00006A   0A           INC     R2
   \   00006B   AB83         MOV     R3,DPH
   \   00006D   EE           MOV     A,R6
   \   00006E   54F0         ANL     A,#0xf0
   \   000070   48           ORL     A,R0
   \   000071   F8           MOV     R0,A
   \   000072   EF           MOV     A,R7
   \   000073   12....       LCALL   ?Subroutine33 & 0xFFFF
   2791              pNPRsp->pwrDesc.CurrentPowerSourceLevel = *msg >> 4;
   \                     ??CrossCallReturnLabel_266:
   \   000076   E8           MOV     A,R0
   \   000077   FE           MOV     R6,A
   \   000078   E9           MOV     A,R1
   \   000079   540F         ANL     A,#0xf
   \   00007B   FF           MOV     R7,A
   \   00007C   8A82         MOV     DPL,R2
   \   00007E   8B83         MOV     DPH,R3
   \   000080   E0           MOVX    A,@DPTR
   \   000081   C4           SWAP    A
   \   000082   540F         ANL     A,#0xf
   \   000084   F5..         MOV     ?V0 + 0,A
   \   000086   740C         MOV     A,#0xc
   \   000088   78..         MOV     R0,#?V0 + 0
   \   00008A   12....       LCALL   ?S_SHL
   \   00008D   EF           MOV     A,R7
   \   00008E   45..         ORL     A,?V0 + 1
   \   000090   FF           MOV     R7,A
   \   000091   8C82         MOV     DPL,R4
   \   000093   8D83         MOV     DPH,R5
   \   000095   EE           MOV     A,R6
   \   000096   12....       LCALL   ?Subroutine34 & 0xFFFF
   2792              pNPRsp->pwrDesc.CurrentPowerSource = *msg++ & 0x0F;
   2793            }
   \                     ??CrossCallReturnLabel_59:
   \   000099   EF           MOV     A,R7
   \   00009A   54F0         ANL     A,#0xf0
   \   00009C   FF           MOV     R7,A
   \   00009D   E8           MOV     A,R0
   \   00009E   F9           MOV     R1,A
   \   00009F   EE           MOV     A,R6
   \   0000A0   F8           MOV     R0,A
   \   0000A1   EF           MOV     A,R7
   \   0000A2   49           ORL     A,R1
   \   0000A3   12....       LCALL   ?Subroutine33 & 0xFFFF
   2794          }
   \                     ??CrossCallReturnLabel_267:
   \   0000A6   02....       LJMP    ??Subroutine144_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine34:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   A3           INC     DPTR
   \   000002   EF           MOV     A,R7
   \   000003   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_194:
   \   000006   E0           MOVX    A,@DPTR
   \   000007   540F         ANL     A,#0xf
   \   000009   F8           MOV     R0,A
   \   00000A   22           RET
   2795          
   2796          /*********************************************************************
   2797           * @fn          ZDO_ParseSimpleDescRsp
   2798           *
   2799           * @brief       This function parse the Simple_Desc_rsp message.
   2800           *
   2801           *   NOTE: The pAppInClusterList and pAppOutClusterList fields
   2802           *         in the SimpleDescriptionFormat_t structure are allocated
   2803           *         and the calling function needs to free [osal_msg_free()]
   2804           *         these buffers.
   2805           *
   2806           * @param       inMsg  - incoming message
   2807           * @param       pSimpleDescRsp - place to parse the message into
   2808           *
   2809           * @return      none
   2810           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2811          void ZDO_ParseSimpleDescRsp( zdoIncomingMsg_t *inMsg, ZDO_SimpleDescRsp_t *pSimpleDescRsp )
   \                     ZDO_ParseSimpleDescRsp:
   2812          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2813            uint8 *msg;
   2814          
   2815            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine11 & 0xFFFF
   2816            pSimpleDescRsp->status = *msg++;
   2817            pSimpleDescRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   2818            msg += sizeof ( uint16 );
   2819            msg++; // Skip past the length field.
   2820          
   2821            if ( pSimpleDescRsp->status == ZDP_SUCCESS )
   \                     ??CrossCallReturnLabel_1:
   \   000008   7013         JNZ     ??ZDO_ParseSimpleDescRsp_0
   2822            {
   2823              ZDO_ParseSimpleDescBuf( msg, &(pSimpleDescRsp->simpleDesc) );
   \   00000A                ; Setup parameters for call to function ZDO_ParseSimpleDescBuf
   \   00000A   EC           MOV     A,R4
   \   00000B   2403         ADD     A,#0x3
   \   00000D   FC           MOV     R4,A
   \   00000E   ED           MOV     A,R5
   \   00000F   3400         ADDC    A,#0x0
   \   000011   FD           MOV     R5,A
   \   000012   E8           MOV     A,R0
   \   000013   2403         ADD     A,#0x3
   \   000015   FA           MOV     R2,A
   \   000016   E9           MOV     A,R1
   \   000017   3400         ADDC    A,#0x0
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   ??ZDO_ParseSimpleDescBuf?relay
   2824            }
   2825          }
   \                     ??ZDO_ParseSimpleDescRsp_0:
   \   00001D                REQUIRE ?Subroutine7
   \   00001D                ; // Fall through to label ?Subroutine7

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
   2826          
   2827          /*********************************************************************
   2828           * @fn          ZDO_ParseEPListRsp
   2829           *
   2830           * @brief       This parse the Active_EP_rsp or Match_Desc_rsp message.
   2831           *
   2832           * @param       inMsg  - incoming message
   2833           *
   2834           * @return      none
   2835           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   EE           MOV     A,R6
   \   000001   FA           MOV     R2,A
   \   000002   EF           MOV     A,R7
   \   000003   FB           MOV     R3,A
   \   000004                REQUIRE ??Subroutine165_0
   \   000004                ; // Fall through to label ??Subroutine165_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2836          ZDO_ActiveEndpointRsp_t *ZDO_ParseEPListRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseEPListRsp:
   2837          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2838            ZDO_ActiveEndpointRsp_t *pRsp;
   2839            uint8 *msg;
   2840            uint8 Status;
   2841            uint8 cnt;
   2842          
   2843            msg = inMsg->asdu;
   \   000005   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_157:
   \   000008   12....       LCALL   ?Subroutine121 & 0xFFFF
   2844            Status = *msg++;
   \                     ??CrossCallReturnLabel_210:
   \   00000B   F5..         MOV     ?V0 + 5,A
   \   00000D   A3           INC     DPTR
   \   00000E   8582..       MOV     ?V0 + 2,DPL
   \   000011   8583..       MOV     ?V0 + 3,DPH
   2845            cnt = msg[2];
   \   000014   A3           INC     DPTR
   \   000015   A3           INC     DPTR
   \   000016   E0           MOVX    A,@DPTR
   \   000017   F5..         MOV     ?V0 + 4,A
   2846          
   2847            pRsp = (ZDO_ActiveEndpointRsp_t *)osal_mem_alloc( sizeof(  ZDO_ActiveEndpointRsp_t ) + cnt );
   \   000019   F582         MOV     DPL,A
   \   00001B   8582..       MOV     ?V0 + 0,DPL
   \   00001E                ; Setup parameters for call to function osal_mem_alloc
   \   00001E   2404         ADD     A,#0x4
   \   000020   FA           MOV     R2,A
   \   000021   E4           CLR     A
   \   000022   3400         ADDC    A,#0x0
   \   000024   FB           MOV     R3,A
   \   000025   12....       LCALL   ??osal_mem_alloc?relay
   \   000028   8A..         MOV     ?V0 + 6,R2
   \   00002A   8B..         MOV     ?V0 + 7,R3
   \   00002C   AE..         MOV     R6,?V0 + 6
   \   00002E   AF..         MOV     R7,?V0 + 7
   2848            if ( pRsp )
   \   000030   EE           MOV     A,R6
   \   000031   4F           ORL     A,R7
   \   000032   6039         JZ      ??ZDO_ParseEPListRsp_0
   2849            {
   2850              pRsp->status = Status;
   \   000034   8E82         MOV     DPL,R6
   \   000036   8F83         MOV     DPH,R7
   \   000038   E5..         MOV     A,?V0 + 5
   \   00003A   12....       LCALL   ?Subroutine48 & 0xFFFF
   2851              pRsp->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_93:
   \   00003D   FA           MOV     R2,A
   \   00003E   12....       LCALL   ?Subroutine21 & 0xFFFF
   2852              msg += sizeof( uint16 );
   2853              pRsp->cnt = cnt;
   2854              msg++; // pass cnt
   2855              osal_memcpy( pRsp->epList, msg, cnt );
   \                     ??CrossCallReturnLabel_422:
   \   000041                ; Setup parameters for call to function osal_memcpy
   \   000041   85..82       MOV     DPL,?V0 + 2
   \   000044   85..83       MOV     DPH,?V0 + 3
   \   000047   A3           INC     DPTR
   \   000048   A3           INC     DPTR
   \   000049   A3           INC     DPTR
   \   00004A   A982         MOV     R1,DPL
   \   00004C   AA83         MOV     R2,DPH
   \   00004E   89..         MOV     ?V0 + 4,R1
   \   000050   8A..         MOV     ?V0 + 5,R2
   \   000052   88..         MOV     ?V0 + 6,R0
   \   000054   78..         MOV     R0,#?V0 + 4
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000059   AC..         MOV     R4,?V0 + 0
   \   00005B   7D00         MOV     R5,#0x0
   \   00005D   EE           MOV     A,R6
   \   00005E   2404         ADD     A,#0x4
   \   000060   FA           MOV     R2,A
   \   000061   EF           MOV     A,R7
   \   000062   3400         ADDC    A,#0x0
   \   000064   FB           MOV     R3,A
   \   000065   12....       LCALL   ??osal_memcpy?relay
   \   000068   7403         MOV     A,#0x3
   \   00006A   12....       LCALL   ?DEALLOC_XSTACK8
   2856            }
   2857          
   2858            return ( pRsp );
   \                     ??ZDO_ParseEPListRsp_0:
   \   00006D   02....       LJMP    ?Subroutine5 & 0xFFFF
   2859          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine21:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F8           MOV     R0,A
   \   000003   E4           CLR     A
   \   000004   C8           XCH     A,R0
   \   000005   F9           MOV     R1,A
   \   000006   EA           MOV     A,R2
   \   000007   8E82         MOV     DPL,R6
   \   000009   8F83         MOV     DPH,R7
   \   00000B   A3           INC     DPTR
   \   00000C   F0           MOVX    @DPTR,A
   \   00000D   A3           INC     DPTR
   \   00000E   E9           MOV     A,R1
   \   00000F                REQUIRE ??Subroutine177_0
   \   00000F                ; // Fall through to label ??Subroutine177_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine177_0:
   \   000000   12....       LCALL   ?Subroutine134 & 0xFFFF
   \                     ??CrossCallReturnLabel_425:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   E5..         MOV     A,?V0 + 4
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine121:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 2,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   85..82       MOV     DPL,?V0 + 2
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine89:
   \   000000   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_458:
   \   000003   22           RET
   2860          
   2861          /*********************************************************************
   2862           * @fn          ZDO_ParseServerDiscRsp
   2863           *
   2864           * @brief       Parse the Server_Discovery_rsp message.
   2865           *
   2866           * @param       inMsg - incoming message.
   2867           * @param       pRsp - place to put the parsed information.
   2868           *
   2869           * @return      none
   2870           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2871          void ZDO_ParseServerDiscRsp( zdoIncomingMsg_t *inMsg, ZDO_ServerDiscRsp_t *pRsp )
   \                     ZDO_ParseServerDiscRsp:
   2872          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   2873            pRsp->status = inMsg->asdu[0];
   \   000005   EA           MOV     A,R2
   \   000006   2413         ADD     A,#0x13
   \   000008   F8           MOV     R0,A
   \   000009   EB           MOV     A,R3
   \   00000A   3400         ADDC    A,#0x0
   \   00000C   F9           MOV     R1,A
   \   00000D   8882         MOV     DPL,R0
   \   00000F   8983         MOV     DPH,R1
   \   000011   E0           MOVX    A,@DPTR
   \   000012   FA           MOV     R2,A
   \   000013   A3           INC     DPTR
   \   000014   E0           MOVX    A,@DPTR
   \   000015   F583         MOV     DPH,A
   \   000017   8A82         MOV     DPL,R2
   \   000019   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_229:
   \   00001C   12....       LCALL   ?Subroutine14 & 0xFFFF
   2874            pRsp->serverMask = BUILD_UINT16( inMsg->asdu[1], inMsg->asdu[2] );
   \                     ??CrossCallReturnLabel_13:
   \   00001F   12....       LCALL   ??Subroutine142_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_237:
   \   000022   A3           INC     DPTR
   \   000023   E0           MOVX    A,@DPTR
   \   000024   FA           MOV     R2,A
   \   000025   8882         MOV     DPL,R0
   \   000027   8983         MOV     DPH,R1
   \   000029   A3           INC     DPTR
   \   00002A   12....       LCALL   ??Subroutine184_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_462:
   \   00002D   A3           INC     DPTR
   \   00002E   12....       LCALL   ??Subroutine149_0 & 0xFFFF
   2875          }
   \                     ??CrossCallReturnLabel_255:
   \   000031   02....       LJMP    ?Subroutine7 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine184_0:
   \   000000   A3           INC     DPTR
   \   000001   E0           MOVX    A,@DPTR
   \   000002   F9           MOV     R1,A
   \   000003   EA           MOV     A,R2
   \   000004   8C82         MOV     DPL,R4
   \   000006   8D83         MOV     DPH,R5
   \   000008   22           RET
   2876          
   2877          /*********************************************************************
   2878           * @fn          ZDO_ParseMgmtLqiRsp
   2879           *
   2880           * @brief       This function parses the incoming Management
   2881           *              LQI response
   2882           *
   2883           * @param       inMsg - incoming message
   2884           *
   2885           * @return      a pointer to parsed response structure (NULL if not allocated).
   2886           *          This structure was allocated using osal_mem_alloc, so it must be freed
   2887           *          by the calling function [osal_mem_free()].
   2888           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2889          ZDO_MgmtLqiRsp_t *ZDO_ParseMgmtLqiRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtLqiRsp:
   2890          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2891            ZDO_MgmtLqiRsp_t *pRsp;
   2892            uint8 status;
   2893            uint8 startIndex = 0;
   \   000005   75..00       MOV     ?V0 + 5,#0x0
   2894            uint8 neighborLqiCount = 0;
   \   000008   75..00       MOV     ?V0 + 4,#0x0
   2895            uint8 neighborLqiEntries = 0;
   \   00000B   75..00       MOV     ?V0 + 6,#0x0
   2896            uint8 *msg;
   2897          
   2898            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine54 & 0xFFFF
   2899          
   2900            status = *msg++;
   2901            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_100:
   \   000011   7003         JNZ     ??CrossCallReturnLabel_104
   2902            {
   2903              neighborLqiEntries = *msg++;
   \   000013   12....       LCALL   ?Subroutine56 & 0xFFFF
   2904              startIndex = *msg++;
   2905              neighborLqiCount = *msg++;
   2906            }
   2907          
   2908            // Allocate a buffer big enough to handle the list.
   2909            pRsp = (ZDO_MgmtLqiRsp_t *)osal_mem_alloc(
   2910                      sizeof( ZDO_MgmtLqiRsp_t ) + (neighborLqiCount * sizeof( neighborLqiItem_t )) );
   \                     ??CrossCallReturnLabel_104:
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   E5..         MOV     A,?V0 + 4
   \   000018   75F00E       MOV     B,#0xe
   \   00001B   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_168:
   \   00001E   12....       LCALL   ??osal_mem_alloc?relay
   \   000021   8A..         MOV     ?V0 + 0,R2
   \   000023   8B..         MOV     ?V0 + 1,R3
   \   000025   AE..         MOV     R6,?V0 + 0
   \   000027   AF..         MOV     R7,?V0 + 1
   2911            if ( pRsp )
   \   000029   EE           MOV     A,R6
   \   00002A   4F           ORL     A,R7
   \   00002B   6067         JZ      ??ZDO_ParseMgmtLqiRsp_0
   2912            {
   2913              uint8 x;
   2914              neighborLqiItem_t *pList = pRsp->list;
   \   00002D   EE           MOV     A,R6
   \   00002E   2404         ADD     A,#0x4
   \   000030   F5..         MOV     ?V0 + 0,A
   \   000032   EF           MOV     A,R7
   \   000033   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   2915              pRsp->status = status;
   \                     ??CrossCallReturnLabel_430:
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   E5..         MOV     A,?V0 + 7
   \   00003C   F0           MOVX    @DPTR,A
   2916              pRsp->neighborLqiEntries = neighborLqiEntries;
   \   00003D   A3           INC     DPTR
   \   00003E   E5..         MOV     A,?V0 + 6
   \   000040   12....       LCALL   ?Subroutine43 & 0xFFFF
   2917              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_80:
   \   000043   A3           INC     DPTR
   \   000044   E5..         MOV     A,?V0 + 5
   \   000046   12....       LCALL   ??Subroutine177_0 & 0xFFFF
   2918              pRsp->neighborLqiCount = neighborLqiCount;
   2919          
   2920              for ( x = 0; x < neighborLqiCount; x++ )
   \                     ??CrossCallReturnLabel_424:
   \   000049   75..00       MOV     ?V0 + 5,#0x0
   \   00004C   803F         SJMP    ??ZDO_ParseMgmtLqiRsp_1
   2921              {
   2922                osal_cpyExtAddr(pList->extPANId, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmtLqiRsp_2:
   \   00004E                ; Setup parameters for call to function sAddrExtCpy
   \   00004E   AC..         MOV     R4,?V0 + 2
   \   000050   AD..         MOV     R5,?V0 + 3
   \   000052   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_177:
   \   000055   12....       LCALL   ??sAddrExtCpy?relay
   2923                msg += Z_EXTADDR_LEN;
   2924          
   2925                msg += Z_EXTADDR_LEN;  // Throwing away IEEE.
   \   000058   E5..         MOV     A,?V0 + 2
   \   00005A   2410         ADD     A,#0x10
   \   00005C   12....       LCALL   ?Subroutine99 & 0xFFFF
   2926                pList->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_252:
   \   00005F   85..82       MOV     DPL,?V0 + 2
   \   000062   F583         MOV     DPH,A
   \   000064   12....       LCALL   ?Subroutine64 & 0xFFFF
   \                     ??CrossCallReturnLabel_118:
   \   000067   12....       LCALL   ??Subroutine149_0 & 0xFFFF
   2927                msg += 2 + 1 + 1 + 1;      // Skip DeviceType, RxOnIdle, Rlationship, PermitJoining and Depth
   \                     ??CrossCallReturnLabel_256:
   \   00006A   E5..         MOV     A,?V0 + 2
   \   00006C   2405         ADD     A,#0x5
   \   00006E   12....       LCALL   ??Subroutine169_0 & 0xFFFF
   2928                pList->rxLqi = *msg++;
   \                     ??CrossCallReturnLabel_370:
   \   000071   C0E0         PUSH    A
   \   000073   E5..         MOV     A,?V0 + 0
   \   000075   240D         ADD     A,#0xd
   \   000077   12....       LCALL   ??Subroutine173_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_408:
   \   00007A   D0E0         POP     A
   \   00007C   12....       LCALL   ?Subroutine19 & 0xFFFF
   2929                pList->txQuality = 0;  // This is not specified OTA by ZigBee 1.1.
   \                     ??CrossCallReturnLabel_23:
   \   00007F   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_414:
   \   000082   E4           CLR     A
   \   000083   F0           MOVX    @DPTR,A
   2930                pList++;
   \   000084   E5..         MOV     A,?V0 + 0
   \   000086   240E         ADD     A,#0xe
   \   000088   12....       LCALL   ?Subroutine102 & 0xFFFF
   2931              }
   \                     ??CrossCallReturnLabel_433:
   \   00008B   05..         INC     ?V0 + 5
   \                     ??ZDO_ParseMgmtLqiRsp_1:
   \   00008D   E5..         MOV     A,?V0 + 5
   \   00008F   C3           CLR     C
   \   000090   95..         SUBB    A,?V0 + 4
   \   000092   40BA         JC      ??ZDO_ParseMgmtLqiRsp_2
   2932            }
   2933          
   2934            return ( pRsp );
   \                     ??ZDO_ParseMgmtLqiRsp_0:
   \   000094   02....       LJMP    ?Subroutine5 & 0xFFFF
   2935          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine105:
   \   000000   E5..         MOV     A,?V0 + 0
   \   000002   2404         ADD     A,#0x4
   \   000004   FA           MOV     R2,A
   \   000005   E5..         MOV     A,?V0 + 1
   \   000007   3400         ADDC    A,#0x0
   \   000009   FB           MOV     R3,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine103:
   \   000000   A4           MUL     AB
   \   000001   2404         ADD     A,#0x4
   \   000003   FA           MOV     R2,A
   \   000004   E5F0         MOV     A,B
   \   000006   3400         ADDC    A,#0x0
   \   000008   FB           MOV     R3,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine56:
   \   000000   12....       LCALL   ?Subroutine120 & 0xFFFF
   \                     ??CrossCallReturnLabel_209:
   \   000003   8582..       MOV     ?V0 + 2,DPL
   \   000006   8583..       MOV     ?V0 + 3,DPH
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine120:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V0 + 6,A
   \   000003   A3           INC     DPTR
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 5,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   F5..         MOV     ?V0 + 4,A
   \   00000B   A3           INC     DPTR
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine54:
   \   000000   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_457:
   \   000003   12....       LCALL   ?Subroutine121 & 0xFFFF
   \                     ??CrossCallReturnLabel_211:
   \   000006   F5..         MOV     ?V0 + 7,A
   \   000008   A3           INC     DPTR
   \   000009   8582..       MOV     ?V0 + 2,DPL
   \   00000C   8583..       MOV     ?V0 + 3,DPH
   \   00000F   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine19:
   \   000000   12....       LCALL   ?Subroutine109 & 0xFFFF
   \                     ??CrossCallReturnLabel_185:
   \   000003   22           RET
   2936          
   2937          /*********************************************************************
   2938           * @fn          ZDO_ParseMgmNwkDiscRsp
   2939           *
   2940           * @brief       This function parses the incoming Management
   2941           *              Network Discover response.
   2942           *
   2943           * @param       inMsg - incoming message
   2944           *
   2945           * @return      pointer to parsed response.  This structure was
   2946           *          allocated using osal_mem_alloc, so it must be freed
   2947           *          by the calling function [osal_mem_free()].
   2948           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   2949          ZDO_MgmNwkDiscRsp_t *ZDO_ParseMgmNwkDiscRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmNwkDiscRsp:
   2950          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   2951            ZDO_MgmNwkDiscRsp_t *pRsp;
   2952            uint8 status;
   2953            uint8 networkCount = 0;
   \   000005   75..00       MOV     ?V0 + 6,#0x0
   2954            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0 + 5,#0x0
   2955            uint8 networkListCount = 0;
   \   00000B   75..00       MOV     ?V0 + 4,#0x0
   2956            uint8 *msg;
   2957          
   2958            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine52 & 0xFFFF
   2959            status = *msg++;
   \                     ??CrossCallReturnLabel_435:
   \   000011   F5..         MOV     ?V0 + 7,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   2960          
   2961            if ( status == ZSuccess )
   \   000018   7008         JNZ     ??ZDO_ParseMgmNwkDiscRsp_0
   2962            {
   2963              networkCount = *msg++;
   \   00001A   12....       LCALL   ?Subroutine120 & 0xFFFF
   2964              startIndex = *msg++;
   2965              networkListCount = *msg++;
   2966            }
   \                     ??CrossCallReturnLabel_208:
   \   00001D   0E           INC     R6
   \   00001E   0E           INC     R6
   \   00001F   0E           INC     R6
   \   000020   AF83         MOV     R7,DPH
   2967          
   2968            // Allocate a buffer big enough to handle the list.
   2969            pRsp = (ZDO_MgmNwkDiscRsp_t *)osal_mem_alloc( sizeof( ZDO_MgmNwkDiscRsp_t )
   2970                                            + (networkListCount * sizeof( mgmtNwkDiscItem_t )) );
   \                     ??ZDO_ParseMgmNwkDiscRsp_0:
   \   000022                ; Setup parameters for call to function osal_mem_alloc
   \   000022   85....       MOV     ?V0 + 0,?V0 + 4
   \   000025   75..00       MOV     ?V0 + 1,#0x0
   \   000028   7404         MOV     A,#0x4
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?S_SHL
   \   00002F   12....       LCALL   ?Subroutine105 & 0xFFFF
   \                     ??CrossCallReturnLabel_178:
   \   000032   12....       LCALL   ??osal_mem_alloc?relay
   \   000035   8A..         MOV     ?V0 + 2,R2
   \   000037   8B..         MOV     ?V0 + 3,R3
   2971            if ( pRsp )
   \   000039   EA           MOV     A,R2
   \   00003A   45..         ORL     A,?V0 + 3
   \   00003C   7003         JNZ     $+5
   \   00003E   02....       LJMP    ??ZDO_ParseMgmNwkDiscRsp_1 & 0xFFFF
   2972            {
   2973              uint8 x;
   2974              mgmtNwkDiscItem_t *pList;
   2975          
   2976              pRsp->status = status;
   \   000041   12....       LCALL   ?Subroutine13 & 0xFFFF
   2977              pRsp->networkCount = networkCount;
   2978              pRsp->startIndex = startIndex;
   2979              pRsp->networkListCount = networkListCount;
   2980              pList = pRsp->list;
   \                     ??CrossCallReturnLabel_4:
   \   000044   EA           MOV     A,R2
   \   000045   2404         ADD     A,#0x4
   \   000047   F5..         MOV     ?V0 + 0,A
   \   000049   EB           MOV     A,R3
   \   00004A   12....       LCALL   ??Subroutine178_0 & 0xFFFF
   2981          
   2982              for ( x = 0; x < networkListCount; x++ )
   \                     ??CrossCallReturnLabel_431:
   \   00004D   75..00       MOV     ?V0 + 5,#0x0
   \   000050   8069         SJMP    ??ZDO_ParseMgmNwkDiscRsp_2
   2983              {
   2984                osal_cpyExtAddr(pList->extendedPANID, msg);   //Copy extended PAN ID
   \                     ??ZDO_ParseMgmNwkDiscRsp_3:
   \   000052                ; Setup parameters for call to function sAddrExtCpy
   \   000052   EE           MOV     A,R6
   \   000053   FC           MOV     R4,A
   \   000054   EF           MOV     A,R7
   \   000055   FD           MOV     R5,A
   \   000056   AA..         MOV     R2,?V0 + 0
   \   000058   AB..         MOV     R3,?V0 + 1
   \   00005A   12....       LCALL   ??sAddrExtCpy?relay
   2985                pList->PANId = BUILD_UINT16( msg[0], msg[1] );
   \   00005D   12....       LCALL   ?Subroutine55 & 0xFFFF
   \                     ??CrossCallReturnLabel_102:
   \   000060   A3           INC     DPTR
   \   000061   12....       LCALL   ??Subroutine149_0 & 0xFFFF
   2986                msg += Z_EXTADDR_LEN;
   \                     ??CrossCallReturnLabel_257:
   \   000064   12....       LCALL   ?Subroutine95 & 0xFFFF
   2987          
   2988                pList->logicalChannel = *msg++;
   \                     ??CrossCallReturnLabel_373:
   \   000067   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_108:
   \   00006A   12....       LCALL   ?Subroutine27 & 0xFFFF
   2989                pList->stackProfile = (*msg) & 0x0F;
   \                     ??CrossCallReturnLabel_38:
   \   00006D   E0           MOVX    A,@DPTR
   \   00006E   540F         ANL     A,#0xf
   \   000070   C0E0         PUSH    A
   \   000072   E5..         MOV     A,?V0 + 0
   \   000074   240B         ADD     A,#0xb
   \   000076   12....       LCALL   ??Subroutine173_0 & 0xFFFF
   2990                pList->version = (*msg++ >> 4) & 0x0F;
   2991                pList->beaconOrder = (*msg) & 0x0F;
   2992                pList->superFrameOrder = (*msg++ >> 4) & 0x0F;
   2993                pList->permitJoining = *msg++;
   2994                pList++;
   2995              }
   \                     ??CrossCallReturnLabel_409:
   \   000079   D0E0         POP     A
   \   00007B   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_86:
   \   00007E   C0E0         PUSH    A
   \   000080   12....       LCALL   ?Subroutine98 & 0xFFFF
   \                     ??CrossCallReturnLabel_415:
   \   000083   D0E0         POP     A
   \   000085   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   000088   540F         ANL     A,#0xf
   \   00008A   C0E0         PUSH    A
   \   00008C   E5..         MOV     A,?V0 + 0
   \   00008E   240D         ADD     A,#0xd
   \   000090   12....       LCALL   ??Subroutine173_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_410:
   \   000093   D0E0         POP     A
   \   000095   12....       LCALL   ?Subroutine45 & 0xFFFF
   \                     ??CrossCallReturnLabel_87:
   \   000098   C0E0         PUSH    A
   \   00009A   E5..         MOV     A,?V0 + 0
   \   00009C   240E         ADD     A,#0xe
   \   00009E   12....       LCALL   ??Subroutine173_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_411:
   \   0000A1   D0E0         POP     A
   \   0000A3   12....       LCALL   ?Subroutine23 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0000A6   C0E0         PUSH    A
   \   0000A8   E5..         MOV     A,?V0 + 0
   \   0000AA   240F         ADD     A,#0xf
   \   0000AC   12....       LCALL   ??Subroutine173_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_412:
   \   0000AF   D0E0         POP     A
   \   0000B1   12....       LCALL   ?Subroutine38 & 0xFFFF
   \                     ??CrossCallReturnLabel_68:
   \   0000B4   2410         ADD     A,#0x10
   \   0000B6   12....       LCALL   ?Subroutine102 & 0xFFFF
   \                     ??CrossCallReturnLabel_434:
   \   0000B9   05..         INC     ?V0 + 5
   \                     ??ZDO_ParseMgmNwkDiscRsp_2:
   \   0000BB   E5..         MOV     A,?V0 + 5
   \   0000BD   C3           CLR     C
   \   0000BE   95..         SUBB    A,?V0 + 4
   \   0000C0   4090         JC      ??ZDO_ParseMgmNwkDiscRsp_3
   2996            }
   2997          
   2998            return ( pRsp );
   \                     ??ZDO_ParseMgmNwkDiscRsp_1:
   \   0000C2   AA..         MOV     R2,?V0 + 2
   \   0000C4   AB..         MOV     R3,?V0 + 3
   \   0000C6   02....       LJMP    ??Subroutine165_0 & 0xFFFF
   2999          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine45:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   8E82         MOV     DPL,R6
   \   000003   8F83         MOV     DPH,R7
   \   000005   E0           MOVX    A,@DPTR
   \   000006   C4           SWAP    A
   \   000007   540F         ANL     A,#0xf
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine52:
   \   000000   12....       LCALL   ?Subroutine132 & 0xFFFF
   \                     ??CrossCallReturnLabel_456:
   \   000003                REQUIRE ??Subroutine179_0
   \   000003                ; // Fall through to label ??Subroutine179_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine13:
   \   000000   8A82         MOV     DPL,R2
   \   000002   8B83         MOV     DPH,R3
   \   000004   E5..         MOV     A,?V0 + 7
   \   000006   F0           MOVX    @DPTR,A
   \   000007   A3           INC     DPTR
   \   000008   E5..         MOV     A,?V0 + 6
   \   00000A   12....       LCALL   ?Subroutine115 & 0xFFFF
   \                     ??CrossCallReturnLabel_196:
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   E5..         MOV     A,?V0 + 5
   \   000011   12....       LCALL   ?Subroutine114 & 0xFFFF
   \                     ??CrossCallReturnLabel_191:
   \   000014   E5..         MOV     A,?V0 + 4
   \   000016   F0           MOVX    @DPTR,A
   \   000017   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine58:
   \   000000   12....       LCALL   ?Subroutine117 & 0xFFFF
   \                     ??CrossCallReturnLabel_199:
   \   000003   A3           INC     DPTR
   \   000004   A3           INC     DPTR
   \   000005   A3           INC     DPTR
   \   000006   A3           INC     DPTR
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine55:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   12....       LCALL   ?Subroutine118 & 0xFFFF
   \                     ??CrossCallReturnLabel_201:
   \   000007   A3           INC     DPTR
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   A3           INC     DPTR
   \   00000D   A3           INC     DPTR
   \   00000E   22           RET
   3000          
   3001          /*********************************************************************
   3002           * @fn          ZDO_ParseMgmtRtgRsp
   3003           *
   3004           * @brief       This function parses the incoming Management
   3005           *              Routing response.
   3006           *
   3007           * @param       inMsg - incoming message
   3008           *
   3009           * @return      a pointer to parsed response structure (NULL if not allocated).
   3010           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3011           *          by the calling function [osal_mem_free()].
   3012           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3013          ZDO_MgmtRtgRsp_t *ZDO_ParseMgmtRtgRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtRtgRsp:
   3014          {
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
   3015            ZDO_MgmtRtgRsp_t *pRsp;
   3016            uint8 status;
   3017            uint8 rtgCount = 0;
   \   000005   75..00       MOV     ?V0 + 2,#0x0
   3018            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0 + 1,#0x0
   3019            uint8 rtgListCount = 0;
   \   00000B   75..00       MOV     ?V0 + 0,#0x0
   3020            uint8 *msg;
   3021          
   3022            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine52 & 0xFFFF
   3023          
   3024            status = *msg++;
   \                     ??CrossCallReturnLabel_436:
   \   000011   F5..         MOV     ?V0 + 3,A
   \   000013   A3           INC     DPTR
   \   000014   AE82         MOV     R6,DPL
   \   000016   AF83         MOV     R7,DPH
   3025            if ( status == ZSuccess )
   \   000018   7011         JNZ     ??ZDO_ParseMgmtRtgRsp_0
   3026            {
   3027              rtgCount = *msg++;
   \   00001A   E0           MOVX    A,@DPTR
   \   00001B   F5..         MOV     ?V0 + 2,A
   \   00001D   A3           INC     DPTR
   3028              startIndex = *msg++;
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   F5..         MOV     ?V0 + 1,A
   \   000021   A3           INC     DPTR
   3029              rtgListCount = *msg++;
   \   000022   E0           MOVX    A,@DPTR
   \   000023   F5..         MOV     ?V0 + 0,A
   \   000025   A3           INC     DPTR
   \   000026   0E           INC     R6
   \   000027   0E           INC     R6
   \   000028   0E           INC     R6
   \   000029   AF83         MOV     R7,DPH
   3030            }
   3031          
   3032            // Allocate a buffer big enough to handle the list
   3033            pRsp = (ZDO_MgmtRtgRsp_t *)osal_mem_alloc(
   3034                    sizeof( ZDO_MgmtRtgRsp_t ) + (rtgListCount * sizeof( rtgItem_t )) );
   \                     ??ZDO_ParseMgmtRtgRsp_0:
   \   00002B                ; Setup parameters for call to function osal_mem_alloc
   \   00002B   E5..         MOV     A,?V0 + 0
   \   00002D   75F007       MOV     B,#0x7
   \   000030   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_169:
   \   000033   12....       LCALL   ??osal_mem_alloc?relay
   3035            if ( pRsp )
   \   000036   EA           MOV     A,R2
   \   000037   4B           ORL     A,R3
   \   000038   606E         JZ      ??ZDO_ParseMgmtRtgRsp_1
   3036            {
   3037              uint8 x;
   3038              rtgItem_t *pList = pRsp->list;
   \   00003A   EA           MOV     A,R2
   \   00003B   2404         ADD     A,#0x4
   \   00003D   F8           MOV     R0,A
   \   00003E   EB           MOV     A,R3
   \   00003F   3400         ADDC    A,#0x0
   \   000041   F9           MOV     R1,A
   3039              pRsp->status = status;
   \   000042   8A82         MOV     DPL,R2
   \   000044   8B83         MOV     DPH,R3
   \   000046   E5..         MOV     A,?V0 + 3
   \   000048   F0           MOVX    @DPTR,A
   3040              pRsp->rtgCount = rtgCount;
   \   000049   A3           INC     DPTR
   \   00004A   E5..         MOV     A,?V0 + 2
   \   00004C   12....       LCALL   ?Subroutine37 & 0xFFFF
   3041              pRsp->startIndex = startIndex;
   \                     ??CrossCallReturnLabel_65:
   \   00004F   E5..         MOV     A,?V0 + 1
   \   000051   12....       LCALL   ?Subroutine37 & 0xFFFF
   3042              pRsp->rtgListCount = rtgListCount;
   \                     ??CrossCallReturnLabel_66:
   \   000054   A3           INC     DPTR
   \   000055   E5..         MOV     A,?V0 + 0
   \   000057   F0           MOVX    @DPTR,A
   3043          
   3044              for ( x = 0; x < rtgListCount; x++ )
   \   000058   75..00       MOV     ?V0 + 1,#0x0
   \   00005B   8044         SJMP    ??ZDO_ParseMgmtRtgRsp_2
   3045              {
   3046                uint8 statOpt;
   3047          
   3048                pList->dstAddress = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtRtgRsp_3:
   \   00005D   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_121:
   \   000060   F0           MOVX    @DPTR,A
   \   000061   A3           INC     DPTR
   \   000062   ED           MOV     A,R5
   \   000063   12....       LCALL   ??Subroutine186_0 & 0xFFFF
   3049                msg += 2;
   3050                statOpt = *msg++;
   \                     ??CrossCallReturnLabel_468:
   \   000066   FC           MOV     R4,A
   \   000067   A3           INC     DPTR
   \   000068   AE82         MOV     R6,DPL
   \   00006A   AF83         MOV     R7,DPH
   3051                pList->status = (statOpt & 0x07);
   \   00006C   7407         MOV     A,#0x7
   \   00006E   5C           ANL     A,R4
   \   00006F   8882         MOV     DPL,R0
   \   000071   8983         MOV     DPH,R1
   \   000073   A3           INC     DPTR
   \   000074   A3           INC     DPTR
   \   000075   A3           INC     DPTR
   \   000076   A3           INC     DPTR
   \   000077   A3           INC     DPTR
   \   000078   F0           MOVX    @DPTR,A
   3052                pList->options = ((statOpt >> 3) & 0x07);
   \   000079   EC           MOV     A,R4
   \   00007A   13           RRC     A
   \   00007B   13           RRC     A
   \   00007C   13           RRC     A
   \   00007D   541F         ANL     A,#0x1f
   \   00007F   5407         ANL     A,#0x7
   \   000081   8882         MOV     DPL,R0
   \   000083   8983         MOV     DPH,R1
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   A3           INC     DPTR
   \   000088   A3           INC     DPTR
   \   000089   A3           INC     DPTR
   \   00008A   A3           INC     DPTR
   \   00008B   F0           MOVX    @DPTR,A
   3053                pList->nextHopAddress = BUILD_UINT16( msg[0], msg[1] );
   \   00008C   12....       LCALL   ?Subroutine66 & 0xFFFF
   \                     ??CrossCallReturnLabel_122:
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   F0           MOVX    @DPTR,A
   \   000092   A3           INC     DPTR
   \   000093   ED           MOV     A,R5
   \   000094   12....       LCALL   ?Subroutine106 & 0xFFFF
   3054                msg += 2;
   3055                pList++;
   \                     ??CrossCallReturnLabel_469:
   \   000097   E8           MOV     A,R0
   \   000098   2407         ADD     A,#0x7
   \   00009A   F8           MOV     R0,A
   \   00009B   E9           MOV     A,R1
   \   00009C   3400         ADDC    A,#0x0
   \   00009E   F9           MOV     R1,A
   3056              }
   \   00009F   05..         INC     ?V0 + 1
   \                     ??ZDO_ParseMgmtRtgRsp_2:
   \   0000A1   E5..         MOV     A,?V0 + 1
   \   0000A3   C3           CLR     C
   \   0000A4   95..         SUBB    A,?V0 + 0
   \   0000A6   40B5         JC      ??ZDO_ParseMgmtRtgRsp_3
   3057            }
   3058          
   3059            return ( pRsp );
   \                     ??ZDO_ParseMgmtRtgRsp_1:
   \   0000A8   02....       LJMP    ??Subroutine168_0 & 0xFFFF
   3060          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine66:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F5..         MOV     ?V0 + 2,A
   \   000007   A3           INC     DPTR
   \   000008   E0           MOVX    A,@DPTR
   \   000009   FD           MOV     R5,A
   \   00000A   E5..         MOV     A,?V0 + 2
   \   00000C   8882         MOV     DPL,R0
   \   00000E   8983         MOV     DPH,R1
   \   000010   22           RET
   3061          
   3062          /*********************************************************************
   3063           * @fn          ZDO_ParseMgmtBindRsp
   3064           *
   3065           * @brief       This function parses the incoming Management
   3066           *              Binding response.
   3067           *
   3068           * @param       inMsg - pointer to message to parse
   3069           *
   3070           * @return      a pointer to parsed response structure (NULL if not allocated).
   3071           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3072           *          by the calling function [osal_mem_free()].
   3073           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3074          ZDO_MgmtBindRsp_t *ZDO_ParseMgmtBindRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtBindRsp:
   3075          {
   \   000000   74EE         MOV     A,#-0x12
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 18
   \   000005                ; Auto size: 0
   3076            ZDO_MgmtBindRsp_t *pRsp;
   3077            uint8 status;
   3078            uint8 bindingCount = 0;
   \   000005   75..00       MOV     ?V0 + 6,#0x0
   3079            uint8 startIndex = 0;
   \   000008   75..00       MOV     ?V0 + 5,#0x0
   3080            uint8 bindingListCount = 0;
   \   00000B   75..00       MOV     ?V0 + 4,#0x0
   3081            uint8 *msg;
   3082          
   3083            msg = inMsg->asdu;
   \   00000E   12....       LCALL   ?Subroutine54 & 0xFFFF
   3084          
   3085            status = *msg++;
   3086            if ( status == ZSuccess )
   \                     ??CrossCallReturnLabel_101:
   \   000011   7003         JNZ     ??CrossCallReturnLabel_105
   3087            {
   3088              bindingCount = *msg++;
   \   000013   12....       LCALL   ?Subroutine56 & 0xFFFF
   3089              startIndex = *msg++;
   3090              bindingListCount = *msg++;
   3091            }
   3092          
   3093            // Allocate a buffer big enough to handle the list
   3094            pRsp = (ZDO_MgmtBindRsp_t *)osal_mem_alloc(
   3095                    (sizeof ( ZDO_MgmtBindRsp_t ) + (bindingListCount * sizeof( apsBindingItem_t ))) );
   \                     ??CrossCallReturnLabel_105:
   \   000016                ; Setup parameters for call to function osal_mem_alloc
   \   000016   E5..         MOV     A,?V0 + 4
   \   000018   75F015       MOV     B,#0x15
   \   00001B   12....       LCALL   ?Subroutine103 & 0xFFFF
   \                     ??CrossCallReturnLabel_170:
   \   00001E   12....       LCALL   ??osal_mem_alloc?relay
   \   000021   8A..         MOV     ?V0 + 0,R2
   \   000023   8B..         MOV     ?V0 + 1,R3
   3096            if ( pRsp )
   \   000025   EA           MOV     A,R2
   \   000026   45..         ORL     A,?V0 + 1
   \   000028   7003         JNZ     $+5
   \   00002A   02....       LJMP    ??ZDO_ParseMgmtBindRsp_0 & 0xFFFF
   3097            {
   3098              uint8 x;
   3099              apsBindingItem_t *pList = pRsp->list;
   \   00002D   EA           MOV     A,R2
   \   00002E   2404         ADD     A,#0x4
   \   000030   FE           MOV     R6,A
   \   000031   EB           MOV     A,R3
   \   000032   3400         ADDC    A,#0x0
   \   000034   FF           MOV     R7,A
   3100              pRsp->status = status;
   \   000035   12....       LCALL   ?Subroutine13 & 0xFFFF
   3101              pRsp->bindingCount = bindingCount;
   3102              pRsp->startIndex = startIndex;
   3103              pRsp->bindingListCount = bindingListCount;
   3104          
   3105              for ( x = 0; x < bindingListCount; x++ )
   \                     ??CrossCallReturnLabel_5:
   \   000038   75..00       MOV     ?V0 + 5,#0x0
   \   00003B   8010         SJMP    ??ZDO_ParseMgmtBindRsp_1
   3106              {
   3107                osal_cpyExtAddr( pList->srcAddr, msg );
   3108                msg += Z_EXTADDR_LEN;
   3109                pList->srcEP = *msg++;
   3110          
   3111                // Get the Cluster ID
   3112          
   3113                pList->clusterID = BUILD_UINT16( msg[0], msg[1] );
   3114                msg += 2;
   3115                pList->dstAddr.addrMode = *msg++;
   3116                if ( pList->dstAddr.addrMode == Addr64Bit )
   3117                {
   3118                  osal_cpyExtAddr( pList->dstAddr.addr.extAddr, msg );
   3119                  msg += Z_EXTADDR_LEN;
   3120                  pList->dstEP = *msg++;
   3121                }
   3122                else
   3123                {
   3124                  pList->dstAddr.addr.shortAddr = BUILD_UINT16( msg[0], msg[1] );
   \                     ??ZDO_ParseMgmtBindRsp_2:
   \   00003D   12....       LCALL   ?Subroutine72 & 0xFFFF
   3125                  msg += 2;
   3126                }
   \                     ??CrossCallReturnLabel_128:
   \   000040   12....       LCALL   ??Subroutine182_0 & 0xFFFF
   3127          
   3128                pList++;
   \                     ??CrossCallReturnLabel_450:
   \   000043   EE           MOV     A,R6
   \   000044   2415         ADD     A,#0x15
   \   000046   FE           MOV     R6,A
   \   000047   EF           MOV     A,R7
   \   000048   3400         ADDC    A,#0x0
   \   00004A   FF           MOV     R7,A
   \   00004B   05..         INC     ?V0 + 5
   \                     ??ZDO_ParseMgmtBindRsp_1:
   \   00004D   E5..         MOV     A,?V0 + 5
   \   00004F   C3           CLR     C
   \   000050   95..         SUBB    A,?V0 + 4
   \   000052   5066         JNC     ??ZDO_ParseMgmtBindRsp_0
   \   000054                ; Setup parameters for call to function sAddrExtCpy
   \   000054   AC..         MOV     R4,?V0 + 2
   \   000056   AD..         MOV     R5,?V0 + 3
   \   000058   EE           MOV     A,R6
   \   000059   FA           MOV     R2,A
   \   00005A   EF           MOV     A,R7
   \   00005B   FB           MOV     R3,A
   \   00005C   12....       LCALL   ??sAddrExtCpy?relay
   \   00005F   E5..         MOV     A,?V0 + 2
   \   000061   2408         ADD     A,#0x8
   \   000063   12....       LCALL   ?Subroutine99 & 0xFFFF
   \                     ??CrossCallReturnLabel_253:
   \   000066   85..82       MOV     DPL,?V0 + 2
   \   000069   12....       LCALL   ??Subroutine180_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_444:
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   A3           INC     DPTR
   \   00006F   A3           INC     DPTR
   \   000070   A3           INC     DPTR
   \   000071   A3           INC     DPTR
   \   000072   A3           INC     DPTR
   \   000073   A3           INC     DPTR
   \   000074   12....       LCALL   ?Subroutine18 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   000077   8E82         MOV     DPL,R6
   \   000079   8F83         MOV     DPH,R7
   \   00007B   A3           INC     DPTR
   \   00007C   A3           INC     DPTR
   \   00007D   A3           INC     DPTR
   \   00007E   A3           INC     DPTR
   \   00007F   A3           INC     DPTR
   \   000080   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_448:
   \   000083   85..82       MOV     DPL,?V0 + 2
   \   000086   F583         MOV     DPH,A
   \   000088   E0           MOVX    A,@DPTR
   \   000089   F8           MOV     R0,A
   \   00008A   12....       LCALL   ?Subroutine87 & 0xFFFF
   \                     ??CrossCallReturnLabel_154:
   \   00008D   E8           MOV     A,R0
   \   00008E   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000091   EE           MOV     A,R6
   \   000092   240B         ADD     A,#0xb
   \   000094   FA           MOV     R2,A
   \   000095   EF           MOV     A,R7
   \   000096   3400         ADDC    A,#0x0
   \   000098   FB           MOV     R3,A
   \   000099   7403         MOV     A,#0x3
   \   00009B   68           XRL     A,R0
   \   00009C   709F         JNZ     ??ZDO_ParseMgmtBindRsp_2
   \   00009E                ; Setup parameters for call to function sAddrExtCpy
   \   00009E   AC..         MOV     R4,?V0 + 2
   \   0000A0   AD..         MOV     R5,?V0 + 3
   \   0000A2   12....       LCALL   ??sAddrExtCpy?relay
   \   0000A5   12....       LCALL   ?Subroutine91 & 0xFFFF
   3129              }
   3130            }
   \                     ??CrossCallReturnLabel_369:
   \   0000A8   C0E0         PUSH    A
   \   0000AA   EE           MOV     A,R6
   \   0000AB   2414         ADD     A,#0x14
   \   0000AD   F582         MOV     DPL,A
   \   0000AF   EF           MOV     A,R7
   \   0000B0   12....       LCALL   ??Subroutine175_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_405:
   \   0000B3   D0E0         POP     A
   \   0000B5   12....       LCALL   ?Subroutine19 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   0000B8   8089         SJMP    ??CrossCallReturnLabel_450
   3131          
   3132            return ( pRsp );
   \                     ??ZDO_ParseMgmtBindRsp_0:
   \   0000BA   AA..         MOV     R2,?V0 + 0
   \   0000BC   AB..         MOV     R3,?V0 + 1
   \   0000BE   02....       LJMP    ?Subroutine6 & 0xFFFF
   3133          }
   3134          
   3135          /*********************************************************************
   3136           * @fn          ZDO_ParseUserDescRsp
   3137           *
   3138           * @brief       This function parses the incoming User
   3139           *              Descriptor Response.
   3140           *
   3141           * @param       inMsg - incoming response message
   3142           *
   3143           * @return      a pointer to parsed response structure (NULL if not allocated).
   3144           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3145           *          by the calling function [osal_mem_free()].
   3146           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3147          ZDO_UserDescRsp_t *ZDO_ParseUserDescRsp( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseUserDescRsp:
   3148          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   3149            ZDO_UserDescRsp_t *pRsp;
   3150            uint8 *msg;
   3151            uint8 descLen = 0;
   \   000005   75..00       MOV     ?V0 + 4,#0x0
   3152          
   3153            msg = inMsg->asdu;
   \   000008   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_158:
   \   00000B   12....       LCALL   ??Subroutine161_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_322:
   \   00000E   88..         MOV     ?V0 + 2,R0
   \   000010   89..         MOV     ?V0 + 3,R1
   3154          
   3155            if ( msg[0] == ZSuccess )
   \   000012   8882         MOV     DPL,R0
   \   000014   F583         MOV     DPH,A
   \   000016   E0           MOVX    A,@DPTR
   \   000017   7006         JNZ     ??ZDO_ParseUserDescRsp_0
   3156            {
   3157              descLen = msg[3];
   \   000019   A3           INC     DPTR
   \   00001A   A3           INC     DPTR
   \   00001B   A3           INC     DPTR
   \   00001C   E0           MOVX    A,@DPTR
   \   00001D   F5..         MOV     ?V0 + 4,A
   3158            }
   3159          
   3160            pRsp = (ZDO_UserDescRsp_t *)osal_mem_alloc( sizeof ( ZDO_UserDescRsp_t ) + descLen );
   \                     ??ZDO_ParseUserDescRsp_0:
   \   00001F   85..82       MOV     DPL,?V0 + 4
   \   000022   8582..       MOV     ?V0 + 0,DPL
   \   000025                ; Setup parameters for call to function osal_mem_alloc
   \   000025   E5..         MOV     A,?V0 + 0
   \   000027   2404         ADD     A,#0x4
   \   000029   FA           MOV     R2,A
   \   00002A   E4           CLR     A
   \   00002B   3400         ADDC    A,#0x0
   \   00002D   FB           MOV     R3,A
   \   00002E   12....       LCALL   ??osal_mem_alloc?relay
   \   000031   8A..         MOV     ?V0 + 6,R2
   \   000033   8B..         MOV     ?V0 + 7,R3
   \   000035   AE..         MOV     R6,?V0 + 6
   \   000037   AF..         MOV     R7,?V0 + 7
   3161            if ( pRsp )
   \   000039   EE           MOV     A,R6
   \   00003A   4F           ORL     A,R7
   \   00003B   603B         JZ      ??ZDO_ParseUserDescRsp_1
   3162            {
   3163              pRsp->status = msg[0];
   \   00003D   85..82       MOV     DPL,?V0 + 2
   \   000040   85..83       MOV     DPH,?V0 + 3
   \   000043   12....       LCALL   ??Subroutine181_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_443:
   \   000046   12....       LCALL   ?Subroutine135 & 0xFFFF
   3164              pRsp->nwkAddr = BUILD_UINT16( msg[1], msg[2] );
   \                     ??CrossCallReturnLabel_222:
   \   000049   12....       LCALL   ?Subroutine80 & 0xFFFF
   \                     ??CrossCallReturnLabel_145:
   \   00004C   12....       LCALL   ?Subroutine21 & 0xFFFF
   3165              pRsp->length = descLen;
   3166              if ( descLen )
   \                     ??CrossCallReturnLabel_423:
   \   00004F   6027         JZ      ??ZDO_ParseUserDescRsp_1
   3167              {
   3168                osal_memcpy( pRsp->desc, &msg[4], descLen );
   \   000051                ; Setup parameters for call to function osal_memcpy
   \   000051   E5..         MOV     A,?V0 + 2
   \   000053   2404         ADD     A,#0x4
   \   000055   F5..         MOV     ?V0 + 4,A
   \   000057   E5..         MOV     A,?V0 + 3
   \   000059   3400         ADDC    A,#0x0
   \   00005B   F5..         MOV     ?V0 + 5,A
   \   00005D   88..         MOV     ?V0 + 6,R0
   \   00005F   78..         MOV     R0,#?V0 + 4
   \   000061   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000064   AC..         MOV     R4,?V0 + 0
   \   000066   7D00         MOV     R5,#0x0
   \   000068   EE           MOV     A,R6
   \   000069   2404         ADD     A,#0x4
   \   00006B   FA           MOV     R2,A
   \   00006C   EF           MOV     A,R7
   \   00006D   3400         ADDC    A,#0x0
   \   00006F   FB           MOV     R3,A
   \   000070   12....       LCALL   ??osal_memcpy?relay
   \   000073   7403         MOV     A,#0x3
   \   000075   12....       LCALL   ?DEALLOC_XSTACK8
   3169              }
   3170            }
   3171          
   3172            return ( pRsp );
   \                     ??ZDO_ParseUserDescRsp_1:
   \   000078   02....       LJMP    ?Subroutine5 & 0xFFFF
   3173          }
   3174          
   3175          /*********************************************************************
   3176           * @fn          ZDO_ParseSimpleDescBuf
   3177           *
   3178           * @brief       Parse a byte sequence representation of a Simple Descriptor.
   3179           *
   3180           * @param       buf  - pointer to a byte array representing a Simple Desc.
   3181           * @param       desc - SimpleDescriptionFormat_t *
   3182           *
   3183           *              This routine allocates storage for the cluster IDs because
   3184           *              they are 16-bit and need to be aligned to be properly processed.
   3185           *              This routine returns non-zero if an allocation fails.
   3186           *
   3187           *              NOTE: This means that the caller or user of the input structure
   3188           *                    is responsible for freeing the memory
   3189           *
   3190           * @return      0: success
   3191           *              1: failure due to malloc failure.
   3192           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3193          uint8 ZDO_ParseSimpleDescBuf( uint8 *buf, SimpleDescriptionFormat_t *desc )
   \                     ZDO_ParseSimpleDescBuf:
   3194          {
   \   000000   74F0         MOV     A,#-0x10
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 16
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
   \   000009   8C..         MOV     ?V0 + 0,R4
   \   00000B   8D..         MOV     ?V0 + 1,R5
   3195            uint8 num, i;
   3196          
   3197            desc->EndPoint = *buf++;
   \   00000D   8E82         MOV     DPL,R6
   \   00000F   8F83         MOV     DPH,R7
   \   000011   12....       LCALL   ?Subroutine138 & 0xFFFF
   \                     ??CrossCallReturnLabel_230:
   \   000014   12....       LCALL   ?Subroutine26 & 0xFFFF
   3198            desc->AppProfId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_36:
   \   000017   8C82         MOV     DPL,R4
   \   000019   8D83         MOV     DPH,R5
   \   00001B   12....       LCALL   ??Subroutine185_0 & 0xFFFF
   3199            buf += 2;
   3200            desc->AppDeviceId = BUILD_UINT16( buf[0], buf[1] );
   \                     ??CrossCallReturnLabel_467:
   \   00001E   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_463:
   \   000021   12....       LCALL   ?Subroutine10 & 0xFFFF
   3201            buf += 2;
   3202            desc->AppDevVer = *buf >> 4;
   \                     ??CrossCallReturnLabel_466:
   \   000024   C4           SWAP    A
   \   000025   540F         ANL     A,#0xf
   3203          
   3204            desc->Reserved = 0;
   \   000027   8C82         MOV     DPL,R4
   \   000029   8D83         MOV     DPH,R5
   \   00002B   A3           INC     DPTR
   \   00002C   A3           INC     DPTR
   \   00002D   A3           INC     DPTR
   \   00002E   A3           INC     DPTR
   \   00002F   A3           INC     DPTR
   \   000030   12....       LCALL   ?Subroutine43 & 0xFFFF
   3205            buf++;
   3206          
   3207            // move in input cluster list (if any). allocate aligned memory.
   3208            num = desc->AppNumInClusters = *buf++;
   \                     ??CrossCallReturnLabel_81:
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F5..         MOV     ?V0 + 4,A
   \   000036   A3           INC     DPTR
   \   000037   0E           INC     R6
   \   000038   0E           INC     R6
   \   000039   AF83         MOV     R7,DPH
   \   00003B   8C82         MOV     DPL,R4
   \   00003D   8D83         MOV     DPH,R5
   \   00003F   A3           INC     DPTR
   \   000040   A3           INC     DPTR
   \   000041   A3           INC     DPTR
   \   000042   A3           INC     DPTR
   \   000043   A3           INC     DPTR
   \   000044   A3           INC     DPTR
   \   000045   F0           MOVX    @DPTR,A
   3209            if ( num )
   \   000046   EC           MOV     A,R4
   \   000047   2407         ADD     A,#0x7
   \   000049   F5..         MOV     ?V0 + 2,A
   \   00004B   ED           MOV     A,R5
   \   00004C   12....       LCALL   ??Subroutine147_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_249:
   \   00004F   E5..         MOV     A,?V0 + 4
   \   000051   6053         JZ      ??ZDO_ParseSimpleDescBuf_0
   3210            {
   3211              if (!(desc->pAppInClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   000053                ; Setup parameters for call to function osal_mem_alloc
   \   000053   C3           CLR     C
   \   000054   33           RLC     A
   \   000055   FA           MOV     R2,A
   \   000056   E4           CLR     A
   \   000057   33           RLC     A
   \   000058   FB           MOV     R3,A
   \   000059   12....       LCALL   ??osal_mem_alloc?relay
   \   00005C   85..82       MOV     DPL,?V0 + 2
   \   00005F   85..83       MOV     DPH,?V0 + 3
   \   000062   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_54:
   \   000065   85..82       MOV     DPL,?V0 + 2
   \   000068   85..83       MOV     DPH,?V0 + 3
   \   00006B   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_356:
   \   00006E   7003         JNZ     $+5
   \   000070   02....       LJMP    ??ZDO_ParseSimpleDescBuf_1 & 0xFFFF
   3212              {
   3213                // malloc failed. we're done.
   3214                return 1;
   3215              }
   3216              for (i=0; i<num; ++i)
   \   000073   7C00         MOV     R4,#0x0
   \   000075   8029         SJMP    ??CrossCallReturnLabel_69
   3217              {
   3218                desc->pAppInClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_2:
   \   000077   8E82         MOV     DPL,R6
   \   000079   8F83         MOV     DPH,R7
   \   00007B   E0           MOVX    A,@DPTR
   \   00007C   F5..         MOV     ?V0 + 6,A
   \   00007E   A3           INC     DPTR
   \   00007F   E0           MOVX    A,@DPTR
   \   000080   FB           MOV     R3,A
   \   000081   E5..         MOV     A,?V0 + 6
   \   000083   2400         ADD     A,#0x0
   \   000085   E4           CLR     A
   \   000086   3B           ADDC    A,R3
   \   000087   F5..         MOV     ?V0 + 7,A
   \   000089   EC           MOV     A,R4
   \   00008A   33           RLC     A
   \   00008B   FA           MOV     R2,A
   \   00008C   E4           CLR     A
   \   00008D   33           RLC     A
   \   00008E   FB           MOV     R3,A
   \   00008F   E8           MOV     A,R0
   \   000090   2A           ADD     A,R2
   \   000091   F582         MOV     DPL,A
   \   000093   E9           MOV     A,R1
   \   000094   3B           ADDC    A,R3
   \   000095   F583         MOV     DPH,A
   \   000097   E5..         MOV     A,?V0 + 6
   \   000099   F0           MOVX    @DPTR,A
   \   00009A   A3           INC     DPTR
   \   00009B   E5..         MOV     A,?V0 + 7
   \   00009D   12....       LCALL   ?Subroutine39 & 0xFFFF
   3219                buf += 2;
   3220              }
   \                     ??CrossCallReturnLabel_69:
   \   0000A0   EC           MOV     A,R4
   \   0000A1   C3           CLR     C
   \   0000A2   95..         SUBB    A,?V0 + 4
   \   0000A4   40D1         JC      ??ZDO_ParseSimpleDescBuf_2
   3221            }
   3222          
   3223            // move in output cluster list (if any). allocate aligned memory.
   3224            num = desc->AppNumOutClusters = *buf++;
   \                     ??ZDO_ParseSimpleDescBuf_0:
   \   0000A6   8E82         MOV     DPL,R6
   \   0000A8   8F83         MOV     DPH,R7
   \   0000AA   E0           MOVX    A,@DPTR
   \   0000AB   F5..         MOV     ?V0 + 4,A
   \   0000AD   A3           INC     DPTR
   \   0000AE   AE82         MOV     R6,DPL
   \   0000B0   AF83         MOV     R7,DPH
   \   0000B2   85..82       MOV     DPL,?V0 + 0
   \   0000B5   85..83       MOV     DPH,?V0 + 1
   \   0000B8   A3           INC     DPTR
   \   0000B9   A3           INC     DPTR
   \   0000BA   A3           INC     DPTR
   \   0000BB   A3           INC     DPTR
   \   0000BC   A3           INC     DPTR
   \   0000BD   A3           INC     DPTR
   \   0000BE   A3           INC     DPTR
   \   0000BF   A3           INC     DPTR
   \   0000C0   A3           INC     DPTR
   \   0000C1   F0           MOVX    @DPTR,A
   3225            if (num)
   \   0000C2   607A         JZ      ??ZDO_ParseSimpleDescBuf_3
   3226            {
   3227              if (!(desc->pAppOutClusterList = (uint16 *)osal_mem_alloc(num*sizeof(uint16))))
   \   0000C4   E5..         MOV     A,?V0 + 0
   \   0000C6   240A         ADD     A,#0xa
   \   0000C8   F8           MOV     R0,A
   \   0000C9   E5..         MOV     A,?V0 + 1
   \   0000CB   3400         ADDC    A,#0x0
   \   0000CD   F9           MOV     R1,A
   \   0000CE   88..         MOV     ?V0 + 0,R0
   \   0000D0   89..         MOV     ?V0 + 1,R1
   \   0000D2                ; Setup parameters for call to function osal_mem_alloc
   \   0000D2   E5..         MOV     A,?V0 + 4
   \   0000D4   C3           CLR     C
   \   0000D5   33           RLC     A
   \   0000D6   FA           MOV     R2,A
   \   0000D7   E4           CLR     A
   \   0000D8   33           RLC     A
   \   0000D9   FB           MOV     R3,A
   \   0000DA   12....       LCALL   ??osal_mem_alloc?relay
   \   0000DD   85..82       MOV     DPL,?V0 + 0
   \   0000E0   85..83       MOV     DPH,?V0 + 1
   \   0000E3   12....       LCALL   ?Subroutine31 & 0xFFFF
   \                     ??CrossCallReturnLabel_55:
   \   0000E6   85..82       MOV     DPL,?V0 + 0
   \   0000E9   85..83       MOV     DPH,?V0 + 1
   \   0000EC   12....       LCALL   ??Subroutine166_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_357:
   \   0000EF   701C         JNZ     ??ZDO_ParseSimpleDescBuf_4
   3228              {
   3229                // malloc failed. free input cluster list memory if there is any
   3230                if ( desc->pAppInClusterList != NULL )
   \   0000F1   85..82       MOV     DPL,?V0 + 2
   \   0000F4   85..83       MOV     DPH,?V0 + 3
   \   0000F7   12....       LCALL   ??Subroutine155_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_293:
   \   0000FA   600D         JZ      ??ZDO_ParseSimpleDescBuf_1
   3231                {
   3232                  osal_mem_free(desc->pAppInClusterList);
   \   0000FC                ; Setup parameters for call to function osal_mem_free
   \   0000FC   12....       LCALL   ??osal_mem_free?relay
   3233          
   3234                  desc->pAppInClusterList = NULL;
   \   0000FF   85..82       MOV     DPL,?V0 + 2
   \   000102   85..83       MOV     DPH,?V0 + 3
   \   000105   E4           CLR     A
   \   000106   F0           MOVX    @DPTR,A
   \   000107   A3           INC     DPTR
   \   000108   F0           MOVX    @DPTR,A
   3235                }
   3236                return 1;
   \                     ??ZDO_ParseSimpleDescBuf_1:
   \   000109   7901         MOV     R1,#0x1
   \   00010B   8033         SJMP    ??ZDO_ParseSimpleDescBuf_5
   3237              }
   3238              for (i=0; i<num; ++i)
   \                     ??ZDO_ParseSimpleDescBuf_4:
   \   00010D   7C00         MOV     R4,#0x0
   \   00010F   8027         SJMP    ??CrossCallReturnLabel_70
   3239              {
   3240                desc->pAppOutClusterList[i] = BUILD_UINT16( buf[0], buf[1] );
   \                     ??ZDO_ParseSimpleDescBuf_6:
   \   000111   8E82         MOV     DPL,R6
   \   000113   8F83         MOV     DPH,R7
   \   000115   12....       LCALL   ?Subroutine76 & 0xFFFF
   3241                buf += 2;
   3242              }
   \                     ??CrossCallReturnLabel_139:
   \   000118   FB           MOV     R3,A
   \   000119   E5..         MOV     A,?V0 + 0
   \   00011B   2400         ADD     A,#0x0
   \   00011D   E4           CLR     A
   \   00011E   3B           ADDC    A,R3
   \   00011F   F5..         MOV     ?V0 + 1,A
   \   000121   EC           MOV     A,R4
   \   000122   33           RLC     A
   \   000123   FA           MOV     R2,A
   \   000124   E4           CLR     A
   \   000125   33           RLC     A
   \   000126   FB           MOV     R3,A
   \   000127   E8           MOV     A,R0
   \   000128   2A           ADD     A,R2
   \   000129   F582         MOV     DPL,A
   \   00012B   E9           MOV     A,R1
   \   00012C   3B           ADDC    A,R3
   \   00012D   F583         MOV     DPH,A
   \   00012F   E5..         MOV     A,?V0 + 0
   \   000131   F0           MOVX    @DPTR,A
   \   000132   A3           INC     DPTR
   \   000133   E5..         MOV     A,?V0 + 1
   \   000135   12....       LCALL   ?Subroutine39 & 0xFFFF
   \                     ??CrossCallReturnLabel_70:
   \   000138   EC           MOV     A,R4
   \   000139   C3           CLR     C
   \   00013A   95..         SUBB    A,?V0 + 4
   \   00013C   40D3         JC      ??ZDO_ParseSimpleDescBuf_6
   3243            }
   3244            return 0;
   \                     ??ZDO_ParseSimpleDescBuf_3:
   \   00013E   7900         MOV     R1,#0x0
   \                     ??ZDO_ParseSimpleDescBuf_5:
   \   000140   02....       LJMP    ??Subroutine165_0 & 0xFFFF
   3245          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine67:
   \   000000   FA           MOV     R2,A
   \   000001                REQUIRE ??Subroutine184_0
   \   000001                ; // Fall through to label ??Subroutine184_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine39:
   \   000000   12....       LCALL   ?Subroutine106 & 0xFFFF
   \                     ??CrossCallReturnLabel_470:
   \   000003   0C           INC     R4
   \   000004   22           RET
   3246          
   3247          /*********************************************************************
   3248           * @fn          ZDO_ParseDeviceAnnce
   3249           *
   3250           * @brief       Parse a Device Announce message.
   3251           *
   3252           * @param       inMsg - Incoming message
   3253           * @param       pAnnce - place to put the parsed information
   3254           *
   3255           * @return      none
   3256           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3257          void ZDO_ParseDeviceAnnce( zdoIncomingMsg_t *inMsg, ZDO_DeviceAnnce_t *pAnnce )
   \                     ZDO_ParseDeviceAnnce:
   3258          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   3259            uint8 *msg;
   3260          
   3261            // Parse incoming message
   3262            msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine89 & 0xFFFF
   \                     ??CrossCallReturnLabel_159:
   \   00000C   12....       LCALL   ?Subroutine83 & 0xFFFF
   \                     ??CrossCallReturnLabel_147:
   \   00000F   FF           MOV     R7,A
   3263            pAnnce->nwkAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000010   8E82         MOV     DPL,R6
   \   000012   8F83         MOV     DPH,R7
   \   000014   E0           MOVX    A,@DPTR
   \   000015   12....       LCALL   ?Subroutine67 & 0xFFFF
   \                     ??CrossCallReturnLabel_464:
   \   000018   12....       LCALL   ?Subroutine32 & 0xFFFF
   3264            msg += 2;
   3265            osal_cpyExtAddr( pAnnce->extAddr, msg );
   \                     ??CrossCallReturnLabel_57:
   \   00001B                ; Setup parameters for call to function sAddrExtCpy
   \   00001B   EE           MOV     A,R6
   \   00001C   FC           MOV     R4,A
   \   00001D   EF           MOV     A,R7
   \   00001E   FD           MOV     R5,A
   \   00001F   E5..         MOV     A,?V0 + 0
   \   000021   2402         ADD     A,#0x2
   \   000023   FA           MOV     R2,A
   \   000024   E5..         MOV     A,?V0 + 1
   \   000026   3400         ADDC    A,#0x0
   \   000028   FB           MOV     R3,A
   \   000029   12....       LCALL   ??sAddrExtCpy?relay
   3266            msg += Z_EXTADDR_LEN;
   3267            pAnnce->capabilities = *msg;
   \   00002C   8E82         MOV     DPL,R6
   \   00002E   8F83         MOV     DPH,R7
   \   000030   A3           INC     DPTR
   \   000031   A3           INC     DPTR
   \   000032   A3           INC     DPTR
   \   000033   A3           INC     DPTR
   \   000034   A3           INC     DPTR
   \   000035   A3           INC     DPTR
   \   000036   A3           INC     DPTR
   \   000037   A3           INC     DPTR
   \   000038   12....       LCALL   ?Subroutine58 & 0xFFFF
   \                     ??CrossCallReturnLabel_109:
   \   00003B   F0           MOVX    @DPTR,A
   3268          }
   \   00003C   02....       LJMP    ??Subroutine144_0 & 0xFFFF
   3269          
   3270          /*********************************************************************
   3271           * @fn          ZDO_ParseMgmtNwkUpdateNotify
   3272           *
   3273           * @brief       This function handles parsing of the incoming Management
   3274           *              Network Update notify.
   3275           *
   3276           * @param       inMsg - incoming message (request)
   3277           *
   3278           * @return      a pointer to parsed response structure (NULL if not allocated).
   3279           *          This structure was allocated using osal_mem_alloc, so it must be freed
   3280           *          by the calling function [osal_mem_free()].
   3281           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3282          ZDO_MgmtNwkUpdateNotify_t *ZDO_ParseMgmtNwkUpdateNotify( zdoIncomingMsg_t *inMsg )
   \                     ZDO_ParseMgmtNwkUpdateNotify:
   3283          {
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   3284            uint8 status;
   3285            uint32 scannedChannels = 0;
   \   000005   75..00       MOV     ?V0 + 4,#0x0
   \   000008   75..00       MOV     ?V0 + 5,#0x0
   \   00000B   75..00       MOV     ?V0 + 6,#0x0
   \   00000E   75..00       MOV     ?V0 + 7,#0x0
   3286            uint16 totalTransmissions = 0;
   \   000011   75..00       MOV     ?V0 + 0,#0x0
   \   000014   75..00       MOV     ?V0 + 1,#0x0
   3287            uint16 transmissionFailures = 0;
   \   000017   75..00       MOV     ?V0 + 2,#0x0
   \   00001A   75..00       MOV     ?V0 + 3,#0x0
   3288            uint8 listCount = 0;
   \   00001D   75..00       MOV     ?V0 + 10,#0x0
   3289            uint8 *msg = inMsg->asdu;
   \   000020   12....       LCALL   ?Subroutine52 & 0xFFFF
   3290            ZDO_MgmtNwkUpdateNotify_t *pRsp;
   3291          
   3292            status = *msg++;
   \                     ??CrossCallReturnLabel_437:
   \   000023   F5..         MOV     ?V0 + 11,A
   \   000025   A3           INC     DPTR
   \   000026   AE82         MOV     R6,DPL
   \   000028   AF83         MOV     R7,DPH
   3293            if ( status == ZSuccess )
   \   00002A   7035         JNZ     ??ZDO_ParseMgmtNwkUpdateNotify_0
   3294            {
   3295              scannedChannels = osal_build_uint32( msg, 4 );
   \   00002C                ; Setup parameters for call to function osal_build_uint32
   \   00002C   7904         MOV     R1,#0x4
   \   00002E   EE           MOV     A,R6
   \   00002F   FA           MOV     R2,A
   \   000030   EF           MOV     A,R7
   \   000031   FB           MOV     R3,A
   \   000032   12....       LCALL   ??osal_build_uint32?relay
   \   000035   8A..         MOV     ?V0 + 4,R2
   \   000037   8B..         MOV     ?V0 + 5,R3
   \   000039   8C..         MOV     ?V0 + 6,R4
   \   00003B   8D..         MOV     ?V0 + 7,R5
   3296              msg += 4;
   \   00003D   EE           MOV     A,R6
   \   00003E   2404         ADD     A,#0x4
   \   000040   12....       LCALL   ?Subroutine86 & 0xFFFF
   3297              totalTransmissions = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_150:
   \   000043   F5..         MOV     ?V0 + 0,A
   \   000045   E4           CLR     A
   \   000046   39           ADDC    A,R1
   \   000047   F5..         MOV     ?V0 + 1,A
   3298              msg += 2;
   \   000049   EE           MOV     A,R6
   \   00004A   2402         ADD     A,#0x2
   \   00004C   12....       LCALL   ?Subroutine86 & 0xFFFF
   3299              transmissionFailures = BUILD_UINT16( msg[0], msg[1] );
   \                     ??CrossCallReturnLabel_151:
   \   00004F   F5..         MOV     ?V0 + 2,A
   \   000051   E4           CLR     A
   \   000052   39           ADDC    A,R1
   \   000053   F5..         MOV     ?V0 + 3,A
   3300              msg += 2;
   \   000055   EE           MOV     A,R6
   \   000056   2402         ADD     A,#0x2
   \   000058   12....       LCALL   ??Subroutine160_0 & 0xFFFF
   3301              listCount = *msg++;
   3302            }
   \                     ??CrossCallReturnLabel_313:
   \   00005B   F5..         MOV     ?V0 + 10,A
   \   00005D   A3           INC     DPTR
   \   00005E   0E           INC     R6
   \   00005F   AF83         MOV     R7,DPH
   3303          
   3304            pRsp = (ZDO_MgmtNwkUpdateNotify_t *)osal_mem_alloc( sizeof ( ZDO_MgmtNwkUpdateNotify_t ) + listCount );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_0:
   \   000061   85..82       MOV     DPL,?V0 + 10
   \   000064   8582..       MOV     ?V0 + 8,DPL
   \   000067                ; Setup parameters for call to function osal_mem_alloc
   \   000067   E5..         MOV     A,?V0 + 8
   \   000069   240A         ADD     A,#0xa
   \   00006B   FA           MOV     R2,A
   \   00006C   E4           CLR     A
   \   00006D   3400         ADDC    A,#0x0
   \   00006F   FB           MOV     R3,A
   \   000070   12....       LCALL   ??osal_mem_alloc?relay
   \   000073   8A..         MOV     ?V0 + 14,R2
   \   000075   8B..         MOV     ?V0 + 15,R3
   3305          
   3306            if ( pRsp )
   \   000077   EA           MOV     A,R2
   \   000078   45..         ORL     A,?V0 + 15
   \   00007A   604F         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_1
   3307            {
   3308              pRsp->status = status;
   \   00007C   8A82         MOV     DPL,R2
   \   00007E   8B83         MOV     DPH,R3
   \   000080   E5..         MOV     A,?V0 + 11
   \   000082   F0           MOVX    @DPTR,A
   3309              pRsp->scannedChannels = scannedChannels;
   \   000083   A3           INC     DPTR
   \   000084   78..         MOV     R0,#?V0 + 4
   \   000086   12....       LCALL   ?L_MOV_TO_X
   3310              pRsp->totalTransmissions = totalTransmissions;
   \   000089   8A82         MOV     DPL,R2
   \   00008B   8B83         MOV     DPH,R3
   \   00008D   A3           INC     DPTR
   \   00008E   A3           INC     DPTR
   \   00008F   A3           INC     DPTR
   \   000090   A3           INC     DPTR
   \   000091   A3           INC     DPTR
   \   000092   E5..         MOV     A,?V0 + 0
   \   000094   F0           MOVX    @DPTR,A
   \   000095   A3           INC     DPTR
   \   000096   E5..         MOV     A,?V0 + 1
   \   000098   12....       LCALL   ?Subroutine16 & 0xFFFF
   3311              pRsp->transmissionFailures = transmissionFailures;
   \                     ??CrossCallReturnLabel_17:
   \   00009B   E5..         MOV     A,?V0 + 2
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   A3           INC     DPTR
   \   00009F   E5..         MOV     A,?V0 + 3
   \   0000A1   12....       LCALL   ?Subroutine16 & 0xFFFF
   3312              pRsp->listCount = listCount;
   \                     ??CrossCallReturnLabel_18:
   \   0000A4   A3           INC     DPTR
   \   0000A5   A3           INC     DPTR
   \   0000A6   E5..         MOV     A,?V0 + 10
   \   0000A8   F0           MOVX    @DPTR,A
   3313          
   3314              // Allocate a buffer big enough to handle the list.
   3315              if ( listCount > 0 )
   \   0000A9   6020         JZ      ??ZDO_ParseMgmtNwkUpdateNotify_1
   3316              {
   3317                osal_memcpy( pRsp->energyValues, msg, listCount );
   \   0000AB                ; Setup parameters for call to function osal_memcpy
   \   0000AB   8E..         MOV     ?V0 + 0,R6
   \   0000AD   8F..         MOV     ?V0 + 1,R7
   \   0000AF   75..00       MOV     ?V0 + 2,#0x0
   \   0000B2   78..         MOV     R0,#?V0 + 0
   \   0000B4   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B7   AC..         MOV     R4,?V0 + 8
   \   0000B9   7D00         MOV     R5,#0x0
   \   0000BB   EA           MOV     A,R2
   \   0000BC   240A         ADD     A,#0xa
   \   0000BE   FA           MOV     R2,A
   \   0000BF   EB           MOV     A,R3
   \   0000C0   3400         ADDC    A,#0x0
   \   0000C2   FB           MOV     R3,A
   \   0000C3   12....       LCALL   ??osal_memcpy?relay
   \   0000C6   7403         MOV     A,#0x3
   \   0000C8   12....       LCALL   ?DEALLOC_XSTACK8
   3318              }
   3319            }
   3320          
   3321            return ( pRsp );
   \                     ??ZDO_ParseMgmtNwkUpdateNotify_1:
   \   0000CB   AA..         MOV     R2,?V0 + 14
   \   0000CD   AB..         MOV     R3,?V0 + 15
   \   0000CF   02....       LJMP    ??Subroutine157_0 & 0xFFFF
   3322          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine86:
   \   000000   12....       LCALL   ?Subroutine129 & 0xFFFF
   \                     ??CrossCallReturnLabel_377:
   \   000003   12....       LCALL   ?Subroutine119 & 0xFFFF
   \                     ??CrossCallReturnLabel_207:
   \   000006   2400         ADD     A,#0x0
   \   000008   22           RET
   3323          
   3324          /*********************************************************************
   3325           * @fn          ZDO_ParseMgmtNwkUpdateReq
   3326           *
   3327           * @brief       This function handles parsing the incoming Management
   3328           *              Network Update request and starts the request (if needed).
   3329           *
   3330           * @param       inMsg - incoming message (request)
   3331           * @param       pReq - pointer to place to parse message to
   3332           *
   3333           * @return      none
   3334           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3335          void ZDO_ParseMgmtNwkUpdateReq( zdoIncomingMsg_t *inMsg, ZDO_MgmtNwkUpdateReq_t *pReq )
   \                     ZDO_ParseMgmtNwkUpdateReq:
   3336          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   8C..         MOV     ?V0 + 0,R4
   \   000007   8D..         MOV     ?V0 + 1,R5
   3337            uint8 *msg = inMsg->asdu;
   \   000009   12....       LCALL   ?Subroutine68 & 0xFFFF
   3338          
   3339            pReq->channelMask = osal_build_uint32( msg, 4 );
   \                     ??CrossCallReturnLabel_124:
   \   00000C   12....       LCALL   ??osal_build_uint32?relay
   \   00000F   85..82       MOV     DPL,?V0 + 0
   \   000012   85..83       MOV     DPH,?V0 + 1
   \   000015   12....       LCALL   ?XSTORE_R2345
   3340            msg += 4;
   \   000018   12....       LCALL   ?Subroutine94 & 0xFFFF
   3341            pReq->scanDuration = *msg++;
   \                     ??CrossCallReturnLabel_312:
   \   00001B   FA           MOV     R2,A
   \   00001C   E5..         MOV     A,?V0 + 0
   \   00001E   2404         ADD     A,#0x4
   \   000020   F8           MOV     R0,A
   \   000021   E5..         MOV     A,?V0 + 1
   \   000023   3400         ADDC    A,#0x0
   \   000025   F9           MOV     R1,A
   \   000026   EA           MOV     A,R2
   \   000027   8882         MOV     DPL,R0
   \   000029   8983         MOV     DPH,R1
   \   00002B   12....       LCALL   ?Subroutine27 & 0xFFFF
   3342          
   3343            if ( pReq->scanDuration <= 0x05 )
   \                     ??CrossCallReturnLabel_39:
   \   00002E   C3           CLR     C
   \   00002F   9406         SUBB    A,#0x6
   \   000031   5005         JNC     ??ZDO_ParseMgmtNwkUpdateReq_0
   3344            {
   3345              // Request is to scan over channelMask
   3346              pReq->scanCount = *msg;
   \   000033   12....       LCALL   ?Subroutine136 & 0xFFFF
   3347            }
   \                     ??CrossCallReturnLabel_224:
   \   000036   801E         SJMP    ??ZDO_ParseMgmtNwkUpdateReq_1
   3348            else if ( ( pReq->scanDuration == 0xFE ) || ( pReq->scanDuration == 0xFF ) )
   \                     ??ZDO_ParseMgmtNwkUpdateReq_0:
   \   000038   74FE         MOV     A,#-0x2
   \   00003A   6A           XRL     A,R2
   \   00003B   6005         JZ      ??ZDO_ParseMgmtNwkUpdateReq_2
   \   00003D   74FF         MOV     A,#-0x1
   \   00003F   6A           XRL     A,R2
   \   000040   7015         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3349            {
   3350              // Request is to change Channel (0xFE) or apsChannelMask and NwkManagerAddr (0xFF)
   3351              pReq->nwkUpdateId = *msg++;
   \                     ??ZDO_ParseMgmtNwkUpdateReq_2:
   \   000042   12....       LCALL   ?Subroutine62 & 0xFFFF
   \                     ??CrossCallReturnLabel_116:
   \   000045   12....       LCALL   ?Subroutine42 & 0xFFFF
   3352          
   3353              if ( pReq->scanDuration == 0xFF )
   \                     ??CrossCallReturnLabel_78:
   \   000048   8882         MOV     DPL,R0
   \   00004A   8983         MOV     DPH,R1
   \   00004C   E0           MOVX    A,@DPTR
   \   00004D   F4           CPL     A
   \   00004E   7007         JNZ     ??ZDO_ParseMgmtNwkUpdateReq_3
   3354              {
   3355                pReq->nwkManagerAddr = BUILD_UINT16( msg[0], msg[1] );
   \   000050   12....       LCALL   ?Subroutine55 & 0xFFFF
   3356              }
   3357            }
   \                     ??CrossCallReturnLabel_103:
   \   000053   F0           MOVX    @DPTR,A
   \   000054   A3           INC     DPTR
   \   000055   E9           MOV     A,R1
   \                     ??ZDO_ParseMgmtNwkUpdateReq_1:
   \   000056   F0           MOVX    @DPTR,A
   3358          }
   \                     ??ZDO_ParseMgmtNwkUpdateReq_3:
   \   000057   02....       LJMP    ??Subroutine144_0 & 0xFFFF
   3359          
   3360          /*********************************************************************
   3361           * @fn          ZDO_ParseEndDeviceTimeoutRsp
   3362           *
   3363           * @brief       Parse the End_Device_Timeout_rsp message.
   3364           *
   3365           * @param       inMsg - incoming message.
   3366           * @param       pRsp - place to put the parsed information.
   3367           *
   3368           * @return      none
   3369           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   3370          void ZDO_ParseEndDeviceTimeoutRsp( zdoIncomingMsg_t *inMsg, uint16 *pRsp )
   \                     ZDO_ParseEndDeviceTimeoutRsp:
   3371          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   3372            *pRsp = inMsg->asdu[0];
   \   000004   12....       LCALL   ?Subroutine61 & 0xFFFF
   \                     ??CrossCallReturnLabel_344:
   \   000007   8C82         MOV     DPL,R4
   \   000009   8D83         MOV     DPH,R5
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   A3           INC     DPTR
   \   00000D   E4           CLR     A
   \   00000E   F0           MOVX    @DPTR,A
   3373          }
   \   00000F   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_StartDevice?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_StartDevice

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateNwkStatus?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateNwkStatus

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_AnyClusterMatches?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_AnyClusterMatches

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessNodeDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessNodeDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessPowerDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessPowerDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessSimpleDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessSimpleDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessActiveEPReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessActiveEPReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ConvertOTAClusters?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ConvertOTAClusters

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMatchDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMatchDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessBindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_UpdateAddrManager?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_UpdateAddrManager

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessServerDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessServerDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessEndDeviceTimeoutReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessEndDeviceTimeoutReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_EndDeviceTimeoutCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_EndDeviceTimeoutCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtLqiReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLqiReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtNwkDiscReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtNwkDiscReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtRtgReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtRtgReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtDirectJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtDirectJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtLeaveReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtLeaveReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessMgmtPermitJoinReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessMgmtPermitJoinReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??NLME_PermitJoiningTimeout?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    NLME_PermitJoiningTimeout

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessUserDescReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessUserDescSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessUserDescSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ProcessDeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ProcessDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_BuildSimpleDescBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_BuildSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseEndDeviceBindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceBindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseBindUnbindReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseBindUnbindReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseAddrRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseAddrRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseNodeDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseNodeDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParsePowerDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParsePowerDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseSimpleDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseEPListRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEPListRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseServerDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseServerDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtLqiRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtLqiRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmNwkDiscRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmNwkDiscRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtRtgRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtRtgRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtBindRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtBindRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseUserDescRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseUserDescRsp

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseSimpleDescBuf?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseSimpleDescBuf

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseDeviceAnnce?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseDeviceAnnce

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtNwkUpdateNotify?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateNotify

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseMgmtNwkUpdateReq?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseMgmtNwkUpdateReq

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ZDO_ParseEndDeviceTimeoutRsp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ZDO_ParseEndDeviceTimeoutRsp

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "StartDevice ERR">`:
   \   000000   53746172     DB "StartDevice ERR"
   \            74446576
   \            69636520
   \            45525200

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "MODE unknown">`:
   \   000000   4D4F4445     DB "MODE unknown"
   \            20756E6B
   \            6E6F776E
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "End Device Bind">`:
   \   000000   456E6420     DB "End Device Bind"
   \            44657669
   \            63652042
   \            696E6400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Success Sent">`:
   \   000000   53756363     DB "Success Sent"
   \            65737320
   \            53656E74
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Timeout">`:
   \   000000   54696D65     DB "Timeout"
   \            6F757400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Match Desc Req">`:
   \   000000   4D617463     DB "Match Desc Req"
   \            68204465
   \            73632052
   \            657100  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Rsp Sent">`:
   \   000000   52737020     DB "Rsp Sent"
   \            53656E74
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Rsp Non Matched">`:
   \   000000   52737020     DB "Rsp Non Matched"
   \            4E6F6E20
   \            4D617463
   \            68656400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Non Matched">`:
   \   000000   4E6F6E20     DB "Non Matched"
   \            4D617463
   \            68656400

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_3e8:
   \   000000   E8030000     DD 1000
   3374          
   3375          /*********************************************************************
   3376          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK PSTACK XSTACK Function
   ------ ------ ------ --------
       0      0      0  NLME_PermitJoiningTimeout
       0      0     43  ZDO_AnyClusterMatches
       1      0     14  ZDO_BuildSimpleDescBuf
       0      0     39  ZDO_ConvertOTAClusters
       1      0     17  ZDO_EndDeviceTimeoutCB
                          0 0 12 -> HalLcdWriteString
                          0 0 17 -> ZDP_SendData
                          0 0 12 -> osal_mem_free
       2      0      0  ZDO_Init
                          2 0  0 -> APS_ReflectorInit
                          2 0  0 -> NLME_DeviceJoiningInit
                          2 0  0 -> sAddrExtCpy
       1      0     14  ZDO_ParseAddrRsp
                          0 0 14 -> osal_mem_alloc
                          0 0 14 -> sAddrExtCpy
       1      0     10  ZDO_ParseBindUnbindReq
                          0 0 10 -> sAddrExtCpy
       1      0     52  ZDO_ParseDeviceAnnce
                          0 0 10 -> sAddrExtCpy
       1      0     19  ZDO_ParseEPListRsp
                          0 0 16 -> osal_mem_alloc
                          0 0 19 -> osal_memcpy
       1      0     18  ZDO_ParseEndDeviceBindReq
                          0 0 18 -> ZDO_ConvertOTAClusters
                          0 0 18 -> osal_mem_alloc
                          0 0 18 -> sAddrExtCpy
       2      0      0  ZDO_ParseEndDeviceTimeoutRsp
       1      0     16  ZDO_ParseMgmNwkDiscRsp
                          0 0 16 -> osal_mem_alloc
                          0 0 16 -> sAddrExtCpy
       1      0     18  ZDO_ParseMgmtBindRsp
                          0 0 18 -> osal_mem_alloc
                          0 0 18 -> sAddrExtCpy
       1      0     16  ZDO_ParseMgmtLqiRsp
                          0 0 16 -> osal_mem_alloc
                          0 0 16 -> sAddrExtCpy
       1      0     27  ZDO_ParseMgmtNwkUpdateNotify
                          0 0 24 -> osal_build_uint32
                          0 0 24 -> osal_mem_alloc
                          0 0 27 -> osal_memcpy
       1      0     10  ZDO_ParseMgmtNwkUpdateReq
                          0 0 10 -> osal_build_uint32
       1      0     14  ZDO_ParseMgmtRtgRsp
                          0 0 14 -> osal_mem_alloc
       2      0     11  ZDO_ParseNodeDescRsp
       1      0     10  ZDO_ParsePowerDescRsp
       1      0      9  ZDO_ParseServerDiscRsp
       1      0     25  ZDO_ParseSimpleDescBuf
                          0 0 16 -> osal_mem_alloc
                          0 0 16 -> osal_mem_free
       1      0      9  ZDO_ParseSimpleDescRsp
                          0 0  9 -> ZDO_ParseSimpleDescBuf
       1      0     19  ZDO_ParseUserDescRsp
                          0 0 16 -> osal_mem_alloc
                          0 0 19 -> osal_memcpy
       0      0     21  ZDO_ProcessActiveEPReq
                          0 0 14 -> NLME_GetShortAddr
                          0 0 21 -> ZDP_EPRsp
                          0 0 14 -> afEndPoints
                          0 0 14 -> afNumEndPoints
       1      0     41  ZDO_ProcessBindUnbindReq
                          0 0 37 -> APSME_BindRequest
                          0 0 36 -> APSME_LookupNwkAddr
                          0 0 37 -> APSME_UnBindRequest
                          0 0 36 -> NLME_GetExtAddr
                          0 0 36 -> ZDApp_GetEmptyPendingBindReq
                          0 0 36 -> ZDApp_NVUpdate
                          0 0 36 -> ZDP_NwkAddrReq
                          0 0 41 -> ZDP_SendData
                          0 0 36 -> bindAddrIndexGet
                          0 0 39 -> osal_memcpy
                          0 0 40 -> osal_start_timerEx
                          0 0 36 -> sAddrExtCmp
                          0 0 36 -> sAddrExtCpy
       2      0     42  ZDO_ProcessDeviceAnnce
                          0 0 42 -> AddrMgrEntryLookupExt
                          0 0 42 -> AddrMgrEntryLookupNwk
                          0 0 42 -> AddrMgrEntryUpdate
                          0 0 42 -> AddrMgrExtAddrSet
                          0 0 42 -> AssocChangeNwkAddr
                          0 0 42 -> AssocGetWithExt
                          0 0 42 -> AssocRemove
                          0 0 42 -> NLME_CheckNewAddrSet
                          0 0 42 -> NLME_GetCoordExtAddr
                          0 0 42 -> NLME_GetCoordShortAddr
                          0 0 42 -> NLME_GetShortAddr
                          2 0 42 -> NLME_GetShortAddr
                          0 0 42 -> RTG_RemoveRtgEntry
                          0 0 42 -> ZDApp_NVUpdate
                          0 0 42 -> ZDO_ParseDeviceAnnce
                          0 0 42 -> ZMacSetReq
                          0 0 42 -> nwkNeighborRemoveAllStranded
                          0 0 42 -> nwkNeighborUpdateNwkAddr
                          0 0 42 -> osal_memset
                          0 0 42 -> sAddrExtCmp
       0      0     20  ZDO_ProcessEndDeviceTimeoutReq
                          0 0 15 -> AssocGetWithExt
                          0 0 15 -> ZDApp_NVUpdate
                          0 0 20 -> ZDP_SendData
       1      0     36  ZDO_ProcessMatchDescReq
                          0 0 29 -> HalLcdWriteScreen
                          0 0 29 -> NLME_IsAddressBroadcast
                          0 0 31 -> ZDO_AnyClusterMatches
                          0 0 29 -> ZDO_ConvertOTAClusters
                          0 0 36 -> ZDP_EPRsp
                          0 0 29 -> osal_mem_alloc
                          0 0 29 -> osal_mem_free
                          0 0 32 -> osal_memcpy
                          0 0 29 -> osal_msg_allocate
                          0 0 29 -> osal_msg_send
       0      0     29  ZDO_ProcessMgmtBindReq
                          0 0 24 -> APSME_GetRequest
                          0 0 29 -> ZDP_MgmtBindRsp
                          0 0 24 -> osal_mem_alloc
                          0 0 24 -> osal_mem_free
       1      0     16  ZDO_ProcessMgmtDirectJoinReq
                          0 0 11 -> NLME_DirectJoinRequest
                          0 0 16 -> ZDP_SendData
       1      0     23  ZDO_ProcessMgmtLeaveReq
                          0 0 18 -> AddrMgrExtAddrValid
                          0 0 18 -> NLME_GetExtAddr
                          0 0 18 -> NLME_LeaveReq
                          0 0 23 -> ZDP_SendData
                          0 0 18 -> sAddrExtCmp
       1      0     66  ZDO_ProcessMgmtLqiReq
                          0 0 61 -> AddrMgrEntryLookupNwk
                          0 0 61 -> AssocCount
                          0 0 61 -> AssocFindDevice
                          0 0 61 -> NLME_GetRequest
                          0 0 66 -> ZDP_MgmtLqiRsp
                          0 0 61 -> osal_mem_alloc
                          0 0 61 -> osal_mem_free
                          0 0 61 -> osal_memset
                          0 0 61 -> sAddrExtCpy
       1      0     17  ZDO_ProcessMgmtNwkDiscReq
                          0 0 17 -> NLME_NwkDiscReq2
                          0 0 17 -> NLME_NwkDiscTerm
                          0 0 17 -> osal_build_uint32
       1      0     16  ZDO_ProcessMgmtPermitJoinReq
                          0 0 11 -> NLME_PermitJoiningRequest
                          0 0 16 -> ZDP_SendData
       0      0     26  ZDO_ProcessMgmtRtgReq
                          0 0 21 -> NLME_GetRequest
                          0 0 26 -> ZDP_MgmtRtgRsp
                          0 0 21 -> osal_mem_alloc
                          0 0 21 -> osal_mem_free
       0      0     14  ZDO_ProcessNodeDescReq
                          0 0 14 -> ZDP_GenericRsp
                          0 0 12 -> ZDP_NodeDescMsg
       0      0     14  ZDO_ProcessPowerDescReq
                          0 0 14 -> ZDP_GenericRsp
                          0 0 12 -> ZDP_PowerDescMsg
       0      0     14  ZDO_ProcessServerDiscReq
                          0 0 14 -> ZDP_ServerDiscRsp
       0      0     12  ZDO_ProcessSimpleDescReq
                          0 0 12 -> ZDP_SimpleDescMsg
                          0 0 12 -> afFindSimpleDesc
                          0 0 12 -> osal_mem_free
       0      0     37  ZDO_ProcessUserDescReq
                          0 0 37 -> ZDP_GenericRsp
                          0 0 36 -> ZDP_UserDescRsp
                          0 0 37 -> osal_nv_read
       1      0     41  ZDO_ProcessUserDescSet
                          0 0 41 -> ZDP_SendData
                          0 0 39 -> osal_memcpy
                          0 0 40 -> osal_nv_write
       0      0     25  ZDO_StartDevice
                          0 0 21 -> HalLcdWriteScreen
                          0 0 21 -> NLME_NetworkDiscoveryRequest
                          0 0 21 -> NLME_OrphanJoinRequest
                          0 0 21 -> nwk_ScanJoiningOrphan
                          0 0 25 -> osal_start_timerEx
       2      0     13  ZDO_UpdateAddrManager
                          2 0 13 -> AddrMgrEntryUpdate
                          2 0 13 -> AddrMgrExtAddrSet
       1      0     12  ZDO_UpdateNwkStatus
                          0 0 12 -> NLME_GetExtAddr
                          0 0 12 -> NLME_GetShortAddr
                          0 0 12 -> osal_msg_allocate
                          0 0 12 -> osal_msg_find
                          0 0 12 -> osal_msg_send
                          0 0 12 -> osal_set_event


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "End Device Bind">
      13  ?<Constant "MODE unknown">
      15  ?<Constant "Match Desc Req">
      12  ?<Constant "Non Matched">
      16  ?<Constant "Rsp Non Matched">
       9  ?<Constant "Rsp Sent">
      16  ?<Constant "StartDevice ERR">
      13  ?<Constant "Success Sent">
       8  ?<Constant "Timeout">
       6  ??NLME_PermitJoiningTimeout?relay
       1  ??Subroutine141_0
       9  ??Subroutine142_0
       3  ??Subroutine143_0
       5  ??Subroutine144_0
       1  ??Subroutine145_0
       5  ??Subroutine146_0
       5  ??Subroutine147_0
       1  ??Subroutine148_0
       5  ??Subroutine149_0
       6  ??Subroutine150_0
       3  ??Subroutine151_0
       4  ??Subroutine152_0
       3  ??Subroutine153_0
       6  ??Subroutine154_0
       8  ??Subroutine155_0
       5  ??Subroutine156_0
       5  ??Subroutine157_0
       6  ??Subroutine158_0
       6  ??Subroutine159_0
       5  ??Subroutine160_0
       5  ??Subroutine161_0
       4  ??Subroutine162_0
       3  ??Subroutine163_0
       4  ??Subroutine164_0
       5  ??Subroutine165_0
       5  ??Subroutine166_0
      10  ??Subroutine167_0
       5  ??Subroutine168_0
      15  ??Subroutine169_0
       6  ??Subroutine170_0
       4  ??Subroutine171_0
       5  ??Subroutine172_0
       2  ??Subroutine173_0
       2  ??Subroutine174_0
       4  ??Subroutine175_0
       8  ??Subroutine176_0
       9  ??Subroutine177_0
       5  ??Subroutine178_0
       9  ??Subroutine179_0
       2  ??Subroutine180_0
       6  ??Subroutine181_0
      17  ??Subroutine182_0
       5  ??Subroutine183_0
       9  ??Subroutine184_0
       4  ??Subroutine185_0
       9  ??Subroutine186_0
       6  ??ZDO_AnyClusterMatches?relay
       6  ??ZDO_BuildSimpleDescBuf?relay
       6  ??ZDO_ConvertOTAClusters?relay
       6  ??ZDO_EndDeviceTimeoutCB?relay
       6  ??ZDO_Init?relay
       6  ??ZDO_ParseAddrRsp?relay
       6  ??ZDO_ParseBindUnbindReq?relay
       6  ??ZDO_ParseDeviceAnnce?relay
       6  ??ZDO_ParseEPListRsp?relay
       6  ??ZDO_ParseEndDeviceBindReq?relay
       6  ??ZDO_ParseEndDeviceTimeoutRsp?relay
       6  ??ZDO_ParseMgmNwkDiscRsp?relay
       6  ??ZDO_ParseMgmtBindRsp?relay
       6  ??ZDO_ParseMgmtLqiRsp?relay
       6  ??ZDO_ParseMgmtNwkUpdateNotify?relay
       6  ??ZDO_ParseMgmtNwkUpdateReq?relay
       6  ??ZDO_ParseMgmtRtgRsp?relay
       6  ??ZDO_ParseNodeDescRsp?relay
       6  ??ZDO_ParsePowerDescRsp?relay
       6  ??ZDO_ParseServerDiscRsp?relay
       6  ??ZDO_ParseSimpleDescBuf?relay
       6  ??ZDO_ParseSimpleDescRsp?relay
       6  ??ZDO_ParseUserDescRsp?relay
       6  ??ZDO_ProcessActiveEPReq?relay
       6  ??ZDO_ProcessBindUnbindReq?relay
       6  ??ZDO_ProcessDeviceAnnce?relay
       6  ??ZDO_ProcessEndDeviceTimeoutReq?relay
       6  ??ZDO_ProcessMatchDescReq?relay
       6  ??ZDO_ProcessMgmtBindReq?relay
       6  ??ZDO_ProcessMgmtDirectJoinReq?relay
       6  ??ZDO_ProcessMgmtLeaveReq?relay
       6  ??ZDO_ProcessMgmtLqiReq?relay
       6  ??ZDO_ProcessMgmtNwkDiscReq?relay
       6  ??ZDO_ProcessMgmtPermitJoinReq?relay
       6  ??ZDO_ProcessMgmtRtgReq?relay
       6  ??ZDO_ProcessNodeDescReq?relay
       6  ??ZDO_ProcessPowerDescReq?relay
       6  ??ZDO_ProcessServerDiscReq?relay
       6  ??ZDO_ProcessSimpleDescReq?relay
       6  ??ZDO_ProcessUserDescReq?relay
       6  ??ZDO_ProcessUserDescSet?relay
       6  ??ZDO_StartDevice?relay
       6  ??ZDO_UpdateAddrManager?relay
       6  ??ZDO_UpdateNwkStatus?relay
       7  ?Subroutine0
       2  ?Subroutine1
       2  ?Subroutine10
      13  ?Subroutine100
      13  ?Subroutine101
       4  ?Subroutine102
      10  ?Subroutine103
       5  ?Subroutine104
      11  ?Subroutine105
       5  ?Subroutine106
      20  ?Subroutine107
       7  ?Subroutine108
      11  ?Subroutine109
      38  ?Subroutine11
       1  ?Subroutine110
       8  ?Subroutine111
       8  ?Subroutine112
       7  ?Subroutine113
       9  ?Subroutine114
       6  ?Subroutine115
      17  ?Subroutine116
       5  ?Subroutine117
      13  ?Subroutine118
       7  ?Subroutine119
      23  ?Subroutine12
      13  ?Subroutine120
      12  ?Subroutine121
       4  ?Subroutine122
      10  ?Subroutine123
       7  ?Subroutine124
       7  ?Subroutine125
       6  ?Subroutine126
       3  ?Subroutine127
       1  ?Subroutine128
      10  ?Subroutine129
      24  ?Subroutine13
       7  ?Subroutine130
       6  ?Subroutine131
       3  ?Subroutine132
       9  ?Subroutine133
       7  ?Subroutine134
       8  ?Subroutine135
      13  ?Subroutine136
      15  ?Subroutine137
       6  ?Subroutine138
       7  ?Subroutine139
       7  ?Subroutine14
       9  ?Subroutine140
       6  ?Subroutine15
       8  ?Subroutine16
       4  ?Subroutine17
       7  ?Subroutine18
       4  ?Subroutine19
       5  ?Subroutine2
      12  ?Subroutine20
      15  ?Subroutine21
      17  ?Subroutine22
       5  ?Subroutine23
       1  ?Subroutine24
      21  ?Subroutine25
       7  ?Subroutine26
       4  ?Subroutine27
      13  ?Subroutine28
      18  ?Subroutine29
       3  ?Subroutine3
      13  ?Subroutine30
       6  ?Subroutine31
       7  ?Subroutine32
       5  ?Subroutine33
      11  ?Subroutine34
       8  ?Subroutine35
      12  ?Subroutine36
       6  ?Subroutine37
       6  ?Subroutine38
       5  ?Subroutine39
       3  ?Subroutine4
      10  ?Subroutine40
       4  ?Subroutine41
       4  ?Subroutine42
       4  ?Subroutine43
       4  ?Subroutine44
      10  ?Subroutine45
       5  ?Subroutine46
       5  ?Subroutine47
       5  ?Subroutine48
       6  ?Subroutine49
       4  ?Subroutine5
      17  ?Subroutine50
      23  ?Subroutine51
       3  ?Subroutine52
      23  ?Subroutine53
      16  ?Subroutine54
      15  ?Subroutine55
      10  ?Subroutine56
       4  ?Subroutine57
       8  ?Subroutine58
       9  ?Subroutine59
       5  ?Subroutine6
      16  ?Subroutine60
       3  ?Subroutine61
       4  ?Subroutine62
       2  ?Subroutine63
       4  ?Subroutine64
      13  ?Subroutine65
      17  ?Subroutine66
       1  ?Subroutine67
      10  ?Subroutine68
       6  ?Subroutine69
       5  ?Subroutine7
       6  ?Subroutine70
      12  ?Subroutine71
      11  ?Subroutine72
      11  ?Subroutine73
       7  ?Subroutine74
      26  ?Subroutine75
       6  ?Subroutine76
       8  ?Subroutine77
      12  ?Subroutine78
       4  ?Subroutine79
       5  ?Subroutine8
      11  ?Subroutine80
       7  ?Subroutine81
       5  ?Subroutine82
       6  ?Subroutine83
       6  ?Subroutine84
      14  ?Subroutine85
       9  ?Subroutine86
      10  ?Subroutine87
       5  ?Subroutine88
       4  ?Subroutine89
       4  ?Subroutine9
       4  ?Subroutine90
       4  ?Subroutine91
       6  ?Subroutine92
       3  ?Subroutine93
       3  ?Subroutine94
       3  ?Subroutine95
      19  ?Subroutine96
      14  ?Subroutine97
       4  ?Subroutine98
       4  ?Subroutine99
       3  NLME_PermitJoiningTimeout
      52  ZDOBuildBuf
      94  ZDO_AnyClusterMatches
     177  ZDO_BuildSimpleDescBuf
      65  ZDO_ConvertOTAClusters
       2  ZDO_EDBind
     216  ZDO_EndDeviceTimeoutCB
      28  ZDO_Init
     213  ZDO_ParseAddrRsp
     117  ZDO_ParseBindUnbindReq
      63  ZDO_ParseDeviceAnnce
     112  ZDO_ParseEPListRsp
     264  ZDO_ParseEndDeviceBindReq
      18  ZDO_ParseEndDeviceTimeoutRsp
     201  ZDO_ParseMgmNwkDiscRsp
     193  ZDO_ParseMgmtBindRsp
     151  ZDO_ParseMgmtLqiRsp
     210  ZDO_ParseMgmtNwkUpdateNotify
      90  ZDO_ParseMgmtNwkUpdateReq
     171  ZDO_ParseMgmtRtgRsp
     238  ZDO_ParseNodeDescRsp
     169  ZDO_ParsePowerDescRsp
      52  ZDO_ParseServerDiscRsp
     323  ZDO_ParseSimpleDescBuf
      29  ZDO_ParseSimpleDescRsp
     123  ZDO_ParseUserDescRsp
     121  ZDO_ProcessActiveEPReq
     613  ZDO_ProcessBindUnbindReq
     504  ZDO_ProcessDeviceAnnce
     257  ZDO_ProcessEndDeviceTimeoutReq
    1036  ZDO_ProcessMatchDescReq
     259  ZDO_ProcessMgmtBindReq
      84  ZDO_ProcessMgmtDirectJoinReq
     200  ZDO_ProcessMgmtLeaveReq
     742  ZDO_ProcessMgmtLqiReq
     123  ZDO_ProcessMgmtNwkDiscReq
      86  ZDO_ProcessMgmtPermitJoinReq
     261  ZDO_ProcessMgmtRtgReq
      71  ZDO_ProcessNodeDescReq
      71  ZDO_ProcessPowerDescReq
      71  ZDO_ProcessServerDiscReq
     135  ZDO_ProcessSimpleDescReq
     201  ZDO_ProcessUserDescReq
     302  ZDO_ProcessUserDescSet
     213  ZDO_StartDevice
      57  ZDO_UpdateAddrManager
     119  ZDO_UpdateNwkStatus
       4  __Constant_3e8
       4  apsChannelMask
       1  discRetries
       2  matchED
       1  scanCnt

 
 10 306 bytes in segment BANKED_CODE
    270 bytes in segment BANK_RELAYS
    122 bytes in segment XDATA_ROM_C
     62 bytes in segment XDATA_Z
 
 10 576 bytes of CODE  memory
    118 bytes of CONST memory (+ 4 bytes shared)
     62 bytes of XDATA memory

Errors: none
Warnings: none
